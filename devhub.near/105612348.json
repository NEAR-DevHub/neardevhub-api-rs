[
  {
    "id": "1406157013",
    "receipt_id": "DvRA4HfGzVyfaZGhiMzKzocrbUXzXucxWeuPmkfgxcne",
    "predecessor_account_id": "devhub.near",
    "receiver_account_id": "social.near",
    "receipt_kind": "ACTION",
    "receipt_block": {
      "block_hash": "GyF3yjGxep69mJYKZ3z5TUG6veF2iPBJYaLJBkntW9Ha",
      "block_height": 105635196,
      "block_timestamp": 1699906609283839500
    },
    "receipt_outcome": {
      "gas_burnt": 16109235877716,
      "tokens_burnt": 1.6109235877716e+21,
      "executor_account_id": "social.near",
      "status": true
    },
    "transaction_hash": "9CAY8FUrwXrhLdmLf5Bow163Tuw72mmJtfJPWdoS8E38",
    "included_in_block_hash": "BRq4bFDTkED2mw3ec1Yom31MmWK6Wn9JJBDj4vw7rrgg",
    "block_timestamp": "1699906608468547837",
    "block": {
      "block_height": 105635195
    },
    "receipt_conversion_tokens_burnt": "253870035003000000000",
    "actions": [
      {
        "action": "FUNCTION_CALL",
        "method": "set",
        "deposit": 0,
        "fee": 1.6109235877716e+21,
        "args": "{\"data\": {\"devhub.near\": {\"widget\": {\"devhub.page.feed\": {\"\": \"const { author, recency, tag } = props;\\\\\\\\n\\\\\\\\nconst { href } = VM.require(\\\\\\\\\\\\\\\"devhub.near/widget/core.lib.url\\\\\\\\\\\\\\\");\\\\\\\\n\\\\\\\\nif (!href) {\\\\\\\\n  return <p>Loading modules...</p>;\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst Gradient = styled.div`\\\\\\\\n  height: 250px;\\\\\\\\n  text-align: center;\\\\\\\\n  background: radial-gradient(\\\\\\\\n    circle,\\\\\\\\n    rgba(29, 55, 57, 1) 30%,\\\\\\\\n    rgba(24, 24, 24, 1) 80%\\\\\\\\n  );\\\\\\\\n\\\\\\\\n  font-family: Arial, sans-serif;\\\\\\\\n\\\\\\\\n  .text-primary-gradient {\\\\\\\\n    color: #53fdca;\\\\\\\\n    -webkit-text-fill-color: transparent;\\\\\\\\n    background-image: linear-gradient(#8e76ba, #1ed2f0);\\\\\\\\n    -webkit-background-clip: text;\\\\\\\\n    background-clip: text;\\\\\\\\n  }\\\\\\\\n\\\\\\\\n  .subtitle-above {\\\\\\\\n    font-size: 18px;\\\\\\\\n    letter-spacing: 1px;\\\\\\\\n    font-family: Courier, monospace;\\\\\\\\n  }\\\\\\\\n\\\\\\\\n  .subtitle-below {\\\\\\\\n    font-size: 16px;\\\\\\\\n  }\\\\\\\\n\\\\\\\\n  .slogan {\\\\\\\\n    font-weight: 600;\\\\\\\\n    font-size: 60px;\\\\\\\\n  }\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst FeedPage = ({ recency, tag }) => {\\\\\\\\n  return (\\\\\\\\n    <div className=\\\\\\\\\\\\\\\"w-100\\\\\\\\\\\\\\\">\\\\\\\\n      <Widget src={`devhub.near/widget/devhub.components.island.banner`} />\\\\\\\\n      <Widget\\\\\\\\n        src={\\\\\\\\\\\\\\\"devhub.near/widget/devhub.feature.post-search.panel\\\\\\\\\\\\\\\"}\\\\\\\\n        props={{\\\\\\\\n          hideHeader: false,\\\\\\\\n          children: (\\\\\\\\n            <Widget\\\\\\\\n              src={\\\\\\\\n                \\\\\\\\\\\\\\\"devhub.near/widget/devhub.components.molecule.PostControls\\\\\\\\\\\\\\\"\\\\\\\\n              }\\\\\\\\n              props={{\\\\\\\\n                title: \\\\\\\\\\\\\\\"Post\\\\\\\\\\\\\\\",\\\\\\\\n                href: href({\\\\\\\\n                  widgetSrc: \\\\\\\\\\\\\\\"devhub.near/widget/app\\\\\\\\\\\\\\\",\\\\\\\\n                  params: { page: \\\\\\\\\\\\\\\"create\\\\\\\\\\\\\\\" },\\\\\\\\n                }),\\\\\\\\n              }}\\\\\\\\n            />\\\\\\\\n          ),\\\\\\\\n          recency,\\\\\\\\n          tag,\\\\\\\\n          author,\\\\\\\\n          transactionHashes: props.transactionHashes,\\\\\\\\n        }}\\\\\\\\n      />\\\\\\\\n    </div>\\\\\\\\n  );\\\\\\\\n};\\\\\\\\n\\\\\\\\nreturn FeedPage(props);\\\\\\\\n\"}, \"devhub.entity.post.Post\": {\"\": \"// Ideally, this would be a page\\\\\\\\n\\\\\\\\nconst { href } = VM.require(\\\\\\\\\\\\\\\"devhub.near/widget/core.lib.url\\\\\\\\\\\\\\\");\\\\\\\\n\\\\\\\\nconst { draftState, onDraftStateChange } = VM.require(\\\\\\\\n  \\\\\\\\\\\\\\\"devhub.near/widget/devhub.entity.post.draft\\\\\\\\\\\\\\\"\\\\\\\\n);\\\\\\\\n\\\\\\\\nif (!href) {\\\\\\\\n  return <p>Loading modules...</p>;\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst ButtonWithHover = styled.button`\\\\\\\\n  background-color: #fff;\\\\\\\\n  &:hover {\\\\\\\\n    background-color: #e9ecef;\\\\\\\\n    color: #000;\\\\\\\\n  }\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst postId = props.post.id ?? (props.id ? parseInt(props.id) : 0);\\\\\\\\n\\\\\\\\nconst post =\\\\\\\\n  props.post ??\\\\\\\\n  Near.view(\\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"get_post\\\\\\\\\\\\\\\", { post_id: postId });\\\\\\\\n\\\\\\\\nif (!post) {\\\\\\\\n  return <div>Loading ...</div>;\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst referral = props.referral;\\\\\\\\nconst currentTimestamp = props.timestamp ?? post.snapshot.timestamp;\\\\\\\\nconst compareTimestamp = props.compareTimestamp ?? \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\";\\\\\\\\nconst swapTimestamps = currentTimestamp < compareTimestamp;\\\\\\\\n\\\\\\\\nconst snapshotHistory = post.snapshot_history;\\\\\\\\n\\\\\\\\nconst snapshot =\\\\\\\\n  currentTimestamp === post.snapshot.timestamp\\\\\\\\n    ? post.snapshot\\\\\\\\n    : (snapshotHistory &&\\\\\\\\n        snapshotHistory.find((s) => s.timestamp === currentTimestamp)) ??\\\\\\\\n      null;\\\\\\\\n\\\\\\\\nconst compareSnapshot =\\\\\\\\n  compareTimestamp === post.snapshot.timestamp\\\\\\\\n    ? post.snapshot\\\\\\\\n    : (snapshotHistory &&\\\\\\\\n        snapshotHistory.find((s) => s.timestamp === compareTimestamp)) ??\\\\\\\\n      null;\\\\\\\\n\\\\\\\\n// If this post is displayed under another post. Used to limit the size.\\\\\\\\nconst isUnderPost = props.isUnderPost ? true : false;\\\\\\\\n\\\\\\\\nconst parentId = Near.view(\\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"get_parent_id\\\\\\\\\\\\\\\", {\\\\\\\\n  post_id: postId,\\\\\\\\n});\\\\\\\\n\\\\\\\\nconst childPostIdsUnordered =\\\\\\\\n  Near.view(\\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"get_children_ids\\\\\\\\\\\\\\\", {\\\\\\\\n    post_id: postId,\\\\\\\\n  }) ?? [];\\\\\\\\n\\\\\\\\nconst childPostIds = props.isPreview ? [] : childPostIdsUnordered.reverse();\\\\\\\\nconst expandable = props.isPreview ? false : props.expandable ?? false;\\\\\\\\nconst defaultExpanded = expandable ? props.defaultExpanded : true;\\\\\\\\n\\\\\\\\nfunction readableDate(timestamp) {\\\\\\\\n  var a = new Date(timestamp);\\\\\\\\n  return a.toDateString() + \\\\\\\\\\\\\\\" \\\\\\\\\\\\\\\" + a.toLocaleTimeString();\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst timestamp = readableDate(\\\\\\\\n  snapshot.timestamp ? snapshot.timestamp / 1000000 : Date.now()\\\\\\\\n);\\\\\\\\n\\\\\\\\nconst postSearchKeywords = props.searchKeywords ? (\\\\\\\\n  <div style={{ \\\\\\\\\\\\\\\"font-family\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"monospace\\\\\\\\\\\\\\\" }} key=\\\\\\\\\\\\\\\"post-search-keywords\\\\\\\\\\\\\\\">\\\\\\\\n    <span>Found keywords: </span>\\\\\\\\n\\\\\\\\n    {props.searchKeywords.map((tag) => (\\\\\\\\n      <Widget\\\\\\\\n        src={\\\\\\\\\\\\\\\"devhub.near/widget/devhub.components.atom.Tag\\\\\\\\\\\\\\\"}\\\\\\\\n        props={{ linkTo: \\\\\\\\\\\\\\\"Feed\\\\\\\\\\\\\\\", tag }}\\\\\\\\n      />\\\\\\\\n    ))}\\\\\\\\n  </div>\\\\\\\\n) : (\\\\\\\\n  <div key=\\\\\\\\\\\\\\\"post-search-keywords\\\\\\\\\\\\\\\"></div>\\\\\\\\n);\\\\\\\\n\\\\\\\\nconst searchKeywords = props.searchKeywords ? (\\\\\\\\n  <div class=\\\\\\\\\\\\\\\"mb-4\\\\\\\\\\\\\\\" key=\\\\\\\\\\\\\\\"search-keywords\\\\\\\\\\\\\\\">\\\\\\\\n    <small class=\\\\\\\\\\\\\\\"text-muted\\\\\\\\\\\\\\\">{postSearchKeywords}</small>\\\\\\\\n  </div>\\\\\\\\n) : (\\\\\\\\n  <div key=\\\\\\\\\\\\\\\"search-keywords\\\\\\\\\\\\\\\"></div>\\\\\\\\n);\\\\\\\\n\\\\\\\\nconst allowedToEdit =\\\\\\\\n  !props.isPreview &&\\\\\\\\n  Near.view(\\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"is_allowed_to_edit\\\\\\\\\\\\\\\", {\\\\\\\\n    post_id: postId,\\\\\\\\n    editor: context.accountId,\\\\\\\\n  });\\\\\\\\n\\\\\\\\nconst btnEditorWidget = (postType, name) => {\\\\\\\\n  return (\\\\\\\\n    <li>\\\\\\\\n      <a\\\\\\\\n        class=\\\\\\\\\\\\\\\"dropdown-item\\\\\\\\\\\\\\\"\\\\\\\\n        role=\\\\\\\\\\\\\\\"button\\\\\\\\\\\\\\\"\\\\\\\\n        onClick={() =>\\\\\\\\n          State.update({ postType, editorType: \\\\\\\\\\\\\\\"EDIT\\\\\\\\\\\\\\\", showEditor: true })\\\\\\\\n        }\\\\\\\\n      >\\\\\\\\n        {name}\\\\\\\\n      </a>\\\\\\\\n    </li>\\\\\\\\n  );\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst editControl = allowedToEdit ? (\\\\\\\\n  <div class=\\\\\\\\\\\\\\\"btn-group\\\\\\\\\\\\\\\" role=\\\\\\\\\\\\\\\"group\\\\\\\\\\\\\\\">\\\\\\\\n    <a\\\\\\\\n      class=\\\\\\\\\\\\\\\"card-link px-2\\\\\\\\\\\\\\\"\\\\\\\\n      role=\\\\\\\\\\\\\\\"button\\\\\\\\\\\\\\\"\\\\\\\\n      title=\\\\\\\\\\\\\\\"Edit post\\\\\\\\\\\\\\\"\\\\\\\\n      data-bs-toggle=\\\\\\\\\\\\\\\"dropdown\\\\\\\\\\\\\\\"\\\\\\\\n      aria-expanded=\\\\\\\\\\\\\\\"false\\\\\\\\\\\\\\\"\\\\\\\\n      type=\\\\\\\\\\\\\\\"button\\\\\\\\\\\\\\\"\\\\\\\\n    >\\\\\\\\n      <div class=\\\\\\\\\\\\\\\"bi bi-pencil-square\\\\\\\\\\\\\\\"></div>\\\\\\\\n    </a>\\\\\\\\n\\\\\\\\n    <ul class=\\\\\\\\\\\\\\\"dropdown-menu\\\\\\\\\\\\\\\">\\\\\\\\n      {btnEditorWidget(\\\\\\\\\\\\\\\"Idea\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"Edit as an idea\\\\\\\\\\\\\\\")}\\\\\\\\n      {btnEditorWidget(\\\\\\\\\\\\\\\"Solution\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"Edit as a solution\\\\\\\\\\\\\\\")}\\\\\\\\n      {btnEditorWidget(\\\\\\\\\\\\\\\"Attestation\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"Edit as an attestation\\\\\\\\\\\\\\\")}\\\\\\\\n      {btnEditorWidget(\\\\\\\\\\\\\\\"Sponsorship\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"Edit as a sponsorship\\\\\\\\\\\\\\\")}\\\\\\\\n      {btnEditorWidget(\\\\\\\\\\\\\\\"Comment\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"Edit as a comment\\\\\\\\\\\\\\\")}\\\\\\\\n    </ul>\\\\\\\\n  </div>\\\\\\\\n) : (\\\\\\\\n  <div></div>\\\\\\\\n);\\\\\\\\n\\\\\\\\nconst shareButton = props.isPreview ? (\\\\\\\\n  <div></div>\\\\\\\\n) : (\\\\\\\\n  <Link\\\\\\\\n    class=\\\\\\\\\\\\\\\"card-link text-dark\\\\\\\\\\\\\\\"\\\\\\\\n    to={href({\\\\\\\\n      widgetSrc: \\\\\\\\\\\\\\\"devhub.near/widget/app\\\\\\\\\\\\\\\",\\\\\\\\n      params: { page: \\\\\\\\\\\\\\\"post\\\\\\\\\\\\\\\", id: postId },\\\\\\\\n    })}\\\\\\\\n    role=\\\\\\\\\\\\\\\"button\\\\\\\\\\\\\\\"\\\\\\\\n    target=\\\\\\\\\\\\\\\"_blank\\\\\\\\\\\\\\\"\\\\\\\\n    title=\\\\\\\\\\\\\\\"Open in new tab\\\\\\\\\\\\\\\"\\\\\\\\n  >\\\\\\\\n    <div class=\\\\\\\\\\\\\\\"bi bi-share\\\\\\\\\\\\\\\"></div>\\\\\\\\n  </Link>\\\\\\\\n);\\\\\\\\n\\\\\\\\nconst ProfileCardContainer = styled.div`\\\\\\\\n  @media screen and (max-width: 960px) {\\\\\\\\n    width: 100%;\\\\\\\\n  }\\\\\\\\n`;\\\\\\\\n\\\\\\\\n// card-header\\\\\\\\nconst header = (\\\\\\\\n  <div key=\\\\\\\\\\\\\\\"header\\\\\\\\\\\\\\\">\\\\\\\\n    <small class=\\\\\\\\\\\\\\\"text-muted\\\\\\\\\\\\\\\">\\\\\\\\n      <div class=\\\\\\\\\\\\\\\"row justify-content-between\\\\\\\\\\\\\\\">\\\\\\\\n        <div class=\\\\\\\\\\\\\\\"d-flex align-items-center flex-wrap\\\\\\\\\\\\\\\">\\\\\\\\n          <ProfileCardContainer>\\\\\\\\n            <Widget\\\\\\\\n              src={\\\\\\\\n                \\\\\\\\\\\\\\\"devhub.near/widget/devhub.components.molecule.ProfileCard\\\\\\\\\\\\\\\"\\\\\\\\n              }\\\\\\\\n              props={{\\\\\\\\n                accountId: post.author_id,\\\\\\\\n                nearDevGovGigsWidgetsAccountId: \\\\\\\\\\\\\\\"devhub.near\\\\\\\\\\\\\\\",\\\\\\\\n              }}\\\\\\\\n            />\\\\\\\\n          </ProfileCardContainer>\\\\\\\\n\\\\\\\\n          <div class=\\\\\\\\\\\\\\\"d-flex ms-auto\\\\\\\\\\\\\\\">\\\\\\\\n            {editControl}\\\\\\\\n            {timestamp}\\\\\\\\n\\\\\\\\n            <Widget\\\\\\\\n              src={\\\\\\\\\\\\\\\"devhub.near/widget/devhub.entity.post.History\\\\\\\\\\\\\\\"}\\\\\\\\n              props={{\\\\\\\\n                post,\\\\\\\\n                timestamp: currentTimestamp,\\\\\\\\n              }}\\\\\\\\n            />\\\\\\\\n            {shareButton}\\\\\\\\n          </div>\\\\\\\\n        </div>\\\\\\\\n      </div>\\\\\\\\n    </small>\\\\\\\\n  </div>\\\\\\\\n);\\\\\\\\n\\\\\\\\n// const emptyIcons = {\\\\\\\\n//   Idea: \\\\\\\\\\\\\\\"bi-lightbulb\\\\\\\\\\\\\\\",\\\\\\\\n//   Comment: \\\\\\\\\\\\\\\"bi-chat\\\\\\\\\\\\\\\",\\\\\\\\n//   Solution: \\\\\\\\\\\\\\\"bi-rocket\\\\\\\\\\\\\\\",\\\\\\\\n//   Attestation: \\\\\\\\\\\\\\\"bi-check-circle\\\\\\\\\\\\\\\",\\\\\\\\n//   Sponsorship: \\\\\\\\\\\\\\\"bi-cash-coin\\\\\\\\\\\\\\\",\\\\\\\\n//   Github: \\\\\\\\\\\\\\\"bi-github\\\\\\\\\\\\\\\",\\\\\\\\n//   Like: \\\\\\\\\\\\\\\"bi-heart\\\\\\\\\\\\\\\",\\\\\\\\n//   Reply: \\\\\\\\\\\\\\\"bi-reply\\\\\\\\\\\\\\\",\\\\\\\\n// };\\\\\\\\n\\\\\\\\nconst emptyIcons = {\\\\\\\\n  Idea: \\\\\\\\\\\\\\\"\\\\\\\\u{1f4a1}\\\\\\\\\\\\\\\",\\\\\\\\n  Comment: \\\\\\\\\\\\\\\"bi-chat\\\\\\\\\\\\\\\",\\\\\\\\n  Solution: \\\\\\\\\\\\\\\"\\\\\\\\u{1f680}\\\\\\\\\\\\\\\",\\\\\\\\n  Attestation: \\\\\\\\\\\\\\\"\\\\\\\\u{2705}\\\\\\\\\\\\\\\",\\\\\\\\n  Sponsorship: \\\\\\\\\\\\\\\"\\\\\\\\u{1fa99}\\\\\\\\\\\\\\\",\\\\\\\\n  Github: \\\\\\\\\\\\\\\"bi-github\\\\\\\\\\\\\\\",\\\\\\\\n  Like: \\\\\\\\\\\\\\\"bi-heart\\\\\\\\\\\\\\\",\\\\\\\\n  Reply: \\\\\\\\\\\\\\\"bi-reply\\\\\\\\\\\\\\\",\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst fillIcons = {\\\\\\\\n  Idea: \\\\\\\\\\\\\\\"\\\\\\\\u{1f4a1}\\\\\\\\\\\\\\\",\\\\\\\\n  Comment: \\\\\\\\\\\\\\\"bi-chat-fill\\\\\\\\\\\\\\\",\\\\\\\\n  Solution: \\\\\\\\\\\\\\\"\\\\\\\\u{1f680}\\\\\\\\\\\\\\\",\\\\\\\\n  Attestation: \\\\\\\\\\\\\\\"\\\\\\\\u{2705}\\\\\\\\\\\\\\\",\\\\\\\\n  Sponsorship: \\\\\\\\\\\\\\\"\\\\\\\\u{1fa99}\\\\\\\\\\\\\\\",\\\\\\\\n  Github: \\\\\\\\\\\\\\\"bi-github\\\\\\\\\\\\\\\",\\\\\\\\n  Like: \\\\\\\\\\\\\\\"bi-heart-fill\\\\\\\\\\\\\\\",\\\\\\\\n  Reply: \\\\\\\\\\\\\\\"bi-reply-fill\\\\\\\\\\\\\\\",\\\\\\\\n};\\\\\\\\n\\\\\\\\n// Trigger saving this widget.\\\\\\\\n\\\\\\\\nconst borders = {\\\\\\\\n  Idea: \\\\\\\\\\\\\\\"border-light\\\\\\\\\\\\\\\",\\\\\\\\n  Comment: \\\\\\\\\\\\\\\"border-light\\\\\\\\\\\\\\\",\\\\\\\\n  Solution: \\\\\\\\\\\\\\\"border-light\\\\\\\\\\\\\\\",\\\\\\\\n  Attestation: \\\\\\\\\\\\\\\"border-light\\\\\\\\\\\\\\\",\\\\\\\\n  Sponsorship: \\\\\\\\\\\\\\\"border-light\\\\\\\\\\\\\\\",\\\\\\\\n  Github: \\\\\\\\\\\\\\\"border-light\\\\\\\\\\\\\\\",\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst containsLike = props.isPreview\\\\\\\\n  ? false\\\\\\\\n  : post.likes.find((l) => l.author_id == context.accountId);\\\\\\\\nconst likeBtnClass = containsLike ? fillIcons.Like : emptyIcons.Like;\\\\\\\\n// This must be outside onLike, because Near.view returns null at first, and when the view call finished, it returns true/false.\\\\\\\\n// If checking this inside onLike, it will give `null` and we cannot tell the result is true or false.\\\\\\\\nlet grantNotify = Near.view(\\\\\\\\\\\\\\\"social.near\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"is_write_permission_granted\\\\\\\\\\\\\\\", {\\\\\\\\n  predecessor_id: \\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\",\\\\\\\\n  key: context.accountId + \\\\\\\\\\\\\\\"/index/notify\\\\\\\\\\\\\\\",\\\\\\\\n});\\\\\\\\n\\\\\\\\nif (grantNotify === null) {\\\\\\\\n  return;\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst onLike = () => {\\\\\\\\n  if (!context.accountId) {\\\\\\\\n    return;\\\\\\\\n  }\\\\\\\\n\\\\\\\\n  let likeTxn = [\\\\\\\\n    {\\\\\\\\n      contractName: \\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\",\\\\\\\\n      methodName: \\\\\\\\\\\\\\\"add_like\\\\\\\\\\\\\\\",\\\\\\\\n      args: {\\\\\\\\n        post_id: postId,\\\\\\\\n      },\\\\\\\\n      deposit: Big(10).pow(21).mul(2),\\\\\\\\n      gas: Big(10).pow(12).mul(100),\\\\\\\\n    },\\\\\\\\n  ];\\\\\\\\n\\\\\\\\n  if (grantNotify === false) {\\\\\\\\n    likeTxn.unshift({\\\\\\\\n      contractName: \\\\\\\\\\\\\\\"social.near\\\\\\\\\\\\\\\",\\\\\\\\n      methodName: \\\\\\\\\\\\\\\"grant_write_permission\\\\\\\\\\\\\\\",\\\\\\\\n      args: {\\\\\\\\n        predecessor_id: \\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\",\\\\\\\\n        keys: [context.accountId + \\\\\\\\\\\\\\\"/index/notify\\\\\\\\\\\\\\\"],\\\\\\\\n      },\\\\\\\\n      deposit: Big(10).pow(23),\\\\\\\\n      gas: Big(10).pow(12).mul(30),\\\\\\\\n    });\\\\\\\\n  }\\\\\\\\n\\\\\\\\n  Near.call(likeTxn);\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst btnCreatorWidget = (postType, icon, name, desc) => {\\\\\\\\n  return (\\\\\\\\n    <li class=\\\\\\\\\\\\\\\"py-1\\\\\\\\\\\\\\\">\\\\\\\\n      <a\\\\\\\\n        class=\\\\\\\\\\\\\\\"dropdown-item text-decoration-none d-flex align-items-center lh-sm\\\\\\\\\\\\\\\"\\\\\\\\n        style={{ color: \\\\\\\\\\\\\\\"rgb(55,109,137)\\\\\\\\\\\\\\\" }}\\\\\\\\n        role=\\\\\\\\\\\\\\\"button\\\\\\\\\\\\\\\"\\\\\\\\n        onClick={() =>\\\\\\\\n          State.update({ postType, editorType: \\\\\\\\\\\\\\\"CREATE\\\\\\\\\\\\\\\", showEditor: true })\\\\\\\\n        }\\\\\\\\n      >\\\\\\\\n        <i class={`bi ${icon}`} style={{ fontSize: \\\\\\\\\\\\\\\"1.5rem\\\\\\\\\\\\\\\" }}>\\\\\\\\n          {\\\\\\\\\\\\\\\" \\\\\\\\\\\\\\\"}\\\\\\\\n        </i>\\\\\\\\n\\\\\\\\n        <div class=\\\\\\\\\\\\\\\"ps-2 text-wrap\\\\\\\\\\\\\\\" style={{ width: \\\\\\\\\\\\\\\"18rem\\\\\\\\\\\\\\\" }}>\\\\\\\\n          <div>{name}</div>\\\\\\\\n          <small class=\\\\\\\\\\\\\\\"fw-light text-secondary\\\\\\\\\\\\\\\">{desc}</small>\\\\\\\\n        </div>\\\\\\\\n      </a>\\\\\\\\n    </li>\\\\\\\\n  );\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst FooterButtonsContianer = styled.div`\\\\\\\\n  width: 66.66666667%;\\\\\\\\n\\\\\\\\n  @media screen and (max-width: 960px) {\\\\\\\\n    width: 100%;\\\\\\\\n  }\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst buttonsFooter = props.isPreview ? null : (\\\\\\\\n  <div class=\\\\\\\\\\\\\\\"row\\\\\\\\\\\\\\\" key=\\\\\\\\\\\\\\\"buttons-footer\\\\\\\\\\\\\\\">\\\\\\\\n    <FooterButtonsContianer>\\\\\\\\n      <div class=\\\\\\\\\\\\\\\"btn-group\\\\\\\\\\\\\\\" role=\\\\\\\\\\\\\\\"group\\\\\\\\\\\\\\\" aria-label=\\\\\\\\\\\\\\\"Basic outlined example\\\\\\\\\\\\\\\">\\\\\\\\n        <ButtonWithHover\\\\\\\\n          type=\\\\\\\\\\\\\\\"button\\\\\\\\\\\\\\\"\\\\\\\\n          class=\\\\\\\\\\\\\\\"btn d-flex align-items-center\\\\\\\\\\\\\\\"\\\\\\\\n          style={{ border: \\\\\\\\\\\\\\\"0px\\\\\\\\\\\\\\\" }}\\\\\\\\n          onClick={onLike}\\\\\\\\n        >\\\\\\\\n          <i class={`bi ${likeBtnClass}`}> </i>\\\\\\\\n          {post.likes.length == 0 ? (\\\\\\\\n            \\\\\\\\\\\\\\\"Like\\\\\\\\\\\\\\\"\\\\\\\\n          ) : (\\\\\\\\n            <Widget\\\\\\\\n              // TODO: LEGACY.\\\\\\\\n              src=\\\\\\\\\\\\\\\"devgovgigs.near/widget/gigs-board.components.layout.LikeButton.Faces\\\\\\\\\\\\\\\"\\\\\\\\n              props={{\\\\\\\\n                likesByUsers: Object.fromEntries(\\\\\\\\n                  post.likes.map(({ author_id }) => [author_id, \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\"])\\\\\\\\n                ),\\\\\\\\n              }}\\\\\\\\n            />\\\\\\\\n          )}\\\\\\\\n        </ButtonWithHover>\\\\\\\\n\\\\\\\\n        <div class=\\\\\\\\\\\\\\\"btn-group\\\\\\\\\\\\\\\" role=\\\\\\\\\\\\\\\"group\\\\\\\\\\\\\\\">\\\\\\\\n          <ButtonWithHover\\\\\\\\n            type=\\\\\\\\\\\\\\\"button\\\\\\\\\\\\\\\"\\\\\\\\n            class=\\\\\\\\\\\\\\\"btn\\\\\\\\\\\\\\\"\\\\\\\\n            style={{ border: \\\\\\\\\\\\\\\"0px\\\\\\\\\\\\\\\" }}\\\\\\\\n            data-bs-toggle=\\\\\\\\\\\\\\\"dropdown\\\\\\\\\\\\\\\"\\\\\\\\n            aria-expanded=\\\\\\\\\\\\\\\"false\\\\\\\\\\\\\\\"\\\\\\\\n          >\\\\\\\\n            \\\\\\\\u{21aa} Reply\\\\\\\\n          </ButtonWithHover>\\\\\\\\n          <ul class=\\\\\\\\\\\\\\\"dropdown-menu\\\\\\\\\\\\\\\">\\\\\\\\n            {btnCreatorWidget(\\\\\\\\n              \\\\\\\\\\\\\\\"Idea\\\\\\\\\\\\\\\",\\\\\\\\n              emptyIcons.Idea,\\\\\\\\n              \\\\\\\\\\\\\\\"Idea\\\\\\\\\\\\\\\",\\\\\\\\n              \\\\\\\\\\\\\\\"Get feedback from the community about a problem, opportunity, or need.\\\\\\\\\\\\\\\"\\\\\\\\n            )}\\\\\\\\n            {btnCreatorWidget(\\\\\\\\n              \\\\\\\\\\\\\\\"Solution\\\\\\\\\\\\\\\",\\\\\\\\n              emptyIcons.Solution,\\\\\\\\n              \\\\\\\\\\\\\\\"Solution\\\\\\\\\\\\\\\",\\\\\\\\n              \\\\\\\\\\\\\\\"Provide a specific proposal or implementation to an idea, optionally requesting funding.\\\\\\\\\\\\\\\"\\\\\\\\n            )}\\\\\\\\n            {btnCreatorWidget(\\\\\\\\n              \\\\\\\\\\\\\\\"Attestation\\\\\\\\\\\\\\\",\\\\\\\\n              emptyIcons.Attestation,\\\\\\\\n              \\\\\\\\\\\\\\\"Attestation\\\\\\\\\\\\\\\",\\\\\\\\n              \\\\\\\\\\\\\\\"Formally review or validate a solution as a recognized expert.\\\\\\\\\\\\\\\"\\\\\\\\n            )}\\\\\\\\n            {btnCreatorWidget(\\\\\\\\n              \\\\\\\\\\\\\\\"Sponsorship\\\\\\\\\\\\\\\",\\\\\\\\n              emptyIcons.Sponsorship,\\\\\\\\n              \\\\\\\\\\\\\\\"Sponsorship\\\\\\\\\\\\\\\",\\\\\\\\n              \\\\\\\\\\\\\\\"Offer to fund projects, events, or proposals that match your needs.\\\\\\\\\\\\\\\"\\\\\\\\n            )}\\\\\\\\n            <li>\\\\\\\\n              <hr class=\\\\\\\\\\\\\\\"dropdown-divider\\\\\\\\\\\\\\\" />\\\\\\\\n            </li>\\\\\\\\n            {btnCreatorWidget(\\\\\\\\n              \\\\\\\\\\\\\\\"Comment\\\\\\\\\\\\\\\",\\\\\\\\n              emptyIcons.Comment,\\\\\\\\n              \\\\\\\\\\\\\\\"Comment\\\\\\\\\\\\\\\",\\\\\\\\n              \\\\\\\\\\\\\\\"Ask a question, provide information, or share a resource that is relevant to the thread.\\\\\\\\\\\\\\\"\\\\\\\\n            )}\\\\\\\\n          </ul>\\\\\\\\n        </div>\\\\\\\\n        <ButtonWithHover\\\\\\\\n          type=\\\\\\\\\\\\\\\"button\\\\\\\\\\\\\\\"\\\\\\\\n          class=\\\\\\\\\\\\\\\"btn\\\\\\\\\\\\\\\"\\\\\\\\n          style={{ border: \\\\\\\\\\\\\\\"0px\\\\\\\\\\\\\\\" }}\\\\\\\\n          data-bs-toggle=\\\\\\\\\\\\\\\"collapse\\\\\\\\\\\\\\\"\\\\\\\\n          href={`#collapseChildPosts${postId}`}\\\\\\\\n          aria-expanded={defaultExpanded}\\\\\\\\n          aria-controls={`collapseChildPosts${postId}`}\\\\\\\\n        >\\\\\\\\n          <i class=\\\\\\\\\\\\\\\"bi bi-chevron-down\\\\\\\\\\\\\\\"> </i>{\\\\\\\\\\\\\\\" \\\\\\\\\\\\\\\"}\\\\\\\\n          {`Expand Replies (${childPostIds.length})`}\\\\\\\\n        </ButtonWithHover>\\\\\\\\n\\\\\\\\n        {isUnderPost || !parentId ? (\\\\\\\\n          <div key=\\\\\\\\\\\\\\\"link-to-parent\\\\\\\\\\\\\\\"></div>\\\\\\\\n        ) : (\\\\\\\\n          <Link\\\\\\\\n            to={href({\\\\\\\\n              widgetSrc: \\\\\\\\\\\\\\\"devhub.near/widget/app\\\\\\\\\\\\\\\",\\\\\\\\n              params: { page: \\\\\\\\\\\\\\\"post\\\\\\\\\\\\\\\", id: parentId },\\\\\\\\n            })}\\\\\\\\n          >\\\\\\\\n            <ButtonWithHover\\\\\\\\n              type=\\\\\\\\\\\\\\\"button\\\\\\\\\\\\\\\"\\\\\\\\n              style={{ border: \\\\\\\\\\\\\\\"0px\\\\\\\\\\\\\\\" }}\\\\\\\\n              className=\\\\\\\\\\\\\\\"btn\\\\\\\\\\\\\\\"\\\\\\\\n              key=\\\\\\\\\\\\\\\"link-to-parent\\\\\\\\\\\\\\\"\\\\\\\\n            >\\\\\\\\n              <i class=\\\\\\\\\\\\\\\"bi bi-arrow-90deg-up\\\\\\\\\\\\\\\"></i>Go to parent\\\\\\\\n            </ButtonWithHover>\\\\\\\\n          </Link>\\\\\\\\n        )}\\\\\\\\n      </div>\\\\\\\\n    </FooterButtonsContianer>\\\\\\\\n  </div>\\\\\\\\n);\\\\\\\\n\\\\\\\\nconst CreatorWidget = (postType) => {\\\\\\\\n  return (\\\\\\\\n    <div\\\\\\\\n      class={`collapse ${\\\\\\\\n        draftState?.parent_post_id == postId && draftState?.postType == postType\\\\\\\\n          ? \\\\\\\\\\\\\\\"show\\\\\\\\\\\\\\\"\\\\\\\\n          : \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\"\\\\\\\\n      }`}\\\\\\\\n      id={`collapse${postType}Creator${postId}`}\\\\\\\\n      data-bs-parent={`#accordion${postId}`}\\\\\\\\n    >\\\\\\\\n      <Widget\\\\\\\\n        src={\\\\\\\\\\\\\\\"devhub.near/widget/devhub.entity.post.PostEditor\\\\\\\\\\\\\\\"}\\\\\\\\n        props={{\\\\\\\\n          postType,\\\\\\\\n          onDraftStateChange,\\\\\\\\n          draftState:\\\\\\\\n            draftState?.parent_post_id == postId ? draftState : undefined,\\\\\\\\n          parentId: postId,\\\\\\\\n          mode: \\\\\\\\\\\\\\\"Create\\\\\\\\\\\\\\\",\\\\\\\\n        }}\\\\\\\\n      />\\\\\\\\n    </div>\\\\\\\\n  );\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst tokenMapping = {\\\\\\\\n  NEAR: \\\\\\\\\\\\\\\"NEAR\\\\\\\\\\\\\\\",\\\\\\\\n  USDT: {\\\\\\\\n    NEP141: {\\\\\\\\n      address: \\\\\\\\\\\\\\\"usdt.tether-token.near\\\\\\\\\\\\\\\",\\\\\\\\n    },\\\\\\\\n  },\\\\\\\\n  USDC: {\\\\\\\\n    NEP141: {\\\\\\\\n      address:\\\\\\\\n        \\\\\\\\\\\\\\\"17208628f84f5d6ad33f0da3bbbeb27ffcb398eac501a31bd6ad2011e36133a1\\\\\\\\\\\\\\\",\\\\\\\\n    },\\\\\\\\n  },\\\\\\\\n  // Add more tokens here as needed\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst reverseTokenMapping = Object.keys(tokenMapping).reduce(\\\\\\\\n  (reverseMap, key) => {\\\\\\\\n    const value = tokenMapping[key];\\\\\\\\n    if (typeof value === \\\\\\\\\\\\\\\"object\\\\\\\\\\\\\\\") {\\\\\\\\n      reverseMap[JSON.stringify(value)] = key;\\\\\\\\n    }\\\\\\\\n    return reverseMap;\\\\\\\\n  },\\\\\\\\n  {}\\\\\\\\n);\\\\\\\\n\\\\\\\\nfunction tokenResolver(token) {\\\\\\\\n  if (typeof token === \\\\\\\\\\\\\\\"string\\\\\\\\\\\\\\\") {\\\\\\\\n    return token;\\\\\\\\n  } else if (typeof token === \\\\\\\\\\\\\\\"object\\\\\\\\\\\\\\\") {\\\\\\\\n    const tokenString = reverseTokenMapping[JSON.stringify(token)];\\\\\\\\n    return tokenString || null;\\\\\\\\n  } else {\\\\\\\\n    return null; // Invalid input\\\\\\\\n  }\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst EditorWidget = (postType) => {\\\\\\\\n  return (\\\\\\\\n    <div\\\\\\\\n      class={`collapse ${\\\\\\\\n        draftState?.edit_post_id == postId && draftState?.postType == postType\\\\\\\\n          ? \\\\\\\\\\\\\\\"show\\\\\\\\\\\\\\\"\\\\\\\\n          : \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\"\\\\\\\\n      }`}\\\\\\\\n      id={`collapse${postType}Editor${postId}`}\\\\\\\\n      data-bs-parent={`#accordion${postId}`}\\\\\\\\n    >\\\\\\\\n      <Widget\\\\\\\\n        src={\\\\\\\\\\\\\\\"devhub.near/widget/devhub.entity.post.PostEditor\\\\\\\\\\\\\\\"}\\\\\\\\n        props={{\\\\\\\\n          postType,\\\\\\\\n          postId,\\\\\\\\n          mode: \\\\\\\\\\\\\\\"Edit\\\\\\\\\\\\\\\",\\\\\\\\n          author_id: post.author_id,\\\\\\\\n          labels: post.snapshot.labels,\\\\\\\\n          name: post.snapshot.name,\\\\\\\\n          description: post.snapshot.description,\\\\\\\\n          amount: post.snapshot.amount,\\\\\\\\n          token: tokenResolver(post.snapshot.sponsorship_token),\\\\\\\\n          supervisor: post.snapshot.supervisor,\\\\\\\\n          githubLink: post.snapshot.github_link,\\\\\\\\n          onDraftStateChange,\\\\\\\\n          draftState:\\\\\\\\n            draftState?.edit_post_id == postId ? draftState : undefined,\\\\\\\\n        }}\\\\\\\\n      />\\\\\\\\n    </div>\\\\\\\\n  );\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst isDraft =\\\\\\\\n  (draftState?.parent_post_id === postId &&\\\\\\\\n    draftState?.postType === state.postType) ||\\\\\\\\n  (draftState?.edit_post_id === postId &&\\\\\\\\n    draftState?.postType === state.postType);\\\\\\\\n\\\\\\\\nconst toggleEditor = () => {\\\\\\\\n  State.update({ showEditor: !state.showEditor });\\\\\\\\n};\\\\\\\\n\\\\\\\\nfunction Editor() {\\\\\\\\n  return (\\\\\\\\n    <div class=\\\\\\\\\\\\\\\"row\\\\\\\\\\\\\\\" id={`accordion${postId}`} key=\\\\\\\\\\\\\\\"editors-footer\\\\\\\\\\\\\\\">\\\\\\\\n      <div\\\\\\\\n        key={`${state.postType}${state.editorType}${postId}`}\\\\\\\\n        className={\\\\\\\\\\\\\\\"w-100\\\\\\\\\\\\\\\"}\\\\\\\\n      >\\\\\\\\n        {state.editorType === \\\\\\\\\\\\\\\"CREATE\\\\\\\\\\\\\\\" ? (\\\\\\\\n          <>\\\\\\\\n            <Widget\\\\\\\\n              src={\\\\\\\\\\\\\\\"devhub.near/widget/devhub.entity.post.PostEditor\\\\\\\\\\\\\\\"}\\\\\\\\n              props={{\\\\\\\\n                postType: state.postType,\\\\\\\\n                onDraftStateChange,\\\\\\\\n                draftState:\\\\\\\\n                  draftState?.parent_post_id == postId ? draftState : undefined,\\\\\\\\n                parentId: postId,\\\\\\\\n                mode: \\\\\\\\\\\\\\\"Create\\\\\\\\\\\\\\\",\\\\\\\\n              }}\\\\\\\\n            />\\\\\\\\n          </>\\\\\\\\n        ) : (\\\\\\\\n          <>\\\\\\\\n            <Widget\\\\\\\\n              src={\\\\\\\\\\\\\\\"devhub.near/widget/devhub.entity.post.PostEditor\\\\\\\\\\\\\\\"}\\\\\\\\n              props={{\\\\\\\\n                postType: state.postType,\\\\\\\\n                postId,\\\\\\\\n                mode: \\\\\\\\\\\\\\\"Edit\\\\\\\\\\\\\\\",\\\\\\\\n                author_id: post.author_id,\\\\\\\\n                labels: post.snapshot.labels,\\\\\\\\n                name: post.snapshot.name,\\\\\\\\n                description: post.snapshot.description,\\\\\\\\n                amount: post.snapshot.amount,\\\\\\\\n                token: tokenResolver(post.snapshot.sponsorship_token),\\\\\\\\n                supervisor: post.snapshot.supervisor,\\\\\\\\n                githubLink: post.snapshot.github_link,\\\\\\\\n                onDraftStateChange,\\\\\\\\n                draftState:\\\\\\\\n                  draftState?.edit_post_id == postId ? draftState : undefined,\\\\\\\\n                toggleEditor: toggleEditor,\\\\\\\\n              }}\\\\\\\\n            />\\\\\\\\n          </>\\\\\\\\n        )}\\\\\\\\n      </div>\\\\\\\\n    </div>\\\\\\\\n  );\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst renamedPostType =\\\\\\\\n  snapshot.post_type == \\\\\\\\\\\\\\\"Submission\\\\\\\\\\\\\\\" ? \\\\\\\\\\\\\\\"Solution\\\\\\\\\\\\\\\" : snapshot.post_type;\\\\\\\\n\\\\\\\\nconst tags = post.snapshot.labels ? (\\\\\\\\n  <div\\\\\\\\n    class=\\\\\\\\\\\\\\\"card-title d-flex flex-wrap align-items-center\\\\\\\\\\\\\\\"\\\\\\\\n    style={{ margin: \\\\\\\\\\\\\\\"20px 0\\\\\\\\\\\\\\\" }}\\\\\\\\n    key=\\\\\\\\\\\\\\\"post-labels\\\\\\\\\\\\\\\"\\\\\\\\n  >\\\\\\\\n    {post.snapshot.labels.map((tag, idx) => (\\\\\\\\n      <div className=\\\\\\\\\\\\\\\"d-flex align-items-center my-3 me-3\\\\\\\\\\\\\\\">\\\\\\\\n        <Link\\\\\\\\n          to={href({\\\\\\\\n            widgetSrc: \\\\\\\\\\\\\\\"devhub.near/widget/app\\\\\\\\\\\\\\\",\\\\\\\\n            params: { page: \\\\\\\\\\\\\\\"feed\\\\\\\\\\\\\\\", tag: tag },\\\\\\\\n          })}\\\\\\\\n        >\\\\\\\\n          <div\\\\\\\\n            className=\\\\\\\\\\\\\\\"d-flex gap-3 align-items-center\\\\\\\\\\\\\\\"\\\\\\\\n            style={{ cursor: \\\\\\\\\\\\\\\"pointer\\\\\\\\\\\\\\\", textDecoration: \\\\\\\\\\\\\\\"none\\\\\\\\\\\\\\\" }}\\\\\\\\n          >\\\\\\\\n            <Widget\\\\\\\\n              src={\\\\\\\\\\\\\\\"devhub.near/widget/devhub.components.atom.Tag\\\\\\\\\\\\\\\"}\\\\\\\\n              props={{\\\\\\\\n                tag,\\\\\\\\n                black: true,\\\\\\\\n              }}\\\\\\\\n            />\\\\\\\\n          </div>\\\\\\\\n        </Link>\\\\\\\\n        {idx !== post.snapshot.labels.length - 1 && (\\\\\\\\n          <span className=\\\\\\\\\\\\\\\"ms-3\\\\\\\\\\\\\\\">\\\\\\\\u{2022}</span>\\\\\\\\n        )}\\\\\\\\n      </div>\\\\\\\\n    ))}\\\\\\\\n  </div>\\\\\\\\n) : (\\\\\\\\n  <div key=\\\\\\\\\\\\\\\"post-labels\\\\\\\\\\\\\\\"></div>\\\\\\\\n);\\\\\\\\n\\\\\\\\nconst Title = styled.h5`\\\\\\\\n  margin: 1rem 0;\\\\\\\\n\\\\\\\\n  color: #151515;\\\\\\\\n  font-size: 1.15rem;\\\\\\\\n  font-style: normal;\\\\\\\\n  font-weight: 700;\\\\\\\\n  line-height: 1.625rem; /* 55.556% */\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst postTitle =\\\\\\\\n  snapshot.post_type == \\\\\\\\\\\\\\\"Comment\\\\\\\\\\\\\\\" ? (\\\\\\\\n    <div key=\\\\\\\\\\\\\\\"post-title\\\\\\\\\\\\\\\"></div>\\\\\\\\n  ) : (\\\\\\\\n    <Title key=\\\\\\\\\\\\\\\"post-title\\\\\\\\\\\\\\\">\\\\\\\\n      {emptyIcons[snapshot.post_type]} {renamedPostType}: {snapshot.name}\\\\\\\\n    </Title>\\\\\\\\n  );\\\\\\\\n\\\\\\\\nconst postExtra =\\\\\\\\n  snapshot.post_type == \\\\\\\\\\\\\\\"Sponsorship\\\\\\\\\\\\\\\" ? (\\\\\\\\n    <div key=\\\\\\\\\\\\\\\"post-extra\\\\\\\\\\\\\\\">\\\\\\\\n      <h6 class=\\\\\\\\\\\\\\\"card-subtitle mb-2 text-muted\\\\\\\\\\\\\\\">\\\\\\\\n        Maximum amount: {snapshot.amount}{\\\\\\\\\\\\\\\" \\\\\\\\\\\\\\\"}\\\\\\\\n        {tokenResolver(snapshot.sponsorship_token)}\\\\\\\\n      </h6>\\\\\\\\n      <h6 class=\\\\\\\\\\\\\\\"card-subtitle mb-2 text-muted\\\\\\\\\\\\\\\">\\\\\\\\n        Supervisor:{\\\\\\\\\\\\\\\" \\\\\\\\\\\\\\\"}\\\\\\\\n        <Widget\\\\\\\\n          src={\\\\\\\\\\\\\\\"neardevgov.near/widget/ProfileLine\\\\\\\\\\\\\\\"}\\\\\\\\n          props={{ accountId: snapshot.supervisor }}\\\\\\\\n        />\\\\\\\\n      </h6>\\\\\\\\n    </div>\\\\\\\\n  ) : (\\\\\\\\n    <div></div>\\\\\\\\n  );\\\\\\\\n\\\\\\\\nconst childPostHasDraft = childPostIds.find(\\\\\\\\n  (childId) =>\\\\\\\\n    childId == draftState?.edit_post_id || childId == draftState?.parent_post_id\\\\\\\\n);\\\\\\\\nif (\\\\\\\\n  (childPostHasDraft || state.childrenOfChildPostsHasDraft) &&\\\\\\\\n  props.expandParent\\\\\\\\n) {\\\\\\\\n  props.expandParent();\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst postsList =\\\\\\\\n  props.isPreview || childPostIds.length == 0 ? (\\\\\\\\n    <div key=\\\\\\\\\\\\\\\"posts-list\\\\\\\\\\\\\\\"></div>\\\\\\\\n  ) : (\\\\\\\\n    <div class=\\\\\\\\\\\\\\\"row\\\\\\\\\\\\\\\" key=\\\\\\\\\\\\\\\"posts-list\\\\\\\\\\\\\\\">\\\\\\\\n      <div\\\\\\\\n        class={`collapse mt-3 ${\\\\\\\\n          defaultExpanded ||\\\\\\\\n          childPostHasDraft ||\\\\\\\\n          state.childrenOfChildPostsHasDraft\\\\\\\\n            ? \\\\\\\\\\\\\\\"show\\\\\\\\\\\\\\\"\\\\\\\\n            : \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\"\\\\\\\\n        }`}\\\\\\\\n        id={`collapseChildPosts${postId}`}\\\\\\\\n      >\\\\\\\\n        {childPostIds.map((childId) => (\\\\\\\\n          <Widget\\\\\\\\n            src=\\\\\\\\\\\\\\\"devhub.near/widget/devhub.entity.post.Post\\\\\\\\\\\\\\\"\\\\\\\\n            props={{\\\\\\\\n              id: childId,\\\\\\\\n              isUnderPost: true,\\\\\\\\n              onDraftStateChange,\\\\\\\\n              draftState,\\\\\\\\n              expandParent: () =>\\\\\\\\n                State.update({ childrenOfChildPostsHasDraft: true }),\\\\\\\\n              referral: `subpost${childId}of${postId}`,\\\\\\\\n            }}\\\\\\\\n          />\\\\\\\\n        ))}\\\\\\\\n      </div>\\\\\\\\n    </div>\\\\\\\\n  );\\\\\\\\n\\\\\\\\nconst LimitedMarkdown = styled.div`\\\\\\\\n  max-height: 20em;\\\\\\\\n`;\\\\\\\\n\\\\\\\\n// Determine if located in the post page.\\\\\\\\nconst isInList = props.isInList;\\\\\\\\nconst contentArray = snapshot.description.split(\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\");\\\\\\\\nconst needClamp = isInList && contentArray.length > 5;\\\\\\\\n\\\\\\\\ninitState({\\\\\\\\n  clamp: needClamp,\\\\\\\\n});\\\\\\\\n\\\\\\\\nconst clampedContent = needClamp\\\\\\\\n  ? contentArray.slice(0, 3).join(\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\")\\\\\\\\n  : snapshot.description;\\\\\\\\n\\\\\\\\n// Should make sure the posts under the currently top viewed post are limited in size.\\\\\\\\nconst descriptionArea = isUnderPost ? (\\\\\\\\n  <LimitedMarkdown className=\\\\\\\\\\\\\\\"overflow-auto\\\\\\\\\\\\\\\" key=\\\\\\\\\\\\\\\"description-area\\\\\\\\\\\\\\\">\\\\\\\\n    {/* {widget(\\\\\\\\\\\\\\\"components.molecule.markdown-viewer\\\\\\\\\\\\\\\", {\\\\\\\\n      text: snapshot.description,\\\\\\\\n    })} */}\\\\\\\\n    <Widget\\\\\\\\n      src={\\\\\\\\\\\\\\\"devhub.near/widget/devhub.components.molecule.MarkdownViewer\\\\\\\\\\\\\\\"}\\\\\\\\n      props={{\\\\\\\\n        text: snapshot.description,\\\\\\\\n      }}\\\\\\\\n    />\\\\\\\\n  </LimitedMarkdown>\\\\\\\\n) : (\\\\\\\\n  <div className=\\\\\\\\\\\\\\\"w-100 overflow-auto\\\\\\\\\\\\\\\">\\\\\\\\n    <div class={state.clamp ? \\\\\\\\\\\\\\\"clamp\\\\\\\\\\\\\\\" : \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\"}>\\\\\\\\n      {/* {widget(\\\\\\\\\\\\\\\"components.molecule.markdown-viewer\\\\\\\\\\\\\\\", {\\\\\\\\n        text: state.clamp ? clampedContent : snapshot.description,\\\\\\\\n      })} */}\\\\\\\\n      <Widget\\\\\\\\n        src={\\\\\\\\\\\\\\\"devhub.near/widget/devhub.components.molecule.MarkdownViewer\\\\\\\\\\\\\\\"}\\\\\\\\n        props={{\\\\\\\\n          text: state.clamp ? clampedContent : snapshot.description,\\\\\\\\n        }}\\\\\\\\n      />\\\\\\\\n    </div>\\\\\\\\n    {state.clamp ? (\\\\\\\\n      <div class=\\\\\\\\\\\\\\\"d-flex justify-content-start\\\\\\\\\\\\\\\">\\\\\\\\n        <a\\\\\\\\n          style={{ cursor: \\\\\\\\\\\\\\\"pointer\\\\\\\\\\\\\\\", color: \\\\\\\\\\\\\\\"#00ec97\\\\\\\\\\\\\\\" }}\\\\\\\\n          class=\\\\\\\\\\\\\\\"btn-link text-dark fw-bold text-decoration-none\\\\\\\\\\\\\\\"\\\\\\\\n          onClick={() => State.update({ clamp: false })}\\\\\\\\n        >\\\\\\\\n          See more\\\\\\\\n        </a>\\\\\\\\n      </div>\\\\\\\\n    ) : (\\\\\\\\n      <></>\\\\\\\\n    )}\\\\\\\\n  </div>\\\\\\\\n);\\\\\\\\n\\\\\\\\nconst timestampElement = (_snapshot) => {\\\\\\\\n  return (\\\\\\\\n    <Link\\\\\\\\n      class=\\\\\\\\\\\\\\\"text-muted\\\\\\\\\\\\\\\"\\\\\\\\n      href={href({\\\\\\\\n        widgetSrc: \\\\\\\\\\\\\\\"devhub.near/widget/app\\\\\\\\\\\\\\\",\\\\\\\\n        params: {\\\\\\\\n          page: \\\\\\\\\\\\\\\"post\\\\\\\\\\\\\\\",\\\\\\\\n          id: postId,\\\\\\\\n          timestamp: _snapshot.timestamp,\\\\\\\\n          compareTimestamp: null,\\\\\\\\n          referral,\\\\\\\\n        },\\\\\\\\n      })}\\\\\\\\n    >\\\\\\\\n      {readableDate(_snapshot.timestamp / 1000000).substring(4)}\\\\\\\\n\\\\\\\\n      <Widget\\\\\\\\n        src=\\\\\\\\\\\\\\\"mob.near/widget/ProfileImage\\\\\\\\\\\\\\\"\\\\\\\\n        props={{\\\\\\\\n          accountId: _snapshot.editor_id,\\\\\\\\n          style: {\\\\\\\\n            width: \\\\\\\\\\\\\\\"1.25em\\\\\\\\\\\\\\\",\\\\\\\\n            height: \\\\\\\\\\\\\\\"1.25em\\\\\\\\\\\\\\\",\\\\\\\\n          },\\\\\\\\n          imageStyle: {\\\\\\\\n            transform: \\\\\\\\\\\\\\\"translateY(-12.5%)\\\\\\\\\\\\\\\",\\\\\\\\n          },\\\\\\\\n        }}\\\\\\\\n      />\\\\\\\\n      {_snapshot.editor_id.substring(0, 8)}\\\\\\\\n    </Link>\\\\\\\\n  );\\\\\\\\n};\\\\\\\\n\\\\\\\\nfunction combineText(_snapshot) {\\\\\\\\n  return (\\\\\\\\n    \\\\\\\\\\\\\\\"## \\\\\\\\\\\\\\\" +\\\\\\\\n    _snapshot.post_type +\\\\\\\\n    \\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\" +\\\\\\\\n    _snapshot.name +\\\\\\\\n    \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\" +\\\\\\\\n    _snapshot.description\\\\\\\\n  );\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst CardContainer = styled.div`\\\\\\\\n  padding: 1.5rem 3rem !important;\\\\\\\\n  border-radius: 16px !important;\\\\\\\\n  border: 1px solid rgba(129, 129, 129, 0.3) !important;\\\\\\\\n  background: #fffefe !important;\\\\\\\\n\\\\\\\\n  @media screen and (max-width: 960px) {\\\\\\\\n    padding: 1rem !important;\\\\\\\\n  }\\\\\\\\n`;\\\\\\\\n\\\\\\\\nreturn (\\\\\\\\n  <CardContainer className={`card ${borders[snapshot.post_type]} attractable`}>\\\\\\\\n    {header}\\\\\\\\n    <div className=\\\\\\\\\\\\\\\"card-body\\\\\\\\\\\\\\\" style={{ padding: 0 }}>\\\\\\\\n      {searchKeywords}\\\\\\\\n      {compareSnapshot ? (\\\\\\\\n        <div\\\\\\\\n          class=\\\\\\\\\\\\\\\"border rounded\\\\\\\\\\\\\\\"\\\\\\\\n          style={{ marginTop: \\\\\\\\\\\\\\\"16px\\\\\\\\\\\\\\\", marginBottom: \\\\\\\\\\\\\\\"16px\\\\\\\\\\\\\\\" }}\\\\\\\\n        >\\\\\\\\n          <div class=\\\\\\\\\\\\\\\"d-flex justify-content-end\\\\\\\\\\\\\\\" style={{ fontSize: \\\\\\\\\\\\\\\"12px\\\\\\\\\\\\\\\" }}>\\\\\\\\n            <div class=\\\\\\\\\\\\\\\"d-flex w-50 justify-content-end mt-1 me-2\\\\\\\\\\\\\\\">\\\\\\\\n              {timestampElement(snapshot)}\\\\\\\\n              {snapshot !== compareSnapshot && (\\\\\\\\n                <>\\\\\\\\n                  <div class=\\\\\\\\\\\\\\\"mx-1 align-self-center\\\\\\\\\\\\\\\">\\\\\\\\n                    <i class=\\\\\\\\\\\\\\\"bi bi-file-earmark-diff\\\\\\\\\\\\\\\" />\\\\\\\\n                  </div>\\\\\\\\n                  {timestampElement(compareSnapshot)}\\\\\\\\n                </>\\\\\\\\n              )}\\\\\\\\n            </div>\\\\\\\\n          </div>\\\\\\\\n          <div className=\\\\\\\\\\\\\\\"w-100 overflow-auto\\\\\\\\\\\\\\\">\\\\\\\\n            <Widget\\\\\\\\n              src=\\\\\\\\\\\\\\\"markeljan.near/widget/MarkdownDiff\\\\\\\\\\\\\\\"\\\\\\\\n              props={{\\\\\\\\n                post: post,\\\\\\\\n                currentCode: combineText(\\\\\\\\n                  swapTimestamps ? compareSnapshot : snapshot\\\\\\\\n                ),\\\\\\\\n                prevCode: combineText(\\\\\\\\n                  swapTimestamps ? snapshot : compareSnapshot\\\\\\\\n                ),\\\\\\\\n                showLineNumber: true,\\\\\\\\n              }}\\\\\\\\n            />\\\\\\\\n          </div>\\\\\\\\n        </div>\\\\\\\\n      ) : (\\\\\\\\n        <>\\\\\\\\n          {postTitle}\\\\\\\\n          {postExtra}\\\\\\\\n          {descriptionArea}\\\\\\\\n        </>\\\\\\\\n      )}\\\\\\\\n      {tags}\\\\\\\\n      {buttonsFooter}\\\\\\\\n      {!props.isPreview && (isDraft || state.showEditor) && <Editor />}\\\\\\\\n      {postsList}\\\\\\\\n    </div>\\\\\\\\n  </CardContainer>\\\\\\\\n);\\\\\\\\n\"}, \"devhub.entity.post.PostEditor\": {\"\": \"/* INCLUDE: \\\\\\\\\\\\\\\"core/lib/autocomplete\\\\\\\\\\\\\\\" */\\\\\\\\nconst autocompleteEnabled = true;\\\\\\\\n\\\\\\\\nconst AutoComplete = styled.div`\\\\\\\\n  z-index: 5;\\\\\\\\n\\\\\\\\n  > div > div {\\\\\\\\n    padding: calc(var(--padding) / 2);\\\\\\\\n  }\\\\\\\\n`;\\\\\\\\n\\\\\\\\nfunction textareaInputHandler(value) {\\\\\\\\n  const showAccountAutocomplete = /@[\\\\\\\\\\\\\\\\w][^\\\\\\\\\\\\\\\\s]*$/.test(value);\\\\\\\\n  State.update((lastKnownState) => ({\\\\\\\\n    ...lastKnownState,\\\\\\\\n    text: value,\\\\\\\\n    showAccountAutocomplete,\\\\\\\\n  }));\\\\\\\\n}\\\\\\\\n\\\\\\\\nfunction autoCompleteAccountId(id) {\\\\\\\\n  let description = state.description.replace(/[\\\\\\\\\\\\\\\\s]{0,1}@[^\\\\\\\\\\\\\\\\s]*$/, \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\");\\\\\\\\n  description = `${description} @${id}`.trim() + \\\\\\\\\\\\\\\" \\\\\\\\\\\\\\\";\\\\\\\\n  State.update((lastKnownState) => ({\\\\\\\\n    ...lastKnownState,\\\\\\\\n    description,\\\\\\\\n    showAccountAutocomplete: false,\\\\\\\\n  }));\\\\\\\\n}\\\\\\\\n/* END_INCLUDE: \\\\\\\\\\\\\\\"core/lib/autocomplete\\\\\\\\\\\\\\\" */\\\\\\\\n\\\\\\\\nconst postType = props.postType ?? \\\\\\\\\\\\\\\"Sponsorship\\\\\\\\\\\\\\\";\\\\\\\\nconst parentId = props.parentId ?? null;\\\\\\\\nconst postId = props.postId ?? null;\\\\\\\\nconst mode = props.mode ?? \\\\\\\\\\\\\\\"Create\\\\\\\\\\\\\\\";\\\\\\\\nconst toggleEditor = props.toggleEditor;\\\\\\\\n\\\\\\\\nconst referralLabels = props.referral ? [`referral:${props.referral}`] : [];\\\\\\\\nconst labelStrings = (props.labels ?? []).concat(referralLabels);\\\\\\\\n\\\\\\\\nconst labels = labelStrings.map((s) => {\\\\\\\\n  return { name: s };\\\\\\\\n});\\\\\\\\n\\\\\\\\ninitState({\\\\\\\\n  seekingFunding: false,\\\\\\\\n  author_id: context.accountId,\\\\\\\\n  // Should be a list of objects with field \\\\\\\\\\\\\\\"name\\\\\\\\\\\\\\\".\\\\\\\\n  labels,\\\\\\\\n  // Should be a list of labels as strings.\\\\\\\\n  // Both of the label structures should be modified together.\\\\\\\\n  labelStrings,\\\\\\\\n  postType,\\\\\\\\n  name: props.name ?? \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\",\\\\\\\\n  description: props.description ?? \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\",\\\\\\\\n  amount: props.amount ?? \\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\n  token: props.token ?? \\\\\\\\\\\\\\\"USDT\\\\\\\\\\\\\\\",\\\\\\\\n  supervisor: props.supervisor ?? \\\\\\\\\\\\\\\"neardevdao.near\\\\\\\\\\\\\\\",\\\\\\\\n  githubLink: props.githubLink ?? \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\",\\\\\\\\n  warning: \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\",\\\\\\\\n  draftStateApplied: false,\\\\\\\\n});\\\\\\\\n\\\\\\\\nif (!state.draftStateApplied && props.draftState) {\\\\\\\\n  State.update({ ...props.draftState, draftStateApplied: true });\\\\\\\\n}\\\\\\\\n\\\\\\\\nlet fields = {\\\\\\\\n  Comment: [\\\\\\\\\\\\\\\"description\\\\\\\\\\\\\\\"],\\\\\\\\n  Idea: [\\\\\\\\\\\\\\\"name\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"description\\\\\\\\\\\\\\\"],\\\\\\\\n  Solution: [\\\\\\\\\\\\\\\"name\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"description\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"fund_raising\\\\\\\\\\\\\\\"],\\\\\\\\n  Attestation: [\\\\\\\\\\\\\\\"name\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"description\\\\\\\\\\\\\\\"],\\\\\\\\n  Sponsorship: [\\\\\\\\n    \\\\\\\\\\\\\\\"name\\\\\\\\\\\\\\\",\\\\\\\\n    \\\\\\\\\\\\\\\"description\\\\\\\\\\\\\\\",\\\\\\\\n    \\\\\\\\\\\\\\\"amount\\\\\\\\\\\\\\\",\\\\\\\\n    \\\\\\\\\\\\\\\"sponsorship_token\\\\\\\\\\\\\\\",\\\\\\\\n    \\\\\\\\\\\\\\\"supervisor\\\\\\\\\\\\\\\",\\\\\\\\n  ],\\\\\\\\n  Github: [\\\\\\\\\\\\\\\"githubLink\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"name\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"description\\\\\\\\\\\\\\\"],\\\\\\\\n}[postType];\\\\\\\\n\\\\\\\\n// This must be outside onClick, because Near.view returns null at first, and when the view call finished, it returns true/false.\\\\\\\\n// If checking this inside onClick, it will give `null` and we cannot tell the result is true or false.\\\\\\\\nlet grantNotify = Near.view(\\\\\\\\\\\\\\\"social.near\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"is_write_permission_granted\\\\\\\\\\\\\\\", {\\\\\\\\n  predecessor_id: \\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\",\\\\\\\\n  key: context.accountId + \\\\\\\\\\\\\\\"/index/notify\\\\\\\\\\\\\\\",\\\\\\\\n});\\\\\\\\nif (grantNotify === null) {\\\\\\\\n  return;\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst tokenMapping = {\\\\\\\\n  NEAR: \\\\\\\\\\\\\\\"NEAR\\\\\\\\\\\\\\\",\\\\\\\\n  USDT: {\\\\\\\\n    NEP141: {\\\\\\\\n      address: \\\\\\\\\\\\\\\"usdt.tether-token.near\\\\\\\\\\\\\\\",\\\\\\\\n    },\\\\\\\\n  },\\\\\\\\n  USDC: {\\\\\\\\n    NEP141: {\\\\\\\\n      address:\\\\\\\\n        \\\\\\\\\\\\\\\"17208628f84f5d6ad33f0da3bbbeb27ffcb398eac501a31bd6ad2011e36133a1\\\\\\\\\\\\\\\",\\\\\\\\n    },\\\\\\\\n  },\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst onSubmit = () => {\\\\\\\\n  let labels = state.labelStrings;\\\\\\\\n  var body = {\\\\\\\\n    Comment: { description: state.description, comment_version: \\\\\\\\\\\\\\\"V2\\\\\\\\\\\\\\\" },\\\\\\\\n    Idea: {\\\\\\\\n      name: state.name,\\\\\\\\n      description: state.description,\\\\\\\\n      idea_version: \\\\\\\\\\\\\\\"V1\\\\\\\\\\\\\\\",\\\\\\\\n    },\\\\\\\\n    Solution: {\\\\\\\\n      name: state.name,\\\\\\\\n      description: generateDescription(\\\\\\\\n        state.description,\\\\\\\\n        state.amount,\\\\\\\\n        state.token,\\\\\\\\n        state.supervisor,\\\\\\\\n        state.seekingFunding\\\\\\\\n      ),\\\\\\\\n      solution_version: \\\\\\\\\\\\\\\"V1\\\\\\\\\\\\\\\",\\\\\\\\n    },\\\\\\\\n    Attestation: {\\\\\\\\n      name: state.name,\\\\\\\\n      description: state.description,\\\\\\\\n      attestation_version: \\\\\\\\\\\\\\\"V1\\\\\\\\\\\\\\\",\\\\\\\\n    },\\\\\\\\n    Sponsorship: {\\\\\\\\n      name: state.name,\\\\\\\\n      description: state.description,\\\\\\\\n      amount: state.amount,\\\\\\\\n      sponsorship_token: tokenMapping[state.token],\\\\\\\\n      supervisor: state.supervisor,\\\\\\\\n      sponsorship_version: \\\\\\\\\\\\\\\"V1\\\\\\\\\\\\\\\",\\\\\\\\n    },\\\\\\\\n    Github: {\\\\\\\\n      name: state.name,\\\\\\\\n      description: state.description,\\\\\\\\n      github_version: \\\\\\\\\\\\\\\"V0\\\\\\\\\\\\\\\",\\\\\\\\n      github_link: state.githubLink,\\\\\\\\n    },\\\\\\\\n  }[postType];\\\\\\\\n  body[\\\\\\\\\\\\\\\"post_type\\\\\\\\\\\\\\\"] = postType;\\\\\\\\n  if (!context.accountId) {\\\\\\\\n    return;\\\\\\\\n  }\\\\\\\\n  let txn = [];\\\\\\\\n  if (mode == \\\\\\\\\\\\\\\"Create\\\\\\\\\\\\\\\") {\\\\\\\\n    props.onDraftStateChange(\\\\\\\\n      Object.assign({}, state, { parent_post_id: parentId })\\\\\\\\n    );\\\\\\\\n    txn.push({\\\\\\\\n      contractName: \\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\",\\\\\\\\n      methodName: \\\\\\\\\\\\\\\"add_post\\\\\\\\\\\\\\\",\\\\\\\\n      args: {\\\\\\\\n        parent_id: parentId,\\\\\\\\n        labels,\\\\\\\\n        body,\\\\\\\\n      },\\\\\\\\n      deposit: Big(10).pow(21).mul(2),\\\\\\\\n      gas: Big(10).pow(12).mul(100),\\\\\\\\n    });\\\\\\\\n  } else if (mode == \\\\\\\\\\\\\\\"Edit\\\\\\\\\\\\\\\") {\\\\\\\\n    props.onDraftStateChange(\\\\\\\\n      Object.assign({}, state, { edit_post_id: postId })\\\\\\\\n    );\\\\\\\\n    txn.push({\\\\\\\\n      contractName: \\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\",\\\\\\\\n      methodName: \\\\\\\\\\\\\\\"edit_post\\\\\\\\\\\\\\\",\\\\\\\\n      args: {\\\\\\\\n        id: postId,\\\\\\\\n        labels,\\\\\\\\n        body,\\\\\\\\n      },\\\\\\\\n      deposit: Big(10).pow(21).mul(2),\\\\\\\\n      gas: Big(10).pow(12).mul(100),\\\\\\\\n    });\\\\\\\\n  }\\\\\\\\n  if (mode == \\\\\\\\\\\\\\\"Create\\\\\\\\\\\\\\\" || mode == \\\\\\\\\\\\\\\"Edit\\\\\\\\\\\\\\\") {\\\\\\\\n    if (grantNotify === false) {\\\\\\\\n      txn.unshift({\\\\\\\\n        contractName: \\\\\\\\\\\\\\\"social.near\\\\\\\\\\\\\\\",\\\\\\\\n        methodName: \\\\\\\\\\\\\\\"grant_write_permission\\\\\\\\\\\\\\\",\\\\\\\\n        args: {\\\\\\\\n          predecessor_id: \\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\",\\\\\\\\n          keys: [context.accountId + \\\\\\\\\\\\\\\"/index/notify\\\\\\\\\\\\\\\"],\\\\\\\\n        },\\\\\\\\n        deposit: Big(10).pow(23),\\\\\\\\n        gas: Big(10).pow(12).mul(30),\\\\\\\\n      });\\\\\\\\n    }\\\\\\\\n    Near.call(txn);\\\\\\\\n  }\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst normalizeLabel = (label) =>\\\\\\\\n  label\\\\\\\\n    .replaceAll(/[- \\\\\\\\\\\\\\\\.]/g, \\\\\\\\\\\\\\\"_\\\\\\\\\\\\\\\")\\\\\\\\n    .replaceAll(/[^\\\\\\\\\\\\\\\\w]+/g, \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\")\\\\\\\\n    .replaceAll(/_+/g, \\\\\\\\\\\\\\\"-\\\\\\\\\\\\\\\")\\\\\\\\n    .replace(/^-+/, \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\")\\\\\\\\n    .replace(/-+$/, \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\")\\\\\\\\n    .toLowerCase()\\\\\\\\n    .trim(\\\\\\\\\\\\\\\"-\\\\\\\\\\\\\\\");\\\\\\\\n\\\\\\\\nconst checkLabel = (label) => {\\\\\\\\n  Near.asyncView(\\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"is_allowed_to_use_labels\\\\\\\\\\\\\\\", {\\\\\\\\n    editor: context.accountId,\\\\\\\\n    labels: [label],\\\\\\\\n  }).then((allowed) => {\\\\\\\\n    if (allowed) {\\\\\\\\n      State.update({ warning: \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\" });\\\\\\\\n    } else {\\\\\\\\n      State.update({\\\\\\\\n        warning:\\\\\\\\n          \\\\\\\\\\\\'The label \\\\\\\\\\\\\\\"\\\\\\\\\\\\' +\\\\\\\\n          label +\\\\\\\\n          \\\\\\\\\\\\'\\\\\\\\\\\\\\\" is protected and can only be added by moderators\\\\\\\\\\\\',\\\\\\\\n      });\\\\\\\\n      return;\\\\\\\\n    }\\\\\\\\n  });\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst setLabels = (labels) => {\\\\\\\\n  labels = labels.map((o) => {\\\\\\\\n    o.name = normalizeLabel(o.name);\\\\\\\\n    return o;\\\\\\\\n  });\\\\\\\\n  if (labels.length < state.labels.length) {\\\\\\\\n    let oldLabels = new Set(state.labels.map((label) => label.name));\\\\\\\\n    for (let label of labels) {\\\\\\\\n      oldLabels.delete(label.name);\\\\\\\\n    }\\\\\\\\n    let removed = oldLabels.values().next().value;\\\\\\\\n    Near.asyncView(\\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"is_allowed_to_use_labels\\\\\\\\\\\\\\\", {\\\\\\\\n      editor: context.accountId,\\\\\\\\n      labels: [removed],\\\\\\\\n    }).then((allowed) => {\\\\\\\\n      if (allowed) {\\\\\\\\n        let labelStrings = labels.map(({ name }) => name);\\\\\\\\n        State.update({ labels, labelStrings });\\\\\\\\n      } else {\\\\\\\\n        State.update({\\\\\\\\n          warning:\\\\\\\\n            \\\\\\\\\\\\'The label \\\\\\\\\\\\\\\"\\\\\\\\\\\\' +\\\\\\\\n            removed +\\\\\\\\n            \\\\\\\\\\\\'\\\\\\\\\\\\\\\" is protected and can only be updated by moderators\\\\\\\\\\\\',\\\\\\\\n        });\\\\\\\\n        return;\\\\\\\\n      }\\\\\\\\n    });\\\\\\\\n  } else {\\\\\\\\n    let labelStrings = labels.map((o) => {\\\\\\\\n      return o.name;\\\\\\\\n    });\\\\\\\\n    State.update({ labels, labelStrings });\\\\\\\\n  }\\\\\\\\n};\\\\\\\\nconst existingLabelStrings =\\\\\\\\n  Near.view(\\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"get_all_allowed_labels\\\\\\\\\\\\\\\", {\\\\\\\\n    editor: context.accountId,\\\\\\\\n  }) ?? [];\\\\\\\\nconst existingLabelSet = new Set(existingLabelStrings);\\\\\\\\nconst existingLabels = existingLabelStrings\\\\\\\\n  .filter((it) => it !== \\\\\\\\\\\\\\\"blog\\\\\\\\\\\\\\\") // remove blog label so users cannot publish blogs from feed\\\\\\\\n  .map((s) => {\\\\\\\\n    return { name: s };\\\\\\\\n  });\\\\\\\\n\\\\\\\\nconst labelEditor = (\\\\\\\\n  <div className=\\\\\\\\\\\\\\\"col-lg-12  mb-2\\\\\\\\\\\\\\\">\\\\\\\\n    Labels:\\\\\\\\n    <Typeahead\\\\\\\\n      multiple\\\\\\\\n      labelKey=\\\\\\\\\\\\\\\"name\\\\\\\\\\\\\\\"\\\\\\\\n      onInputChange={checkLabel}\\\\\\\\n      onChange={setLabels}\\\\\\\\n      options={existingLabels}\\\\\\\\n      placeholder=\\\\\\\\\\\\\\\"near.social, widget, NEP, standard, protocol, tool\\\\\\\\\\\\\\\"\\\\\\\\n      selected={state.labels}\\\\\\\\n      positionFixed\\\\\\\\n      allowNew={(results, props) => {\\\\\\\\n        return (\\\\\\\\n          !existingLabelSet.has(props.text) &&\\\\\\\\n          props.text.toLowerCase() !== \\\\\\\\\\\\\\\"blog\\\\\\\\\\\\\\\" && // dont allow adding \\\\\\\\\\\\\\\"Blog\\\\\\\\\\\\\\\"\\\\\\\\n          props.selected.filter((selected) => selected.name === props.text)\\\\\\\\n            .length == 0 &&\\\\\\\\n          Near.view(\\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"is_allowed_to_use_labels\\\\\\\\\\\\\\\", {\\\\\\\\n            editor: context.accountId,\\\\\\\\n            labels: [props.text],\\\\\\\\n          })\\\\\\\\n        );\\\\\\\\n      }}\\\\\\\\n    />\\\\\\\\n  </div>\\\\\\\\n);\\\\\\\\n\\\\\\\\nconst githubLinkDiv = (\\\\\\\\n  <div className=\\\\\\\\\\\\\\\"col-lg-12  mb-2\\\\\\\\\\\\\\\">\\\\\\\\n    Github Issue URL:\\\\\\\\n    <input\\\\\\\\n      type=\\\\\\\\\\\\\\\"text\\\\\\\\\\\\\\\"\\\\\\\\n      value={state.githubLink}\\\\\\\\n      onChange={(event) => State.update({ githubLink: event.target.value })}\\\\\\\\n    />\\\\\\\\n  </div>\\\\\\\\n);\\\\\\\\n\\\\\\\\nconst nameDiv = (\\\\\\\\n  <div className=\\\\\\\\\\\\\\\"col-lg-6  mb-2\\\\\\\\\\\\\\\">\\\\\\\\n    Title:\\\\\\\\n    <input\\\\\\\\n      type=\\\\\\\\\\\\\\\"text\\\\\\\\\\\\\\\"\\\\\\\\n      value={state.name}\\\\\\\\n      onChange={(event) => State.update({ name: event.target.value })}\\\\\\\\n    />\\\\\\\\n  </div>\\\\\\\\n);\\\\\\\\n\\\\\\\\nconst amountDiv = (\\\\\\\\n  <div className=\\\\\\\\\\\\\\\"col-lg-6  mb-2\\\\\\\\\\\\\\\">\\\\\\\\n    Amount:\\\\\\\\n    <input\\\\\\\\n      type=\\\\\\\\\\\\\\\"text\\\\\\\\\\\\\\\"\\\\\\\\n      value={state.amount}\\\\\\\\n      onChange={(event) => State.update({ amount: event.target.value })}\\\\\\\\n    />\\\\\\\\n  </div>\\\\\\\\n);\\\\\\\\n\\\\\\\\nconst tokenDiv = (\\\\\\\\n  <div className=\\\\\\\\\\\\\\\"col-lg-6 mb-2\\\\\\\\\\\\\\\">\\\\\\\\n    Currency\\\\\\\\n    <select\\\\\\\\n      onChange={(event) => State.update({ token: event.target.value })}\\\\\\\\n      class=\\\\\\\\\\\\\\\"form-select\\\\\\\\\\\\\\\"\\\\\\\\n      aria-label=\\\\\\\\\\\\\\\"Select currency\\\\\\\\\\\\\\\"\\\\\\\\n      value={state.token}\\\\\\\\n    >\\\\\\\\n      <option value=\\\\\\\\\\\\\\\"USDT\\\\\\\\\\\\\\\">USDT</option>\\\\\\\\n      <option value=\\\\\\\\\\\\\\\"NEAR\\\\\\\\\\\\\\\">NEAR</option>\\\\\\\\n      <option value=\\\\\\\\\\\\\\\"USDC\\\\\\\\\\\\\\\">USDC</option>\\\\\\\\n    </select>\\\\\\\\n  </div>\\\\\\\\n);\\\\\\\\n\\\\\\\\nconst supervisorDiv = (\\\\\\\\n  <div className=\\\\\\\\\\\\\\\"col-lg-6 mb-2\\\\\\\\\\\\\\\">\\\\\\\\n    Supervisor:\\\\\\\\n    <input\\\\\\\\n      type=\\\\\\\\\\\\\\\"text\\\\\\\\\\\\\\\"\\\\\\\\n      value={state.supervisor}\\\\\\\\n      onChange={(event) => State.update({ supervisor: event.target.value })}\\\\\\\\n    />\\\\\\\\n  </div>\\\\\\\\n);\\\\\\\\n\\\\\\\\nconst callDescriptionDiv = () => {\\\\\\\\n  return (\\\\\\\\n    <div className=\\\\\\\\\\\\\\\"col-lg-12  mb-2\\\\\\\\\\\\\\\">\\\\\\\\n      Description:\\\\\\\\n      <br />\\\\\\\\n      <Widget\\\\\\\\n        src={\\\\\\\\\\\\\\\"devhub.near/widget/devhub.components.molecule.MarkdownEditor\\\\\\\\\\\\\\\"}\\\\\\\\n        props={{\\\\\\\\n          data: { handler: state.handler, content: state.description },\\\\\\\\n          onChange: (content) => {\\\\\\\\n            State.update({ description: content, handler: \\\\\\\\\\\\\\\"update\\\\\\\\\\\\\\\" });\\\\\\\\n            textareaInputHandler(content);\\\\\\\\n          },\\\\\\\\n        }}\\\\\\\\n      />\\\\\\\\n      {autocompleteEnabled && state.showAccountAutocomplete && (\\\\\\\\n        <AutoComplete>\\\\\\\\n          <Widget\\\\\\\\n            src=\\\\\\\\\\\\\\\"near/widget/AccountAutocomplete\\\\\\\\\\\\\\\"\\\\\\\\n            props={{\\\\\\\\n              term: state.text.split(\\\\\\\\\\\\\\\"@\\\\\\\\\\\\\\\").pop(),\\\\\\\\n              onSelect: autoCompleteAccountId,\\\\\\\\n              onClose: () => State.update({ showAccountAutocomplete: false }),\\\\\\\\n            }}\\\\\\\\n          />\\\\\\\\n        </AutoComplete>\\\\\\\\n      )}\\\\\\\\n    </div>\\\\\\\\n  );\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst disclaimer = (\\\\\\\\n  <p>\\\\\\\\n    <i>\\\\\\\\n      * Note, all projects that were granted sponsorships are required to pass\\\\\\\\n      KYC to receive the funding.\\\\\\\\n    </i>\\\\\\\\n  </p>\\\\\\\\n);\\\\\\\\n\\\\\\\\nconst isFundraisingDiv = (\\\\\\\\n  // This is jank with just btns and not radios. But the radios were glitchy af\\\\\\\\n  <>\\\\\\\\n    <div class=\\\\\\\\\\\\\\\"mb-2\\\\\\\\\\\\\\\">\\\\\\\\n      <p class=\\\\\\\\\\\\\\\"fs-6 fw-bold mb-1\\\\\\\\\\\\\\\">\\\\\\\\n        Are you seeking funding for your solution?\\\\\\\\n        <span class=\\\\\\\\\\\\\\\"text-muted fw-normal\\\\\\\\\\\\\\\">(Optional)</span>\\\\\\\\n      </p>\\\\\\\\n      <div class=\\\\\\\\\\\\\\\"form-check form-check-inline\\\\\\\\\\\\\\\">\\\\\\\\n        <label class=\\\\\\\\\\\\\\\"form-check-label\\\\\\\\\\\\\\\">\\\\\\\\n          <button\\\\\\\\n            className=\\\\\\\\\\\\\\\"btn btn-light p-0\\\\\\\\\\\\\\\"\\\\\\\\n            style={{\\\\\\\\n              backgroundColor: state.seekingFunding ? \\\\\\\\\\\\\\\"#0C7283\\\\\\\\\\\\\\\" : \\\\\\\\\\\\\\\"inherit\\\\\\\\\\\\\\\",\\\\\\\\n              color: \\\\\\\\\\\\\\\"#f3f3f3\\\\\\\\\\\\\\\",\\\\\\\\n              border: \\\\\\\\\\\\\\\"solid #D9D9D9\\\\\\\\\\\\\\\",\\\\\\\\n              borderRadius: \\\\\\\\\\\\\\\"100%\\\\\\\\\\\\\\\",\\\\\\\\n              height: \\\\\\\\\\\\\\\"20px\\\\\\\\\\\\\\\",\\\\\\\\n              width: \\\\\\\\\\\\\\\"20px\\\\\\\\\\\\\\\",\\\\\\\\n            }}\\\\\\\\n            onClick={() => State.update({ seekingFunding: true })}\\\\\\\\n          />\\\\\\\\n          Yes\\\\\\\\n        </label>\\\\\\\\n      </div>\\\\\\\\n      <div class=\\\\\\\\\\\\\\\"form-check form-check-inline\\\\\\\\\\\\\\\">\\\\\\\\n        <label class=\\\\\\\\\\\\\\\"form-check-label\\\\\\\\\\\\\\\">\\\\\\\\n          <button\\\\\\\\n            className=\\\\\\\\\\\\\\\"btn btn-light p-0\\\\\\\\\\\\\\\"\\\\\\\\n            style={{\\\\\\\\n              backgroundColor: !state.seekingFunding ? \\\\\\\\\\\\\\\"#0C7283\\\\\\\\\\\\\\\" : \\\\\\\\\\\\\\\"inherit\\\\\\\\\\\\\\\",\\\\\\\\n              color: \\\\\\\\\\\\\\\"#f3f3f3\\\\\\\\\\\\\\\",\\\\\\\\n              border: \\\\\\\\\\\\\\\"solid #D9D9D9\\\\\\\\\\\\\\\",\\\\\\\\n              borderRadius: \\\\\\\\\\\\\\\"100%\\\\\\\\\\\\\\\",\\\\\\\\n              height: \\\\\\\\\\\\\\\"20px\\\\\\\\\\\\\\\",\\\\\\\\n              width: \\\\\\\\\\\\\\\"20px\\\\\\\\\\\\\\\",\\\\\\\\n            }}\\\\\\\\n            onClick={() => State.update({ seekingFunding: false })}\\\\\\\\n          />\\\\\\\\n          No\\\\\\\\n        </label>\\\\\\\\n      </div>\\\\\\\\n    </div>\\\\\\\\n  </>\\\\\\\\n);\\\\\\\\n\\\\\\\\nconst fundraisingDiv = (\\\\\\\\n  <div class=\\\\\\\\\\\\\\\"d-flex flex-column mb-2\\\\\\\\\\\\\\\">\\\\\\\\n    <div className=\\\\\\\\\\\\\\\"col-lg-6 mb-2\\\\\\\\\\\\\\\">\\\\\\\\n      Currency\\\\\\\\n      <select\\\\\\\\n        onChange={(event) => State.update({ token: event.target.value })}\\\\\\\\n        class=\\\\\\\\\\\\\\\"form-select\\\\\\\\\\\\\\\"\\\\\\\\n        aria-label=\\\\\\\\\\\\\\\"Default select example\\\\\\\\\\\\\\\"\\\\\\\\n        value={state.token}\\\\\\\\n      >\\\\\\\\n        <option value=\\\\\\\\\\\\\\\"USDT\\\\\\\\\\\\\\\">USDT</option>\\\\\\\\n        <option value=\\\\\\\\\\\\\\\"NEAR\\\\\\\\\\\\\\\">NEAR</option>\\\\\\\\n        <option value=\\\\\\\\\\\\\\\"USDC\\\\\\\\\\\\\\\">USDC</option>\\\\\\\\n      </select>\\\\\\\\n    </div>\\\\\\\\n    <div className=\\\\\\\\\\\\\\\"col-lg-6 mb-2\\\\\\\\\\\\\\\">\\\\\\\\n      Requested amount\\\\\\\\n      <span class=\\\\\\\\\\\\\\\"text-muted fw-normal\\\\\\\\\\\\\\\">(Numbers Only)</span>\\\\\\\\n      <input\\\\\\\\n        type=\\\\\\\\\\\\\\\"number\\\\\\\\\\\\\\\"\\\\\\\\n        value={parseInt(state.amount) > 0 ? state.amount : \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\"}\\\\\\\\n        min={0}\\\\\\\\n        onChange={(event) => {\\\\\\\\n          State.update({\\\\\\\\n            amount: Number(\\\\\\\\n              event.target.value.toString().replace(/e/g, \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\")\\\\\\\\n            ).toString(),\\\\\\\\n          });\\\\\\\\n        }}\\\\\\\\n      />\\\\\\\\n    </div>\\\\\\\\n    <div className=\\\\\\\\\\\\\\\"col-lg-6 mb-2\\\\\\\\\\\\\\\">\\\\\\\\n      <p class=\\\\\\\\\\\\\\\"mb-1\\\\\\\\\\\\\\\">\\\\\\\\n        Requested sponsor\\\\\\\\n        <span class=\\\\\\\\\\\\\\\"text-muted fw-normal\\\\\\\\\\\\\\\">(Optional)</span>\\\\\\\\n      </p>\\\\\\\\n      <p style={{ fontSize: \\\\\\\\\\\\\\\"13px\\\\\\\\\\\\\\\" }} class=\\\\\\\\\\\\\\\"m-0 text-muted fw-light\\\\\\\\\\\\\\\">\\\\\\\\n        If you are requesting funding from a specific sponsor, please enter\\\\\\\\n        their username.\\\\\\\\n      </p>\\\\\\\\n      <div class=\\\\\\\\\\\\\\\"input-group flex-nowrap\\\\\\\\\\\\\\\">\\\\\\\\n        <span class=\\\\\\\\\\\\\\\"input-group-text\\\\\\\\\\\\\\\" id=\\\\\\\\\\\\\\\"addon-wrapping\\\\\\\\\\\\\\\">\\\\\\\\n          @\\\\\\\\n        </span>\\\\\\\\n        <input\\\\\\\\n          type=\\\\\\\\\\\\\\\"text\\\\\\\\\\\\\\\"\\\\\\\\n          class=\\\\\\\\\\\\\\\"form-control\\\\\\\\\\\\\\\"\\\\\\\\n          placeholder=\\\\\\\\\\\\\\\"Enter username\\\\\\\\\\\\\\\"\\\\\\\\n          value={state.supervisor}\\\\\\\\n          onChange={(event) => State.update({ supervisor: event.target.value })}\\\\\\\\n        />\\\\\\\\n      </div>\\\\\\\\n    </div>\\\\\\\\n  </div>\\\\\\\\n);\\\\\\\\n\\\\\\\\nfunction generateDescription(text, amount, token, supervisor, seekingFunding) {\\\\\\\\n  const fundingText =\\\\\\\\n    amount > 0 && token ? `###### Requested amount: ${amount} ${token}\\\\\\\\\\\\\\\\n` : \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\";\\\\\\\\n  const supervisorText = supervisor\\\\\\\\n    ? `###### Requested sponsor: @${supervisor}\\\\\\\\\\\\\\\\n`\\\\\\\\n    : \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\";\\\\\\\\n  return seekingFunding ? `${fundingText}${supervisorText}${text}` : text;\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst renamedPostType = postType == \\\\\\\\\\\\\\\"Submission\\\\\\\\\\\\\\\" ? \\\\\\\\\\\\\\\"Solution\\\\\\\\\\\\\\\" : postType;\\\\\\\\n// Below there is a weird code with fields.includes(\\\\\\\\\\\\\\\"githubLink\\\\\\\\\\\\\\\") ternary operator.\\\\\\\\n// This is to hack around rendering bug of near.social.\\\\\\\\nreturn (\\\\\\\\n  <div className=\\\\\\\\\\\\\\\"card\\\\\\\\\\\\\\\">\\\\\\\\n    <div className=\\\\\\\\\\\\\\\"card-header\\\\\\\\\\\\\\\">\\\\\\\\n      {mode} {renamedPostType}\\\\\\\\n    </div>\\\\\\\\n\\\\\\\\n    <div class=\\\\\\\\\\\\\\\"card-body\\\\\\\\\\\\\\\">\\\\\\\\n      {state.warning && (\\\\\\\\n        <div\\\\\\\\n          class=\\\\\\\\\\\\\\\"alert alert-warning alert-dismissible fade show\\\\\\\\\\\\\\\"\\\\\\\\n          role=\\\\\\\\\\\\\\\"alert\\\\\\\\\\\\\\\"\\\\\\\\n        >\\\\\\\\n          {state.warning}\\\\\\\\n          <button\\\\\\\\n            type=\\\\\\\\\\\\\\\"button\\\\\\\\\\\\\\\"\\\\\\\\n            class=\\\\\\\\\\\\\\\"btn-close\\\\\\\\\\\\\\\"\\\\\\\\n            data-bs-dismiss=\\\\\\\\\\\\\\\"alert\\\\\\\\\\\\\\\"\\\\\\\\n            aria-label=\\\\\\\\\\\\\\\"Close\\\\\\\\\\\\\\\"\\\\\\\\n            onClick={() => State.update({ warning: \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\" })}\\\\\\\\n          ></button>\\\\\\\\n        </div>\\\\\\\\n      )}\\\\\\\\n      {/* This statement around the githubLinkDiv creates a weird render bug\\\\\\\\n      where the title renders extra on state change. */}\\\\\\\\n      {fields.includes(\\\\\\\\\\\\\\\"githubLink\\\\\\\\\\\\\\\") ? (\\\\\\\\n        <div className=\\\\\\\\\\\\\\\"row\\\\\\\\\\\\\\\">\\\\\\\\n          {fields.includes(\\\\\\\\\\\\\\\"githubLink\\\\\\\\\\\\\\\") && githubLinkDiv}\\\\\\\\n          {labelEditor}\\\\\\\\n          {fields.includes(\\\\\\\\\\\\\\\"name\\\\\\\\\\\\\\\") && nameDiv}\\\\\\\\n          {fields.includes(\\\\\\\\\\\\\\\"description\\\\\\\\\\\\\\\") && callDescriptionDiv()}\\\\\\\\n        </div>\\\\\\\\n      ) : (\\\\\\\\n        <div className=\\\\\\\\\\\\\\\"row\\\\\\\\\\\\\\\">\\\\\\\\n          {labelEditor}\\\\\\\\n          {fields.includes(\\\\\\\\\\\\\\\"name\\\\\\\\\\\\\\\") && nameDiv}\\\\\\\\n          {fields.includes(\\\\\\\\\\\\\\\"amount\\\\\\\\\\\\\\\") && amountDiv}\\\\\\\\n          {fields.includes(\\\\\\\\\\\\\\\"sponsorship_token\\\\\\\\\\\\\\\") && tokenDiv}\\\\\\\\n          {fields.includes(\\\\\\\\\\\\\\\"supervisor\\\\\\\\\\\\\\\") && supervisorDiv}\\\\\\\\n          {fields.includes(\\\\\\\\\\\\\\\"description\\\\\\\\\\\\\\\") && callDescriptionDiv()}\\\\\\\\n          {fields.includes(\\\\\\\\\\\\\\\"fund_raising\\\\\\\\\\\\\\\") && isFundraisingDiv}\\\\\\\\n          {state.seekingFunding &&\\\\\\\\n            fields.includes(\\\\\\\\\\\\\\\"fund_raising\\\\\\\\\\\\\\\") &&\\\\\\\\n            fundraisingDiv}\\\\\\\\n        </div>\\\\\\\\n      )}\\\\\\\\n      <button\\\\\\\\n        style={{\\\\\\\\n          width: \\\\\\\\\\\\\\\"7rem\\\\\\\\\\\\\\\",\\\\\\\\n          backgroundColor: \\\\\\\\\\\\\\\"#0C7283\\\\\\\\\\\\\\\",\\\\\\\\n          color: \\\\\\\\\\\\\\\"#f3f3f3\\\\\\\\\\\\\\\",\\\\\\\\n        }}\\\\\\\\n        disabled={state.seekingFunding && (!state.amount || state.amount < 1)}\\\\\\\\n        className=\\\\\\\\\\\\\\\"btn btn-light mb-2 p-3\\\\\\\\\\\\\\\"\\\\\\\\n        onClick={onSubmit}\\\\\\\\n      >\\\\\\\\n        Submit\\\\\\\\n      </button>\\\\\\\\n      <button\\\\\\\\n        style={{\\\\\\\\n          width: \\\\\\\\\\\\\\\"7rem\\\\\\\\\\\\\\\",\\\\\\\\n          backgroundColor: \\\\\\\\\\\\\\\"#fff\\\\\\\\\\\\\\\",\\\\\\\\n          color: \\\\\\\\\\\\\\\"#000\\\\\\\\\\\\\\\",\\\\\\\\n        }}\\\\\\\\n        className=\\\\\\\\\\\\\\\"btn btn-light mb-2 p-3\\\\\\\\\\\\\\\"\\\\\\\\n        onClick={toggleEditor}\\\\\\\\n      >\\\\\\\\n        Cancel\\\\\\\\n      </button>\\\\\\\\n      {disclaimer}\\\\\\\\n    </div>\\\\\\\\n    <div class=\\\\\\\\\\\\\\\"card-footer\\\\\\\\\\\\\\\">\\\\\\\\n      Preview:\\\\\\\\n      <Widget\\\\\\\\n        src=\\\\\\\\\\\\\\\"devhub.near/widget/devhub.entity.post.Post\\\\\\\\\\\\\\\"\\\\\\\\n        props={{\\\\\\\\n          isPreview: true,\\\\\\\\n          id: 0, // irrelevant\\\\\\\\n          post: {\\\\\\\\n            author_id: state.author_id,\\\\\\\\n            likes: [],\\\\\\\\n            snapshot: {\\\\\\\\n              editor_id: state.editor_id,\\\\\\\\n              labels: state.labelStrings,\\\\\\\\n              post_type: postType,\\\\\\\\n              name: state.name,\\\\\\\\n              description:\\\\\\\\n                postType == \\\\\\\\\\\\\\\"Solution\\\\\\\\\\\\\\\"\\\\\\\\n                  ? generateDescription(\\\\\\\\n                      state.description,\\\\\\\\n                      state.amount,\\\\\\\\n                      state.token,\\\\\\\\n                      state.supervisor,\\\\\\\\n                      state.seekingFunding\\\\\\\\n                    )\\\\\\\\n                  : state.description,\\\\\\\\n              amount: state.amount,\\\\\\\\n              sponsorship_token: state.token,\\\\\\\\n              supervisor: state.supervisor,\\\\\\\\n              github_link: state.githubLink,\\\\\\\\n            },\\\\\\\\n          },\\\\\\\\n        }}\\\\\\\\n      />\\\\\\\\n    </div>\\\\\\\\n  </div>\\\\\\\\n);\\\\\\\\n\"}, \"devhub.feature.post-search.panel\": {\"\": \"const { href } = VM.require(\\\\\\\\\\\\\\\"devhub.near/widget/core.lib.url\\\\\\\\\\\\\\\");\\\\\\\\n\\\\\\\\nhref || (href = () => {});\\\\\\\\n\\\\\\\\nState.init({\\\\\\\\n  tag: props.tag,\\\\\\\\n  author: props.author,\\\\\\\\n  term: \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\",\\\\\\\\n});\\\\\\\\n\\\\\\\\nconst updateInput = (term) => {\\\\\\\\n  State.update({\\\\\\\\n    term: term,\\\\\\\\n  });\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst buttonStyle = {\\\\\\\\n  backgroundColor: \\\\\\\\\\\\\\\"#0C7283\\\\\\\\\\\\\\\",\\\\\\\\n  color: \\\\\\\\\\\\\\\"#f3f3f3\\\\\\\\\\\\\\\",\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst PageTitle = styled.h1`\\\\\\\\n  color: #555555;\\\\\\\\n  font-size: 24px;\\\\\\\\n  font-style: normal;\\\\\\\\n  font-weight: 500;\\\\\\\\n  line-height: 120%; /* 28.8px */\\\\\\\\n  letter-spacing: -0.24px;\\\\\\\\n\\\\\\\\n  margin: 0;\\\\\\\\n  margin-bottom: 1rem;\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst Container = styled.div`\\\\\\\\n  padding: 24px;\\\\\\\\n  width: 100%;\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst PostContainer = styled.div`\\\\\\\\n  margin: 0 1rem;\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst InputContainer = styled.div`\\\\\\\\n  display: flex;\\\\\\\\n  flex-direction: row;\\\\\\\\n  position: relative;\\\\\\\\n  width: 25%;\\\\\\\\n\\\\\\\\n  @media screen and (max-width: 768px) {\\\\\\\\n    width: 100%;\\\\\\\\n  }\\\\\\\\n`;\\\\\\\\n\\\\\\\\nreturn (\\\\\\\\n  <>\\\\\\\\n    {!props.hideHeader && (\\\\\\\\n      <Container>\\\\\\\\n        <div className=\\\\\\\\\\\\\\\"w-100\\\\\\\\\\\\\\\">\\\\\\\\n          <PageTitle>Activity Feed</PageTitle>\\\\\\\\n          <div>\\\\\\\\n            <div className=\\\\\\\\\\\\\\\"d-flex flex-column flex-lg-row gap-4\\\\\\\\\\\\\\\">\\\\\\\\n              <InputContainer>\\\\\\\\n                <div className=\\\\\\\\\\\\\\\"position-absolute d-flex ps-3 flex-column h-100 justify-center\\\\\\\\\\\\\\\">\\\\\\\\n                  <i class=\\\\\\\\\\\\\\\"bi bi-search m-auto\\\\\\\\\\\\\\\"></i>\\\\\\\\n                </div>\\\\\\\\n                <input\\\\\\\\n                  type=\\\\\\\\\\\\\\\"search\\\\\\\\\\\\\\\"\\\\\\\\n                  className=\\\\\\\\\\\\\\\"ps-5 form-control border border-0\\\\\\\\\\\\\\\"\\\\\\\\n                  value={state.term ?? \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\"}\\\\\\\\n                  onChange={(e) => updateInput(e.target.value)}\\\\\\\\n                  onKeyDown={(e) => e.key == \\\\\\\\\\\\\\\"Enter\\\\\\\\\\\\\\\" && search()}\\\\\\\\n                  placeholder={props.placeholder ?? `Search by content`}\\\\\\\\n                />\\\\\\\\n              </InputContainer>\\\\\\\\n              <div class=\\\\\\\\\\\\\\\"dropdown\\\\\\\\\\\\\\\">\\\\\\\\n                <button\\\\\\\\n                  class=\\\\\\\\\\\\\\\"btn dropdown-toggle bg-white\\\\\\\\\\\\\\\"\\\\\\\\n                  type=\\\\\\\\\\\\\\\"button\\\\\\\\\\\\\\\"\\\\\\\\n                  data-bs-toggle=\\\\\\\\\\\\\\\"dropdown\\\\\\\\\\\\\\\"\\\\\\\\n                  aria-expanded=\\\\\\\\\\\\\\\"false\\\\\\\\\\\\\\\"\\\\\\\\n                >\\\\\\\\n                  Sort{props.recency === \\\\\\\\\\\\\\\"all\\\\\\\\\\\\\\\" ? \\\\\\\\\\\\\\\": All replies\\\\\\\\\\\\\\\" : \\\\\\\\\\\\\\\": Latest\\\\\\\\\\\\\\\"}\\\\\\\\n                </button>\\\\\\\\n                <ul class=\\\\\\\\\\\\\\\"dropdown-menu px-2 shadow\\\\\\\\\\\\\\\">\\\\\\\\n                  <li>\\\\\\\\n                    <a\\\\\\\\n                      style={{ borderRadius: \\\\\\\\\\\\\\\"5px\\\\\\\\\\\\\\\" }}\\\\\\\\n                      class=\\\\\\\\\\\\\\\"dropdown-item link-underline link-underline-opacity-0\\\\\\\\\\\\\\\"\\\\\\\\n                      href={href({\\\\\\\\n                        widgetSrc: \\\\\\\\\\\\\\\"devhub.near/widget/app\\\\\\\\\\\\\\\",\\\\\\\\n                        params: { page: \\\\\\\\\\\\\\\"feed\\\\\\\\\\\\\\\" },\\\\\\\\n                      })}\\\\\\\\n                    >\\\\\\\\n                      Latest\\\\\\\\n                    </a>\\\\\\\\n                  </li>\\\\\\\\n                  <li>\\\\\\\\n                    <a\\\\\\\\n                      style={{ borderRadius: \\\\\\\\\\\\\\\"5px\\\\\\\\\\\\\\\" }}\\\\\\\\n                      class=\\\\\\\\\\\\\\\"dropdown-item link-underline link-underline-opacity-0\\\\\\\\\\\\\\\"\\\\\\\\n                      href={href({\\\\\\\\n                        widgetSrc: \\\\\\\\\\\\\\\"devhub.near/widget/app\\\\\\\\\\\\\\\",\\\\\\\\n                        params: { page: \\\\\\\\\\\\\\\"feed\\\\\\\\\\\\\\\", recency: \\\\\\\\\\\\\\\"all\\\\\\\\\\\\\\\" },\\\\\\\\n                      })}\\\\\\\\n                    >\\\\\\\\n                      All replies\\\\\\\\n                    </a>\\\\\\\\n                  </li>\\\\\\\\n                </ul>\\\\\\\\n              </div>\\\\\\\\n              <div class=\\\\\\\\\\\\\\\"dropdown\\\\\\\\\\\\\\\">\\\\\\\\n                <Widget\\\\\\\\n                  src=\\\\\\\\\\\\\\\"devhub.near/widget/devhub.feature.post-search.by-author\\\\\\\\\\\\\\\"\\\\\\\\n                  props={{\\\\\\\\n                    author: state.author,\\\\\\\\n                    onAuthorSearch: (author) => {\\\\\\\\n                      State.update({ author });\\\\\\\\n                    },\\\\\\\\n                  }}\\\\\\\\n                />\\\\\\\\n              </div>\\\\\\\\n              <div>\\\\\\\\n                <Widget\\\\\\\\n                  src=\\\\\\\\\\\\\\\"devhub.near/widget/devhub.feature.post-search.by-tag\\\\\\\\\\\\\\\"\\\\\\\\n                  props={{\\\\\\\\n                    tag: state.tag,\\\\\\\\n                    onTagSearch: (tag) => {\\\\\\\\n                      State.update({ tag });\\\\\\\\n                    },\\\\\\\\n                  }}\\\\\\\\n                />\\\\\\\\n              </div>\\\\\\\\n              <div className=\\\\\\\\\\\\\\\"d-flex flex-row-reverse flex-grow-1\\\\\\\\\\\\\\\">\\\\\\\\n                {props.children}\\\\\\\\n              </div>\\\\\\\\n            </div>\\\\\\\\n          </div>\\\\\\\\n        </div>\\\\\\\\n      </Container>\\\\\\\\n    )}\\\\\\\\n    <PostContainer>\\\\\\\\n      <Widget\\\\\\\\n        src=\\\\\\\\\\\\\\\"devhub.near/widget/devhub.entity.post.List\\\\\\\\\\\\\\\"\\\\\\\\n        props={{\\\\\\\\n          author: state.author,\\\\\\\\n          tag: state.tag,\\\\\\\\n          term: state.term,\\\\\\\\n          recency: props.recency,\\\\\\\\n          transactionHashes: props.transactionHashes,\\\\\\\\n        }}\\\\\\\\n      />\\\\\\\\n    </PostContainer>\\\\\\\\n  </>\\\\\\\\n);\\\\\\\\n\"}}}}}"
      }
    ],
    "actions_agg": {
      "deposit": 0
    },
    "outcomes": {
      "status": true
    },
    "outcomes_agg": {
      "transaction_fee": 1.8647936227746e+21
    }
  },
  {
    "id": "1406157163",
    "receipt_id": "DB8Yqp3nZ3pfjsSEhpxRzaqcaTjxW7P2T8HUqPGGx61p",
    "predecessor_account_id": "system",
    "receiver_account_id": "devhub.near",
    "receipt_kind": "ACTION",
    "receipt_block": {
      "block_hash": "5QoFxDzLCT18V6L25UUyDEoUYfw9wR78sPnuwyGrcGpR",
      "block_height": 105635197,
      "block_timestamp": 1699906610321887700
    },
    "receipt_outcome": {
      "gas_burnt": 223182562500,
      "tokens_burnt": 0,
      "executor_account_id": "devhub.near",
      "status": true
    },
    "transaction_hash": "9CAY8FUrwXrhLdmLf5Bow163Tuw72mmJtfJPWdoS8E38",
    "included_in_block_hash": "BRq4bFDTkED2mw3ec1Yom31MmWK6Wn9JJBDj4vw7rrgg",
    "block_timestamp": "1699906608468547837",
    "block": {
      "block_height": 105635195
    },
    "receipt_conversion_tokens_burnt": "253870035003000000000",
    "actions": [
      {
        "action": "TRANSFER",
        "method": null,
        "deposit": 1.87487918320745e+23,
        "fee": 0,
        "args": null
      }
    ],
    "actions_agg": {
      "deposit": 0
    },
    "outcomes": {
      "status": true
    },
    "outcomes_agg": {
      "transaction_fee": 1.8647936227746e+21
    }
  },
  {
    "id": "1413750795",
    "receipt_id": "BsZmpJgXhQG8QZ76b3SDAXJL78X9QWTzDMc6MjNW9dX5",
    "predecessor_account_id": "devhub.near",
    "receiver_account_id": "social.near",
    "receipt_kind": "ACTION",
    "receipt_block": {
      "block_hash": "2xB9zhPbC7nU5QKb8tJxde1LN6bdWgFUq74cd3meNLBr",
      "block_height": 105722460,
      "block_timestamp": 1700013080547396600
    },
    "receipt_outcome": {
      "gas_burnt": 10142993818213,
      "tokens_burnt": 1.0142993818213e+21,
      "executor_account_id": "social.near",
      "status": true
    },
    "transaction_hash": "4C9T1MSsoPxMqFav2NPYzLuKhoDGErxxvKh5d4QhELWa",
    "included_in_block_hash": "LfA9eUqAfEa5e9ftJRg3eswonG3xEhQddv9uGdR1q5o",
    "block_timestamp": "1700013079723628453",
    "block": {
      "block_height": 105722459
    },
    "receipt_conversion_tokens_burnt": "247045070061400000000",
    "actions": [
      {
        "action": "FUNCTION_CALL",
        "method": "set",
        "deposit": 0,
        "fee": 1.0142993818213e+21,
        "args": "{\"data\": {\"devhub.near\": {\"widget\": {\"devhub.entity.post.List\": {\"\": \"// This component implementation was forked from [IndexFeed], but it does not fully implement lazy loading.\\\\\\\\n// While this component uses InfiniteScroll, it still loads the whole list of Post IDs in one view call.\\\\\\\\n// The contract will need to be extended with pagination support, yet, even in the current state the page loads much faster.\\\\\\\\n// [IndexFeed]: https://near.social/#/mob.near/widget/WidgetSource?src=mob.near/widget/IndexFeed\\\\\\\\n\\\\\\\\nconst { href } = VM.require(\\\\\\\\\\\\\\\"devhub.near/widget/core.lib.url\\\\\\\\\\\\\\\");\\\\\\\\n\\\\\\\\nconst { draftState, onDraftStateChange } = VM.require(\\\\\\\\n  \\\\\\\\\\\\\\\"devhub.near/widget/devhub.entity.post.draft\\\\\\\\\\\\\\\"\\\\\\\\n);\\\\\\\\n\\\\\\\\nif (!href) {\\\\\\\\n  return <p>Loading modules...</p>;\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst QUERYAPI_ENDPOINT = `https://near-queryapi.api.pagoda.co/v1/graphql/`;\\\\\\\\n\\\\\\\\nconst queryName =\\\\\\\\n  props.queryName ?? `bo_near_devhub_v34_posts_with_latest_snapshot`;\\\\\\\\n\\\\\\\\nconst query = `query DevhubPostsQuery($limit: Int = 100, $offset: Int = 0, $where: ${queryName}_bool_exp = {}) {\\\\\\\\n    ${queryName}(\\\\\\\\n      limit: $limit\\\\\\\\n      offset: $offset\\\\\\\\n      order_by: {block_height: desc}\\\\\\\\n      where: $where\\\\\\\\n    ) {\\\\\\\\n      post_id\\\\\\\\n    }\\\\\\\\n  }\\\\\\\\n`;\\\\\\\\n\\\\\\\\nfunction fetchGraphQL(operationsDoc, operationName, variables) {\\\\\\\\n  return asyncFetch(QUERYAPI_ENDPOINT, {\\\\\\\\n    method: \\\\\\\\\\\\\\\"POST\\\\\\\\\\\\\\\",\\\\\\\\n    headers: { \\\\\\\\\\\\\\\"x-hasura-role\\\\\\\\\\\\\\\": `bo_near` },\\\\\\\\n    body: JSON.stringify({\\\\\\\\n      query: operationsDoc,\\\\\\\\n      variables: variables,\\\\\\\\n      operationName: operationName,\\\\\\\\n    }),\\\\\\\\n  });\\\\\\\\n}\\\\\\\\n\\\\\\\\nfunction searchConditionChanged() {\\\\\\\\n  return (\\\\\\\\n    props.author != state.author ||\\\\\\\\n    props.term != state.term ||\\\\\\\\n    props.tag != state.tag ||\\\\\\\\n    props.recency != state.recency\\\\\\\\n  );\\\\\\\\n}\\\\\\\\n\\\\\\\\nfunction updateSearchCondition() {\\\\\\\\n  State.update({\\\\\\\\n    author: props.author,\\\\\\\\n    term: props.term,\\\\\\\\n    tag: props.tag,\\\\\\\\n    recency: props.recency,\\\\\\\\n    loading: true,\\\\\\\\n  });\\\\\\\\n}\\\\\\\\n\\\\\\\\nfunction getPostIds() {\\\\\\\\n  if (searchConditionChanged()) {\\\\\\\\n    updateSearchCondition();\\\\\\\\n    return;\\\\\\\\n  }\\\\\\\\n  let where = {};\\\\\\\\n  let authorId = props.author;\\\\\\\\n  let label = props.tag;\\\\\\\\n  if (authorId) {\\\\\\\\n    where = { author_id: { _eq: authorId }, ...where };\\\\\\\\n  }\\\\\\\\n  if (props.term) {\\\\\\\\n    where = { description: { _ilike: `%${props.term}%` }, ...where };\\\\\\\\n  }\\\\\\\\n  if (label) {\\\\\\\\n    if (typeof label === \\\\\\\\\\\\\\\"string\\\\\\\\\\\\\\\") {\\\\\\\\n      // Handle a single label\\\\\\\\n      where = { labels: { _contains: label }, ...where };\\\\\\\\n    } else if (Array.isArray(label)) {\\\\\\\\n      // Handle an array of labels\\\\\\\\n      where = {\\\\\\\\n        labels: {\\\\\\\\n          _containsAny: label,\\\\\\\\n        },\\\\\\\\n        ...where,\\\\\\\\n      };\\\\\\\\n    }\\\\\\\\n  }\\\\\\\\n  if (!props.recency) {\\\\\\\\n    // show only top level posts\\\\\\\\n    where = { parent_id: { _is_null: true }, ...where };\\\\\\\\n  }\\\\\\\\n\\\\\\\\n  // Don\\\\\\\\\\\\'t show blog\\\\\\\\n  where = {\\\\\\\\n    _not: {\\\\\\\\n      labels: { _contains: \\\\\\\\\\\\\\\"blog\\\\\\\\\\\\\\\" },\\\\\\\\n      parent_id: { _is_null: true },\\\\\\\\n      post_type: { _eq: \\\\\\\\\\\\\\\"Comment\\\\\\\\\\\\\\\" },\\\\\\\\n    },\\\\\\\\n    ...where,\\\\\\\\n  };\\\\\\\\n\\\\\\\\n  console.log(\\\\\\\\\\\\\\\"searching for\\\\\\\\\\\\\\\", where);\\\\\\\\n  fetchGraphQL(query, \\\\\\\\\\\\\\\"DevhubPostsQuery\\\\\\\\\\\\\\\", {\\\\\\\\n    limit: 100,\\\\\\\\n    offset: 0,\\\\\\\\n    where,\\\\\\\\n  }).then((result) => {\\\\\\\\n    if (result.status === 200) {\\\\\\\\n      console.log(\\\\\\\\\\\\\\\"search success\\\\\\\\\\\\\\\");\\\\\\\\n      if (result.body.data) {\\\\\\\\n        const data = result.body.data[queryName];\\\\\\\\n        State.update({\\\\\\\\n          postIds: data.map((p) => p.post_id),\\\\\\\\n          loading: false,\\\\\\\\n        });\\\\\\\\n        console.log(\\\\\\\\\\\\\\\"found:\\\\\\\\\\\\\\\");\\\\\\\\n        console.log(data);\\\\\\\\n      }\\\\\\\\n    } else {\\\\\\\\n      console.error(\\\\\\\\\\\\\\\"error:\\\\\\\\\\\\\\\", result.body);\\\\\\\\n      State.update({ loading: false });\\\\\\\\n    }\\\\\\\\n  });\\\\\\\\n}\\\\\\\\n\\\\\\\\nState.init({\\\\\\\\n  period: \\\\\\\\\\\\\\\"week\\\\\\\\\\\\\\\",\\\\\\\\n});\\\\\\\\n\\\\\\\\ngetPostIds();\\\\\\\\n\\\\\\\\nfunction defaultRenderItem(postId, additionalProps) {\\\\\\\\n  if (!additionalProps) {\\\\\\\\n    additionalProps = {};\\\\\\\\n  }\\\\\\\\n  // It is important to have a non-zero-height element as otherwise InfiniteScroll loads too many items on initial load\\\\\\\\n  return (\\\\\\\\n    <div className=\\\\\\\\\\\\\\\"py-2\\\\\\\\\\\\\\\" style={{ minHeight: \\\\\\\\\\\\\\\"150px\\\\\\\\\\\\\\\" }}>\\\\\\\\n      <Widget\\\\\\\\n        src={\\\\\\\\\\\\\\\"devhub.near/widget/devhub.entity.post.Post\\\\\\\\\\\\\\\"}\\\\\\\\n        props={{\\\\\\\\n          id: postId,\\\\\\\\n          expandable: true,\\\\\\\\n          defaultExpanded: false,\\\\\\\\n          isInList: true,\\\\\\\\n          draftState,\\\\\\\\n          isPreview: false,\\\\\\\\n          onDraftStateChange,\\\\\\\\n          ...additionalProps,\\\\\\\\n          referral: postId,\\\\\\\\n        }}\\\\\\\\n      />\\\\\\\\n    </div>\\\\\\\\n  );\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst renderItem = props.renderItem ?? defaultRenderItem;\\\\\\\\n\\\\\\\\nconst cachedRenderItem = (item, i) => {\\\\\\\\n  if (props.term) {\\\\\\\\n    return renderItem(item, {\\\\\\\\n      searchKeywords: [props.term],\\\\\\\\n    });\\\\\\\\n  }\\\\\\\\n\\\\\\\\n  const key = JSON.stringify(item);\\\\\\\\n\\\\\\\\n  if (!(key in state.cachedItems)) {\\\\\\\\n    state.cachedItems[key] = renderItem(item);\\\\\\\\n    State.update();\\\\\\\\n  }\\\\\\\\n  return state.cachedItems[key];\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst initialRenderLimit = props.initialRenderLimit ?? 3;\\\\\\\\nconst addDisplayCount = props.nextLimit ?? initialRenderLimit;\\\\\\\\n\\\\\\\\nconst ONE_DAY = 60 * 60 * 24 * 1000;\\\\\\\\nconst ONE_WEEK = 60 * 60 * 24 * 1000 * 7;\\\\\\\\nconst ONE_MONTH = 60 * 60 * 24 * 1000 * 30;\\\\\\\\n\\\\\\\\nfunction getHotnessScore(post) {\\\\\\\\n  //post.id - shows the age of the post, should grow exponentially, since newer posts are more important\\\\\\\\n  //post.likes.length - linear value\\\\\\\\n  const age = Math.pow(post.id, 5);\\\\\\\\n  const comments = post.comments;\\\\\\\\n  const commentAge = comments.reduce((sum, age) => sum + Math.pow(age, 5), 0);\\\\\\\\n  const totalAge = age + commentAge;\\\\\\\\n  //use log functions to make likes score and exponentially big age score close to each other\\\\\\\\n  return Math.log10(post.likes.length) + Math.log(Math.log10(totalAge));\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst getPeriodText = (period) => {\\\\\\\\n  let text = \\\\\\\\\\\\\\\"Last 24 hours\\\\\\\\\\\\\\\";\\\\\\\\n  if (period === \\\\\\\\\\\\\\\"week\\\\\\\\\\\\\\\") {\\\\\\\\n    text = \\\\\\\\\\\\\\\"Last week\\\\\\\\\\\\\\\";\\\\\\\\n  }\\\\\\\\n  if (period === \\\\\\\\\\\\\\\"month\\\\\\\\\\\\\\\") {\\\\\\\\n    text = \\\\\\\\\\\\\\\"Last month\\\\\\\\\\\\\\\";\\\\\\\\n  }\\\\\\\\n  return text;\\\\\\\\n};\\\\\\\\n\\\\\\\\nlet postIds = state.postIds ?? null;\\\\\\\\n\\\\\\\\nconst loader = (\\\\\\\\n  <div className=\\\\\\\\\\\\\\\"loader\\\\\\\\\\\\\\\" key={\\\\\\\\\\\\\\\"loader\\\\\\\\\\\\\\\"}>\\\\\\\\n    <span\\\\\\\\n      className=\\\\\\\\\\\\\\\"spinner-grow spinner-grow-sm me-1\\\\\\\\\\\\\\\"\\\\\\\\n      role=\\\\\\\\\\\\\\\"status\\\\\\\\\\\\\\\"\\\\\\\\n      aria-hidden=\\\\\\\\\\\\\\\"true\\\\\\\\\\\\\\\"\\\\\\\\n    />\\\\\\\\n    Loading ...\\\\\\\\n  </div>\\\\\\\\n);\\\\\\\\n\\\\\\\\nif (postIds === null) {\\\\\\\\n  return loader;\\\\\\\\n}\\\\\\\\nconst initialItems = postIds;\\\\\\\\n//const initialItems = postIds.map(postId => ({ id: postId, ...Near.view(nearDevGovGigsContractAccountId, \\\\\\\\\\\\\\\"get_post\\\\\\\\\\\\\\\", { post_id: postId }) }));\\\\\\\\n\\\\\\\\n// const computeFetchFrom = (items, limit) => {\\\\\\\\n//   if (!items || items.length < limit) {\\\\\\\\n//     return false;\\\\\\\\n//   }\\\\\\\\n//   const blockHeight = items[items.length - 1].blockHeight;\\\\\\\\n//   return index.options.order === \\\\\\\\\\\\\\\"desc\\\\\\\\\\\\\\\" ? blockHeight - 1 : blockHeight + 1;\\\\\\\\n// };\\\\\\\\n\\\\\\\\n// const mergeItems = (newItems) => {\\\\\\\\n//   const items = [\\\\\\\\n//     ...new Set([...newItems, ...state.items].map((i) => JSON.stringify(i))),\\\\\\\\n//   ].map((i) => JSON.parse(i));\\\\\\\\n//   items.sort((a, b) => a.blockHeight - b.blockHeight);\\\\\\\\n//   if (index.options.order === \\\\\\\\\\\\\\\"desc\\\\\\\\\\\\\\\") {\\\\\\\\n//     items.reverse();\\\\\\\\n//   }\\\\\\\\n//   return items;\\\\\\\\n// };\\\\\\\\n\\\\\\\\nconst jInitialItems = JSON.stringify(initialItems);\\\\\\\\nif (state.jInitialItems !== jInitialItems) {\\\\\\\\n  // const jIndex = JSON.stringify(index);\\\\\\\\n  // if (jIndex !== state.jIndex) {\\\\\\\\n  State.update({\\\\\\\\n    jIndex,\\\\\\\\n    jInitialItems,\\\\\\\\n    items: initialItems,\\\\\\\\n    fetchFrom: false,\\\\\\\\n    //nextFetchFrom: computeFetchFrom(initialItems, index.options.limit),\\\\\\\\n    nextFetchFrom: false,\\\\\\\\n    displayCount: initialRenderLimit,\\\\\\\\n    cachedItems: {},\\\\\\\\n  });\\\\\\\\n  // } else {\\\\\\\\n  //   State.update({\\\\\\\\n  //     jInitialItems,\\\\\\\\n  //     items: mergeItems(initialItems),\\\\\\\\n  //   });\\\\\\\\n  // }\\\\\\\\n}\\\\\\\\n\\\\\\\\nif (state.fetchFrom) {\\\\\\\\n  // TODO: fetchFrom\\\\\\\\n  // const limit = addDisplayCount;\\\\\\\\n  // const newItems = Social.index(\\\\\\\\n  //   index.action,\\\\\\\\n  //   index.key,\\\\\\\\n  //   Object.assign({}, index.options, {\\\\\\\\n  //     from: state.fetchFrom,\\\\\\\\n  //     subscribe: undefined,\\\\\\\\n  //     limit,\\\\\\\\n  //   })\\\\\\\\n  // );\\\\\\\\n  // if (newItems !== null) {\\\\\\\\n  //   State.update({\\\\\\\\n  //     items: mergeItems(newItems),\\\\\\\\n  //     fetchFrom: false,\\\\\\\\n  //     nextFetchFrom: computeFetchFrom(newItems, limit),\\\\\\\\n  //   });\\\\\\\\n  // }\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst makeMoreItems = () => {\\\\\\\\n  State.update({\\\\\\\\n    displayCount: state.displayCount + addDisplayCount,\\\\\\\\n  });\\\\\\\\n  if (\\\\\\\\n    state.items.length - state.displayCount < addDisplayCount * 2 &&\\\\\\\\n    !state.fetchFrom &&\\\\\\\\n    state.nextFetchFrom &&\\\\\\\\n    state.nextFetchFrom !== state.fetchFrom\\\\\\\\n  ) {\\\\\\\\n    State.update({\\\\\\\\n      fetchFrom: state.nextFetchFrom,\\\\\\\\n    });\\\\\\\\n  }\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst fetchMore =\\\\\\\\n  props.manual &&\\\\\\\\n  (state.fetchFrom && state.items.length < state.displayCount\\\\\\\\n    ? loader\\\\\\\\n    : state.displayCount < state.items.length && (\\\\\\\\n        <div key={\\\\\\\\\\\\\\\"loader more\\\\\\\\\\\\\\\"}>\\\\\\\\n          <a href=\\\\\\\\\\\\\\\"javascript:void\\\\\\\\\\\\\\\" onClick={(e) => makeMoreItems()}>\\\\\\\\n            {props.loadMoreText ?? \\\\\\\\\\\\\\\"Load more...\\\\\\\\\\\\\\\"}\\\\\\\\n          </a>\\\\\\\\n        </div>\\\\\\\\n      ));\\\\\\\\n\\\\\\\\nconst items = state.items ? state.items.slice(0, state.displayCount) : [];\\\\\\\\n\\\\\\\\nconst renderedItems = items.map(cachedRenderItem);\\\\\\\\n\\\\\\\\nconst Head =\\\\\\\\n  props.recency == \\\\\\\\\\\\\\\"hot\\\\\\\\\\\\\\\" ? (\\\\\\\\n    <div class=\\\\\\\\\\\\\\\"row\\\\\\\\\\\\\\\">\\\\\\\\n      <div class=\\\\\\\\\\\\\\\"fs-5 col-6 align-self-center\\\\\\\\\\\\\\\">\\\\\\\\n        <i class=\\\\\\\\\\\\\\\"bi-fire\\\\\\\\\\\\\\\"></i>\\\\\\\\n        <span>Hottest Posts</span>\\\\\\\\n      </div>\\\\\\\\n      <div class=\\\\\\\\\\\\\\\"col-6 dropdown d-flex justify-content-end\\\\\\\\\\\\\\\">\\\\\\\\n        <a\\\\\\\\n          class=\\\\\\\\\\\\\\\"btn btn-secondary dropdown-toggle\\\\\\\\\\\\\\\"\\\\\\\\n          href=\\\\\\\\\\\\\\\"#\\\\\\\\\\\\\\\"\\\\\\\\n          role=\\\\\\\\\\\\\\\"button\\\\\\\\\\\\\\\"\\\\\\\\n          id=\\\\\\\\\\\\\\\"dropdownMenuLink\\\\\\\\\\\\\\\"\\\\\\\\n          data-bs-toggle=\\\\\\\\\\\\\\\"dropdown\\\\\\\\\\\\\\\"\\\\\\\\n          aria-expanded=\\\\\\\\\\\\\\\"false\\\\\\\\\\\\\\\"\\\\\\\\n        >\\\\\\\\n          {getPeriodText(state.period)}\\\\\\\\n        </a>\\\\\\\\n\\\\\\\\n        <ul class=\\\\\\\\\\\\\\\"dropdown-menu\\\\\\\\\\\\\\\" aria-labelledby=\\\\\\\\\\\\\\\"dropdownMenuLink\\\\\\\\\\\\\\\">\\\\\\\\n          <li>\\\\\\\\n            <button\\\\\\\\n              class=\\\\\\\\\\\\\\\"dropdown-item\\\\\\\\\\\\\\\"\\\\\\\\n              onClick={() => {\\\\\\\\n                State.update({ period: \\\\\\\\\\\\\\\"day\\\\\\\\\\\\\\\" });\\\\\\\\n              }}\\\\\\\\n            >\\\\\\\\n              {getPeriodText(\\\\\\\\\\\\\\\"day\\\\\\\\\\\\\\\")}\\\\\\\\n            </button>\\\\\\\\n          </li>\\\\\\\\n          <li>\\\\\\\\n            <button\\\\\\\\n              class=\\\\\\\\\\\\\\\"dropdown-item\\\\\\\\\\\\\\\"\\\\\\\\n              onClick={() => {\\\\\\\\n                State.update({ period: \\\\\\\\\\\\\\\"week\\\\\\\\\\\\\\\" });\\\\\\\\n              }}\\\\\\\\n            >\\\\\\\\n              {getPeriodText(\\\\\\\\\\\\\\\"week\\\\\\\\\\\\\\\")}\\\\\\\\n            </button>\\\\\\\\n          </li>\\\\\\\\n          <li>\\\\\\\\n            <button\\\\\\\\n              class=\\\\\\\\\\\\\\\"dropdown-item\\\\\\\\\\\\\\\"\\\\\\\\n              onClick={() => {\\\\\\\\n                State.update({ period: \\\\\\\\\\\\\\\"month\\\\\\\\\\\\\\\" });\\\\\\\\n              }}\\\\\\\\n            >\\\\\\\\n              {getPeriodText(\\\\\\\\\\\\\\\"month\\\\\\\\\\\\\\\")}\\\\\\\\n            </button>\\\\\\\\n          </li>\\\\\\\\n        </ul>\\\\\\\\n      </div>\\\\\\\\n    </div>\\\\\\\\n  ) : (\\\\\\\\n    <></>\\\\\\\\n  );\\\\\\\\n\\\\\\\\nreturn (\\\\\\\\n  <>\\\\\\\\n    {Head}\\\\\\\\n    {state.loading ? loader : null}\\\\\\\\n    {is_edit_or_add_post_transaction ? (\\\\\\\\n      <p class=\\\\\\\\\\\\\\\"text-secondary mt-4\\\\\\\\\\\\\\\">\\\\\\\\n        Post {transaction_method_name == \\\\\\\\\\\\\\\"edit_post\\\\\\\\\\\\\\\" ? \\\\\\\\\\\\\\\"edited\\\\\\\\\\\\\\\" : \\\\\\\\\\\\\\\"added\\\\\\\\\\\\\\\"}{\\\\\\\\\\\\\\\" \\\\\\\\\\\\\\\"}\\\\\\\\n        successfully. Back to{\\\\\\\\\\\\\\\" \\\\\\\\\\\\\\\"}\\\\\\\\n        <Link\\\\\\\\n          style={{\\\\\\\\n            color: \\\\\\\\\\\\\\\"#3252A6\\\\\\\\\\\\\\\",\\\\\\\\n          }}\\\\\\\\n          className=\\\\\\\\\\\\\\\"fw-bold\\\\\\\\\\\\\\\"\\\\\\\\n          to={href({\\\\\\\\n            widgetSrc: \\\\\\\\\\\\\\\"devhub.near/widget/app\\\\\\\\\\\\\\\",\\\\\\\\n            params: { page: \\\\\\\\\\\\\\\"feed\\\\\\\\\\\\\\\" },\\\\\\\\n          })}\\\\\\\\n        >\\\\\\\\n          feed\\\\\\\\n        </Link>\\\\\\\\n      </p>\\\\\\\\n    ) : state.items.length > 0 ? (\\\\\\\\n      <InfiniteScroll\\\\\\\\n        pageStart={0}\\\\\\\\n        loadMore={makeMoreItems}\\\\\\\\n        hasMore={state.displayCount < state.items.length}\\\\\\\\n        loader={loader}\\\\\\\\n      >\\\\\\\\n        {renderedItems}\\\\\\\\n      </InfiniteScroll>\\\\\\\\n    ) : (\\\\\\\\n      <p class=\\\\\\\\\\\\\\\"text-secondary\\\\\\\\\\\\\\\">\\\\\\\\n        No posts{\\\\\\\\\\\\\\\" \\\\\\\\\\\\\\\"}\\\\\\\\n        {props.term || props.tag || props.author ? \\\\\\\\\\\\\\\"matches search\\\\\\\\\\\\\\\" : \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\"}\\\\\\\\n        {props.recency === \\\\\\\\\\\\\\\"hot\\\\\\\\\\\\\\\"\\\\\\\\n          ? \\\\\\\\\\\\\\\" in \\\\\\\\\\\\\\\" + getPeriodText(state.period).toLowerCase()\\\\\\\\n          : \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\"}\\\\\\\\n      </p>\\\\\\\\n    )}\\\\\\\\n  </>\\\\\\\\n);\\\\\\\\n\"}, \"devhub.entity.addon.blog.Feed\": {\"\": \"const { Item, Layout } = props;\\\\\\\\n\\\\\\\\nLayout = Layout || (() => <></>);\\\\\\\\n\\\\\\\\nconst Container = styled.div``;\\\\\\\\n\\\\\\\\nconst Loader = styled.div`\\\\\\\\n  text-align: center;\\\\\\\\n  padding: 20px;\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst QUERYAPI_ENDPOINT = `https://near-queryapi.api.pagoda.co/v1/graphql/`;\\\\\\\\nconst DISPLAY_COUNT = 10;\\\\\\\\n\\\\\\\\nconst fetchGraphQL = (operationsDoc, operationName, variables) => {\\\\\\\\n  return asyncFetch(QUERYAPI_ENDPOINT, {\\\\\\\\n    method: \\\\\\\\\\\\\\\"POST\\\\\\\\\\\\\\\",\\\\\\\\n    headers: { \\\\\\\\\\\\\\\"x-hasura-role\\\\\\\\\\\\\\\": `bo_near` },\\\\\\\\n    body: JSON.stringify({\\\\\\\\n      query: operationsDoc,\\\\\\\\n      variables: variables,\\\\\\\\n      operationName: operationName,\\\\\\\\n    }),\\\\\\\\n  });\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst queryName =\\\\\\\\n  props.queryName ?? `bo_near_devhub_v34_posts_with_latest_snapshot`;\\\\\\\\n\\\\\\\\nconst query = `query DevhubPostsQuery($limit: Int = 100, $offset: Int = 0, $where: ${queryName}_bool_exp = {}) {\\\\\\\\n    ${queryName}(\\\\\\\\n      limit: $limit\\\\\\\\n      offset: $offset\\\\\\\\n      order_by: {block_height: desc}\\\\\\\\n      where: $where\\\\\\\\n    ) {\\\\\\\\n      post_id\\\\\\\\n    }\\\\\\\\n  }\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst [postIds, setPostIds] = useState([]);\\\\\\\\nconst [loading, setLoading] = useState(false);\\\\\\\\nconst [cachedItems, setCachedItems] = useState({});\\\\\\\\nconst [hasNext, setHasNext] = useState(true);\\\\\\\\n\\\\\\\\nconst buildWhereClause = () => {\\\\\\\\n  let where = {};\\\\\\\\n  if (props.author) {\\\\\\\\n    where = { author_id: { _eq: props.author }, ...where };\\\\\\\\n  }\\\\\\\\n  if (props.term) {\\\\\\\\n    where = { description: { _ilike: `%${props.term}%` }, ...where };\\\\\\\\n  }\\\\\\\\n  if (props.includeLabels && Array.isArray(props.includeLabels)) {\\\\\\\\n    const labelConditions = props.includeLabels.map((label) => ({\\\\\\\\n      labels: { _contains: label },\\\\\\\\n    }));\\\\\\\\n\\\\\\\\n    where = { _and: [...labelConditions, where] };\\\\\\\\n  }\\\\\\\\n  if (props.excludeLabels && Array.isArray(props.excludeLabels)) {\\\\\\\\n    const labelConditions = props.excludeLabels.map((label) => ({\\\\\\\\n      labels: { _nin: label },\\\\\\\\n    }));\\\\\\\\n\\\\\\\\n    where = { _and: [...labelConditions, where] };\\\\\\\\n  }\\\\\\\\n  if (!props.recency) {\\\\\\\\n    where = { parent_id: { _is_null: true }, ...where };\\\\\\\\n  }\\\\\\\\n  return where;\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst fetchPostIds = (offset) => {\\\\\\\\n  if (!offset) {\\\\\\\\n    offset = 0;\\\\\\\\n  }\\\\\\\\n  if (loading) return;\\\\\\\\n  setLoading(true);\\\\\\\\n  const variables = { limit: DISPLAY_COUNT, offset, where: buildWhereClause() };\\\\\\\\n  fetchGraphQL(query, \\\\\\\\\\\\\\\"DevhubPostsQuery\\\\\\\\\\\\\\\", variables).then((result) => {\\\\\\\\n    if (result.status === 200) {\\\\\\\\n      if (result.body.data) {\\\\\\\\n        const data = result.body.data[queryName];\\\\\\\\n        const newPostIds = data.map((p) => p.post_id);\\\\\\\\n        setPostIds(offset === 0 ? newPostIds : [...postIds, ...newPostIds]);\\\\\\\\n        setHasNext(data.length >= variables.limit);\\\\\\\\n      } else {\\\\\\\\n        console.error(\\\\\\\\\\\\\\\"GraphQL Error:\\\\\\\\\\\\\\\", result.errors);\\\\\\\\n      }\\\\\\\\n      setLoading(false);\\\\\\\\n    }\\\\\\\\n  });\\\\\\\\n};\\\\\\\\n\\\\\\\\nuseEffect(() => {\\\\\\\\n  fetchPostIds();\\\\\\\\n}, [props.author, props.term, props.tag, props.recency]);\\\\\\\\n\\\\\\\\nconst handleLoadMore = () => {\\\\\\\\n  if (!hasNext) return;\\\\\\\\n  fetchPostIds(postIds.length);\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst renderLoader = () => <Loader>Loading...</Loader>;\\\\\\\\n\\\\\\\\nconst renderItem = (postId) => (\\\\\\\\n  <div key={postId}>\\\\\\\\n    {(props.renderItem && props.renderItem(postId)) || <div>Post {postId}</div>}\\\\\\\\n  </div>\\\\\\\\n);\\\\\\\\n\\\\\\\\nconst cachedRenderItem = (postId) => {\\\\\\\\n  if (!(postId in cachedItems)) {\\\\\\\\n    cachedItems[postId] = renderItem(postId);\\\\\\\\n    setCachedItems({ ...cachedItems });\\\\\\\\n  }\\\\\\\\n  return cachedItems[postId];\\\\\\\\n};\\\\\\\\n\\\\\\\\nreturn (\\\\\\\\n  <Container>\\\\\\\\n    {loading && renderLoader()}\\\\\\\\n    {postIds.length > 0 ? (\\\\\\\\n      <InfiniteScroll\\\\\\\\n        pageStart={0}\\\\\\\\n        dataLength={postIds.length}\\\\\\\\n        loadMore={handleLoadMore}\\\\\\\\n        hasMore={hasNext}\\\\\\\\n        loader={renderLoader()}\\\\\\\\n      >\\\\\\\\n        <Layout>\\\\\\\\n          {/* Layout */}\\\\\\\\n          {postIds.map(cachedRenderItem)}\\\\\\\\n        </Layout>\\\\\\\\n      </InfiniteScroll>\\\\\\\\n    ) : (\\\\\\\\n      <p class=\\\\\\\\\\\\\\\"text-secondary\\\\\\\\\\\\\\\">No posts</p>\\\\\\\\n    )}\\\\\\\\n  </Container>\\\\\\\\n);\\\\\\\\n\"}, \"devhub.entity.addon.blog.editor.provider\": {\"\": \"const { getPost } =\\\\\\\\n  VM.require(\\\\\\\\\\\\\\\"devhub.near/widget/core.adapter.devhub-contract\\\\\\\\\\\\\\\") ||\\\\\\\\n  (() => {});\\\\\\\\n\\\\\\\\nconst { Layout, handle } = props;\\\\\\\\n\\\\\\\\nconst QUERYAPI_ENDPOINT = `https://near-queryapi.api.pagoda.co/v1/graphql/`;\\\\\\\\n\\\\\\\\nconst fetchGraphQL = (operationsDoc, operationName, variables) => {\\\\\\\\n  return fetch(QUERYAPI_ENDPOINT, {\\\\\\\\n    method: \\\\\\\\\\\\\\\"POST\\\\\\\\\\\\\\\",\\\\\\\\n    headers: { \\\\\\\\\\\\\\\"x-hasura-role\\\\\\\\\\\\\\\": `bo_near` },\\\\\\\\n    body: JSON.stringify({\\\\\\\\n      query: operationsDoc,\\\\\\\\n      variables: variables,\\\\\\\\n      operationName: operationName,\\\\\\\\n    }),\\\\\\\\n  });\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst queryName =\\\\\\\\n  props.queryName ?? `bo_near_devhub_v17_posts_with_latest_snapshot`;\\\\\\\\n\\\\\\\\nconst query = `query DevhubPostsQuery($limit: Int = 100, $offset: Int = 0, $where: ${queryName}_bool_exp = {}) {\\\\\\\\n    ${queryName}(\\\\\\\\n      limit: $limit\\\\\\\\n      offset: $offset\\\\\\\\n      order_by: {block_height: desc}\\\\\\\\n      where: $where\\\\\\\\n    ) {\\\\\\\\n      post_id\\\\\\\\n    }\\\\\\\\n  }\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst includeLabels = [\\\\\\\\\\\\\\\"blog\\\\\\\\\\\\\\\", handle];\\\\\\\\n\\\\\\\\nconst buildWhereClause = () => {\\\\\\\\n  let where = {};\\\\\\\\n  if (props.author) {\\\\\\\\n    where = { author_id: { _eq: props.author }, ...where };\\\\\\\\n  }\\\\\\\\n  if (props.term) {\\\\\\\\n    where = { description: { _ilike: `%${props.term}%` }, ...where };\\\\\\\\n  }\\\\\\\\n  if (includeLabels && Array.isArray(includeLabels)) {\\\\\\\\n    const labelConditions = includeLabels.map((label) => ({\\\\\\\\n      labels: { _contains: label },\\\\\\\\n    }));\\\\\\\\n\\\\\\\\n    where = { _and: [...labelConditions, where] };\\\\\\\\n  }\\\\\\\\n  if (props.excludeLabels && Array.isArray(props.excludeLabels)) {\\\\\\\\n    const labelConditions = props.excludeLabels.map((label) => ({\\\\\\\\n      labels: { _nin: label },\\\\\\\\n    }));\\\\\\\\n\\\\\\\\n    where = { _and: [...labelConditions, where] };\\\\\\\\n  }\\\\\\\\n  if (!props.recency) {\\\\\\\\n    where = { parent_id: { _is_null: true }, ...where };\\\\\\\\n  }\\\\\\\\n  return where;\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst variables = { limit: DISPLAY_COUNT, offset, where: buildWhereClause() };\\\\\\\\n\\\\\\\\nconst posts = fetch(QUERYAPI_ENDPOINT, {\\\\\\\\n  method: \\\\\\\\\\\\\\\"POST\\\\\\\\\\\\\\\",\\\\\\\\n  headers: { \\\\\\\\\\\\\\\"x-hasura-role\\\\\\\\\\\\\\\": `bo_near` },\\\\\\\\n  body: JSON.stringify({\\\\\\\\n    query: query,\\\\\\\\n    variables: variables,\\\\\\\\n    operationName: \\\\\\\\\\\\\\\"DevhubPostsQuery\\\\\\\\\\\\\\\",\\\\\\\\n  }),\\\\\\\\n});\\\\\\\\n\\\\\\\\nconst handleOnChange = (v) => {\\\\\\\\n  console.log(\\\\\\\\\\\\\\\"onChange\\\\\\\\\\\\\\\", v);\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst handleGetData = (v) => {\\\\\\\\n  const postId = parseInt(v);\\\\\\\\n  const post = getPost({ post_id: postId });\\\\\\\\n  const description = JSON.parse(post.snapshot.description || \\\\\\\\\\\\\\\"null\\\\\\\\\\\\\\\") || {};\\\\\\\\n\\\\\\\\n  return {\\\\\\\\n    id: postId,\\\\\\\\n    ...description,\\\\\\\\n  };\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst handleOnSubmit = (v, isEdit) => {\\\\\\\\n  console.log(isEdit);\\\\\\\\n  if (isEdit) {\\\\\\\\n    Near.call({\\\\\\\\n      contractName: \\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\",\\\\\\\\n      methodName: \\\\\\\\\\\\\\\"edit_post\\\\\\\\\\\\\\\",\\\\\\\\n      args: {\\\\\\\\n        id: v.id,\\\\\\\\n        labels: [\\\\\\\\\\\\\\\"blog\\\\\\\\\\\\\\\", handle],\\\\\\\\n        body: {\\\\\\\\n          post_type: \\\\\\\\\\\\\\\"Comment\\\\\\\\\\\\\\\",\\\\\\\\n          description: JSON.stringify(v),\\\\\\\\n          comment_version: \\\\\\\\\\\\\\\"V2\\\\\\\\\\\\\\\",\\\\\\\\n        },\\\\\\\\n      },\\\\\\\\n      deposit: Big(10).pow(21).mul(2),\\\\\\\\n      gas: Big(10).pow(12).mul(100),\\\\\\\\n    });\\\\\\\\n  } else {\\\\\\\\n    Near.call({\\\\\\\\n      contractName: \\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\",\\\\\\\\n      methodName: \\\\\\\\\\\\\\\"add_post\\\\\\\\\\\\\\\",\\\\\\\\n      args: {\\\\\\\\n        labels: [\\\\\\\\\\\\\\\"blog\\\\\\\\\\\\\\\", handle],\\\\\\\\n        body: {\\\\\\\\n          post_type: \\\\\\\\\\\\\\\"Comment\\\\\\\\\\\\\\\",\\\\\\\\n          description: JSON.stringify(v),\\\\\\\\n          comment_version: \\\\\\\\\\\\\\\"V2\\\\\\\\\\\\\\\",\\\\\\\\n        },\\\\\\\\n      },\\\\\\\\n      deposit: Big(10).pow(21).mul(2),\\\\\\\\n      gas: Big(10).pow(12).mul(100),\\\\\\\\n    });\\\\\\\\n  }\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst handleOnCancel = (v) => {\\\\\\\\n  console.log(\\\\\\\\\\\\\\\"onCancel\\\\\\\\\\\\\\\", v);\\\\\\\\n};\\\\\\\\n\\\\\\\\nreturn (\\\\\\\\n  <Layout\\\\\\\\n    data={posts.body.data.bo_near_devhub_v34_posts_with_latest_snapshot || []}\\\\\\\\n    getData={handleGetData}\\\\\\\\n    onChange={handleOnChange}\\\\\\\\n    onSubmit={handleOnSubmit}\\\\\\\\n    onCancel={handleOnCancel}\\\\\\\\n  />\\\\\\\\n);\\\\\\\\n\"}}}}}"
      }
    ],
    "actions_agg": {
      "deposit": 0
    },
    "outcomes": {
      "status": true
    },
    "outcomes_agg": {
      "transaction_fee": 1.2613444518827e+21
    }
  },
  {
    "id": "1413750906",
    "receipt_id": "8pw2vPPW1k9MroqPez1dWHrQPQ7ach7iLJRBW7TeWWd4",
    "predecessor_account_id": "system",
    "receiver_account_id": "devhub.near",
    "receipt_kind": "ACTION",
    "receipt_block": {
      "block_hash": "F4wWHrJFSwo6qVnNPeq6zaztJ8NqMqUumpxCrWLjiadf",
      "block_height": 105722461,
      "block_timestamp": 1700013081869202200
    },
    "receipt_outcome": {
      "gas_burnt": 223182562500,
      "tokens_burnt": 0,
      "executor_account_id": "devhub.near",
      "status": true
    },
    "transaction_hash": "4C9T1MSsoPxMqFav2NPYzLuKhoDGErxxvKh5d4QhELWa",
    "included_in_block_hash": "LfA9eUqAfEa5e9ftJRg3eswonG3xEhQddv9uGdR1q5o",
    "block_timestamp": "1700013079723628453",
    "block": {
      "block_height": 105722459
    },
    "receipt_conversion_tokens_burnt": "247045070061400000000",
    "actions": [
      {
        "action": "TRANSFER",
        "method": null,
        "deposit": 1.880418837539489e+23,
        "fee": 0,
        "args": null
      }
    ],
    "actions_agg": {
      "deposit": 0
    },
    "outcomes": {
      "status": true
    },
    "outcomes_agg": {
      "transaction_fee": 1.2613444518827e+21
    }
  },
  {
    "id": "1420479068",
    "receipt_id": "DbAVaBoTi3z5zLmjSCFDw2ogWodtCt5jwsUTHmLvAiFN",
    "predecessor_account_id": "devhub.near",
    "receiver_account_id": "social.near",
    "receipt_kind": "ACTION",
    "receipt_block": {
      "block_hash": "9vwVidDQa7kEsLNdVAZKtLgUAdCQ2MkNSkYmy4QWGYxo",
      "block_height": 105772170,
      "block_timestamp": 1700078097921520600
    },
    "receipt_outcome": {
      "gas_burnt": 7726859935551,
      "tokens_burnt": 772685993555100000000,
      "executor_account_id": "social.near",
      "status": true
    },
    "transaction_hash": "6fARWhPVMTZtjLuqL2nAWREU779qUMbE8Mf6UHHUt5rp",
    "included_in_block_hash": "yWSor3bteeCXKu3S54n5ShFvKRvf23Hx19FEQUu3L8y",
    "block_timestamp": "1700078096866821066",
    "block": {
      "block_height": 105772169
    },
    "receipt_conversion_tokens_burnt": "244917131673600000000",
    "actions": [
      {
        "action": "FUNCTION_CALL",
        "method": "set",
        "deposit": 0,
        "fee": 772685993555100000000,
        "args": "{\"data\": {\"devhub.near\": {\"widget\": {\"devhub.components.molecule.SimpleMDE\": {\"\": \"/**\\\\\\\\n * iframe embedding a SimpleMDE component\\\\\\\\n * https://github.com/sparksuite/simplemde-markdown-editor\\\\\\\\n */\\\\\\\\n\\\\\\\\nfunction defaultOnChange(content) {\\\\\\\\n  console.log(content);\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst data = props.data;\\\\\\\\nconst onChange = props.onChange ?? defaultOnChange;\\\\\\\\nconst height = props.height ?? \\\\\\\\\\\\\\\"405\\\\\\\\\\\\\\\";\\\\\\\\nconst className = props.className ?? \\\\\\\\\\\\\\\"w-100\\\\\\\\\\\\\\\";\\\\\\\\n\\\\\\\\nState.init({\\\\\\\\n  iframeHeight: height,\\\\\\\\n  message: { handler: \\\\\\\\\\\\\\\"init\\\\\\\\\\\\\\\", content: props.data },\\\\\\\\n});\\\\\\\\n\\\\\\\\n// SIMPLEMDE CONFIG //\\\\\\\\nconst fontFamily = props.fontFamily ?? \\\\\\\\\\\\\\\"sans-serif\\\\\\\\\\\\\\\";\\\\\\\\nconst alignToolItems = props.alignToolItems ?? \\\\\\\\\\\\\\\"right\\\\\\\\\\\\\\\";\\\\\\\\nconst autoFocus = props.autoFocus ?? true;\\\\\\\\nconst renderingConfig = JSON.stringify(\\\\\\\\n  props.renderingConfig ?? {\\\\\\\\n    singleLineBreaks: false,\\\\\\\\n    codeSyntaxHighlighting: true,\\\\\\\\n  }\\\\\\\\n);\\\\\\\\nconst placeholder = props.placeholder ?? \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\";\\\\\\\\nconst statusConfig = JSON.stringify(\\\\\\\\n  props.statusConfig ?? [\\\\\\\\\\\\\\\"lines\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"words\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"cursor\\\\\\\\\\\\\\\"]\\\\\\\\n);\\\\\\\\nconst spellChecker = props.spellChecker ?? true;\\\\\\\\nconst tabSize = props.tabSize ?? 4;\\\\\\\\n\\\\\\\\n// Add or remove toolbar items\\\\\\\\n// For adding unique items, configure the switch-case within the iframe\\\\\\\\nconst toolbarConfig = JSON.stringify(\\\\\\\\n  props.toolbar ?? [\\\\\\\\n    \\\\\\\\\\\\\\\"heading\\\\\\\\\\\\\\\",\\\\\\\\n    \\\\\\\\\\\\\\\"bold\\\\\\\\\\\\\\\",\\\\\\\\n    \\\\\\\\\\\\\\\"italic\\\\\\\\\\\\\\\",\\\\\\\\n    \\\\\\\\\\\\\\\"|\\\\\\\\\\\\\\\", // adding | creates a divider in the toolbar\\\\\\\\n    \\\\\\\\\\\\\\\"quote\\\\\\\\\\\\\\\",\\\\\\\\n    \\\\\\\\\\\\\\\"code\\\\\\\\\\\\\\\",\\\\\\\\n    \\\\\\\\\\\\\\\"link\\\\\\\\\\\\\\\",\\\\\\\\n    \\\\\\\\\\\\\\\"image\\\\\\\\\\\\\\\",\\\\\\\\n    \\\\\\\\\\\\\\\"mention\\\\\\\\\\\\\\\",\\\\\\\\n    \\\\\\\\\\\\\\\"reference\\\\\\\\\\\\\\\",\\\\\\\\n    \\\\\\\\\\\\\\\"unordered-list\\\\\\\\\\\\\\\",\\\\\\\\n    \\\\\\\\\\\\\\\"ordered-list\\\\\\\\\\\\\\\",\\\\\\\\n    \\\\\\\\\\\\\\\"checklist\\\\\\\\\\\\\\\",\\\\\\\\n    \\\\\\\\\\\\\\\"table\\\\\\\\\\\\\\\",\\\\\\\\n    \\\\\\\\\\\\\\\"horizontal-rule\\\\\\\\\\\\\\\",\\\\\\\\n    \\\\\\\\\\\\\\\"guide\\\\\\\\\\\\\\\",\\\\\\\\n    \\\\\\\\\\\\\\\"preview\\\\\\\\\\\\\\\",\\\\\\\\n  ]\\\\\\\\n);\\\\\\\\n\\\\\\\\nconst code = `\\\\\\\\n  <style>\\\\\\\\n  body {  \\\\\\\\n      margin: auto;\\\\\\\\n      font-family: ${fontFamily};\\\\\\\\n      overflow: visible;\\\\\\\\n  }\\\\\\\\n  \\\\\\\\n  .editor-toolbar {\\\\\\\\n      text-align: ${alignToolItems};\\\\\\\\n  }\\\\\\\\n  </style>\\\\\\\\n  <script src=\\\\\\\\\\\\\\\"https://unpkg.com/react@18/umd/react.development.js\\\\\\\\\\\\\\\" crossorigin></script>\\\\\\\\n  <script src=\\\\\\\\\\\\\\\"https://unpkg.com/react-dom@18/umd/react-dom.development.js\\\\\\\\\\\\\\\" crossorigin></script>\\\\\\\\n  <link rel=\\\\\\\\\\\\\\\"stylesheet\\\\\\\\\\\\\\\" href=\\\\\\\\\\\\\\\"https://cdn.jsdelivr.net/simplemde/latest/simplemde.min.css\\\\\\\\\\\\\\\">\\\\\\\\n  <script src=\\\\\\\\\\\\\\\"https://cdn.jsdelivr.net/simplemde/latest/simplemde.min.js\\\\\\\\\\\\\\\"></script>\\\\\\\\n  <script src=\\\\\\\\\\\\\\\"https://cdn.jsdelivr.net/highlight.js/latest/highlight.min.js\\\\\\\\\\\\\\\"></script>\\\\\\\\n  <link rel=\\\\\\\\\\\\\\\"stylesheet\\\\\\\\\\\\\\\" href=\\\\\\\\\\\\\\\"https://cdn.jsdelivr.net/highlight.js/latest/styles/github.min.css\\\\\\\\\\\\\\\">\\\\\\\\n  \\\\\\\\n  <div id=\\\\\\\\\\\\\\\"react-root\\\\\\\\\\\\\\\"></div>\\\\\\\\n  \\\\\\\\n  <script>\\\\\\\\n  let codeMirrorInstance;\\\\\\\\n  let isEditorInitialized = false;\\\\\\\\n  \\\\\\\\n  function MarkdownEditor(props) {\\\\\\\\n      const [value, setValue] = React.useState(props.initialText || \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\");\\\\\\\\n  \\\\\\\\n      React.useEffect(() => {\\\\\\\\n          const generateToolbarItems = () => {\\\\\\\\n              return ${toolbarConfig}.map((item) => {\\\\\\\\n                  switch(item) {\\\\\\\\n                      // CONFIGURE CUSTOM IMPLEMENTATIONS HERE\\\\\\\\n                      case \\\\\\\\\\\\\\\"checklist\\\\\\\\\\\\\\\": {\\\\\\\\n                          function handleChecklist(editor) {\\\\\\\\n                              const cursorPos = editor.codemirror.getCursor();\\\\\\\\n                              const lineText = editor.codemirror.getLine(cursorPos.line);\\\\\\\\n                              if (lineText.trim() === \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\") {\\\\\\\\n                                  editor.codemirror.replaceRange(\\\\\\\\\\\\\\\" - [ ] \\\\\\\\\\\\\\\", cursorPos);\\\\\\\\n                              } else {\\\\\\\\n                                  editor.codemirror.replaceRange(\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n - [ ] \\\\\\\\\\\\\\\", cursorPos);\\\\\\\\n                              }\\\\\\\\n                          }\\\\\\\\n                          return {\\\\\\\\n                              name: \\\\\\\\\\\\\\\"checklist\\\\\\\\\\\\\\\",\\\\\\\\n                              action: handleChecklist,\\\\\\\\n                              className: \\\\\\\\\\\\\\\"fa fa-check-square\\\\\\\\\\\\\\\",\\\\\\\\n                              title: \\\\\\\\\\\\\\\"Insert Checklist\\\\\\\\\\\\\\\"\\\\\\\\n                          }\\\\\\\\n                      }\\\\\\\\n                      case \\\\\\\\\\\\\\\"mention\\\\\\\\\\\\\\\": {\\\\\\\\n                          function handleMention(editor) {\\\\\\\\n                              const cursorPos = editor.codemirror.getCursor();\\\\\\\\n                              editor.codemirror.replaceRange(\\\\\\\\\\\\\\\"@\\\\\\\\\\\\\\\", cursorPos);\\\\\\\\n                          }\\\\\\\\n                          return {\\\\\\\\n                              name: \\\\\\\\\\\\\\\"mention\\\\\\\\\\\\\\\",\\\\\\\\n                              action: handleMention,\\\\\\\\n                              className: \\\\\\\\\\\\\\\"fa fa-at\\\\\\\\\\\\\\\",\\\\\\\\n                              title: \\\\\\\\\\\\\\\"Insert Mention\\\\\\\\\\\\\\\"\\\\\\\\n                          }\\\\\\\\n                      }\\\\\\\\n                      case \\\\\\\\\\\\\\\"reference\\\\\\\\\\\\\\\": {\\\\\\\\n                          function handleReference(editor) {\\\\\\\\n                              const cursorPos = editor.codemirror.getCursor();\\\\\\\\n                              editor.codemirror.replaceRange(\\\\\\\\\\\\\\\"bos://\\\\\\\\\\\\\\\", cursorPos);\\\\\\\\n                          }\\\\\\\\n                          return {\\\\\\\\n                              name: \\\\\\\\\\\\\\\"reference\\\\\\\\\\\\\\\",\\\\\\\\n                              action: handleReference,\\\\\\\\n                              className: \\\\\\\\\\\\\\\"fa fa-external-link-square\\\\\\\\\\\\\\\",\\\\\\\\n                              title: \\\\\\\\\\\\\\\"Reference Thing\\\\\\\\\\\\\\\"\\\\\\\\n                          }\\\\\\\\n                      }\\\\\\\\n                      case \\\\\\\\\\\\\\\"image\\\\\\\\\\\\\\\": {\\\\\\\\n                          // TODO: convert to upload to IPFS\\\\\\\\n                          return {\\\\\\\\n                              name: \\\\\\\\\\\\\\\"image\\\\\\\\\\\\\\\",\\\\\\\\n                              action: SimpleMDE.drawImage,\\\\\\\\n                              className: \\\\\\\\\\\\\\\"fa fa-picture-o\\\\\\\\\\\\\\\",\\\\\\\\n                              title: \\\\\\\\\\\\\\\"Insert Image\\\\\\\\\\\\\\\"\\\\\\\\n                          }\\\\\\\\n                      }\\\\\\\\n                      default: {\\\\\\\\n                          return item;\\\\\\\\n                      }\\\\\\\\n                  }\\\\\\\\n              });\\\\\\\\n          };\\\\\\\\n  \\\\\\\\n          function renderPreview(plainText, preview) {\\\\\\\\n              // TODO: can we place custom preview element? Perhaps install VM into this iframe?\\\\\\\\n              setTimeout(function(){\\\\\\\\n                      preview.innerHTML = \\\\\\\\\\\\\\\"<p>hello</p>\\\\\\\\\\\\\\\";\\\\\\\\n                  }, 250);\\\\\\\\n              return \\\\\\\\\\\\\\\"loading\\\\\\\\\\\\\\\";\\\\\\\\n          }\\\\\\\\n          \\\\\\\\n          // Initializes SimpleMDE element and attaches to text-area\\\\\\\\n          const simplemde = new SimpleMDE({\\\\\\\\n              element: document.getElementById(\\\\\\\\\\\\\\\"markdown-input\\\\\\\\\\\\\\\"),\\\\\\\\n              forceSync: true,\\\\\\\\n              autofocus: ${autoFocus},\\\\\\\\n              renderingConfig: ${renderingConfig},\\\\\\\\n              placeholder: \\\\\\\\\\\\\\\"${placeholder}\\\\\\\\\\\\\\\",\\\\\\\\n              status: ${statusConfig},\\\\\\\\n              spellChecker: ${spellChecker},\\\\\\\\n              tabSize: ${tabSize},\\\\\\\\n              toolbar: generateToolbarItems(),\\\\\\\\n              initialValue: value,\\\\\\\\n              previewRender: renderPreview,\\\\\\\\n              insertTexts: {\\\\\\\\n                image: [\\\\\\\\\\\\\\\"![](https://\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\")\\\\\\\\\\\\\\\"],\\\\\\\\n                link: [\\\\\\\\\\\\\\\"[\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"](https://)\\\\\\\\\\\\\\\"],\\\\\\\\n              },\\\\\\\\n          });\\\\\\\\n  \\\\\\\\n          codeMirrorInstance = simplemde.codemirror;\\\\\\\\n  \\\\\\\\n          /**\\\\\\\\n           * Sends message to Widget to update content\\\\\\\\n           */\\\\\\\\n          const updateContent = () => {\\\\\\\\n              const content = simplemde.value();\\\\\\\\n              window.parent.postMessage({ handler: \\\\\\\\\\\\\\\"update\\\\\\\\\\\\\\\", content }, \\\\\\\\\\\\\\\"*\\\\\\\\\\\\\\\");\\\\\\\\n          };\\\\\\\\n  \\\\\\\\n          /**\\\\\\\\n           * Sends message to Widget to update iframe height\\\\\\\\n           */\\\\\\\\n          const updateIframeHeight = () => {\\\\\\\\n              const iframeHeight = document.body.scrollHeight;\\\\\\\\n              window.parent.postMessage({ handler: \\\\\\\\\\\\\\\"resize\\\\\\\\\\\\\\\", height: iframeHeight }, \\\\\\\\\\\\\\\"*\\\\\\\\\\\\\\\");\\\\\\\\n          };\\\\\\\\n  \\\\\\\\n          // On Change\\\\\\\\n          simplemde.codemirror.on(\\\\\\\\\\\\'change\\\\\\\\\\\\', () => {\\\\\\\\n              updateContent();\\\\\\\\n              updateIframeHeight();\\\\\\\\n          });\\\\\\\\n      }, []);\\\\\\\\n  \\\\\\\\n      return React.createElement(\\\\\\\\\\\\'textarea\\\\\\\\\\\\', { id: \\\\\\\\\\\\'markdown-input\\\\\\\\\\\\', value: value, onChange: setValue });\\\\\\\\n  }\\\\\\\\n  \\\\\\\\n  const domContainer = document.querySelector(\\\\\\\\\\\\'#react-root\\\\\\\\\\\\');\\\\\\\\n  const root = ReactDOM.createRoot(domContainer);\\\\\\\\n  \\\\\\\\n  window.addEventListener(\\\\\\\\\\\\\\\"message\\\\\\\\\\\\\\\", (event) => {\\\\\\\\n    if (!isEditorInitialized && event.data !== \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\") {\\\\\\\\n      root.render(React.createElement(MarkdownEditor, {\\\\\\\\n          initialText: event.data.content }));\\\\\\\\n          isEditorInitialized = true;\\\\\\\\n    } else {\\\\\\\\n      console.log(event);\\\\\\\\n      if (event.data.handler === \\\\\\\\\\\\'autocompleteSelected\\\\\\\\\\\\') {\\\\\\\\n        console.log(\\\\\\\\\\\\\\\"we\\\\\\\\\\\\'re in\\\\\\\\\\\\\\\");\\\\\\\\n          codeMirrorInstance.getDoc().setValue(event.data.content);\\\\\\\\n        }\\\\\\\\n    }\\\\\\\\n  });\\\\\\\\n  </script>\\\\\\\\n  `;\\\\\\\\nreturn (\\\\\\\\n  <iframe\\\\\\\\n    className={className}\\\\\\\\n    style={{\\\\\\\\n      height: `${state.iframeHeight}px`,\\\\\\\\n    }}\\\\\\\\n    srcDoc={code}\\\\\\\\n    message={data ?? { content: \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\" }}\\\\\\\\n    onMessage={(e) => {\\\\\\\\n      switch (e.handler) {\\\\\\\\n        case \\\\\\\\\\\\\\\"update\\\\\\\\\\\\\\\": {\\\\\\\\n          onChange(e.content);\\\\\\\\n        }\\\\\\\\n        case \\\\\\\\\\\\\\\"resize\\\\\\\\\\\\\\\": {\\\\\\\\n          const offset = 0;\\\\\\\\n          if (statusConfig.length) {\\\\\\\\n            offset = 10;\\\\\\\\n          }\\\\\\\\n          State.update({ iframeHeight: e.height + offset });\\\\\\\\n        }\\\\\\\\n      }\\\\\\\\n    }}\\\\\\\\n  />\\\\\\\\n);\\\\\\\\n\"}, \"devhub.components.molecule.MarkdownEditor\": {\"\": \"const MarkdownEditor = ({ data, onChange }) => {\\\\\\\\n  return (\\\\\\\\n    <Widget\\\\\\\\n      src={\\\\\\\\\\\\\\\"devhub.near/widget/devhub.components.molecule.SimpleMDE\\\\\\\\\\\\\\\"}\\\\\\\\n      props={{\\\\\\\\n        data,\\\\\\\\n        onChange,\\\\\\\\n        toolbar: [\\\\\\\\n          \\\\\\\\\\\\\\\"heading\\\\\\\\\\\\\\\",\\\\\\\\n          \\\\\\\\\\\\\\\"bold\\\\\\\\\\\\\\\",\\\\\\\\n          \\\\\\\\\\\\\\\"italic\\\\\\\\\\\\\\\",\\\\\\\\n          \\\\\\\\\\\\\\\"quote\\\\\\\\\\\\\\\",\\\\\\\\n          \\\\\\\\\\\\\\\"code\\\\\\\\\\\\\\\",\\\\\\\\n          \\\\\\\\\\\\\\\"link\\\\\\\\\\\\\\\",\\\\\\\\n          \\\\\\\\\\\\\\\"unordered-list\\\\\\\\\\\\\\\",\\\\\\\\n          \\\\\\\\\\\\\\\"ordered-list\\\\\\\\\\\\\\\",\\\\\\\\n          \\\\\\\\\\\\\\\"checklist\\\\\\\\\\\\\\\",\\\\\\\\n          \\\\\\\\\\\\\\\"mention\\\\\\\\\\\\\\\",\\\\\\\\n        ],\\\\\\\\n        statusConfig: [],\\\\\\\\n        spellChecker: false,\\\\\\\\n      }}\\\\\\\\n    />\\\\\\\\n  );\\\\\\\\n};\\\\\\\\n\\\\\\\\nreturn MarkdownEditor(props);\\\\\\\\n\"}}}}}"
      }
    ],
    "actions_agg": {
      "deposit": 0
    },
    "outcomes": {
      "status": true
    },
    "outcomes_agg": {
      "transaction_fee": 1.0176031252287e+21
    }
  },
  {
    "id": "1420479119",
    "receipt_id": "5Q5nteS5LUPUQHsv3EsGxUepMWfmkv7a8UuxRZ4hMsRQ",
    "predecessor_account_id": "system",
    "receiver_account_id": "devhub.near",
    "receipt_kind": "ACTION",
    "receipt_block": {
      "block_hash": "FxUnLFqJ7MMBKoD7Tp1qeibty8CjDXCwyjb53DHPhBDU",
      "block_height": 105772171,
      "block_timestamp": 1700078098952601000
    },
    "receipt_outcome": {
      "gas_burnt": 223182562500,
      "tokens_burnt": 0,
      "executor_account_id": "devhub.near",
      "status": true
    },
    "transaction_hash": "6fARWhPVMTZtjLuqL2nAWREU779qUMbE8Mf6UHHUt5rp",
    "included_in_block_hash": "yWSor3bteeCXKu3S54n5ShFvKRvf23Hx19FEQUu3L8y",
    "block_timestamp": "1700078096866821066",
    "block": {
      "block_height": 105772169
    },
    "receipt_conversion_tokens_burnt": "244917131673600000000",
    "actions": [
      {
        "action": "TRANSFER",
        "method": null,
        "deposit": 1.882701966724134e+23,
        "fee": 0,
        "args": null
      }
    ],
    "actions_agg": {
      "deposit": 0
    },
    "outcomes": {
      "status": true
    },
    "outcomes_agg": {
      "transaction_fee": 1.0176031252287e+21
    }
  },
  {
    "id": "1420952386",
    "receipt_id": "A1HiWFVsn4NFa1xFN5gTFNnGSia5dnzQfYACySLWVXGw",
    "predecessor_account_id": "devhub.near",
    "receiver_account_id": "social.near",
    "receipt_kind": "ACTION",
    "receipt_block": {
      "block_hash": "Cr2o4bg6U73V7wxHajyJ8CATfLyfytbnvc9Bch5JgEBa",
      "block_height": 105783354,
      "block_timestamp": 1700090002902877400
    },
    "receipt_outcome": {
      "gas_burnt": 9435245029845,
      "tokens_burnt": 943524502984500000000,
      "executor_account_id": "social.near",
      "status": true
    },
    "transaction_hash": "DNYwmmu7Rvzk1bAFsxWsxdN7sTaDg2R2uuo5c6rbRBYM",
    "included_in_block_hash": "621Y4zZeZtW3Lx3Hzm8sZkHSPiE87XMbVuKW2wFp7sdz",
    "block_timestamp": "1700090001728237064",
    "block": {
      "block_height": 105783353
    },
    "receipt_conversion_tokens_burnt": "248518550567400000000",
    "actions": [
      {
        "action": "FUNCTION_CALL",
        "method": "set",
        "deposit": 0,
        "fee": 943524502984500000000,
        "args": "{\"data\": {\"devhub.near\": {\"widget\": {\"devhub.entity.post.Post\": {\"\": \"// Ideally, this would be a page\\\\\\\\n\\\\\\\\nconst { href } = VM.require(\\\\\\\\\\\\\\\"devhub.near/widget/core.lib.url\\\\\\\\\\\\\\\");\\\\\\\\n\\\\\\\\nconst { draftState, onDraftStateChange } = VM.require(\\\\\\\\n  \\\\\\\\\\\\\\\"devhub.near/widget/devhub.entity.post.draft\\\\\\\\\\\\\\\"\\\\\\\\n);\\\\\\\\n\\\\\\\\nif (!href) {\\\\\\\\n  return <p>Loading modules...</p>;\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst ButtonWithHover = styled.button`\\\\\\\\n  background-color: #fff;\\\\\\\\n  transition: all 300ms;\\\\\\\\n  border-radius: 0.5rem;\\\\\\\\n\\\\\\\\n  &:hover {\\\\\\\\n    background-color: #e9ecef;\\\\\\\\n    color: #000;\\\\\\\\n  }\\\\\\\\n\\\\\\\\n  &:disabled {\\\\\\\\n    background-color: #fff;\\\\\\\\n    color: #b7b7b7;\\\\\\\\n  }\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst postId = props.post.id ?? (props.id ? parseInt(props.id) : 0);\\\\\\\\n\\\\\\\\nconst post =\\\\\\\\n  props.post ??\\\\\\\\n  Near.view(\\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"get_post\\\\\\\\\\\\\\\", { post_id: postId });\\\\\\\\n\\\\\\\\nif (!post) {\\\\\\\\n  return <div>Loading ...</div>;\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst referral = props.referral;\\\\\\\\nconst currentTimestamp = props.timestamp ?? post.snapshot.timestamp;\\\\\\\\nconst compareTimestamp = props.compareTimestamp ?? \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\";\\\\\\\\nconst swapTimestamps = currentTimestamp < compareTimestamp;\\\\\\\\n\\\\\\\\nconst snapshotHistory = post.snapshot_history;\\\\\\\\n\\\\\\\\nconst snapshot =\\\\\\\\n  currentTimestamp === post.snapshot.timestamp\\\\\\\\n    ? post.snapshot\\\\\\\\n    : (snapshotHistory &&\\\\\\\\n        snapshotHistory.find((s) => s.timestamp === currentTimestamp)) ??\\\\\\\\n      null;\\\\\\\\n\\\\\\\\nconst compareSnapshot =\\\\\\\\n  compareTimestamp === post.snapshot.timestamp\\\\\\\\n    ? post.snapshot\\\\\\\\n    : (snapshotHistory &&\\\\\\\\n        snapshotHistory.find((s) => s.timestamp === compareTimestamp)) ??\\\\\\\\n      null;\\\\\\\\n\\\\\\\\n// If this post is displayed under another post. Used to limit the size.\\\\\\\\nconst isUnderPost = props.isUnderPost ? true : false;\\\\\\\\n\\\\\\\\nconst parentId = Near.view(\\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"get_parent_id\\\\\\\\\\\\\\\", {\\\\\\\\n  post_id: postId,\\\\\\\\n});\\\\\\\\n\\\\\\\\nconst childPostIdsUnordered =\\\\\\\\n  Near.view(\\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"get_children_ids\\\\\\\\\\\\\\\", {\\\\\\\\n    post_id: postId,\\\\\\\\n  }) ?? [];\\\\\\\\n\\\\\\\\nconst childPostIds = props.isPreview ? [] : childPostIdsUnordered.reverse();\\\\\\\\nconst expandable = props.isPreview ? false : props.expandable ?? false;\\\\\\\\nconst defaultExpanded = expandable ? props.defaultExpanded : true;\\\\\\\\n\\\\\\\\nfunction readableDate(timestamp) {\\\\\\\\n  var a = new Date(timestamp);\\\\\\\\n  return a.toDateString() + \\\\\\\\\\\\\\\" \\\\\\\\\\\\\\\" + a.toLocaleTimeString();\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst timestamp = readableDate(\\\\\\\\n  snapshot.timestamp ? snapshot.timestamp / 1000000 : Date.now()\\\\\\\\n);\\\\\\\\n\\\\\\\\nconst postSearchKeywords = props.searchKeywords ? (\\\\\\\\n  <div style={{ \\\\\\\\\\\\\\\"font-family\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"monospace\\\\\\\\\\\\\\\" }} key=\\\\\\\\\\\\\\\"post-search-keywords\\\\\\\\\\\\\\\">\\\\\\\\n    <span>Found keywords: </span>\\\\\\\\n\\\\\\\\n    {props.searchKeywords.map((tag) => (\\\\\\\\n      <Widget\\\\\\\\n        src={\\\\\\\\\\\\\\\"devhub.near/widget/devhub.components.atom.Tag\\\\\\\\\\\\\\\"}\\\\\\\\n        props={{ linkTo: \\\\\\\\\\\\\\\"Feed\\\\\\\\\\\\\\\", tag }}\\\\\\\\n      />\\\\\\\\n    ))}\\\\\\\\n  </div>\\\\\\\\n) : (\\\\\\\\n  <div key=\\\\\\\\\\\\\\\"post-search-keywords\\\\\\\\\\\\\\\"></div>\\\\\\\\n);\\\\\\\\n\\\\\\\\nconst searchKeywords = props.searchKeywords ? (\\\\\\\\n  <div class=\\\\\\\\\\\\\\\"mb-4\\\\\\\\\\\\\\\" key=\\\\\\\\\\\\\\\"search-keywords\\\\\\\\\\\\\\\">\\\\\\\\n    <small class=\\\\\\\\\\\\\\\"text-muted\\\\\\\\\\\\\\\">{postSearchKeywords}</small>\\\\\\\\n  </div>\\\\\\\\n) : (\\\\\\\\n  <div key=\\\\\\\\\\\\\\\"search-keywords\\\\\\\\\\\\\\\"></div>\\\\\\\\n);\\\\\\\\n\\\\\\\\nconst allowedToEdit =\\\\\\\\n  !props.isPreview &&\\\\\\\\n  Near.view(\\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"is_allowed_to_edit\\\\\\\\\\\\\\\", {\\\\\\\\n    post_id: postId,\\\\\\\\n    editor: context.accountId,\\\\\\\\n  });\\\\\\\\n\\\\\\\\nconst btnEditorWidget = (postType, name) => {\\\\\\\\n  return (\\\\\\\\n    <li>\\\\\\\\n      <a\\\\\\\\n        class=\\\\\\\\\\\\\\\"dropdown-item\\\\\\\\\\\\\\\"\\\\\\\\n        role=\\\\\\\\\\\\\\\"button\\\\\\\\\\\\\\\"\\\\\\\\n        onClick={() =>\\\\\\\\n          State.update({ postType, editorType: \\\\\\\\\\\\\\\"EDIT\\\\\\\\\\\\\\\", showEditor: true })\\\\\\\\n        }\\\\\\\\n      >\\\\\\\\n        {name}\\\\\\\\n      </a>\\\\\\\\n    </li>\\\\\\\\n  );\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst editControl = allowedToEdit ? (\\\\\\\\n  <div class=\\\\\\\\\\\\\\\"btn-group\\\\\\\\\\\\\\\" role=\\\\\\\\\\\\\\\"group\\\\\\\\\\\\\\\">\\\\\\\\n    <a\\\\\\\\n      class=\\\\\\\\\\\\\\\"card-link px-2\\\\\\\\\\\\\\\"\\\\\\\\n      role=\\\\\\\\\\\\\\\"button\\\\\\\\\\\\\\\"\\\\\\\\n      title=\\\\\\\\\\\\\\\"Edit post\\\\\\\\\\\\\\\"\\\\\\\\n      data-bs-toggle=\\\\\\\\\\\\\\\"dropdown\\\\\\\\\\\\\\\"\\\\\\\\n      aria-expanded=\\\\\\\\\\\\\\\"false\\\\\\\\\\\\\\\"\\\\\\\\n      type=\\\\\\\\\\\\\\\"button\\\\\\\\\\\\\\\"\\\\\\\\n    >\\\\\\\\n      <div class=\\\\\\\\\\\\\\\"bi bi-pencil-square\\\\\\\\\\\\\\\"></div>\\\\\\\\n    </a>\\\\\\\\n\\\\\\\\n    <ul class=\\\\\\\\\\\\\\\"dropdown-menu\\\\\\\\\\\\\\\">\\\\\\\\n      {btnEditorWidget(\\\\\\\\\\\\\\\"Idea\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"Edit as an idea\\\\\\\\\\\\\\\")}\\\\\\\\n      {btnEditorWidget(\\\\\\\\\\\\\\\"Solution\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"Edit as a solution\\\\\\\\\\\\\\\")}\\\\\\\\n      {btnEditorWidget(\\\\\\\\\\\\\\\"Attestation\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"Edit as an attestation\\\\\\\\\\\\\\\")}\\\\\\\\n      {btnEditorWidget(\\\\\\\\\\\\\\\"Sponsorship\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"Edit as a sponsorship\\\\\\\\\\\\\\\")}\\\\\\\\n      {btnEditorWidget(\\\\\\\\\\\\\\\"Comment\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"Edit as a comment\\\\\\\\\\\\\\\")}\\\\\\\\n    </ul>\\\\\\\\n  </div>\\\\\\\\n) : (\\\\\\\\n  <div></div>\\\\\\\\n);\\\\\\\\n\\\\\\\\nconst shareButton = props.isPreview ? (\\\\\\\\n  <div></div>\\\\\\\\n) : (\\\\\\\\n  <Link\\\\\\\\n    class=\\\\\\\\\\\\\\\"card-link text-dark\\\\\\\\\\\\\\\"\\\\\\\\n    to={href({\\\\\\\\n      widgetSrc: \\\\\\\\\\\\\\\"devhub.near/widget/app\\\\\\\\\\\\\\\",\\\\\\\\n      params: { page: \\\\\\\\\\\\\\\"post\\\\\\\\\\\\\\\", id: postId },\\\\\\\\n    })}\\\\\\\\n    role=\\\\\\\\\\\\\\\"button\\\\\\\\\\\\\\\"\\\\\\\\n    target=\\\\\\\\\\\\\\\"_blank\\\\\\\\\\\\\\\"\\\\\\\\n    title=\\\\\\\\\\\\\\\"Open in new tab\\\\\\\\\\\\\\\"\\\\\\\\n  >\\\\\\\\n    <div class=\\\\\\\\\\\\\\\"bi bi-share\\\\\\\\\\\\\\\"></div>\\\\\\\\n  </Link>\\\\\\\\n);\\\\\\\\n\\\\\\\\nconst ProfileCardContainer = styled.div`\\\\\\\\n  @media screen and (max-width: 960px) {\\\\\\\\n    width: 100%;\\\\\\\\n  }\\\\\\\\n`;\\\\\\\\n\\\\\\\\n// card-header\\\\\\\\nconst header = (\\\\\\\\n  <div key=\\\\\\\\\\\\\\\"header\\\\\\\\\\\\\\\">\\\\\\\\n    <small class=\\\\\\\\\\\\\\\"text-muted\\\\\\\\\\\\\\\">\\\\\\\\n      <div class=\\\\\\\\\\\\\\\"row justify-content-between\\\\\\\\\\\\\\\">\\\\\\\\n        <div class=\\\\\\\\\\\\\\\"d-flex align-items-center flex-wrap\\\\\\\\\\\\\\\">\\\\\\\\n          <ProfileCardContainer>\\\\\\\\n            <Widget\\\\\\\\n              src={\\\\\\\\n                \\\\\\\\\\\\\\\"devhub.near/widget/devhub.components.molecule.ProfileCard\\\\\\\\\\\\\\\"\\\\\\\\n              }\\\\\\\\n              props={{\\\\\\\\n                accountId: post.author_id,\\\\\\\\n                nearDevGovGigsWidgetsAccountId: \\\\\\\\\\\\\\\"devhub.near\\\\\\\\\\\\\\\",\\\\\\\\n              }}\\\\\\\\n            />\\\\\\\\n          </ProfileCardContainer>\\\\\\\\n\\\\\\\\n          <div class=\\\\\\\\\\\\\\\"d-flex ms-auto\\\\\\\\\\\\\\\">\\\\\\\\n            {editControl}\\\\\\\\n            {timestamp}\\\\\\\\n\\\\\\\\n            <Widget\\\\\\\\n              src={\\\\\\\\\\\\\\\"devhub.near/widget/devhub.entity.post.History\\\\\\\\\\\\\\\"}\\\\\\\\n              props={{\\\\\\\\n                post,\\\\\\\\n                timestamp: currentTimestamp,\\\\\\\\n              }}\\\\\\\\n            />\\\\\\\\n            {shareButton}\\\\\\\\n          </div>\\\\\\\\n        </div>\\\\\\\\n      </div>\\\\\\\\n    </small>\\\\\\\\n  </div>\\\\\\\\n);\\\\\\\\n\\\\\\\\n// const emptyIcons = {\\\\\\\\n//   Idea: \\\\\\\\\\\\\\\"bi-lightbulb\\\\\\\\\\\\\\\",\\\\\\\\n//   Comment: \\\\\\\\\\\\\\\"bi-chat\\\\\\\\\\\\\\\",\\\\\\\\n//   Solution: \\\\\\\\\\\\\\\"bi-rocket\\\\\\\\\\\\\\\",\\\\\\\\n//   Attestation: \\\\\\\\\\\\\\\"bi-check-circle\\\\\\\\\\\\\\\",\\\\\\\\n//   Sponsorship: \\\\\\\\\\\\\\\"bi-cash-coin\\\\\\\\\\\\\\\",\\\\\\\\n//   Github: \\\\\\\\\\\\\\\"bi-github\\\\\\\\\\\\\\\",\\\\\\\\n//   Like: \\\\\\\\\\\\\\\"bi-heart\\\\\\\\\\\\\\\",\\\\\\\\n//   Reply: \\\\\\\\\\\\\\\"bi-reply\\\\\\\\\\\\\\\",\\\\\\\\n// };\\\\\\\\n\\\\\\\\nconst emptyIcons = {\\\\\\\\n  Idea: \\\\\\\\\\\\\\\"\\\\\\\\u{1f4a1}\\\\\\\\\\\\\\\",\\\\\\\\n  Comment: \\\\\\\\\\\\\\\"bi-chat\\\\\\\\\\\\\\\",\\\\\\\\n  Solution: \\\\\\\\\\\\\\\"\\\\\\\\u{1f680}\\\\\\\\\\\\\\\",\\\\\\\\n  Attestation: \\\\\\\\\\\\\\\"\\\\\\\\u{2705}\\\\\\\\\\\\\\\",\\\\\\\\n  Sponsorship: \\\\\\\\\\\\\\\"\\\\\\\\u{1fa99}\\\\\\\\\\\\\\\",\\\\\\\\n  Github: \\\\\\\\\\\\\\\"bi-github\\\\\\\\\\\\\\\",\\\\\\\\n  Like: \\\\\\\\\\\\\\\"bi-heart\\\\\\\\\\\\\\\",\\\\\\\\n  Reply: \\\\\\\\\\\\\\\"bi-reply\\\\\\\\\\\\\\\",\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst fillIcons = {\\\\\\\\n  Idea: \\\\\\\\\\\\\\\"\\\\\\\\u{1f4a1}\\\\\\\\\\\\\\\",\\\\\\\\n  Comment: \\\\\\\\\\\\\\\"bi-chat-fill\\\\\\\\\\\\\\\",\\\\\\\\n  Solution: \\\\\\\\\\\\\\\"\\\\\\\\u{1f680}\\\\\\\\\\\\\\\",\\\\\\\\n  Attestation: \\\\\\\\\\\\\\\"\\\\\\\\u{2705}\\\\\\\\\\\\\\\",\\\\\\\\n  Sponsorship: \\\\\\\\\\\\\\\"\\\\\\\\u{1fa99}\\\\\\\\\\\\\\\",\\\\\\\\n  Github: \\\\\\\\\\\\\\\"bi-github\\\\\\\\\\\\\\\",\\\\\\\\n  Like: \\\\\\\\\\\\\\\"bi-heart-fill\\\\\\\\\\\\\\\",\\\\\\\\n  Reply: \\\\\\\\\\\\\\\"bi-reply-fill\\\\\\\\\\\\\\\",\\\\\\\\n};\\\\\\\\n\\\\\\\\n// Trigger saving this widget.\\\\\\\\n\\\\\\\\nconst borders = {\\\\\\\\n  Idea: \\\\\\\\\\\\\\\"border-light\\\\\\\\\\\\\\\",\\\\\\\\n  Comment: \\\\\\\\\\\\\\\"border-light\\\\\\\\\\\\\\\",\\\\\\\\n  Solution: \\\\\\\\\\\\\\\"border-light\\\\\\\\\\\\\\\",\\\\\\\\n  Attestation: \\\\\\\\\\\\\\\"border-light\\\\\\\\\\\\\\\",\\\\\\\\n  Sponsorship: \\\\\\\\\\\\\\\"border-light\\\\\\\\\\\\\\\",\\\\\\\\n  Github: \\\\\\\\\\\\\\\"border-light\\\\\\\\\\\\\\\",\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst containsLike = props.isPreview\\\\\\\\n  ? false\\\\\\\\n  : post.likes.find((l) => l.author_id == context.accountId);\\\\\\\\nconst likeBtnClass = containsLike ? fillIcons.Like : emptyIcons.Like;\\\\\\\\n// This must be outside onLike, because Near.view returns null at first, and when the view call finished, it returns true/false.\\\\\\\\n// If checking this inside onLike, it will give `null` and we cannot tell the result is true or false.\\\\\\\\nlet grantNotify = Near.view(\\\\\\\\\\\\\\\"social.near\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"is_write_permission_granted\\\\\\\\\\\\\\\", {\\\\\\\\n  predecessor_id: \\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\",\\\\\\\\n  key: context.accountId + \\\\\\\\\\\\\\\"/index/notify\\\\\\\\\\\\\\\",\\\\\\\\n});\\\\\\\\n\\\\\\\\nif (grantNotify === null) {\\\\\\\\n  return;\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst onLike = () => {\\\\\\\\n  if (!context.accountId) {\\\\\\\\n    return;\\\\\\\\n  }\\\\\\\\n\\\\\\\\n  let likeTxn = [\\\\\\\\n    {\\\\\\\\n      contractName: \\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\",\\\\\\\\n      methodName: \\\\\\\\\\\\\\\"add_like\\\\\\\\\\\\\\\",\\\\\\\\n      args: {\\\\\\\\n        post_id: postId,\\\\\\\\n      },\\\\\\\\n      deposit: Big(10).pow(21).mul(2),\\\\\\\\n      gas: Big(10).pow(12).mul(100),\\\\\\\\n    },\\\\\\\\n  ];\\\\\\\\n\\\\\\\\n  if (grantNotify === false) {\\\\\\\\n    likeTxn.unshift({\\\\\\\\n      contractName: \\\\\\\\\\\\\\\"social.near\\\\\\\\\\\\\\\",\\\\\\\\n      methodName: \\\\\\\\\\\\\\\"grant_write_permission\\\\\\\\\\\\\\\",\\\\\\\\n      args: {\\\\\\\\n        predecessor_id: \\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\",\\\\\\\\n        keys: [context.accountId + \\\\\\\\\\\\\\\"/index/notify\\\\\\\\\\\\\\\"],\\\\\\\\n      },\\\\\\\\n      deposit: Big(10).pow(23),\\\\\\\\n      gas: Big(10).pow(12).mul(30),\\\\\\\\n    });\\\\\\\\n  }\\\\\\\\n\\\\\\\\n  Near.call(likeTxn);\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst btnCreatorWidget = (postType, icon, name, desc) => {\\\\\\\\n  return (\\\\\\\\n    <li class=\\\\\\\\\\\\\\\"py-1\\\\\\\\\\\\\\\">\\\\\\\\n      <a\\\\\\\\n        class=\\\\\\\\\\\\\\\"dropdown-item text-decoration-none d-flex align-items-center lh-sm\\\\\\\\\\\\\\\"\\\\\\\\n        style={{ color: \\\\\\\\\\\\\\\"rgb(55,109,137)\\\\\\\\\\\\\\\" }}\\\\\\\\n        role=\\\\\\\\\\\\\\\"button\\\\\\\\\\\\\\\"\\\\\\\\n        onClick={() =>\\\\\\\\n          State.update({ postType, editorType: \\\\\\\\\\\\\\\"CREATE\\\\\\\\\\\\\\\", showEditor: true })\\\\\\\\n        }\\\\\\\\n      >\\\\\\\\n        <i class={`bi ${icon}`} style={{ fontSize: \\\\\\\\\\\\\\\"1.5rem\\\\\\\\\\\\\\\" }}>\\\\\\\\n          {\\\\\\\\\\\\\\\" \\\\\\\\\\\\\\\"}\\\\\\\\n        </i>\\\\\\\\n\\\\\\\\n        <div class=\\\\\\\\\\\\\\\"ps-2 text-wrap\\\\\\\\\\\\\\\" style={{ width: \\\\\\\\\\\\\\\"18rem\\\\\\\\\\\\\\\" }}>\\\\\\\\n          <div>{name}</div>\\\\\\\\n          <small class=\\\\\\\\\\\\\\\"fw-light text-secondary\\\\\\\\\\\\\\\">{desc}</small>\\\\\\\\n        </div>\\\\\\\\n      </a>\\\\\\\\n    </li>\\\\\\\\n  );\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst FooterButtonsContianer = styled.div`\\\\\\\\n  width: 66.66666667%;\\\\\\\\n\\\\\\\\n  @media screen and (max-width: 960px) {\\\\\\\\n    width: 100%;\\\\\\\\n  }\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst buttonsFooter = props.isPreview ? null : (\\\\\\\\n  <div class=\\\\\\\\\\\\\\\"row\\\\\\\\\\\\\\\" key=\\\\\\\\\\\\\\\"buttons-footer\\\\\\\\\\\\\\\">\\\\\\\\n    <FooterButtonsContianer>\\\\\\\\n      <div class=\\\\\\\\\\\\\\\"btn-group\\\\\\\\\\\\\\\" role=\\\\\\\\\\\\\\\"group\\\\\\\\\\\\\\\" aria-label=\\\\\\\\\\\\\\\"Basic outlined example\\\\\\\\\\\\\\\">\\\\\\\\n        <ButtonWithHover\\\\\\\\n          type=\\\\\\\\\\\\\\\"button\\\\\\\\\\\\\\\"\\\\\\\\n          class=\\\\\\\\\\\\\\\"btn d-flex align-items-center\\\\\\\\\\\\\\\"\\\\\\\\n          style={{ border: \\\\\\\\\\\\\\\"0px\\\\\\\\\\\\\\\" }}\\\\\\\\n          onClick={onLike}\\\\\\\\n        >\\\\\\\\n          <i class={`bi ${likeBtnClass}`}> </i>\\\\\\\\n          {post.likes.length == 0 ? (\\\\\\\\n            \\\\\\\\\\\\\\\"Like\\\\\\\\\\\\\\\"\\\\\\\\n          ) : (\\\\\\\\n            <Widget\\\\\\\\n              // TODO: LEGACY.\\\\\\\\n              src=\\\\\\\\\\\\\\\"devgovgigs.near/widget/gigs-board.components.layout.LikeButton.Faces\\\\\\\\\\\\\\\"\\\\\\\\n              props={{\\\\\\\\n                likesByUsers: Object.fromEntries(\\\\\\\\n                  post.likes.map(({ author_id }) => [author_id, \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\"])\\\\\\\\n                ),\\\\\\\\n              }}\\\\\\\\n            />\\\\\\\\n          )}\\\\\\\\n        </ButtonWithHover>\\\\\\\\n\\\\\\\\n        <div class=\\\\\\\\\\\\\\\"btn-group\\\\\\\\\\\\\\\" role=\\\\\\\\\\\\\\\"group\\\\\\\\\\\\\\\">\\\\\\\\n          <ButtonWithHover\\\\\\\\n            type=\\\\\\\\\\\\\\\"button\\\\\\\\\\\\\\\"\\\\\\\\n            class=\\\\\\\\\\\\\\\"btn\\\\\\\\\\\\\\\"\\\\\\\\n            style={{ border: \\\\\\\\\\\\\\\"0px\\\\\\\\\\\\\\\" }}\\\\\\\\n            data-bs-toggle=\\\\\\\\\\\\\\\"dropdown\\\\\\\\\\\\\\\"\\\\\\\\n            aria-expanded=\\\\\\\\\\\\\\\"false\\\\\\\\\\\\\\\"\\\\\\\\n          >\\\\\\\\n            \\\\\\\\u{21aa} Reply\\\\\\\\n          </ButtonWithHover>\\\\\\\\n          <ul class=\\\\\\\\\\\\\\\"dropdown-menu\\\\\\\\\\\\\\\">\\\\\\\\n            {btnCreatorWidget(\\\\\\\\n              \\\\\\\\\\\\\\\"Idea\\\\\\\\\\\\\\\",\\\\\\\\n              emptyIcons.Idea,\\\\\\\\n              \\\\\\\\\\\\\\\"Idea\\\\\\\\\\\\\\\",\\\\\\\\n              \\\\\\\\\\\\\\\"Get feedback from the community about a problem, opportunity, or need.\\\\\\\\\\\\\\\"\\\\\\\\n            )}\\\\\\\\n            {btnCreatorWidget(\\\\\\\\n              \\\\\\\\\\\\\\\"Solution\\\\\\\\\\\\\\\",\\\\\\\\n              emptyIcons.Solution,\\\\\\\\n              \\\\\\\\\\\\\\\"Solution\\\\\\\\\\\\\\\",\\\\\\\\n              \\\\\\\\\\\\\\\"Provide a specific proposal or implementation to an idea, optionally requesting funding.\\\\\\\\\\\\\\\"\\\\\\\\n            )}\\\\\\\\n            {btnCreatorWidget(\\\\\\\\n              \\\\\\\\\\\\\\\"Attestation\\\\\\\\\\\\\\\",\\\\\\\\n              emptyIcons.Attestation,\\\\\\\\n              \\\\\\\\\\\\\\\"Attestation\\\\\\\\\\\\\\\",\\\\\\\\n              \\\\\\\\\\\\\\\"Formally review or validate a solution as a recognized expert.\\\\\\\\\\\\\\\"\\\\\\\\n            )}\\\\\\\\n            {btnCreatorWidget(\\\\\\\\n              \\\\\\\\\\\\\\\"Sponsorship\\\\\\\\\\\\\\\",\\\\\\\\n              emptyIcons.Sponsorship,\\\\\\\\n              \\\\\\\\\\\\\\\"Sponsorship\\\\\\\\\\\\\\\",\\\\\\\\n              \\\\\\\\\\\\\\\"Offer to fund projects, events, or proposals that match your needs.\\\\\\\\\\\\\\\"\\\\\\\\n            )}\\\\\\\\n            <li>\\\\\\\\n              <hr class=\\\\\\\\\\\\\\\"dropdown-divider\\\\\\\\\\\\\\\" />\\\\\\\\n            </li>\\\\\\\\n            {btnCreatorWidget(\\\\\\\\n              \\\\\\\\\\\\\\\"Comment\\\\\\\\\\\\\\\",\\\\\\\\n              emptyIcons.Comment,\\\\\\\\n              \\\\\\\\\\\\\\\"Comment\\\\\\\\\\\\\\\",\\\\\\\\n              \\\\\\\\\\\\\\\"Ask a question, provide information, or share a resource that is relevant to the thread.\\\\\\\\\\\\\\\"\\\\\\\\n            )}\\\\\\\\n          </ul>\\\\\\\\n        </div>\\\\\\\\n        {childPostIds.length > 0 && (\\\\\\\\n          <ButtonWithHover\\\\\\\\n            type=\\\\\\\\\\\\\\\"button\\\\\\\\\\\\\\\"\\\\\\\\n            class=\\\\\\\\\\\\\\\"btn\\\\\\\\\\\\\\\"\\\\\\\\n            style={{ border: \\\\\\\\\\\\\\\"0px\\\\\\\\\\\\\\\" }}\\\\\\\\n            data-bs-toggle=\\\\\\\\\\\\\\\"collapse\\\\\\\\\\\\\\\"\\\\\\\\n            href={`#collapseChildPosts${postId}`}\\\\\\\\n            aria-expanded={defaultExpanded}\\\\\\\\n            aria-controls={`collapseChildPosts${postId}`}\\\\\\\\n            onClick={() =>\\\\\\\\n              State.update({ expandReplies: !state.expandReplies })\\\\\\\\n            }\\\\\\\\n          >\\\\\\\\n            <i\\\\\\\\n              class={`bi bi-chevron-${state.expandReplies ? \\\\\\\\\\\\\\\"up\\\\\\\\\\\\\\\" : \\\\\\\\\\\\\\\"down\\\\\\\\\\\\\\\"}`}\\\\\\\\n            ></i>{\\\\\\\\\\\\\\\" \\\\\\\\\\\\\\\"}\\\\\\\\n            {`${state.expandReplies ? \\\\\\\\\\\\\\\"Collapse\\\\\\\\\\\\\\\" : \\\\\\\\\\\\\\\"Expand\\\\\\\\\\\\\\\"} Replies (${\\\\\\\\n              childPostIds.length\\\\\\\\n            })`}\\\\\\\\n          </ButtonWithHover>\\\\\\\\n        )}\\\\\\\\n\\\\\\\\n        {isUnderPost || !parentId ? (\\\\\\\\n          <div key=\\\\\\\\\\\\\\\"link-to-parent\\\\\\\\\\\\\\\"></div>\\\\\\\\n        ) : (\\\\\\\\n          <Link\\\\\\\\n            to={href({\\\\\\\\n              widgetSrc: \\\\\\\\\\\\\\\"devhub.near/widget/app\\\\\\\\\\\\\\\",\\\\\\\\n              params: { page: \\\\\\\\\\\\\\\"post\\\\\\\\\\\\\\\", id: parentId },\\\\\\\\n            })}\\\\\\\\n          >\\\\\\\\n            <ButtonWithHover\\\\\\\\n              type=\\\\\\\\\\\\\\\"button\\\\\\\\\\\\\\\"\\\\\\\\n              style={{ border: \\\\\\\\\\\\\\\"0px\\\\\\\\\\\\\\\" }}\\\\\\\\n              className=\\\\\\\\\\\\\\\"btn\\\\\\\\\\\\\\\"\\\\\\\\n              key=\\\\\\\\\\\\\\\"link-to-parent\\\\\\\\\\\\\\\"\\\\\\\\n            >\\\\\\\\n              <i class=\\\\\\\\\\\\\\\"bi bi-arrow-90deg-up\\\\\\\\\\\\\\\"></i>Go to parent\\\\\\\\n            </ButtonWithHover>\\\\\\\\n          </Link>\\\\\\\\n        )}\\\\\\\\n      </div>\\\\\\\\n    </FooterButtonsContianer>\\\\\\\\n  </div>\\\\\\\\n);\\\\\\\\n\\\\\\\\nconst CreatorWidget = (postType) => {\\\\\\\\n  return (\\\\\\\\n    <div\\\\\\\\n      class={`collapse ${\\\\\\\\n        draftState?.parent_post_id == postId && draftState?.postType == postType\\\\\\\\n          ? \\\\\\\\\\\\\\\"show\\\\\\\\\\\\\\\"\\\\\\\\n          : \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\"\\\\\\\\n      }`}\\\\\\\\n      id={`collapse${postType}Creator${postId}`}\\\\\\\\n      data-bs-parent={`#accordion${postId}`}\\\\\\\\n    >\\\\\\\\n      <Widget\\\\\\\\n        src={\\\\\\\\\\\\\\\"devhub.near/widget/devhub.entity.post.PostEditor\\\\\\\\\\\\\\\"}\\\\\\\\n        props={{\\\\\\\\n          postType,\\\\\\\\n          onDraftStateChange,\\\\\\\\n          draftState:\\\\\\\\n            draftState?.parent_post_id == postId ? draftState : undefined,\\\\\\\\n          parentId: postId,\\\\\\\\n          mode: \\\\\\\\\\\\\\\"Create\\\\\\\\\\\\\\\",\\\\\\\\n        }}\\\\\\\\n      />\\\\\\\\n    </div>\\\\\\\\n  );\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst tokenMapping = {\\\\\\\\n  NEAR: \\\\\\\\\\\\\\\"NEAR\\\\\\\\\\\\\\\",\\\\\\\\n  USDT: {\\\\\\\\n    NEP141: {\\\\\\\\n      address: \\\\\\\\\\\\\\\"usdt.tether-token.near\\\\\\\\\\\\\\\",\\\\\\\\n    },\\\\\\\\n  },\\\\\\\\n  USDC: {\\\\\\\\n    NEP141: {\\\\\\\\n      address:\\\\\\\\n        \\\\\\\\\\\\\\\"17208628f84f5d6ad33f0da3bbbeb27ffcb398eac501a31bd6ad2011e36133a1\\\\\\\\\\\\\\\",\\\\\\\\n    },\\\\\\\\n  },\\\\\\\\n  // Add more tokens here as needed\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst reverseTokenMapping = Object.keys(tokenMapping).reduce(\\\\\\\\n  (reverseMap, key) => {\\\\\\\\n    const value = tokenMapping[key];\\\\\\\\n    if (typeof value === \\\\\\\\\\\\\\\"object\\\\\\\\\\\\\\\") {\\\\\\\\n      reverseMap[JSON.stringify(value)] = key;\\\\\\\\n    }\\\\\\\\n    return reverseMap;\\\\\\\\n  },\\\\\\\\n  {}\\\\\\\\n);\\\\\\\\n\\\\\\\\nfunction tokenResolver(token) {\\\\\\\\n  if (typeof token === \\\\\\\\\\\\\\\"string\\\\\\\\\\\\\\\") {\\\\\\\\n    return token;\\\\\\\\n  } else if (typeof token === \\\\\\\\\\\\\\\"object\\\\\\\\\\\\\\\") {\\\\\\\\n    const tokenString = reverseTokenMapping[JSON.stringify(token)];\\\\\\\\n    return tokenString || null;\\\\\\\\n  } else {\\\\\\\\n    return null; // Invalid input\\\\\\\\n  }\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst EditorWidget = (postType) => {\\\\\\\\n  return (\\\\\\\\n    <div\\\\\\\\n      class={`collapse ${\\\\\\\\n        draftState?.edit_post_id == postId && draftState?.postType == postType\\\\\\\\n          ? \\\\\\\\\\\\\\\"show\\\\\\\\\\\\\\\"\\\\\\\\n          : \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\"\\\\\\\\n      }`}\\\\\\\\n      id={`collapse${postType}Editor${postId}`}\\\\\\\\n      data-bs-parent={`#accordion${postId}`}\\\\\\\\n    >\\\\\\\\n      <Widget\\\\\\\\n        src={\\\\\\\\\\\\\\\"devhub.near/widget/devhub.entity.post.PostEditor\\\\\\\\\\\\\\\"}\\\\\\\\n        props={{\\\\\\\\n          postType,\\\\\\\\n          postId,\\\\\\\\n          mode: \\\\\\\\\\\\\\\"Edit\\\\\\\\\\\\\\\",\\\\\\\\n          author_id: post.author_id,\\\\\\\\n          labels: post.snapshot.labels,\\\\\\\\n          name: post.snapshot.name,\\\\\\\\n          description: post.snapshot.description,\\\\\\\\n          amount: post.snapshot.amount,\\\\\\\\n          token: tokenResolver(post.snapshot.sponsorship_token),\\\\\\\\n          supervisor: post.snapshot.supervisor,\\\\\\\\n          githubLink: post.snapshot.github_link,\\\\\\\\n          onDraftStateChange,\\\\\\\\n          draftState:\\\\\\\\n            draftState?.edit_post_id == postId ? draftState : undefined,\\\\\\\\n        }}\\\\\\\\n      />\\\\\\\\n    </div>\\\\\\\\n  );\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst isDraft =\\\\\\\\n  (draftState?.parent_post_id === postId &&\\\\\\\\n    draftState?.postType === state.postType) ||\\\\\\\\n  (draftState?.edit_post_id === postId &&\\\\\\\\n    draftState?.postType === state.postType);\\\\\\\\n\\\\\\\\nconst toggleEditor = () => {\\\\\\\\n  State.update({ showEditor: !state.showEditor });\\\\\\\\n};\\\\\\\\n\\\\\\\\nfunction Editor() {\\\\\\\\n  return (\\\\\\\\n    <div class=\\\\\\\\\\\\\\\"row\\\\\\\\\\\\\\\" id={`accordion${postId}`} key=\\\\\\\\\\\\\\\"editors-footer\\\\\\\\\\\\\\\">\\\\\\\\n      <div\\\\\\\\n        key={`${state.postType}${state.editorType}${postId}`}\\\\\\\\n        className={\\\\\\\\\\\\\\\"w-100\\\\\\\\\\\\\\\"}\\\\\\\\n      >\\\\\\\\n        {state.editorType === \\\\\\\\\\\\\\\"CREATE\\\\\\\\\\\\\\\" ? (\\\\\\\\n          <>\\\\\\\\n            <Widget\\\\\\\\n              src={\\\\\\\\\\\\\\\"devhub.near/widget/devhub.entity.post.PostEditor\\\\\\\\\\\\\\\"}\\\\\\\\n              props={{\\\\\\\\n                postType: state.postType,\\\\\\\\n                onDraftStateChange,\\\\\\\\n                draftState:\\\\\\\\n                  draftState?.parent_post_id == postId ? draftState : undefined,\\\\\\\\n                parentId: postId,\\\\\\\\n                mode: \\\\\\\\\\\\\\\"Create\\\\\\\\\\\\\\\",\\\\\\\\n              }}\\\\\\\\n            />\\\\\\\\n          </>\\\\\\\\n        ) : (\\\\\\\\n          <>\\\\\\\\n            <Widget\\\\\\\\n              src={\\\\\\\\\\\\\\\"devhub.near/widget/devhub.entity.post.PostEditor\\\\\\\\\\\\\\\"}\\\\\\\\n              props={{\\\\\\\\n                postType: state.postType,\\\\\\\\n                postId,\\\\\\\\n                mode: \\\\\\\\\\\\\\\"Edit\\\\\\\\\\\\\\\",\\\\\\\\n                author_id: post.author_id,\\\\\\\\n                labels: post.snapshot.labels,\\\\\\\\n                name: post.snapshot.name,\\\\\\\\n                description: post.snapshot.description,\\\\\\\\n                amount: post.snapshot.amount,\\\\\\\\n                token: tokenResolver(post.snapshot.sponsorship_token),\\\\\\\\n                supervisor: post.snapshot.supervisor,\\\\\\\\n                githubLink: post.snapshot.github_link,\\\\\\\\n                onDraftStateChange,\\\\\\\\n                draftState:\\\\\\\\n                  draftState?.edit_post_id == postId ? draftState : undefined,\\\\\\\\n                toggleEditor: toggleEditor,\\\\\\\\n              }}\\\\\\\\n            />\\\\\\\\n          </>\\\\\\\\n        )}\\\\\\\\n      </div>\\\\\\\\n    </div>\\\\\\\\n  );\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst renamedPostType =\\\\\\\\n  snapshot.post_type == \\\\\\\\\\\\\\\"Submission\\\\\\\\\\\\\\\" ? \\\\\\\\\\\\\\\"Solution\\\\\\\\\\\\\\\" : snapshot.post_type;\\\\\\\\n\\\\\\\\nconst tags = post.snapshot.labels ? (\\\\\\\\n  <div\\\\\\\\n    class=\\\\\\\\\\\\\\\"card-title d-flex flex-wrap align-items-center\\\\\\\\\\\\\\\"\\\\\\\\n    style={{ margin: \\\\\\\\\\\\\\\"20px 0\\\\\\\\\\\\\\\" }}\\\\\\\\n    key=\\\\\\\\\\\\\\\"post-labels\\\\\\\\\\\\\\\"\\\\\\\\n  >\\\\\\\\n    {post.snapshot.labels.map((tag, idx) => (\\\\\\\\n      <div className=\\\\\\\\\\\\\\\"d-flex align-items-center my-3 me-3\\\\\\\\\\\\\\\">\\\\\\\\n        <Link\\\\\\\\n          to={href({\\\\\\\\n            widgetSrc: \\\\\\\\\\\\\\\"devhub.near/widget/app\\\\\\\\\\\\\\\",\\\\\\\\n            params: { page: \\\\\\\\\\\\\\\"feed\\\\\\\\\\\\\\\", tag: tag },\\\\\\\\n          })}\\\\\\\\n        >\\\\\\\\n          <div\\\\\\\\n            className=\\\\\\\\\\\\\\\"d-flex gap-3 align-items-center\\\\\\\\\\\\\\\"\\\\\\\\n            style={{ cursor: \\\\\\\\\\\\\\\"pointer\\\\\\\\\\\\\\\", textDecoration: \\\\\\\\\\\\\\\"none\\\\\\\\\\\\\\\" }}\\\\\\\\n          >\\\\\\\\n            <Widget\\\\\\\\n              src={\\\\\\\\\\\\\\\"devhub.near/widget/devhub.components.atom.Tag\\\\\\\\\\\\\\\"}\\\\\\\\n              props={{\\\\\\\\n                tag,\\\\\\\\n                black: true,\\\\\\\\n              }}\\\\\\\\n            />\\\\\\\\n          </div>\\\\\\\\n        </Link>\\\\\\\\n        {idx !== post.snapshot.labels.length - 1 && (\\\\\\\\n          <span className=\\\\\\\\\\\\\\\"ms-3\\\\\\\\\\\\\\\">\\\\\\\\u{2022}</span>\\\\\\\\n        )}\\\\\\\\n      </div>\\\\\\\\n    ))}\\\\\\\\n  </div>\\\\\\\\n) : (\\\\\\\\n  <div key=\\\\\\\\\\\\\\\"post-labels\\\\\\\\\\\\\\\"></div>\\\\\\\\n);\\\\\\\\n\\\\\\\\nconst Title = styled.h5`\\\\\\\\n  margin: 1rem 0;\\\\\\\\n\\\\\\\\n  color: #151515;\\\\\\\\n  font-size: 1.15rem;\\\\\\\\n  font-style: normal;\\\\\\\\n  font-weight: 700;\\\\\\\\n  line-height: 1.625rem; /* 55.556% */\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst postTitle =\\\\\\\\n  snapshot.post_type == \\\\\\\\\\\\\\\"Comment\\\\\\\\\\\\\\\" ? (\\\\\\\\n    <div key=\\\\\\\\\\\\\\\"post-title\\\\\\\\\\\\\\\"></div>\\\\\\\\n  ) : (\\\\\\\\n    <Title key=\\\\\\\\\\\\\\\"post-title\\\\\\\\\\\\\\\">\\\\\\\\n      {emptyIcons[snapshot.post_type]} {renamedPostType}: {snapshot.name}\\\\\\\\n    </Title>\\\\\\\\n  );\\\\\\\\n\\\\\\\\nconst postExtra =\\\\\\\\n  snapshot.post_type == \\\\\\\\\\\\\\\"Sponsorship\\\\\\\\\\\\\\\" ? (\\\\\\\\n    <div key=\\\\\\\\\\\\\\\"post-extra\\\\\\\\\\\\\\\">\\\\\\\\n      <h6 class=\\\\\\\\\\\\\\\"card-subtitle mb-2 text-muted\\\\\\\\\\\\\\\">\\\\\\\\n        Maximum amount: {snapshot.amount}{\\\\\\\\\\\\\\\" \\\\\\\\\\\\\\\"}\\\\\\\\n        {tokenResolver(snapshot.sponsorship_token)}\\\\\\\\n      </h6>\\\\\\\\n      <h6 class=\\\\\\\\\\\\\\\"card-subtitle mb-2 text-muted\\\\\\\\\\\\\\\">\\\\\\\\n        Supervisor:{\\\\\\\\\\\\\\\" \\\\\\\\\\\\\\\"}\\\\\\\\n        <Widget\\\\\\\\n          src={\\\\\\\\\\\\\\\"neardevgov.near/widget/ProfileLine\\\\\\\\\\\\\\\"}\\\\\\\\n          props={{ accountId: snapshot.supervisor }}\\\\\\\\n        />\\\\\\\\n      </h6>\\\\\\\\n    </div>\\\\\\\\n  ) : (\\\\\\\\n    <div></div>\\\\\\\\n  );\\\\\\\\n\\\\\\\\nconst childPostHasDraft = childPostIds.find(\\\\\\\\n  (childId) =>\\\\\\\\n    childId == draftState?.edit_post_id || childId == draftState?.parent_post_id\\\\\\\\n);\\\\\\\\nif (\\\\\\\\n  (childPostHasDraft || state.childrenOfChildPostsHasDraft) &&\\\\\\\\n  props.expandParent\\\\\\\\n) {\\\\\\\\n  props.expandParent();\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst postsList =\\\\\\\\n  props.isPreview || childPostIds.length == 0 ? (\\\\\\\\n    <div key=\\\\\\\\\\\\\\\"posts-list\\\\\\\\\\\\\\\"></div>\\\\\\\\n  ) : (\\\\\\\\n    <div class=\\\\\\\\\\\\\\\"row\\\\\\\\\\\\\\\" key=\\\\\\\\\\\\\\\"posts-list\\\\\\\\\\\\\\\">\\\\\\\\n      <div\\\\\\\\n        class={`collapse mt-3 ${\\\\\\\\n          defaultExpanded ||\\\\\\\\n          childPostHasDraft ||\\\\\\\\n          state.childrenOfChildPostsHasDraft\\\\\\\\n            ? \\\\\\\\\\\\\\\"show\\\\\\\\\\\\\\\"\\\\\\\\n            : \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\"\\\\\\\\n        }`}\\\\\\\\n        id={`collapseChildPosts${postId}`}\\\\\\\\n      >\\\\\\\\n        {childPostIds.map((childId) => (\\\\\\\\n          <div key={childId} style={{ marginBottom: \\\\\\\\\\\\\\\"0.5rem\\\\\\\\\\\\\\\" }}>\\\\\\\\n            <Widget\\\\\\\\n              src=\\\\\\\\\\\\\\\"devhub.near/widget/devhub.entity.post.Post\\\\\\\\\\\\\\\"\\\\\\\\n              props={{\\\\\\\\n                id: childId,\\\\\\\\n                isUnderPost: true,\\\\\\\\n                onDraftStateChange,\\\\\\\\n                draftState,\\\\\\\\n                expandParent: () =>\\\\\\\\n                  State.update({ childrenOfChildPostsHasDraft: true }),\\\\\\\\n                referral: `subpost${childId}of${postId}`,\\\\\\\\n              }}\\\\\\\\n            />\\\\\\\\n          </div>\\\\\\\\n        ))}\\\\\\\\n      </div>\\\\\\\\n    </div>\\\\\\\\n  );\\\\\\\\n\\\\\\\\nconst LimitedMarkdown = styled.div`\\\\\\\\n  max-height: 20em;\\\\\\\\n`;\\\\\\\\n\\\\\\\\n// Determine if located in the post page.\\\\\\\\nconst isInList = props.isInList;\\\\\\\\nconst contentArray = snapshot.description.split(\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\");\\\\\\\\nconst needClamp = isInList && contentArray.length > 5;\\\\\\\\n\\\\\\\\ninitState({\\\\\\\\n  clamp: needClamp,\\\\\\\\n  expandReplies: defaultExpanded,\\\\\\\\n});\\\\\\\\n\\\\\\\\nconst clampedContent = needClamp\\\\\\\\n  ? contentArray.slice(0, 3).join(\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\")\\\\\\\\n  : snapshot.description;\\\\\\\\n\\\\\\\\n// Should make sure the posts under the currently top viewed post are limited in size.\\\\\\\\nconst descriptionArea = isUnderPost ? (\\\\\\\\n  <LimitedMarkdown className=\\\\\\\\\\\\\\\"overflow-auto\\\\\\\\\\\\\\\" key=\\\\\\\\\\\\\\\"description-area\\\\\\\\\\\\\\\">\\\\\\\\n    {/* {widget(\\\\\\\\\\\\\\\"components.molecule.markdown-viewer\\\\\\\\\\\\\\\", {\\\\\\\\n      text: snapshot.description,\\\\\\\\n    })} */}\\\\\\\\n    <Widget\\\\\\\\n      src={\\\\\\\\\\\\\\\"devhub.near/widget/devhub.components.molecule.MarkdownViewer\\\\\\\\\\\\\\\"}\\\\\\\\n      props={{\\\\\\\\n        text: snapshot.description,\\\\\\\\n      }}\\\\\\\\n    />\\\\\\\\n  </LimitedMarkdown>\\\\\\\\n) : (\\\\\\\\n  <div className=\\\\\\\\\\\\\\\"w-100 overflow-auto\\\\\\\\\\\\\\\">\\\\\\\\n    <div class={state.clamp ? \\\\\\\\\\\\\\\"clamp\\\\\\\\\\\\\\\" : \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\"}>\\\\\\\\n      {/* {widget(\\\\\\\\\\\\\\\"components.molecule.markdown-viewer\\\\\\\\\\\\\\\", {\\\\\\\\n        text: state.clamp ? clampedContent : snapshot.description,\\\\\\\\n      })} */}\\\\\\\\n      <Widget\\\\\\\\n        src={\\\\\\\\\\\\\\\"devhub.near/widget/devhub.components.molecule.MarkdownViewer\\\\\\\\\\\\\\\"}\\\\\\\\n        props={{\\\\\\\\n          text: state.clamp ? clampedContent : snapshot.description,\\\\\\\\n        }}\\\\\\\\n      />\\\\\\\\n    </div>\\\\\\\\n    {state.clamp ? (\\\\\\\\n      <div class=\\\\\\\\\\\\\\\"d-flex justify-content-start\\\\\\\\\\\\\\\">\\\\\\\\n        <a\\\\\\\\n          style={{ cursor: \\\\\\\\\\\\\\\"pointer\\\\\\\\\\\\\\\", color: \\\\\\\\\\\\\\\"#00ec97\\\\\\\\\\\\\\\" }}\\\\\\\\n          class=\\\\\\\\\\\\\\\"btn-link text-dark fw-bold text-decoration-none\\\\\\\\\\\\\\\"\\\\\\\\n          onClick={() => State.update({ clamp: false })}\\\\\\\\n        >\\\\\\\\n          See more\\\\\\\\n        </a>\\\\\\\\n      </div>\\\\\\\\n    ) : (\\\\\\\\n      <></>\\\\\\\\n    )}\\\\\\\\n  </div>\\\\\\\\n);\\\\\\\\n\\\\\\\\nconst timestampElement = (_snapshot) => {\\\\\\\\n  return (\\\\\\\\n    <Link\\\\\\\\n      class=\\\\\\\\\\\\\\\"text-muted\\\\\\\\\\\\\\\"\\\\\\\\n      href={href({\\\\\\\\n        widgetSrc: \\\\\\\\\\\\\\\"devhub.near/widget/app\\\\\\\\\\\\\\\",\\\\\\\\n        params: {\\\\\\\\n          page: \\\\\\\\\\\\\\\"post\\\\\\\\\\\\\\\",\\\\\\\\n          id: postId,\\\\\\\\n          timestamp: _snapshot.timestamp,\\\\\\\\n          compareTimestamp: null,\\\\\\\\n          referral,\\\\\\\\n        },\\\\\\\\n      })}\\\\\\\\n    >\\\\\\\\n      {readableDate(_snapshot.timestamp / 1000000).substring(4)}\\\\\\\\n\\\\\\\\n      <Widget\\\\\\\\n        src=\\\\\\\\\\\\\\\"mob.near/widget/ProfileImage\\\\\\\\\\\\\\\"\\\\\\\\n        props={{\\\\\\\\n          accountId: _snapshot.editor_id,\\\\\\\\n          style: {\\\\\\\\n            width: \\\\\\\\\\\\\\\"1.25em\\\\\\\\\\\\\\\",\\\\\\\\n            height: \\\\\\\\\\\\\\\"1.25em\\\\\\\\\\\\\\\",\\\\\\\\n          },\\\\\\\\n          imageStyle: {\\\\\\\\n            transform: \\\\\\\\\\\\\\\"translateY(-12.5%)\\\\\\\\\\\\\\\",\\\\\\\\n          },\\\\\\\\n        }}\\\\\\\\n      />\\\\\\\\n      {_snapshot.editor_id.substring(0, 8)}\\\\\\\\n    </Link>\\\\\\\\n  );\\\\\\\\n};\\\\\\\\n\\\\\\\\nfunction combineText(_snapshot) {\\\\\\\\n  return (\\\\\\\\n    \\\\\\\\\\\\\\\"## \\\\\\\\\\\\\\\" +\\\\\\\\n    _snapshot.post_type +\\\\\\\\n    \\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\" +\\\\\\\\n    _snapshot.name +\\\\\\\\n    \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\" +\\\\\\\\n    _snapshot.description\\\\\\\\n  );\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst CardContainer = styled.div`\\\\\\\\n  padding: 1.5rem 3rem !important;\\\\\\\\n  border-radius: 16px !important;\\\\\\\\n  border: 1px solid rgba(129, 129, 129, 0.3) !important;\\\\\\\\n  background: #fffefe !important;\\\\\\\\n\\\\\\\\n  @media screen and (max-width: 960px) {\\\\\\\\n    padding: 1rem !important;\\\\\\\\n  }\\\\\\\\n`;\\\\\\\\n\\\\\\\\nreturn (\\\\\\\\n  <CardContainer className={`card ${borders[snapshot.post_type]} attractable`}>\\\\\\\\n    {header}\\\\\\\\n    <div className=\\\\\\\\\\\\\\\"card-body\\\\\\\\\\\\\\\" style={{ padding: 0 }}>\\\\\\\\n      {searchKeywords}\\\\\\\\n      {compareSnapshot ? (\\\\\\\\n        <div\\\\\\\\n          class=\\\\\\\\\\\\\\\"border rounded\\\\\\\\\\\\\\\"\\\\\\\\n          style={{ marginTop: \\\\\\\\\\\\\\\"16px\\\\\\\\\\\\\\\", marginBottom: \\\\\\\\\\\\\\\"16px\\\\\\\\\\\\\\\" }}\\\\\\\\n        >\\\\\\\\n          <div class=\\\\\\\\\\\\\\\"d-flex justify-content-end\\\\\\\\\\\\\\\" style={{ fontSize: \\\\\\\\\\\\\\\"12px\\\\\\\\\\\\\\\" }}>\\\\\\\\n            <div class=\\\\\\\\\\\\\\\"d-flex w-50 justify-content-end mt-1 me-2\\\\\\\\\\\\\\\">\\\\\\\\n              {timestampElement(snapshot)}\\\\\\\\n              {snapshot !== compareSnapshot && (\\\\\\\\n                <>\\\\\\\\n                  <div class=\\\\\\\\\\\\\\\"mx-1 align-self-center\\\\\\\\\\\\\\\">\\\\\\\\n                    <i class=\\\\\\\\\\\\\\\"bi bi-file-earmark-diff\\\\\\\\\\\\\\\" />\\\\\\\\n                  </div>\\\\\\\\n                  {timestampElement(compareSnapshot)}\\\\\\\\n                </>\\\\\\\\n              )}\\\\\\\\n            </div>\\\\\\\\n          </div>\\\\\\\\n          <div className=\\\\\\\\\\\\\\\"w-100 overflow-auto\\\\\\\\\\\\\\\">\\\\\\\\n            <Widget\\\\\\\\n              src=\\\\\\\\\\\\\\\"markeljan.near/widget/MarkdownDiff\\\\\\\\\\\\\\\"\\\\\\\\n              props={{\\\\\\\\n                post: post,\\\\\\\\n                currentCode: combineText(\\\\\\\\n                  swapTimestamps ? compareSnapshot : snapshot\\\\\\\\n                ),\\\\\\\\n                prevCode: combineText(\\\\\\\\n                  swapTimestamps ? snapshot : compareSnapshot\\\\\\\\n                ),\\\\\\\\n                showLineNumber: true,\\\\\\\\n              }}\\\\\\\\n            />\\\\\\\\n          </div>\\\\\\\\n        </div>\\\\\\\\n      ) : (\\\\\\\\n        <>\\\\\\\\n          {postTitle}\\\\\\\\n          {postExtra}\\\\\\\\n          {descriptionArea}\\\\\\\\n        </>\\\\\\\\n      )}\\\\\\\\n      {tags}\\\\\\\\n      {buttonsFooter}\\\\\\\\n      {!props.isPreview && (isDraft || state.showEditor) && <Editor />}\\\\\\\\n      {postsList}\\\\\\\\n    </div>\\\\\\\\n  </CardContainer>\\\\\\\\n);\\\\\\\\n\"}}}}}"
      }
    ],
    "actions_agg": {
      "deposit": 0
    },
    "outcomes": {
      "status": true
    },
    "outcomes_agg": {
      "transaction_fee": 1.1920430535519e+21
    }
  },
  {
    "id": "1420952423",
    "receipt_id": "6oxiykoQzRX2hCwZ6qmU9RDPa5ZW8mgqAkeeHhusrvWh",
    "predecessor_account_id": "system",
    "receiver_account_id": "devhub.near",
    "receipt_kind": "ACTION",
    "receipt_block": {
      "block_hash": "HtnSVAZH5x64xZpBQ9S9qoJ3hdQcD5eRdXMrniHpGUfw",
      "block_height": 105783355,
      "block_timestamp": 1700090003966997000
    },
    "receipt_outcome": {
      "gas_burnt": 223182562500,
      "tokens_burnt": 0,
      "executor_account_id": "devhub.near",
      "status": true
    },
    "transaction_hash": "DNYwmmu7Rvzk1bAFsxWsxdN7sTaDg2R2uuo5c6rbRBYM",
    "included_in_block_hash": "621Y4zZeZtW3Lx3Hzm8sZkHSPiE87XMbVuKW2wFp7sdz",
    "block_timestamp": "1700090001728237064",
    "block": {
      "block_height": 105783353
    },
    "receipt_conversion_tokens_burnt": "248518550567400000000",
    "actions": [
      {
        "action": "TRANSFER",
        "method": null,
        "deposit": 1.8812186847790425e+23,
        "fee": 0,
        "args": null
      }
    ],
    "actions_agg": {
      "deposit": 0
    },
    "outcomes": {
      "status": true
    },
    "outcomes_agg": {
      "transaction_fee": 1.1920430535519e+21
    }
  },
  {
    "id": "1421116404",
    "receipt_id": "666KpshNh6oip4rAuEf3F1XzwTo9q9c8sF12pzH6QYjm",
    "predecessor_account_id": "devhub.near",
    "receiver_account_id": "social.near",
    "receipt_kind": "ACTION",
    "receipt_block": {
      "block_hash": "6BQwH7r2sAnsqvmgHVEVhR9keGydSFeFpUgRzUEmP66x",
      "block_height": 105787996,
      "block_timestamp": 1700094886552609000
    },
    "receipt_outcome": {
      "gas_burnt": 10134472534321,
      "tokens_burnt": 1.0134472534321e+21,
      "executor_account_id": "social.near",
      "status": true
    },
    "transaction_hash": "5pp1xPJm2AT4BnotzQYtsmPnPaSLqoMoMcgDCmzqBcvU",
    "included_in_block_hash": "DPQWPeVuCRbA4QvkTSfRLagSNPTS82ALVh6116hUpiZS",
    "block_timestamp": "1700094885382829321",
    "block": {
      "block_height": 105787995
    },
    "receipt_conversion_tokens_burnt": "247045070061400000000",
    "actions": [
      {
        "action": "FUNCTION_CALL",
        "method": "set",
        "deposit": 0,
        "fee": 1.0134472534321e+21,
        "args": "{\"data\": {\"devhub.near\": {\"widget\": {\"devhub.entity.post.List\": {\"\": \"// This component implementation was forked from [IndexFeed], but it does not fully implement lazy loading.\\\\\\\\n// While this component uses InfiniteScroll, it still loads the whole list of Post IDs in one view call.\\\\\\\\n// The contract will need to be extended with pagination support, yet, even in the current state the page loads much faster.\\\\\\\\n// [IndexFeed]: https://near.social/#/mob.near/widget/WidgetSource?src=mob.near/widget/IndexFeed\\\\\\\\n\\\\\\\\nconst { href } = VM.require(\\\\\\\\\\\\\\\"devhub.near/widget/core.lib.url\\\\\\\\\\\\\\\");\\\\\\\\n\\\\\\\\nconst { draftState, onDraftStateChange } = VM.require(\\\\\\\\n  \\\\\\\\\\\\\\\"devhub.near/widget/devhub.entity.post.draft\\\\\\\\\\\\\\\"\\\\\\\\n);\\\\\\\\n\\\\\\\\nif (!href) {\\\\\\\\n  return <p>Loading modules...</p>;\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst QUERYAPI_ENDPOINT = `https://near-queryapi.api.pagoda.co/v1/graphql/`;\\\\\\\\n\\\\\\\\nconst queryName =\\\\\\\\n  props.queryName ?? `bo_near_devhub_v35_posts_with_latest_snapshot`;\\\\\\\\n\\\\\\\\nconst query = `query DevhubPostsQuery($limit: Int = 100, $offset: Int = 0, $where: ${queryName}_bool_exp = {}) {\\\\\\\\n    ${queryName}(\\\\\\\\n      limit: $limit\\\\\\\\n      offset: $offset\\\\\\\\n      order_by: {block_height: desc}\\\\\\\\n      where: $where\\\\\\\\n    ) {\\\\\\\\n      post_id\\\\\\\\n    }\\\\\\\\n  }\\\\\\\\n`;\\\\\\\\n\\\\\\\\nfunction fetchGraphQL(operationsDoc, operationName, variables) {\\\\\\\\n  return asyncFetch(QUERYAPI_ENDPOINT, {\\\\\\\\n    method: \\\\\\\\\\\\\\\"POST\\\\\\\\\\\\\\\",\\\\\\\\n    headers: { \\\\\\\\\\\\\\\"x-hasura-role\\\\\\\\\\\\\\\": `bo_near` },\\\\\\\\n    body: JSON.stringify({\\\\\\\\n      query: operationsDoc,\\\\\\\\n      variables: variables,\\\\\\\\n      operationName: operationName,\\\\\\\\n    }),\\\\\\\\n  });\\\\\\\\n}\\\\\\\\n\\\\\\\\nfunction searchConditionChanged() {\\\\\\\\n  return (\\\\\\\\n    props.author != state.author ||\\\\\\\\n    props.term != state.term ||\\\\\\\\n    props.tag != state.tag ||\\\\\\\\n    props.recency != state.recency\\\\\\\\n  );\\\\\\\\n}\\\\\\\\n\\\\\\\\nfunction updateSearchCondition() {\\\\\\\\n  State.update({\\\\\\\\n    author: props.author,\\\\\\\\n    term: props.term,\\\\\\\\n    tag: props.tag,\\\\\\\\n    recency: props.recency,\\\\\\\\n    loading: true,\\\\\\\\n  });\\\\\\\\n}\\\\\\\\n\\\\\\\\nfunction getPostIds() {\\\\\\\\n  if (searchConditionChanged()) {\\\\\\\\n    updateSearchCondition();\\\\\\\\n    return;\\\\\\\\n  }\\\\\\\\n  let where = {};\\\\\\\\n  let authorId = props.author;\\\\\\\\n  let label = props.tag;\\\\\\\\n  if (authorId) {\\\\\\\\n    where = { author_id: { _eq: authorId }, ...where };\\\\\\\\n  }\\\\\\\\n  if (props.term) {\\\\\\\\n    where = { description: { _ilike: `%${props.term}%` }, ...where };\\\\\\\\n  }\\\\\\\\n  if (label) {\\\\\\\\n    if (typeof label === \\\\\\\\\\\\\\\"string\\\\\\\\\\\\\\\") {\\\\\\\\n      // Handle a single label\\\\\\\\n      where = { labels: { _contains: label }, ...where };\\\\\\\\n    } else if (Array.isArray(label)) {\\\\\\\\n      // Handle an array of labels\\\\\\\\n      where = {\\\\\\\\n        labels: {\\\\\\\\n          _containsAny: label,\\\\\\\\n        },\\\\\\\\n        ...where,\\\\\\\\n      };\\\\\\\\n    }\\\\\\\\n  }\\\\\\\\n  if (!props.recency) {\\\\\\\\n    // show only top level posts\\\\\\\\n    where = { parent_id: { _is_null: true }, ...where };\\\\\\\\n  }\\\\\\\\n\\\\\\\\n  // Don\\\\\\\\\\\\'t show blog\\\\\\\\n  where = {\\\\\\\\n    _not: {\\\\\\\\n      labels: { _contains: \\\\\\\\\\\\\\\"blog\\\\\\\\\\\\\\\" },\\\\\\\\n      parent_id: { _is_null: true },\\\\\\\\n      post_type: { _eq: \\\\\\\\\\\\\\\"Comment\\\\\\\\\\\\\\\" },\\\\\\\\n    },\\\\\\\\n    ...where,\\\\\\\\n  };\\\\\\\\n\\\\\\\\n  console.log(\\\\\\\\\\\\\\\"searching for\\\\\\\\\\\\\\\", where);\\\\\\\\n  fetchGraphQL(query, \\\\\\\\\\\\\\\"DevhubPostsQuery\\\\\\\\\\\\\\\", {\\\\\\\\n    limit: 100,\\\\\\\\n    offset: 0,\\\\\\\\n    where,\\\\\\\\n  }).then((result) => {\\\\\\\\n    if (result.status === 200) {\\\\\\\\n      console.log(\\\\\\\\\\\\\\\"search success\\\\\\\\\\\\\\\");\\\\\\\\n      if (result.body.data) {\\\\\\\\n        const data = result.body.data[queryName];\\\\\\\\n        State.update({\\\\\\\\n          postIds: data.map((p) => p.post_id),\\\\\\\\n          loading: false,\\\\\\\\n        });\\\\\\\\n        console.log(\\\\\\\\\\\\\\\"found:\\\\\\\\\\\\\\\");\\\\\\\\n        console.log(data);\\\\\\\\n      }\\\\\\\\n    } else {\\\\\\\\n      console.error(\\\\\\\\\\\\\\\"error:\\\\\\\\\\\\\\\", result.body);\\\\\\\\n      State.update({ loading: false });\\\\\\\\n    }\\\\\\\\n  });\\\\\\\\n}\\\\\\\\n\\\\\\\\nState.init({\\\\\\\\n  period: \\\\\\\\\\\\\\\"week\\\\\\\\\\\\\\\",\\\\\\\\n});\\\\\\\\n\\\\\\\\ngetPostIds();\\\\\\\\n\\\\\\\\nfunction defaultRenderItem(postId, additionalProps) {\\\\\\\\n  if (!additionalProps) {\\\\\\\\n    additionalProps = {};\\\\\\\\n  }\\\\\\\\n  // It is important to have a non-zero-height element as otherwise InfiniteScroll loads too many items on initial load\\\\\\\\n  return (\\\\\\\\n    <div className=\\\\\\\\\\\\\\\"py-2\\\\\\\\\\\\\\\" style={{ minHeight: \\\\\\\\\\\\\\\"150px\\\\\\\\\\\\\\\" }}>\\\\\\\\n      <Widget\\\\\\\\n        src={\\\\\\\\\\\\\\\"devhub.near/widget/devhub.entity.post.Post\\\\\\\\\\\\\\\"}\\\\\\\\n        props={{\\\\\\\\n          id: postId,\\\\\\\\n          expandable: true,\\\\\\\\n          defaultExpanded: false,\\\\\\\\n          isInList: true,\\\\\\\\n          draftState,\\\\\\\\n          isPreview: false,\\\\\\\\n          onDraftStateChange,\\\\\\\\n          ...additionalProps,\\\\\\\\n          referral: postId,\\\\\\\\n        }}\\\\\\\\n      />\\\\\\\\n    </div>\\\\\\\\n  );\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst renderItem = props.renderItem ?? defaultRenderItem;\\\\\\\\n\\\\\\\\nconst cachedRenderItem = (item, i) => {\\\\\\\\n  if (props.term) {\\\\\\\\n    return renderItem(item, {\\\\\\\\n      searchKeywords: [props.term],\\\\\\\\n    });\\\\\\\\n  }\\\\\\\\n\\\\\\\\n  const key = JSON.stringify(item);\\\\\\\\n\\\\\\\\n  if (!(key in state.cachedItems)) {\\\\\\\\n    state.cachedItems[key] = renderItem(item);\\\\\\\\n    State.update();\\\\\\\\n  }\\\\\\\\n  return state.cachedItems[key];\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst initialRenderLimit = props.initialRenderLimit ?? 3;\\\\\\\\nconst addDisplayCount = props.nextLimit ?? initialRenderLimit;\\\\\\\\n\\\\\\\\nconst ONE_DAY = 60 * 60 * 24 * 1000;\\\\\\\\nconst ONE_WEEK = 60 * 60 * 24 * 1000 * 7;\\\\\\\\nconst ONE_MONTH = 60 * 60 * 24 * 1000 * 30;\\\\\\\\n\\\\\\\\nfunction getHotnessScore(post) {\\\\\\\\n  //post.id - shows the age of the post, should grow exponentially, since newer posts are more important\\\\\\\\n  //post.likes.length - linear value\\\\\\\\n  const age = Math.pow(post.id, 5);\\\\\\\\n  const comments = post.comments;\\\\\\\\n  const commentAge = comments.reduce((sum, age) => sum + Math.pow(age, 5), 0);\\\\\\\\n  const totalAge = age + commentAge;\\\\\\\\n  //use log functions to make likes score and exponentially big age score close to each other\\\\\\\\n  return Math.log10(post.likes.length) + Math.log(Math.log10(totalAge));\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst getPeriodText = (period) => {\\\\\\\\n  let text = \\\\\\\\\\\\\\\"Last 24 hours\\\\\\\\\\\\\\\";\\\\\\\\n  if (period === \\\\\\\\\\\\\\\"week\\\\\\\\\\\\\\\") {\\\\\\\\n    text = \\\\\\\\\\\\\\\"Last week\\\\\\\\\\\\\\\";\\\\\\\\n  }\\\\\\\\n  if (period === \\\\\\\\\\\\\\\"month\\\\\\\\\\\\\\\") {\\\\\\\\n    text = \\\\\\\\\\\\\\\"Last month\\\\\\\\\\\\\\\";\\\\\\\\n  }\\\\\\\\n  return text;\\\\\\\\n};\\\\\\\\n\\\\\\\\nlet postIds = state.postIds ?? null;\\\\\\\\n\\\\\\\\nconst loader = (\\\\\\\\n  <div className=\\\\\\\\\\\\\\\"loader\\\\\\\\\\\\\\\" key={\\\\\\\\\\\\\\\"loader\\\\\\\\\\\\\\\"}>\\\\\\\\n    <span\\\\\\\\n      className=\\\\\\\\\\\\\\\"spinner-grow spinner-grow-sm me-1\\\\\\\\\\\\\\\"\\\\\\\\n      role=\\\\\\\\\\\\\\\"status\\\\\\\\\\\\\\\"\\\\\\\\n      aria-hidden=\\\\\\\\\\\\\\\"true\\\\\\\\\\\\\\\"\\\\\\\\n    />\\\\\\\\n    Loading ...\\\\\\\\n  </div>\\\\\\\\n);\\\\\\\\n\\\\\\\\nif (postIds === null) {\\\\\\\\n  return loader;\\\\\\\\n}\\\\\\\\nconst initialItems = postIds;\\\\\\\\n//const initialItems = postIds.map(postId => ({ id: postId, ...Near.view(nearDevGovGigsContractAccountId, \\\\\\\\\\\\\\\"get_post\\\\\\\\\\\\\\\", { post_id: postId }) }));\\\\\\\\n\\\\\\\\n// const computeFetchFrom = (items, limit) => {\\\\\\\\n//   if (!items || items.length < limit) {\\\\\\\\n//     return false;\\\\\\\\n//   }\\\\\\\\n//   const blockHeight = items[items.length - 1].blockHeight;\\\\\\\\n//   return index.options.order === \\\\\\\\\\\\\\\"desc\\\\\\\\\\\\\\\" ? blockHeight - 1 : blockHeight + 1;\\\\\\\\n// };\\\\\\\\n\\\\\\\\n// const mergeItems = (newItems) => {\\\\\\\\n//   const items = [\\\\\\\\n//     ...new Set([...newItems, ...state.items].map((i) => JSON.stringify(i))),\\\\\\\\n//   ].map((i) => JSON.parse(i));\\\\\\\\n//   items.sort((a, b) => a.blockHeight - b.blockHeight);\\\\\\\\n//   if (index.options.order === \\\\\\\\\\\\\\\"desc\\\\\\\\\\\\\\\") {\\\\\\\\n//     items.reverse();\\\\\\\\n//   }\\\\\\\\n//   return items;\\\\\\\\n// };\\\\\\\\n\\\\\\\\nconst jInitialItems = JSON.stringify(initialItems);\\\\\\\\nif (state.jInitialItems !== jInitialItems) {\\\\\\\\n  // const jIndex = JSON.stringify(index);\\\\\\\\n  // if (jIndex !== state.jIndex) {\\\\\\\\n  State.update({\\\\\\\\n    jIndex,\\\\\\\\n    jInitialItems,\\\\\\\\n    items: initialItems,\\\\\\\\n    fetchFrom: false,\\\\\\\\n    //nextFetchFrom: computeFetchFrom(initialItems, index.options.limit),\\\\\\\\n    nextFetchFrom: false,\\\\\\\\n    displayCount: initialRenderLimit,\\\\\\\\n    cachedItems: {},\\\\\\\\n  });\\\\\\\\n  // } else {\\\\\\\\n  //   State.update({\\\\\\\\n  //     jInitialItems,\\\\\\\\n  //     items: mergeItems(initialItems),\\\\\\\\n  //   });\\\\\\\\n  // }\\\\\\\\n}\\\\\\\\n\\\\\\\\nif (state.fetchFrom) {\\\\\\\\n  // TODO: fetchFrom\\\\\\\\n  // const limit = addDisplayCount;\\\\\\\\n  // const newItems = Social.index(\\\\\\\\n  //   index.action,\\\\\\\\n  //   index.key,\\\\\\\\n  //   Object.assign({}, index.options, {\\\\\\\\n  //     from: state.fetchFrom,\\\\\\\\n  //     subscribe: undefined,\\\\\\\\n  //     limit,\\\\\\\\n  //   })\\\\\\\\n  // );\\\\\\\\n  // if (newItems !== null) {\\\\\\\\n  //   State.update({\\\\\\\\n  //     items: mergeItems(newItems),\\\\\\\\n  //     fetchFrom: false,\\\\\\\\n  //     nextFetchFrom: computeFetchFrom(newItems, limit),\\\\\\\\n  //   });\\\\\\\\n  // }\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst makeMoreItems = () => {\\\\\\\\n  State.update({\\\\\\\\n    displayCount: state.displayCount + addDisplayCount,\\\\\\\\n  });\\\\\\\\n  if (\\\\\\\\n    state.items.length - state.displayCount < addDisplayCount * 2 &&\\\\\\\\n    !state.fetchFrom &&\\\\\\\\n    state.nextFetchFrom &&\\\\\\\\n    state.nextFetchFrom !== state.fetchFrom\\\\\\\\n  ) {\\\\\\\\n    State.update({\\\\\\\\n      fetchFrom: state.nextFetchFrom,\\\\\\\\n    });\\\\\\\\n  }\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst fetchMore =\\\\\\\\n  props.manual &&\\\\\\\\n  (state.fetchFrom && state.items.length < state.displayCount\\\\\\\\n    ? loader\\\\\\\\n    : state.displayCount < state.items.length && (\\\\\\\\n        <div key={\\\\\\\\\\\\\\\"loader more\\\\\\\\\\\\\\\"}>\\\\\\\\n          <a href=\\\\\\\\\\\\\\\"javascript:void\\\\\\\\\\\\\\\" onClick={(e) => makeMoreItems()}>\\\\\\\\n            {props.loadMoreText ?? \\\\\\\\\\\\\\\"Load more...\\\\\\\\\\\\\\\"}\\\\\\\\n          </a>\\\\\\\\n        </div>\\\\\\\\n      ));\\\\\\\\n\\\\\\\\nconst items = state.items ? state.items.slice(0, state.displayCount) : [];\\\\\\\\n\\\\\\\\nconst renderedItems = items.map(cachedRenderItem);\\\\\\\\n\\\\\\\\nconst Head =\\\\\\\\n  props.recency == \\\\\\\\\\\\\\\"hot\\\\\\\\\\\\\\\" ? (\\\\\\\\n    <div class=\\\\\\\\\\\\\\\"row\\\\\\\\\\\\\\\">\\\\\\\\n      <div class=\\\\\\\\\\\\\\\"fs-5 col-6 align-self-center\\\\\\\\\\\\\\\">\\\\\\\\n        <i class=\\\\\\\\\\\\\\\"bi-fire\\\\\\\\\\\\\\\"></i>\\\\\\\\n        <span>Hottest Posts</span>\\\\\\\\n      </div>\\\\\\\\n      <div class=\\\\\\\\\\\\\\\"col-6 dropdown d-flex justify-content-end\\\\\\\\\\\\\\\">\\\\\\\\n        <a\\\\\\\\n          class=\\\\\\\\\\\\\\\"btn btn-secondary dropdown-toggle\\\\\\\\\\\\\\\"\\\\\\\\n          href=\\\\\\\\\\\\\\\"#\\\\\\\\\\\\\\\"\\\\\\\\n          role=\\\\\\\\\\\\\\\"button\\\\\\\\\\\\\\\"\\\\\\\\n          id=\\\\\\\\\\\\\\\"dropdownMenuLink\\\\\\\\\\\\\\\"\\\\\\\\n          data-bs-toggle=\\\\\\\\\\\\\\\"dropdown\\\\\\\\\\\\\\\"\\\\\\\\n          aria-expanded=\\\\\\\\\\\\\\\"false\\\\\\\\\\\\\\\"\\\\\\\\n        >\\\\\\\\n          {getPeriodText(state.period)}\\\\\\\\n        </a>\\\\\\\\n\\\\\\\\n        <ul class=\\\\\\\\\\\\\\\"dropdown-menu\\\\\\\\\\\\\\\" aria-labelledby=\\\\\\\\\\\\\\\"dropdownMenuLink\\\\\\\\\\\\\\\">\\\\\\\\n          <li>\\\\\\\\n            <button\\\\\\\\n              class=\\\\\\\\\\\\\\\"dropdown-item\\\\\\\\\\\\\\\"\\\\\\\\n              onClick={() => {\\\\\\\\n                State.update({ period: \\\\\\\\\\\\\\\"day\\\\\\\\\\\\\\\" });\\\\\\\\n              }}\\\\\\\\n            >\\\\\\\\n              {getPeriodText(\\\\\\\\\\\\\\\"day\\\\\\\\\\\\\\\")}\\\\\\\\n            </button>\\\\\\\\n          </li>\\\\\\\\n          <li>\\\\\\\\n            <button\\\\\\\\n              class=\\\\\\\\\\\\\\\"dropdown-item\\\\\\\\\\\\\\\"\\\\\\\\n              onClick={() => {\\\\\\\\n                State.update({ period: \\\\\\\\\\\\\\\"week\\\\\\\\\\\\\\\" });\\\\\\\\n              }}\\\\\\\\n            >\\\\\\\\n              {getPeriodText(\\\\\\\\\\\\\\\"week\\\\\\\\\\\\\\\")}\\\\\\\\n            </button>\\\\\\\\n          </li>\\\\\\\\n          <li>\\\\\\\\n            <button\\\\\\\\n              class=\\\\\\\\\\\\\\\"dropdown-item\\\\\\\\\\\\\\\"\\\\\\\\n              onClick={() => {\\\\\\\\n                State.update({ period: \\\\\\\\\\\\\\\"month\\\\\\\\\\\\\\\" });\\\\\\\\n              }}\\\\\\\\n            >\\\\\\\\n              {getPeriodText(\\\\\\\\\\\\\\\"month\\\\\\\\\\\\\\\")}\\\\\\\\n            </button>\\\\\\\\n          </li>\\\\\\\\n        </ul>\\\\\\\\n      </div>\\\\\\\\n    </div>\\\\\\\\n  ) : (\\\\\\\\n    <></>\\\\\\\\n  );\\\\\\\\n\\\\\\\\nreturn (\\\\\\\\n  <>\\\\\\\\n    {Head}\\\\\\\\n    {state.loading ? loader : null}\\\\\\\\n    {is_edit_or_add_post_transaction ? (\\\\\\\\n      <p class=\\\\\\\\\\\\\\\"text-secondary mt-4\\\\\\\\\\\\\\\">\\\\\\\\n        Post {transaction_method_name == \\\\\\\\\\\\\\\"edit_post\\\\\\\\\\\\\\\" ? \\\\\\\\\\\\\\\"edited\\\\\\\\\\\\\\\" : \\\\\\\\\\\\\\\"added\\\\\\\\\\\\\\\"}{\\\\\\\\\\\\\\\" \\\\\\\\\\\\\\\"}\\\\\\\\n        successfully. Back to{\\\\\\\\\\\\\\\" \\\\\\\\\\\\\\\"}\\\\\\\\n        <Link\\\\\\\\n          style={{\\\\\\\\n            color: \\\\\\\\\\\\\\\"#3252A6\\\\\\\\\\\\\\\",\\\\\\\\n          }}\\\\\\\\n          className=\\\\\\\\\\\\\\\"fw-bold\\\\\\\\\\\\\\\"\\\\\\\\n          to={href({\\\\\\\\n            widgetSrc: \\\\\\\\\\\\\\\"devhub.near/widget/app\\\\\\\\\\\\\\\",\\\\\\\\n            params: { page: \\\\\\\\\\\\\\\"feed\\\\\\\\\\\\\\\" },\\\\\\\\n          })}\\\\\\\\n        >\\\\\\\\n          feed\\\\\\\\n        </Link>\\\\\\\\n      </p>\\\\\\\\n    ) : state.items.length > 0 ? (\\\\\\\\n      <InfiniteScroll\\\\\\\\n        pageStart={0}\\\\\\\\n        loadMore={makeMoreItems}\\\\\\\\n        hasMore={state.displayCount < state.items.length}\\\\\\\\n        loader={loader}\\\\\\\\n      >\\\\\\\\n        {renderedItems}\\\\\\\\n      </InfiniteScroll>\\\\\\\\n    ) : (\\\\\\\\n      <p class=\\\\\\\\\\\\\\\"text-secondary\\\\\\\\\\\\\\\">\\\\\\\\n        No posts{\\\\\\\\\\\\\\\" \\\\\\\\\\\\\\\"}\\\\\\\\n        {props.term || props.tag || props.author ? \\\\\\\\\\\\\\\"matches search\\\\\\\\\\\\\\\" : \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\"}\\\\\\\\n        {props.recency === \\\\\\\\\\\\\\\"hot\\\\\\\\\\\\\\\"\\\\\\\\n          ? \\\\\\\\\\\\\\\" in \\\\\\\\\\\\\\\" + getPeriodText(state.period).toLowerCase()\\\\\\\\n          : \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\"}\\\\\\\\n      </p>\\\\\\\\n    )}\\\\\\\\n  </>\\\\\\\\n);\\\\\\\\n\"}, \"devhub.entity.addon.blog.Feed\": {\"\": \"const { Item, Layout } = props;\\\\\\\\n\\\\\\\\nLayout = Layout || (() => <></>);\\\\\\\\n\\\\\\\\nconst Container = styled.div``;\\\\\\\\n\\\\\\\\nconst Loader = styled.div`\\\\\\\\n  text-align: center;\\\\\\\\n  padding: 20px;\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst QUERYAPI_ENDPOINT = `https://near-queryapi.api.pagoda.co/v1/graphql/`;\\\\\\\\nconst DISPLAY_COUNT = 10;\\\\\\\\n\\\\\\\\nconst fetchGraphQL = (operationsDoc, operationName, variables) => {\\\\\\\\n  return asyncFetch(QUERYAPI_ENDPOINT, {\\\\\\\\n    method: \\\\\\\\\\\\\\\"POST\\\\\\\\\\\\\\\",\\\\\\\\n    headers: { \\\\\\\\\\\\\\\"x-hasura-role\\\\\\\\\\\\\\\": `bo_near` },\\\\\\\\n    body: JSON.stringify({\\\\\\\\n      query: operationsDoc,\\\\\\\\n      variables: variables,\\\\\\\\n      operationName: operationName,\\\\\\\\n    }),\\\\\\\\n  });\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst queryName =\\\\\\\\n  props.queryName ?? `bo_near_devhub_v35_posts_with_latest_snapshot`;\\\\\\\\n\\\\\\\\nconst query = `query DevhubPostsQuery($limit: Int = 100, $offset: Int = 0, $where: ${queryName}_bool_exp = {}) {\\\\\\\\n    ${queryName}(\\\\\\\\n      limit: $limit\\\\\\\\n      offset: $offset\\\\\\\\n      order_by: {block_height: desc}\\\\\\\\n      where: $where\\\\\\\\n    ) {\\\\\\\\n      post_id\\\\\\\\n    }\\\\\\\\n  }\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst [postIds, setPostIds] = useState([]);\\\\\\\\nconst [loading, setLoading] = useState(false);\\\\\\\\nconst [cachedItems, setCachedItems] = useState({});\\\\\\\\nconst [hasNext, setHasNext] = useState(true);\\\\\\\\n\\\\\\\\nconst buildWhereClause = () => {\\\\\\\\n  let where = {};\\\\\\\\n  if (props.author) {\\\\\\\\n    where = { author_id: { _eq: props.author }, ...where };\\\\\\\\n  }\\\\\\\\n  if (props.term) {\\\\\\\\n    where = { description: { _ilike: `%${props.term}%` }, ...where };\\\\\\\\n  }\\\\\\\\n  if (props.includeLabels && Array.isArray(props.includeLabels)) {\\\\\\\\n    const labelConditions = props.includeLabels.map((label) => ({\\\\\\\\n      labels: { _contains: label },\\\\\\\\n    }));\\\\\\\\n\\\\\\\\n    where = { _and: [...labelConditions, where] };\\\\\\\\n  }\\\\\\\\n  if (props.excludeLabels && Array.isArray(props.excludeLabels)) {\\\\\\\\n    const labelConditions = props.excludeLabels.map((label) => ({\\\\\\\\n      labels: { _nin: label },\\\\\\\\n    }));\\\\\\\\n\\\\\\\\n    where = { _and: [...labelConditions, where] };\\\\\\\\n  }\\\\\\\\n  if (!props.recency) {\\\\\\\\n    where = { parent_id: { _is_null: true }, ...where };\\\\\\\\n  }\\\\\\\\n  return where;\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst fetchPostIds = (offset) => {\\\\\\\\n  if (!offset) {\\\\\\\\n    offset = 0;\\\\\\\\n  }\\\\\\\\n  if (loading) return;\\\\\\\\n  setLoading(true);\\\\\\\\n  const variables = { limit: DISPLAY_COUNT, offset, where: buildWhereClause() };\\\\\\\\n  fetchGraphQL(query, \\\\\\\\\\\\\\\"DevhubPostsQuery\\\\\\\\\\\\\\\", variables).then((result) => {\\\\\\\\n    if (result.status === 200) {\\\\\\\\n      if (result.body.data) {\\\\\\\\n        const data = result.body.data[queryName];\\\\\\\\n        const newPostIds = data.map((p) => p.post_id);\\\\\\\\n        setPostIds(offset === 0 ? newPostIds : [...postIds, ...newPostIds]);\\\\\\\\n        setHasNext(data.length >= variables.limit);\\\\\\\\n      } else {\\\\\\\\n        console.error(\\\\\\\\\\\\\\\"GraphQL Error:\\\\\\\\\\\\\\\", result.errors);\\\\\\\\n      }\\\\\\\\n      setLoading(false);\\\\\\\\n    }\\\\\\\\n  });\\\\\\\\n};\\\\\\\\n\\\\\\\\nuseEffect(() => {\\\\\\\\n  fetchPostIds();\\\\\\\\n}, [props.author, props.term, props.tag, props.recency]);\\\\\\\\n\\\\\\\\nconst handleLoadMore = () => {\\\\\\\\n  if (!hasNext) return;\\\\\\\\n  fetchPostIds(postIds.length);\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst renderLoader = () => <Loader>Loading...</Loader>;\\\\\\\\n\\\\\\\\nconst renderItem = (postId) => (\\\\\\\\n  <div key={postId}>\\\\\\\\n    {(props.renderItem && props.renderItem(postId)) || <div>Post {postId}</div>}\\\\\\\\n  </div>\\\\\\\\n);\\\\\\\\n\\\\\\\\nconst cachedRenderItem = (postId) => {\\\\\\\\n  if (!(postId in cachedItems)) {\\\\\\\\n    cachedItems[postId] = renderItem(postId);\\\\\\\\n    setCachedItems({ ...cachedItems });\\\\\\\\n  }\\\\\\\\n  return cachedItems[postId];\\\\\\\\n};\\\\\\\\n\\\\\\\\nreturn (\\\\\\\\n  <Container>\\\\\\\\n    {loading && renderLoader()}\\\\\\\\n    {postIds.length > 0 ? (\\\\\\\\n      <InfiniteScroll\\\\\\\\n        pageStart={0}\\\\\\\\n        dataLength={postIds.length}\\\\\\\\n        loadMore={handleLoadMore}\\\\\\\\n        hasMore={hasNext}\\\\\\\\n        loader={renderLoader()}\\\\\\\\n      >\\\\\\\\n        <Layout>\\\\\\\\n          {/* Layout */}\\\\\\\\n          {postIds.map(cachedRenderItem)}\\\\\\\\n        </Layout>\\\\\\\\n      </InfiniteScroll>\\\\\\\\n    ) : (\\\\\\\\n      <p class=\\\\\\\\\\\\\\\"text-secondary\\\\\\\\\\\\\\\">No posts</p>\\\\\\\\n    )}\\\\\\\\n  </Container>\\\\\\\\n);\\\\\\\\n\"}, \"devhub.entity.addon.blog.editor.provider\": {\"\": \"const { getPost } =\\\\\\\\n  VM.require(\\\\\\\\\\\\\\\"devhub.near/widget/core.adapter.devhub-contract\\\\\\\\\\\\\\\") ||\\\\\\\\n  (() => {});\\\\\\\\n\\\\\\\\nconst { Layout, handle } = props;\\\\\\\\n\\\\\\\\nconst QUERYAPI_ENDPOINT = `https://near-queryapi.api.pagoda.co/v1/graphql/`;\\\\\\\\n\\\\\\\\nconst fetchGraphQL = (operationsDoc, operationName, variables) => {\\\\\\\\n  return fetch(QUERYAPI_ENDPOINT, {\\\\\\\\n    method: \\\\\\\\\\\\\\\"POST\\\\\\\\\\\\\\\",\\\\\\\\n    headers: { \\\\\\\\\\\\\\\"x-hasura-role\\\\\\\\\\\\\\\": `bo_near` },\\\\\\\\n    body: JSON.stringify({\\\\\\\\n      query: operationsDoc,\\\\\\\\n      variables: variables,\\\\\\\\n      operationName: operationName,\\\\\\\\n    }),\\\\\\\\n  });\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst queryName =\\\\\\\\n  props.queryName ?? `bo_near_devhub_v17_posts_with_latest_snapshot`;\\\\\\\\n\\\\\\\\nconst query = `query DevhubPostsQuery($limit: Int = 100, $offset: Int = 0, $where: ${queryName}_bool_exp = {}) {\\\\\\\\n    ${queryName}(\\\\\\\\n      limit: $limit\\\\\\\\n      offset: $offset\\\\\\\\n      order_by: {block_height: desc}\\\\\\\\n      where: $where\\\\\\\\n    ) {\\\\\\\\n      post_id\\\\\\\\n    }\\\\\\\\n  }\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst includeLabels = [\\\\\\\\\\\\\\\"blog\\\\\\\\\\\\\\\", handle];\\\\\\\\n\\\\\\\\nconst buildWhereClause = () => {\\\\\\\\n  let where = {};\\\\\\\\n  if (props.author) {\\\\\\\\n    where = { author_id: { _eq: props.author }, ...where };\\\\\\\\n  }\\\\\\\\n  if (props.term) {\\\\\\\\n    where = { description: { _ilike: `%${props.term}%` }, ...where };\\\\\\\\n  }\\\\\\\\n  if (includeLabels && Array.isArray(includeLabels)) {\\\\\\\\n    const labelConditions = includeLabels.map((label) => ({\\\\\\\\n      labels: { _contains: label },\\\\\\\\n    }));\\\\\\\\n\\\\\\\\n    where = { _and: [...labelConditions, where] };\\\\\\\\n  }\\\\\\\\n  if (props.excludeLabels && Array.isArray(props.excludeLabels)) {\\\\\\\\n    const labelConditions = props.excludeLabels.map((label) => ({\\\\\\\\n      labels: { _nin: label },\\\\\\\\n    }));\\\\\\\\n\\\\\\\\n    where = { _and: [...labelConditions, where] };\\\\\\\\n  }\\\\\\\\n  if (!props.recency) {\\\\\\\\n    where = { parent_id: { _is_null: true }, ...where };\\\\\\\\n  }\\\\\\\\n  return where;\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst variables = { limit: DISPLAY_COUNT, offset, where: buildWhereClause() };\\\\\\\\n\\\\\\\\nconst posts = fetch(QUERYAPI_ENDPOINT, {\\\\\\\\n  method: \\\\\\\\\\\\\\\"POST\\\\\\\\\\\\\\\",\\\\\\\\n  headers: { \\\\\\\\\\\\\\\"x-hasura-role\\\\\\\\\\\\\\\": `bo_near` },\\\\\\\\n  body: JSON.stringify({\\\\\\\\n    query: query,\\\\\\\\n    variables: variables,\\\\\\\\n    operationName: \\\\\\\\\\\\\\\"DevhubPostsQuery\\\\\\\\\\\\\\\",\\\\\\\\n  }),\\\\\\\\n});\\\\\\\\n\\\\\\\\nconst handleOnChange = (v) => {\\\\\\\\n  console.log(\\\\\\\\\\\\\\\"onChange\\\\\\\\\\\\\\\", v);\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst handleGetData = (v) => {\\\\\\\\n  const postId = parseInt(v);\\\\\\\\n  const post = getPost({ post_id: postId });\\\\\\\\n  const description = JSON.parse(post.snapshot.description || \\\\\\\\\\\\\\\"null\\\\\\\\\\\\\\\") || {};\\\\\\\\n\\\\\\\\n  return {\\\\\\\\n    id: postId,\\\\\\\\n    ...description,\\\\\\\\n  };\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst handleOnSubmit = (v, isEdit) => {\\\\\\\\n  console.log(isEdit);\\\\\\\\n  if (isEdit) {\\\\\\\\n    Near.call({\\\\\\\\n      contractName: \\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\",\\\\\\\\n      methodName: \\\\\\\\\\\\\\\"edit_post\\\\\\\\\\\\\\\",\\\\\\\\n      args: {\\\\\\\\n        id: v.id,\\\\\\\\n        labels: [\\\\\\\\\\\\\\\"blog\\\\\\\\\\\\\\\", handle],\\\\\\\\n        body: {\\\\\\\\n          post_type: \\\\\\\\\\\\\\\"Comment\\\\\\\\\\\\\\\",\\\\\\\\n          description: JSON.stringify(v),\\\\\\\\n          comment_version: \\\\\\\\\\\\\\\"V2\\\\\\\\\\\\\\\",\\\\\\\\n        },\\\\\\\\n      },\\\\\\\\n      deposit: Big(10).pow(21).mul(2),\\\\\\\\n      gas: Big(10).pow(12).mul(100),\\\\\\\\n    });\\\\\\\\n  } else {\\\\\\\\n    Near.call({\\\\\\\\n      contractName: \\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\",\\\\\\\\n      methodName: \\\\\\\\\\\\\\\"add_post\\\\\\\\\\\\\\\",\\\\\\\\n      args: {\\\\\\\\n        labels: [\\\\\\\\\\\\\\\"blog\\\\\\\\\\\\\\\", handle],\\\\\\\\n        body: {\\\\\\\\n          post_type: \\\\\\\\\\\\\\\"Comment\\\\\\\\\\\\\\\",\\\\\\\\n          description: JSON.stringify(v),\\\\\\\\n          comment_version: \\\\\\\\\\\\\\\"V2\\\\\\\\\\\\\\\",\\\\\\\\n        },\\\\\\\\n      },\\\\\\\\n      deposit: Big(10).pow(21).mul(2),\\\\\\\\n      gas: Big(10).pow(12).mul(100),\\\\\\\\n    });\\\\\\\\n  }\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst handleOnCancel = (v) => {\\\\\\\\n  console.log(\\\\\\\\\\\\\\\"onCancel\\\\\\\\\\\\\\\", v);\\\\\\\\n};\\\\\\\\n\\\\\\\\nreturn (\\\\\\\\n  <Layout\\\\\\\\n    data={posts.body.data.bo_near_devhub_v35_posts_with_latest_snapshot || []}\\\\\\\\n    getData={handleGetData}\\\\\\\\n    onChange={handleOnChange}\\\\\\\\n    onSubmit={handleOnSubmit}\\\\\\\\n    onCancel={handleOnCancel}\\\\\\\\n  />\\\\\\\\n);\\\\\\\\n\"}}}}}"
      }
    ],
    "actions_agg": {
      "deposit": 0
    },
    "outcomes": {
      "status": true
    },
    "outcomes_agg": {
      "transaction_fee": 1.2604923234935e+21
    }
  },
  {
    "id": "1421116451",
    "receipt_id": "BjNEXZ4tBerhUazrMQmRpCejtMRVPisLrzrgYr3Asa65",
    "predecessor_account_id": "system",
    "receiver_account_id": "devhub.near",
    "receipt_kind": "ACTION",
    "receipt_block": {
      "block_hash": "9ZGLAgNtmfrxuhC8stGxpuWfyH3be1W6Eyg4hDwpUQCm",
      "block_height": 105787997,
      "block_timestamp": 1700094887556155000
    },
    "receipt_outcome": {
      "gas_burnt": 223182562500,
      "tokens_burnt": 0,
      "executor_account_id": "devhub.near",
      "status": true
    },
    "transaction_hash": "5pp1xPJm2AT4BnotzQYtsmPnPaSLqoMoMcgDCmzqBcvU",
    "included_in_block_hash": "DPQWPeVuCRbA4QvkTSfRLagSNPTS82ALVh6116hUpiZS",
    "block_timestamp": "1700094885382829321",
    "block": {
      "block_height": 105787995
    },
    "receipt_conversion_tokens_burnt": "247045070061400000000",
    "actions": [
      {
        "action": "TRANSFER",
        "method": null,
        "deposit": 1.880427358823381e+23,
        "fee": 0,
        "args": null
      }
    ],
    "actions_agg": {
      "deposit": 0
    },
    "outcomes": {
      "status": true
    },
    "outcomes_agg": {
      "transaction_fee": 1.2604923234935e+21
    }
  },
  {
    "id": "1421151653",
    "receipt_id": "AhKFhxepk3SzfKXQMPs8B28wew6zCNz2mP5fqHsDDe7",
    "predecessor_account_id": "devhub.near",
    "receiver_account_id": "social.near",
    "receipt_kind": "ACTION",
    "receipt_block": {
      "block_hash": "H3eMTGsobNnfBtPd13fyfmNni2TsKZGGr6UsTRbJB7oz",
      "block_height": 105789942,
      "block_timestamp": 1700096916013248500
    },
    "receipt_outcome": {
      "gas_burnt": 8223929685663,
      "tokens_burnt": 822392968566300000000,
      "executor_account_id": "social.near",
      "status": true
    },
    "transaction_hash": "G3czMMUEBVmp4749y67VoansYVnRBoGd9ZScGN81sExb",
    "included_in_block_hash": "FHTzsciCBuDDqJazTGKBmDEZJ5nzGv1E5RyBWYK5yLZe",
    "block_timestamp": "1700096915127449115",
    "block": {
      "block_height": 105789941
    },
    "receipt_conversion_tokens_burnt": "246932155394400000000",
    "actions": [
      {
        "action": "FUNCTION_CALL",
        "method": "set",
        "deposit": 0,
        "fee": 822392968566300000000,
        "args": "{\"data\": {\"devhub.near\": {\"widget\": {\"devhub.page.create\": {\"\": \"/* INCLUDE: \\\\\\\\\\\\\\\"core/lib/autocomplete\\\\\\\\\\\\\\\" */\\\\\\\\nconst autocompleteEnabled = true;\\\\\\\\n\\\\\\\\nconst AutoComplete = styled.div`\\\\\\\\n  z-index: 5;\\\\\\\\n\\\\\\\\n  > div > div {\\\\\\\\n    padding: calc(var(--padding) / 2);\\\\\\\\n  }\\\\\\\\n`;\\\\\\\\n\\\\\\\\nfunction textareaInputHandler(value) {\\\\\\\\n  const showAccountAutocomplete = /@[\\\\\\\\\\\\\\\\w][^\\\\\\\\\\\\\\\\s]*$/.test(value);\\\\\\\\n  State.update((lastKnownState) => ({\\\\\\\\n    ...lastKnownState,\\\\\\\\n    text: value,\\\\\\\\n    showAccountAutocomplete,\\\\\\\\n  }));\\\\\\\\n}\\\\\\\\n\\\\\\\\nfunction autoCompleteAccountId(id) {\\\\\\\\n  let description = state.description.replace(/[\\\\\\\\\\\\\\\\s]{0,1}@[^\\\\\\\\\\\\\\\\s]*$/, \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\");\\\\\\\\n  description = `${description} @${id}`.trim() + \\\\\\\\\\\\\\\" \\\\\\\\\\\\\\\";\\\\\\\\n  State.update((lastKnownState) => ({\\\\\\\\n    ...lastKnownState,\\\\\\\\n    description,\\\\\\\\n    showAccountAutocomplete: false,\\\\\\\\n  }));\\\\\\\\n}\\\\\\\\n/* END_INCLUDE: \\\\\\\\\\\\\\\"core/lib/autocomplete\\\\\\\\\\\\\\\" */\\\\\\\\n\\\\\\\\nconst { href } = VM.require(\\\\\\\\\\\\\\\"devhub.near/widget/core.lib.url\\\\\\\\\\\\\\\");\\\\\\\\n\\\\\\\\nconst { DRAFT_STATE_STORAGE_KEY, draftState, onDraftStateChange } = VM.require(\\\\\\\\n  \\\\\\\\\\\\\\\"devhub.near/widget/devhub.entity.post.draft\\\\\\\\\\\\\\\"\\\\\\\\n);\\\\\\\\n\\\\\\\\nif (!href) {\\\\\\\\n  return <p>Loading modules...</p>;\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst parentId = props.parentId ?? null;\\\\\\\\nconst postId = props.postId ?? null;\\\\\\\\nconst mode = props.mode ?? \\\\\\\\\\\\\\\"Create\\\\\\\\\\\\\\\";\\\\\\\\n\\\\\\\\nconst referralLabels = props.referral ? [`referral:${props.referral}`] : [];\\\\\\\\nconst labelStrings = (props.labels ? props.labels.split(\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\") : []).concat(\\\\\\\\n  referralLabels\\\\\\\\n);\\\\\\\\nconst labels = labelStrings.map((s) => {\\\\\\\\n  return { name: s };\\\\\\\\n});\\\\\\\\n\\\\\\\\nState.init({\\\\\\\\n  seekingFunding: false,\\\\\\\\n\\\\\\\\n  author_id: context.accountId,\\\\\\\\n  // Should be a list of objects with field \\\\\\\\\\\\\\\"name\\\\\\\\\\\\\\\".\\\\\\\\n  labels,\\\\\\\\n  // Should be a list of labels as strings.\\\\\\\\n  // Both of the label structures should be modified together.\\\\\\\\n  labelStrings,\\\\\\\\n  postType: \\\\\\\\\\\\\\\"Idea\\\\\\\\\\\\\\\",\\\\\\\\n  name: props.name ?? \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\",\\\\\\\\n  description: props.description ?? \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\",\\\\\\\\n  amount: props.amount ?? \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\",\\\\\\\\n  token: props.token ?? \\\\\\\\\\\\\\\"USDT\\\\\\\\\\\\\\\",\\\\\\\\n  supervisor: props.supervisor ?? \\\\\\\\\\\\\\\"neardevdao.near\\\\\\\\\\\\\\\",\\\\\\\\n  githubLink: props.githubLink ?? \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\",\\\\\\\\n  warning: \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\",\\\\\\\\n  waitForDraftStateRestore: true,\\\\\\\\n});\\\\\\\\n\\\\\\\\nif (state.waitForDraftStateRestore) {\\\\\\\\n  const draftstatestring = Storage.privateGet(DRAFT_STATE_STORAGE_KEY);\\\\\\\\n  if (draftstatestring != null) {\\\\\\\\n    if (props.transactionHashes) {\\\\\\\\n      State.update({ waitForDraftStateRestore: false });\\\\\\\\n      Storage.privateSet(DRAFT_STATE_STORAGE_KEY, undefined);\\\\\\\\n    } else {\\\\\\\\n      try {\\\\\\\\n        const draftstate = JSON.parse(draftstatestring);\\\\\\\\n        State.update(draftstate);\\\\\\\\n      } catch (e) {\\\\\\\\n        console.error(\\\\\\\\\\\\\\\"error restoring draft\\\\\\\\\\\\\\\", draftstatestring);\\\\\\\\n      }\\\\\\\\n    }\\\\\\\\n    State.update({ waitForDraftStateRestore: false });\\\\\\\\n  }\\\\\\\\n}\\\\\\\\n\\\\\\\\n// This must be outside onClick, because Near.view returns null at first, and when the view call finished, it returns true/false.\\\\\\\\n// If checking this inside onClick, it will give `null` and we cannot tell the result is true or false.\\\\\\\\nlet grantNotify = Near.view(\\\\\\\\\\\\\\\"social.near\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"is_write_permission_granted\\\\\\\\\\\\\\\", {\\\\\\\\n  predecessor_id: \\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\",\\\\\\\\n  key: context.accountId + \\\\\\\\\\\\\\\"/index/notify\\\\\\\\\\\\\\\",\\\\\\\\n});\\\\\\\\nif (grantNotify === null) {\\\\\\\\n  return;\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst onSubmit = () => {\\\\\\\\n  Storage.privateSet(DRAFT_STATE_STORAGE_KEY, JSON.stringify(state));\\\\\\\\n\\\\\\\\n  let labels = state.labelStrings;\\\\\\\\n\\\\\\\\n  let body = {\\\\\\\\n    name: state.name,\\\\\\\\n    description: generateDescription(\\\\\\\\n      state.description,\\\\\\\\n      state.amount,\\\\\\\\n      state.token,\\\\\\\\n      state.supervisor,\\\\\\\\n      state.seekingFunding\\\\\\\\n    ),\\\\\\\\n  };\\\\\\\\n\\\\\\\\n  if (state.postType === \\\\\\\\\\\\\\\"Solution\\\\\\\\\\\\\\\") {\\\\\\\\n    body = {\\\\\\\\n      ...body,\\\\\\\\n      post_type: \\\\\\\\\\\\\\\"Solution\\\\\\\\\\\\\\\",\\\\\\\\n      solution_version: \\\\\\\\\\\\\\\"V1\\\\\\\\\\\\\\\",\\\\\\\\n    };\\\\\\\\n  } else {\\\\\\\\n    // Idea\\\\\\\\n    body = {\\\\\\\\n      ...body,\\\\\\\\n      post_type: \\\\\\\\\\\\\\\"Idea\\\\\\\\\\\\\\\",\\\\\\\\n      idea_version: \\\\\\\\\\\\\\\"V1\\\\\\\\\\\\\\\",\\\\\\\\n    };\\\\\\\\n  }\\\\\\\\n\\\\\\\\n  if (!context.accountId) return;\\\\\\\\n\\\\\\\\n  let txn = [];\\\\\\\\n  if (mode == \\\\\\\\\\\\\\\"Create\\\\\\\\\\\\\\\") {\\\\\\\\n    txn.push({\\\\\\\\n      contractName: \\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\",\\\\\\\\n      methodName: \\\\\\\\\\\\\\\"add_post\\\\\\\\\\\\\\\",\\\\\\\\n      args: {\\\\\\\\n        parent_id: parentId,\\\\\\\\n        labels,\\\\\\\\n        body: body,\\\\\\\\n      },\\\\\\\\n      deposit: Big(10).pow(21).mul(3),\\\\\\\\n      gas: Big(10).pow(12).mul(100),\\\\\\\\n    });\\\\\\\\n  } else if (mode == \\\\\\\\\\\\\\\"Edit\\\\\\\\\\\\\\\") {\\\\\\\\n    txn.push({\\\\\\\\n      contractName: \\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\",\\\\\\\\n      methodName: \\\\\\\\\\\\\\\"edit_post\\\\\\\\\\\\\\\",\\\\\\\\n      args: {\\\\\\\\n        id: postId,\\\\\\\\n        labels,\\\\\\\\n        body: body,\\\\\\\\n      },\\\\\\\\n      deposit: Big(10).pow(21).mul(2),\\\\\\\\n      gas: Big(10).pow(12).mul(100),\\\\\\\\n    });\\\\\\\\n  }\\\\\\\\n  if (mode == \\\\\\\\\\\\\\\"Create\\\\\\\\\\\\\\\" || mode == \\\\\\\\\\\\\\\"Edit\\\\\\\\\\\\\\\") {\\\\\\\\n    if (grantNotify === false) {\\\\\\\\n      txn.unshift({\\\\\\\\n        contractName: \\\\\\\\\\\\\\\"social.near\\\\\\\\\\\\\\\",\\\\\\\\n        methodName: \\\\\\\\\\\\\\\"grant_write_permission\\\\\\\\\\\\\\\",\\\\\\\\n        args: {\\\\\\\\n          predecessor_id: \\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\",\\\\\\\\n          keys: [context.accountId + \\\\\\\\\\\\\\\"/index/notify\\\\\\\\\\\\\\\"],\\\\\\\\n        },\\\\\\\\n        deposit: Big(10).pow(23),\\\\\\\\n        gas: Big(10).pow(12).mul(30),\\\\\\\\n      });\\\\\\\\n    }\\\\\\\\n    Near.call(txn);\\\\\\\\n  }\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst onIdeaClick = () => {\\\\\\\\n  State.update({ postType: \\\\\\\\\\\\\\\"Idea\\\\\\\\\\\\\\\", seekingFunding: false });\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst onSolutionClick = () => {\\\\\\\\n  State.update({ postType: \\\\\\\\\\\\\\\"Solution\\\\\\\\\\\\\\\" });\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst normalizeLabel = (label) =>\\\\\\\\n  label\\\\\\\\n    .replaceAll(/[- \\\\\\\\\\\\\\\\.]/g, \\\\\\\\\\\\\\\"_\\\\\\\\\\\\\\\")\\\\\\\\n    .replaceAll(/[^\\\\\\\\\\\\\\\\w]+/g, \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\")\\\\\\\\n    .replaceAll(/_+/g, \\\\\\\\\\\\\\\"-\\\\\\\\\\\\\\\")\\\\\\\\n    .replace(/^-+/, \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\")\\\\\\\\n    .replace(/-+$/, \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\")\\\\\\\\n    .toLowerCase()\\\\\\\\n    .trim(\\\\\\\\\\\\\\\"-\\\\\\\\\\\\\\\");\\\\\\\\n\\\\\\\\nconst checkLabel = (label) => {\\\\\\\\n  Near.asyncView(\\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"is_allowed_to_use_labels\\\\\\\\\\\\\\\", {\\\\\\\\n    editor: context.accountId,\\\\\\\\n    labels: [label],\\\\\\\\n  }).then((allowed) => {\\\\\\\\n    if (allowed) {\\\\\\\\n      State.update({ warning: \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\" });\\\\\\\\n    } else {\\\\\\\\n      State.update({\\\\\\\\n        warning:\\\\\\\\n          \\\\\\\\\\\\'The label \\\\\\\\\\\\\\\"\\\\\\\\\\\\' +\\\\\\\\n          label +\\\\\\\\n          \\\\\\\\\\\\'\\\\\\\\\\\\\\\" is protected and can only be added by moderators\\\\\\\\\\\\',\\\\\\\\n      });\\\\\\\\n      return;\\\\\\\\n    }\\\\\\\\n  });\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst setLabels = (labels) => {\\\\\\\\n  labels = labels.map((o) => {\\\\\\\\n    o.name = normalizeLabel(o.name);\\\\\\\\n    return o;\\\\\\\\n  });\\\\\\\\n  if (labels.length < state.labels.length) {\\\\\\\\n    let oldLabels = new Set(state.labels.map((label) => label.name));\\\\\\\\n    for (let label of labels) {\\\\\\\\n      oldLabels.delete(label.name);\\\\\\\\n    }\\\\\\\\n    let removed = oldLabels.values().next().value;\\\\\\\\n    Near.asyncView(\\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"is_allowed_to_use_labels\\\\\\\\\\\\\\\", {\\\\\\\\n      editor: context.accountId,\\\\\\\\n      labels: [removed],\\\\\\\\n    }).then((allowed) => {\\\\\\\\n      if (allowed) {\\\\\\\\n        let labelStrings = labels.map(({ name }) => name);\\\\\\\\n        State.update({ labels, labelStrings });\\\\\\\\n      } else {\\\\\\\\n        State.update({\\\\\\\\n          warning:\\\\\\\\n            \\\\\\\\\\\\'The label \\\\\\\\\\\\\\\"\\\\\\\\\\\\' +\\\\\\\\n            removed +\\\\\\\\n            \\\\\\\\\\\\'\\\\\\\\\\\\\\\" is protected and can only be updated by moderators\\\\\\\\\\\\',\\\\\\\\n        });\\\\\\\\n        return;\\\\\\\\n      }\\\\\\\\n    });\\\\\\\\n  } else {\\\\\\\\n    let labelStrings = labels.map((o) => {\\\\\\\\n      return o.name;\\\\\\\\n    });\\\\\\\\n    State.update({ labels, labelStrings });\\\\\\\\n  }\\\\\\\\n};\\\\\\\\nconst existingLabelStrings =\\\\\\\\n  Near.view(\\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"get_all_allowed_labels\\\\\\\\\\\\\\\", {\\\\\\\\n    editor: context.accountId,\\\\\\\\n  }) ?? [];\\\\\\\\nconst existingLabelSet = new Set(existingLabelStrings);\\\\\\\\nconst existingLabels = existingLabelStrings\\\\\\\\n  .filter((it) => it !== \\\\\\\\\\\\\\\"blog\\\\\\\\\\\\\\\") // remove blog label so users cannot publish blogs from feed\\\\\\\\n  .map((s) => {\\\\\\\\n    return { name: s };\\\\\\\\n  });\\\\\\\\n\\\\\\\\nconst labelEditor = (\\\\\\\\n  <div className=\\\\\\\\\\\\\\\"col-lg-12 mb-2\\\\\\\\\\\\\\\">\\\\\\\\n    <p className=\\\\\\\\\\\\\\\"fs-6 fw-bold mb-1\\\\\\\\\\\\\\\">Labels</p>\\\\\\\\n    <Typeahead\\\\\\\\n      multiple\\\\\\\\n      labelKey=\\\\\\\\\\\\\\\"name\\\\\\\\\\\\\\\"\\\\\\\\n      onInputChange={checkLabel}\\\\\\\\n      onChange={setLabels}\\\\\\\\n      options={existingLabels}\\\\\\\\n      placeholder=\\\\\\\\\\\\\\\"near.social, widget, NEP, standard, protocol, tool\\\\\\\\\\\\\\\"\\\\\\\\n      selected={state.labels}\\\\\\\\n      positionFixed\\\\\\\\n      allowNew={(results, props) => {\\\\\\\\n        return (\\\\\\\\n          !existingLabelSet.has(props.text) &&\\\\\\\\n          props.text.toLowerCase() !== \\\\\\\\\\\\\\\"blog\\\\\\\\\\\\\\\" && // dont allow adding \\\\\\\\\\\\\\\"Blog\\\\\\\\\\\\\\\"\\\\\\\\n          props.selected.filter((selected) => selected.name === props.text)\\\\\\\\n            .length == 0 &&\\\\\\\\n          Near.view(\\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"is_allowed_to_use_labels\\\\\\\\\\\\\\\", {\\\\\\\\n            editor: context.accountId,\\\\\\\\n            labels: [props.text],\\\\\\\\n          })\\\\\\\\n        );\\\\\\\\n      }}\\\\\\\\n    />\\\\\\\\n  </div>\\\\\\\\n);\\\\\\\\n\\\\\\\\nconst nameDiv = (\\\\\\\\n  <div className=\\\\\\\\\\\\\\\"col-lg-6 mb-2\\\\\\\\\\\\\\\">\\\\\\\\n    <p className=\\\\\\\\\\\\\\\"fs-6 fw-bold mb-1\\\\\\\\\\\\\\\">Title</p>\\\\\\\\n    <input\\\\\\\\n      type=\\\\\\\\\\\\\\\"text\\\\\\\\\\\\\\\"\\\\\\\\n      value={state.name}\\\\\\\\n      onChange={(event) => State.update({ name: event.target.value })}\\\\\\\\n    />\\\\\\\\n  </div>\\\\\\\\n);\\\\\\\\n\\\\\\\\nconst descriptionDiv = (\\\\\\\\n  <div className=\\\\\\\\\\\\\\\"col-lg-12 mb-2\\\\\\\\\\\\\\\">\\\\\\\\n    <p className=\\\\\\\\\\\\\\\"fs-6 fw-bold mb-1\\\\\\\\\\\\\\\">Description</p>\\\\\\\\n    <Widget\\\\\\\\n      src=\\\\\\\\\\\\\\\"devhub.near/widget/devhub.components.molecule.MarkdownEditor\\\\\\\\\\\\\\\"\\\\\\\\n      props={{\\\\\\\\n        data: { handler: state.handler, content: state.description },\\\\\\\\n        onChange: (content) => {\\\\\\\\n          State.update({ description: content, handler: \\\\\\\\\\\\\\\"update\\\\\\\\\\\\\\\" });\\\\\\\\n          textareaInputHandler(content);\\\\\\\\n        },\\\\\\\\n      }}\\\\\\\\n    />\\\\\\\\n    {autocompleteEnabled && state.showAccountAutocomplete && (\\\\\\\\n      <AutoComplete>\\\\\\\\n        <Widget\\\\\\\\n          src=\\\\\\\\\\\\\\\"near/widget/AccountAutocomplete\\\\\\\\\\\\\\\"\\\\\\\\n          props={{\\\\\\\\n            term: state.text.split(\\\\\\\\\\\\\\\"@\\\\\\\\\\\\\\\").pop(),\\\\\\\\n            onSelect: autoCompleteAccountId,\\\\\\\\n            onClose: () => State.update({ showAccountAutocomplete: false }),\\\\\\\\n          }}\\\\\\\\n        />\\\\\\\\n      </AutoComplete>\\\\\\\\n    )}\\\\\\\\n  </div>\\\\\\\\n);\\\\\\\\n\\\\\\\\nconst isFundraisingDiv = (\\\\\\\\n  // This is jank with just btns and not radios. But the radios were glitchy af\\\\\\\\n  <>\\\\\\\\n    <div class=\\\\\\\\\\\\\\\"mb-2\\\\\\\\\\\\\\\">\\\\\\\\n      <p class=\\\\\\\\\\\\\\\"fs-6 fw-bold mb-1\\\\\\\\\\\\\\\">\\\\\\\\n        Are you seeking funding for your solution?\\\\\\\\n        <span class=\\\\\\\\\\\\\\\"text-muted fw-normal\\\\\\\\\\\\\\\">(Optional)</span>\\\\\\\\n      </p>\\\\\\\\n      <div class=\\\\\\\\\\\\\\\"form-check form-check-inline\\\\\\\\\\\\\\\">\\\\\\\\n        <label class=\\\\\\\\\\\\\\\"form-check-label\\\\\\\\\\\\\\\">\\\\\\\\n          <button\\\\\\\\n            className=\\\\\\\\\\\\\\\"btn btn-light p-0\\\\\\\\\\\\\\\"\\\\\\\\n            style={{\\\\\\\\n              backgroundColor: state.seekingFunding ? \\\\\\\\\\\\\\\"#0C7283\\\\\\\\\\\\\\\" : \\\\\\\\\\\\\\\"inherit\\\\\\\\\\\\\\\",\\\\\\\\n              color: \\\\\\\\\\\\\\\"#f3f3f3\\\\\\\\\\\\\\\",\\\\\\\\n              border: \\\\\\\\\\\\\\\"solid #D9D9D9\\\\\\\\\\\\\\\",\\\\\\\\n              borderRadius: \\\\\\\\\\\\\\\"100%\\\\\\\\\\\\\\\",\\\\\\\\n              height: \\\\\\\\\\\\\\\"20px\\\\\\\\\\\\\\\",\\\\\\\\n              width: \\\\\\\\\\\\\\\"20px\\\\\\\\\\\\\\\",\\\\\\\\n            }}\\\\\\\\n            onClick={() => State.update({ seekingFunding: true })}\\\\\\\\n          />\\\\\\\\n          Yes\\\\\\\\n        </label>\\\\\\\\n      </div>\\\\\\\\n      <div class=\\\\\\\\\\\\\\\"form-check form-check-inline\\\\\\\\\\\\\\\">\\\\\\\\n        <label class=\\\\\\\\\\\\\\\"form-check-label\\\\\\\\\\\\\\\">\\\\\\\\n          <button\\\\\\\\n            className=\\\\\\\\\\\\\\\"btn btn-light p-0\\\\\\\\\\\\\\\"\\\\\\\\n            style={{\\\\\\\\n              backgroundColor: !state.seekingFunding ? \\\\\\\\\\\\\\\"#0C7283\\\\\\\\\\\\\\\" : \\\\\\\\\\\\\\\"inherit\\\\\\\\\\\\\\\",\\\\\\\\n              color: \\\\\\\\\\\\\\\"#f3f3f3\\\\\\\\\\\\\\\",\\\\\\\\n              border: \\\\\\\\\\\\\\\"solid #D9D9D9\\\\\\\\\\\\\\\",\\\\\\\\n              borderRadius: \\\\\\\\\\\\\\\"100%\\\\\\\\\\\\\\\",\\\\\\\\n              height: \\\\\\\\\\\\\\\"20px\\\\\\\\\\\\\\\",\\\\\\\\n              width: \\\\\\\\\\\\\\\"20px\\\\\\\\\\\\\\\",\\\\\\\\n            }}\\\\\\\\n            onClick={() => State.update({ seekingFunding: false })}\\\\\\\\n          />\\\\\\\\n          No\\\\\\\\n        </label>\\\\\\\\n      </div>\\\\\\\\n    </div>\\\\\\\\n  </>\\\\\\\\n);\\\\\\\\n\\\\\\\\nconst fundraisingDiv = (\\\\\\\\n  <div class=\\\\\\\\\\\\\\\"d-flex flex-column mb-2\\\\\\\\\\\\\\\">\\\\\\\\n    <div className=\\\\\\\\\\\\\\\"col-lg-6  mb-2\\\\\\\\\\\\\\\">\\\\\\\\n      Currency\\\\\\\\n      <select\\\\\\\\n        onChange={(event) => State.update({ token: event.target.value })}\\\\\\\\n        class=\\\\\\\\\\\\\\\"form-select\\\\\\\\\\\\\\\"\\\\\\\\n        aria-label=\\\\\\\\\\\\\\\"Default select\\\\\\\\\\\\\\\"\\\\\\\\n      >\\\\\\\\n        <option selected value=\\\\\\\\\\\\\\\"USDT\\\\\\\\\\\\\\\">\\\\\\\\n          USDT\\\\\\\\n        </option>\\\\\\\\n        <option value=\\\\\\\\\\\\\\\"NEAR\\\\\\\\\\\\\\\">NEAR</option>\\\\\\\\n        <option value=\\\\\\\\\\\\\\\"USDC\\\\\\\\\\\\\\\">USDC</option>\\\\\\\\n      </select>\\\\\\\\n    </div>\\\\\\\\n    <div className=\\\\\\\\\\\\\\\"col-lg-6 mb-2\\\\\\\\\\\\\\\">\\\\\\\\n      Requested amount <span class=\\\\\\\\\\\\\\\"text-muted fw-normal\\\\\\\\\\\\\\\">(Numbers Only)</span>\\\\\\\\n      <input\\\\\\\\n        type=\\\\\\\\\\\\\\\"number\\\\\\\\\\\\\\\"\\\\\\\\n        value={parseInt(state.amount) > 0 ? state.amount : \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\"}\\\\\\\\n        min={0}\\\\\\\\n        onChange={(event) =>\\\\\\\\n          State.update({\\\\\\\\n            amount: Number(\\\\\\\\n              event.target.value.toString().replace(/e/g, \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\")\\\\\\\\n            ).toString(),\\\\\\\\n          })\\\\\\\\n        }\\\\\\\\n      />\\\\\\\\n    </div>\\\\\\\\n    <div className=\\\\\\\\\\\\\\\"col-lg-6 mb-2\\\\\\\\\\\\\\\">\\\\\\\\n      <p class=\\\\\\\\\\\\\\\"mb-1\\\\\\\\\\\\\\\">\\\\\\\\n        Requested sponsor <span class=\\\\\\\\\\\\\\\"text-muted fw-normal\\\\\\\\\\\\\\\">(Optional)</span>\\\\\\\\n      </p>\\\\\\\\n      <p style={{ fontSize: \\\\\\\\\\\\\\\"13px\\\\\\\\\\\\\\\" }} class=\\\\\\\\\\\\\\\"m-0 text-muted fw-light\\\\\\\\\\\\\\\">\\\\\\\\n        If you are requesting funding from a specific sponsor, please enter\\\\\\\\n        their username.\\\\\\\\n      </p>\\\\\\\\n      <div class=\\\\\\\\\\\\\\\"input-group flex-nowrap\\\\\\\\\\\\\\\">\\\\\\\\n        <span class=\\\\\\\\\\\\\\\"input-group-text\\\\\\\\\\\\\\\" id=\\\\\\\\\\\\\\\"addon-wrapping\\\\\\\\\\\\\\\">\\\\\\\\n          @\\\\\\\\n        </span>\\\\\\\\n        <input\\\\\\\\n          type=\\\\\\\\\\\\\\\"text\\\\\\\\\\\\\\\"\\\\\\\\n          class=\\\\\\\\\\\\\\\"form-control\\\\\\\\\\\\\\\"\\\\\\\\n          placeholder=\\\\\\\\\\\\\\\"Enter username\\\\\\\\\\\\\\\"\\\\\\\\n          value={state.supervisor}\\\\\\\\n          onChange={(event) => State.update({ supervisor: event.target.value })}\\\\\\\\n        />\\\\\\\\n      </div>\\\\\\\\n    </div>\\\\\\\\n  </div>\\\\\\\\n);\\\\\\\\n\\\\\\\\nfunction generateDescription(text, amount, token, supervisor, seekingFunding) {\\\\\\\\n  const fundingText =\\\\\\\\n    amount > 0 && token ? `###### Requested amount: ${amount} ${token}\\\\\\\\\\\\\\\\n` : \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\";\\\\\\\\n  const supervisorText = supervisor\\\\\\\\n    ? `###### Requested sponsor: @${supervisor}\\\\\\\\\\\\\\\\n`\\\\\\\\n    : \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\";\\\\\\\\n  return seekingFunding ? `${fundingText}${supervisorText}${text}` : text;\\\\\\\\n}\\\\\\\\n\\\\\\\\nreturn (\\\\\\\\n  <div class=\\\\\\\\\\\\\\\"bg-light d-flex flex-column flex-grow-1 w-100\\\\\\\\\\\\\\\">\\\\\\\\n    <div class=\\\\\\\\\\\\\\\"mx-5 mb-5\\\\\\\\\\\\\\\">\\\\\\\\n      <div aria-label=\\\\\\\\\\\\\\\"breadcrumb\\\\\\\\\\\\\\\">\\\\\\\\n        <ol class=\\\\\\\\\\\\\\\"breadcrumb\\\\\\\\\\\\\\\">\\\\\\\\n          <li class=\\\\\\\\\\\\\\\"breadcrumb-item\\\\\\\\\\\\\\\">\\\\\\\\n            <Link\\\\\\\\n              style={{\\\\\\\\n                color: \\\\\\\\\\\\\\\"#3252A6\\\\\\\\\\\\\\\",\\\\\\\\n              }}\\\\\\\\n              className=\\\\\\\\\\\\\\\"fw-bold\\\\\\\\\\\\\\\"\\\\\\\\n              to={href({\\\\\\\\n                widgetSrc: \\\\\\\\\\\\\\\"devhub.near/widget/app\\\\\\\\\\\\\\\",\\\\\\\\n                params: { page: \\\\\\\\\\\\\\\"feed\\\\\\\\\\\\\\\" },\\\\\\\\n              })}\\\\\\\\n            >\\\\\\\\n              DevHub\\\\\\\\n            </Link>\\\\\\\\n          </li>\\\\\\\\n          <li class=\\\\\\\\\\\\\\\"breadcrumb-item active\\\\\\\\\\\\\\\" aria-current=\\\\\\\\\\\\\\\"page\\\\\\\\\\\\\\\">\\\\\\\\n            Create new\\\\\\\\n          </li>\\\\\\\\n        </ol>\\\\\\\\n      </div>\\\\\\\\n      {props.transactionHashes ? (\\\\\\\\n        <>\\\\\\\\n          Post created successfully. Back to{\\\\\\\\\\\\\\\" \\\\\\\\\\\\\\\"}\\\\\\\\n          <Link\\\\\\\\n            style={{\\\\\\\\n              color: \\\\\\\\\\\\\\\"#3252A6\\\\\\\\\\\\\\\",\\\\\\\\n            }}\\\\\\\\n            className=\\\\\\\\\\\\\\\"fw-bold\\\\\\\\\\\\\\\"\\\\\\\\n            to={href({\\\\\\\\n              widgetSrc: \\\\\\\\\\\\\\\"devhub.near/widget/app\\\\\\\\\\\\\\\",\\\\\\\\n              params: { page: \\\\\\\\\\\\\\\"feed\\\\\\\\\\\\\\\" },\\\\\\\\n            })}\\\\\\\\n          >\\\\\\\\n            feed\\\\\\\\n          </Link>\\\\\\\\n        </>\\\\\\\\n      ) : (\\\\\\\\n        <>\\\\\\\\n          <h4>Create a new post</h4>\\\\\\\\n          <p>{state.seekingFunding}</p>\\\\\\\\n          <div class=\\\\\\\\\\\\\\\"card border-light\\\\\\\\\\\\\\\">\\\\\\\\n            <div class=\\\\\\\\\\\\\\\"card-body\\\\\\\\\\\\\\\">\\\\\\\\n              <p class=\\\\\\\\\\\\\\\"card-title fw-bold fs-6\\\\\\\\\\\\\\\">What do you want to create?</p>\\\\\\\\n              <div class=\\\\\\\\\\\\\\\"d-flex flex-row gap-2\\\\\\\\\\\\\\\">\\\\\\\\n                <button\\\\\\\\n                  onClick={onIdeaClick}\\\\\\\\n                  type=\\\\\\\\\\\\\\\"button\\\\\\\\\\\\\\\"\\\\\\\\n                  class={`btn btn-outline-secondary`}\\\\\\\\n                  style={\\\\\\\\n                    state.postType === \\\\\\\\\\\\\\\"Idea\\\\\\\\\\\\\\\"\\\\\\\\n                      ? {\\\\\\\\n                          backgroundColor: \\\\\\\\\\\\\\\"#0C7283\\\\\\\\\\\\\\\",\\\\\\\\n                          color: \\\\\\\\\\\\\\\"#f3f3f3\\\\\\\\\\\\\\\",\\\\\\\\n                        }\\\\\\\\n                      : {}\\\\\\\\n                  }\\\\\\\\n                >\\\\\\\\n                  <i class=\\\\\\\\\\\\\\\"bi bi-lightbulb\\\\\\\\\\\\\\\"></i>\\\\\\\\n                  Idea\\\\\\\\n                </button>\\\\\\\\n                <button\\\\\\\\n                  onClick={onSolutionClick}\\\\\\\\n                  type=\\\\\\\\\\\\\\\"button\\\\\\\\\\\\\\\"\\\\\\\\n                  class={`btn btn-outline-secondary`}\\\\\\\\n                  style={\\\\\\\\n                    state.postType !== \\\\\\\\\\\\\\\"Idea\\\\\\\\\\\\\\\"\\\\\\\\n                      ? {\\\\\\\\n                          backgroundColor: \\\\\\\\\\\\\\\"#0C7283\\\\\\\\\\\\\\\",\\\\\\\\n                          color: \\\\\\\\\\\\\\\"#f3f3f3\\\\\\\\\\\\\\\",\\\\\\\\n                        }\\\\\\\\n                      : {}\\\\\\\\n                  }\\\\\\\\n                >\\\\\\\\n                  <i class=\\\\\\\\\\\\\\\"bi bi-rocket\\\\\\\\\\\\\\\"></i>\\\\\\\\n                  Solution\\\\\\\\n                </button>\\\\\\\\n              </div>\\\\\\\\n              <p class=\\\\\\\\\\\\\\\"text-muted w-75 my-1\\\\\\\\\\\\\\\">\\\\\\\\n                {state.postType === \\\\\\\\\\\\\\\"Idea\\\\\\\\\\\\\\\"\\\\\\\\n                  ? \\\\\\\\\\\\\\\"Get feedback from the community about a problem, opportunity, or need.\\\\\\\\\\\\\\\"\\\\\\\\n                  : \\\\\\\\\\\\\\\"Provide a specific proposal or implementation to an idea, optionally requesting funding. If your solution relates to an existing idea, please reply to the original post with a solution.\\\\\\\\\\\\\\\"}\\\\\\\\n              </p>\\\\\\\\n              {state.warning && (\\\\\\\\n                <div\\\\\\\\n                  class=\\\\\\\\\\\\\\\"alert alert-warning alert-dismissible fade show\\\\\\\\\\\\\\\"\\\\\\\\n                  role=\\\\\\\\\\\\\\\"alert\\\\\\\\\\\\\\\"\\\\\\\\n                >\\\\\\\\n                  {state.warning}\\\\\\\\n                  <button\\\\\\\\n                    type=\\\\\\\\\\\\\\\"button\\\\\\\\\\\\\\\"\\\\\\\\n                    class=\\\\\\\\\\\\\\\"btn-close\\\\\\\\\\\\\\\"\\\\\\\\n                    data-bs-dismiss=\\\\\\\\\\\\\\\"alert\\\\\\\\\\\\\\\"\\\\\\\\n                    aria-label=\\\\\\\\\\\\\\\"Close\\\\\\\\\\\\\\\"\\\\\\\\n                    onClick={() => State.update({ warning: \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\" })}\\\\\\\\n                  ></button>\\\\\\\\n                </div>\\\\\\\\n              )}\\\\\\\\n              <div className=\\\\\\\\\\\\\\\"row\\\\\\\\\\\\\\\">\\\\\\\\n                {nameDiv}\\\\\\\\n                {descriptionDiv}\\\\\\\\n                {labelEditor}\\\\\\\\n                {state.postType === \\\\\\\\\\\\\\\"Solution\\\\\\\\\\\\\\\" && isFundraisingDiv}\\\\\\\\n                {state.seekingFunding && fundraisingDiv}\\\\\\\\n              </div>\\\\\\\\n              <button\\\\\\\\n                style={{\\\\\\\\n                  width: \\\\\\\\\\\\\\\"7rem\\\\\\\\\\\\\\\",\\\\\\\\n                  backgroundColor: \\\\\\\\\\\\\\\"#0C7283\\\\\\\\\\\\\\\",\\\\\\\\n                  color: \\\\\\\\\\\\\\\"#f3f3f3\\\\\\\\\\\\\\\",\\\\\\\\n                }}\\\\\\\\n                disabled={\\\\\\\\n                  state.seekingFunding && (!state.amount || state.amount < 1)\\\\\\\\n                }\\\\\\\\n                className=\\\\\\\\\\\\\\\"btn btn-light mb-2 p-3\\\\\\\\\\\\\\\"\\\\\\\\n                onClick={onSubmit}\\\\\\\\n              >\\\\\\\\n                Submit\\\\\\\\n              </button>\\\\\\\\n            </div>\\\\\\\\n            <div class=\\\\\\\\\\\\\\\"bg-light d-flex flex-row p-1 border-bottom\\\\\\\\\\\\\\\"></div>\\\\\\\\n            <div class=\\\\\\\\\\\\\\\"card-body\\\\\\\\\\\\\\\">\\\\\\\\n              <p class=\\\\\\\\\\\\\\\"text-muted m-0\\\\\\\\\\\\\\\">Preview</p>\\\\\\\\n              <div>\\\\\\\\n                <Widget\\\\\\\\n                  src=\\\\\\\\\\\\\\\"devhub.near/widget/devhub.entity.post.Post\\\\\\\\\\\\\\\"\\\\\\\\n                  props={{\\\\\\\\n                    isPreview: true,\\\\\\\\n                    id: 0, // irrelevant\\\\\\\\n                    post: {\\\\\\\\n                      author_id: state.author_id,\\\\\\\\n                      likes: [],\\\\\\\\n                      snapshot: {\\\\\\\\n                        editor_id: state.editor_id,\\\\\\\\n                        labels: state.labelStrings,\\\\\\\\n                        post_type: state.postType,\\\\\\\\n                        name: state.name,\\\\\\\\n                        description: generateDescription(\\\\\\\\n                          state.description,\\\\\\\\n                          state.amount,\\\\\\\\n                          state.token,\\\\\\\\n                          state.supervisor,\\\\\\\\n                          state.seekingFunding\\\\\\\\n                        ),\\\\\\\\n                        github_link: state.githubLink,\\\\\\\\n                      },\\\\\\\\n                    },\\\\\\\\n                  }}\\\\\\\\n                />\\\\\\\\n              </div>\\\\\\\\n            </div>\\\\\\\\n          </div>\\\\\\\\n        </>\\\\\\\\n      )}\\\\\\\\n    </div>\\\\\\\\n  </div>\\\\\\\\n);\\\\\\\\n\"}}}}}"
      }
    ],
    "actions_agg": {
      "deposit": 0
    },
    "outcomes": {
      "status": true
    },
    "outcomes_agg": {
      "transaction_fee": 1.0693251239607e+21
    }
  },
  {
    "id": "1421151683",
    "receipt_id": "2w9XhRWxS1GFKnVPNzUJ1yGaWDupQfxPgzCaBKfBotLM",
    "predecessor_account_id": "system",
    "receiver_account_id": "devhub.near",
    "receipt_kind": "ACTION",
    "receipt_block": {
      "block_hash": "6AcvVxY9bncEzu7yZC5zytL8pJwmAZwGBmkdwupURhku",
      "block_height": 105789943,
      "block_timestamp": 1700096917037407000
    },
    "receipt_outcome": {
      "gas_burnt": 223182562500,
      "tokens_burnt": 0,
      "executor_account_id": "devhub.near",
      "status": true
    },
    "transaction_hash": "G3czMMUEBVmp4749y67VoansYVnRBoGd9ZScGN81sExb",
    "included_in_block_hash": "FHTzsciCBuDDqJazTGKBmDEZJ5nzGv1E5RyBWYK5yLZe",
    "block_timestamp": "1700096915127449115",
    "block": {
      "block_height": 105789941
    },
    "receipt_conversion_tokens_burnt": "246932155394400000000",
    "actions": [
      {
        "action": "TRANSFER",
        "method": null,
        "deposit": 1.882330844051728e+23,
        "fee": 0,
        "args": null
      }
    ],
    "actions_agg": {
      "deposit": 0
    },
    "outcomes": {
      "status": true
    },
    "outcomes_agg": {
      "transaction_fee": 1.0693251239607e+21
    }
  },
  {
    "id": "1421605823",
    "receipt_id": "Aqbhk2PDdb4NR5wWAgWmY1gq991t7maofE2YoYHpTtrz",
    "predecessor_account_id": "devhub.near",
    "receiver_account_id": "social.near",
    "receipt_kind": "ACTION",
    "receipt_block": {
      "block_hash": "41NnBBqT7QCfJunwR8jeLALAzwKRVRWrdHr8fBmvhnJE",
      "block_height": 105793756,
      "block_timestamp": 1700101143471961600
    },
    "receipt_outcome": {
      "gas_burnt": 10134472534321,
      "tokens_burnt": 1.0134472534321e+21,
      "executor_account_id": "social.near",
      "status": true
    },
    "transaction_hash": "EYXwTsYq4BiiEDS5XJnDPPfYqNCwDaYjGr2Huv5HGizW",
    "included_in_block_hash": "8yG6cCkJyH7hMF5bfKE2HvaKi291uzomTPmZbsCaeLiY",
    "block_timestamp": "1700101142190222859",
    "block": {
      "block_height": 105793755
    },
    "receipt_conversion_tokens_burnt": "247045070061400000000",
    "actions": [
      {
        "action": "FUNCTION_CALL",
        "method": "set",
        "deposit": 0,
        "fee": 1.0134472534321e+21,
        "args": "{\"data\": {\"devhub.near\": {\"widget\": {\"devhub.entity.post.List\": {\"\": \"// This component implementation was forked from [IndexFeed], but it does not fully implement lazy loading.\\\\\\\\n// While this component uses InfiniteScroll, it still loads the whole list of Post IDs in one view call.\\\\\\\\n// The contract will need to be extended with pagination support, yet, even in the current state the page loads much faster.\\\\\\\\n// [IndexFeed]: https://near.social/#/mob.near/widget/WidgetSource?src=mob.near/widget/IndexFeed\\\\\\\\n\\\\\\\\nconst { href } = VM.require(\\\\\\\\\\\\\\\"devhub.near/widget/core.lib.url\\\\\\\\\\\\\\\");\\\\\\\\n\\\\\\\\nconst { draftState, onDraftStateChange } = VM.require(\\\\\\\\n  \\\\\\\\\\\\\\\"devhub.near/widget/devhub.entity.post.draft\\\\\\\\\\\\\\\"\\\\\\\\n);\\\\\\\\n\\\\\\\\nif (!href) {\\\\\\\\n  return <p>Loading modules...</p>;\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst QUERYAPI_ENDPOINT = `https://near-queryapi.api.pagoda.co/v1/graphql/`;\\\\\\\\n\\\\\\\\nconst queryName =\\\\\\\\n  props.queryName ?? `bo_near_devhub_v36_posts_with_latest_snapshot`;\\\\\\\\n\\\\\\\\nconst query = `query DevhubPostsQuery($limit: Int = 100, $offset: Int = 0, $where: ${queryName}_bool_exp = {}) {\\\\\\\\n    ${queryName}(\\\\\\\\n      limit: $limit\\\\\\\\n      offset: $offset\\\\\\\\n      order_by: {block_height: desc}\\\\\\\\n      where: $where\\\\\\\\n    ) {\\\\\\\\n      post_id\\\\\\\\n    }\\\\\\\\n  }\\\\\\\\n`;\\\\\\\\n\\\\\\\\nfunction fetchGraphQL(operationsDoc, operationName, variables) {\\\\\\\\n  return asyncFetch(QUERYAPI_ENDPOINT, {\\\\\\\\n    method: \\\\\\\\\\\\\\\"POST\\\\\\\\\\\\\\\",\\\\\\\\n    headers: { \\\\\\\\\\\\\\\"x-hasura-role\\\\\\\\\\\\\\\": `bo_near` },\\\\\\\\n    body: JSON.stringify({\\\\\\\\n      query: operationsDoc,\\\\\\\\n      variables: variables,\\\\\\\\n      operationName: operationName,\\\\\\\\n    }),\\\\\\\\n  });\\\\\\\\n}\\\\\\\\n\\\\\\\\nfunction searchConditionChanged() {\\\\\\\\n  return (\\\\\\\\n    props.author != state.author ||\\\\\\\\n    props.term != state.term ||\\\\\\\\n    props.tag != state.tag ||\\\\\\\\n    props.recency != state.recency\\\\\\\\n  );\\\\\\\\n}\\\\\\\\n\\\\\\\\nfunction updateSearchCondition() {\\\\\\\\n  State.update({\\\\\\\\n    author: props.author,\\\\\\\\n    term: props.term,\\\\\\\\n    tag: props.tag,\\\\\\\\n    recency: props.recency,\\\\\\\\n    loading: true,\\\\\\\\n  });\\\\\\\\n}\\\\\\\\n\\\\\\\\nfunction getPostIds() {\\\\\\\\n  if (searchConditionChanged()) {\\\\\\\\n    updateSearchCondition();\\\\\\\\n    return;\\\\\\\\n  }\\\\\\\\n  let where = {};\\\\\\\\n  let authorId = props.author;\\\\\\\\n  let label = props.tag;\\\\\\\\n  if (authorId) {\\\\\\\\n    where = { author_id: { _eq: authorId }, ...where };\\\\\\\\n  }\\\\\\\\n  if (props.term) {\\\\\\\\n    where = { description: { _ilike: `%${props.term}%` }, ...where };\\\\\\\\n  }\\\\\\\\n  if (label) {\\\\\\\\n    if (typeof label === \\\\\\\\\\\\\\\"string\\\\\\\\\\\\\\\") {\\\\\\\\n      // Handle a single label\\\\\\\\n      where = { labels: { _contains: label }, ...where };\\\\\\\\n    } else if (Array.isArray(label)) {\\\\\\\\n      // Handle an array of labels\\\\\\\\n      where = {\\\\\\\\n        labels: {\\\\\\\\n          _containsAny: label,\\\\\\\\n        },\\\\\\\\n        ...where,\\\\\\\\n      };\\\\\\\\n    }\\\\\\\\n  }\\\\\\\\n  if (!props.recency) {\\\\\\\\n    // show only top level posts\\\\\\\\n    where = { parent_id: { _is_null: true }, ...where };\\\\\\\\n  }\\\\\\\\n\\\\\\\\n  // Don\\\\\\\\\\\\'t show blog\\\\\\\\n  where = {\\\\\\\\n    _not: {\\\\\\\\n      labels: { _contains: \\\\\\\\\\\\\\\"blog\\\\\\\\\\\\\\\" },\\\\\\\\n      parent_id: { _is_null: true },\\\\\\\\n      post_type: { _eq: \\\\\\\\\\\\\\\"Comment\\\\\\\\\\\\\\\" },\\\\\\\\n    },\\\\\\\\n    ...where,\\\\\\\\n  };\\\\\\\\n\\\\\\\\n  console.log(\\\\\\\\\\\\\\\"searching for\\\\\\\\\\\\\\\", where);\\\\\\\\n  fetchGraphQL(query, \\\\\\\\\\\\\\\"DevhubPostsQuery\\\\\\\\\\\\\\\", {\\\\\\\\n    limit: 100,\\\\\\\\n    offset: 0,\\\\\\\\n    where,\\\\\\\\n  }).then((result) => {\\\\\\\\n    if (result.status === 200) {\\\\\\\\n      console.log(\\\\\\\\\\\\\\\"search success\\\\\\\\\\\\\\\");\\\\\\\\n      if (result.body.data) {\\\\\\\\n        const data = result.body.data[queryName];\\\\\\\\n        State.update({\\\\\\\\n          postIds: data.map((p) => p.post_id),\\\\\\\\n          loading: false,\\\\\\\\n        });\\\\\\\\n        console.log(\\\\\\\\\\\\\\\"found:\\\\\\\\\\\\\\\");\\\\\\\\n        console.log(data);\\\\\\\\n      }\\\\\\\\n    } else {\\\\\\\\n      console.error(\\\\\\\\\\\\\\\"error:\\\\\\\\\\\\\\\", result.body);\\\\\\\\n      State.update({ loading: false });\\\\\\\\n    }\\\\\\\\n  });\\\\\\\\n}\\\\\\\\n\\\\\\\\nState.init({\\\\\\\\n  period: \\\\\\\\\\\\\\\"week\\\\\\\\\\\\\\\",\\\\\\\\n});\\\\\\\\n\\\\\\\\ngetPostIds();\\\\\\\\n\\\\\\\\nfunction defaultRenderItem(postId, additionalProps) {\\\\\\\\n  if (!additionalProps) {\\\\\\\\n    additionalProps = {};\\\\\\\\n  }\\\\\\\\n  // It is important to have a non-zero-height element as otherwise InfiniteScroll loads too many items on initial load\\\\\\\\n  return (\\\\\\\\n    <div className=\\\\\\\\\\\\\\\"py-2\\\\\\\\\\\\\\\" style={{ minHeight: \\\\\\\\\\\\\\\"150px\\\\\\\\\\\\\\\" }}>\\\\\\\\n      <Widget\\\\\\\\n        src={\\\\\\\\\\\\\\\"devhub.near/widget/devhub.entity.post.Post\\\\\\\\\\\\\\\"}\\\\\\\\n        props={{\\\\\\\\n          id: postId,\\\\\\\\n          expandable: true,\\\\\\\\n          defaultExpanded: false,\\\\\\\\n          isInList: true,\\\\\\\\n          draftState,\\\\\\\\n          isPreview: false,\\\\\\\\n          onDraftStateChange,\\\\\\\\n          ...additionalProps,\\\\\\\\n          referral: postId,\\\\\\\\n        }}\\\\\\\\n      />\\\\\\\\n    </div>\\\\\\\\n  );\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst renderItem = props.renderItem ?? defaultRenderItem;\\\\\\\\n\\\\\\\\nconst cachedRenderItem = (item, i) => {\\\\\\\\n  if (props.term) {\\\\\\\\n    return renderItem(item, {\\\\\\\\n      searchKeywords: [props.term],\\\\\\\\n    });\\\\\\\\n  }\\\\\\\\n\\\\\\\\n  const key = JSON.stringify(item);\\\\\\\\n\\\\\\\\n  if (!(key in state.cachedItems)) {\\\\\\\\n    state.cachedItems[key] = renderItem(item);\\\\\\\\n    State.update();\\\\\\\\n  }\\\\\\\\n  return state.cachedItems[key];\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst initialRenderLimit = props.initialRenderLimit ?? 3;\\\\\\\\nconst addDisplayCount = props.nextLimit ?? initialRenderLimit;\\\\\\\\n\\\\\\\\nconst ONE_DAY = 60 * 60 * 24 * 1000;\\\\\\\\nconst ONE_WEEK = 60 * 60 * 24 * 1000 * 7;\\\\\\\\nconst ONE_MONTH = 60 * 60 * 24 * 1000 * 30;\\\\\\\\n\\\\\\\\nfunction getHotnessScore(post) {\\\\\\\\n  //post.id - shows the age of the post, should grow exponentially, since newer posts are more important\\\\\\\\n  //post.likes.length - linear value\\\\\\\\n  const age = Math.pow(post.id, 5);\\\\\\\\n  const comments = post.comments;\\\\\\\\n  const commentAge = comments.reduce((sum, age) => sum + Math.pow(age, 5), 0);\\\\\\\\n  const totalAge = age + commentAge;\\\\\\\\n  //use log functions to make likes score and exponentially big age score close to each other\\\\\\\\n  return Math.log10(post.likes.length) + Math.log(Math.log10(totalAge));\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst getPeriodText = (period) => {\\\\\\\\n  let text = \\\\\\\\\\\\\\\"Last 24 hours\\\\\\\\\\\\\\\";\\\\\\\\n  if (period === \\\\\\\\\\\\\\\"week\\\\\\\\\\\\\\\") {\\\\\\\\n    text = \\\\\\\\\\\\\\\"Last week\\\\\\\\\\\\\\\";\\\\\\\\n  }\\\\\\\\n  if (period === \\\\\\\\\\\\\\\"month\\\\\\\\\\\\\\\") {\\\\\\\\n    text = \\\\\\\\\\\\\\\"Last month\\\\\\\\\\\\\\\";\\\\\\\\n  }\\\\\\\\n  return text;\\\\\\\\n};\\\\\\\\n\\\\\\\\nlet postIds = state.postIds ?? null;\\\\\\\\n\\\\\\\\nconst loader = (\\\\\\\\n  <div className=\\\\\\\\\\\\\\\"loader\\\\\\\\\\\\\\\" key={\\\\\\\\\\\\\\\"loader\\\\\\\\\\\\\\\"}>\\\\\\\\n    <span\\\\\\\\n      className=\\\\\\\\\\\\\\\"spinner-grow spinner-grow-sm me-1\\\\\\\\\\\\\\\"\\\\\\\\n      role=\\\\\\\\\\\\\\\"status\\\\\\\\\\\\\\\"\\\\\\\\n      aria-hidden=\\\\\\\\\\\\\\\"true\\\\\\\\\\\\\\\"\\\\\\\\n    />\\\\\\\\n    Loading ...\\\\\\\\n  </div>\\\\\\\\n);\\\\\\\\n\\\\\\\\nif (postIds === null) {\\\\\\\\n  return loader;\\\\\\\\n}\\\\\\\\nconst initialItems = postIds;\\\\\\\\n//const initialItems = postIds.map(postId => ({ id: postId, ...Near.view(nearDevGovGigsContractAccountId, \\\\\\\\\\\\\\\"get_post\\\\\\\\\\\\\\\", { post_id: postId }) }));\\\\\\\\n\\\\\\\\n// const computeFetchFrom = (items, limit) => {\\\\\\\\n//   if (!items || items.length < limit) {\\\\\\\\n//     return false;\\\\\\\\n//   }\\\\\\\\n//   const blockHeight = items[items.length - 1].blockHeight;\\\\\\\\n//   return index.options.order === \\\\\\\\\\\\\\\"desc\\\\\\\\\\\\\\\" ? blockHeight - 1 : blockHeight + 1;\\\\\\\\n// };\\\\\\\\n\\\\\\\\n// const mergeItems = (newItems) => {\\\\\\\\n//   const items = [\\\\\\\\n//     ...new Set([...newItems, ...state.items].map((i) => JSON.stringify(i))),\\\\\\\\n//   ].map((i) => JSON.parse(i));\\\\\\\\n//   items.sort((a, b) => a.blockHeight - b.blockHeight);\\\\\\\\n//   if (index.options.order === \\\\\\\\\\\\\\\"desc\\\\\\\\\\\\\\\") {\\\\\\\\n//     items.reverse();\\\\\\\\n//   }\\\\\\\\n//   return items;\\\\\\\\n// };\\\\\\\\n\\\\\\\\nconst jInitialItems = JSON.stringify(initialItems);\\\\\\\\nif (state.jInitialItems !== jInitialItems) {\\\\\\\\n  // const jIndex = JSON.stringify(index);\\\\\\\\n  // if (jIndex !== state.jIndex) {\\\\\\\\n  State.update({\\\\\\\\n    jIndex,\\\\\\\\n    jInitialItems,\\\\\\\\n    items: initialItems,\\\\\\\\n    fetchFrom: false,\\\\\\\\n    //nextFetchFrom: computeFetchFrom(initialItems, index.options.limit),\\\\\\\\n    nextFetchFrom: false,\\\\\\\\n    displayCount: initialRenderLimit,\\\\\\\\n    cachedItems: {},\\\\\\\\n  });\\\\\\\\n  // } else {\\\\\\\\n  //   State.update({\\\\\\\\n  //     jInitialItems,\\\\\\\\n  //     items: mergeItems(initialItems),\\\\\\\\n  //   });\\\\\\\\n  // }\\\\\\\\n}\\\\\\\\n\\\\\\\\nif (state.fetchFrom) {\\\\\\\\n  // TODO: fetchFrom\\\\\\\\n  // const limit = addDisplayCount;\\\\\\\\n  // const newItems = Social.index(\\\\\\\\n  //   index.action,\\\\\\\\n  //   index.key,\\\\\\\\n  //   Object.assign({}, index.options, {\\\\\\\\n  //     from: state.fetchFrom,\\\\\\\\n  //     subscribe: undefined,\\\\\\\\n  //     limit,\\\\\\\\n  //   })\\\\\\\\n  // );\\\\\\\\n  // if (newItems !== null) {\\\\\\\\n  //   State.update({\\\\\\\\n  //     items: mergeItems(newItems),\\\\\\\\n  //     fetchFrom: false,\\\\\\\\n  //     nextFetchFrom: computeFetchFrom(newItems, limit),\\\\\\\\n  //   });\\\\\\\\n  // }\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst makeMoreItems = () => {\\\\\\\\n  State.update({\\\\\\\\n    displayCount: state.displayCount + addDisplayCount,\\\\\\\\n  });\\\\\\\\n  if (\\\\\\\\n    state.items.length - state.displayCount < addDisplayCount * 2 &&\\\\\\\\n    !state.fetchFrom &&\\\\\\\\n    state.nextFetchFrom &&\\\\\\\\n    state.nextFetchFrom !== state.fetchFrom\\\\\\\\n  ) {\\\\\\\\n    State.update({\\\\\\\\n      fetchFrom: state.nextFetchFrom,\\\\\\\\n    });\\\\\\\\n  }\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst fetchMore =\\\\\\\\n  props.manual &&\\\\\\\\n  (state.fetchFrom && state.items.length < state.displayCount\\\\\\\\n    ? loader\\\\\\\\n    : state.displayCount < state.items.length && (\\\\\\\\n        <div key={\\\\\\\\\\\\\\\"loader more\\\\\\\\\\\\\\\"}>\\\\\\\\n          <a href=\\\\\\\\\\\\\\\"javascript:void\\\\\\\\\\\\\\\" onClick={(e) => makeMoreItems()}>\\\\\\\\n            {props.loadMoreText ?? \\\\\\\\\\\\\\\"Load more...\\\\\\\\\\\\\\\"}\\\\\\\\n          </a>\\\\\\\\n        </div>\\\\\\\\n      ));\\\\\\\\n\\\\\\\\nconst items = state.items ? state.items.slice(0, state.displayCount) : [];\\\\\\\\n\\\\\\\\nconst renderedItems = items.map(cachedRenderItem);\\\\\\\\n\\\\\\\\nconst Head =\\\\\\\\n  props.recency == \\\\\\\\\\\\\\\"hot\\\\\\\\\\\\\\\" ? (\\\\\\\\n    <div class=\\\\\\\\\\\\\\\"row\\\\\\\\\\\\\\\">\\\\\\\\n      <div class=\\\\\\\\\\\\\\\"fs-5 col-6 align-self-center\\\\\\\\\\\\\\\">\\\\\\\\n        <i class=\\\\\\\\\\\\\\\"bi-fire\\\\\\\\\\\\\\\"></i>\\\\\\\\n        <span>Hottest Posts</span>\\\\\\\\n      </div>\\\\\\\\n      <div class=\\\\\\\\\\\\\\\"col-6 dropdown d-flex justify-content-end\\\\\\\\\\\\\\\">\\\\\\\\n        <a\\\\\\\\n          class=\\\\\\\\\\\\\\\"btn btn-secondary dropdown-toggle\\\\\\\\\\\\\\\"\\\\\\\\n          href=\\\\\\\\\\\\\\\"#\\\\\\\\\\\\\\\"\\\\\\\\n          role=\\\\\\\\\\\\\\\"button\\\\\\\\\\\\\\\"\\\\\\\\n          id=\\\\\\\\\\\\\\\"dropdownMenuLink\\\\\\\\\\\\\\\"\\\\\\\\n          data-bs-toggle=\\\\\\\\\\\\\\\"dropdown\\\\\\\\\\\\\\\"\\\\\\\\n          aria-expanded=\\\\\\\\\\\\\\\"false\\\\\\\\\\\\\\\"\\\\\\\\n        >\\\\\\\\n          {getPeriodText(state.period)}\\\\\\\\n        </a>\\\\\\\\n\\\\\\\\n        <ul class=\\\\\\\\\\\\\\\"dropdown-menu\\\\\\\\\\\\\\\" aria-labelledby=\\\\\\\\\\\\\\\"dropdownMenuLink\\\\\\\\\\\\\\\">\\\\\\\\n          <li>\\\\\\\\n            <button\\\\\\\\n              class=\\\\\\\\\\\\\\\"dropdown-item\\\\\\\\\\\\\\\"\\\\\\\\n              onClick={() => {\\\\\\\\n                State.update({ period: \\\\\\\\\\\\\\\"day\\\\\\\\\\\\\\\" });\\\\\\\\n              }}\\\\\\\\n            >\\\\\\\\n              {getPeriodText(\\\\\\\\\\\\\\\"day\\\\\\\\\\\\\\\")}\\\\\\\\n            </button>\\\\\\\\n          </li>\\\\\\\\n          <li>\\\\\\\\n            <button\\\\\\\\n              class=\\\\\\\\\\\\\\\"dropdown-item\\\\\\\\\\\\\\\"\\\\\\\\n              onClick={() => {\\\\\\\\n                State.update({ period: \\\\\\\\\\\\\\\"week\\\\\\\\\\\\\\\" });\\\\\\\\n              }}\\\\\\\\n            >\\\\\\\\n              {getPeriodText(\\\\\\\\\\\\\\\"week\\\\\\\\\\\\\\\")}\\\\\\\\n            </button>\\\\\\\\n          </li>\\\\\\\\n          <li>\\\\\\\\n            <button\\\\\\\\n              class=\\\\\\\\\\\\\\\"dropdown-item\\\\\\\\\\\\\\\"\\\\\\\\n              onClick={() => {\\\\\\\\n                State.update({ period: \\\\\\\\\\\\\\\"month\\\\\\\\\\\\\\\" });\\\\\\\\n              }}\\\\\\\\n            >\\\\\\\\n              {getPeriodText(\\\\\\\\\\\\\\\"month\\\\\\\\\\\\\\\")}\\\\\\\\n            </button>\\\\\\\\n          </li>\\\\\\\\n        </ul>\\\\\\\\n      </div>\\\\\\\\n    </div>\\\\\\\\n  ) : (\\\\\\\\n    <></>\\\\\\\\n  );\\\\\\\\n\\\\\\\\nreturn (\\\\\\\\n  <>\\\\\\\\n    {Head}\\\\\\\\n    {state.loading ? loader : null}\\\\\\\\n    {is_edit_or_add_post_transaction ? (\\\\\\\\n      <p class=\\\\\\\\\\\\\\\"text-secondary mt-4\\\\\\\\\\\\\\\">\\\\\\\\n        Post {transaction_method_name == \\\\\\\\\\\\\\\"edit_post\\\\\\\\\\\\\\\" ? \\\\\\\\\\\\\\\"edited\\\\\\\\\\\\\\\" : \\\\\\\\\\\\\\\"added\\\\\\\\\\\\\\\"}{\\\\\\\\\\\\\\\" \\\\\\\\\\\\\\\"}\\\\\\\\n        successfully. Back to{\\\\\\\\\\\\\\\" \\\\\\\\\\\\\\\"}\\\\\\\\n        <Link\\\\\\\\n          style={{\\\\\\\\n            color: \\\\\\\\\\\\\\\"#3252A6\\\\\\\\\\\\\\\",\\\\\\\\n          }}\\\\\\\\n          className=\\\\\\\\\\\\\\\"fw-bold\\\\\\\\\\\\\\\"\\\\\\\\n          to={href({\\\\\\\\n            widgetSrc: \\\\\\\\\\\\\\\"devhub.near/widget/app\\\\\\\\\\\\\\\",\\\\\\\\n            params: { page: \\\\\\\\\\\\\\\"feed\\\\\\\\\\\\\\\" },\\\\\\\\n          })}\\\\\\\\n        >\\\\\\\\n          feed\\\\\\\\n        </Link>\\\\\\\\n      </p>\\\\\\\\n    ) : state.items.length > 0 ? (\\\\\\\\n      <InfiniteScroll\\\\\\\\n        pageStart={0}\\\\\\\\n        loadMore={makeMoreItems}\\\\\\\\n        hasMore={state.displayCount < state.items.length}\\\\\\\\n        loader={loader}\\\\\\\\n      >\\\\\\\\n        {renderedItems}\\\\\\\\n      </InfiniteScroll>\\\\\\\\n    ) : (\\\\\\\\n      <p class=\\\\\\\\\\\\\\\"text-secondary\\\\\\\\\\\\\\\">\\\\\\\\n        No posts{\\\\\\\\\\\\\\\" \\\\\\\\\\\\\\\"}\\\\\\\\n        {props.term || props.tag || props.author ? \\\\\\\\\\\\\\\"matches search\\\\\\\\\\\\\\\" : \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\"}\\\\\\\\n        {props.recency === \\\\\\\\\\\\\\\"hot\\\\\\\\\\\\\\\"\\\\\\\\n          ? \\\\\\\\\\\\\\\" in \\\\\\\\\\\\\\\" + getPeriodText(state.period).toLowerCase()\\\\\\\\n          : \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\"}\\\\\\\\n      </p>\\\\\\\\n    )}\\\\\\\\n  </>\\\\\\\\n);\\\\\\\\n\"}, \"devhub.entity.addon.blog.Feed\": {\"\": \"const { Item, Layout } = props;\\\\\\\\n\\\\\\\\nLayout = Layout || (() => <></>);\\\\\\\\n\\\\\\\\nconst Container = styled.div``;\\\\\\\\n\\\\\\\\nconst Loader = styled.div`\\\\\\\\n  text-align: center;\\\\\\\\n  padding: 20px;\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst QUERYAPI_ENDPOINT = `https://near-queryapi.api.pagoda.co/v1/graphql/`;\\\\\\\\nconst DISPLAY_COUNT = 10;\\\\\\\\n\\\\\\\\nconst fetchGraphQL = (operationsDoc, operationName, variables) => {\\\\\\\\n  return asyncFetch(QUERYAPI_ENDPOINT, {\\\\\\\\n    method: \\\\\\\\\\\\\\\"POST\\\\\\\\\\\\\\\",\\\\\\\\n    headers: { \\\\\\\\\\\\\\\"x-hasura-role\\\\\\\\\\\\\\\": `bo_near` },\\\\\\\\n    body: JSON.stringify({\\\\\\\\n      query: operationsDoc,\\\\\\\\n      variables: variables,\\\\\\\\n      operationName: operationName,\\\\\\\\n    }),\\\\\\\\n  });\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst queryName =\\\\\\\\n  props.queryName ?? `bo_near_devhub_v36_posts_with_latest_snapshot`;\\\\\\\\n\\\\\\\\nconst query = `query DevhubPostsQuery($limit: Int = 100, $offset: Int = 0, $where: ${queryName}_bool_exp = {}) {\\\\\\\\n    ${queryName}(\\\\\\\\n      limit: $limit\\\\\\\\n      offset: $offset\\\\\\\\n      order_by: {block_height: desc}\\\\\\\\n      where: $where\\\\\\\\n    ) {\\\\\\\\n      post_id\\\\\\\\n    }\\\\\\\\n  }\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst [postIds, setPostIds] = useState([]);\\\\\\\\nconst [loading, setLoading] = useState(false);\\\\\\\\nconst [cachedItems, setCachedItems] = useState({});\\\\\\\\nconst [hasNext, setHasNext] = useState(true);\\\\\\\\n\\\\\\\\nconst buildWhereClause = () => {\\\\\\\\n  let where = {};\\\\\\\\n  if (props.author) {\\\\\\\\n    where = { author_id: { _eq: props.author }, ...where };\\\\\\\\n  }\\\\\\\\n  if (props.term) {\\\\\\\\n    where = { description: { _ilike: `%${props.term}%` }, ...where };\\\\\\\\n  }\\\\\\\\n  if (props.includeLabels && Array.isArray(props.includeLabels)) {\\\\\\\\n    const labelConditions = props.includeLabels.map((label) => ({\\\\\\\\n      labels: { _contains: label },\\\\\\\\n    }));\\\\\\\\n\\\\\\\\n    where = { _and: [...labelConditions, where] };\\\\\\\\n  }\\\\\\\\n  if (props.excludeLabels && Array.isArray(props.excludeLabels)) {\\\\\\\\n    const labelConditions = props.excludeLabels.map((label) => ({\\\\\\\\n      labels: { _nin: label },\\\\\\\\n    }));\\\\\\\\n\\\\\\\\n    where = { _and: [...labelConditions, where] };\\\\\\\\n  }\\\\\\\\n  if (!props.recency) {\\\\\\\\n    where = { parent_id: { _is_null: true }, ...where };\\\\\\\\n  }\\\\\\\\n  return where;\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst fetchPostIds = (offset) => {\\\\\\\\n  if (!offset) {\\\\\\\\n    offset = 0;\\\\\\\\n  }\\\\\\\\n  if (loading) return;\\\\\\\\n  setLoading(true);\\\\\\\\n  const variables = { limit: DISPLAY_COUNT, offset, where: buildWhereClause() };\\\\\\\\n  fetchGraphQL(query, \\\\\\\\\\\\\\\"DevhubPostsQuery\\\\\\\\\\\\\\\", variables).then((result) => {\\\\\\\\n    if (result.status === 200) {\\\\\\\\n      if (result.body.data) {\\\\\\\\n        const data = result.body.data[queryName];\\\\\\\\n        const newPostIds = data.map((p) => p.post_id);\\\\\\\\n        setPostIds(offset === 0 ? newPostIds : [...postIds, ...newPostIds]);\\\\\\\\n        setHasNext(data.length >= variables.limit);\\\\\\\\n      } else {\\\\\\\\n        console.error(\\\\\\\\\\\\\\\"GraphQL Error:\\\\\\\\\\\\\\\", result.errors);\\\\\\\\n      }\\\\\\\\n      setLoading(false);\\\\\\\\n    }\\\\\\\\n  });\\\\\\\\n};\\\\\\\\n\\\\\\\\nuseEffect(() => {\\\\\\\\n  fetchPostIds();\\\\\\\\n}, [props.author, props.term, props.tag, props.recency]);\\\\\\\\n\\\\\\\\nconst handleLoadMore = () => {\\\\\\\\n  if (!hasNext) return;\\\\\\\\n  fetchPostIds(postIds.length);\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst renderLoader = () => <Loader>Loading...</Loader>;\\\\\\\\n\\\\\\\\nconst renderItem = (postId) => (\\\\\\\\n  <div key={postId}>\\\\\\\\n    {(props.renderItem && props.renderItem(postId)) || <div>Post {postId}</div>}\\\\\\\\n  </div>\\\\\\\\n);\\\\\\\\n\\\\\\\\nconst cachedRenderItem = (postId) => {\\\\\\\\n  if (!(postId in cachedItems)) {\\\\\\\\n    cachedItems[postId] = renderItem(postId);\\\\\\\\n    setCachedItems({ ...cachedItems });\\\\\\\\n  }\\\\\\\\n  return cachedItems[postId];\\\\\\\\n};\\\\\\\\n\\\\\\\\nreturn (\\\\\\\\n  <Container>\\\\\\\\n    {loading && renderLoader()}\\\\\\\\n    {postIds.length > 0 ? (\\\\\\\\n      <InfiniteScroll\\\\\\\\n        pageStart={0}\\\\\\\\n        dataLength={postIds.length}\\\\\\\\n        loadMore={handleLoadMore}\\\\\\\\n        hasMore={hasNext}\\\\\\\\n        loader={renderLoader()}\\\\\\\\n      >\\\\\\\\n        <Layout>\\\\\\\\n          {/* Layout */}\\\\\\\\n          {postIds.map(cachedRenderItem)}\\\\\\\\n        </Layout>\\\\\\\\n      </InfiniteScroll>\\\\\\\\n    ) : (\\\\\\\\n      <p class=\\\\\\\\\\\\\\\"text-secondary\\\\\\\\\\\\\\\">No posts</p>\\\\\\\\n    )}\\\\\\\\n  </Container>\\\\\\\\n);\\\\\\\\n\"}, \"devhub.entity.addon.blog.editor.provider\": {\"\": \"const { getPost } =\\\\\\\\n  VM.require(\\\\\\\\\\\\\\\"devhub.near/widget/core.adapter.devhub-contract\\\\\\\\\\\\\\\") ||\\\\\\\\n  (() => {});\\\\\\\\n\\\\\\\\nconst { Layout, handle } = props;\\\\\\\\n\\\\\\\\nconst QUERYAPI_ENDPOINT = `https://near-queryapi.api.pagoda.co/v1/graphql/`;\\\\\\\\n\\\\\\\\nconst fetchGraphQL = (operationsDoc, operationName, variables) => {\\\\\\\\n  return fetch(QUERYAPI_ENDPOINT, {\\\\\\\\n    method: \\\\\\\\\\\\\\\"POST\\\\\\\\\\\\\\\",\\\\\\\\n    headers: { \\\\\\\\\\\\\\\"x-hasura-role\\\\\\\\\\\\\\\": `bo_near` },\\\\\\\\n    body: JSON.stringify({\\\\\\\\n      query: operationsDoc,\\\\\\\\n      variables: variables,\\\\\\\\n      operationName: operationName,\\\\\\\\n    }),\\\\\\\\n  });\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst queryName =\\\\\\\\n  props.queryName ?? `bo_near_devhub_v17_posts_with_latest_snapshot`;\\\\\\\\n\\\\\\\\nconst query = `query DevhubPostsQuery($limit: Int = 100, $offset: Int = 0, $where: ${queryName}_bool_exp = {}) {\\\\\\\\n    ${queryName}(\\\\\\\\n      limit: $limit\\\\\\\\n      offset: $offset\\\\\\\\n      order_by: {block_height: desc}\\\\\\\\n      where: $where\\\\\\\\n    ) {\\\\\\\\n      post_id\\\\\\\\n    }\\\\\\\\n  }\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst includeLabels = [\\\\\\\\\\\\\\\"blog\\\\\\\\\\\\\\\", handle];\\\\\\\\n\\\\\\\\nconst buildWhereClause = () => {\\\\\\\\n  let where = {};\\\\\\\\n  if (props.author) {\\\\\\\\n    where = { author_id: { _eq: props.author }, ...where };\\\\\\\\n  }\\\\\\\\n  if (props.term) {\\\\\\\\n    where = { description: { _ilike: `%${props.term}%` }, ...where };\\\\\\\\n  }\\\\\\\\n  if (includeLabels && Array.isArray(includeLabels)) {\\\\\\\\n    const labelConditions = includeLabels.map((label) => ({\\\\\\\\n      labels: { _contains: label },\\\\\\\\n    }));\\\\\\\\n\\\\\\\\n    where = { _and: [...labelConditions, where] };\\\\\\\\n  }\\\\\\\\n  if (props.excludeLabels && Array.isArray(props.excludeLabels)) {\\\\\\\\n    const labelConditions = props.excludeLabels.map((label) => ({\\\\\\\\n      labels: { _nin: label },\\\\\\\\n    }));\\\\\\\\n\\\\\\\\n    where = { _and: [...labelConditions, where] };\\\\\\\\n  }\\\\\\\\n  if (!props.recency) {\\\\\\\\n    where = { parent_id: { _is_null: true }, ...where };\\\\\\\\n  }\\\\\\\\n  return where;\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst variables = { limit: DISPLAY_COUNT, offset, where: buildWhereClause() };\\\\\\\\n\\\\\\\\nconst posts = fetch(QUERYAPI_ENDPOINT, {\\\\\\\\n  method: \\\\\\\\\\\\\\\"POST\\\\\\\\\\\\\\\",\\\\\\\\n  headers: { \\\\\\\\\\\\\\\"x-hasura-role\\\\\\\\\\\\\\\": `bo_near` },\\\\\\\\n  body: JSON.stringify({\\\\\\\\n    query: query,\\\\\\\\n    variables: variables,\\\\\\\\n    operationName: \\\\\\\\\\\\\\\"DevhubPostsQuery\\\\\\\\\\\\\\\",\\\\\\\\n  }),\\\\\\\\n});\\\\\\\\n\\\\\\\\nconst handleOnChange = (v) => {\\\\\\\\n  console.log(\\\\\\\\\\\\\\\"onChange\\\\\\\\\\\\\\\", v);\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst handleGetData = (v) => {\\\\\\\\n  const postId = parseInt(v);\\\\\\\\n  const post = getPost({ post_id: postId });\\\\\\\\n  const description = JSON.parse(post.snapshot.description || \\\\\\\\\\\\\\\"null\\\\\\\\\\\\\\\") || {};\\\\\\\\n\\\\\\\\n  return {\\\\\\\\n    id: postId,\\\\\\\\n    ...description,\\\\\\\\n  };\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst handleOnSubmit = (v, isEdit) => {\\\\\\\\n  console.log(isEdit);\\\\\\\\n  if (isEdit) {\\\\\\\\n    Near.call({\\\\\\\\n      contractName: \\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\",\\\\\\\\n      methodName: \\\\\\\\\\\\\\\"edit_post\\\\\\\\\\\\\\\",\\\\\\\\n      args: {\\\\\\\\n        id: v.id,\\\\\\\\n        labels: [\\\\\\\\\\\\\\\"blog\\\\\\\\\\\\\\\", handle],\\\\\\\\n        body: {\\\\\\\\n          post_type: \\\\\\\\\\\\\\\"Comment\\\\\\\\\\\\\\\",\\\\\\\\n          description: JSON.stringify(v),\\\\\\\\n          comment_version: \\\\\\\\\\\\\\\"V2\\\\\\\\\\\\\\\",\\\\\\\\n        },\\\\\\\\n      },\\\\\\\\n      deposit: Big(10).pow(21).mul(2),\\\\\\\\n      gas: Big(10).pow(12).mul(100),\\\\\\\\n    });\\\\\\\\n  } else {\\\\\\\\n    Near.call({\\\\\\\\n      contractName: \\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\",\\\\\\\\n      methodName: \\\\\\\\\\\\\\\"add_post\\\\\\\\\\\\\\\",\\\\\\\\n      args: {\\\\\\\\n        labels: [\\\\\\\\\\\\\\\"blog\\\\\\\\\\\\\\\", handle],\\\\\\\\n        body: {\\\\\\\\n          post_type: \\\\\\\\\\\\\\\"Comment\\\\\\\\\\\\\\\",\\\\\\\\n          description: JSON.stringify(v),\\\\\\\\n          comment_version: \\\\\\\\\\\\\\\"V2\\\\\\\\\\\\\\\",\\\\\\\\n        },\\\\\\\\n      },\\\\\\\\n      deposit: Big(10).pow(21).mul(2),\\\\\\\\n      gas: Big(10).pow(12).mul(100),\\\\\\\\n    });\\\\\\\\n  }\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst handleOnCancel = (v) => {\\\\\\\\n  console.log(\\\\\\\\\\\\\\\"onCancel\\\\\\\\\\\\\\\", v);\\\\\\\\n};\\\\\\\\n\\\\\\\\nreturn (\\\\\\\\n  <Layout\\\\\\\\n    data={posts.body.data.bo_near_devhub_v36_posts_with_latest_snapshot || []}\\\\\\\\n    getData={handleGetData}\\\\\\\\n    onChange={handleOnChange}\\\\\\\\n    onSubmit={handleOnSubmit}\\\\\\\\n    onCancel={handleOnCancel}\\\\\\\\n  />\\\\\\\\n);\\\\\\\\n\"}}}}}"
      }
    ],
    "actions_agg": {
      "deposit": 0
    },
    "outcomes": {
      "status": true
    },
    "outcomes_agg": {
      "transaction_fee": 1.2604923234935e+21
    }
  },
  {
    "id": "1421606225",
    "receipt_id": "7xHRpx4xYEcPxopAGV9PNJtojBWvCcTPZHRgGmJJCK5F",
    "predecessor_account_id": "system",
    "receiver_account_id": "devhub.near",
    "receipt_kind": "ACTION",
    "receipt_block": {
      "block_hash": "3Rbkck6N8ER95oeZ3PvExT54HumjMmKWpupb4e7bUEDm",
      "block_height": 105793757,
      "block_timestamp": 1700101144820210200
    },
    "receipt_outcome": {
      "gas_burnt": 223182562500,
      "tokens_burnt": 0,
      "executor_account_id": "devhub.near",
      "status": true
    },
    "transaction_hash": "EYXwTsYq4BiiEDS5XJnDPPfYqNCwDaYjGr2Huv5HGizW",
    "included_in_block_hash": "8yG6cCkJyH7hMF5bfKE2HvaKi291uzomTPmZbsCaeLiY",
    "block_timestamp": "1700101142190222859",
    "block": {
      "block_height": 105793755
    },
    "receipt_conversion_tokens_burnt": "247045070061400000000",
    "actions": [
      {
        "action": "TRANSFER",
        "method": null,
        "deposit": 1.880427358823381e+23,
        "fee": 0,
        "args": null
      }
    ],
    "actions_agg": {
      "deposit": 0
    },
    "outcomes": {
      "status": true
    },
    "outcomes_agg": {
      "transaction_fee": 1.2604923234935e+21
    }
  },
  {
    "id": "1421697017",
    "receipt_id": "7VQnRmVh92QhKUCmRLjfLS9wu2iVpyTU4hG9rSj1CFZJ",
    "predecessor_account_id": "devhub.near",
    "receiver_account_id": "social.near",
    "receipt_kind": "ACTION",
    "receipt_block": {
      "block_hash": "ihWPGuyw8272rpbZciNAkiKFm421wZthuN8T4TF1s99",
      "block_height": 105794023,
      "block_timestamp": 1700101464015638500
    },
    "receipt_outcome": {
      "gas_burnt": 8656750194466,
      "tokens_burnt": 865675019446600000000,
      "executor_account_id": "social.near",
      "status": true
    },
    "transaction_hash": "6PJWS2apxB5znJqMZ8tK7rJfWsfK347X8gjPYrWTV1W",
    "included_in_block_hash": "Be6gQtRoi7j9RAaFTSkex334Rxyo4qb8jM6ciXvVnmdV",
    "block_timestamp": "1700101463105021701",
    "block": {
      "block_height": 105794022
    },
    "receipt_conversion_tokens_burnt": "246221351975800000000",
    "actions": [
      {
        "action": "FUNCTION_CALL",
        "method": "set",
        "deposit": 0,
        "fee": 865675019446600000000,
        "args": "{\"data\": {\"devhub.near\": {\"widget\": {\"devhub.entity.post.List\": {\"\": \"// This component implementation was forked from [IndexFeed], but it does not fully implement lazy loading.\\\\\\\\n// While this component uses InfiniteScroll, it still loads the whole list of Post IDs in one view call.\\\\\\\\n// The contract will need to be extended with pagination support, yet, even in the current state the page loads much faster.\\\\\\\\n// [IndexFeed]: https://near.social/#/mob.near/widget/WidgetSource?src=mob.near/widget/IndexFeed\\\\\\\\n\\\\\\\\nconst { href } = VM.require(\\\\\\\\\\\\\\\"devhub.near/widget/core.lib.url\\\\\\\\\\\\\\\");\\\\\\\\n\\\\\\\\nconst { draftState, onDraftStateChange } = VM.require(\\\\\\\\n  \\\\\\\\\\\\\\\"devhub.near/widget/devhub.entity.post.draft\\\\\\\\\\\\\\\"\\\\\\\\n);\\\\\\\\n\\\\\\\\nif (!href) {\\\\\\\\n  return <p>Loading modules...</p>;\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst QUERYAPI_ENDPOINT = `https://near-queryapi.api.pagoda.co/v1/graphql/`;\\\\\\\\n\\\\\\\\nconst queryName =\\\\\\\\n  props.queryName ?? `bo_near_devhub_v36_posts_with_latest_snapshot`;\\\\\\\\n\\\\\\\\nconst query = `query DevhubPostsQuery($limit: Int = 100, $offset: Int = 0, $where: ${queryName}_bool_exp = {}) {\\\\\\\\n    ${queryName}(\\\\\\\\n      limit: $limit\\\\\\\\n      offset: $offset\\\\\\\\n      order_by: {ts: desc}\\\\\\\\n      where: $where\\\\\\\\n    ) {\\\\\\\\n      post_id\\\\\\\\n    }\\\\\\\\n  }\\\\\\\\n`;\\\\\\\\n\\\\\\\\nfunction fetchGraphQL(operationsDoc, operationName, variables) {\\\\\\\\n  return asyncFetch(QUERYAPI_ENDPOINT, {\\\\\\\\n    method: \\\\\\\\\\\\\\\"POST\\\\\\\\\\\\\\\",\\\\\\\\n    headers: { \\\\\\\\\\\\\\\"x-hasura-role\\\\\\\\\\\\\\\": `bo_near` },\\\\\\\\n    body: JSON.stringify({\\\\\\\\n      query: operationsDoc,\\\\\\\\n      variables: variables,\\\\\\\\n      operationName: operationName,\\\\\\\\n    }),\\\\\\\\n  });\\\\\\\\n}\\\\\\\\n\\\\\\\\nfunction searchConditionChanged() {\\\\\\\\n  return (\\\\\\\\n    props.author != state.author ||\\\\\\\\n    props.term != state.term ||\\\\\\\\n    props.tag != state.tag ||\\\\\\\\n    props.recency != state.recency\\\\\\\\n  );\\\\\\\\n}\\\\\\\\n\\\\\\\\nfunction updateSearchCondition() {\\\\\\\\n  State.update({\\\\\\\\n    author: props.author,\\\\\\\\n    term: props.term,\\\\\\\\n    tag: props.tag,\\\\\\\\n    recency: props.recency,\\\\\\\\n    loading: true,\\\\\\\\n  });\\\\\\\\n}\\\\\\\\n\\\\\\\\nfunction getPostIds() {\\\\\\\\n  if (searchConditionChanged()) {\\\\\\\\n    updateSearchCondition();\\\\\\\\n    return;\\\\\\\\n  }\\\\\\\\n  let where = {};\\\\\\\\n  let authorId = props.author;\\\\\\\\n  let label = props.tag;\\\\\\\\n  if (authorId) {\\\\\\\\n    where = { author_id: { _eq: authorId }, ...where };\\\\\\\\n  }\\\\\\\\n  if (props.term) {\\\\\\\\n    where = { description: { _ilike: `%${props.term}%` }, ...where };\\\\\\\\n  }\\\\\\\\n  if (label) {\\\\\\\\n    if (typeof label === \\\\\\\\\\\\\\\"string\\\\\\\\\\\\\\\") {\\\\\\\\n      // Handle a single label\\\\\\\\n      where = { labels: { _contains: label }, ...where };\\\\\\\\n    } else if (Array.isArray(label)) {\\\\\\\\n      // Handle an array of labels\\\\\\\\n      where = {\\\\\\\\n        labels: {\\\\\\\\n          _containsAny: label,\\\\\\\\n        },\\\\\\\\n        ...where,\\\\\\\\n      };\\\\\\\\n    }\\\\\\\\n  }\\\\\\\\n  if (!props.recency) {\\\\\\\\n    // show only top level posts\\\\\\\\n    where = { parent_id: { _is_null: true }, ...where };\\\\\\\\n  }\\\\\\\\n\\\\\\\\n  // Don\\\\\\\\\\\\'t show blog\\\\\\\\n  where = {\\\\\\\\n    _not: {\\\\\\\\n      labels: { _contains: \\\\\\\\\\\\\\\"blog\\\\\\\\\\\\\\\" },\\\\\\\\n      parent_id: { _is_null: true },\\\\\\\\n      post_type: { _eq: \\\\\\\\\\\\\\\"Comment\\\\\\\\\\\\\\\" },\\\\\\\\n    },\\\\\\\\n    ...where,\\\\\\\\n  };\\\\\\\\n\\\\\\\\n  console.log(\\\\\\\\\\\\\\\"searching for\\\\\\\\\\\\\\\", where);\\\\\\\\n  fetchGraphQL(query, \\\\\\\\\\\\\\\"DevhubPostsQuery\\\\\\\\\\\\\\\", {\\\\\\\\n    limit: 100,\\\\\\\\n    offset: 0,\\\\\\\\n    where,\\\\\\\\n  }).then((result) => {\\\\\\\\n    if (result.status === 200) {\\\\\\\\n      console.log(\\\\\\\\\\\\\\\"search success\\\\\\\\\\\\\\\");\\\\\\\\n      if (result.body.data) {\\\\\\\\n        const data = result.body.data[queryName];\\\\\\\\n        State.update({\\\\\\\\n          postIds: data.map((p) => p.post_id),\\\\\\\\n          loading: false,\\\\\\\\n        });\\\\\\\\n        console.log(\\\\\\\\\\\\\\\"found:\\\\\\\\\\\\\\\");\\\\\\\\n        console.log(data);\\\\\\\\n      }\\\\\\\\n    } else {\\\\\\\\n      console.error(\\\\\\\\\\\\\\\"error:\\\\\\\\\\\\\\\", result.body);\\\\\\\\n      State.update({ loading: false });\\\\\\\\n    }\\\\\\\\n  });\\\\\\\\n}\\\\\\\\n\\\\\\\\nState.init({\\\\\\\\n  period: \\\\\\\\\\\\\\\"week\\\\\\\\\\\\\\\",\\\\\\\\n});\\\\\\\\n\\\\\\\\ngetPostIds();\\\\\\\\n\\\\\\\\nfunction defaultRenderItem(postId, additionalProps) {\\\\\\\\n  if (!additionalProps) {\\\\\\\\n    additionalProps = {};\\\\\\\\n  }\\\\\\\\n  // It is important to have a non-zero-height element as otherwise InfiniteScroll loads too many items on initial load\\\\\\\\n  return (\\\\\\\\n    <div className=\\\\\\\\\\\\\\\"py-2\\\\\\\\\\\\\\\" style={{ minHeight: \\\\\\\\\\\\\\\"150px\\\\\\\\\\\\\\\" }}>\\\\\\\\n      <Widget\\\\\\\\n        src={\\\\\\\\\\\\\\\"devhub.near/widget/devhub.entity.post.Post\\\\\\\\\\\\\\\"}\\\\\\\\n        props={{\\\\\\\\n          id: postId,\\\\\\\\n          expandable: true,\\\\\\\\n          defaultExpanded: false,\\\\\\\\n          isInList: true,\\\\\\\\n          draftState,\\\\\\\\n          isPreview: false,\\\\\\\\n          onDraftStateChange,\\\\\\\\n          ...additionalProps,\\\\\\\\n          referral: postId,\\\\\\\\n        }}\\\\\\\\n      />\\\\\\\\n    </div>\\\\\\\\n  );\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst renderItem = props.renderItem ?? defaultRenderItem;\\\\\\\\n\\\\\\\\nconst cachedRenderItem = (item, i) => {\\\\\\\\n  if (props.term) {\\\\\\\\n    return renderItem(item, {\\\\\\\\n      searchKeywords: [props.term],\\\\\\\\n    });\\\\\\\\n  }\\\\\\\\n\\\\\\\\n  const key = JSON.stringify(item);\\\\\\\\n\\\\\\\\n  if (!(key in state.cachedItems)) {\\\\\\\\n    state.cachedItems[key] = renderItem(item);\\\\\\\\n    State.update();\\\\\\\\n  }\\\\\\\\n  return state.cachedItems[key];\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst initialRenderLimit = props.initialRenderLimit ?? 3;\\\\\\\\nconst addDisplayCount = props.nextLimit ?? initialRenderLimit;\\\\\\\\n\\\\\\\\nconst ONE_DAY = 60 * 60 * 24 * 1000;\\\\\\\\nconst ONE_WEEK = 60 * 60 * 24 * 1000 * 7;\\\\\\\\nconst ONE_MONTH = 60 * 60 * 24 * 1000 * 30;\\\\\\\\n\\\\\\\\nfunction getHotnessScore(post) {\\\\\\\\n  //post.id - shows the age of the post, should grow exponentially, since newer posts are more important\\\\\\\\n  //post.likes.length - linear value\\\\\\\\n  const age = Math.pow(post.id, 5);\\\\\\\\n  const comments = post.comments;\\\\\\\\n  const commentAge = comments.reduce((sum, age) => sum + Math.pow(age, 5), 0);\\\\\\\\n  const totalAge = age + commentAge;\\\\\\\\n  //use log functions to make likes score and exponentially big age score close to each other\\\\\\\\n  return Math.log10(post.likes.length) + Math.log(Math.log10(totalAge));\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst getPeriodText = (period) => {\\\\\\\\n  let text = \\\\\\\\\\\\\\\"Last 24 hours\\\\\\\\\\\\\\\";\\\\\\\\n  if (period === \\\\\\\\\\\\\\\"week\\\\\\\\\\\\\\\") {\\\\\\\\n    text = \\\\\\\\\\\\\\\"Last week\\\\\\\\\\\\\\\";\\\\\\\\n  }\\\\\\\\n  if (period === \\\\\\\\\\\\\\\"month\\\\\\\\\\\\\\\") {\\\\\\\\n    text = \\\\\\\\\\\\\\\"Last month\\\\\\\\\\\\\\\";\\\\\\\\n  }\\\\\\\\n  return text;\\\\\\\\n};\\\\\\\\n\\\\\\\\nlet postIds = state.postIds ?? null;\\\\\\\\n\\\\\\\\nconst loader = (\\\\\\\\n  <div className=\\\\\\\\\\\\\\\"loader\\\\\\\\\\\\\\\" key={\\\\\\\\\\\\\\\"loader\\\\\\\\\\\\\\\"}>\\\\\\\\n    <span\\\\\\\\n      className=\\\\\\\\\\\\\\\"spinner-grow spinner-grow-sm me-1\\\\\\\\\\\\\\\"\\\\\\\\n      role=\\\\\\\\\\\\\\\"status\\\\\\\\\\\\\\\"\\\\\\\\n      aria-hidden=\\\\\\\\\\\\\\\"true\\\\\\\\\\\\\\\"\\\\\\\\n    />\\\\\\\\n    Loading ...\\\\\\\\n  </div>\\\\\\\\n);\\\\\\\\n\\\\\\\\nif (postIds === null) {\\\\\\\\n  return loader;\\\\\\\\n}\\\\\\\\nconst initialItems = postIds;\\\\\\\\n//const initialItems = postIds.map(postId => ({ id: postId, ...Near.view(nearDevGovGigsContractAccountId, \\\\\\\\\\\\\\\"get_post\\\\\\\\\\\\\\\", { post_id: postId }) }));\\\\\\\\n\\\\\\\\n// const computeFetchFrom = (items, limit) => {\\\\\\\\n//   if (!items || items.length < limit) {\\\\\\\\n//     return false;\\\\\\\\n//   }\\\\\\\\n//   const blockHeight = items[items.length - 1].blockHeight;\\\\\\\\n//   return index.options.order === \\\\\\\\\\\\\\\"desc\\\\\\\\\\\\\\\" ? blockHeight - 1 : blockHeight + 1;\\\\\\\\n// };\\\\\\\\n\\\\\\\\n// const mergeItems = (newItems) => {\\\\\\\\n//   const items = [\\\\\\\\n//     ...new Set([...newItems, ...state.items].map((i) => JSON.stringify(i))),\\\\\\\\n//   ].map((i) => JSON.parse(i));\\\\\\\\n//   items.sort((a, b) => a.blockHeight - b.blockHeight);\\\\\\\\n//   if (index.options.order === \\\\\\\\\\\\\\\"desc\\\\\\\\\\\\\\\") {\\\\\\\\n//     items.reverse();\\\\\\\\n//   }\\\\\\\\n//   return items;\\\\\\\\n// };\\\\\\\\n\\\\\\\\nconst jInitialItems = JSON.stringify(initialItems);\\\\\\\\nif (state.jInitialItems !== jInitialItems) {\\\\\\\\n  // const jIndex = JSON.stringify(index);\\\\\\\\n  // if (jIndex !== state.jIndex) {\\\\\\\\n  State.update({\\\\\\\\n    jIndex,\\\\\\\\n    jInitialItems,\\\\\\\\n    items: initialItems,\\\\\\\\n    fetchFrom: false,\\\\\\\\n    //nextFetchFrom: computeFetchFrom(initialItems, index.options.limit),\\\\\\\\n    nextFetchFrom: false,\\\\\\\\n    displayCount: initialRenderLimit,\\\\\\\\n    cachedItems: {},\\\\\\\\n  });\\\\\\\\n  // } else {\\\\\\\\n  //   State.update({\\\\\\\\n  //     jInitialItems,\\\\\\\\n  //     items: mergeItems(initialItems),\\\\\\\\n  //   });\\\\\\\\n  // }\\\\\\\\n}\\\\\\\\n\\\\\\\\nif (state.fetchFrom) {\\\\\\\\n  // TODO: fetchFrom\\\\\\\\n  // const limit = addDisplayCount;\\\\\\\\n  // const newItems = Social.index(\\\\\\\\n  //   index.action,\\\\\\\\n  //   index.key,\\\\\\\\n  //   Object.assign({}, index.options, {\\\\\\\\n  //     from: state.fetchFrom,\\\\\\\\n  //     subscribe: undefined,\\\\\\\\n  //     limit,\\\\\\\\n  //   })\\\\\\\\n  // );\\\\\\\\n  // if (newItems !== null) {\\\\\\\\n  //   State.update({\\\\\\\\n  //     items: mergeItems(newItems),\\\\\\\\n  //     fetchFrom: false,\\\\\\\\n  //     nextFetchFrom: computeFetchFrom(newItems, limit),\\\\\\\\n  //   });\\\\\\\\n  // }\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst makeMoreItems = () => {\\\\\\\\n  State.update({\\\\\\\\n    displayCount: state.displayCount + addDisplayCount,\\\\\\\\n  });\\\\\\\\n  if (\\\\\\\\n    state.items.length - state.displayCount < addDisplayCount * 2 &&\\\\\\\\n    !state.fetchFrom &&\\\\\\\\n    state.nextFetchFrom &&\\\\\\\\n    state.nextFetchFrom !== state.fetchFrom\\\\\\\\n  ) {\\\\\\\\n    State.update({\\\\\\\\n      fetchFrom: state.nextFetchFrom,\\\\\\\\n    });\\\\\\\\n  }\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst fetchMore =\\\\\\\\n  props.manual &&\\\\\\\\n  (state.fetchFrom && state.items.length < state.displayCount\\\\\\\\n    ? loader\\\\\\\\n    : state.displayCount < state.items.length && (\\\\\\\\n        <div key={\\\\\\\\\\\\\\\"loader more\\\\\\\\\\\\\\\"}>\\\\\\\\n          <a href=\\\\\\\\\\\\\\\"javascript:void\\\\\\\\\\\\\\\" onClick={(e) => makeMoreItems()}>\\\\\\\\n            {props.loadMoreText ?? \\\\\\\\\\\\\\\"Load more...\\\\\\\\\\\\\\\"}\\\\\\\\n          </a>\\\\\\\\n        </div>\\\\\\\\n      ));\\\\\\\\n\\\\\\\\nconst items = state.items ? state.items.slice(0, state.displayCount) : [];\\\\\\\\n\\\\\\\\nconst renderedItems = items.map(cachedRenderItem);\\\\\\\\n\\\\\\\\nconst Head =\\\\\\\\n  props.recency == \\\\\\\\\\\\\\\"hot\\\\\\\\\\\\\\\" ? (\\\\\\\\n    <div class=\\\\\\\\\\\\\\\"row\\\\\\\\\\\\\\\">\\\\\\\\n      <div class=\\\\\\\\\\\\\\\"fs-5 col-6 align-self-center\\\\\\\\\\\\\\\">\\\\\\\\n        <i class=\\\\\\\\\\\\\\\"bi-fire\\\\\\\\\\\\\\\"></i>\\\\\\\\n        <span>Hottest Posts</span>\\\\\\\\n      </div>\\\\\\\\n      <div class=\\\\\\\\\\\\\\\"col-6 dropdown d-flex justify-content-end\\\\\\\\\\\\\\\">\\\\\\\\n        <a\\\\\\\\n          class=\\\\\\\\\\\\\\\"btn btn-secondary dropdown-toggle\\\\\\\\\\\\\\\"\\\\\\\\n          href=\\\\\\\\\\\\\\\"#\\\\\\\\\\\\\\\"\\\\\\\\n          role=\\\\\\\\\\\\\\\"button\\\\\\\\\\\\\\\"\\\\\\\\n          id=\\\\\\\\\\\\\\\"dropdownMenuLink\\\\\\\\\\\\\\\"\\\\\\\\n          data-bs-toggle=\\\\\\\\\\\\\\\"dropdown\\\\\\\\\\\\\\\"\\\\\\\\n          aria-expanded=\\\\\\\\\\\\\\\"false\\\\\\\\\\\\\\\"\\\\\\\\n        >\\\\\\\\n          {getPeriodText(state.period)}\\\\\\\\n        </a>\\\\\\\\n\\\\\\\\n        <ul class=\\\\\\\\\\\\\\\"dropdown-menu\\\\\\\\\\\\\\\" aria-labelledby=\\\\\\\\\\\\\\\"dropdownMenuLink\\\\\\\\\\\\\\\">\\\\\\\\n          <li>\\\\\\\\n            <button\\\\\\\\n              class=\\\\\\\\\\\\\\\"dropdown-item\\\\\\\\\\\\\\\"\\\\\\\\n              onClick={() => {\\\\\\\\n                State.update({ period: \\\\\\\\\\\\\\\"day\\\\\\\\\\\\\\\" });\\\\\\\\n              }}\\\\\\\\n            >\\\\\\\\n              {getPeriodText(\\\\\\\\\\\\\\\"day\\\\\\\\\\\\\\\")}\\\\\\\\n            </button>\\\\\\\\n          </li>\\\\\\\\n          <li>\\\\\\\\n            <button\\\\\\\\n              class=\\\\\\\\\\\\\\\"dropdown-item\\\\\\\\\\\\\\\"\\\\\\\\n              onClick={() => {\\\\\\\\n                State.update({ period: \\\\\\\\\\\\\\\"week\\\\\\\\\\\\\\\" });\\\\\\\\n              }}\\\\\\\\n            >\\\\\\\\n              {getPeriodText(\\\\\\\\\\\\\\\"week\\\\\\\\\\\\\\\")}\\\\\\\\n            </button>\\\\\\\\n          </li>\\\\\\\\n          <li>\\\\\\\\n            <button\\\\\\\\n              class=\\\\\\\\\\\\\\\"dropdown-item\\\\\\\\\\\\\\\"\\\\\\\\n              onClick={() => {\\\\\\\\n                State.update({ period: \\\\\\\\\\\\\\\"month\\\\\\\\\\\\\\\" });\\\\\\\\n              }}\\\\\\\\n            >\\\\\\\\n              {getPeriodText(\\\\\\\\\\\\\\\"month\\\\\\\\\\\\\\\")}\\\\\\\\n            </button>\\\\\\\\n          </li>\\\\\\\\n        </ul>\\\\\\\\n      </div>\\\\\\\\n    </div>\\\\\\\\n  ) : (\\\\\\\\n    <></>\\\\\\\\n  );\\\\\\\\n\\\\\\\\nreturn (\\\\\\\\n  <>\\\\\\\\n    {Head}\\\\\\\\n    {state.loading ? loader : null}\\\\\\\\n    {is_edit_or_add_post_transaction ? (\\\\\\\\n      <p class=\\\\\\\\\\\\\\\"text-secondary mt-4\\\\\\\\\\\\\\\">\\\\\\\\n        Post {transaction_method_name == \\\\\\\\\\\\\\\"edit_post\\\\\\\\\\\\\\\" ? \\\\\\\\\\\\\\\"edited\\\\\\\\\\\\\\\" : \\\\\\\\\\\\\\\"added\\\\\\\\\\\\\\\"}{\\\\\\\\\\\\\\\" \\\\\\\\\\\\\\\"}\\\\\\\\n        successfully. Back to{\\\\\\\\\\\\\\\" \\\\\\\\\\\\\\\"}\\\\\\\\n        <Link\\\\\\\\n          style={{\\\\\\\\n            color: \\\\\\\\\\\\\\\"#3252A6\\\\\\\\\\\\\\\",\\\\\\\\n          }}\\\\\\\\n          className=\\\\\\\\\\\\\\\"fw-bold\\\\\\\\\\\\\\\"\\\\\\\\n          to={href({\\\\\\\\n            widgetSrc: \\\\\\\\\\\\\\\"devhub.near/widget/app\\\\\\\\\\\\\\\",\\\\\\\\n            params: { page: \\\\\\\\\\\\\\\"feed\\\\\\\\\\\\\\\" },\\\\\\\\n          })}\\\\\\\\n        >\\\\\\\\n          feed\\\\\\\\n        </Link>\\\\\\\\n      </p>\\\\\\\\n    ) : state.items.length > 0 ? (\\\\\\\\n      <InfiniteScroll\\\\\\\\n        pageStart={0}\\\\\\\\n        loadMore={makeMoreItems}\\\\\\\\n        hasMore={state.displayCount < state.items.length}\\\\\\\\n        loader={loader}\\\\\\\\n      >\\\\\\\\n        {renderedItems}\\\\\\\\n      </InfiniteScroll>\\\\\\\\n    ) : (\\\\\\\\n      <p class=\\\\\\\\\\\\\\\"text-secondary\\\\\\\\\\\\\\\">\\\\\\\\n        No posts{\\\\\\\\\\\\\\\" \\\\\\\\\\\\\\\"}\\\\\\\\n        {props.term || props.tag || props.author ? \\\\\\\\\\\\\\\"matches search\\\\\\\\\\\\\\\" : \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\"}\\\\\\\\n        {props.recency === \\\\\\\\\\\\\\\"hot\\\\\\\\\\\\\\\"\\\\\\\\n          ? \\\\\\\\\\\\\\\" in \\\\\\\\\\\\\\\" + getPeriodText(state.period).toLowerCase()\\\\\\\\n          : \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\"}\\\\\\\\n      </p>\\\\\\\\n    )}\\\\\\\\n  </>\\\\\\\\n);\\\\\\\\n\"}, \"devhub.entity.addon.blog.Feed\": {\"\": \"const { Item, Layout } = props;\\\\\\\\n\\\\\\\\nLayout = Layout || (() => <></>);\\\\\\\\n\\\\\\\\nconst Container = styled.div``;\\\\\\\\n\\\\\\\\nconst Loader = styled.div`\\\\\\\\n  text-align: center;\\\\\\\\n  padding: 20px;\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst QUERYAPI_ENDPOINT = `https://near-queryapi.api.pagoda.co/v1/graphql/`;\\\\\\\\nconst DISPLAY_COUNT = 10;\\\\\\\\n\\\\\\\\nconst fetchGraphQL = (operationsDoc, operationName, variables) => {\\\\\\\\n  return asyncFetch(QUERYAPI_ENDPOINT, {\\\\\\\\n    method: \\\\\\\\\\\\\\\"POST\\\\\\\\\\\\\\\",\\\\\\\\n    headers: { \\\\\\\\\\\\\\\"x-hasura-role\\\\\\\\\\\\\\\": `bo_near` },\\\\\\\\n    body: JSON.stringify({\\\\\\\\n      query: operationsDoc,\\\\\\\\n      variables: variables,\\\\\\\\n      operationName: operationName,\\\\\\\\n    }),\\\\\\\\n  });\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst queryName =\\\\\\\\n  props.queryName ?? `bo_near_devhub_v36_posts_with_latest_snapshot`;\\\\\\\\n\\\\\\\\nconst query = `query DevhubPostsQuery($limit: Int = 100, $offset: Int = 0, $where: ${queryName}_bool_exp = {}) {\\\\\\\\n    ${queryName}(\\\\\\\\n      limit: $limit\\\\\\\\n      offset: $offset\\\\\\\\n      order_by: {ts: desc}\\\\\\\\n      where: $where\\\\\\\\n    ) {\\\\\\\\n      post_id\\\\\\\\n    }\\\\\\\\n  }\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst [postIds, setPostIds] = useState([]);\\\\\\\\nconst [loading, setLoading] = useState(false);\\\\\\\\nconst [cachedItems, setCachedItems] = useState({});\\\\\\\\nconst [hasNext, setHasNext] = useState(true);\\\\\\\\n\\\\\\\\nconst buildWhereClause = () => {\\\\\\\\n  let where = {};\\\\\\\\n  if (props.author) {\\\\\\\\n    where = { author_id: { _eq: props.author }, ...where };\\\\\\\\n  }\\\\\\\\n  if (props.term) {\\\\\\\\n    where = { description: { _ilike: `%${props.term}%` }, ...where };\\\\\\\\n  }\\\\\\\\n  if (props.includeLabels && Array.isArray(props.includeLabels)) {\\\\\\\\n    const labelConditions = props.includeLabels.map((label) => ({\\\\\\\\n      labels: { _contains: label },\\\\\\\\n    }));\\\\\\\\n\\\\\\\\n    where = { _and: [...labelConditions, where] };\\\\\\\\n  }\\\\\\\\n  if (props.excludeLabels && Array.isArray(props.excludeLabels)) {\\\\\\\\n    const labelConditions = props.excludeLabels.map((label) => ({\\\\\\\\n      labels: { _nin: label },\\\\\\\\n    }));\\\\\\\\n\\\\\\\\n    where = { _and: [...labelConditions, where] };\\\\\\\\n  }\\\\\\\\n  if (!props.recency) {\\\\\\\\n    where = { parent_id: { _is_null: true }, ...where };\\\\\\\\n  }\\\\\\\\n  return where;\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst fetchPostIds = (offset) => {\\\\\\\\n  if (!offset) {\\\\\\\\n    offset = 0;\\\\\\\\n  }\\\\\\\\n  if (loading) return;\\\\\\\\n  setLoading(true);\\\\\\\\n  const variables = { limit: DISPLAY_COUNT, offset, where: buildWhereClause() };\\\\\\\\n  fetchGraphQL(query, \\\\\\\\\\\\\\\"DevhubPostsQuery\\\\\\\\\\\\\\\", variables).then((result) => {\\\\\\\\n    if (result.status === 200) {\\\\\\\\n      if (result.body.data) {\\\\\\\\n        const data = result.body.data[queryName];\\\\\\\\n        const newPostIds = data.map((p) => p.post_id);\\\\\\\\n        setPostIds(offset === 0 ? newPostIds : [...postIds, ...newPostIds]);\\\\\\\\n        setHasNext(data.length >= variables.limit);\\\\\\\\n      } else {\\\\\\\\n        console.error(\\\\\\\\\\\\\\\"GraphQL Error:\\\\\\\\\\\\\\\", result.errors);\\\\\\\\n      }\\\\\\\\n      setLoading(false);\\\\\\\\n    }\\\\\\\\n  });\\\\\\\\n};\\\\\\\\n\\\\\\\\nuseEffect(() => {\\\\\\\\n  fetchPostIds();\\\\\\\\n}, [props.author, props.term, props.tag, props.recency]);\\\\\\\\n\\\\\\\\nconst handleLoadMore = () => {\\\\\\\\n  if (!hasNext) return;\\\\\\\\n  fetchPostIds(postIds.length);\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst renderLoader = () => <Loader>Loading...</Loader>;\\\\\\\\n\\\\\\\\nconst renderItem = (postId) => (\\\\\\\\n  <div key={postId}>\\\\\\\\n    {(props.renderItem && props.renderItem(postId)) || <div>Post {postId}</div>}\\\\\\\\n  </div>\\\\\\\\n);\\\\\\\\n\\\\\\\\nconst cachedRenderItem = (postId) => {\\\\\\\\n  if (!(postId in cachedItems)) {\\\\\\\\n    cachedItems[postId] = renderItem(postId);\\\\\\\\n    setCachedItems({ ...cachedItems });\\\\\\\\n  }\\\\\\\\n  return cachedItems[postId];\\\\\\\\n};\\\\\\\\n\\\\\\\\nreturn (\\\\\\\\n  <Container>\\\\\\\\n    {loading && renderLoader()}\\\\\\\\n    {postIds.length > 0 ? (\\\\\\\\n      <InfiniteScroll\\\\\\\\n        pageStart={0}\\\\\\\\n        dataLength={postIds.length}\\\\\\\\n        loadMore={handleLoadMore}\\\\\\\\n        hasMore={hasNext}\\\\\\\\n        loader={renderLoader()}\\\\\\\\n      >\\\\\\\\n        <Layout>\\\\\\\\n          {/* Layout */}\\\\\\\\n          {postIds.map(cachedRenderItem)}\\\\\\\\n        </Layout>\\\\\\\\n      </InfiniteScroll>\\\\\\\\n    ) : (\\\\\\\\n      <p class=\\\\\\\\\\\\\\\"text-secondary\\\\\\\\\\\\\\\">No posts</p>\\\\\\\\n    )}\\\\\\\\n  </Container>\\\\\\\\n);\\\\\\\\n\"}}}}}"
      }
    ],
    "actions_agg": {
      "deposit": 0
    },
    "outcomes": {
      "status": true
    },
    "outcomes_agg": {
      "transaction_fee": 1.1118963714224e+21
    }
  },
  {
    "id": "1421697335",
    "receipt_id": "Fqs6b7yR7ihAoHRD2c7eDtBbYsRbhn92gumTZqTEqqwk",
    "predecessor_account_id": "system",
    "receiver_account_id": "devhub.near",
    "receipt_kind": "ACTION",
    "receipt_block": {
      "block_hash": "C8nkYWSbq4RbD9En3kbQiCSpzapAKQhuGv7zARTFwr1o",
      "block_height": 105794024,
      "block_timestamp": 1700101465124921900
    },
    "receipt_outcome": {
      "gas_burnt": 223182562500,
      "tokens_burnt": 0,
      "executor_account_id": "devhub.near",
      "status": true
    },
    "transaction_hash": "6PJWS2apxB5znJqMZ8tK7rJfWsfK347X8gjPYrWTV1W",
    "included_in_block_hash": "Be6gQtRoi7j9RAaFTSkex334Rxyo4qb8jM6ciXvVnmdV",
    "block_timestamp": "1700101463105021701",
    "block": {
      "block_height": 105794022
    },
    "receipt_conversion_tokens_burnt": "246221351975800000000",
    "actions": [
      {
        "action": "TRANSFER",
        "method": null,
        "deposit": 1.881853595473681e+23,
        "fee": 0,
        "args": null
      }
    ],
    "actions_agg": {
      "deposit": 0
    },
    "outcomes": {
      "status": true
    },
    "outcomes_agg": {
      "transaction_fee": 1.1118963714224e+21
    }
  },
  {
    "id": "1435048566",
    "receipt_id": "EE44k9mJqWgC3VqUFaVJuC8Ksc2tNw4T2YnDx6oAhyTG",
    "predecessor_account_id": "devhub.near",
    "receiver_account_id": "social.near",
    "receipt_kind": "ACTION",
    "receipt_block": {
      "block_hash": "3ooWkAe9oUYhFFkQ3ECayGpumjb3zoaxH4AtTMS6LxNN",
      "block_height": 105924238,
      "block_timestamp": 1700251507567037200
    },
    "receipt_outcome": {
      "gas_burnt": 7058434185789,
      "tokens_burnt": 705843418578900000000,
      "executor_account_id": "social.near",
      "status": true
    },
    "transaction_hash": "5ugbMBKHPKcyh34MiEzeATRqKRh4FGcSEUAMLBchvS7e",
    "included_in_block_hash": "8HdBndwbF3opQt15zNnjxR42R229wB6M7UFiT5hSbode",
    "block_timestamp": "1700251506196946209",
    "block": {
      "block_height": 105924237
    },
    "receipt_conversion_tokens_burnt": "245400093417600000000",
    "actions": [
      {
        "action": "FUNCTION_CALL",
        "method": "set",
        "deposit": 0,
        "fee": 705843418578900000000,
        "args": "{\"data\": {\"devhub.near\": {\"widget\": {\"devhub.entity.post.List\": {\"\": \"// This component implementation was forked from [IndexFeed], but it does not fully implement lazy loading.\\\\\\\\n// While this component uses InfiniteScroll, it still loads the whole list of Post IDs in one view call.\\\\\\\\n// The contract will need to be extended with pagination support, yet, even in the current state the page loads much faster.\\\\\\\\n// [IndexFeed]: https://near.social/#/mob.near/widget/WidgetSource?src=mob.near/widget/IndexFeed\\\\\\\\n\\\\\\\\nconst { href } = VM.require(\\\\\\\\\\\\\\\"devhub.near/widget/core.lib.url\\\\\\\\\\\\\\\");\\\\\\\\n\\\\\\\\nconst { draftState, onDraftStateChange } = VM.require(\\\\\\\\n  \\\\\\\\\\\\\\\"devhub.near/widget/devhub.entity.post.draft\\\\\\\\\\\\\\\"\\\\\\\\n);\\\\\\\\n\\\\\\\\nif (!href) {\\\\\\\\n  return <p>Loading modules...</p>;\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst QUERYAPI_ENDPOINT = `https://near-queryapi.api.pagoda.co/v1/graphql/`;\\\\\\\\n\\\\\\\\nconst queryName =\\\\\\\\n  props.queryName ?? `bo_near_devhub_v36_posts_with_latest_snapshot`;\\\\\\\\n\\\\\\\\nconst query = `query DevhubPostsQuery($limit: Int = 100, $offset: Int = 0, $where: ${queryName}_bool_exp = {}) {\\\\\\\\n    ${queryName}(\\\\\\\\n      limit: $limit\\\\\\\\n      offset: $offset\\\\\\\\n      order_by: {ts: desc}\\\\\\\\n      where: $where\\\\\\\\n    ) {\\\\\\\\n      post_id\\\\\\\\n    }\\\\\\\\n  }\\\\\\\\n`;\\\\\\\\n\\\\\\\\nfunction fetchGraphQL(operationsDoc, operationName, variables) {\\\\\\\\n  return asyncFetch(QUERYAPI_ENDPOINT, {\\\\\\\\n    method: \\\\\\\\\\\\\\\"POST\\\\\\\\\\\\\\\",\\\\\\\\n    headers: { \\\\\\\\\\\\\\\"x-hasura-role\\\\\\\\\\\\\\\": `bo_near` },\\\\\\\\n    body: JSON.stringify({\\\\\\\\n      query: operationsDoc,\\\\\\\\n      variables: variables,\\\\\\\\n      operationName: operationName,\\\\\\\\n    }),\\\\\\\\n  });\\\\\\\\n}\\\\\\\\n\\\\\\\\nfunction searchConditionChanged() {\\\\\\\\n  return (\\\\\\\\n    props.author != state.author ||\\\\\\\\n    props.term != state.term ||\\\\\\\\n    props.tag != state.tag ||\\\\\\\\n    props.recency != state.recency\\\\\\\\n  );\\\\\\\\n}\\\\\\\\n\\\\\\\\nfunction updateSearchCondition() {\\\\\\\\n  State.update({\\\\\\\\n    author: props.author,\\\\\\\\n    term: props.term,\\\\\\\\n    tag: props.tag,\\\\\\\\n    recency: props.recency,\\\\\\\\n    loading: true,\\\\\\\\n  });\\\\\\\\n}\\\\\\\\n\\\\\\\\nfunction getPostIds() {\\\\\\\\n  if (searchConditionChanged()) {\\\\\\\\n    updateSearchCondition();\\\\\\\\n    return;\\\\\\\\n  }\\\\\\\\n  let where = {};\\\\\\\\n  let authorId = props.author;\\\\\\\\n  let label = props.tag;\\\\\\\\n  if (authorId) {\\\\\\\\n    where = { author_id: { _eq: authorId }, ...where };\\\\\\\\n  }\\\\\\\\n  if (props.term) {\\\\\\\\n    where = { description: { _ilike: `%${props.term}%` }, ...where };\\\\\\\\n  }\\\\\\\\n  if (label) {\\\\\\\\n    if (typeof label === \\\\\\\\\\\\\\\"string\\\\\\\\\\\\\\\") {\\\\\\\\n      // Handle a single label\\\\\\\\n      where = { labels: { _contains: label }, ...where };\\\\\\\\n    } else if (Array.isArray(label)) {\\\\\\\\n      // Handle an array of labels\\\\\\\\n      where = {\\\\\\\\n        labels: {\\\\\\\\n          _containsAny: label,\\\\\\\\n        },\\\\\\\\n        ...where,\\\\\\\\n      };\\\\\\\\n    }\\\\\\\\n  }\\\\\\\\n  if (!props.recency) {\\\\\\\\n    // show only top level posts\\\\\\\\n    where = { parent_id: { _is_null: true }, ...where };\\\\\\\\n  }\\\\\\\\n\\\\\\\\n  // Don\\\\\\\\\\\\'t show blog and devhub-test posts\\\\\\\\n  where = {\\\\\\\\n    _and: [\\\\\\\\n      {\\\\\\\\n        _not: {\\\\\\\\n          labels: { _contains: \\\\\\\\\\\\\\\"blog\\\\\\\\\\\\\\\" },\\\\\\\\n          parent_id: { _is_null: true },\\\\\\\\n          post_type: { _eq: \\\\\\\\\\\\\\\"Comment\\\\\\\\\\\\\\\" },\\\\\\\\n        },\\\\\\\\n      },\\\\\\\\n      {\\\\\\\\n        _not: {\\\\\\\\n          labels: { _contains: \\\\\\\\\\\\\\\"devhub-test\\\\\\\\\\\\\\\" },\\\\\\\\n        },\\\\\\\\n      },\\\\\\\\n    ],\\\\\\\\n    ...where,\\\\\\\\n  };\\\\\\\\n\\\\\\\\n  console.log(\\\\\\\\\\\\\\\"searching for\\\\\\\\\\\\\\\", where);\\\\\\\\n  fetchGraphQL(query, \\\\\\\\\\\\\\\"DevhubPostsQuery\\\\\\\\\\\\\\\", {\\\\\\\\n    limit: 100,\\\\\\\\n    offset: 0,\\\\\\\\n    where,\\\\\\\\n  }).then((result) => {\\\\\\\\n    if (result.status === 200) {\\\\\\\\n      console.log(\\\\\\\\\\\\\\\"search success\\\\\\\\\\\\\\\");\\\\\\\\n      if (result.body.data) {\\\\\\\\n        const data = result.body.data[queryName];\\\\\\\\n        State.update({\\\\\\\\n          postIds: data.map((p) => p.post_id),\\\\\\\\n          loading: false,\\\\\\\\n        });\\\\\\\\n        console.log(\\\\\\\\\\\\\\\"found:\\\\\\\\\\\\\\\");\\\\\\\\n        console.log(data);\\\\\\\\n      }\\\\\\\\n    } else {\\\\\\\\n      console.error(\\\\\\\\\\\\\\\"error:\\\\\\\\\\\\\\\", result.body);\\\\\\\\n      State.update({ loading: false });\\\\\\\\n    }\\\\\\\\n  });\\\\\\\\n}\\\\\\\\n\\\\\\\\nState.init({\\\\\\\\n  period: \\\\\\\\\\\\\\\"week\\\\\\\\\\\\\\\",\\\\\\\\n});\\\\\\\\n\\\\\\\\ngetPostIds();\\\\\\\\n\\\\\\\\nfunction defaultRenderItem(postId, additionalProps) {\\\\\\\\n  if (!additionalProps) {\\\\\\\\n    additionalProps = {};\\\\\\\\n  }\\\\\\\\n  // It is important to have a non-zero-height element as otherwise InfiniteScroll loads too many items on initial load\\\\\\\\n  return (\\\\\\\\n    <div className=\\\\\\\\\\\\\\\"py-2\\\\\\\\\\\\\\\" style={{ minHeight: \\\\\\\\\\\\\\\"150px\\\\\\\\\\\\\\\" }}>\\\\\\\\n      <Widget\\\\\\\\n        src={\\\\\\\\\\\\\\\"devhub.near/widget/devhub.entity.post.Post\\\\\\\\\\\\\\\"}\\\\\\\\n        props={{\\\\\\\\n          id: postId,\\\\\\\\n          expandable: true,\\\\\\\\n          defaultExpanded: false,\\\\\\\\n          isInList: true,\\\\\\\\n          draftState,\\\\\\\\n          isPreview: false,\\\\\\\\n          onDraftStateChange,\\\\\\\\n          ...additionalProps,\\\\\\\\n          referral: postId,\\\\\\\\n        }}\\\\\\\\n      />\\\\\\\\n    </div>\\\\\\\\n  );\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst renderItem = props.renderItem ?? defaultRenderItem;\\\\\\\\n\\\\\\\\nconst cachedRenderItem = (item, i) => {\\\\\\\\n  if (props.term) {\\\\\\\\n    return renderItem(item, {\\\\\\\\n      searchKeywords: [props.term],\\\\\\\\n    });\\\\\\\\n  }\\\\\\\\n\\\\\\\\n  const key = JSON.stringify(item);\\\\\\\\n\\\\\\\\n  if (!(key in state.cachedItems)) {\\\\\\\\n    state.cachedItems[key] = renderItem(item);\\\\\\\\n    State.update();\\\\\\\\n  }\\\\\\\\n  return state.cachedItems[key];\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst initialRenderLimit = props.initialRenderLimit ?? 3;\\\\\\\\nconst addDisplayCount = props.nextLimit ?? initialRenderLimit;\\\\\\\\n\\\\\\\\nconst ONE_DAY = 60 * 60 * 24 * 1000;\\\\\\\\nconst ONE_WEEK = 60 * 60 * 24 * 1000 * 7;\\\\\\\\nconst ONE_MONTH = 60 * 60 * 24 * 1000 * 30;\\\\\\\\n\\\\\\\\nfunction getHotnessScore(post) {\\\\\\\\n  //post.id - shows the age of the post, should grow exponentially, since newer posts are more important\\\\\\\\n  //post.likes.length - linear value\\\\\\\\n  const age = Math.pow(post.id, 5);\\\\\\\\n  const comments = post.comments;\\\\\\\\n  const commentAge = comments.reduce((sum, age) => sum + Math.pow(age, 5), 0);\\\\\\\\n  const totalAge = age + commentAge;\\\\\\\\n  //use log functions to make likes score and exponentially big age score close to each other\\\\\\\\n  return Math.log10(post.likes.length) + Math.log(Math.log10(totalAge));\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst getPeriodText = (period) => {\\\\\\\\n  let text = \\\\\\\\\\\\\\\"Last 24 hours\\\\\\\\\\\\\\\";\\\\\\\\n  if (period === \\\\\\\\\\\\\\\"week\\\\\\\\\\\\\\\") {\\\\\\\\n    text = \\\\\\\\\\\\\\\"Last week\\\\\\\\\\\\\\\";\\\\\\\\n  }\\\\\\\\n  if (period === \\\\\\\\\\\\\\\"month\\\\\\\\\\\\\\\") {\\\\\\\\n    text = \\\\\\\\\\\\\\\"Last month\\\\\\\\\\\\\\\";\\\\\\\\n  }\\\\\\\\n  return text;\\\\\\\\n};\\\\\\\\n\\\\\\\\nlet postIds = state.postIds ?? null;\\\\\\\\n\\\\\\\\nconst loader = (\\\\\\\\n  <div className=\\\\\\\\\\\\\\\"loader\\\\\\\\\\\\\\\" key={\\\\\\\\\\\\\\\"loader\\\\\\\\\\\\\\\"}>\\\\\\\\n    <span\\\\\\\\n      className=\\\\\\\\\\\\\\\"spinner-grow spinner-grow-sm me-1\\\\\\\\\\\\\\\"\\\\\\\\n      role=\\\\\\\\\\\\\\\"status\\\\\\\\\\\\\\\"\\\\\\\\n      aria-hidden=\\\\\\\\\\\\\\\"true\\\\\\\\\\\\\\\"\\\\\\\\n    />\\\\\\\\n    Loading ...\\\\\\\\n  </div>\\\\\\\\n);\\\\\\\\n\\\\\\\\nif (postIds === null) {\\\\\\\\n  return loader;\\\\\\\\n}\\\\\\\\nconst initialItems = postIds;\\\\\\\\n//const initialItems = postIds.map(postId => ({ id: postId, ...Near.view(nearDevGovGigsContractAccountId, \\\\\\\\\\\\\\\"get_post\\\\\\\\\\\\\\\", { post_id: postId }) }));\\\\\\\\n\\\\\\\\n// const computeFetchFrom = (items, limit) => {\\\\\\\\n//   if (!items || items.length < limit) {\\\\\\\\n//     return false;\\\\\\\\n//   }\\\\\\\\n//   const blockHeight = items[items.length - 1].blockHeight;\\\\\\\\n//   return index.options.order === \\\\\\\\\\\\\\\"desc\\\\\\\\\\\\\\\" ? blockHeight - 1 : blockHeight + 1;\\\\\\\\n// };\\\\\\\\n\\\\\\\\n// const mergeItems = (newItems) => {\\\\\\\\n//   const items = [\\\\\\\\n//     ...new Set([...newItems, ...state.items].map((i) => JSON.stringify(i))),\\\\\\\\n//   ].map((i) => JSON.parse(i));\\\\\\\\n//   items.sort((a, b) => a.blockHeight - b.blockHeight);\\\\\\\\n//   if (index.options.order === \\\\\\\\\\\\\\\"desc\\\\\\\\\\\\\\\") {\\\\\\\\n//     items.reverse();\\\\\\\\n//   }\\\\\\\\n//   return items;\\\\\\\\n// };\\\\\\\\n\\\\\\\\nconst jInitialItems = JSON.stringify(initialItems);\\\\\\\\nif (state.jInitialItems !== jInitialItems) {\\\\\\\\n  // const jIndex = JSON.stringify(index);\\\\\\\\n  // if (jIndex !== state.jIndex) {\\\\\\\\n  State.update({\\\\\\\\n    jIndex,\\\\\\\\n    jInitialItems,\\\\\\\\n    items: initialItems,\\\\\\\\n    fetchFrom: false,\\\\\\\\n    //nextFetchFrom: computeFetchFrom(initialItems, index.options.limit),\\\\\\\\n    nextFetchFrom: false,\\\\\\\\n    displayCount: initialRenderLimit,\\\\\\\\n    cachedItems: {},\\\\\\\\n  });\\\\\\\\n  // } else {\\\\\\\\n  //   State.update({\\\\\\\\n  //     jInitialItems,\\\\\\\\n  //     items: mergeItems(initialItems),\\\\\\\\n  //   });\\\\\\\\n  // }\\\\\\\\n}\\\\\\\\n\\\\\\\\nif (state.fetchFrom) {\\\\\\\\n  // TODO: fetchFrom\\\\\\\\n  // const limit = addDisplayCount;\\\\\\\\n  // const newItems = Social.index(\\\\\\\\n  //   index.action,\\\\\\\\n  //   index.key,\\\\\\\\n  //   Object.assign({}, index.options, {\\\\\\\\n  //     from: state.fetchFrom,\\\\\\\\n  //     subscribe: undefined,\\\\\\\\n  //     limit,\\\\\\\\n  //   })\\\\\\\\n  // );\\\\\\\\n  // if (newItems !== null) {\\\\\\\\n  //   State.update({\\\\\\\\n  //     items: mergeItems(newItems),\\\\\\\\n  //     fetchFrom: false,\\\\\\\\n  //     nextFetchFrom: computeFetchFrom(newItems, limit),\\\\\\\\n  //   });\\\\\\\\n  // }\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst makeMoreItems = () => {\\\\\\\\n  State.update({\\\\\\\\n    displayCount: state.displayCount + addDisplayCount,\\\\\\\\n  });\\\\\\\\n  if (\\\\\\\\n    state.items.length - state.displayCount < addDisplayCount * 2 &&\\\\\\\\n    !state.fetchFrom &&\\\\\\\\n    state.nextFetchFrom &&\\\\\\\\n    state.nextFetchFrom !== state.fetchFrom\\\\\\\\n  ) {\\\\\\\\n    State.update({\\\\\\\\n      fetchFrom: state.nextFetchFrom,\\\\\\\\n    });\\\\\\\\n  }\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst fetchMore =\\\\\\\\n  props.manual &&\\\\\\\\n  (state.fetchFrom && state.items.length < state.displayCount\\\\\\\\n    ? loader\\\\\\\\n    : state.displayCount < state.items.length && (\\\\\\\\n        <div key={\\\\\\\\\\\\\\\"loader more\\\\\\\\\\\\\\\"}>\\\\\\\\n          <a href=\\\\\\\\\\\\\\\"javascript:void\\\\\\\\\\\\\\\" onClick={(e) => makeMoreItems()}>\\\\\\\\n            {props.loadMoreText ?? \\\\\\\\\\\\\\\"Load more...\\\\\\\\\\\\\\\"}\\\\\\\\n          </a>\\\\\\\\n        </div>\\\\\\\\n      ));\\\\\\\\n\\\\\\\\nconst items = state.items ? state.items.slice(0, state.displayCount) : [];\\\\\\\\n\\\\\\\\nconst renderedItems = items.map(cachedRenderItem);\\\\\\\\n\\\\\\\\nconst Head =\\\\\\\\n  props.recency == \\\\\\\\\\\\\\\"hot\\\\\\\\\\\\\\\" ? (\\\\\\\\n    <div class=\\\\\\\\\\\\\\\"row\\\\\\\\\\\\\\\">\\\\\\\\n      <div class=\\\\\\\\\\\\\\\"fs-5 col-6 align-self-center\\\\\\\\\\\\\\\">\\\\\\\\n        <i class=\\\\\\\\\\\\\\\"bi-fire\\\\\\\\\\\\\\\"></i>\\\\\\\\n        <span>Hottest Posts</span>\\\\\\\\n      </div>\\\\\\\\n      <div class=\\\\\\\\\\\\\\\"col-6 dropdown d-flex justify-content-end\\\\\\\\\\\\\\\">\\\\\\\\n        <a\\\\\\\\n          class=\\\\\\\\\\\\\\\"btn btn-secondary dropdown-toggle\\\\\\\\\\\\\\\"\\\\\\\\n          href=\\\\\\\\\\\\\\\"#\\\\\\\\\\\\\\\"\\\\\\\\n          role=\\\\\\\\\\\\\\\"button\\\\\\\\\\\\\\\"\\\\\\\\n          id=\\\\\\\\\\\\\\\"dropdownMenuLink\\\\\\\\\\\\\\\"\\\\\\\\n          data-bs-toggle=\\\\\\\\\\\\\\\"dropdown\\\\\\\\\\\\\\\"\\\\\\\\n          aria-expanded=\\\\\\\\\\\\\\\"false\\\\\\\\\\\\\\\"\\\\\\\\n        >\\\\\\\\n          {getPeriodText(state.period)}\\\\\\\\n        </a>\\\\\\\\n\\\\\\\\n        <ul class=\\\\\\\\\\\\\\\"dropdown-menu\\\\\\\\\\\\\\\" aria-labelledby=\\\\\\\\\\\\\\\"dropdownMenuLink\\\\\\\\\\\\\\\">\\\\\\\\n          <li>\\\\\\\\n            <button\\\\\\\\n              class=\\\\\\\\\\\\\\\"dropdown-item\\\\\\\\\\\\\\\"\\\\\\\\n              onClick={() => {\\\\\\\\n                State.update({ period: \\\\\\\\\\\\\\\"day\\\\\\\\\\\\\\\" });\\\\\\\\n              }}\\\\\\\\n            >\\\\\\\\n              {getPeriodText(\\\\\\\\\\\\\\\"day\\\\\\\\\\\\\\\")}\\\\\\\\n            </button>\\\\\\\\n          </li>\\\\\\\\n          <li>\\\\\\\\n            <button\\\\\\\\n              class=\\\\\\\\\\\\\\\"dropdown-item\\\\\\\\\\\\\\\"\\\\\\\\n              onClick={() => {\\\\\\\\n                State.update({ period: \\\\\\\\\\\\\\\"week\\\\\\\\\\\\\\\" });\\\\\\\\n              }}\\\\\\\\n            >\\\\\\\\n              {getPeriodText(\\\\\\\\\\\\\\\"week\\\\\\\\\\\\\\\")}\\\\\\\\n            </button>\\\\\\\\n          </li>\\\\\\\\n          <li>\\\\\\\\n            <button\\\\\\\\n              class=\\\\\\\\\\\\\\\"dropdown-item\\\\\\\\\\\\\\\"\\\\\\\\n              onClick={() => {\\\\\\\\n                State.update({ period: \\\\\\\\\\\\\\\"month\\\\\\\\\\\\\\\" });\\\\\\\\n              }}\\\\\\\\n            >\\\\\\\\n              {getPeriodText(\\\\\\\\\\\\\\\"month\\\\\\\\\\\\\\\")}\\\\\\\\n            </button>\\\\\\\\n          </li>\\\\\\\\n        </ul>\\\\\\\\n      </div>\\\\\\\\n    </div>\\\\\\\\n  ) : (\\\\\\\\n    <></>\\\\\\\\n  );\\\\\\\\n\\\\\\\\nreturn (\\\\\\\\n  <>\\\\\\\\n    {Head}\\\\\\\\n    {state.loading ? loader : null}\\\\\\\\n    {is_edit_or_add_post_transaction ? (\\\\\\\\n      <p class=\\\\\\\\\\\\\\\"text-secondary mt-4\\\\\\\\\\\\\\\">\\\\\\\\n        Post {transaction_method_name == \\\\\\\\\\\\\\\"edit_post\\\\\\\\\\\\\\\" ? \\\\\\\\\\\\\\\"edited\\\\\\\\\\\\\\\" : \\\\\\\\\\\\\\\"added\\\\\\\\\\\\\\\"}{\\\\\\\\\\\\\\\" \\\\\\\\\\\\\\\"}\\\\\\\\n        successfully. Back to{\\\\\\\\\\\\\\\" \\\\\\\\\\\\\\\"}\\\\\\\\n        <Link\\\\\\\\n          style={{\\\\\\\\n            color: \\\\\\\\\\\\\\\"#3252A6\\\\\\\\\\\\\\\",\\\\\\\\n          }}\\\\\\\\n          className=\\\\\\\\\\\\\\\"fw-bold\\\\\\\\\\\\\\\"\\\\\\\\n          to={href({\\\\\\\\n            widgetSrc: \\\\\\\\\\\\\\\"devhub.near/widget/app\\\\\\\\\\\\\\\",\\\\\\\\n            params: { page: \\\\\\\\\\\\\\\"feed\\\\\\\\\\\\\\\" },\\\\\\\\n          })}\\\\\\\\n        >\\\\\\\\n          feed\\\\\\\\n        </Link>\\\\\\\\n      </p>\\\\\\\\n    ) : state.items.length > 0 ? (\\\\\\\\n      <InfiniteScroll\\\\\\\\n        pageStart={0}\\\\\\\\n        loadMore={makeMoreItems}\\\\\\\\n        hasMore={state.displayCount < state.items.length}\\\\\\\\n        loader={loader}\\\\\\\\n      >\\\\\\\\n        {renderedItems}\\\\\\\\n      </InfiniteScroll>\\\\\\\\n    ) : (\\\\\\\\n      <p class=\\\\\\\\\\\\\\\"text-secondary\\\\\\\\\\\\\\\">\\\\\\\\n        No posts{\\\\\\\\\\\\\\\" \\\\\\\\\\\\\\\"}\\\\\\\\n        {props.term || props.tag || props.author ? \\\\\\\\\\\\\\\"matches search\\\\\\\\\\\\\\\" : \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\"}\\\\\\\\n        {props.recency === \\\\\\\\\\\\\\\"hot\\\\\\\\\\\\\\\"\\\\\\\\n          ? \\\\\\\\\\\\\\\" in \\\\\\\\\\\\\\\" + getPeriodText(state.period).toLowerCase()\\\\\\\\n          : \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\"}\\\\\\\\n      </p>\\\\\\\\n    )}\\\\\\\\n  </>\\\\\\\\n);\\\\\\\\n\"}}}}}"
      }
    ],
    "actions_agg": {
      "deposit": 0
    },
    "outcomes": {
      "status": true
    },
    "outcomes_agg": {
      "transaction_fee": 951243511996500000000
    }
  },
  {
    "id": "1435048671",
    "receipt_id": "oZ6J11FsJ4z12qvHFmBRCt5dvMtnmX7QsKcF5uFWd2q",
    "predecessor_account_id": "system",
    "receiver_account_id": "devhub.near",
    "receipt_kind": "ACTION",
    "receipt_block": {
      "block_hash": "7eeneqPDAowNDUxZDRSyMrWnnQgmcytDuwKjf65hiq6F",
      "block_height": 105924240,
      "block_timestamp": 1700251510172057900
    },
    "receipt_outcome": {
      "gas_burnt": 223182562500,
      "tokens_burnt": 0,
      "executor_account_id": "devhub.near",
      "status": true
    },
    "transaction_hash": "5ugbMBKHPKcyh34MiEzeATRqKRh4FGcSEUAMLBchvS7e",
    "included_in_block_hash": "8HdBndwbF3opQt15zNnjxR42R229wB6M7UFiT5hSbode",
    "block_timestamp": "1700251506196946209",
    "block": {
      "block_height": 105924237
    },
    "receipt_conversion_tokens_burnt": "245400093417600000000",
    "actions": [
      {
        "action": "TRANSFER",
        "method": null,
        "deposit": 1.8834005795231463e+23,
        "fee": 0,
        "args": null
      }
    ],
    "actions_agg": {
      "deposit": 0
    },
    "outcomes": {
      "status": true
    },
    "outcomes_agg": {
      "transaction_fee": 951243511996500000000
    }
  },
  {
    "id": "1456888369",
    "receipt_id": "7z8zSGifxLHixB71n2JPEdtdki7Knm2Z4WMkztiJrsTa",
    "predecessor_account_id": "devhub.near",
    "receiver_account_id": "social.near",
    "receipt_kind": "ACTION",
    "receipt_block": {
      "block_hash": "3Wk55PfiCZiwDXdwAK2FXAq9TmQCr9rDJMdSFmpkP42C",
      "block_height": 106143055,
      "block_timestamp": 1700501824132626000
    },
    "receipt_outcome": {
      "gas_burnt": 5598919653583,
      "tokens_burnt": 559891965358300000000,
      "executor_account_id": "social.near",
      "status": true
    },
    "transaction_hash": "AYXgHdThscAnGtmxtVENCCEQgQfrjPubLD3wrUateoP1",
    "included_in_block_hash": "jrvN9jqHcYSWGoUwMjPoFfC69zG6uo86TQEfkgmftiY",
    "block_timestamp": "1700501823214812488",
    "block": {
      "block_height": 106143054
    },
    "receipt_conversion_tokens_burnt": "243423527761600000000",
    "actions": [
      {
        "action": "FUNCTION_CALL",
        "method": "set",
        "deposit": 0,
        "fee": 559891965358300000000,
        "args": "{\"data\": {\"devhub.near\": {\"widget\": {\"devhub.components.molecule.ProfileCard\": {\"\": \"const MutedText = styled.span`\\\\\\\\n  color: #818181;\\\\\\\\n\\\\\\\\n  font-size: 16px;\\\\\\\\n  font-style: normal;\\\\\\\\n  font-weight: 400;\\\\\\\\n  line-height: 20px; /* 125% */\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst AccountName = styled.span`\\\\\\\\n  color: #818181;\\\\\\\\n  font-size: 16px;\\\\\\\\n  font-style: normal;\\\\\\\\n  font-weight: 500;\\\\\\\\n  line-height: 20px;\\\\\\\\n\\\\\\\\n  max-width: 30ch;\\\\\\\\n  overflow: hidden;\\\\\\\\n  text-overflow: ellipsis;\\\\\\\\n  white-space: nowrap;\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst ProfileCard = (props) => {\\\\\\\\n  const accountId = props.accountId ?? context.accountId;\\\\\\\\n  const link = props.link ?? true;\\\\\\\\n  // const hideAccountId = props.hideAccountId;\\\\\\\\n  // const hideName = props.hideName;\\\\\\\\n  const hideImage = props.hideImage;\\\\\\\\n  const iconOnly = props.iconOnly;\\\\\\\\n\\\\\\\\n  const profile = props.profile ?? Social.getr(`${accountId}/profile`);\\\\\\\\n\\\\\\\\n  const name = profile.name ?? accountId;\\\\\\\\n  const title = props.title ?? `${name} @${accountId}`;\\\\\\\\n  const tooltip =\\\\\\\\n    props.tooltip && (props.tooltip === true ? title : props.tooltip);\\\\\\\\n\\\\\\\\n  let inner = (\\\\\\\\n    <div className=\\\\\\\\\\\\\\\"d-flex flex-row justify-content-center align-items-center\\\\\\\\\\\\\\\">\\\\\\\\n      {!hideImage && (\\\\\\\\n        <Widget\\\\\\\\n          key=\\\\\\\\\\\\\\\"image\\\\\\\\\\\\\\\"\\\\\\\\n          src=\\\\\\\\\\\\\\\"mob.near/widget/ProfileImage\\\\\\\\\\\\\\\"\\\\\\\\n          props={{\\\\\\\\n            style: { width: \\\\\\\\\\\\\\\"2.5em\\\\\\\\\\\\\\\", height: \\\\\\\\\\\\\\\"2.5em\\\\\\\\\\\\\\\", marginRight: \\\\\\\\\\\\\\\"0.3em\\\\\\\\\\\\\\\" },\\\\\\\\n            profile,\\\\\\\\n            accountId,\\\\\\\\n            className: \\\\\\\\\\\\\\\"d-inline-block flex-shrink-0\\\\\\\\\\\\\\\",\\\\\\\\n            imageClassName: \\\\\\\\\\\\\\\"rounded-circle w-100 h-100 align-top\\\\\\\\\\\\\\\",\\\\\\\\n          }}\\\\\\\\n        />\\\\\\\\n      )}\\\\\\\\n      {!iconOnly && (\\\\\\\\n        <div className=\\\\\\\\\\\\\\\"d-flex flex-column gap-1\\\\\\\\\\\\\\\">\\\\\\\\n          <AccountName key=\\\\\\\\\\\\\\\"accountName\\\\\\\\\\\\\\\">{name}</AccountName>\\\\\\\\n          <AccountName key=\\\\\\\\\\\\\\\"accountId\\\\\\\\\\\\\\\">@{accountId}</AccountName>\\\\\\\\n        </div>\\\\\\\\n      )}\\\\\\\\n    </div>\\\\\\\\n  );\\\\\\\\n\\\\\\\\n  inner = link ? (\\\\\\\\n    <a\\\\\\\\n      href={\\\\\\\\n        link !== true\\\\\\\\n          ? link\\\\\\\\n          : `/mob.near/widget/ProfilePage?accountId=${accountId}`\\\\\\\\n      }\\\\\\\\n      className=\\\\\\\\\\\\\\\"link-dark text-truncate d-inline-flex\\\\\\\\\\\\\\\"\\\\\\\\n    >\\\\\\\\n      {inner}\\\\\\\\n    </a>\\\\\\\\n  ) : (\\\\\\\\n    <span className=\\\\\\\\\\\\\\\"text-truncate d-inline-flex\\\\\\\\\\\\\\\">{inner}</span>\\\\\\\\n  );\\\\\\\\n\\\\\\\\n  if (props.tooltip === true) {\\\\\\\\n    return (\\\\\\\\n      <Widget\\\\\\\\n        src=\\\\\\\\\\\\\\\"mob.near/widget/Profile.OverlayTrigger\\\\\\\\\\\\\\\"\\\\\\\\n        props={{ accountId, children: inner }}\\\\\\\\n      />\\\\\\\\n    );\\\\\\\\n  }\\\\\\\\n  if (tooltip) {\\\\\\\\n    inner = (\\\\\\\\n      <OverlayTrigger placement=\\\\\\\\\\\\\\\"auto\\\\\\\\\\\\\\\" overlay={<Tooltip>{tooltip}</Tooltip>}>\\\\\\\\n        {inner}\\\\\\\\n      </OverlayTrigger>\\\\\\\\n    );\\\\\\\\n  }\\\\\\\\n  return (\\\\\\\\n    <div className=\\\\\\\\\\\\\\\"d-flex flex-row align-items-center\\\\\\\\\\\\\\\">\\\\\\\\n      {inner}\\\\\\\\n      <Widget\\\\\\\\n        src=\\\\\\\\\\\\\\\"neardevgov.near/widget/BadgesList\\\\\\\\\\\\\\\"\\\\\\\\n        props={{\\\\\\\\n          accountId,\\\\\\\\n          mode: \\\\\\\\\\\\\\\"compact\\\\\\\\\\\\\\\",\\\\\\\\n        }}\\\\\\\\n      />\\\\\\\\n    </div>\\\\\\\\n  );\\\\\\\\n};\\\\\\\\n\\\\\\\\nreturn ProfileCard(props);\\\\\\\\n\"}}}}}"
      }
    ],
    "actions_agg": {
      "deposit": 0
    },
    "outcomes": {
      "status": true
    },
    "outcomes_agg": {
      "transaction_fee": 803315493119900000000
    }
  },
  {
    "id": "1456888424",
    "receipt_id": "DpPS4umXyhP5Yn4a6aAufyF9bvtwM6pk3vMowkWkQ1Vh",
    "predecessor_account_id": "system",
    "receiver_account_id": "devhub.near",
    "receipt_kind": "ACTION",
    "receipt_block": {
      "block_hash": "4BbxA1kiG4zovF3wkSkVBe99DFbiabMtNfcqKUF1p1LD",
      "block_height": 106143056,
      "block_timestamp": 1700501825115465200
    },
    "receipt_outcome": {
      "gas_burnt": 223182562500,
      "tokens_burnt": 0,
      "executor_account_id": "devhub.near",
      "status": true
    },
    "transaction_hash": "AYXgHdThscAnGtmxtVENCCEQgQfrjPubLD3wrUateoP1",
    "included_in_block_hash": "jrvN9jqHcYSWGoUwMjPoFfC69zG6uo86TQEfkgmftiY",
    "block_timestamp": "1700501823214812488",
    "block": {
      "block_height": 106143054
    },
    "receipt_conversion_tokens_burnt": "243423527761600000000",
    "actions": [
      {
        "action": "TRANSFER",
        "method": null,
        "deposit": 1.8847365507611975e+23,
        "fee": 0,
        "args": null
      }
    ],
    "actions_agg": {
      "deposit": 0
    },
    "outcomes": {
      "status": true
    },
    "outcomes_agg": {
      "transaction_fee": 803315493119900000000
    }
  },
  {
    "id": "1504635252",
    "receipt_id": "8JvJwRgJXLUAQqWJZ2FRbR3ifRopmKLoAPdYP5aFp7PR",
    "predecessor_account_id": "devhub.near",
    "receiver_account_id": "social.near",
    "receipt_kind": "ACTION",
    "receipt_block": {
      "block_hash": "CZVfFAoabLB9b6YoiJxos5kT1kowcEEmQrsNjUH2cans",
      "block_height": 106621356,
      "block_timestamp": 1701052025410919000
    },
    "receipt_outcome": {
      "gas_burnt": 10657032014246,
      "tokens_burnt": 1.0657032014246e+21,
      "executor_account_id": "social.near",
      "status": true
    },
    "transaction_hash": "GcwCLqXxryQD3UCcYDRX1V1gHJLjokxpdJ5zXk5CqUWu",
    "included_in_block_hash": "iLNUG6y6rGZMtj3uHzcjQkYNk8jsn2krNN8iRUpUF3v",
    "block_timestamp": "1701052021657493990",
    "block": {
      "block_height": 106621354
    },
    "receipt_conversion_tokens_burnt": "249052268013200000000",
    "actions": [
      {
        "action": "FUNCTION_CALL",
        "method": "set",
        "deposit": 0,
        "fee": 1.0657032014246e+21,
        "args": "{\"data\": {\"devhub.near\": {\"widget\": {\"devhub.page.create\": {\"\": \"/* INCLUDE: \\\\\\\\\\\\\\\"core/lib/autocomplete\\\\\\\\\\\\\\\" */\\\\\\\\n\\\\\\\\nState.init({\\\\\\\\n  seekingFunding: false,\\\\\\\\n  author_id: context.accountId,\\\\\\\\n  // Should be a list of objects with field \\\\\\\\\\\\\\\"name\\\\\\\\\\\\\\\".\\\\\\\\n  labels,\\\\\\\\n  // Should be a list of labels as strings.\\\\\\\\n  // Both of the label structures should be modified together.\\\\\\\\n  labelStrings,\\\\\\\\n  postType: \\\\\\\\\\\\\\\"Idea\\\\\\\\\\\\\\\",\\\\\\\\n  name: props.name ?? \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\",\\\\\\\\n  description: props.description ?? \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\",\\\\\\\\n  amount: props.amount ?? \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\",\\\\\\\\n  token: props.token ?? \\\\\\\\\\\\\\\"USDT\\\\\\\\\\\\\\\",\\\\\\\\n  supervisor: props.supervisor ?? \\\\\\\\\\\\\\\"neardevdao.near\\\\\\\\\\\\\\\",\\\\\\\\n  githubLink: props.githubLink ?? \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\",\\\\\\\\n  warning: \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\",\\\\\\\\n  waitForDraftStateRestore: true,\\\\\\\\n  mentionInput: \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\", // text next to @ tag\\\\\\\\n  mentionsArray: [], // all the mentions in the description\\\\\\\\n});\\\\\\\\n\\\\\\\\nconst autocompleteEnabled = true;\\\\\\\\n\\\\\\\\nconst AutoComplete = styled.div`\\\\\\\\n  z-index: 5;\\\\\\\\n\\\\\\\\n  > div > div {\\\\\\\\n    padding: calc(var(--padding) / 2);\\\\\\\\n  }\\\\\\\\n`;\\\\\\\\n\\\\\\\\nfunction textareaInputHandler(value) {\\\\\\\\n  const words = value.split(/\\\\\\\\\\\\\\\\s+/);\\\\\\\\n  const allMentiones = words\\\\\\\\n    .filter((word) => word.startsWith(\\\\\\\\\\\\\\\"@\\\\\\\\\\\\\\\"))\\\\\\\\n    .map((mention) => mention.slice(1));\\\\\\\\n  const newMentiones = allMentiones.filter(\\\\\\\\n    (item) => !state.mentionsArray.includes(item)\\\\\\\\n  );\\\\\\\\n\\\\\\\\n  State.update((lastKnownState) => ({\\\\\\\\n    ...lastKnownState,\\\\\\\\n    text: value,\\\\\\\\n    showAccountAutocomplete: newMentiones?.length > 0,\\\\\\\\n    mentionsArray: allMentiones,\\\\\\\\n    mentionInput: newMentiones?.[0] ?? \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\",\\\\\\\\n  }));\\\\\\\\n}\\\\\\\\n\\\\\\\\nfunction autoCompleteAccountId(id) {\\\\\\\\n  // to make sure we update the @ at correct index\\\\\\\\n  let currentIndex = 0;\\\\\\\\n  const updatedDescription = state.description.replace(\\\\\\\\n    /(?:^|\\\\\\\\\\\\\\\\s)(@[^\\\\\\\\\\\\\\\\s]*)/g,\\\\\\\\n    (match) => {\\\\\\\\n      if (currentIndex === state.mentionsArray.indexOf(state.mentionInput)) {\\\\\\\\n        currentIndex++;\\\\\\\\n        return ` @${id}`;\\\\\\\\n      } else {\\\\\\\\n        currentIndex++;\\\\\\\\n        return match;\\\\\\\\n      }\\\\\\\\n    }\\\\\\\\n  );\\\\\\\\n\\\\\\\\n  State.update((lastKnownState) => ({\\\\\\\\n    ...lastKnownState,\\\\\\\\n    handler: \\\\\\\\\\\\\\\"autocompleteSelected\\\\\\\\\\\\\\\",\\\\\\\\n    description: updatedDescription,\\\\\\\\n    showAccountAutocomplete: false,\\\\\\\\n  }));\\\\\\\\n}\\\\\\\\n/* END_INCLUDE: \\\\\\\\\\\\\\\"core/lib/autocomplete\\\\\\\\\\\\\\\" */\\\\\\\\n\\\\\\\\nconst { href } = VM.require(\\\\\\\\\\\\\\\"devhub.near/widget/core.lib.url\\\\\\\\\\\\\\\");\\\\\\\\n\\\\\\\\nconst { DRAFT_STATE_STORAGE_KEY, draftState, onDraftStateChange } = VM.require(\\\\\\\\n  \\\\\\\\\\\\\\\"devhub.near/widget/devhub.entity.post.draft\\\\\\\\\\\\\\\"\\\\\\\\n);\\\\\\\\n\\\\\\\\nif (!href) {\\\\\\\\n  return <p>Loading modules...</p>;\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst parentId = props.parentId ?? null;\\\\\\\\nconst postId = props.postId ?? null;\\\\\\\\nconst mode = props.mode ?? \\\\\\\\\\\\\\\"Create\\\\\\\\\\\\\\\";\\\\\\\\n\\\\\\\\nconst referralLabels = props.referral ? [`referral:${props.referral}`] : [];\\\\\\\\nconst labelStrings = (props.labels ? props.labels.split(\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\") : []).concat(\\\\\\\\n  referralLabels\\\\\\\\n);\\\\\\\\nconst labels = labelStrings.map((s) => {\\\\\\\\n  return { name: s };\\\\\\\\n});\\\\\\\\n\\\\\\\\nif (state.waitForDraftStateRestore) {\\\\\\\\n  const draftstatestring = Storage.privateGet(DRAFT_STATE_STORAGE_KEY);\\\\\\\\n  if (draftstatestring != null) {\\\\\\\\n    if (props.transactionHashes) {\\\\\\\\n      State.update({ waitForDraftStateRestore: false });\\\\\\\\n      Storage.privateSet(DRAFT_STATE_STORAGE_KEY, undefined);\\\\\\\\n    } else {\\\\\\\\n      try {\\\\\\\\n        const draftstate = JSON.parse(draftstatestring);\\\\\\\\n        State.update(draftstate);\\\\\\\\n      } catch (e) {\\\\\\\\n        console.error(\\\\\\\\\\\\\\\"error restoring draft\\\\\\\\\\\\\\\", draftstatestring);\\\\\\\\n      }\\\\\\\\n    }\\\\\\\\n    State.update({ waitForDraftStateRestore: false });\\\\\\\\n  }\\\\\\\\n}\\\\\\\\n\\\\\\\\n// This must be outside onClick, because Near.view returns null at first, and when the view call finished, it returns true/false.\\\\\\\\n// If checking this inside onClick, it will give `null` and we cannot tell the result is true or false.\\\\\\\\nlet grantNotify = Near.view(\\\\\\\\\\\\\\\"social.near\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"is_write_permission_granted\\\\\\\\\\\\\\\", {\\\\\\\\n  predecessor_id: \\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\",\\\\\\\\n  key: context.accountId + \\\\\\\\\\\\\\\"/index/notify\\\\\\\\\\\\\\\",\\\\\\\\n});\\\\\\\\nif (grantNotify === null) {\\\\\\\\n  return;\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst onSubmit = () => {\\\\\\\\n  Storage.privateSet(DRAFT_STATE_STORAGE_KEY, JSON.stringify(state));\\\\\\\\n\\\\\\\\n  let labels = state.labelStrings;\\\\\\\\n\\\\\\\\n  let body = {\\\\\\\\n    name: state.name,\\\\\\\\n    description: generateDescription(\\\\\\\\n      state.description,\\\\\\\\n      state.amount,\\\\\\\\n      state.token,\\\\\\\\n      state.supervisor,\\\\\\\\n      state.seekingFunding\\\\\\\\n    ),\\\\\\\\n  };\\\\\\\\n\\\\\\\\n  if (state.postType === \\\\\\\\\\\\\\\"Solution\\\\\\\\\\\\\\\") {\\\\\\\\n    body = {\\\\\\\\n      ...body,\\\\\\\\n      post_type: \\\\\\\\\\\\\\\"Solution\\\\\\\\\\\\\\\",\\\\\\\\n      solution_version: \\\\\\\\\\\\\\\"V1\\\\\\\\\\\\\\\",\\\\\\\\n    };\\\\\\\\n  } else {\\\\\\\\n    // Idea\\\\\\\\n    body = {\\\\\\\\n      ...body,\\\\\\\\n      post_type: \\\\\\\\\\\\\\\"Idea\\\\\\\\\\\\\\\",\\\\\\\\n      idea_version: \\\\\\\\\\\\\\\"V1\\\\\\\\\\\\\\\",\\\\\\\\n    };\\\\\\\\n  }\\\\\\\\n\\\\\\\\n  if (!context.accountId) return;\\\\\\\\n\\\\\\\\n  let txn = [];\\\\\\\\n  if (mode == \\\\\\\\\\\\\\\"Create\\\\\\\\\\\\\\\") {\\\\\\\\n    txn.push({\\\\\\\\n      contractName: \\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\",\\\\\\\\n      methodName: \\\\\\\\\\\\\\\"add_post\\\\\\\\\\\\\\\",\\\\\\\\n      args: {\\\\\\\\n        parent_id: parentId,\\\\\\\\n        labels,\\\\\\\\n        body: body,\\\\\\\\n      },\\\\\\\\n      deposit: Big(10).pow(21).mul(3),\\\\\\\\n      gas: Big(10).pow(12).mul(100),\\\\\\\\n    });\\\\\\\\n  } else if (mode == \\\\\\\\\\\\\\\"Edit\\\\\\\\\\\\\\\") {\\\\\\\\n    txn.push({\\\\\\\\n      contractName: \\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\",\\\\\\\\n      methodName: \\\\\\\\\\\\\\\"edit_post\\\\\\\\\\\\\\\",\\\\\\\\n      args: {\\\\\\\\n        id: postId,\\\\\\\\n        labels,\\\\\\\\n        body: body,\\\\\\\\n      },\\\\\\\\n      deposit: Big(10).pow(21).mul(2),\\\\\\\\n      gas: Big(10).pow(12).mul(100),\\\\\\\\n    });\\\\\\\\n  }\\\\\\\\n  if (mode == \\\\\\\\\\\\\\\"Create\\\\\\\\\\\\\\\" || mode == \\\\\\\\\\\\\\\"Edit\\\\\\\\\\\\\\\") {\\\\\\\\n    if (grantNotify === false) {\\\\\\\\n      txn.unshift({\\\\\\\\n        contractName: \\\\\\\\\\\\\\\"social.near\\\\\\\\\\\\\\\",\\\\\\\\n        methodName: \\\\\\\\\\\\\\\"grant_write_permission\\\\\\\\\\\\\\\",\\\\\\\\n        args: {\\\\\\\\n          predecessor_id: \\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\",\\\\\\\\n          keys: [context.accountId + \\\\\\\\\\\\\\\"/index/notify\\\\\\\\\\\\\\\"],\\\\\\\\n        },\\\\\\\\n        deposit: Big(10).pow(23),\\\\\\\\n        gas: Big(10).pow(12).mul(30),\\\\\\\\n      });\\\\\\\\n    }\\\\\\\\n    Near.call(txn);\\\\\\\\n  }\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst onIdeaClick = () => {\\\\\\\\n  State.update({ postType: \\\\\\\\\\\\\\\"Idea\\\\\\\\\\\\\\\", seekingFunding: false });\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst onSolutionClick = () => {\\\\\\\\n  State.update({ postType: \\\\\\\\\\\\\\\"Solution\\\\\\\\\\\\\\\" });\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst normalizeLabel = (label) =>\\\\\\\\n  label\\\\\\\\n    .replaceAll(/[- \\\\\\\\\\\\\\\\.]/g, \\\\\\\\\\\\\\\"_\\\\\\\\\\\\\\\")\\\\\\\\n    .replaceAll(/[^\\\\\\\\\\\\\\\\w]+/g, \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\")\\\\\\\\n    .replaceAll(/_+/g, \\\\\\\\\\\\\\\"-\\\\\\\\\\\\\\\")\\\\\\\\n    .replace(/^-+/, \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\")\\\\\\\\n    .replace(/-+$/, \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\")\\\\\\\\n    .toLowerCase()\\\\\\\\n    .trim(\\\\\\\\\\\\\\\"-\\\\\\\\\\\\\\\");\\\\\\\\n\\\\\\\\nconst checkLabel = (label) => {\\\\\\\\n  Near.asyncView(\\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"is_allowed_to_use_labels\\\\\\\\\\\\\\\", {\\\\\\\\n    editor: context.accountId,\\\\\\\\n    labels: [label],\\\\\\\\n  }).then((allowed) => {\\\\\\\\n    if (allowed) {\\\\\\\\n      State.update({ warning: \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\" });\\\\\\\\n    } else {\\\\\\\\n      State.update({\\\\\\\\n        warning:\\\\\\\\n          \\\\\\\\\\\\'The label \\\\\\\\\\\\\\\"\\\\\\\\\\\\' +\\\\\\\\n          label +\\\\\\\\n          \\\\\\\\\\\\'\\\\\\\\\\\\\\\" is protected and can only be added by moderators\\\\\\\\\\\\',\\\\\\\\n      });\\\\\\\\n      return;\\\\\\\\n    }\\\\\\\\n  });\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst setLabels = (labels) => {\\\\\\\\n  labels = labels.map((o) => {\\\\\\\\n    o.name = normalizeLabel(o.name);\\\\\\\\n    return o;\\\\\\\\n  });\\\\\\\\n  if (labels.length < state.labels.length) {\\\\\\\\n    let oldLabels = new Set(state.labels.map((label) => label.name));\\\\\\\\n    for (let label of labels) {\\\\\\\\n      oldLabels.delete(label.name);\\\\\\\\n    }\\\\\\\\n    let removed = oldLabels.values().next().value;\\\\\\\\n    Near.asyncView(\\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"is_allowed_to_use_labels\\\\\\\\\\\\\\\", {\\\\\\\\n      editor: context.accountId,\\\\\\\\n      labels: [removed],\\\\\\\\n    }).then((allowed) => {\\\\\\\\n      if (allowed) {\\\\\\\\n        let labelStrings = labels.map(({ name }) => name);\\\\\\\\n        State.update({ labels, labelStrings });\\\\\\\\n      } else {\\\\\\\\n        State.update({\\\\\\\\n          warning:\\\\\\\\n            \\\\\\\\\\\\'The label \\\\\\\\\\\\\\\"\\\\\\\\\\\\' +\\\\\\\\n            removed +\\\\\\\\n            \\\\\\\\\\\\'\\\\\\\\\\\\\\\" is protected and can only be updated by moderators\\\\\\\\\\\\',\\\\\\\\n        });\\\\\\\\n        return;\\\\\\\\n      }\\\\\\\\n    });\\\\\\\\n  } else {\\\\\\\\n    let labelStrings = labels.map((o) => {\\\\\\\\n      return o.name;\\\\\\\\n    });\\\\\\\\n    State.update({ labels, labelStrings });\\\\\\\\n  }\\\\\\\\n};\\\\\\\\nconst existingLabelStrings =\\\\\\\\n  Near.view(\\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"get_all_allowed_labels\\\\\\\\\\\\\\\", {\\\\\\\\n    editor: context.accountId,\\\\\\\\n  }) ?? [];\\\\\\\\nconst existingLabelSet = new Set(existingLabelStrings);\\\\\\\\nconst existingLabels = existingLabelStrings\\\\\\\\n  .filter((it) => it !== \\\\\\\\\\\\\\\"blog\\\\\\\\\\\\\\\") // remove blog label so users cannot publish blogs from feed\\\\\\\\n  .map((s) => {\\\\\\\\n    return { name: s };\\\\\\\\n  });\\\\\\\\n\\\\\\\\nconst labelEditor = (\\\\\\\\n  <div className=\\\\\\\\\\\\\\\"col-lg-12 mb-2\\\\\\\\\\\\\\\">\\\\\\\\n    <p className=\\\\\\\\\\\\\\\"fs-6 fw-bold mb-1\\\\\\\\\\\\\\\">Labels</p>\\\\\\\\n    <Typeahead\\\\\\\\n      multiple\\\\\\\\n      labelKey=\\\\\\\\\\\\\\\"name\\\\\\\\\\\\\\\"\\\\\\\\n      onInputChange={checkLabel}\\\\\\\\n      onChange={setLabels}\\\\\\\\n      options={existingLabels}\\\\\\\\n      placeholder=\\\\\\\\\\\\\\\"near.social, widget, NEP, standard, protocol, tool\\\\\\\\\\\\\\\"\\\\\\\\n      selected={state.labels}\\\\\\\\n      positionFixed\\\\\\\\n      allowNew={(results, props) => {\\\\\\\\n        return (\\\\\\\\n          !existingLabelSet.has(props.text) &&\\\\\\\\n          props.text.toLowerCase() !== \\\\\\\\\\\\\\\"blog\\\\\\\\\\\\\\\" && // dont allow adding \\\\\\\\\\\\\\\"Blog\\\\\\\\\\\\\\\"\\\\\\\\n          props.selected.filter((selected) => selected.name === props.text)\\\\\\\\n            .length == 0 &&\\\\\\\\n          Near.view(\\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"is_allowed_to_use_labels\\\\\\\\\\\\\\\", {\\\\\\\\n            editor: context.accountId,\\\\\\\\n            labels: [props.text],\\\\\\\\n          })\\\\\\\\n        );\\\\\\\\n      }}\\\\\\\\n    />\\\\\\\\n  </div>\\\\\\\\n);\\\\\\\\n\\\\\\\\nconst nameDiv = (\\\\\\\\n  <div className=\\\\\\\\\\\\\\\"col-lg-6 mb-2\\\\\\\\\\\\\\\">\\\\\\\\n    <p className=\\\\\\\\\\\\\\\"fs-6 fw-bold mb-1\\\\\\\\\\\\\\\">Title</p>\\\\\\\\n    <input\\\\\\\\n      type=\\\\\\\\\\\\\\\"text\\\\\\\\\\\\\\\"\\\\\\\\n      value={state.name}\\\\\\\\n      onChange={(event) => State.update({ name: event.target.value })}\\\\\\\\n    />\\\\\\\\n  </div>\\\\\\\\n);\\\\\\\\n\\\\\\\\nconst descriptionDiv = (\\\\\\\\n  <div className=\\\\\\\\\\\\\\\"col-lg-12 mb-2\\\\\\\\\\\\\\\">\\\\\\\\n    <p className=\\\\\\\\\\\\\\\"fs-6 fw-bold mb-1\\\\\\\\\\\\\\\">Description</p>\\\\\\\\n    <Widget\\\\\\\\n      src=\\\\\\\\\\\\\\\"devhub.near/widget/devhub.components.molecule.MarkdownEditor\\\\\\\\\\\\\\\"\\\\\\\\n      props={{\\\\\\\\n        data: { handler: state.handler, content: state.description },\\\\\\\\n        onChange: (content) => {\\\\\\\\n          State.update({ description: content, handler: \\\\\\\\\\\\\\\"update\\\\\\\\\\\\\\\" });\\\\\\\\n          textareaInputHandler(content);\\\\\\\\n        },\\\\\\\\n      }}\\\\\\\\n    />\\\\\\\\n    {autocompleteEnabled && state.showAccountAutocomplete && (\\\\\\\\n      <AutoComplete>\\\\\\\\n        <Widget\\\\\\\\n          src=\\\\\\\\\\\\\\\"near/widget/AccountAutocomplete\\\\\\\\\\\\\\\"\\\\\\\\n          props={{\\\\\\\\n            term: state.mentionInput,\\\\\\\\n            onSelect: autoCompleteAccountId,\\\\\\\\n            onClose: () => State.update({ showAccountAutocomplete: false }),\\\\\\\\n          }}\\\\\\\\n        />\\\\\\\\n      </AutoComplete>\\\\\\\\n    )}\\\\\\\\n  </div>\\\\\\\\n);\\\\\\\\n\\\\\\\\nconst isFundraisingDiv = (\\\\\\\\n  // This is jank with just btns and not radios. But the radios were glitchy af\\\\\\\\n  <>\\\\\\\\n    <div class=\\\\\\\\\\\\\\\"mb-2\\\\\\\\\\\\\\\">\\\\\\\\n      <p class=\\\\\\\\\\\\\\\"fs-6 fw-bold mb-1\\\\\\\\\\\\\\\">\\\\\\\\n        Are you seeking funding for your solution?\\\\\\\\n        <span class=\\\\\\\\\\\\\\\"text-muted fw-normal\\\\\\\\\\\\\\\">(Optional)</span>\\\\\\\\n      </p>\\\\\\\\n      <div class=\\\\\\\\\\\\\\\"form-check form-check-inline\\\\\\\\\\\\\\\">\\\\\\\\n        <label class=\\\\\\\\\\\\\\\"form-check-label\\\\\\\\\\\\\\\">\\\\\\\\n          <button\\\\\\\\n            className=\\\\\\\\\\\\\\\"btn btn-light p-0\\\\\\\\\\\\\\\"\\\\\\\\n            style={{\\\\\\\\n              backgroundColor: state.seekingFunding ? \\\\\\\\\\\\\\\"#0C7283\\\\\\\\\\\\\\\" : \\\\\\\\\\\\\\\"inherit\\\\\\\\\\\\\\\",\\\\\\\\n              color: \\\\\\\\\\\\\\\"#f3f3f3\\\\\\\\\\\\\\\",\\\\\\\\n              border: \\\\\\\\\\\\\\\"solid #D9D9D9\\\\\\\\\\\\\\\",\\\\\\\\n              borderRadius: \\\\\\\\\\\\\\\"100%\\\\\\\\\\\\\\\",\\\\\\\\n              height: \\\\\\\\\\\\\\\"20px\\\\\\\\\\\\\\\",\\\\\\\\n              width: \\\\\\\\\\\\\\\"20px\\\\\\\\\\\\\\\",\\\\\\\\n            }}\\\\\\\\n            onClick={() => State.update({ seekingFunding: true })}\\\\\\\\n          />\\\\\\\\n          Yes\\\\\\\\n        </label>\\\\\\\\n      </div>\\\\\\\\n      <div class=\\\\\\\\\\\\\\\"form-check form-check-inline\\\\\\\\\\\\\\\">\\\\\\\\n        <label class=\\\\\\\\\\\\\\\"form-check-label\\\\\\\\\\\\\\\">\\\\\\\\n          <button\\\\\\\\n            className=\\\\\\\\\\\\\\\"btn btn-light p-0\\\\\\\\\\\\\\\"\\\\\\\\n            style={{\\\\\\\\n              backgroundColor: !state.seekingFunding ? \\\\\\\\\\\\\\\"#0C7283\\\\\\\\\\\\\\\" : \\\\\\\\\\\\\\\"inherit\\\\\\\\\\\\\\\",\\\\\\\\n              color: \\\\\\\\\\\\\\\"#f3f3f3\\\\\\\\\\\\\\\",\\\\\\\\n              border: \\\\\\\\\\\\\\\"solid #D9D9D9\\\\\\\\\\\\\\\",\\\\\\\\n              borderRadius: \\\\\\\\\\\\\\\"100%\\\\\\\\\\\\\\\",\\\\\\\\n              height: \\\\\\\\\\\\\\\"20px\\\\\\\\\\\\\\\",\\\\\\\\n              width: \\\\\\\\\\\\\\\"20px\\\\\\\\\\\\\\\",\\\\\\\\n            }}\\\\\\\\n            onClick={() => State.update({ seekingFunding: false })}\\\\\\\\n          />\\\\\\\\n          No\\\\\\\\n        </label>\\\\\\\\n      </div>\\\\\\\\n    </div>\\\\\\\\n  </>\\\\\\\\n);\\\\\\\\n\\\\\\\\nconst fundraisingDiv = (\\\\\\\\n  <div class=\\\\\\\\\\\\\\\"d-flex flex-column mb-2\\\\\\\\\\\\\\\">\\\\\\\\n    <div className=\\\\\\\\\\\\\\\"col-lg-6  mb-2\\\\\\\\\\\\\\\">\\\\\\\\n      Currency\\\\\\\\n      <select\\\\\\\\n        onChange={(event) => State.update({ token: event.target.value })}\\\\\\\\n        class=\\\\\\\\\\\\\\\"form-select\\\\\\\\\\\\\\\"\\\\\\\\n        aria-label=\\\\\\\\\\\\\\\"Default select\\\\\\\\\\\\\\\"\\\\\\\\n      >\\\\\\\\n        <option selected value=\\\\\\\\\\\\\\\"USDT\\\\\\\\\\\\\\\">\\\\\\\\n          USDT\\\\\\\\n        </option>\\\\\\\\n        <option value=\\\\\\\\\\\\\\\"NEAR\\\\\\\\\\\\\\\">NEAR</option>\\\\\\\\n        <option value=\\\\\\\\\\\\\\\"USDC\\\\\\\\\\\\\\\">USDC</option>\\\\\\\\n      </select>\\\\\\\\n    </div>\\\\\\\\n    <div className=\\\\\\\\\\\\\\\"col-lg-6 mb-2\\\\\\\\\\\\\\\">\\\\\\\\n      Requested amount <span class=\\\\\\\\\\\\\\\"text-muted fw-normal\\\\\\\\\\\\\\\">(Numbers Only)</span>\\\\\\\\n      <input\\\\\\\\n        type=\\\\\\\\\\\\\\\"number\\\\\\\\\\\\\\\"\\\\\\\\n        value={parseInt(state.amount) > 0 ? state.amount : \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\"}\\\\\\\\n        min={0}\\\\\\\\n        onChange={(event) =>\\\\\\\\n          State.update({\\\\\\\\n            amount: Number(\\\\\\\\n              event.target.value.toString().replace(/e/g, \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\")\\\\\\\\n            ).toString(),\\\\\\\\n          })\\\\\\\\n        }\\\\\\\\n      />\\\\\\\\n    </div>\\\\\\\\n    <div className=\\\\\\\\\\\\\\\"col-lg-6 mb-2\\\\\\\\\\\\\\\">\\\\\\\\n      <p class=\\\\\\\\\\\\\\\"mb-1\\\\\\\\\\\\\\\">\\\\\\\\n        Requested sponsor <span class=\\\\\\\\\\\\\\\"text-muted fw-normal\\\\\\\\\\\\\\\">(Optional)</span>\\\\\\\\n      </p>\\\\\\\\n      <p style={{ fontSize: \\\\\\\\\\\\\\\"13px\\\\\\\\\\\\\\\" }} class=\\\\\\\\\\\\\\\"m-0 text-muted fw-light\\\\\\\\\\\\\\\">\\\\\\\\n        If you are requesting funding from a specific sponsor, please enter\\\\\\\\n        their username.\\\\\\\\n      </p>\\\\\\\\n      <div class=\\\\\\\\\\\\\\\"input-group flex-nowrap\\\\\\\\\\\\\\\">\\\\\\\\n        <span class=\\\\\\\\\\\\\\\"input-group-text\\\\\\\\\\\\\\\" id=\\\\\\\\\\\\\\\"addon-wrapping\\\\\\\\\\\\\\\">\\\\\\\\n          @\\\\\\\\n        </span>\\\\\\\\n        <input\\\\\\\\n          type=\\\\\\\\\\\\\\\"text\\\\\\\\\\\\\\\"\\\\\\\\n          class=\\\\\\\\\\\\\\\"form-control\\\\\\\\\\\\\\\"\\\\\\\\n          placeholder=\\\\\\\\\\\\\\\"Enter username\\\\\\\\\\\\\\\"\\\\\\\\n          value={state.supervisor}\\\\\\\\n          onChange={(event) => State.update({ supervisor: event.target.value })}\\\\\\\\n        />\\\\\\\\n      </div>\\\\\\\\n    </div>\\\\\\\\n  </div>\\\\\\\\n);\\\\\\\\n\\\\\\\\nfunction generateDescription(text, amount, token, supervisor, seekingFunding) {\\\\\\\\n  const fundingText =\\\\\\\\n    amount > 0 && token ? `###### Requested amount: ${amount} ${token}\\\\\\\\\\\\\\\\n` : \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\";\\\\\\\\n  const supervisorText = supervisor\\\\\\\\n    ? `###### Requested sponsor: @${supervisor}\\\\\\\\\\\\\\\\n`\\\\\\\\n    : \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\";\\\\\\\\n  return seekingFunding ? `${fundingText}${supervisorText}${text}` : text;\\\\\\\\n}\\\\\\\\n\\\\\\\\nreturn (\\\\\\\\n  <div class=\\\\\\\\\\\\\\\"bg-light d-flex flex-column flex-grow-1 w-100\\\\\\\\\\\\\\\">\\\\\\\\n    <div class=\\\\\\\\\\\\\\\"mx-5 mb-5\\\\\\\\\\\\\\\">\\\\\\\\n      <div aria-label=\\\\\\\\\\\\\\\"breadcrumb\\\\\\\\\\\\\\\">\\\\\\\\n        <ol class=\\\\\\\\\\\\\\\"breadcrumb\\\\\\\\\\\\\\\">\\\\\\\\n          <li class=\\\\\\\\\\\\\\\"breadcrumb-item\\\\\\\\\\\\\\\">\\\\\\\\n            <Link\\\\\\\\n              style={{\\\\\\\\n                color: \\\\\\\\\\\\\\\"#3252A6\\\\\\\\\\\\\\\",\\\\\\\\n              }}\\\\\\\\n              className=\\\\\\\\\\\\\\\"fw-bold\\\\\\\\\\\\\\\"\\\\\\\\n              to={href({\\\\\\\\n                widgetSrc: \\\\\\\\\\\\\\\"devhub.near/widget/app\\\\\\\\\\\\\\\",\\\\\\\\n                params: { page: \\\\\\\\\\\\\\\"feed\\\\\\\\\\\\\\\" },\\\\\\\\n              })}\\\\\\\\n            >\\\\\\\\n              DevHub\\\\\\\\n            </Link>\\\\\\\\n          </li>\\\\\\\\n          <li class=\\\\\\\\\\\\\\\"breadcrumb-item active\\\\\\\\\\\\\\\" aria-current=\\\\\\\\\\\\\\\"page\\\\\\\\\\\\\\\">\\\\\\\\n            Create new\\\\\\\\n          </li>\\\\\\\\n        </ol>\\\\\\\\n      </div>\\\\\\\\n      {props.transactionHashes ? (\\\\\\\\n        <>\\\\\\\\n          Post created successfully. Back to{\\\\\\\\\\\\\\\" \\\\\\\\\\\\\\\"}\\\\\\\\n          <Link\\\\\\\\n            style={{\\\\\\\\n              color: \\\\\\\\\\\\\\\"#3252A6\\\\\\\\\\\\\\\",\\\\\\\\n            }}\\\\\\\\n            className=\\\\\\\\\\\\\\\"fw-bold\\\\\\\\\\\\\\\"\\\\\\\\n            to={href({\\\\\\\\n              widgetSrc: \\\\\\\\\\\\\\\"devhub.near/widget/app\\\\\\\\\\\\\\\",\\\\\\\\n              params: { page: \\\\\\\\\\\\\\\"feed\\\\\\\\\\\\\\\" },\\\\\\\\n            })}\\\\\\\\n          >\\\\\\\\n            feed\\\\\\\\n          </Link>\\\\\\\\n        </>\\\\\\\\n      ) : (\\\\\\\\n        <>\\\\\\\\n          <h4>Create a new post</h4>\\\\\\\\n          <p>{state.seekingFunding}</p>\\\\\\\\n          <div class=\\\\\\\\\\\\\\\"card border-light\\\\\\\\\\\\\\\">\\\\\\\\n            <div class=\\\\\\\\\\\\\\\"card-body\\\\\\\\\\\\\\\">\\\\\\\\n              <p class=\\\\\\\\\\\\\\\"card-title fw-bold fs-6\\\\\\\\\\\\\\\">What do you want to create?</p>\\\\\\\\n              <div class=\\\\\\\\\\\\\\\"d-flex flex-row gap-2\\\\\\\\\\\\\\\">\\\\\\\\n                <button\\\\\\\\n                  onClick={onIdeaClick}\\\\\\\\n                  type=\\\\\\\\\\\\\\\"button\\\\\\\\\\\\\\\"\\\\\\\\n                  class={`btn btn-outline-secondary`}\\\\\\\\n                  style={\\\\\\\\n                    state.postType === \\\\\\\\\\\\\\\"Idea\\\\\\\\\\\\\\\"\\\\\\\\n                      ? {\\\\\\\\n                          backgroundColor: \\\\\\\\\\\\\\\"#0C7283\\\\\\\\\\\\\\\",\\\\\\\\n                          color: \\\\\\\\\\\\\\\"#f3f3f3\\\\\\\\\\\\\\\",\\\\\\\\n                        }\\\\\\\\n                      : {}\\\\\\\\n                  }\\\\\\\\n                >\\\\\\\\n                  <i class=\\\\\\\\\\\\\\\"bi bi-lightbulb\\\\\\\\\\\\\\\"></i>\\\\\\\\n                  Idea\\\\\\\\n                </button>\\\\\\\\n                <button\\\\\\\\n                  onClick={onSolutionClick}\\\\\\\\n                  type=\\\\\\\\\\\\\\\"button\\\\\\\\\\\\\\\"\\\\\\\\n                  class={`btn btn-outline-secondary`}\\\\\\\\n                  style={\\\\\\\\n                    state.postType !== \\\\\\\\\\\\\\\"Idea\\\\\\\\\\\\\\\"\\\\\\\\n                      ? {\\\\\\\\n                          backgroundColor: \\\\\\\\\\\\\\\"#0C7283\\\\\\\\\\\\\\\",\\\\\\\\n                          color: \\\\\\\\\\\\\\\"#f3f3f3\\\\\\\\\\\\\\\",\\\\\\\\n                        }\\\\\\\\n                      : {}\\\\\\\\n                  }\\\\\\\\n                >\\\\\\\\n                  <i class=\\\\\\\\\\\\\\\"bi bi-rocket\\\\\\\\\\\\\\\"></i>\\\\\\\\n                  Solution\\\\\\\\n                </button>\\\\\\\\n              </div>\\\\\\\\n              <p class=\\\\\\\\\\\\\\\"text-muted w-75 my-1\\\\\\\\\\\\\\\">\\\\\\\\n                {state.postType === \\\\\\\\\\\\\\\"Idea\\\\\\\\\\\\\\\"\\\\\\\\n                  ? \\\\\\\\\\\\\\\"Get feedback from the community about a problem, opportunity, or need.\\\\\\\\\\\\\\\"\\\\\\\\n                  : \\\\\\\\\\\\\\\"Provide a specific proposal or implementation to an idea, optionally requesting funding. If your solution relates to an existing idea, please reply to the original post with a solution.\\\\\\\\\\\\\\\"}\\\\\\\\n              </p>\\\\\\\\n              {state.warning && (\\\\\\\\n                <div\\\\\\\\n                  class=\\\\\\\\\\\\\\\"alert alert-warning alert-dismissible fade show\\\\\\\\\\\\\\\"\\\\\\\\n                  role=\\\\\\\\\\\\\\\"alert\\\\\\\\\\\\\\\"\\\\\\\\n                >\\\\\\\\n                  {state.warning}\\\\\\\\n                  <button\\\\\\\\n                    type=\\\\\\\\\\\\\\\"button\\\\\\\\\\\\\\\"\\\\\\\\n                    class=\\\\\\\\\\\\\\\"btn-close\\\\\\\\\\\\\\\"\\\\\\\\n                    data-bs-dismiss=\\\\\\\\\\\\\\\"alert\\\\\\\\\\\\\\\"\\\\\\\\n                    aria-label=\\\\\\\\\\\\\\\"Close\\\\\\\\\\\\\\\"\\\\\\\\n                    onClick={() => State.update({ warning: \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\" })}\\\\\\\\n                  ></button>\\\\\\\\n                </div>\\\\\\\\n              )}\\\\\\\\n              <div className=\\\\\\\\\\\\\\\"row\\\\\\\\\\\\\\\">\\\\\\\\n                {nameDiv}\\\\\\\\n                {descriptionDiv}\\\\\\\\n                {labelEditor}\\\\\\\\n                {state.postType === \\\\\\\\\\\\\\\"Solution\\\\\\\\\\\\\\\" && isFundraisingDiv}\\\\\\\\n                {state.seekingFunding && fundraisingDiv}\\\\\\\\n              </div>\\\\\\\\n              <button\\\\\\\\n                style={{\\\\\\\\n                  width: \\\\\\\\\\\\\\\"7rem\\\\\\\\\\\\\\\",\\\\\\\\n                  backgroundColor: \\\\\\\\\\\\\\\"#0C7283\\\\\\\\\\\\\\\",\\\\\\\\n                  color: \\\\\\\\\\\\\\\"#f3f3f3\\\\\\\\\\\\\\\",\\\\\\\\n                }}\\\\\\\\n                disabled={\\\\\\\\n                  state.seekingFunding && (!state.amount || state.amount < 1)\\\\\\\\n                }\\\\\\\\n                className=\\\\\\\\\\\\\\\"btn btn-light mb-2 p-3\\\\\\\\\\\\\\\"\\\\\\\\n                onClick={onSubmit}\\\\\\\\n              >\\\\\\\\n                Submit\\\\\\\\n              </button>\\\\\\\\n            </div>\\\\\\\\n            <div class=\\\\\\\\\\\\\\\"bg-light d-flex flex-row p-1 border-bottom\\\\\\\\\\\\\\\"></div>\\\\\\\\n            <div class=\\\\\\\\\\\\\\\"card-body\\\\\\\\\\\\\\\">\\\\\\\\n              <p class=\\\\\\\\\\\\\\\"text-muted m-0\\\\\\\\\\\\\\\">Preview</p>\\\\\\\\n              <div>\\\\\\\\n                <Widget\\\\\\\\n                  src=\\\\\\\\\\\\\\\"devhub.near/widget/devhub.entity.post.Post\\\\\\\\\\\\\\\"\\\\\\\\n                  props={{\\\\\\\\n                    isPreview: true,\\\\\\\\n                    id: 0, // irrelevant\\\\\\\\n                    post: {\\\\\\\\n                      author_id: state.author_id,\\\\\\\\n                      likes: [],\\\\\\\\n                      snapshot: {\\\\\\\\n                        editor_id: state.editor_id,\\\\\\\\n                        labels: state.labelStrings,\\\\\\\\n                        post_type: state.postType,\\\\\\\\n                        name: state.name,\\\\\\\\n                        description: generateDescription(\\\\\\\\n                          state.description,\\\\\\\\n                          state.amount,\\\\\\\\n                          state.token,\\\\\\\\n                          state.supervisor,\\\\\\\\n                          state.seekingFunding\\\\\\\\n                        ),\\\\\\\\n                        github_link: state.githubLink,\\\\\\\\n                      },\\\\\\\\n                    },\\\\\\\\n                  }}\\\\\\\\n                />\\\\\\\\n              </div>\\\\\\\\n            </div>\\\\\\\\n          </div>\\\\\\\\n        </>\\\\\\\\n      )}\\\\\\\\n    </div>\\\\\\\\n  </div>\\\\\\\\n);\\\\\\\\n\"}, \"devhub.components.molecule.SimpleMDE\": {\"\": \"/**\\\\\\\\n * iframe embedding a SimpleMDE component\\\\\\\\n * https://github.com/sparksuite/simplemde-markdown-editor\\\\\\\\n */\\\\\\\\n\\\\\\\\nfunction defaultOnChange(content) {\\\\\\\\n  console.log(content);\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst data = props.data;\\\\\\\\nconst onChange = props.onChange ?? defaultOnChange;\\\\\\\\nconst height = props.height ?? \\\\\\\\\\\\\\\"405\\\\\\\\\\\\\\\";\\\\\\\\nconst className = props.className ?? \\\\\\\\\\\\\\\"w-100\\\\\\\\\\\\\\\";\\\\\\\\n\\\\\\\\nState.init({\\\\\\\\n  iframeHeight: height,\\\\\\\\n  message: { handler: \\\\\\\\\\\\\\\"init\\\\\\\\\\\\\\\", content: props.data },\\\\\\\\n});\\\\\\\\n\\\\\\\\n// SIMPLEMDE CONFIG //\\\\\\\\nconst fontFamily = props.fontFamily ?? \\\\\\\\\\\\\\\"sans-serif\\\\\\\\\\\\\\\";\\\\\\\\nconst alignToolItems = props.alignToolItems ?? \\\\\\\\\\\\\\\"right\\\\\\\\\\\\\\\";\\\\\\\\nconst autoFocus = props.autoFocus ?? true;\\\\\\\\nconst renderingConfig = JSON.stringify(\\\\\\\\n  props.renderingConfig ?? {\\\\\\\\n    singleLineBreaks: false,\\\\\\\\n    codeSyntaxHighlighting: true,\\\\\\\\n  }\\\\\\\\n);\\\\\\\\nconst placeholder = props.placeholder ?? \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\";\\\\\\\\nconst statusConfig = JSON.stringify(\\\\\\\\n  props.statusConfig ?? [\\\\\\\\\\\\\\\"lines\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"words\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"cursor\\\\\\\\\\\\\\\"]\\\\\\\\n);\\\\\\\\nconst spellChecker = props.spellChecker ?? true;\\\\\\\\nconst tabSize = props.tabSize ?? 4;\\\\\\\\n\\\\\\\\n// Add or remove toolbar items\\\\\\\\n// For adding unique items, configure the switch-case within the iframe\\\\\\\\nconst toolbarConfig = JSON.stringify(\\\\\\\\n  props.toolbar ?? [\\\\\\\\n    \\\\\\\\\\\\\\\"heading\\\\\\\\\\\\\\\",\\\\\\\\n    \\\\\\\\\\\\\\\"bold\\\\\\\\\\\\\\\",\\\\\\\\n    \\\\\\\\\\\\\\\"italic\\\\\\\\\\\\\\\",\\\\\\\\n    \\\\\\\\\\\\\\\"|\\\\\\\\\\\\\\\", // adding | creates a divider in the toolbar\\\\\\\\n    \\\\\\\\\\\\\\\"quote\\\\\\\\\\\\\\\",\\\\\\\\n    \\\\\\\\\\\\\\\"code\\\\\\\\\\\\\\\",\\\\\\\\n    \\\\\\\\\\\\\\\"link\\\\\\\\\\\\\\\",\\\\\\\\n    \\\\\\\\\\\\\\\"image\\\\\\\\\\\\\\\",\\\\\\\\n    \\\\\\\\\\\\\\\"mention\\\\\\\\\\\\\\\",\\\\\\\\n    \\\\\\\\\\\\\\\"reference\\\\\\\\\\\\\\\",\\\\\\\\n    \\\\\\\\\\\\\\\"unordered-list\\\\\\\\\\\\\\\",\\\\\\\\n    \\\\\\\\\\\\\\\"ordered-list\\\\\\\\\\\\\\\",\\\\\\\\n    \\\\\\\\\\\\\\\"checklist\\\\\\\\\\\\\\\",\\\\\\\\n    \\\\\\\\\\\\\\\"table\\\\\\\\\\\\\\\",\\\\\\\\n    \\\\\\\\\\\\\\\"horizontal-rule\\\\\\\\\\\\\\\",\\\\\\\\n    \\\\\\\\\\\\\\\"guide\\\\\\\\\\\\\\\",\\\\\\\\n    \\\\\\\\\\\\\\\"preview\\\\\\\\\\\\\\\",\\\\\\\\n  ]\\\\\\\\n);\\\\\\\\n\\\\\\\\nconst code = `\\\\\\\\n  <style>\\\\\\\\n  body {  \\\\\\\\n      margin: auto;\\\\\\\\n      font-family: ${fontFamily};\\\\\\\\n      overflow: visible;\\\\\\\\n  }\\\\\\\\n  \\\\\\\\n  .editor-toolbar {\\\\\\\\n      text-align: ${alignToolItems};\\\\\\\\n  }\\\\\\\\n  </style>\\\\\\\\n  <script src=\\\\\\\\\\\\\\\"https://unpkg.com/react@18/umd/react.development.js\\\\\\\\\\\\\\\" crossorigin></script>\\\\\\\\n  <script src=\\\\\\\\\\\\\\\"https://unpkg.com/react-dom@18/umd/react-dom.development.js\\\\\\\\\\\\\\\" crossorigin></script>\\\\\\\\n  <link rel=\\\\\\\\\\\\\\\"stylesheet\\\\\\\\\\\\\\\" href=\\\\\\\\\\\\\\\"https://cdn.jsdelivr.net/simplemde/latest/simplemde.min.css\\\\\\\\\\\\\\\">\\\\\\\\n  <script src=\\\\\\\\\\\\\\\"https://cdn.jsdelivr.net/simplemde/latest/simplemde.min.js\\\\\\\\\\\\\\\"></script>\\\\\\\\n  <script src=\\\\\\\\\\\\\\\"https://cdn.jsdelivr.net/highlight.js/latest/highlight.min.js\\\\\\\\\\\\\\\"></script>\\\\\\\\n  <link rel=\\\\\\\\\\\\\\\"stylesheet\\\\\\\\\\\\\\\" href=\\\\\\\\\\\\\\\"https://cdn.jsdelivr.net/highlight.js/latest/styles/github.min.css\\\\\\\\\\\\\\\">\\\\\\\\n  \\\\\\\\n  <div id=\\\\\\\\\\\\\\\"react-root\\\\\\\\\\\\\\\"></div>\\\\\\\\n  \\\\\\\\n  <script>\\\\\\\\n  let codeMirrorInstance;\\\\\\\\n  let isEditorInitialized = false;\\\\\\\\n  \\\\\\\\n  function MarkdownEditor(props) {\\\\\\\\n      const [value, setValue] = React.useState(props.initialText || \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\");\\\\\\\\n  \\\\\\\\n      React.useEffect(() => {\\\\\\\\n          const generateToolbarItems = () => {\\\\\\\\n              return ${toolbarConfig}.map((item) => {\\\\\\\\n                  switch(item) {\\\\\\\\n                      // CONFIGURE CUSTOM IMPLEMENTATIONS HERE\\\\\\\\n                      case \\\\\\\\\\\\\\\"checklist\\\\\\\\\\\\\\\": {\\\\\\\\n                          function handleChecklist(editor) {\\\\\\\\n                              const cursorPos = editor.codemirror.getCursor();\\\\\\\\n                              const lineText = editor.codemirror.getLine(cursorPos.line);\\\\\\\\n                              if (lineText.trim() === \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\") {\\\\\\\\n                                  editor.codemirror.replaceRange(\\\\\\\\\\\\\\\" - [ ] \\\\\\\\\\\\\\\", cursorPos);\\\\\\\\n                              } else {\\\\\\\\n                                  editor.codemirror.replaceRange(\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n - [ ] \\\\\\\\\\\\\\\", cursorPos);\\\\\\\\n                              }\\\\\\\\n                          }\\\\\\\\n                          return {\\\\\\\\n                              name: \\\\\\\\\\\\\\\"checklist\\\\\\\\\\\\\\\",\\\\\\\\n                              action: handleChecklist,\\\\\\\\n                              className: \\\\\\\\\\\\\\\"fa fa-check-square\\\\\\\\\\\\\\\",\\\\\\\\n                              title: \\\\\\\\\\\\\\\"Insert Checklist\\\\\\\\\\\\\\\"\\\\\\\\n                          }\\\\\\\\n                      }\\\\\\\\n                      case \\\\\\\\\\\\\\\"mention\\\\\\\\\\\\\\\": {\\\\\\\\n                          function handleMention(editor) {\\\\\\\\n                              const cursorPos = editor.codemirror.getCursor();\\\\\\\\n                              editor.codemirror.replaceRange(\\\\\\\\\\\\\\\"@\\\\\\\\\\\\\\\", cursorPos);\\\\\\\\n                          }\\\\\\\\n                          return {\\\\\\\\n                              name: \\\\\\\\\\\\\\\"mention\\\\\\\\\\\\\\\",\\\\\\\\n                              action: handleMention,\\\\\\\\n                              className: \\\\\\\\\\\\\\\"fa fa-at\\\\\\\\\\\\\\\",\\\\\\\\n                              title: \\\\\\\\\\\\\\\"Insert Mention\\\\\\\\\\\\\\\"\\\\\\\\n                          }\\\\\\\\n                      }\\\\\\\\n                      case \\\\\\\\\\\\\\\"reference\\\\\\\\\\\\\\\": {\\\\\\\\n                          function handleReference(editor) {\\\\\\\\n                              const cursorPos = editor.codemirror.getCursor();\\\\\\\\n                              editor.codemirror.replaceRange(\\\\\\\\\\\\\\\"bos://\\\\\\\\\\\\\\\", cursorPos);\\\\\\\\n                          }\\\\\\\\n                          return {\\\\\\\\n                              name: \\\\\\\\\\\\\\\"reference\\\\\\\\\\\\\\\",\\\\\\\\n                              action: handleReference,\\\\\\\\n                              className: \\\\\\\\\\\\\\\"fa fa-external-link-square\\\\\\\\\\\\\\\",\\\\\\\\n                              title: \\\\\\\\\\\\\\\"Reference Thing\\\\\\\\\\\\\\\"\\\\\\\\n                          }\\\\\\\\n                      }\\\\\\\\n                      case \\\\\\\\\\\\\\\"image\\\\\\\\\\\\\\\": {\\\\\\\\n                          // TODO: convert to upload to IPFS\\\\\\\\n                          return {\\\\\\\\n                              name: \\\\\\\\\\\\\\\"image\\\\\\\\\\\\\\\",\\\\\\\\n                              action: SimpleMDE.drawImage,\\\\\\\\n                              className: \\\\\\\\\\\\\\\"fa fa-picture-o\\\\\\\\\\\\\\\",\\\\\\\\n                              title: \\\\\\\\\\\\\\\"Insert Image\\\\\\\\\\\\\\\"\\\\\\\\n                          }\\\\\\\\n                      }\\\\\\\\n                      default: {\\\\\\\\n                          return item;\\\\\\\\n                      }\\\\\\\\n                  }\\\\\\\\n              });\\\\\\\\n          };\\\\\\\\n  \\\\\\\\n          function renderPreview(plainText, preview) {\\\\\\\\n              // TODO: can we place custom preview element? Perhaps install VM into this iframe?\\\\\\\\n              setTimeout(function(){\\\\\\\\n                      preview.innerHTML = \\\\\\\\\\\\\\\"<p>hello</p>\\\\\\\\\\\\\\\";\\\\\\\\n                  }, 250);\\\\\\\\n              return \\\\\\\\\\\\\\\"loading\\\\\\\\\\\\\\\";\\\\\\\\n          }\\\\\\\\n          \\\\\\\\n          // Initializes SimpleMDE element and attaches to text-area\\\\\\\\n          const simplemde = new SimpleMDE({\\\\\\\\n              element: document.getElementById(\\\\\\\\\\\\\\\"markdown-input\\\\\\\\\\\\\\\"),\\\\\\\\n              forceSync: true,\\\\\\\\n              autofocus: ${autoFocus},\\\\\\\\n              renderingConfig: ${renderingConfig},\\\\\\\\n              placeholder: \\\\\\\\\\\\\\\"${placeholder}\\\\\\\\\\\\\\\",\\\\\\\\n              status: ${statusConfig},\\\\\\\\n              spellChecker: ${spellChecker},\\\\\\\\n              tabSize: ${tabSize},\\\\\\\\n              toolbar: generateToolbarItems(),\\\\\\\\n              initialValue: value,\\\\\\\\n              previewRender: renderPreview,\\\\\\\\n              insertTexts: {\\\\\\\\n                image: [\\\\\\\\\\\\\\\"![](https://\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\")\\\\\\\\\\\\\\\"],\\\\\\\\n                link: [\\\\\\\\\\\\\\\"[\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"](https://)\\\\\\\\\\\\\\\"],\\\\\\\\n              },\\\\\\\\n          });\\\\\\\\n  \\\\\\\\n          codeMirrorInstance = simplemde.codemirror;\\\\\\\\n  \\\\\\\\n          /**\\\\\\\\n           * Sends message to Widget to update content\\\\\\\\n           */\\\\\\\\n          const updateContent = () => {\\\\\\\\n              const content = simplemde.value();\\\\\\\\n              window.parent.postMessage({ handler: \\\\\\\\\\\\\\\"update\\\\\\\\\\\\\\\", content }, \\\\\\\\\\\\\\\"*\\\\\\\\\\\\\\\");\\\\\\\\n          };\\\\\\\\n  \\\\\\\\n          /**\\\\\\\\n           * Sends message to Widget to update iframe height\\\\\\\\n           */\\\\\\\\n          const updateIframeHeight = () => {\\\\\\\\n              const iframeHeight = document.body.scrollHeight;\\\\\\\\n              window.parent.postMessage({ handler: \\\\\\\\\\\\\\\"resize\\\\\\\\\\\\\\\", height: iframeHeight }, \\\\\\\\\\\\\\\"*\\\\\\\\\\\\\\\");\\\\\\\\n          };\\\\\\\\n  \\\\\\\\n          // On Change\\\\\\\\n          simplemde.codemirror.on(\\\\\\\\\\\\'change\\\\\\\\\\\\', () => {\\\\\\\\n              updateContent();\\\\\\\\n              updateIframeHeight();\\\\\\\\n          });\\\\\\\\n      }, []);\\\\\\\\n  \\\\\\\\n      return React.createElement(\\\\\\\\\\\\'textarea\\\\\\\\\\\\', { id: \\\\\\\\\\\\'markdown-input\\\\\\\\\\\\', value: value, onChange: setValue });\\\\\\\\n  }\\\\\\\\n  \\\\\\\\n  const domContainer = document.querySelector(\\\\\\\\\\\\'#react-root\\\\\\\\\\\\');\\\\\\\\n  const root = ReactDOM.createRoot(domContainer);\\\\\\\\n  \\\\\\\\n  window.addEventListener(\\\\\\\\\\\\\\\"message\\\\\\\\\\\\\\\", (event) => {\\\\\\\\n    if (!isEditorInitialized && event.data !== \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\") {\\\\\\\\n      root.render(React.createElement(MarkdownEditor, {\\\\\\\\n          initialText: event.data.content }));\\\\\\\\n          isEditorInitialized = true;\\\\\\\\n    } else {\\\\\\\\n      if (event.data.handler === \\\\\\\\\\\\'autocompleteSelected\\\\\\\\\\\\') {\\\\\\\\n          codeMirrorInstance.getDoc().setValue(event.data.content);\\\\\\\\n        }\\\\\\\\n    }\\\\\\\\n  });\\\\\\\\n  </script>\\\\\\\\n  `;\\\\\\\\nreturn (\\\\\\\\n  <iframe\\\\\\\\n    className={className}\\\\\\\\n    style={{\\\\\\\\n      height: `${state.iframeHeight}px`,\\\\\\\\n    }}\\\\\\\\n    srcDoc={code}\\\\\\\\n    message={data ?? { content: \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\" }}\\\\\\\\n    onMessage={(e) => {\\\\\\\\n      switch (e.handler) {\\\\\\\\n        case \\\\\\\\\\\\\\\"update\\\\\\\\\\\\\\\": {\\\\\\\\n          onChange(e.content);\\\\\\\\n        }\\\\\\\\n        case \\\\\\\\\\\\\\\"resize\\\\\\\\\\\\\\\": {\\\\\\\\n          const offset = 0;\\\\\\\\n          if (statusConfig.length) {\\\\\\\\n            offset = 10;\\\\\\\\n          }\\\\\\\\n          State.update({ iframeHeight: e.height + offset });\\\\\\\\n        }\\\\\\\\n      }\\\\\\\\n    }}\\\\\\\\n  />\\\\\\\\n);\\\\\\\\n\"}}}}}"
      }
    ],
    "actions_agg": {
      "deposit": 0
    },
    "outcomes": {
      "status": true
    },
    "outcomes_agg": {
      "transaction_fee": 1.3147554694378e+21
    }
  },
  {
    "id": "1504635654",
    "receipt_id": "ALHB2pV9fyZ1yKMsHJyYxfwQ6ij3o8mJgfw5BHVUmCyU",
    "predecessor_account_id": "system",
    "receiver_account_id": "devhub.near",
    "receipt_kind": "ACTION",
    "receipt_block": {
      "block_hash": "CqnGYgtJB1oPyz4BEV9vq2eedTE5TDaUthdiJqBMTouY",
      "block_height": 106621357,
      "block_timestamp": 1701052026037848000
    },
    "receipt_outcome": {
      "gas_burnt": 223182562500,
      "tokens_burnt": 0,
      "executor_account_id": "devhub.near",
      "status": true
    },
    "transaction_hash": "GcwCLqXxryQD3UCcYDRX1V1gHJLjokxpdJ5zXk5CqUWu",
    "included_in_block_hash": "iLNUG6y6rGZMtj3uHzcjQkYNk8jsn2krNN8iRUpUF3v",
    "block_timestamp": "1701052021657493990",
    "block": {
      "block_height": 106621354
    },
    "receipt_conversion_tokens_burnt": "249052268013200000000",
    "actions": [
      {
        "action": "TRANSFER",
        "method": null,
        "deposit": 1.8800302572791604e+23,
        "fee": 0,
        "args": null
      }
    ],
    "actions_agg": {
      "deposit": 0
    },
    "outcomes": {
      "status": true
    },
    "outcomes_agg": {
      "transaction_fee": 1.3147554694378e+21
    }
  },
  {
    "id": "1508415974",
    "receipt_id": "Ge1HwHGeHNywa3un3FabFv9S6Furr37jPhBFHAXr55EZ",
    "predecessor_account_id": "devhub.near",
    "receiver_account_id": "social.near",
    "receipt_kind": "ACTION",
    "receipt_block": {
      "block_hash": "DEeVHbzDxH1SJjU8TuPdXf1Gtkf5rh9FAx3WbGt7zZek",
      "block_height": 106639356,
      "block_timestamp": 1701073434247834400
    },
    "receipt_outcome": {
      "gas_burnt": 14129943810380,
      "tokens_burnt": 1.412994381038e+21,
      "executor_account_id": "social.near",
      "status": true
    },
    "transaction_hash": "AGUrfUM8a7Fxm6Aas6PSGabiCsYHdBi6W33G9VtFkh8m",
    "included_in_block_hash": "2ATtgpKA1Wb8V3xsQf9G6Fwd6XLLVRmQTscnhBJZNEdw",
    "block_timestamp": "1701073433195271980",
    "block": {
      "block_height": 106639355
    },
    "receipt_conversion_tokens_burnt": "251893022160200000000",
    "actions": [
      {
        "action": "FUNCTION_CALL",
        "method": "set",
        "deposit": 0,
        "fee": 1.412994381038e+21,
        "args": "{\"data\": {\"devhub.near\": {\"widget\": {\"devhub.page.create\": {\"\": \"/* INCLUDE: \\\\\\\\\\\\\\\"core/lib/autocomplete\\\\\\\\\\\\\\\" */\\\\\\\\n\\\\\\\\nState.init({\\\\\\\\n  seekingFunding: false,\\\\\\\\n  author_id: context.accountId,\\\\\\\\n  // Should be a list of objects with field \\\\\\\\\\\\\\\"name\\\\\\\\\\\\\\\".\\\\\\\\n  labels,\\\\\\\\n  // Should be a list of labels as strings.\\\\\\\\n  // Both of the label structures should be modified together.\\\\\\\\n  labelStrings,\\\\\\\\n  postType: \\\\\\\\\\\\\\\"Idea\\\\\\\\\\\\\\\",\\\\\\\\n  name: props.name ?? \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\",\\\\\\\\n  description: props.description ?? \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\",\\\\\\\\n  amount: props.amount ?? \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\",\\\\\\\\n  token: props.token ?? \\\\\\\\\\\\\\\"USDT\\\\\\\\\\\\\\\",\\\\\\\\n  supervisor: props.supervisor ?? \\\\\\\\\\\\\\\"neardevdao.near\\\\\\\\\\\\\\\",\\\\\\\\n  githubLink: props.githubLink ?? \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\",\\\\\\\\n  warning: \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\",\\\\\\\\n  waitForDraftStateRestore: true,\\\\\\\\n  mentionInput: \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\", // text next to @ tag\\\\\\\\n  mentionsArray: [], // all the mentions in the description\\\\\\\\n});\\\\\\\\n\\\\\\\\nconst autocompleteEnabled = true;\\\\\\\\n\\\\\\\\nconst AutoComplete = styled.div`\\\\\\\\n  z-index: 5;\\\\\\\\n\\\\\\\\n  > div > div {\\\\\\\\n    padding: calc(var(--padding) / 2);\\\\\\\\n  }\\\\\\\\n`;\\\\\\\\n\\\\\\\\nfunction textareaInputHandler(value) {\\\\\\\\n  const words = value.split(/\\\\\\\\\\\\\\\\s+/);\\\\\\\\n  const allMentiones = words\\\\\\\\n    .filter((word) => word.startsWith(\\\\\\\\\\\\\\\"@\\\\\\\\\\\\\\\"))\\\\\\\\n    .map((mention) => mention.slice(1));\\\\\\\\n  const newMentiones = allMentiones.filter(\\\\\\\\n    (item) => !state.mentionsArray.includes(item)\\\\\\\\n  );\\\\\\\\n\\\\\\\\n  State.update((lastKnownState) => ({\\\\\\\\n    ...lastKnownState,\\\\\\\\n    text: value,\\\\\\\\n    showAccountAutocomplete: newMentiones?.length > 0,\\\\\\\\n    mentionsArray: allMentiones,\\\\\\\\n    mentionInput: newMentiones?.[0] ?? \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\",\\\\\\\\n  }));\\\\\\\\n}\\\\\\\\n\\\\\\\\nfunction autoCompleteAccountId(id) {\\\\\\\\n  // to make sure we update the @ at correct index\\\\\\\\n  let currentIndex = 0;\\\\\\\\n  const updatedDescription = state.description.replace(\\\\\\\\n    /(?:^|\\\\\\\\\\\\\\\\s)(@[^\\\\\\\\\\\\\\\\s]*)/g,\\\\\\\\n    (match) => {\\\\\\\\n      if (currentIndex === state.mentionsArray.indexOf(state.mentionInput)) {\\\\\\\\n        currentIndex++;\\\\\\\\n        return ` @${id}`;\\\\\\\\n      } else {\\\\\\\\n        currentIndex++;\\\\\\\\n        return match;\\\\\\\\n      }\\\\\\\\n    }\\\\\\\\n  );\\\\\\\\n\\\\\\\\n  State.update((lastKnownState) => ({\\\\\\\\n    ...lastKnownState,\\\\\\\\n    handler: \\\\\\\\\\\\\\\"autocompleteSelected\\\\\\\\\\\\\\\",\\\\\\\\n    description: updatedDescription,\\\\\\\\n    showAccountAutocomplete: false,\\\\\\\\n  }));\\\\\\\\n}\\\\\\\\n/* END_INCLUDE: \\\\\\\\\\\\\\\"core/lib/autocomplete\\\\\\\\\\\\\\\" */\\\\\\\\n\\\\\\\\nconst { href } = VM.require(\\\\\\\\\\\\\\\"devhub.near/widget/core.lib.url\\\\\\\\\\\\\\\");\\\\\\\\n\\\\\\\\nconst { DRAFT_STATE_STORAGE_KEY, draftState, onDraftStateChange } = VM.require(\\\\\\\\n  \\\\\\\\\\\\\\\"devhub.near/widget/devhub.entity.post.draft\\\\\\\\\\\\\\\"\\\\\\\\n);\\\\\\\\n\\\\\\\\nif (!href) {\\\\\\\\n  return <p>Loading modules...</p>;\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst parentId = props.parentId ?? null;\\\\\\\\nconst postId = props.postId ?? null;\\\\\\\\nconst mode = props.mode ?? \\\\\\\\\\\\\\\"Create\\\\\\\\\\\\\\\";\\\\\\\\n\\\\\\\\nconst referralLabels = props.referral ? [`referral:${props.referral}`] : [];\\\\\\\\nconst labelStrings = (props.labels ? props.labels.split(\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\") : []).concat(\\\\\\\\n  referralLabels\\\\\\\\n);\\\\\\\\nconst labels = labelStrings.map((s) => {\\\\\\\\n  return { name: s };\\\\\\\\n});\\\\\\\\n\\\\\\\\nif (state.waitForDraftStateRestore) {\\\\\\\\n  const draftstatestring = Storage.privateGet(DRAFT_STATE_STORAGE_KEY);\\\\\\\\n  if (draftstatestring != null) {\\\\\\\\n    if (props.transactionHashes) {\\\\\\\\n      State.update({ waitForDraftStateRestore: false });\\\\\\\\n      Storage.privateSet(DRAFT_STATE_STORAGE_KEY, undefined);\\\\\\\\n    } else {\\\\\\\\n      try {\\\\\\\\n        const draftstate = JSON.parse(draftstatestring);\\\\\\\\n        State.update(draftstate);\\\\\\\\n      } catch (e) {\\\\\\\\n        console.error(\\\\\\\\\\\\\\\"error restoring draft\\\\\\\\\\\\\\\", draftstatestring);\\\\\\\\n      }\\\\\\\\n    }\\\\\\\\n    State.update({ waitForDraftStateRestore: false });\\\\\\\\n  }\\\\\\\\n}\\\\\\\\n\\\\\\\\n// This must be outside onClick, because Near.view returns null at first, and when the view call finished, it returns true/false.\\\\\\\\n// If checking this inside onClick, it will give `null` and we cannot tell the result is true or false.\\\\\\\\nlet grantNotify = Near.view(\\\\\\\\\\\\\\\"social.near\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"is_write_permission_granted\\\\\\\\\\\\\\\", {\\\\\\\\n  predecessor_id: \\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\",\\\\\\\\n  key: context.accountId + \\\\\\\\\\\\\\\"/index/notify\\\\\\\\\\\\\\\",\\\\\\\\n});\\\\\\\\nif (grantNotify === null) {\\\\\\\\n  return;\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst onSubmit = () => {\\\\\\\\n  Storage.privateSet(DRAFT_STATE_STORAGE_KEY, JSON.stringify(state));\\\\\\\\n\\\\\\\\n  let labels = state.labelStrings;\\\\\\\\n\\\\\\\\n  let body = {\\\\\\\\n    name: state.name,\\\\\\\\n    description: generateDescription(\\\\\\\\n      state.description,\\\\\\\\n      state.amount,\\\\\\\\n      state.token,\\\\\\\\n      state.supervisor,\\\\\\\\n      state.seekingFunding\\\\\\\\n    ),\\\\\\\\n  };\\\\\\\\n\\\\\\\\n  if (state.postType === \\\\\\\\\\\\\\\"Solution\\\\\\\\\\\\\\\") {\\\\\\\\n    body = {\\\\\\\\n      ...body,\\\\\\\\n      post_type: \\\\\\\\\\\\\\\"Solution\\\\\\\\\\\\\\\",\\\\\\\\n      solution_version: \\\\\\\\\\\\\\\"V1\\\\\\\\\\\\\\\",\\\\\\\\n    };\\\\\\\\n  } else {\\\\\\\\n    // Idea\\\\\\\\n    body = {\\\\\\\\n      ...body,\\\\\\\\n      post_type: \\\\\\\\\\\\\\\"Idea\\\\\\\\\\\\\\\",\\\\\\\\n      idea_version: \\\\\\\\\\\\\\\"V1\\\\\\\\\\\\\\\",\\\\\\\\n    };\\\\\\\\n  }\\\\\\\\n\\\\\\\\n  if (!context.accountId) return;\\\\\\\\n\\\\\\\\n  let txn = [];\\\\\\\\n  if (mode == \\\\\\\\\\\\\\\"Create\\\\\\\\\\\\\\\") {\\\\\\\\n    txn.push({\\\\\\\\n      contractName: \\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\",\\\\\\\\n      methodName: \\\\\\\\\\\\\\\"add_post\\\\\\\\\\\\\\\",\\\\\\\\n      args: {\\\\\\\\n        parent_id: parentId,\\\\\\\\n        labels,\\\\\\\\n        body: body,\\\\\\\\n      },\\\\\\\\n      deposit: Big(10).pow(21).mul(3),\\\\\\\\n      gas: Big(10).pow(12).mul(100),\\\\\\\\n    });\\\\\\\\n  } else if (mode == \\\\\\\\\\\\\\\"Edit\\\\\\\\\\\\\\\") {\\\\\\\\n    txn.push({\\\\\\\\n      contractName: \\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\",\\\\\\\\n      methodName: \\\\\\\\\\\\\\\"edit_post\\\\\\\\\\\\\\\",\\\\\\\\n      args: {\\\\\\\\n        id: postId,\\\\\\\\n        labels,\\\\\\\\n        body: body,\\\\\\\\n      },\\\\\\\\n      deposit: Big(10).pow(21).mul(2),\\\\\\\\n      gas: Big(10).pow(12).mul(100),\\\\\\\\n    });\\\\\\\\n  }\\\\\\\\n  if (mode == \\\\\\\\\\\\\\\"Create\\\\\\\\\\\\\\\" || mode == \\\\\\\\\\\\\\\"Edit\\\\\\\\\\\\\\\") {\\\\\\\\n    if (grantNotify === false) {\\\\\\\\n      txn.unshift({\\\\\\\\n        contractName: \\\\\\\\\\\\\\\"social.near\\\\\\\\\\\\\\\",\\\\\\\\n        methodName: \\\\\\\\\\\\\\\"grant_write_permission\\\\\\\\\\\\\\\",\\\\\\\\n        args: {\\\\\\\\n          predecessor_id: \\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\",\\\\\\\\n          keys: [context.accountId + \\\\\\\\\\\\\\\"/index/notify\\\\\\\\\\\\\\\"],\\\\\\\\n        },\\\\\\\\n        deposit: Big(10).pow(23),\\\\\\\\n        gas: Big(10).pow(12).mul(30),\\\\\\\\n      });\\\\\\\\n    }\\\\\\\\n    Near.call(txn);\\\\\\\\n  }\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst onIdeaClick = () => {\\\\\\\\n  State.update({ postType: \\\\\\\\\\\\\\\"Idea\\\\\\\\\\\\\\\", seekingFunding: false });\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst onSolutionClick = () => {\\\\\\\\n  State.update({ postType: \\\\\\\\\\\\\\\"Solution\\\\\\\\\\\\\\\" });\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst normalizeLabel = (label) =>\\\\\\\\n  label\\\\\\\\n    .replaceAll(/[- \\\\\\\\\\\\\\\\.]/g, \\\\\\\\\\\\\\\"_\\\\\\\\\\\\\\\")\\\\\\\\n    .replaceAll(/[^\\\\\\\\\\\\\\\\w]+/g, \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\")\\\\\\\\n    .replaceAll(/_+/g, \\\\\\\\\\\\\\\"-\\\\\\\\\\\\\\\")\\\\\\\\n    .replace(/^-+/, \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\")\\\\\\\\n    .replace(/-+$/, \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\")\\\\\\\\n    .toLowerCase()\\\\\\\\n    .trim(\\\\\\\\\\\\\\\"-\\\\\\\\\\\\\\\");\\\\\\\\n\\\\\\\\nconst checkLabel = (label) => {\\\\\\\\n  Near.asyncView(\\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"is_allowed_to_use_labels\\\\\\\\\\\\\\\", {\\\\\\\\n    editor: context.accountId,\\\\\\\\n    labels: [label],\\\\\\\\n  }).then((allowed) => {\\\\\\\\n    if (allowed) {\\\\\\\\n      State.update({ warning: \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\" });\\\\\\\\n    } else {\\\\\\\\n      State.update({\\\\\\\\n        warning:\\\\\\\\n          \\\\\\\\\\\\'The label \\\\\\\\\\\\\\\"\\\\\\\\\\\\' +\\\\\\\\n          label +\\\\\\\\n          \\\\\\\\\\\\'\\\\\\\\\\\\\\\" is protected and can only be added by moderators\\\\\\\\\\\\',\\\\\\\\n      });\\\\\\\\n      return;\\\\\\\\n    }\\\\\\\\n  });\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst setLabels = (labels) => {\\\\\\\\n  labels = labels.map((o) => {\\\\\\\\n    o.name = normalizeLabel(o.name);\\\\\\\\n    return o;\\\\\\\\n  });\\\\\\\\n  if (labels.length < state.labels.length) {\\\\\\\\n    let oldLabels = new Set(state.labels.map((label) => label.name));\\\\\\\\n    for (let label of labels) {\\\\\\\\n      oldLabels.delete(label.name);\\\\\\\\n    }\\\\\\\\n    let removed = oldLabels.values().next().value;\\\\\\\\n    Near.asyncView(\\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"is_allowed_to_use_labels\\\\\\\\\\\\\\\", {\\\\\\\\n      editor: context.accountId,\\\\\\\\n      labels: [removed],\\\\\\\\n    }).then((allowed) => {\\\\\\\\n      if (allowed) {\\\\\\\\n        let labelStrings = labels.map(({ name }) => name);\\\\\\\\n        State.update({ labels, labelStrings });\\\\\\\\n      } else {\\\\\\\\n        State.update({\\\\\\\\n          warning:\\\\\\\\n            \\\\\\\\\\\\'The label \\\\\\\\\\\\\\\"\\\\\\\\\\\\' +\\\\\\\\n            removed +\\\\\\\\n            \\\\\\\\\\\\'\\\\\\\\\\\\\\\" is protected and can only be updated by moderators\\\\\\\\\\\\',\\\\\\\\n        });\\\\\\\\n        return;\\\\\\\\n      }\\\\\\\\n    });\\\\\\\\n  } else {\\\\\\\\n    let labelStrings = labels.map((o) => {\\\\\\\\n      return o.name;\\\\\\\\n    });\\\\\\\\n    State.update({ labels, labelStrings });\\\\\\\\n  }\\\\\\\\n};\\\\\\\\nconst existingLabelStrings =\\\\\\\\n  Near.view(\\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"get_all_allowed_labels\\\\\\\\\\\\\\\", {\\\\\\\\n    editor: context.accountId,\\\\\\\\n  }) ?? [];\\\\\\\\nconst existingLabelSet = new Set(existingLabelStrings);\\\\\\\\nconst existingLabels = existingLabelStrings\\\\\\\\n  .filter((it) => it !== \\\\\\\\\\\\\\\"blog\\\\\\\\\\\\\\\") // remove blog label so users cannot publish blogs from feed\\\\\\\\n  .map((s) => {\\\\\\\\n    return { name: s };\\\\\\\\n  });\\\\\\\\n\\\\\\\\nconst labelEditor = (\\\\\\\\n  <div className=\\\\\\\\\\\\\\\"col-lg-12 mb-2\\\\\\\\\\\\\\\">\\\\\\\\n    <p className=\\\\\\\\\\\\\\\"fs-6 fw-bold mb-1\\\\\\\\\\\\\\\">Labels</p>\\\\\\\\n    <Typeahead\\\\\\\\n      multiple\\\\\\\\n      labelKey=\\\\\\\\\\\\\\\"name\\\\\\\\\\\\\\\"\\\\\\\\n      onInputChange={checkLabel}\\\\\\\\n      onChange={setLabels}\\\\\\\\n      options={existingLabels}\\\\\\\\n      placeholder=\\\\\\\\\\\\\\\"near.social, widget, NEP, standard, protocol, tool\\\\\\\\\\\\\\\"\\\\\\\\n      selected={state.labels}\\\\\\\\n      positionFixed\\\\\\\\n      allowNew={(results, props) => {\\\\\\\\n        return (\\\\\\\\n          !existingLabelSet.has(props.text) &&\\\\\\\\n          props.text.toLowerCase() !== \\\\\\\\\\\\\\\"blog\\\\\\\\\\\\\\\" && // dont allow adding \\\\\\\\\\\\\\\"Blog\\\\\\\\\\\\\\\"\\\\\\\\n          props.selected.filter((selected) => selected.name === props.text)\\\\\\\\n            .length == 0 &&\\\\\\\\n          Near.view(\\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"is_allowed_to_use_labels\\\\\\\\\\\\\\\", {\\\\\\\\n            editor: context.accountId,\\\\\\\\n            labels: [props.text],\\\\\\\\n          })\\\\\\\\n        );\\\\\\\\n      }}\\\\\\\\n    />\\\\\\\\n  </div>\\\\\\\\n);\\\\\\\\n\\\\\\\\nconst nameDiv = (\\\\\\\\n  <div className=\\\\\\\\\\\\\\\"col-lg-6 mb-2\\\\\\\\\\\\\\\">\\\\\\\\n    <p className=\\\\\\\\\\\\\\\"fs-6 fw-bold mb-1\\\\\\\\\\\\\\\">Title</p>\\\\\\\\n    <input\\\\\\\\n      type=\\\\\\\\\\\\\\\"text\\\\\\\\\\\\\\\"\\\\\\\\n      value={state.name}\\\\\\\\n      onChange={(event) => State.update({ name: event.target.value })}\\\\\\\\n    />\\\\\\\\n  </div>\\\\\\\\n);\\\\\\\\n\\\\\\\\nconst descriptionDiv = (\\\\\\\\n  <div className=\\\\\\\\\\\\\\\"col-lg-12 mb-2\\\\\\\\\\\\\\\">\\\\\\\\n    <p className=\\\\\\\\\\\\\\\"fs-6 fw-bold mb-1\\\\\\\\\\\\\\\">Description</p>\\\\\\\\n    <Widget\\\\\\\\n      src=\\\\\\\\\\\\\\\"devhub.near/widget/devhub.components.molecule.MarkdownEditor\\\\\\\\\\\\\\\"\\\\\\\\n      props={{\\\\\\\\n        data: { handler: state.handler, content: state.description },\\\\\\\\n        onChange: (content) => {\\\\\\\\n          State.update({ description: content, handler: \\\\\\\\\\\\\\\"update\\\\\\\\\\\\\\\" });\\\\\\\\n          textareaInputHandler(content);\\\\\\\\n        },\\\\\\\\n      }}\\\\\\\\n    />\\\\\\\\n    {autocompleteEnabled && state.showAccountAutocomplete && (\\\\\\\\n      <AutoComplete>\\\\\\\\n        <Widget\\\\\\\\n          src=\\\\\\\\\\\\\\\"devhub.near/widget/devhub.components.molecule.AccountAutocomplete\\\\\\\\\\\\\\\"\\\\\\\\n          props={{\\\\\\\\n            term: state.mentionInput,\\\\\\\\n            onSelect: autoCompleteAccountId,\\\\\\\\n            onClose: () => State.update({ showAccountAutocomplete: false }),\\\\\\\\n          }}\\\\\\\\n        />\\\\\\\\n      </AutoComplete>\\\\\\\\n    )}\\\\\\\\n  </div>\\\\\\\\n);\\\\\\\\n\\\\\\\\nconst isFundraisingDiv = (\\\\\\\\n  // This is jank with just btns and not radios. But the radios were glitchy af\\\\\\\\n  <>\\\\\\\\n    <div class=\\\\\\\\\\\\\\\"mb-2\\\\\\\\\\\\\\\">\\\\\\\\n      <p class=\\\\\\\\\\\\\\\"fs-6 fw-bold mb-1\\\\\\\\\\\\\\\">\\\\\\\\n        Are you seeking funding for your solution?\\\\\\\\n        <span class=\\\\\\\\\\\\\\\"text-muted fw-normal\\\\\\\\\\\\\\\">(Optional)</span>\\\\\\\\n      </p>\\\\\\\\n      <div class=\\\\\\\\\\\\\\\"form-check form-check-inline\\\\\\\\\\\\\\\">\\\\\\\\n        <label class=\\\\\\\\\\\\\\\"form-check-label\\\\\\\\\\\\\\\">\\\\\\\\n          <button\\\\\\\\n            className=\\\\\\\\\\\\\\\"btn btn-light p-0\\\\\\\\\\\\\\\"\\\\\\\\n            style={{\\\\\\\\n              backgroundColor: state.seekingFunding ? \\\\\\\\\\\\\\\"#0C7283\\\\\\\\\\\\\\\" : \\\\\\\\\\\\\\\"inherit\\\\\\\\\\\\\\\",\\\\\\\\n              color: \\\\\\\\\\\\\\\"#f3f3f3\\\\\\\\\\\\\\\",\\\\\\\\n              border: \\\\\\\\\\\\\\\"solid #D9D9D9\\\\\\\\\\\\\\\",\\\\\\\\n              borderRadius: \\\\\\\\\\\\\\\"100%\\\\\\\\\\\\\\\",\\\\\\\\n              height: \\\\\\\\\\\\\\\"20px\\\\\\\\\\\\\\\",\\\\\\\\n              width: \\\\\\\\\\\\\\\"20px\\\\\\\\\\\\\\\",\\\\\\\\n            }}\\\\\\\\n            onClick={() => State.update({ seekingFunding: true })}\\\\\\\\n          />\\\\\\\\n          Yes\\\\\\\\n        </label>\\\\\\\\n      </div>\\\\\\\\n      <div class=\\\\\\\\\\\\\\\"form-check form-check-inline\\\\\\\\\\\\\\\">\\\\\\\\n        <label class=\\\\\\\\\\\\\\\"form-check-label\\\\\\\\\\\\\\\">\\\\\\\\n          <button\\\\\\\\n            className=\\\\\\\\\\\\\\\"btn btn-light p-0\\\\\\\\\\\\\\\"\\\\\\\\n            style={{\\\\\\\\n              backgroundColor: !state.seekingFunding ? \\\\\\\\\\\\\\\"#0C7283\\\\\\\\\\\\\\\" : \\\\\\\\\\\\\\\"inherit\\\\\\\\\\\\\\\",\\\\\\\\n              color: \\\\\\\\\\\\\\\"#f3f3f3\\\\\\\\\\\\\\\",\\\\\\\\n              border: \\\\\\\\\\\\\\\"solid #D9D9D9\\\\\\\\\\\\\\\",\\\\\\\\n              borderRadius: \\\\\\\\\\\\\\\"100%\\\\\\\\\\\\\\\",\\\\\\\\n              height: \\\\\\\\\\\\\\\"20px\\\\\\\\\\\\\\\",\\\\\\\\n              width: \\\\\\\\\\\\\\\"20px\\\\\\\\\\\\\\\",\\\\\\\\n            }}\\\\\\\\n            onClick={() => State.update({ seekingFunding: false })}\\\\\\\\n          />\\\\\\\\n          No\\\\\\\\n        </label>\\\\\\\\n      </div>\\\\\\\\n    </div>\\\\\\\\n  </>\\\\\\\\n);\\\\\\\\n\\\\\\\\nconst fundraisingDiv = (\\\\\\\\n  <div class=\\\\\\\\\\\\\\\"d-flex flex-column mb-2\\\\\\\\\\\\\\\">\\\\\\\\n    <div className=\\\\\\\\\\\\\\\"col-lg-6  mb-2\\\\\\\\\\\\\\\">\\\\\\\\n      Currency\\\\\\\\n      <select\\\\\\\\n        onChange={(event) => State.update({ token: event.target.value })}\\\\\\\\n        class=\\\\\\\\\\\\\\\"form-select\\\\\\\\\\\\\\\"\\\\\\\\n        aria-label=\\\\\\\\\\\\\\\"Default select\\\\\\\\\\\\\\\"\\\\\\\\n      >\\\\\\\\n        <option selected value=\\\\\\\\\\\\\\\"USDT\\\\\\\\\\\\\\\">\\\\\\\\n          USDT\\\\\\\\n        </option>\\\\\\\\n        <option value=\\\\\\\\\\\\\\\"NEAR\\\\\\\\\\\\\\\">NEAR</option>\\\\\\\\n        <option value=\\\\\\\\\\\\\\\"USDC\\\\\\\\\\\\\\\">USDC</option>\\\\\\\\n      </select>\\\\\\\\n    </div>\\\\\\\\n    <div className=\\\\\\\\\\\\\\\"col-lg-6 mb-2\\\\\\\\\\\\\\\">\\\\\\\\n      Requested amount <span class=\\\\\\\\\\\\\\\"text-muted fw-normal\\\\\\\\\\\\\\\">(Numbers Only)</span>\\\\\\\\n      <input\\\\\\\\n        type=\\\\\\\\\\\\\\\"number\\\\\\\\\\\\\\\"\\\\\\\\n        value={parseInt(state.amount) > 0 ? state.amount : \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\"}\\\\\\\\n        min={0}\\\\\\\\n        onChange={(event) =>\\\\\\\\n          State.update({\\\\\\\\n            amount: Number(\\\\\\\\n              event.target.value.toString().replace(/e/g, \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\")\\\\\\\\n            ).toString(),\\\\\\\\n          })\\\\\\\\n        }\\\\\\\\n      />\\\\\\\\n    </div>\\\\\\\\n    <div className=\\\\\\\\\\\\\\\"col-lg-6 mb-2\\\\\\\\\\\\\\\">\\\\\\\\n      <p class=\\\\\\\\\\\\\\\"mb-1\\\\\\\\\\\\\\\">\\\\\\\\n        Requested sponsor <span class=\\\\\\\\\\\\\\\"text-muted fw-normal\\\\\\\\\\\\\\\">(Optional)</span>\\\\\\\\n      </p>\\\\\\\\n      <p style={{ fontSize: \\\\\\\\\\\\\\\"13px\\\\\\\\\\\\\\\" }} class=\\\\\\\\\\\\\\\"m-0 text-muted fw-light\\\\\\\\\\\\\\\">\\\\\\\\n        If you are requesting funding from a specific sponsor, please enter\\\\\\\\n        their username.\\\\\\\\n      </p>\\\\\\\\n      <div class=\\\\\\\\\\\\\\\"input-group flex-nowrap\\\\\\\\\\\\\\\">\\\\\\\\n        <span class=\\\\\\\\\\\\\\\"input-group-text\\\\\\\\\\\\\\\" id=\\\\\\\\\\\\\\\"addon-wrapping\\\\\\\\\\\\\\\">\\\\\\\\n          @\\\\\\\\n        </span>\\\\\\\\n        <input\\\\\\\\n          type=\\\\\\\\\\\\\\\"text\\\\\\\\\\\\\\\"\\\\\\\\n          class=\\\\\\\\\\\\\\\"form-control\\\\\\\\\\\\\\\"\\\\\\\\n          placeholder=\\\\\\\\\\\\\\\"Enter username\\\\\\\\\\\\\\\"\\\\\\\\n          value={state.supervisor}\\\\\\\\n          onChange={(event) => State.update({ supervisor: event.target.value })}\\\\\\\\n        />\\\\\\\\n      </div>\\\\\\\\n    </div>\\\\\\\\n  </div>\\\\\\\\n);\\\\\\\\n\\\\\\\\nfunction generateDescription(text, amount, token, supervisor, seekingFunding) {\\\\\\\\n  const fundingText =\\\\\\\\n    amount > 0 && token ? `###### Requested amount: ${amount} ${token}\\\\\\\\\\\\\\\\n` : \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\";\\\\\\\\n  const supervisorText = supervisor\\\\\\\\n    ? `###### Requested sponsor: @${supervisor}\\\\\\\\\\\\\\\\n`\\\\\\\\n    : \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\";\\\\\\\\n  return seekingFunding ? `${fundingText}${supervisorText}${text}` : text;\\\\\\\\n}\\\\\\\\n\\\\\\\\nreturn (\\\\\\\\n  <div class=\\\\\\\\\\\\\\\"bg-light d-flex flex-column flex-grow-1 w-100\\\\\\\\\\\\\\\">\\\\\\\\n    <div class=\\\\\\\\\\\\\\\"mx-5 mb-5\\\\\\\\\\\\\\\">\\\\\\\\n      <div aria-label=\\\\\\\\\\\\\\\"breadcrumb\\\\\\\\\\\\\\\">\\\\\\\\n        <ol class=\\\\\\\\\\\\\\\"breadcrumb\\\\\\\\\\\\\\\">\\\\\\\\n          <li class=\\\\\\\\\\\\\\\"breadcrumb-item\\\\\\\\\\\\\\\">\\\\\\\\n            <Link\\\\\\\\n              style={{\\\\\\\\n                color: \\\\\\\\\\\\\\\"#3252A6\\\\\\\\\\\\\\\",\\\\\\\\n              }}\\\\\\\\n              className=\\\\\\\\\\\\\\\"fw-bold\\\\\\\\\\\\\\\"\\\\\\\\n              to={href({\\\\\\\\n                widgetSrc: \\\\\\\\\\\\\\\"devhub.near/widget/app\\\\\\\\\\\\\\\",\\\\\\\\n                params: { page: \\\\\\\\\\\\\\\"feed\\\\\\\\\\\\\\\" },\\\\\\\\n              })}\\\\\\\\n            >\\\\\\\\n              DevHub\\\\\\\\n            </Link>\\\\\\\\n          </li>\\\\\\\\n          <li class=\\\\\\\\\\\\\\\"breadcrumb-item active\\\\\\\\\\\\\\\" aria-current=\\\\\\\\\\\\\\\"page\\\\\\\\\\\\\\\">\\\\\\\\n            Create new\\\\\\\\n          </li>\\\\\\\\n        </ol>\\\\\\\\n      </div>\\\\\\\\n      {props.transactionHashes ? (\\\\\\\\n        <>\\\\\\\\n          Post created successfully. Back to{\\\\\\\\\\\\\\\" \\\\\\\\\\\\\\\"}\\\\\\\\n          <Link\\\\\\\\n            style={{\\\\\\\\n              color: \\\\\\\\\\\\\\\"#3252A6\\\\\\\\\\\\\\\",\\\\\\\\n            }}\\\\\\\\n            className=\\\\\\\\\\\\\\\"fw-bold\\\\\\\\\\\\\\\"\\\\\\\\n            to={href({\\\\\\\\n              widgetSrc: \\\\\\\\\\\\\\\"devhub.near/widget/app\\\\\\\\\\\\\\\",\\\\\\\\n              params: { page: \\\\\\\\\\\\\\\"feed\\\\\\\\\\\\\\\" },\\\\\\\\n            })}\\\\\\\\n          >\\\\\\\\n            feed\\\\\\\\n          </Link>\\\\\\\\n        </>\\\\\\\\n      ) : (\\\\\\\\n        <>\\\\\\\\n          <h4>Create a new post</h4>\\\\\\\\n          <p>{state.seekingFunding}</p>\\\\\\\\n          <div class=\\\\\\\\\\\\\\\"card border-light\\\\\\\\\\\\\\\">\\\\\\\\n            <div class=\\\\\\\\\\\\\\\"card-body\\\\\\\\\\\\\\\">\\\\\\\\n              <p class=\\\\\\\\\\\\\\\"card-title fw-bold fs-6\\\\\\\\\\\\\\\">What do you want to create?</p>\\\\\\\\n              <div class=\\\\\\\\\\\\\\\"d-flex flex-row gap-2\\\\\\\\\\\\\\\">\\\\\\\\n                <button\\\\\\\\n                  onClick={onIdeaClick}\\\\\\\\n                  type=\\\\\\\\\\\\\\\"button\\\\\\\\\\\\\\\"\\\\\\\\n                  class={`btn btn-outline-secondary`}\\\\\\\\n                  style={\\\\\\\\n                    state.postType === \\\\\\\\\\\\\\\"Idea\\\\\\\\\\\\\\\"\\\\\\\\n                      ? {\\\\\\\\n                          backgroundColor: \\\\\\\\\\\\\\\"#0C7283\\\\\\\\\\\\\\\",\\\\\\\\n                          color: \\\\\\\\\\\\\\\"#f3f3f3\\\\\\\\\\\\\\\",\\\\\\\\n                        }\\\\\\\\n                      : {}\\\\\\\\n                  }\\\\\\\\n                >\\\\\\\\n                  <i class=\\\\\\\\\\\\\\\"bi bi-lightbulb\\\\\\\\\\\\\\\"></i>\\\\\\\\n                  Idea\\\\\\\\n                </button>\\\\\\\\n                <button\\\\\\\\n                  onClick={onSolutionClick}\\\\\\\\n                  type=\\\\\\\\\\\\\\\"button\\\\\\\\\\\\\\\"\\\\\\\\n                  class={`btn btn-outline-secondary`}\\\\\\\\n                  style={\\\\\\\\n                    state.postType !== \\\\\\\\\\\\\\\"Idea\\\\\\\\\\\\\\\"\\\\\\\\n                      ? {\\\\\\\\n                          backgroundColor: \\\\\\\\\\\\\\\"#0C7283\\\\\\\\\\\\\\\",\\\\\\\\n                          color: \\\\\\\\\\\\\\\"#f3f3f3\\\\\\\\\\\\\\\",\\\\\\\\n                        }\\\\\\\\n                      : {}\\\\\\\\n                  }\\\\\\\\n                >\\\\\\\\n                  <i class=\\\\\\\\\\\\\\\"bi bi-rocket\\\\\\\\\\\\\\\"></i>\\\\\\\\n                  Solution\\\\\\\\n                </button>\\\\\\\\n              </div>\\\\\\\\n              <p class=\\\\\\\\\\\\\\\"text-muted w-75 my-1\\\\\\\\\\\\\\\">\\\\\\\\n                {state.postType === \\\\\\\\\\\\\\\"Idea\\\\\\\\\\\\\\\"\\\\\\\\n                  ? \\\\\\\\\\\\\\\"Get feedback from the community about a problem, opportunity, or need.\\\\\\\\\\\\\\\"\\\\\\\\n                  : \\\\\\\\\\\\\\\"Provide a specific proposal or implementation to an idea, optionally requesting funding. If your solution relates to an existing idea, please reply to the original post with a solution.\\\\\\\\\\\\\\\"}\\\\\\\\n              </p>\\\\\\\\n              {state.warning && (\\\\\\\\n                <div\\\\\\\\n                  class=\\\\\\\\\\\\\\\"alert alert-warning alert-dismissible fade show\\\\\\\\\\\\\\\"\\\\\\\\n                  role=\\\\\\\\\\\\\\\"alert\\\\\\\\\\\\\\\"\\\\\\\\n                >\\\\\\\\n                  {state.warning}\\\\\\\\n                  <button\\\\\\\\n                    type=\\\\\\\\\\\\\\\"button\\\\\\\\\\\\\\\"\\\\\\\\n                    class=\\\\\\\\\\\\\\\"btn-close\\\\\\\\\\\\\\\"\\\\\\\\n                    data-bs-dismiss=\\\\\\\\\\\\\\\"alert\\\\\\\\\\\\\\\"\\\\\\\\n                    aria-label=\\\\\\\\\\\\\\\"Close\\\\\\\\\\\\\\\"\\\\\\\\n                    onClick={() => State.update({ warning: \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\" })}\\\\\\\\n                  ></button>\\\\\\\\n                </div>\\\\\\\\n              )}\\\\\\\\n              <div className=\\\\\\\\\\\\\\\"row\\\\\\\\\\\\\\\">\\\\\\\\n                {nameDiv}\\\\\\\\n                {descriptionDiv}\\\\\\\\n                {labelEditor}\\\\\\\\n                {state.postType === \\\\\\\\\\\\\\\"Solution\\\\\\\\\\\\\\\" && isFundraisingDiv}\\\\\\\\n                {state.seekingFunding && fundraisingDiv}\\\\\\\\n              </div>\\\\\\\\n              <button\\\\\\\\n                style={{\\\\\\\\n                  width: \\\\\\\\\\\\\\\"7rem\\\\\\\\\\\\\\\",\\\\\\\\n                  backgroundColor: \\\\\\\\\\\\\\\"#0C7283\\\\\\\\\\\\\\\",\\\\\\\\n                  color: \\\\\\\\\\\\\\\"#f3f3f3\\\\\\\\\\\\\\\",\\\\\\\\n                }}\\\\\\\\n                disabled={\\\\\\\\n                  state.seekingFunding && (!state.amount || state.amount < 1)\\\\\\\\n                }\\\\\\\\n                className=\\\\\\\\\\\\\\\"btn btn-light mb-2 p-3\\\\\\\\\\\\\\\"\\\\\\\\n                onClick={onSubmit}\\\\\\\\n              >\\\\\\\\n                Submit\\\\\\\\n              </button>\\\\\\\\n            </div>\\\\\\\\n            <div class=\\\\\\\\\\\\\\\"bg-light d-flex flex-row p-1 border-bottom\\\\\\\\\\\\\\\"></div>\\\\\\\\n            <div class=\\\\\\\\\\\\\\\"card-body\\\\\\\\\\\\\\\">\\\\\\\\n              <p class=\\\\\\\\\\\\\\\"text-muted m-0\\\\\\\\\\\\\\\">Preview</p>\\\\\\\\n              <div>\\\\\\\\n                <Widget\\\\\\\\n                  src=\\\\\\\\\\\\\\\"devhub.near/widget/devhub.entity.post.Post\\\\\\\\\\\\\\\"\\\\\\\\n                  props={{\\\\\\\\n                    isPreview: true,\\\\\\\\n                    id: 0, // irrelevant\\\\\\\\n                    post: {\\\\\\\\n                      author_id: state.author_id,\\\\\\\\n                      likes: [],\\\\\\\\n                      snapshot: {\\\\\\\\n                        editor_id: state.editor_id,\\\\\\\\n                        labels: state.labelStrings,\\\\\\\\n                        post_type: state.postType,\\\\\\\\n                        name: state.name,\\\\\\\\n                        description: generateDescription(\\\\\\\\n                          state.description,\\\\\\\\n                          state.amount,\\\\\\\\n                          state.token,\\\\\\\\n                          state.supervisor,\\\\\\\\n                          state.seekingFunding\\\\\\\\n                        ),\\\\\\\\n                        github_link: state.githubLink,\\\\\\\\n                      },\\\\\\\\n                    },\\\\\\\\n                  }}\\\\\\\\n                />\\\\\\\\n              </div>\\\\\\\\n            </div>\\\\\\\\n          </div>\\\\\\\\n        </>\\\\\\\\n      )}\\\\\\\\n    </div>\\\\\\\\n  </div>\\\\\\\\n);\\\\\\\\n\"}, \"devhub.entity.post.PostEditor\": {\"\": \"/* INCLUDE: \\\\\\\\\\\\\\\"core/lib/autocomplete\\\\\\\\\\\\\\\" */\\\\\\\\nconst autocompleteEnabled = true;\\\\\\\\n\\\\\\\\nconst AutoComplete = styled.div`\\\\\\\\n  z-index: 5;\\\\\\\\n\\\\\\\\n  > div > div {\\\\\\\\n    padding: calc(var(--padding) / 2);\\\\\\\\n  }\\\\\\\\n`;\\\\\\\\n\\\\\\\\nfunction textareaInputHandler(value) {\\\\\\\\n  const showAccountAutocomplete = /@[\\\\\\\\\\\\\\\\w][^\\\\\\\\\\\\\\\\s]*$/.test(value);\\\\\\\\n  State.update((lastKnownState) => ({\\\\\\\\n    ...lastKnownState,\\\\\\\\n    text: value,\\\\\\\\n    showAccountAutocomplete,\\\\\\\\n  }));\\\\\\\\n}\\\\\\\\n\\\\\\\\nfunction autoCompleteAccountId(id) {\\\\\\\\n  let description = state.description.replace(/[\\\\\\\\\\\\\\\\s]{0,1}@[^\\\\\\\\\\\\\\\\s]*$/, \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\");\\\\\\\\n  description = `${description} @${id}`.trim() + \\\\\\\\\\\\\\\" \\\\\\\\\\\\\\\";\\\\\\\\n  State.update((lastKnownState) => ({\\\\\\\\n    ...lastKnownState,\\\\\\\\n    description,\\\\\\\\n    showAccountAutocomplete: false,\\\\\\\\n  }));\\\\\\\\n}\\\\\\\\n/* END_INCLUDE: \\\\\\\\\\\\\\\"core/lib/autocomplete\\\\\\\\\\\\\\\" */\\\\\\\\n\\\\\\\\nconst postType = props.postType ?? \\\\\\\\\\\\\\\"Sponsorship\\\\\\\\\\\\\\\";\\\\\\\\nconst parentId = props.parentId ?? null;\\\\\\\\nconst postId = props.postId ?? null;\\\\\\\\nconst mode = props.mode ?? \\\\\\\\\\\\\\\"Create\\\\\\\\\\\\\\\";\\\\\\\\nconst toggleEditor = props.toggleEditor;\\\\\\\\n\\\\\\\\nconst referralLabels = props.referral ? [`referral:${props.referral}`] : [];\\\\\\\\nconst labelStrings = (props.labels ?? []).concat(referralLabels);\\\\\\\\n\\\\\\\\nconst labels = labelStrings.map((s) => {\\\\\\\\n  return { name: s };\\\\\\\\n});\\\\\\\\n\\\\\\\\ninitState({\\\\\\\\n  seekingFunding: false,\\\\\\\\n  author_id: context.accountId,\\\\\\\\n  // Should be a list of objects with field \\\\\\\\\\\\\\\"name\\\\\\\\\\\\\\\".\\\\\\\\n  labels,\\\\\\\\n  // Should be a list of labels as strings.\\\\\\\\n  // Both of the label structures should be modified together.\\\\\\\\n  labelStrings,\\\\\\\\n  postType,\\\\\\\\n  name: props.name ?? \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\",\\\\\\\\n  description: props.description ?? \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\",\\\\\\\\n  amount: props.amount ?? \\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\n  token: props.token ?? \\\\\\\\\\\\\\\"USDT\\\\\\\\\\\\\\\",\\\\\\\\n  supervisor: props.supervisor ?? \\\\\\\\\\\\\\\"neardevdao.near\\\\\\\\\\\\\\\",\\\\\\\\n  githubLink: props.githubLink ?? \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\",\\\\\\\\n  warning: \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\",\\\\\\\\n  draftStateApplied: false,\\\\\\\\n});\\\\\\\\n\\\\\\\\nif (!state.draftStateApplied && props.draftState) {\\\\\\\\n  State.update({ ...props.draftState, draftStateApplied: true });\\\\\\\\n}\\\\\\\\n\\\\\\\\nlet fields = {\\\\\\\\n  Comment: [\\\\\\\\\\\\\\\"description\\\\\\\\\\\\\\\"],\\\\\\\\n  Idea: [\\\\\\\\\\\\\\\"name\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"description\\\\\\\\\\\\\\\"],\\\\\\\\n  Solution: [\\\\\\\\\\\\\\\"name\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"description\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"fund_raising\\\\\\\\\\\\\\\"],\\\\\\\\n  Attestation: [\\\\\\\\\\\\\\\"name\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"description\\\\\\\\\\\\\\\"],\\\\\\\\n  Sponsorship: [\\\\\\\\n    \\\\\\\\\\\\\\\"name\\\\\\\\\\\\\\\",\\\\\\\\n    \\\\\\\\\\\\\\\"description\\\\\\\\\\\\\\\",\\\\\\\\n    \\\\\\\\\\\\\\\"amount\\\\\\\\\\\\\\\",\\\\\\\\n    \\\\\\\\\\\\\\\"sponsorship_token\\\\\\\\\\\\\\\",\\\\\\\\n    \\\\\\\\\\\\\\\"supervisor\\\\\\\\\\\\\\\",\\\\\\\\n  ],\\\\\\\\n  Github: [\\\\\\\\\\\\\\\"githubLink\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"name\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"description\\\\\\\\\\\\\\\"],\\\\\\\\n}[postType];\\\\\\\\n\\\\\\\\n// This must be outside onClick, because Near.view returns null at first, and when the view call finished, it returns true/false.\\\\\\\\n// If checking this inside onClick, it will give `null` and we cannot tell the result is true or false.\\\\\\\\nlet grantNotify = Near.view(\\\\\\\\\\\\\\\"social.near\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"is_write_permission_granted\\\\\\\\\\\\\\\", {\\\\\\\\n  predecessor_id: \\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\",\\\\\\\\n  key: context.accountId + \\\\\\\\\\\\\\\"/index/notify\\\\\\\\\\\\\\\",\\\\\\\\n});\\\\\\\\nif (grantNotify === null) {\\\\\\\\n  return;\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst tokenMapping = {\\\\\\\\n  NEAR: \\\\\\\\\\\\\\\"NEAR\\\\\\\\\\\\\\\",\\\\\\\\n  USDT: {\\\\\\\\n    NEP141: {\\\\\\\\n      address: \\\\\\\\\\\\\\\"usdt.tether-token.near\\\\\\\\\\\\\\\",\\\\\\\\n    },\\\\\\\\n  },\\\\\\\\n  USDC: {\\\\\\\\n    NEP141: {\\\\\\\\n      address:\\\\\\\\n        \\\\\\\\\\\\\\\"17208628f84f5d6ad33f0da3bbbeb27ffcb398eac501a31bd6ad2011e36133a1\\\\\\\\\\\\\\\",\\\\\\\\n    },\\\\\\\\n  },\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst onSubmit = () => {\\\\\\\\n  let labels = state.labelStrings;\\\\\\\\n  var body = {\\\\\\\\n    Comment: { description: state.description, comment_version: \\\\\\\\\\\\\\\"V2\\\\\\\\\\\\\\\" },\\\\\\\\n    Idea: {\\\\\\\\n      name: state.name,\\\\\\\\n      description: state.description,\\\\\\\\n      idea_version: \\\\\\\\\\\\\\\"V1\\\\\\\\\\\\\\\",\\\\\\\\n    },\\\\\\\\n    Solution: {\\\\\\\\n      name: state.name,\\\\\\\\n      description: generateDescription(\\\\\\\\n        state.description,\\\\\\\\n        state.amount,\\\\\\\\n        state.token,\\\\\\\\n        state.supervisor,\\\\\\\\n        state.seekingFunding\\\\\\\\n      ),\\\\\\\\n      solution_version: \\\\\\\\\\\\\\\"V1\\\\\\\\\\\\\\\",\\\\\\\\n    },\\\\\\\\n    Attestation: {\\\\\\\\n      name: state.name,\\\\\\\\n      description: state.description,\\\\\\\\n      attestation_version: \\\\\\\\\\\\\\\"V1\\\\\\\\\\\\\\\",\\\\\\\\n    },\\\\\\\\n    Sponsorship: {\\\\\\\\n      name: state.name,\\\\\\\\n      description: state.description,\\\\\\\\n      amount: state.amount,\\\\\\\\n      sponsorship_token: tokenMapping[state.token],\\\\\\\\n      supervisor: state.supervisor,\\\\\\\\n      sponsorship_version: \\\\\\\\\\\\\\\"V1\\\\\\\\\\\\\\\",\\\\\\\\n    },\\\\\\\\n    Github: {\\\\\\\\n      name: state.name,\\\\\\\\n      description: state.description,\\\\\\\\n      github_version: \\\\\\\\\\\\\\\"V0\\\\\\\\\\\\\\\",\\\\\\\\n      github_link: state.githubLink,\\\\\\\\n    },\\\\\\\\n  }[postType];\\\\\\\\n  body[\\\\\\\\\\\\\\\"post_type\\\\\\\\\\\\\\\"] = postType;\\\\\\\\n  if (!context.accountId) {\\\\\\\\n    return;\\\\\\\\n  }\\\\\\\\n  let txn = [];\\\\\\\\n  if (mode == \\\\\\\\\\\\\\\"Create\\\\\\\\\\\\\\\") {\\\\\\\\n    props.onDraftStateChange(\\\\\\\\n      Object.assign({}, state, { parent_post_id: parentId })\\\\\\\\n    );\\\\\\\\n    txn.push({\\\\\\\\n      contractName: \\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\",\\\\\\\\n      methodName: \\\\\\\\\\\\\\\"add_post\\\\\\\\\\\\\\\",\\\\\\\\n      args: {\\\\\\\\n        parent_id: parentId,\\\\\\\\n        labels,\\\\\\\\n        body,\\\\\\\\n      },\\\\\\\\n      deposit: Big(10).pow(21).mul(2),\\\\\\\\n      gas: Big(10).pow(12).mul(100),\\\\\\\\n    });\\\\\\\\n  } else if (mode == \\\\\\\\\\\\\\\"Edit\\\\\\\\\\\\\\\") {\\\\\\\\n    props.onDraftStateChange(\\\\\\\\n      Object.assign({}, state, { edit_post_id: postId })\\\\\\\\n    );\\\\\\\\n    txn.push({\\\\\\\\n      contractName: \\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\",\\\\\\\\n      methodName: \\\\\\\\\\\\\\\"edit_post\\\\\\\\\\\\\\\",\\\\\\\\n      args: {\\\\\\\\n        id: postId,\\\\\\\\n        labels,\\\\\\\\n        body,\\\\\\\\n      },\\\\\\\\n      deposit: Big(10).pow(21).mul(2),\\\\\\\\n      gas: Big(10).pow(12).mul(100),\\\\\\\\n    });\\\\\\\\n  }\\\\\\\\n  if (mode == \\\\\\\\\\\\\\\"Create\\\\\\\\\\\\\\\" || mode == \\\\\\\\\\\\\\\"Edit\\\\\\\\\\\\\\\") {\\\\\\\\n    if (grantNotify === false) {\\\\\\\\n      txn.unshift({\\\\\\\\n        contractName: \\\\\\\\\\\\\\\"social.near\\\\\\\\\\\\\\\",\\\\\\\\n        methodName: \\\\\\\\\\\\\\\"grant_write_permission\\\\\\\\\\\\\\\",\\\\\\\\n        args: {\\\\\\\\n          predecessor_id: \\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\",\\\\\\\\n          keys: [context.accountId + \\\\\\\\\\\\\\\"/index/notify\\\\\\\\\\\\\\\"],\\\\\\\\n        },\\\\\\\\n        deposit: Big(10).pow(23),\\\\\\\\n        gas: Big(10).pow(12).mul(30),\\\\\\\\n      });\\\\\\\\n    }\\\\\\\\n    Near.call(txn);\\\\\\\\n  }\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst normalizeLabel = (label) =>\\\\\\\\n  label\\\\\\\\n    .replaceAll(/[- \\\\\\\\\\\\\\\\.]/g, \\\\\\\\\\\\\\\"_\\\\\\\\\\\\\\\")\\\\\\\\n    .replaceAll(/[^\\\\\\\\\\\\\\\\w]+/g, \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\")\\\\\\\\n    .replaceAll(/_+/g, \\\\\\\\\\\\\\\"-\\\\\\\\\\\\\\\")\\\\\\\\n    .replace(/^-+/, \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\")\\\\\\\\n    .replace(/-+$/, \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\")\\\\\\\\n    .toLowerCase()\\\\\\\\n    .trim(\\\\\\\\\\\\\\\"-\\\\\\\\\\\\\\\");\\\\\\\\n\\\\\\\\nconst checkLabel = (label) => {\\\\\\\\n  Near.asyncView(\\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"is_allowed_to_use_labels\\\\\\\\\\\\\\\", {\\\\\\\\n    editor: context.accountId,\\\\\\\\n    labels: [label],\\\\\\\\n  }).then((allowed) => {\\\\\\\\n    if (allowed) {\\\\\\\\n      State.update({ warning: \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\" });\\\\\\\\n    } else {\\\\\\\\n      State.update({\\\\\\\\n        warning:\\\\\\\\n          \\\\\\\\\\\\'The label \\\\\\\\\\\\\\\"\\\\\\\\\\\\' +\\\\\\\\n          label +\\\\\\\\n          \\\\\\\\\\\\'\\\\\\\\\\\\\\\" is protected and can only be added by moderators\\\\\\\\\\\\',\\\\\\\\n      });\\\\\\\\n      return;\\\\\\\\n    }\\\\\\\\n  });\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst setLabels = (labels) => {\\\\\\\\n  labels = labels.map((o) => {\\\\\\\\n    o.name = normalizeLabel(o.name);\\\\\\\\n    return o;\\\\\\\\n  });\\\\\\\\n  if (labels.length < state.labels.length) {\\\\\\\\n    let oldLabels = new Set(state.labels.map((label) => label.name));\\\\\\\\n    for (let label of labels) {\\\\\\\\n      oldLabels.delete(label.name);\\\\\\\\n    }\\\\\\\\n    let removed = oldLabels.values().next().value;\\\\\\\\n    Near.asyncView(\\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"is_allowed_to_use_labels\\\\\\\\\\\\\\\", {\\\\\\\\n      editor: context.accountId,\\\\\\\\n      labels: [removed],\\\\\\\\n    }).then((allowed) => {\\\\\\\\n      if (allowed) {\\\\\\\\n        let labelStrings = labels.map(({ name }) => name);\\\\\\\\n        State.update({ labels, labelStrings });\\\\\\\\n      } else {\\\\\\\\n        State.update({\\\\\\\\n          warning:\\\\\\\\n            \\\\\\\\\\\\'The label \\\\\\\\\\\\\\\"\\\\\\\\\\\\' +\\\\\\\\n            removed +\\\\\\\\n            \\\\\\\\\\\\'\\\\\\\\\\\\\\\" is protected and can only be updated by moderators\\\\\\\\\\\\',\\\\\\\\n        });\\\\\\\\n        return;\\\\\\\\n      }\\\\\\\\n    });\\\\\\\\n  } else {\\\\\\\\n    let labelStrings = labels.map((o) => {\\\\\\\\n      return o.name;\\\\\\\\n    });\\\\\\\\n    State.update({ labels, labelStrings });\\\\\\\\n  }\\\\\\\\n};\\\\\\\\nconst existingLabelStrings =\\\\\\\\n  Near.view(\\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"get_all_allowed_labels\\\\\\\\\\\\\\\", {\\\\\\\\n    editor: context.accountId,\\\\\\\\n  }) ?? [];\\\\\\\\nconst existingLabelSet = new Set(existingLabelStrings);\\\\\\\\nconst existingLabels = existingLabelStrings\\\\\\\\n  .filter((it) => it !== \\\\\\\\\\\\\\\"blog\\\\\\\\\\\\\\\") // remove blog label so users cannot publish blogs from feed\\\\\\\\n  .map((s) => {\\\\\\\\n    return { name: s };\\\\\\\\n  });\\\\\\\\n\\\\\\\\nconst labelEditor = (\\\\\\\\n  <div className=\\\\\\\\\\\\\\\"col-lg-12  mb-2\\\\\\\\\\\\\\\">\\\\\\\\n    Labels:\\\\\\\\n    <Typeahead\\\\\\\\n      multiple\\\\\\\\n      labelKey=\\\\\\\\\\\\\\\"name\\\\\\\\\\\\\\\"\\\\\\\\n      onInputChange={checkLabel}\\\\\\\\n      onChange={setLabels}\\\\\\\\n      options={existingLabels}\\\\\\\\n      placeholder=\\\\\\\\\\\\\\\"near.social, widget, NEP, standard, protocol, tool\\\\\\\\\\\\\\\"\\\\\\\\n      selected={state.labels}\\\\\\\\n      positionFixed\\\\\\\\n      allowNew={(results, props) => {\\\\\\\\n        return (\\\\\\\\n          !existingLabelSet.has(props.text) &&\\\\\\\\n          props.text.toLowerCase() !== \\\\\\\\\\\\\\\"blog\\\\\\\\\\\\\\\" && // dont allow adding \\\\\\\\\\\\\\\"Blog\\\\\\\\\\\\\\\"\\\\\\\\n          props.selected.filter((selected) => selected.name === props.text)\\\\\\\\n            .length == 0 &&\\\\\\\\n          Near.view(\\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"is_allowed_to_use_labels\\\\\\\\\\\\\\\", {\\\\\\\\n            editor: context.accountId,\\\\\\\\n            labels: [props.text],\\\\\\\\n          })\\\\\\\\n        );\\\\\\\\n      }}\\\\\\\\n    />\\\\\\\\n  </div>\\\\\\\\n);\\\\\\\\n\\\\\\\\nconst githubLinkDiv = (\\\\\\\\n  <div className=\\\\\\\\\\\\\\\"col-lg-12  mb-2\\\\\\\\\\\\\\\">\\\\\\\\n    Github Issue URL:\\\\\\\\n    <input\\\\\\\\n      type=\\\\\\\\\\\\\\\"text\\\\\\\\\\\\\\\"\\\\\\\\n      value={state.githubLink}\\\\\\\\n      onChange={(event) => State.update({ githubLink: event.target.value })}\\\\\\\\n    />\\\\\\\\n  </div>\\\\\\\\n);\\\\\\\\n\\\\\\\\nconst nameDiv = (\\\\\\\\n  <div className=\\\\\\\\\\\\\\\"col-lg-6  mb-2\\\\\\\\\\\\\\\">\\\\\\\\n    Title:\\\\\\\\n    <input\\\\\\\\n      type=\\\\\\\\\\\\\\\"text\\\\\\\\\\\\\\\"\\\\\\\\n      value={state.name}\\\\\\\\n      onChange={(event) => State.update({ name: event.target.value })}\\\\\\\\n    />\\\\\\\\n  </div>\\\\\\\\n);\\\\\\\\n\\\\\\\\nconst amountDiv = (\\\\\\\\n  <div className=\\\\\\\\\\\\\\\"col-lg-6  mb-2\\\\\\\\\\\\\\\">\\\\\\\\n    Amount:\\\\\\\\n    <input\\\\\\\\n      type=\\\\\\\\\\\\\\\"text\\\\\\\\\\\\\\\"\\\\\\\\n      value={state.amount}\\\\\\\\n      onChange={(event) => State.update({ amount: event.target.value })}\\\\\\\\n    />\\\\\\\\n  </div>\\\\\\\\n);\\\\\\\\n\\\\\\\\nconst tokenDiv = (\\\\\\\\n  <div className=\\\\\\\\\\\\\\\"col-lg-6 mb-2\\\\\\\\\\\\\\\">\\\\\\\\n    Currency\\\\\\\\n    <select\\\\\\\\n      onChange={(event) => State.update({ token: event.target.value })}\\\\\\\\n      class=\\\\\\\\\\\\\\\"form-select\\\\\\\\\\\\\\\"\\\\\\\\n      aria-label=\\\\\\\\\\\\\\\"Select currency\\\\\\\\\\\\\\\"\\\\\\\\n      value={state.token}\\\\\\\\n    >\\\\\\\\n      <option value=\\\\\\\\\\\\\\\"USDT\\\\\\\\\\\\\\\">USDT</option>\\\\\\\\n      <option value=\\\\\\\\\\\\\\\"NEAR\\\\\\\\\\\\\\\">NEAR</option>\\\\\\\\n      <option value=\\\\\\\\\\\\\\\"USDC\\\\\\\\\\\\\\\">USDC</option>\\\\\\\\n    </select>\\\\\\\\n  </div>\\\\\\\\n);\\\\\\\\n\\\\\\\\nconst supervisorDiv = (\\\\\\\\n  <div className=\\\\\\\\\\\\\\\"col-lg-6 mb-2\\\\\\\\\\\\\\\">\\\\\\\\n    Supervisor:\\\\\\\\n    <input\\\\\\\\n      type=\\\\\\\\\\\\\\\"text\\\\\\\\\\\\\\\"\\\\\\\\n      value={state.supervisor}\\\\\\\\n      onChange={(event) => State.update({ supervisor: event.target.value })}\\\\\\\\n    />\\\\\\\\n  </div>\\\\\\\\n);\\\\\\\\n\\\\\\\\nconst callDescriptionDiv = () => {\\\\\\\\n  return (\\\\\\\\n    <div className=\\\\\\\\\\\\\\\"col-lg-12  mb-2\\\\\\\\\\\\\\\">\\\\\\\\n      Description:\\\\\\\\n      <br />\\\\\\\\n      <Widget\\\\\\\\n        src={\\\\\\\\\\\\\\\"devhub.near/widget/devhub.components.molecule.MarkdownEditor\\\\\\\\\\\\\\\"}\\\\\\\\n        props={{\\\\\\\\n          data: { handler: state.handler, content: state.description },\\\\\\\\n          onChange: (content) => {\\\\\\\\n            State.update({ description: content, handler: \\\\\\\\\\\\\\\"update\\\\\\\\\\\\\\\" });\\\\\\\\n            textareaInputHandler(content);\\\\\\\\n          },\\\\\\\\n        }}\\\\\\\\n      />\\\\\\\\n      {autocompleteEnabled && state.showAccountAutocomplete && (\\\\\\\\n        <AutoComplete>\\\\\\\\n          <Widget\\\\\\\\n            src=\\\\\\\\\\\\\\\"devhub.near/widget/devhub.components.molecule.AccountAutocomplete\\\\\\\\\\\\\\\"\\\\\\\\n            props={{\\\\\\\\n              term: state.text.split(\\\\\\\\\\\\\\\"@\\\\\\\\\\\\\\\").pop(),\\\\\\\\n              onSelect: autoCompleteAccountId,\\\\\\\\n              onClose: () => State.update({ showAccountAutocomplete: false }),\\\\\\\\n            }}\\\\\\\\n          />\\\\\\\\n        </AutoComplete>\\\\\\\\n      )}\\\\\\\\n    </div>\\\\\\\\n  );\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst disclaimer = (\\\\\\\\n  <p>\\\\\\\\n    <i>\\\\\\\\n      * Note, all projects that were granted sponsorships are required to pass\\\\\\\\n      KYC to receive the funding.\\\\\\\\n    </i>\\\\\\\\n  </p>\\\\\\\\n);\\\\\\\\n\\\\\\\\nconst isFundraisingDiv = (\\\\\\\\n  // This is jank with just btns and not radios. But the radios were glitchy af\\\\\\\\n  <>\\\\\\\\n    <div class=\\\\\\\\\\\\\\\"mb-2\\\\\\\\\\\\\\\">\\\\\\\\n      <p class=\\\\\\\\\\\\\\\"fs-6 fw-bold mb-1\\\\\\\\\\\\\\\">\\\\\\\\n        Are you seeking funding for your solution?\\\\\\\\n        <span class=\\\\\\\\\\\\\\\"text-muted fw-normal\\\\\\\\\\\\\\\">(Optional)</span>\\\\\\\\n      </p>\\\\\\\\n      <div class=\\\\\\\\\\\\\\\"form-check form-check-inline\\\\\\\\\\\\\\\">\\\\\\\\n        <label class=\\\\\\\\\\\\\\\"form-check-label\\\\\\\\\\\\\\\">\\\\\\\\n          <button\\\\\\\\n            className=\\\\\\\\\\\\\\\"btn btn-light p-0\\\\\\\\\\\\\\\"\\\\\\\\n            style={{\\\\\\\\n              backgroundColor: state.seekingFunding ? \\\\\\\\\\\\\\\"#0C7283\\\\\\\\\\\\\\\" : \\\\\\\\\\\\\\\"inherit\\\\\\\\\\\\\\\",\\\\\\\\n              color: \\\\\\\\\\\\\\\"#f3f3f3\\\\\\\\\\\\\\\",\\\\\\\\n              border: \\\\\\\\\\\\\\\"solid #D9D9D9\\\\\\\\\\\\\\\",\\\\\\\\n              borderRadius: \\\\\\\\\\\\\\\"100%\\\\\\\\\\\\\\\",\\\\\\\\n              height: \\\\\\\\\\\\\\\"20px\\\\\\\\\\\\\\\",\\\\\\\\n              width: \\\\\\\\\\\\\\\"20px\\\\\\\\\\\\\\\",\\\\\\\\n            }}\\\\\\\\n            onClick={() => State.update({ seekingFunding: true })}\\\\\\\\n          />\\\\\\\\n          Yes\\\\\\\\n        </label>\\\\\\\\n      </div>\\\\\\\\n      <div class=\\\\\\\\\\\\\\\"form-check form-check-inline\\\\\\\\\\\\\\\">\\\\\\\\n        <label class=\\\\\\\\\\\\\\\"form-check-label\\\\\\\\\\\\\\\">\\\\\\\\n          <button\\\\\\\\n            className=\\\\\\\\\\\\\\\"btn btn-light p-0\\\\\\\\\\\\\\\"\\\\\\\\n            style={{\\\\\\\\n              backgroundColor: !state.seekingFunding ? \\\\\\\\\\\\\\\"#0C7283\\\\\\\\\\\\\\\" : \\\\\\\\\\\\\\\"inherit\\\\\\\\\\\\\\\",\\\\\\\\n              color: \\\\\\\\\\\\\\\"#f3f3f3\\\\\\\\\\\\\\\",\\\\\\\\n              border: \\\\\\\\\\\\\\\"solid #D9D9D9\\\\\\\\\\\\\\\",\\\\\\\\n              borderRadius: \\\\\\\\\\\\\\\"100%\\\\\\\\\\\\\\\",\\\\\\\\n              height: \\\\\\\\\\\\\\\"20px\\\\\\\\\\\\\\\",\\\\\\\\n              width: \\\\\\\\\\\\\\\"20px\\\\\\\\\\\\\\\",\\\\\\\\n            }}\\\\\\\\n            onClick={() => State.update({ seekingFunding: false })}\\\\\\\\n          />\\\\\\\\n          No\\\\\\\\n        </label>\\\\\\\\n      </div>\\\\\\\\n    </div>\\\\\\\\n  </>\\\\\\\\n);\\\\\\\\n\\\\\\\\nconst fundraisingDiv = (\\\\\\\\n  <div class=\\\\\\\\\\\\\\\"d-flex flex-column mb-2\\\\\\\\\\\\\\\">\\\\\\\\n    <div className=\\\\\\\\\\\\\\\"col-lg-6 mb-2\\\\\\\\\\\\\\\">\\\\\\\\n      Currency\\\\\\\\n      <select\\\\\\\\n        onChange={(event) => State.update({ token: event.target.value })}\\\\\\\\n        class=\\\\\\\\\\\\\\\"form-select\\\\\\\\\\\\\\\"\\\\\\\\n        aria-label=\\\\\\\\\\\\\\\"Default select example\\\\\\\\\\\\\\\"\\\\\\\\n        value={state.token}\\\\\\\\n      >\\\\\\\\n        <option value=\\\\\\\\\\\\\\\"USDT\\\\\\\\\\\\\\\">USDT</option>\\\\\\\\n        <option value=\\\\\\\\\\\\\\\"NEAR\\\\\\\\\\\\\\\">NEAR</option>\\\\\\\\n        <option value=\\\\\\\\\\\\\\\"USDC\\\\\\\\\\\\\\\">USDC</option>\\\\\\\\n      </select>\\\\\\\\n    </div>\\\\\\\\n    <div className=\\\\\\\\\\\\\\\"col-lg-6 mb-2\\\\\\\\\\\\\\\">\\\\\\\\n      Requested amount\\\\\\\\n      <span class=\\\\\\\\\\\\\\\"text-muted fw-normal\\\\\\\\\\\\\\\">(Numbers Only)</span>\\\\\\\\n      <input\\\\\\\\n        type=\\\\\\\\\\\\\\\"number\\\\\\\\\\\\\\\"\\\\\\\\n        value={parseInt(state.amount) > 0 ? state.amount : \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\"}\\\\\\\\n        min={0}\\\\\\\\n        onChange={(event) => {\\\\\\\\n          State.update({\\\\\\\\n            amount: Number(\\\\\\\\n              event.target.value.toString().replace(/e/g, \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\")\\\\\\\\n            ).toString(),\\\\\\\\n          });\\\\\\\\n        }}\\\\\\\\n      />\\\\\\\\n    </div>\\\\\\\\n    <div className=\\\\\\\\\\\\\\\"col-lg-6 mb-2\\\\\\\\\\\\\\\">\\\\\\\\n      <p class=\\\\\\\\\\\\\\\"mb-1\\\\\\\\\\\\\\\">\\\\\\\\n        Requested sponsor\\\\\\\\n        <span class=\\\\\\\\\\\\\\\"text-muted fw-normal\\\\\\\\\\\\\\\">(Optional)</span>\\\\\\\\n      </p>\\\\\\\\n      <p style={{ fontSize: \\\\\\\\\\\\\\\"13px\\\\\\\\\\\\\\\" }} class=\\\\\\\\\\\\\\\"m-0 text-muted fw-light\\\\\\\\\\\\\\\">\\\\\\\\n        If you are requesting funding from a specific sponsor, please enter\\\\\\\\n        their username.\\\\\\\\n      </p>\\\\\\\\n      <div class=\\\\\\\\\\\\\\\"input-group flex-nowrap\\\\\\\\\\\\\\\">\\\\\\\\n        <span class=\\\\\\\\\\\\\\\"input-group-text\\\\\\\\\\\\\\\" id=\\\\\\\\\\\\\\\"addon-wrapping\\\\\\\\\\\\\\\">\\\\\\\\n          @\\\\\\\\n        </span>\\\\\\\\n        <input\\\\\\\\n          type=\\\\\\\\\\\\\\\"text\\\\\\\\\\\\\\\"\\\\\\\\n          class=\\\\\\\\\\\\\\\"form-control\\\\\\\\\\\\\\\"\\\\\\\\n          placeholder=\\\\\\\\\\\\\\\"Enter username\\\\\\\\\\\\\\\"\\\\\\\\n          value={state.supervisor}\\\\\\\\n          onChange={(event) => State.update({ supervisor: event.target.value })}\\\\\\\\n        />\\\\\\\\n      </div>\\\\\\\\n    </div>\\\\\\\\n  </div>\\\\\\\\n);\\\\\\\\n\\\\\\\\nfunction generateDescription(text, amount, token, supervisor, seekingFunding) {\\\\\\\\n  const fundingText =\\\\\\\\n    amount > 0 && token ? `###### Requested amount: ${amount} ${token}\\\\\\\\\\\\\\\\n` : \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\";\\\\\\\\n  const supervisorText = supervisor\\\\\\\\n    ? `###### Requested sponsor: @${supervisor}\\\\\\\\\\\\\\\\n`\\\\\\\\n    : \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\";\\\\\\\\n  return seekingFunding ? `${fundingText}${supervisorText}${text}` : text;\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst renamedPostType = postType == \\\\\\\\\\\\\\\"Submission\\\\\\\\\\\\\\\" ? \\\\\\\\\\\\\\\"Solution\\\\\\\\\\\\\\\" : postType;\\\\\\\\n// Below there is a weird code with fields.includes(\\\\\\\\\\\\\\\"githubLink\\\\\\\\\\\\\\\") ternary operator.\\\\\\\\n// This is to hack around rendering bug of near.social.\\\\\\\\nreturn (\\\\\\\\n  <div className=\\\\\\\\\\\\\\\"card\\\\\\\\\\\\\\\">\\\\\\\\n    <div className=\\\\\\\\\\\\\\\"card-header\\\\\\\\\\\\\\\">\\\\\\\\n      {mode} {renamedPostType}\\\\\\\\n    </div>\\\\\\\\n\\\\\\\\n    <div class=\\\\\\\\\\\\\\\"card-body\\\\\\\\\\\\\\\">\\\\\\\\n      {state.warning && (\\\\\\\\n        <div\\\\\\\\n          class=\\\\\\\\\\\\\\\"alert alert-warning alert-dismissible fade show\\\\\\\\\\\\\\\"\\\\\\\\n          role=\\\\\\\\\\\\\\\"alert\\\\\\\\\\\\\\\"\\\\\\\\n        >\\\\\\\\n          {state.warning}\\\\\\\\n          <button\\\\\\\\n            type=\\\\\\\\\\\\\\\"button\\\\\\\\\\\\\\\"\\\\\\\\n            class=\\\\\\\\\\\\\\\"btn-close\\\\\\\\\\\\\\\"\\\\\\\\n            data-bs-dismiss=\\\\\\\\\\\\\\\"alert\\\\\\\\\\\\\\\"\\\\\\\\n            aria-label=\\\\\\\\\\\\\\\"Close\\\\\\\\\\\\\\\"\\\\\\\\n            onClick={() => State.update({ warning: \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\" })}\\\\\\\\n          ></button>\\\\\\\\n        </div>\\\\\\\\n      )}\\\\\\\\n      {/* This statement around the githubLinkDiv creates a weird render bug\\\\\\\\n      where the title renders extra on state change. */}\\\\\\\\n      {fields.includes(\\\\\\\\\\\\\\\"githubLink\\\\\\\\\\\\\\\") ? (\\\\\\\\n        <div className=\\\\\\\\\\\\\\\"row\\\\\\\\\\\\\\\">\\\\\\\\n          {fields.includes(\\\\\\\\\\\\\\\"githubLink\\\\\\\\\\\\\\\") && githubLinkDiv}\\\\\\\\n          {labelEditor}\\\\\\\\n          {fields.includes(\\\\\\\\\\\\\\\"name\\\\\\\\\\\\\\\") && nameDiv}\\\\\\\\n          {fields.includes(\\\\\\\\\\\\\\\"description\\\\\\\\\\\\\\\") && callDescriptionDiv()}\\\\\\\\n        </div>\\\\\\\\n      ) : (\\\\\\\\n        <div className=\\\\\\\\\\\\\\\"row\\\\\\\\\\\\\\\">\\\\\\\\n          {labelEditor}\\\\\\\\n          {fields.includes(\\\\\\\\\\\\\\\"name\\\\\\\\\\\\\\\") && nameDiv}\\\\\\\\n          {fields.includes(\\\\\\\\\\\\\\\"amount\\\\\\\\\\\\\\\") && amountDiv}\\\\\\\\n          {fields.includes(\\\\\\\\\\\\\\\"sponsorship_token\\\\\\\\\\\\\\\") && tokenDiv}\\\\\\\\n          {fields.includes(\\\\\\\\\\\\\\\"supervisor\\\\\\\\\\\\\\\") && supervisorDiv}\\\\\\\\n          {fields.includes(\\\\\\\\\\\\\\\"description\\\\\\\\\\\\\\\") && callDescriptionDiv()}\\\\\\\\n          {fields.includes(\\\\\\\\\\\\\\\"fund_raising\\\\\\\\\\\\\\\") && isFundraisingDiv}\\\\\\\\n          {state.seekingFunding &&\\\\\\\\n            fields.includes(\\\\\\\\\\\\\\\"fund_raising\\\\\\\\\\\\\\\") &&\\\\\\\\n            fundraisingDiv}\\\\\\\\n        </div>\\\\\\\\n      )}\\\\\\\\n      <button\\\\\\\\n        style={{\\\\\\\\n          width: \\\\\\\\\\\\\\\"7rem\\\\\\\\\\\\\\\",\\\\\\\\n          backgroundColor: \\\\\\\\\\\\\\\"#0C7283\\\\\\\\\\\\\\\",\\\\\\\\n          color: \\\\\\\\\\\\\\\"#f3f3f3\\\\\\\\\\\\\\\",\\\\\\\\n        }}\\\\\\\\n        disabled={state.seekingFunding && (!state.amount || state.amount < 1)}\\\\\\\\n        className=\\\\\\\\\\\\\\\"btn btn-light mb-2 p-3\\\\\\\\\\\\\\\"\\\\\\\\n        onClick={onSubmit}\\\\\\\\n      >\\\\\\\\n        Submit\\\\\\\\n      </button>\\\\\\\\n      <button\\\\\\\\n        style={{\\\\\\\\n          width: \\\\\\\\\\\\\\\"7rem\\\\\\\\\\\\\\\",\\\\\\\\n          backgroundColor: \\\\\\\\\\\\\\\"#fff\\\\\\\\\\\\\\\",\\\\\\\\n          color: \\\\\\\\\\\\\\\"#000\\\\\\\\\\\\\\\",\\\\\\\\n        }}\\\\\\\\n        className=\\\\\\\\\\\\\\\"btn btn-light mb-2 p-3\\\\\\\\\\\\\\\"\\\\\\\\n        onClick={toggleEditor}\\\\\\\\n      >\\\\\\\\n        Cancel\\\\\\\\n      </button>\\\\\\\\n      {disclaimer}\\\\\\\\n    </div>\\\\\\\\n    <div class=\\\\\\\\\\\\\\\"card-footer\\\\\\\\\\\\\\\">\\\\\\\\n      Preview:\\\\\\\\n      <Widget\\\\\\\\n        src=\\\\\\\\\\\\\\\"devhub.near/widget/devhub.entity.post.Post\\\\\\\\\\\\\\\"\\\\\\\\n        props={{\\\\\\\\n          isPreview: true,\\\\\\\\n          id: 0, // irrelevant\\\\\\\\n          post: {\\\\\\\\n            author_id: state.author_id,\\\\\\\\n            likes: [],\\\\\\\\n            snapshot: {\\\\\\\\n              editor_id: state.editor_id,\\\\\\\\n              labels: state.labelStrings,\\\\\\\\n              post_type: postType,\\\\\\\\n              name: state.name,\\\\\\\\n              description:\\\\\\\\n                postType == \\\\\\\\\\\\\\\"Solution\\\\\\\\\\\\\\\"\\\\\\\\n                  ? generateDescription(\\\\\\\\n                      state.description,\\\\\\\\n                      state.amount,\\\\\\\\n                      state.token,\\\\\\\\n                      state.supervisor,\\\\\\\\n                      state.seekingFunding\\\\\\\\n                    )\\\\\\\\n                  : state.description,\\\\\\\\n              amount: state.amount,\\\\\\\\n              sponsorship_token: state.token,\\\\\\\\n              supervisor: state.supervisor,\\\\\\\\n              github_link: state.githubLink,\\\\\\\\n            },\\\\\\\\n          },\\\\\\\\n        }}\\\\\\\\n      />\\\\\\\\n    </div>\\\\\\\\n  </div>\\\\\\\\n);\\\\\\\\n\"}, \"devhub.components.molecule.AccountAutocomplete\": {\"\": \"if (!context.accountId || !props.term) return <></>;\\\\\\\\n\\\\\\\\nlet results = [];\\\\\\\\nconst profilesData = Social.get(\\\\\\\\\\\\\\\"*/profile/name\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"final\\\\\\\\\\\\\\\") || {};\\\\\\\\nconst followingData = Social.get(\\\\\\\\n  `${context.accountId}/graph/follow/**`,\\\\\\\\n  \\\\\\\\\\\\\\\"final\\\\\\\\\\\\\\\"\\\\\\\\n);\\\\\\\\nif (!profilesData) return <></>;\\\\\\\\nconst profiles = Object.entries(profilesData);\\\\\\\\nconst term = (props.term || \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\").replace(/\\\\\\\\\\\\\\\\W/g, \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\").toLowerCase();\\\\\\\\nconst limit = 5;\\\\\\\\n\\\\\\\\nfor (let i = 0; i < profiles.length; i++) {\\\\\\\\n  let score = 0;\\\\\\\\n  const accountId = profiles[i][0];\\\\\\\\n  const accountIdSearch = profiles[i][0].replace(/\\\\\\\\\\\\\\\\W/g, \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\").toLowerCase();\\\\\\\\n  const nameSearch = (profiles[i][1]?.profile?.name || \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\")\\\\\\\\n    .replace(/\\\\\\\\\\\\\\\\W/g, \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\")\\\\\\\\n    .toLowerCase();\\\\\\\\n  const accountIdSearchIndex = accountIdSearch.indexOf(term);\\\\\\\\n  const nameSearchIndex = nameSearch.indexOf(term);\\\\\\\\n\\\\\\\\n  if (accountIdSearchIndex > -1 || nameSearchIndex > -1) {\\\\\\\\n    score += 10;\\\\\\\\n\\\\\\\\n    if (accountIdSearchIndex === 0) {\\\\\\\\n      score += 10;\\\\\\\\n    }\\\\\\\\n    if (nameSearchIndex === 0) {\\\\\\\\n      score += 10;\\\\\\\\n    }\\\\\\\\n    if (followingData[accountId] === \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\") {\\\\\\\\n      score += 30;\\\\\\\\n    }\\\\\\\\n\\\\\\\\n    results.push({\\\\\\\\n      accountId,\\\\\\\\n      score,\\\\\\\\n    });\\\\\\\\n  }\\\\\\\\n}\\\\\\\\n\\\\\\\\nresults.sort((a, b) => b.score - a.score);\\\\\\\\nresults = results.slice(0, limit);\\\\\\\\n\\\\\\\\nfunction onResultClick(id) {\\\\\\\\n  props.onSelect && props.onSelect(id);\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst Wrapper = styled.div`\\\\\\\\n  position: relative;\\\\\\\\n  background: #eceef0;\\\\\\\\n\\\\\\\\n  &::before {\\\\\\\\n    content: \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\";\\\\\\\\n    display: block;\\\\\\\\n    position: absolute;\\\\\\\\n    right: 0;\\\\\\\\n    width: 6px;\\\\\\\\n    height: 100%;\\\\\\\\n    background: linear-gradient(\\\\\\\\n      to left,\\\\\\\\n      rgba(236, 238, 240, 1),\\\\\\\\n      rgba(236, 238, 240, 0)\\\\\\\\n    );\\\\\\\\n    z-index: 10;\\\\\\\\n  }\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst Scroller = styled.div`\\\\\\\\n  position: relative;\\\\\\\\n  display: flex;\\\\\\\\n  padding: 6px;\\\\\\\\n  gap: 6px;\\\\\\\\n  overflow: auto;\\\\\\\\n  scroll-behavior: smooth;\\\\\\\\n  align-items: center;\\\\\\\\n  scrollbar-width: none;\\\\\\\\n  -ms-overflow-style: none;\\\\\\\\n  &::-webkit-scrollbar {\\\\\\\\n    display: none;\\\\\\\\n  }\\\\\\\\n\\\\\\\\n  > * {\\\\\\\\n    max-width: 175px;\\\\\\\\n    flex-grow: 0;\\\\\\\\n    flex-shrink: 0;\\\\\\\\n\\\\\\\\n    button {\\\\\\\\n      border: 1px solid #eceef0;\\\\\\\\n      background: #fff !important;\\\\\\\\n      border-radius: 6px;\\\\\\\\n      padding: 3px 6px;\\\\\\\\n      transition: all 200ms;\\\\\\\\n\\\\\\\\n      &:focus,\\\\\\\\n      &:hover {\\\\\\\\n        border-color: #687076;\\\\\\\\n      }\\\\\\\\n    }\\\\\\\\n  }\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst CloseButton = styled.button`\\\\\\\\n    background: none;\\\\\\\\n    border: none;\\\\\\\\n    display: block;\\\\\\\\n    padding: 12px;\\\\\\\\n    color #687076;\\\\\\\\n    transition: all 200ms;\\\\\\\\n\\\\\\\\n    &:hover {\\\\\\\\n        color: #000;\\\\\\\\n    }\\\\\\\\n`;\\\\\\\\n\\\\\\\\nif (results.length === 0) return <></>;\\\\\\\\n\\\\\\\\nreturn (\\\\\\\\n  <Wrapper>\\\\\\\\n    <Scroller>\\\\\\\\n      <CloseButton tabIndex={-1} type=\\\\\\\\\\\\\\\"button\\\\\\\\\\\\\\\" onClick={props.onClose}>\\\\\\\\n        <i className=\\\\\\\\\\\\\\\"bi bi-x-circle\\\\\\\\\\\\\\\" />\\\\\\\\n      </CloseButton>\\\\\\\\n\\\\\\\\n      {results.map((result) => {\\\\\\\\n        return (\\\\\\\\n          <Widget\\\\\\\\n            key={result.accountId}\\\\\\\\n            src=\\\\\\\\\\\\\\\"near/widget/AccountProfile\\\\\\\\\\\\\\\"\\\\\\\\n            props={{\\\\\\\\n              avatarSize: \\\\\\\\\\\\\\\"34px\\\\\\\\\\\\\\\",\\\\\\\\n              accountId: result.accountId,\\\\\\\\n              onClick: onResultClick,\\\\\\\\n              overlayPlacement: \\\\\\\\\\\\\\\"bottom\\\\\\\\\\\\\\\",\\\\\\\\n            }}\\\\\\\\n          />\\\\\\\\n        );\\\\\\\\n      })}\\\\\\\\n    </Scroller>\\\\\\\\n  </Wrapper>\\\\\\\\n);\\\\\\\\n\"}}}}}"
      }
    ],
    "actions_agg": {
      "deposit": 0
    },
    "outcomes": {
      "status": true
    },
    "outcomes_agg": {
      "transaction_fee": 1.6648874031982e+21
    }
  },
  {
    "id": "1508416020",
    "receipt_id": "7UK2tf1wEdUwhiAoacRnBhY2eBjXL6VgdrKz7nZ9MoJF",
    "predecessor_account_id": "system",
    "receiver_account_id": "devhub.near",
    "receipt_kind": "ACTION",
    "receipt_block": {
      "block_hash": "4hEaaNH3pcpryyeKtSKgc54cn8bLYt5uZQzV1VXtDCJz",
      "block_height": 106639357,
      "block_timestamp": 1701073435244227000
    },
    "receipt_outcome": {
      "gas_burnt": 223182562500,
      "tokens_burnt": 0,
      "executor_account_id": "devhub.near",
      "status": true
    },
    "transaction_hash": "AGUrfUM8a7Fxm6Aas6PSGabiCsYHdBi6W33G9VtFkh8m",
    "included_in_block_hash": "2ATtgpKA1Wb8V3xsQf9G6Fwd6XLLVRmQTscnhBJZNEdw",
    "block_timestamp": "1701073433195271980",
    "block": {
      "block_height": 106639355
    },
    "receipt_conversion_tokens_burnt": "251893022160200000000",
    "actions": [
      {
        "action": "TRANSFER",
        "method": null,
        "deposit": 1.8767349040296597e+23,
        "fee": 0,
        "args": null
      }
    ],
    "actions_agg": {
      "deposit": 0
    },
    "outcomes": {
      "status": true
    },
    "outcomes_agg": {
      "transaction_fee": 1.6648874031982e+21
    }
  },
  {
    "id": "1508417206",
    "receipt_id": "3vSXBC4qzU12jRdtwLy1yLCEsDYuSgaXesF46dTp5Zey",
    "predecessor_account_id": "devhub.near",
    "receiver_account_id": "social.near",
    "receipt_kind": "ACTION",
    "receipt_block": {
      "block_hash": "HXMdKUUHvdCTJLc6YENH32wP33GW3MUwrMVE3WF2PWui",
      "block_height": 106639427,
      "block_timestamp": 1701073506047338800
    },
    "receipt_outcome": {
      "gas_burnt": 9420189194957,
      "tokens_burnt": 942018919495700000000,
      "executor_account_id": "social.near",
      "status": true
    },
    "transaction_hash": "GzsZ8FBtCCkRkpESQsYzPLkjJhU24kMstzatEp2APguF",
    "included_in_block_hash": "2ofAjaX3EPkQEDMhK74kRA96FPoRneXkQouTyTyMeNAT",
    "block_timestamp": "1701073505155663704",
    "block": {
      "block_height": 106639426
    },
    "receipt_conversion_tokens_burnt": "248518997754200000000",
    "actions": [
      {
        "action": "FUNCTION_CALL",
        "method": "set",
        "deposit": 0,
        "fee": 942018919495700000000,
        "args": "{\"data\": {\"devhub.near\": {\"widget\": {\"devhub.entity.post.Post\": {\"\": \"// Ideally, this would be a page\\\\\\\\n\\\\\\\\nconst { href } = VM.require(\\\\\\\\\\\\\\\"devhub.near/widget/core.lib.url\\\\\\\\\\\\\\\");\\\\\\\\n\\\\\\\\nconst { draftState, onDraftStateChange } = VM.require(\\\\\\\\n  \\\\\\\\\\\\\\\"devhub.near/widget/devhub.entity.post.draft\\\\\\\\\\\\\\\"\\\\\\\\n);\\\\\\\\n\\\\\\\\nif (!href) {\\\\\\\\n  return <p>Loading modules...</p>;\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst ButtonWithHover = styled.button`\\\\\\\\n  background-color: #fff;\\\\\\\\n  transition: all 300ms;\\\\\\\\n  border-radius: 0.5rem;\\\\\\\\n\\\\\\\\n  &:hover {\\\\\\\\n    background-color: #e9ecef;\\\\\\\\n    color: #000;\\\\\\\\n  }\\\\\\\\n\\\\\\\\n  &:disabled {\\\\\\\\n    background-color: #fff;\\\\\\\\n    color: #b7b7b7;\\\\\\\\n  }\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst postId = props.post.id ?? (props.id ? parseInt(props.id) : 0);\\\\\\\\n\\\\\\\\nconst post =\\\\\\\\n  props.post ??\\\\\\\\n  Near.view(\\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"get_post\\\\\\\\\\\\\\\", { post_id: postId });\\\\\\\\n\\\\\\\\nif (!post) {\\\\\\\\n  return <div>Loading ...</div>;\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst referral = props.referral;\\\\\\\\nconst currentTimestamp = props.timestamp ?? post.snapshot.timestamp;\\\\\\\\nconst compareTimestamp = props.compareTimestamp ?? \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\";\\\\\\\\nconst swapTimestamps = currentTimestamp < compareTimestamp;\\\\\\\\n\\\\\\\\nconst snapshotHistory = post.snapshot_history;\\\\\\\\n\\\\\\\\nconst snapshot =\\\\\\\\n  currentTimestamp === post.snapshot.timestamp\\\\\\\\n    ? post.snapshot\\\\\\\\n    : (snapshotHistory &&\\\\\\\\n        snapshotHistory.find((s) => s.timestamp === currentTimestamp)) ??\\\\\\\\n      null;\\\\\\\\n\\\\\\\\nconst compareSnapshot =\\\\\\\\n  compareTimestamp === post.snapshot.timestamp\\\\\\\\n    ? post.snapshot\\\\\\\\n    : (snapshotHistory &&\\\\\\\\n        snapshotHistory.find((s) => s.timestamp === compareTimestamp)) ??\\\\\\\\n      null;\\\\\\\\n\\\\\\\\n// If this post is displayed under another post. Used to limit the size.\\\\\\\\nconst isUnderPost = props.isUnderPost ? true : false;\\\\\\\\n\\\\\\\\nconst parentId = Near.view(\\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"get_parent_id\\\\\\\\\\\\\\\", {\\\\\\\\n  post_id: postId,\\\\\\\\n});\\\\\\\\n\\\\\\\\nconst childPostIdsUnordered =\\\\\\\\n  Near.view(\\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"get_children_ids\\\\\\\\\\\\\\\", {\\\\\\\\n    post_id: postId,\\\\\\\\n  }) ?? [];\\\\\\\\n\\\\\\\\nconst childPostIds = props.isPreview ? [] : childPostIdsUnordered.reverse();\\\\\\\\nconst expandable = props.isPreview ? false : props.expandable ?? false;\\\\\\\\nconst defaultExpanded = expandable ? props.defaultExpanded : true;\\\\\\\\n\\\\\\\\nfunction readableDate(timestamp) {\\\\\\\\n  var a = new Date(timestamp);\\\\\\\\n  return a.toDateString() + \\\\\\\\\\\\\\\" \\\\\\\\\\\\\\\" + a.toLocaleTimeString();\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst timestamp = readableDate(\\\\\\\\n  snapshot.timestamp ? snapshot.timestamp / 1000000 : Date.now()\\\\\\\\n);\\\\\\\\n\\\\\\\\nconst postSearchKeywords = props.searchKeywords ? (\\\\\\\\n  <div style={{ \\\\\\\\\\\\\\\"font-family\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"monospace\\\\\\\\\\\\\\\" }} key=\\\\\\\\\\\\\\\"post-search-keywords\\\\\\\\\\\\\\\">\\\\\\\\n    <span>Found keywords: </span>\\\\\\\\n\\\\\\\\n    {props.searchKeywords.map((tag) => (\\\\\\\\n      <Widget\\\\\\\\n        src={\\\\\\\\\\\\\\\"devhub.near/widget/devhub.components.atom.Tag\\\\\\\\\\\\\\\"}\\\\\\\\n        props={{ linkTo: \\\\\\\\\\\\\\\"Feed\\\\\\\\\\\\\\\", tag }}\\\\\\\\n      />\\\\\\\\n    ))}\\\\\\\\n  </div>\\\\\\\\n) : (\\\\\\\\n  <div key=\\\\\\\\\\\\\\\"post-search-keywords\\\\\\\\\\\\\\\"></div>\\\\\\\\n);\\\\\\\\n\\\\\\\\nconst searchKeywords = props.searchKeywords ? (\\\\\\\\n  <div class=\\\\\\\\\\\\\\\"mb-4\\\\\\\\\\\\\\\" key=\\\\\\\\\\\\\\\"search-keywords\\\\\\\\\\\\\\\">\\\\\\\\n    <small class=\\\\\\\\\\\\\\\"text-muted\\\\\\\\\\\\\\\">{postSearchKeywords}</small>\\\\\\\\n  </div>\\\\\\\\n) : (\\\\\\\\n  <div key=\\\\\\\\\\\\\\\"search-keywords\\\\\\\\\\\\\\\"></div>\\\\\\\\n);\\\\\\\\n\\\\\\\\nconst allowedToEdit =\\\\\\\\n  !props.isPreview &&\\\\\\\\n  Near.view(\\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"is_allowed_to_edit\\\\\\\\\\\\\\\", {\\\\\\\\n    post_id: postId,\\\\\\\\n    editor: context.accountId,\\\\\\\\n  });\\\\\\\\n\\\\\\\\nconst btnEditorWidget = (postType, name) => {\\\\\\\\n  return (\\\\\\\\n    <li>\\\\\\\\n      <a\\\\\\\\n        class=\\\\\\\\\\\\\\\"dropdown-item\\\\\\\\\\\\\\\"\\\\\\\\n        role=\\\\\\\\\\\\\\\"button\\\\\\\\\\\\\\\"\\\\\\\\n        onClick={() =>\\\\\\\\n          State.update({ postType, editorType: \\\\\\\\\\\\\\\"EDIT\\\\\\\\\\\\\\\", showEditor: true })\\\\\\\\n        }\\\\\\\\n      >\\\\\\\\n        {name}\\\\\\\\n      </a>\\\\\\\\n    </li>\\\\\\\\n  );\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst editControl = allowedToEdit ? (\\\\\\\\n  <div class=\\\\\\\\\\\\\\\"btn-group\\\\\\\\\\\\\\\" role=\\\\\\\\\\\\\\\"group\\\\\\\\\\\\\\\">\\\\\\\\n    <a\\\\\\\\n      class=\\\\\\\\\\\\\\\"card-link px-2\\\\\\\\\\\\\\\"\\\\\\\\n      role=\\\\\\\\\\\\\\\"button\\\\\\\\\\\\\\\"\\\\\\\\n      title=\\\\\\\\\\\\\\\"Edit post\\\\\\\\\\\\\\\"\\\\\\\\n      data-bs-toggle=\\\\\\\\\\\\\\\"dropdown\\\\\\\\\\\\\\\"\\\\\\\\n      aria-expanded=\\\\\\\\\\\\\\\"false\\\\\\\\\\\\\\\"\\\\\\\\n      type=\\\\\\\\\\\\\\\"button\\\\\\\\\\\\\\\"\\\\\\\\n    >\\\\\\\\n      <div class=\\\\\\\\\\\\\\\"bi bi-pencil-square\\\\\\\\\\\\\\\"></div>\\\\\\\\n    </a>\\\\\\\\n\\\\\\\\n    <ul class=\\\\\\\\\\\\\\\"dropdown-menu\\\\\\\\\\\\\\\">\\\\\\\\n      {btnEditorWidget(\\\\\\\\\\\\\\\"Idea\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"Edit as an idea\\\\\\\\\\\\\\\")}\\\\\\\\n      {btnEditorWidget(\\\\\\\\\\\\\\\"Solution\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"Edit as a solution\\\\\\\\\\\\\\\")}\\\\\\\\n      {btnEditorWidget(\\\\\\\\\\\\\\\"Attestation\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"Edit as an attestation\\\\\\\\\\\\\\\")}\\\\\\\\n      {btnEditorWidget(\\\\\\\\\\\\\\\"Sponsorship\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"Edit as a sponsorship\\\\\\\\\\\\\\\")}\\\\\\\\n      {btnEditorWidget(\\\\\\\\\\\\\\\"Comment\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"Edit as a comment\\\\\\\\\\\\\\\")}\\\\\\\\n    </ul>\\\\\\\\n  </div>\\\\\\\\n) : (\\\\\\\\n  <div></div>\\\\\\\\n);\\\\\\\\n\\\\\\\\nconst shareButton = props.isPreview ? (\\\\\\\\n  <div></div>\\\\\\\\n) : (\\\\\\\\n  <Link\\\\\\\\n    class=\\\\\\\\\\\\\\\"card-link text-dark\\\\\\\\\\\\\\\"\\\\\\\\n    to={href({\\\\\\\\n      widgetSrc: \\\\\\\\\\\\\\\"devhub.near/widget/app\\\\\\\\\\\\\\\",\\\\\\\\n      params: { page: \\\\\\\\\\\\\\\"post\\\\\\\\\\\\\\\", id: postId },\\\\\\\\n    })}\\\\\\\\n    role=\\\\\\\\\\\\\\\"button\\\\\\\\\\\\\\\"\\\\\\\\n    target=\\\\\\\\\\\\\\\"_blank\\\\\\\\\\\\\\\"\\\\\\\\n    title=\\\\\\\\\\\\\\\"Open in new tab\\\\\\\\\\\\\\\"\\\\\\\\n  >\\\\\\\\n    <div class=\\\\\\\\\\\\\\\"bi bi-share\\\\\\\\\\\\\\\"></div>\\\\\\\\n  </Link>\\\\\\\\n);\\\\\\\\n\\\\\\\\nconst ProfileCardContainer = styled.div`\\\\\\\\n  @media screen and (max-width: 960px) {\\\\\\\\n    width: 100%;\\\\\\\\n  }\\\\\\\\n`;\\\\\\\\n\\\\\\\\n// card-header\\\\\\\\nconst header = (\\\\\\\\n  <div key=\\\\\\\\\\\\\\\"header\\\\\\\\\\\\\\\">\\\\\\\\n    <small class=\\\\\\\\\\\\\\\"text-muted\\\\\\\\\\\\\\\">\\\\\\\\n      <div class=\\\\\\\\\\\\\\\"row justify-content-between\\\\\\\\\\\\\\\">\\\\\\\\n        <div class=\\\\\\\\\\\\\\\"d-flex align-items-center flex-wrap\\\\\\\\\\\\\\\">\\\\\\\\n          <ProfileCardContainer>\\\\\\\\n            <Widget\\\\\\\\n              src={\\\\\\\\n                \\\\\\\\\\\\\\\"devhub.near/widget/devhub.components.molecule.ProfileCard\\\\\\\\\\\\\\\"\\\\\\\\n              }\\\\\\\\n              props={{\\\\\\\\n                accountId: post.author_id,\\\\\\\\n                nearDevGovGigsWidgetsAccountId: \\\\\\\\\\\\\\\"devhub.near\\\\\\\\\\\\\\\",\\\\\\\\n              }}\\\\\\\\n            />\\\\\\\\n          </ProfileCardContainer>\\\\\\\\n\\\\\\\\n          <div class=\\\\\\\\\\\\\\\"d-flex ms-auto\\\\\\\\\\\\\\\">\\\\\\\\n            {editControl}\\\\\\\\n            {timestamp}\\\\\\\\n\\\\\\\\n            <Widget\\\\\\\\n              src={\\\\\\\\\\\\\\\"devhub.near/widget/devhub.entity.post.History\\\\\\\\\\\\\\\"}\\\\\\\\n              props={{\\\\\\\\n                post,\\\\\\\\n                timestamp: currentTimestamp,\\\\\\\\n              }}\\\\\\\\n            />\\\\\\\\n            {shareButton}\\\\\\\\n          </div>\\\\\\\\n        </div>\\\\\\\\n      </div>\\\\\\\\n    </small>\\\\\\\\n  </div>\\\\\\\\n);\\\\\\\\n\\\\\\\\n// const emptyIcons = {\\\\\\\\n//   Idea: \\\\\\\\\\\\\\\"bi-lightbulb\\\\\\\\\\\\\\\",\\\\\\\\n//   Comment: \\\\\\\\\\\\\\\"bi-chat\\\\\\\\\\\\\\\",\\\\\\\\n//   Solution: \\\\\\\\\\\\\\\"bi-rocket\\\\\\\\\\\\\\\",\\\\\\\\n//   Attestation: \\\\\\\\\\\\\\\"bi-check-circle\\\\\\\\\\\\\\\",\\\\\\\\n//   Sponsorship: \\\\\\\\\\\\\\\"bi-cash-coin\\\\\\\\\\\\\\\",\\\\\\\\n//   Github: \\\\\\\\\\\\\\\"bi-github\\\\\\\\\\\\\\\",\\\\\\\\n//   Like: \\\\\\\\\\\\\\\"bi-heart\\\\\\\\\\\\\\\",\\\\\\\\n//   Reply: \\\\\\\\\\\\\\\"bi-reply\\\\\\\\\\\\\\\",\\\\\\\\n// };\\\\\\\\n\\\\\\\\nconst emptyIcons = {\\\\\\\\n  Idea: \\\\\\\\\\\\\\\"\\\\\\\\u{1f4a1}\\\\\\\\\\\\\\\",\\\\\\\\n  Comment: \\\\\\\\\\\\\\\"bi-chat\\\\\\\\\\\\\\\",\\\\\\\\n  Solution: \\\\\\\\\\\\\\\"\\\\\\\\u{1f680}\\\\\\\\\\\\\\\",\\\\\\\\n  Attestation: \\\\\\\\\\\\\\\"\\\\\\\\u{2705}\\\\\\\\\\\\\\\",\\\\\\\\n  Sponsorship: \\\\\\\\\\\\\\\"\\\\\\\\u{1fa99}\\\\\\\\\\\\\\\",\\\\\\\\n  Github: \\\\\\\\\\\\\\\"bi-github\\\\\\\\\\\\\\\",\\\\\\\\n  Like: \\\\\\\\\\\\\\\"bi-heart\\\\\\\\\\\\\\\",\\\\\\\\n  Reply: \\\\\\\\\\\\\\\"bi-reply\\\\\\\\\\\\\\\",\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst fillIcons = {\\\\\\\\n  Idea: \\\\\\\\\\\\\\\"\\\\\\\\u{1f4a1}\\\\\\\\\\\\\\\",\\\\\\\\n  Comment: \\\\\\\\\\\\\\\"bi-chat-fill\\\\\\\\\\\\\\\",\\\\\\\\n  Solution: \\\\\\\\\\\\\\\"\\\\\\\\u{1f680}\\\\\\\\\\\\\\\",\\\\\\\\n  Attestation: \\\\\\\\\\\\\\\"\\\\\\\\u{2705}\\\\\\\\\\\\\\\",\\\\\\\\n  Sponsorship: \\\\\\\\\\\\\\\"\\\\\\\\u{1fa99}\\\\\\\\\\\\\\\",\\\\\\\\n  Github: \\\\\\\\\\\\\\\"bi-github\\\\\\\\\\\\\\\",\\\\\\\\n  Like: \\\\\\\\\\\\\\\"bi-heart-fill\\\\\\\\\\\\\\\",\\\\\\\\n  Reply: \\\\\\\\\\\\\\\"bi-reply-fill\\\\\\\\\\\\\\\",\\\\\\\\n};\\\\\\\\n\\\\\\\\n// Trigger saving this widget.\\\\\\\\n\\\\\\\\nconst borders = {\\\\\\\\n  Idea: \\\\\\\\\\\\\\\"border-light\\\\\\\\\\\\\\\",\\\\\\\\n  Comment: \\\\\\\\\\\\\\\"border-light\\\\\\\\\\\\\\\",\\\\\\\\n  Solution: \\\\\\\\\\\\\\\"border-light\\\\\\\\\\\\\\\",\\\\\\\\n  Attestation: \\\\\\\\\\\\\\\"border-light\\\\\\\\\\\\\\\",\\\\\\\\n  Sponsorship: \\\\\\\\\\\\\\\"border-light\\\\\\\\\\\\\\\",\\\\\\\\n  Github: \\\\\\\\\\\\\\\"border-light\\\\\\\\\\\\\\\",\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst containsLike = props.isPreview\\\\\\\\n  ? false\\\\\\\\n  : post.likes.find((l) => l.author_id == context.accountId);\\\\\\\\nconst likeBtnClass = containsLike ? fillIcons.Like : emptyIcons.Like;\\\\\\\\n// This must be outside onLike, because Near.view returns null at first, and when the view call finished, it returns true/false.\\\\\\\\n// If checking this inside onLike, it will give `null` and we cannot tell the result is true or false.\\\\\\\\nlet grantNotify = Near.view(\\\\\\\\\\\\\\\"social.near\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"is_write_permission_granted\\\\\\\\\\\\\\\", {\\\\\\\\n  predecessor_id: \\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\",\\\\\\\\n  key: context.accountId + \\\\\\\\\\\\\\\"/index/notify\\\\\\\\\\\\\\\",\\\\\\\\n});\\\\\\\\n\\\\\\\\nif (grantNotify === null) {\\\\\\\\n  return;\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst onLike = () => {\\\\\\\\n  if (!context.accountId) {\\\\\\\\n    return;\\\\\\\\n  }\\\\\\\\n\\\\\\\\n  let likeTxn = [\\\\\\\\n    {\\\\\\\\n      contractName: \\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\",\\\\\\\\n      methodName: \\\\\\\\\\\\\\\"add_like\\\\\\\\\\\\\\\",\\\\\\\\n      args: {\\\\\\\\n        post_id: postId,\\\\\\\\n      },\\\\\\\\n      deposit: Big(10).pow(21).mul(2),\\\\\\\\n      gas: Big(10).pow(12).mul(100),\\\\\\\\n    },\\\\\\\\n  ];\\\\\\\\n\\\\\\\\n  if (grantNotify === false) {\\\\\\\\n    likeTxn.unshift({\\\\\\\\n      contractName: \\\\\\\\\\\\\\\"social.near\\\\\\\\\\\\\\\",\\\\\\\\n      methodName: \\\\\\\\\\\\\\\"grant_write_permission\\\\\\\\\\\\\\\",\\\\\\\\n      args: {\\\\\\\\n        predecessor_id: \\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\",\\\\\\\\n        keys: [context.accountId + \\\\\\\\\\\\\\\"/index/notify\\\\\\\\\\\\\\\"],\\\\\\\\n      },\\\\\\\\n      deposit: Big(10).pow(23),\\\\\\\\n      gas: Big(10).pow(12).mul(30),\\\\\\\\n    });\\\\\\\\n  }\\\\\\\\n\\\\\\\\n  Near.call(likeTxn);\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst btnCreatorWidget = (postType, icon, name, desc) => {\\\\\\\\n  return (\\\\\\\\n    <li class=\\\\\\\\\\\\\\\"py-1\\\\\\\\\\\\\\\">\\\\\\\\n      <a\\\\\\\\n        class=\\\\\\\\\\\\\\\"dropdown-item text-decoration-none d-flex align-items-center lh-sm\\\\\\\\\\\\\\\"\\\\\\\\n        style={{ color: \\\\\\\\\\\\\\\"rgb(55,109,137)\\\\\\\\\\\\\\\" }}\\\\\\\\n        role=\\\\\\\\\\\\\\\"button\\\\\\\\\\\\\\\"\\\\\\\\n        onClick={() =>\\\\\\\\n          State.update({ postType, editorType: \\\\\\\\\\\\\\\"CREATE\\\\\\\\\\\\\\\", showEditor: true })\\\\\\\\n        }\\\\\\\\n      >\\\\\\\\n        <i class={`bi ${icon}`} style={{ fontSize: \\\\\\\\\\\\\\\"1.5rem\\\\\\\\\\\\\\\" }}>\\\\\\\\n          {\\\\\\\\\\\\\\\" \\\\\\\\\\\\\\\"}\\\\\\\\n        </i>\\\\\\\\n\\\\\\\\n        <div class=\\\\\\\\\\\\\\\"ps-2 text-wrap\\\\\\\\\\\\\\\" style={{ width: \\\\\\\\\\\\\\\"18rem\\\\\\\\\\\\\\\" }}>\\\\\\\\n          <div>{name}</div>\\\\\\\\n          <small class=\\\\\\\\\\\\\\\"fw-light text-secondary\\\\\\\\\\\\\\\">{desc}</small>\\\\\\\\n        </div>\\\\\\\\n      </a>\\\\\\\\n    </li>\\\\\\\\n  );\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst FooterButtonsContianer = styled.div`\\\\\\\\n  width: 66.66666667%;\\\\\\\\n\\\\\\\\n  @media screen and (max-width: 960px) {\\\\\\\\n    width: 100%;\\\\\\\\n  }\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst buttonsFooter = props.isPreview ? null : (\\\\\\\\n  <div class=\\\\\\\\\\\\\\\"row\\\\\\\\\\\\\\\" key=\\\\\\\\\\\\\\\"buttons-footer\\\\\\\\\\\\\\\">\\\\\\\\n    <FooterButtonsContianer>\\\\\\\\n      <div class=\\\\\\\\\\\\\\\"btn-group\\\\\\\\\\\\\\\" role=\\\\\\\\\\\\\\\"group\\\\\\\\\\\\\\\" aria-label=\\\\\\\\\\\\\\\"Basic outlined example\\\\\\\\\\\\\\\">\\\\\\\\n        <ButtonWithHover\\\\\\\\n          type=\\\\\\\\\\\\\\\"button\\\\\\\\\\\\\\\"\\\\\\\\n          class=\\\\\\\\\\\\\\\"btn d-flex align-items-center\\\\\\\\\\\\\\\"\\\\\\\\n          style={{ border: \\\\\\\\\\\\\\\"0px\\\\\\\\\\\\\\\" }}\\\\\\\\n          onClick={onLike}\\\\\\\\n        >\\\\\\\\n          <i class={`bi ${likeBtnClass}`}> </i>\\\\\\\\n          {post.likes.length == 0 ? (\\\\\\\\n            \\\\\\\\\\\\\\\"Like\\\\\\\\\\\\\\\"\\\\\\\\n          ) : (\\\\\\\\n            <Widget\\\\\\\\n              // TODO: LEGACY.\\\\\\\\n              src=\\\\\\\\\\\\\\\"devgovgigs.near/widget/gigs-board.components.layout.LikeButton.Faces\\\\\\\\\\\\\\\"\\\\\\\\n              props={{\\\\\\\\n                likesByUsers: Object.fromEntries(\\\\\\\\n                  post.likes.map(({ author_id }) => [author_id, \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\"])\\\\\\\\n                ),\\\\\\\\n              }}\\\\\\\\n            />\\\\\\\\n          )}\\\\\\\\n        </ButtonWithHover>\\\\\\\\n\\\\\\\\n        <div class=\\\\\\\\\\\\\\\"btn-group\\\\\\\\\\\\\\\" role=\\\\\\\\\\\\\\\"group\\\\\\\\\\\\\\\">\\\\\\\\n          <ButtonWithHover\\\\\\\\n            type=\\\\\\\\\\\\\\\"button\\\\\\\\\\\\\\\"\\\\\\\\n            class=\\\\\\\\\\\\\\\"btn\\\\\\\\\\\\\\\"\\\\\\\\n            style={{ border: \\\\\\\\\\\\\\\"0px\\\\\\\\\\\\\\\" }}\\\\\\\\n            data-bs-toggle=\\\\\\\\\\\\\\\"dropdown\\\\\\\\\\\\\\\"\\\\\\\\n            aria-expanded=\\\\\\\\\\\\\\\"false\\\\\\\\\\\\\\\"\\\\\\\\n          >\\\\\\\\n            \\\\\\\\u{21aa} Reply\\\\\\\\n          </ButtonWithHover>\\\\\\\\n          <ul class=\\\\\\\\\\\\\\\"dropdown-menu\\\\\\\\\\\\\\\">\\\\\\\\n            {btnCreatorWidget(\\\\\\\\n              \\\\\\\\\\\\\\\"Idea\\\\\\\\\\\\\\\",\\\\\\\\n              emptyIcons.Idea,\\\\\\\\n              \\\\\\\\\\\\\\\"Idea\\\\\\\\\\\\\\\",\\\\\\\\n              \\\\\\\\\\\\\\\"Get feedback from the community about a problem, opportunity, or need.\\\\\\\\\\\\\\\"\\\\\\\\n            )}\\\\\\\\n            {btnCreatorWidget(\\\\\\\\n              \\\\\\\\\\\\\\\"Solution\\\\\\\\\\\\\\\",\\\\\\\\n              emptyIcons.Solution,\\\\\\\\n              \\\\\\\\\\\\\\\"Solution\\\\\\\\\\\\\\\",\\\\\\\\n              \\\\\\\\\\\\\\\"Provide a specific proposal or implementation to an idea, optionally requesting funding.\\\\\\\\\\\\\\\"\\\\\\\\n            )}\\\\\\\\n            {btnCreatorWidget(\\\\\\\\n              \\\\\\\\\\\\\\\"Attestation\\\\\\\\\\\\\\\",\\\\\\\\n              emptyIcons.Attestation,\\\\\\\\n              \\\\\\\\\\\\\\\"Attestation\\\\\\\\\\\\\\\",\\\\\\\\n              \\\\\\\\\\\\\\\"Formally review or validate a solution as a recognized expert.\\\\\\\\\\\\\\\"\\\\\\\\n            )}\\\\\\\\n            {btnCreatorWidget(\\\\\\\\n              \\\\\\\\\\\\\\\"Sponsorship\\\\\\\\\\\\\\\",\\\\\\\\n              emptyIcons.Sponsorship,\\\\\\\\n              \\\\\\\\\\\\\\\"Sponsorship\\\\\\\\\\\\\\\",\\\\\\\\n              \\\\\\\\\\\\\\\"Offer to fund projects, events, or proposals that match your needs.\\\\\\\\\\\\\\\"\\\\\\\\n            )}\\\\\\\\n            <li>\\\\\\\\n              <hr class=\\\\\\\\\\\\\\\"dropdown-divider\\\\\\\\\\\\\\\" />\\\\\\\\n            </li>\\\\\\\\n            {btnCreatorWidget(\\\\\\\\n              \\\\\\\\\\\\\\\"Comment\\\\\\\\\\\\\\\",\\\\\\\\n              emptyIcons.Comment,\\\\\\\\n              \\\\\\\\\\\\\\\"Comment\\\\\\\\\\\\\\\",\\\\\\\\n              \\\\\\\\\\\\\\\"Ask a question, provide information, or share a resource that is relevant to the thread.\\\\\\\\\\\\\\\"\\\\\\\\n            )}\\\\\\\\n          </ul>\\\\\\\\n        </div>\\\\\\\\n        {childPostIds.length > 0 && (\\\\\\\\n          <ButtonWithHover\\\\\\\\n            type=\\\\\\\\\\\\\\\"button\\\\\\\\\\\\\\\"\\\\\\\\n            class=\\\\\\\\\\\\\\\"btn\\\\\\\\\\\\\\\"\\\\\\\\n            style={{ border: \\\\\\\\\\\\\\\"0px\\\\\\\\\\\\\\\" }}\\\\\\\\n            data-bs-toggle=\\\\\\\\\\\\\\\"collapse\\\\\\\\\\\\\\\"\\\\\\\\n            href={`#collapseChildPosts${postId}`}\\\\\\\\n            aria-expanded={defaultExpanded}\\\\\\\\n            aria-controls={`collapseChildPosts${postId}`}\\\\\\\\n            onClick={() =>\\\\\\\\n              State.update({ expandReplies: !state.expandReplies })\\\\\\\\n            }\\\\\\\\n          >\\\\\\\\n            <i\\\\\\\\n              class={`bi bi-chevron-${state.expandReplies ? \\\\\\\\\\\\\\\"up\\\\\\\\\\\\\\\" : \\\\\\\\\\\\\\\"down\\\\\\\\\\\\\\\"}`}\\\\\\\\n            ></i>{\\\\\\\\\\\\\\\" \\\\\\\\\\\\\\\"}\\\\\\\\n            {`${state.expandReplies ? \\\\\\\\\\\\\\\"Collapse\\\\\\\\\\\\\\\" : \\\\\\\\\\\\\\\"Expand\\\\\\\\\\\\\\\"} Replies (${\\\\\\\\n              childPostIds.length\\\\\\\\n            })`}\\\\\\\\n          </ButtonWithHover>\\\\\\\\n        )}\\\\\\\\n\\\\\\\\n        {isUnderPost || !parentId ? (\\\\\\\\n          <div key=\\\\\\\\\\\\\\\"link-to-parent\\\\\\\\\\\\\\\"></div>\\\\\\\\n        ) : (\\\\\\\\n          <Link\\\\\\\\n            to={href({\\\\\\\\n              widgetSrc: \\\\\\\\\\\\\\\"devhub.near/widget/app\\\\\\\\\\\\\\\",\\\\\\\\n              params: { page: \\\\\\\\\\\\\\\"post\\\\\\\\\\\\\\\", id: parentId },\\\\\\\\n            })}\\\\\\\\n          >\\\\\\\\n            <ButtonWithHover\\\\\\\\n              type=\\\\\\\\\\\\\\\"button\\\\\\\\\\\\\\\"\\\\\\\\n              style={{ border: \\\\\\\\\\\\\\\"0px\\\\\\\\\\\\\\\" }}\\\\\\\\n              className=\\\\\\\\\\\\\\\"btn\\\\\\\\\\\\\\\"\\\\\\\\n              key=\\\\\\\\\\\\\\\"link-to-parent\\\\\\\\\\\\\\\"\\\\\\\\n            >\\\\\\\\n              <i class=\\\\\\\\\\\\\\\"bi bi-arrow-90deg-up\\\\\\\\\\\\\\\"></i>Go to parent\\\\\\\\n            </ButtonWithHover>\\\\\\\\n          </Link>\\\\\\\\n        )}\\\\\\\\n      </div>\\\\\\\\n    </FooterButtonsContianer>\\\\\\\\n  </div>\\\\\\\\n);\\\\\\\\n\\\\\\\\nconst CreatorWidget = (postType) => {\\\\\\\\n  return (\\\\\\\\n    <div\\\\\\\\n      class={`collapse ${\\\\\\\\n        draftState?.parent_post_id == postId && draftState?.postType == postType\\\\\\\\n          ? \\\\\\\\\\\\\\\"show\\\\\\\\\\\\\\\"\\\\\\\\n          : \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\"\\\\\\\\n      }`}\\\\\\\\n      id={`collapse${postType}Creator${postId}`}\\\\\\\\n      data-bs-parent={`#accordion${postId}`}\\\\\\\\n    >\\\\\\\\n      <Widget\\\\\\\\n        src={\\\\\\\\\\\\\\\"devhub.near/widget/devhub.entity.post.PostEditor\\\\\\\\\\\\\\\"}\\\\\\\\n        props={{\\\\\\\\n          postType,\\\\\\\\n          onDraftStateChange,\\\\\\\\n          draftState:\\\\\\\\n            draftState?.parent_post_id == postId ? draftState : undefined,\\\\\\\\n          parentId: postId,\\\\\\\\n          mode: \\\\\\\\\\\\\\\"Create\\\\\\\\\\\\\\\",\\\\\\\\n        }}\\\\\\\\n      />\\\\\\\\n    </div>\\\\\\\\n  );\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst tokenMapping = {\\\\\\\\n  NEAR: \\\\\\\\\\\\\\\"NEAR\\\\\\\\\\\\\\\",\\\\\\\\n  USDT: {\\\\\\\\n    NEP141: {\\\\\\\\n      address: \\\\\\\\\\\\\\\"usdt.tether-token.near\\\\\\\\\\\\\\\",\\\\\\\\n    },\\\\\\\\n  },\\\\\\\\n  USDC: {\\\\\\\\n    NEP141: {\\\\\\\\n      address:\\\\\\\\n        \\\\\\\\\\\\\\\"17208628f84f5d6ad33f0da3bbbeb27ffcb398eac501a31bd6ad2011e36133a1\\\\\\\\\\\\\\\",\\\\\\\\n    },\\\\\\\\n  },\\\\\\\\n  // Add more tokens here as needed\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst reverseTokenMapping = Object.keys(tokenMapping).reduce(\\\\\\\\n  (reverseMap, key) => {\\\\\\\\n    const value = tokenMapping[key];\\\\\\\\n    if (typeof value === \\\\\\\\\\\\\\\"object\\\\\\\\\\\\\\\") {\\\\\\\\n      reverseMap[JSON.stringify(value)] = key;\\\\\\\\n    }\\\\\\\\n    return reverseMap;\\\\\\\\n  },\\\\\\\\n  {}\\\\\\\\n);\\\\\\\\n\\\\\\\\nfunction tokenResolver(token) {\\\\\\\\n  if (typeof token === \\\\\\\\\\\\\\\"string\\\\\\\\\\\\\\\") {\\\\\\\\n    return token;\\\\\\\\n  } else if (typeof token === \\\\\\\\\\\\\\\"object\\\\\\\\\\\\\\\") {\\\\\\\\n    const tokenString = reverseTokenMapping[JSON.stringify(token)];\\\\\\\\n    return tokenString || null;\\\\\\\\n  } else {\\\\\\\\n    return null; // Invalid input\\\\\\\\n  }\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst EditorWidget = (postType) => {\\\\\\\\n  return (\\\\\\\\n    <div\\\\\\\\n      class={`collapse ${\\\\\\\\n        draftState?.edit_post_id == postId && draftState?.postType == postType\\\\\\\\n          ? \\\\\\\\\\\\\\\"show\\\\\\\\\\\\\\\"\\\\\\\\n          : \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\"\\\\\\\\n      }`}\\\\\\\\n      id={`collapse${postType}Editor${postId}`}\\\\\\\\n      data-bs-parent={`#accordion${postId}`}\\\\\\\\n    >\\\\\\\\n      <Widget\\\\\\\\n        src={\\\\\\\\\\\\\\\"devhub.near/widget/devhub.entity.post.PostEditor\\\\\\\\\\\\\\\"}\\\\\\\\n        props={{\\\\\\\\n          postType,\\\\\\\\n          postId,\\\\\\\\n          mode: \\\\\\\\\\\\\\\"Edit\\\\\\\\\\\\\\\",\\\\\\\\n          author_id: post.author_id,\\\\\\\\n          labels: post.snapshot.labels,\\\\\\\\n          name: post.snapshot.name,\\\\\\\\n          description: post.snapshot.description,\\\\\\\\n          amount: post.snapshot.amount,\\\\\\\\n          token: tokenResolver(post.snapshot.sponsorship_token),\\\\\\\\n          supervisor: post.snapshot.supervisor,\\\\\\\\n          githubLink: post.snapshot.github_link,\\\\\\\\n          onDraftStateChange,\\\\\\\\n          draftState:\\\\\\\\n            draftState?.edit_post_id == postId ? draftState : undefined,\\\\\\\\n        }}\\\\\\\\n      />\\\\\\\\n    </div>\\\\\\\\n  );\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst isDraft =\\\\\\\\n  (draftState?.parent_post_id === postId &&\\\\\\\\n    draftState?.postType === state.postType) ||\\\\\\\\n  (draftState?.edit_post_id === postId &&\\\\\\\\n    draftState?.postType === state.postType);\\\\\\\\n\\\\\\\\nconst toggleEditor = () => {\\\\\\\\n  State.update({ showEditor: !state.showEditor });\\\\\\\\n};\\\\\\\\n\\\\\\\\nfunction Editor() {\\\\\\\\n  return (\\\\\\\\n    <div class=\\\\\\\\\\\\\\\"row\\\\\\\\\\\\\\\" id={`accordion${postId}`} key=\\\\\\\\\\\\\\\"editors-footer\\\\\\\\\\\\\\\">\\\\\\\\n      <div\\\\\\\\n        key={`${state.postType}${state.editorType}${postId}`}\\\\\\\\n        className={\\\\\\\\\\\\\\\"w-100\\\\\\\\\\\\\\\"}\\\\\\\\n      >\\\\\\\\n        {state.editorType === \\\\\\\\\\\\\\\"CREATE\\\\\\\\\\\\\\\" ? (\\\\\\\\n          <>\\\\\\\\n            <Widget\\\\\\\\n              src={\\\\\\\\\\\\\\\"devhub.near/widget/devhub.entity.post.PostEditor\\\\\\\\\\\\\\\"}\\\\\\\\n              props={{\\\\\\\\n                postType: state.postType,\\\\\\\\n                onDraftStateChange,\\\\\\\\n                draftState:\\\\\\\\n                  draftState?.parent_post_id == postId ? draftState : undefined,\\\\\\\\n                parentId: postId,\\\\\\\\n                mode: \\\\\\\\\\\\\\\"Create\\\\\\\\\\\\\\\",\\\\\\\\n              }}\\\\\\\\n            />\\\\\\\\n          </>\\\\\\\\n        ) : (\\\\\\\\n          <>\\\\\\\\n            <Widget\\\\\\\\n              src={\\\\\\\\\\\\\\\"devhub.near/widget/devhub.entity.post.PostEditor\\\\\\\\\\\\\\\"}\\\\\\\\n              props={{\\\\\\\\n                postType: state.postType,\\\\\\\\n                postId,\\\\\\\\n                mode: \\\\\\\\\\\\\\\"Edit\\\\\\\\\\\\\\\",\\\\\\\\n                author_id: post.author_id,\\\\\\\\n                labels: post.snapshot.labels,\\\\\\\\n                name: post.snapshot.name,\\\\\\\\n                description: post.snapshot.description,\\\\\\\\n                amount: post.snapshot.amount,\\\\\\\\n                token: tokenResolver(post.snapshot.sponsorship_token),\\\\\\\\n                supervisor: post.snapshot.supervisor,\\\\\\\\n                githubLink: post.snapshot.github_link,\\\\\\\\n                onDraftStateChange,\\\\\\\\n                draftState:\\\\\\\\n                  draftState?.edit_post_id == postId ? draftState : undefined,\\\\\\\\n                toggleEditor: toggleEditor,\\\\\\\\n              }}\\\\\\\\n            />\\\\\\\\n          </>\\\\\\\\n        )}\\\\\\\\n      </div>\\\\\\\\n    </div>\\\\\\\\n  );\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst renamedPostType =\\\\\\\\n  snapshot.post_type == \\\\\\\\\\\\\\\"Submission\\\\\\\\\\\\\\\" ? \\\\\\\\\\\\\\\"Solution\\\\\\\\\\\\\\\" : snapshot.post_type;\\\\\\\\n\\\\\\\\nconst tags = post.snapshot.labels ? (\\\\\\\\n  <div\\\\\\\\n    class=\\\\\\\\\\\\\\\"card-title d-flex flex-wrap align-items-center\\\\\\\\\\\\\\\"\\\\\\\\n    style={{ margin: \\\\\\\\\\\\\\\"20px 0\\\\\\\\\\\\\\\" }}\\\\\\\\n    key=\\\\\\\\\\\\\\\"post-labels\\\\\\\\\\\\\\\"\\\\\\\\n  >\\\\\\\\n    {post.snapshot.labels.map((tag, idx) => (\\\\\\\\n      <div className=\\\\\\\\\\\\\\\"d-flex align-items-center my-3 me-3\\\\\\\\\\\\\\\">\\\\\\\\n        <Link\\\\\\\\n          to={href({\\\\\\\\n            widgetSrc: \\\\\\\\\\\\\\\"#/devhub.near/widget/app\\\\\\\\\\\\\\\",\\\\\\\\n            params: { page: \\\\\\\\\\\\\\\"feed\\\\\\\\\\\\\\\", tag: tag },\\\\\\\\n          })}\\\\\\\\n        >\\\\\\\\n          <div\\\\\\\\n            className=\\\\\\\\\\\\\\\"d-flex gap-3 align-items-center\\\\\\\\\\\\\\\"\\\\\\\\n            style={{ cursor: \\\\\\\\\\\\\\\"pointer\\\\\\\\\\\\\\\", textDecoration: \\\\\\\\\\\\\\\"none\\\\\\\\\\\\\\\" }}\\\\\\\\n          >\\\\\\\\n            <Widget\\\\\\\\n              src={\\\\\\\\\\\\\\\"devhub.near/widget/devhub.components.atom.Tag\\\\\\\\\\\\\\\"}\\\\\\\\n              props={{\\\\\\\\n                tag,\\\\\\\\n                black: true,\\\\\\\\n              }}\\\\\\\\n            />\\\\\\\\n          </div>\\\\\\\\n        </Link>\\\\\\\\n        {idx !== post.snapshot.labels.length - 1 && (\\\\\\\\n          <span className=\\\\\\\\\\\\\\\"ms-3\\\\\\\\\\\\\\\">\\\\\\\\u{2022}</span>\\\\\\\\n        )}\\\\\\\\n      </div>\\\\\\\\n    ))}\\\\\\\\n  </div>\\\\\\\\n) : (\\\\\\\\n  <div key=\\\\\\\\\\\\\\\"post-labels\\\\\\\\\\\\\\\"></div>\\\\\\\\n);\\\\\\\\n\\\\\\\\nconst Title = styled.h5`\\\\\\\\n  margin: 1rem 0;\\\\\\\\n\\\\\\\\n  color: #151515;\\\\\\\\n  font-size: 1.15rem;\\\\\\\\n  font-style: normal;\\\\\\\\n  font-weight: 700;\\\\\\\\n  line-height: 1.625rem; /* 55.556% */\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst postTitle =\\\\\\\\n  snapshot.post_type == \\\\\\\\\\\\\\\"Comment\\\\\\\\\\\\\\\" ? (\\\\\\\\n    <div key=\\\\\\\\\\\\\\\"post-title\\\\\\\\\\\\\\\"></div>\\\\\\\\n  ) : (\\\\\\\\n    <Title key=\\\\\\\\\\\\\\\"post-title\\\\\\\\\\\\\\\">\\\\\\\\n      {emptyIcons[snapshot.post_type]} {renamedPostType}: {snapshot.name}\\\\\\\\n    </Title>\\\\\\\\n  );\\\\\\\\n\\\\\\\\nconst postExtra =\\\\\\\\n  snapshot.post_type == \\\\\\\\\\\\\\\"Sponsorship\\\\\\\\\\\\\\\" ? (\\\\\\\\n    <div key=\\\\\\\\\\\\\\\"post-extra\\\\\\\\\\\\\\\">\\\\\\\\n      <h6 class=\\\\\\\\\\\\\\\"card-subtitle mb-2 text-muted\\\\\\\\\\\\\\\">\\\\\\\\n        Maximum amount: {snapshot.amount}{\\\\\\\\\\\\\\\" \\\\\\\\\\\\\\\"}\\\\\\\\n        {tokenResolver(snapshot.sponsorship_token)}\\\\\\\\n      </h6>\\\\\\\\n      <h6 class=\\\\\\\\\\\\\\\"card-subtitle mb-2 text-muted\\\\\\\\\\\\\\\">\\\\\\\\n        Supervisor:{\\\\\\\\\\\\\\\" \\\\\\\\\\\\\\\"}\\\\\\\\n        <Widget\\\\\\\\n          src={\\\\\\\\\\\\\\\"neardevgov.near/widget/ProfileLine\\\\\\\\\\\\\\\"}\\\\\\\\n          props={{ accountId: snapshot.supervisor }}\\\\\\\\n        />\\\\\\\\n      </h6>\\\\\\\\n    </div>\\\\\\\\n  ) : (\\\\\\\\n    <div></div>\\\\\\\\n  );\\\\\\\\n\\\\\\\\nconst childPostHasDraft = childPostIds.find(\\\\\\\\n  (childId) =>\\\\\\\\n    childId == draftState?.edit_post_id || childId == draftState?.parent_post_id\\\\\\\\n);\\\\\\\\nif (\\\\\\\\n  (childPostHasDraft || state.childrenOfChildPostsHasDraft) &&\\\\\\\\n  props.expandParent\\\\\\\\n) {\\\\\\\\n  props.expandParent();\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst postsList =\\\\\\\\n  props.isPreview || childPostIds.length == 0 ? (\\\\\\\\n    <div key=\\\\\\\\\\\\\\\"posts-list\\\\\\\\\\\\\\\"></div>\\\\\\\\n  ) : (\\\\\\\\n    <div class=\\\\\\\\\\\\\\\"row\\\\\\\\\\\\\\\" key=\\\\\\\\\\\\\\\"posts-list\\\\\\\\\\\\\\\">\\\\\\\\n      <div\\\\\\\\n        class={`collapse mt-3 ${\\\\\\\\n          defaultExpanded ||\\\\\\\\n          childPostHasDraft ||\\\\\\\\n          state.childrenOfChildPostsHasDraft\\\\\\\\n            ? \\\\\\\\\\\\\\\"show\\\\\\\\\\\\\\\"\\\\\\\\n            : \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\"\\\\\\\\n        }`}\\\\\\\\n        id={`collapseChildPosts${postId}`}\\\\\\\\n      >\\\\\\\\n        {childPostIds.map((childId) => (\\\\\\\\n          <div key={childId} style={{ marginBottom: \\\\\\\\\\\\\\\"0.5rem\\\\\\\\\\\\\\\" }}>\\\\\\\\n            <Widget\\\\\\\\n              src=\\\\\\\\\\\\\\\"devhub.near/widget/devhub.entity.post.Post\\\\\\\\\\\\\\\"\\\\\\\\n              props={{\\\\\\\\n                id: childId,\\\\\\\\n                isUnderPost: true,\\\\\\\\n                onDraftStateChange,\\\\\\\\n                draftState,\\\\\\\\n                expandParent: () =>\\\\\\\\n                  State.update({ childrenOfChildPostsHasDraft: true }),\\\\\\\\n                referral: `subpost${childId}of${postId}`,\\\\\\\\n              }}\\\\\\\\n            />\\\\\\\\n          </div>\\\\\\\\n        ))}\\\\\\\\n      </div>\\\\\\\\n    </div>\\\\\\\\n  );\\\\\\\\n\\\\\\\\nconst LimitedMarkdown = styled.div`\\\\\\\\n  max-height: 20em;\\\\\\\\n`;\\\\\\\\n\\\\\\\\n// Determine if located in the post page.\\\\\\\\nconst isInList = props.isInList;\\\\\\\\nconst contentArray = snapshot.description.split(\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\");\\\\\\\\nconst needClamp = isInList && contentArray.length > 5;\\\\\\\\n\\\\\\\\ninitState({\\\\\\\\n  clamp: needClamp,\\\\\\\\n  expandReplies: defaultExpanded,\\\\\\\\n});\\\\\\\\n\\\\\\\\nconst clampedContent = needClamp\\\\\\\\n  ? contentArray.slice(0, 3).join(\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\")\\\\\\\\n  : snapshot.description;\\\\\\\\n\\\\\\\\n// Should make sure the posts under the currently top viewed post are limited in size.\\\\\\\\nconst descriptionArea = isUnderPost ? (\\\\\\\\n  <LimitedMarkdown className=\\\\\\\\\\\\\\\"overflow-auto\\\\\\\\\\\\\\\" key=\\\\\\\\\\\\\\\"description-area\\\\\\\\\\\\\\\">\\\\\\\\n    {/* {widget(\\\\\\\\\\\\\\\"components.molecule.markdown-viewer\\\\\\\\\\\\\\\", {\\\\\\\\n      text: snapshot.description,\\\\\\\\n    })} */}\\\\\\\\n    <Widget\\\\\\\\n      src={\\\\\\\\\\\\\\\"devhub.near/widget/devhub.components.molecule.MarkdownViewer\\\\\\\\\\\\\\\"}\\\\\\\\n      props={{\\\\\\\\n        text: snapshot.description,\\\\\\\\n      }}\\\\\\\\n    />\\\\\\\\n  </LimitedMarkdown>\\\\\\\\n) : (\\\\\\\\n  <div className=\\\\\\\\\\\\\\\"w-100 overflow-auto\\\\\\\\\\\\\\\">\\\\\\\\n    <div class={state.clamp ? \\\\\\\\\\\\\\\"clamp\\\\\\\\\\\\\\\" : \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\"}>\\\\\\\\n      {/* {widget(\\\\\\\\\\\\\\\"components.molecule.markdown-viewer\\\\\\\\\\\\\\\", {\\\\\\\\n        text: state.clamp ? clampedContent : snapshot.description,\\\\\\\\n      })} */}\\\\\\\\n      <Widget\\\\\\\\n        src={\\\\\\\\\\\\\\\"devhub.near/widget/devhub.components.molecule.MarkdownViewer\\\\\\\\\\\\\\\"}\\\\\\\\n        props={{\\\\\\\\n          text: state.clamp ? clampedContent : snapshot.description,\\\\\\\\n        }}\\\\\\\\n      />\\\\\\\\n    </div>\\\\\\\\n    {state.clamp ? (\\\\\\\\n      <div class=\\\\\\\\\\\\\\\"d-flex justify-content-start\\\\\\\\\\\\\\\">\\\\\\\\n        <a\\\\\\\\n          style={{ cursor: \\\\\\\\\\\\\\\"pointer\\\\\\\\\\\\\\\", color: \\\\\\\\\\\\\\\"#00ec97\\\\\\\\\\\\\\\" }}\\\\\\\\n          class=\\\\\\\\\\\\\\\"btn-link text-dark fw-bold text-decoration-none\\\\\\\\\\\\\\\"\\\\\\\\n          onClick={() => State.update({ clamp: false })}\\\\\\\\n        >\\\\\\\\n          See more\\\\\\\\n        </a>\\\\\\\\n      </div>\\\\\\\\n    ) : (\\\\\\\\n      <></>\\\\\\\\n    )}\\\\\\\\n  </div>\\\\\\\\n);\\\\\\\\n\\\\\\\\nconst timestampElement = (_snapshot) => {\\\\\\\\n  return (\\\\\\\\n    <Link\\\\\\\\n      class=\\\\\\\\\\\\\\\"text-muted\\\\\\\\\\\\\\\"\\\\\\\\n      href={href({\\\\\\\\n        widgetSrc: \\\\\\\\\\\\\\\"devhub.near/widget/app\\\\\\\\\\\\\\\",\\\\\\\\n        params: {\\\\\\\\n          page: \\\\\\\\\\\\\\\"post\\\\\\\\\\\\\\\",\\\\\\\\n          id: postId,\\\\\\\\n          timestamp: _snapshot.timestamp,\\\\\\\\n          compareTimestamp: null,\\\\\\\\n          referral,\\\\\\\\n        },\\\\\\\\n      })}\\\\\\\\n    >\\\\\\\\n      {readableDate(_snapshot.timestamp / 1000000).substring(4)}\\\\\\\\n\\\\\\\\n      <Widget\\\\\\\\n        src=\\\\\\\\\\\\\\\"mob.near/widget/ProfileImage\\\\\\\\\\\\\\\"\\\\\\\\n        props={{\\\\\\\\n          accountId: _snapshot.editor_id,\\\\\\\\n          style: {\\\\\\\\n            width: \\\\\\\\\\\\\\\"1.25em\\\\\\\\\\\\\\\",\\\\\\\\n            height: \\\\\\\\\\\\\\\"1.25em\\\\\\\\\\\\\\\",\\\\\\\\n          },\\\\\\\\n          imageStyle: {\\\\\\\\n            transform: \\\\\\\\\\\\\\\"translateY(-12.5%)\\\\\\\\\\\\\\\",\\\\\\\\n          },\\\\\\\\n        }}\\\\\\\\n      />\\\\\\\\n      {_snapshot.editor_id.substring(0, 8)}\\\\\\\\n    </Link>\\\\\\\\n  );\\\\\\\\n};\\\\\\\\n\\\\\\\\nfunction combineText(_snapshot) {\\\\\\\\n  return (\\\\\\\\n    \\\\\\\\\\\\\\\"## \\\\\\\\\\\\\\\" +\\\\\\\\n    _snapshot.post_type +\\\\\\\\n    \\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\" +\\\\\\\\n    _snapshot.name +\\\\\\\\n    \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\" +\\\\\\\\n    _snapshot.description\\\\\\\\n  );\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst CardContainer = styled.div`\\\\\\\\n  padding: 1.5rem 3rem !important;\\\\\\\\n  border-radius: 16px !important;\\\\\\\\n  border: 1px solid rgba(129, 129, 129, 0.3) !important;\\\\\\\\n  background: #fffefe !important;\\\\\\\\n\\\\\\\\n  @media screen and (max-width: 960px) {\\\\\\\\n    padding: 1rem !important;\\\\\\\\n  }\\\\\\\\n`;\\\\\\\\n\\\\\\\\nreturn (\\\\\\\\n  <CardContainer className={`card ${borders[snapshot.post_type]} attractable`}>\\\\\\\\n    {header}\\\\\\\\n    <div className=\\\\\\\\\\\\\\\"card-body\\\\\\\\\\\\\\\" style={{ padding: 0 }}>\\\\\\\\n      {searchKeywords}\\\\\\\\n      {compareSnapshot ? (\\\\\\\\n        <div\\\\\\\\n          class=\\\\\\\\\\\\\\\"border rounded\\\\\\\\\\\\\\\"\\\\\\\\n          style={{ marginTop: \\\\\\\\\\\\\\\"16px\\\\\\\\\\\\\\\", marginBottom: \\\\\\\\\\\\\\\"16px\\\\\\\\\\\\\\\" }}\\\\\\\\n        >\\\\\\\\n          <div class=\\\\\\\\\\\\\\\"d-flex justify-content-end\\\\\\\\\\\\\\\" style={{ fontSize: \\\\\\\\\\\\\\\"12px\\\\\\\\\\\\\\\" }}>\\\\\\\\n            <div class=\\\\\\\\\\\\\\\"d-flex w-50 justify-content-end mt-1 me-2\\\\\\\\\\\\\\\">\\\\\\\\n              {timestampElement(snapshot)}\\\\\\\\n              {snapshot !== compareSnapshot && (\\\\\\\\n                <>\\\\\\\\n                  <div class=\\\\\\\\\\\\\\\"mx-1 align-self-center\\\\\\\\\\\\\\\">\\\\\\\\n                    <i class=\\\\\\\\\\\\\\\"bi bi-file-earmark-diff\\\\\\\\\\\\\\\" />\\\\\\\\n                  </div>\\\\\\\\n                  {timestampElement(compareSnapshot)}\\\\\\\\n                </>\\\\\\\\n              )}\\\\\\\\n            </div>\\\\\\\\n          </div>\\\\\\\\n          <div className=\\\\\\\\\\\\\\\"w-100 overflow-auto\\\\\\\\\\\\\\\">\\\\\\\\n            <Widget\\\\\\\\n              src=\\\\\\\\\\\\\\\"markeljan.near/widget/MarkdownDiff\\\\\\\\\\\\\\\"\\\\\\\\n              props={{\\\\\\\\n                post: post,\\\\\\\\n                currentCode: combineText(\\\\\\\\n                  swapTimestamps ? compareSnapshot : snapshot\\\\\\\\n                ),\\\\\\\\n                prevCode: combineText(\\\\\\\\n                  swapTimestamps ? snapshot : compareSnapshot\\\\\\\\n                ),\\\\\\\\n                showLineNumber: true,\\\\\\\\n              }}\\\\\\\\n            />\\\\\\\\n          </div>\\\\\\\\n        </div>\\\\\\\\n      ) : (\\\\\\\\n        <>\\\\\\\\n          {postTitle}\\\\\\\\n          {postExtra}\\\\\\\\n          {descriptionArea}\\\\\\\\n        </>\\\\\\\\n      )}\\\\\\\\n      {tags}\\\\\\\\n      {buttonsFooter}\\\\\\\\n      {!props.isPreview && (isDraft || state.showEditor) && <Editor />}\\\\\\\\n      {postsList}\\\\\\\\n    </div>\\\\\\\\n  </CardContainer>\\\\\\\\n);\\\\\\\\n\"}}}}}"
      }
    ],
    "actions_agg": {
      "deposit": 0
    },
    "outcomes": {
      "status": true
    },
    "outcomes_agg": {
      "transaction_fee": 1.1905379172499e+21
    }
  }
]