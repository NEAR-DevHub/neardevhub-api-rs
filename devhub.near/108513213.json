[
  {
    "id": "1818254880",
    "receipt_id": "4GBkKX6mznCNRyx6nChDE2yeRUnPdULHJ36xbFreW9si",
    "predecessor_account_id": "devhub.near",
    "receiver_account_id": "social.near",
    "receipt_kind": "ACTION",
    "receipt_block": {
      "block_hash": "2qXuhXHJ2mMeh8wuBHf2dv11GBCuuW6MJkhqwMoQSHr1",
      "block_height": 108530332,
      "block_timestamp": 1703224006044510000
    },
    "receipt_outcome": {
      "gas_burnt": 17613170691250,
      "tokens_burnt": 1.761317069125e+21,
      "executor_account_id": "social.near",
      "status": true
    },
    "transaction_hash": "A3no9A6UdkStPNDqeHzmspPWoMDJw9KsEGc4zFD6kdDP",
    "included_in_block_hash": "8BL4B6RpdBujoNjzuKA97eDcwycqi78wwCxyXaiERwQf",
    "block_timestamp": "1703224004709698708",
    "block": {
      "block_height": 108530331
    },
    "receipt_conversion_tokens_burnt": "255823570538800000000",
    "actions": [
      {
        "action": "FUNCTION_CALL",
        "method": "set",
        "deposit": 0,
        "fee": 1.761317069125e+21,
        "args": "{\"data\": {\"devhub.near\": {\"widget\": {\"devhub.entity.post.List\": {\"\": \"// This component implementation was forked from [IndexFeed], but it does not fully implement lazy loading.\\\\\\\\n// While this component uses InfiniteScroll, it still loads the whole list of Post IDs in one view call.\\\\\\\\n// The contract will need to be extended with pagination support, yet, even in the current state the page loads much faster.\\\\\\\\n// [IndexFeed]: https://near.social/#/mob.near/widget/WidgetSource?src=mob.near/widget/IndexFeed\\\\\\\\n\\\\\\\\nconst { href } = VM.require(\\\\\\\\\\\\\\\"devhub.near/widget/core.lib.url\\\\\\\\\\\\\\\");\\\\\\\\n\\\\\\\\nconst { draftState, onDraftStateChange } = VM.require(\\\\\\\\n  \\\\\\\\\\\\\\\"devhub.near/widget/devhub.entity.post.draft\\\\\\\\\\\\\\\"\\\\\\\\n);\\\\\\\\n\\\\\\\\nif (!href) {\\\\\\\\n  return <p>Loading modules...</p>;\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst QUERYAPI_ENDPOINT = `https://near-queryapi.api.pagoda.co/v1/graphql/`;\\\\\\\\n\\\\\\\\nconst queryName =\\\\\\\\n  props.queryName ?? `bo_near_devhub_v36_posts_with_latest_snapshot`;\\\\\\\\n\\\\\\\\nconst query = `query DevhubPostsQuery($limit: Int = 100, $offset: Int = 0, $where: ${queryName}_bool_exp = {}) {\\\\\\\\n    ${queryName}(\\\\\\\\n      limit: $limit\\\\\\\\n      offset: $offset\\\\\\\\n      order_by: {ts: desc}\\\\\\\\n      where: $where\\\\\\\\n    ) {\\\\\\\\n      post_id\\\\\\\\n    }\\\\\\\\n  }\\\\\\\\n`;\\\\\\\\n\\\\\\\\nfunction fetchGraphQL(operationsDoc, operationName, variables) {\\\\\\\\n  return asyncFetch(QUERYAPI_ENDPOINT, {\\\\\\\\n    method: \\\\\\\\\\\\\\\"POST\\\\\\\\\\\\\\\",\\\\\\\\n    headers: { \\\\\\\\\\\\\\\"x-hasura-role\\\\\\\\\\\\\\\": `bo_near` },\\\\\\\\n    body: JSON.stringify({\\\\\\\\n      query: operationsDoc,\\\\\\\\n      variables: variables,\\\\\\\\n      operationName: operationName,\\\\\\\\n    }),\\\\\\\\n  });\\\\\\\\n}\\\\\\\\n\\\\\\\\nfunction searchConditionChanged() {\\\\\\\\n  return (\\\\\\\\n    props.author != state.author ||\\\\\\\\n    props.term != state.term ||\\\\\\\\n    props.tag != state.tag ||\\\\\\\\n    props.recency != state.recency\\\\\\\\n  );\\\\\\\\n}\\\\\\\\n\\\\\\\\nfunction updateSearchCondition() {\\\\\\\\n  State.update({\\\\\\\\n    author: props.author,\\\\\\\\n    term: props.term,\\\\\\\\n    tag: props.tag,\\\\\\\\n    recency: props.recency,\\\\\\\\n    loading: true,\\\\\\\\n  });\\\\\\\\n}\\\\\\\\n\\\\\\\\nfunction getPostIds(tag) {\\\\\\\\n  if (searchConditionChanged()) {\\\\\\\\n    updateSearchCondition();\\\\\\\\n  }\\\\\\\\n  let where = {};\\\\\\\\n  let authorId = props.author;\\\\\\\\n  let label = tag || props.tag;\\\\\\\\n  if (authorId) {\\\\\\\\n    where = { author_id: { _eq: authorId }, ...where };\\\\\\\\n  }\\\\\\\\n  if (props.term) {\\\\\\\\n    where = { description: { _ilike: `%${props.term}%` }, ...where };\\\\\\\\n  }\\\\\\\\n  if (label) {\\\\\\\\n    if (typeof label === \\\\\\\\\\\\\\\"string\\\\\\\\\\\\\\\") {\\\\\\\\n      // Handle a single label\\\\\\\\n      where = { labels: { _contains: label }, ...where };\\\\\\\\n    } else if (Array.isArray(label)) {\\\\\\\\n      // Handle an array of labels\\\\\\\\n      where = {\\\\\\\\n        labels: {\\\\\\\\n          _containsAny: label,\\\\\\\\n        },\\\\\\\\n        ...where,\\\\\\\\n      };\\\\\\\\n    }\\\\\\\\n  }\\\\\\\\n  if (!props.recency) {\\\\\\\\n    // show only top level posts\\\\\\\\n    where = { parent_id: { _is_null: true }, ...where };\\\\\\\\n  }\\\\\\\\n\\\\\\\\n  // Don\\\\\\\\\\\\'t show blog and devhub-test posts\\\\\\\\n  where = {\\\\\\\\n    _and: [\\\\\\\\n      {\\\\\\\\n        _not: {\\\\\\\\n          labels: { _contains: \\\\\\\\\\\\\\\"blog\\\\\\\\\\\\\\\" },\\\\\\\\n          parent_id: { _is_null: true },\\\\\\\\n          post_type: { _eq: \\\\\\\\\\\\\\\"Comment\\\\\\\\\\\\\\\" },\\\\\\\\n        },\\\\\\\\n      },\\\\\\\\n      {\\\\\\\\n        _not: {\\\\\\\\n          labels: { _contains: \\\\\\\\\\\\\\\"devhub-test\\\\\\\\\\\\\\\" },\\\\\\\\n        },\\\\\\\\n      },\\\\\\\\n    ],\\\\\\\\n    ...where,\\\\\\\\n  };\\\\\\\\n\\\\\\\\n  console.log(\\\\\\\\\\\\\\\"searching for\\\\\\\\\\\\\\\", where);\\\\\\\\n  fetchGraphQL(query, \\\\\\\\\\\\\\\"DevhubPostsQuery\\\\\\\\\\\\\\\", {\\\\\\\\n    limit: 100,\\\\\\\\n    offset: 0,\\\\\\\\n    where,\\\\\\\\n  }).then((result) => {\\\\\\\\n    if (result.status === 200) {\\\\\\\\n      console.log(\\\\\\\\\\\\\\\"search success\\\\\\\\\\\\\\\");\\\\\\\\n      if (result.body.data) {\\\\\\\\n        const data = result.body.data[queryName];\\\\\\\\n        State.update({\\\\\\\\n          postIds: data.map((p) => p.post_id),\\\\\\\\n          loading: false,\\\\\\\\n        });\\\\\\\\n        console.log(\\\\\\\\\\\\\\\"found:\\\\\\\\\\\\\\\");\\\\\\\\n        console.log(data);\\\\\\\\n      }\\\\\\\\n    } else {\\\\\\\\n      console.error(\\\\\\\\\\\\\\\"error:\\\\\\\\\\\\\\\", result.body);\\\\\\\\n      State.update({ loading: false });\\\\\\\\n    }\\\\\\\\n  });\\\\\\\\n}\\\\\\\\n\\\\\\\\nState.init({\\\\\\\\n  period: \\\\\\\\\\\\\\\"week\\\\\\\\\\\\\\\",\\\\\\\\n});\\\\\\\\n\\\\\\\\nif (!state.items || searchConditionChanged()) {\\\\\\\\n  getPostIds();\\\\\\\\n}\\\\\\\\n\\\\\\\\nfunction defaultRenderItem(postId, additionalProps) {\\\\\\\\n  if (!additionalProps) {\\\\\\\\n    additionalProps = {};\\\\\\\\n  }\\\\\\\\n  // It is important to have a non-zero-height element as otherwise InfiniteScroll loads too many items on initial load\\\\\\\\n  return (\\\\\\\\n    <div className=\\\\\\\\\\\\\\\"py-2\\\\\\\\\\\\\\\" style={{ minHeight: \\\\\\\\\\\\\\\"150px\\\\\\\\\\\\\\\" }}>\\\\\\\\n      <Widget\\\\\\\\n        src={\\\\\\\\\\\\\\\"devhub.near/widget/devhub.entity.post.Post\\\\\\\\\\\\\\\"}\\\\\\\\n        props={{\\\\\\\\n          id: postId,\\\\\\\\n          expandable: true,\\\\\\\\n          defaultExpanded: false,\\\\\\\\n          isInList: true,\\\\\\\\n          draftState,\\\\\\\\n          isPreview: false,\\\\\\\\n          onDraftStateChange,\\\\\\\\n          ...additionalProps,\\\\\\\\n          referral: postId,\\\\\\\\n          updateTagInParent: (tag) => {\\\\\\\\n            if (typeof props.updateTagInput === \\\\\\\\\\\\\\\"function\\\\\\\\\\\\\\\") {\\\\\\\\n              props.updateTagInput(tag);\\\\\\\\n            }\\\\\\\\n            getPostIds(tag);\\\\\\\\n          },\\\\\\\\n          transactionHashes: props.transactionHashes,\\\\\\\\n        }}\\\\\\\\n      />\\\\\\\\n    </div>\\\\\\\\n  );\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst renderItem = props.renderItem ?? defaultRenderItem;\\\\\\\\n\\\\\\\\nconst cachedRenderItem = (item, i) => {\\\\\\\\n  if (props.term) {\\\\\\\\n    return renderItem(item, {\\\\\\\\n      searchKeywords: [props.term],\\\\\\\\n    });\\\\\\\\n  }\\\\\\\\n\\\\\\\\n  const key = JSON.stringify(item);\\\\\\\\n\\\\\\\\n  if (!(key in state.cachedItems)) {\\\\\\\\n    state.cachedItems[key] = renderItem(item);\\\\\\\\n    State.update();\\\\\\\\n  }\\\\\\\\n  return state.cachedItems[key];\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst initialRenderLimit = props.initialRenderLimit ?? 3;\\\\\\\\nconst addDisplayCount = props.nextLimit ?? initialRenderLimit;\\\\\\\\n\\\\\\\\nconst ONE_DAY = 60 * 60 * 24 * 1000;\\\\\\\\nconst ONE_WEEK = 60 * 60 * 24 * 1000 * 7;\\\\\\\\nconst ONE_MONTH = 60 * 60 * 24 * 1000 * 30;\\\\\\\\n\\\\\\\\nfunction getHotnessScore(post) {\\\\\\\\n  //post.id - shows the age of the post, should grow exponentially, since newer posts are more important\\\\\\\\n  //post.likes.length - linear value\\\\\\\\n  const age = Math.pow(post.id, 5);\\\\\\\\n  const comments = post.comments;\\\\\\\\n  const commentAge = comments.reduce((sum, age) => sum + Math.pow(age, 5), 0);\\\\\\\\n  const totalAge = age + commentAge;\\\\\\\\n  //use log functions to make likes score and exponentially big age score close to each other\\\\\\\\n  return Math.log10(post.likes.length) + Math.log(Math.log10(totalAge));\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst getPeriodText = (period) => {\\\\\\\\n  let text = \\\\\\\\\\\\\\\"Last 24 hours\\\\\\\\\\\\\\\";\\\\\\\\n  if (period === \\\\\\\\\\\\\\\"week\\\\\\\\\\\\\\\") {\\\\\\\\n    text = \\\\\\\\\\\\\\\"Last week\\\\\\\\\\\\\\\";\\\\\\\\n  }\\\\\\\\n  if (period === \\\\\\\\\\\\\\\"month\\\\\\\\\\\\\\\") {\\\\\\\\n    text = \\\\\\\\\\\\\\\"Last month\\\\\\\\\\\\\\\";\\\\\\\\n  }\\\\\\\\n  return text;\\\\\\\\n};\\\\\\\\n\\\\\\\\nlet postIds = state.postIds ?? null;\\\\\\\\n\\\\\\\\nconst loader = (\\\\\\\\n  <div className=\\\\\\\\\\\\\\\"loader\\\\\\\\\\\\\\\" key={\\\\\\\\\\\\\\\"loader\\\\\\\\\\\\\\\"}>\\\\\\\\n    <span\\\\\\\\n      className=\\\\\\\\\\\\\\\"spinner-grow spinner-grow-sm me-1\\\\\\\\\\\\\\\"\\\\\\\\n      role=\\\\\\\\\\\\\\\"status\\\\\\\\\\\\\\\"\\\\\\\\n      aria-hidden=\\\\\\\\\\\\\\\"true\\\\\\\\\\\\\\\"\\\\\\\\n    />\\\\\\\\n    Loading ...\\\\\\\\n  </div>\\\\\\\\n);\\\\\\\\n\\\\\\\\nif (postIds === null) {\\\\\\\\n  return loader;\\\\\\\\n}\\\\\\\\nconst initialItems = postIds;\\\\\\\\n//const initialItems = postIds.map(postId => ({ id: postId, ...Near.view(nearDevGovGigsContractAccountId, \\\\\\\\\\\\\\\"get_post\\\\\\\\\\\\\\\", { post_id: postId }) }));\\\\\\\\n\\\\\\\\n// const computeFetchFrom = (items, limit) => {\\\\\\\\n//   if (!items || items.length < limit) {\\\\\\\\n//     return false;\\\\\\\\n//   }\\\\\\\\n//   const blockHeight = items[items.length - 1].blockHeight;\\\\\\\\n//   return index.options.order === \\\\\\\\\\\\\\\"desc\\\\\\\\\\\\\\\" ? blockHeight - 1 : blockHeight + 1;\\\\\\\\n// };\\\\\\\\n\\\\\\\\n// const mergeItems = (newItems) => {\\\\\\\\n//   const items = [\\\\\\\\n//     ...new Set([...newItems, ...state.items].map((i) => JSON.stringify(i))),\\\\\\\\n//   ].map((i) => JSON.parse(i));\\\\\\\\n//   items.sort((a, b) => a.blockHeight - b.blockHeight);\\\\\\\\n//   if (index.options.order === \\\\\\\\\\\\\\\"desc\\\\\\\\\\\\\\\") {\\\\\\\\n//     items.reverse();\\\\\\\\n//   }\\\\\\\\n//   return items;\\\\\\\\n// };\\\\\\\\n\\\\\\\\nconst jInitialItems = JSON.stringify(initialItems);\\\\\\\\nif (state.jInitialItems !== jInitialItems) {\\\\\\\\n  // const jIndex = JSON.stringify(index);\\\\\\\\n  // if (jIndex !== state.jIndex) {\\\\\\\\n  State.update({\\\\\\\\n    jIndex,\\\\\\\\n    jInitialItems,\\\\\\\\n    items: initialItems,\\\\\\\\n    fetchFrom: false,\\\\\\\\n    //nextFetchFrom: computeFetchFrom(initialItems, index.options.limit),\\\\\\\\n    nextFetchFrom: false,\\\\\\\\n    displayCount: initialRenderLimit,\\\\\\\\n    cachedItems: {},\\\\\\\\n  });\\\\\\\\n  // } else {\\\\\\\\n  //   State.update({\\\\\\\\n  //     jInitialItems,\\\\\\\\n  //     items: mergeItems(initialItems),\\\\\\\\n  //   });\\\\\\\\n  // }\\\\\\\\n}\\\\\\\\n\\\\\\\\nif (state.fetchFrom) {\\\\\\\\n  // TODO: fetchFrom\\\\\\\\n  // const limit = addDisplayCount;\\\\\\\\n  // const newItems = Social.index(\\\\\\\\n  //   index.action,\\\\\\\\n  //   index.key,\\\\\\\\n  //   Object.assign({}, index.options, {\\\\\\\\n  //     from: state.fetchFrom,\\\\\\\\n  //     subscribe: undefined,\\\\\\\\n  //     limit,\\\\\\\\n  //   })\\\\\\\\n  // );\\\\\\\\n  // if (newItems !== null) {\\\\\\\\n  //   State.update({\\\\\\\\n  //     items: mergeItems(newItems),\\\\\\\\n  //     fetchFrom: false,\\\\\\\\n  //     nextFetchFrom: computeFetchFrom(newItems, limit),\\\\\\\\n  //   });\\\\\\\\n  // }\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst makeMoreItems = () => {\\\\\\\\n  State.update({\\\\\\\\n    displayCount: state.displayCount + addDisplayCount,\\\\\\\\n  });\\\\\\\\n  if (\\\\\\\\n    state.items.length - state.displayCount < addDisplayCount * 2 &&\\\\\\\\n    !state.fetchFrom &&\\\\\\\\n    state.nextFetchFrom &&\\\\\\\\n    state.nextFetchFrom !== state.fetchFrom\\\\\\\\n  ) {\\\\\\\\n    State.update({\\\\\\\\n      fetchFrom: state.nextFetchFrom,\\\\\\\\n    });\\\\\\\\n  }\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst fetchMore =\\\\\\\\n  props.manual &&\\\\\\\\n  (state.fetchFrom && state.items.length < state.displayCount\\\\\\\\n    ? loader\\\\\\\\n    : state.displayCount < state.items.length && (\\\\\\\\n        <div key={\\\\\\\\\\\\\\\"loader more\\\\\\\\\\\\\\\"}>\\\\\\\\n          <a href=\\\\\\\\\\\\\\\"javascript:void\\\\\\\\\\\\\\\" onClick={(e) => makeMoreItems()}>\\\\\\\\n            {props.loadMoreText ?? \\\\\\\\\\\\\\\"Load more...\\\\\\\\\\\\\\\"}\\\\\\\\n          </a>\\\\\\\\n        </div>\\\\\\\\n      ));\\\\\\\\n\\\\\\\\nconst items = state.items ? state.items.slice(0, state.displayCount) : [];\\\\\\\\n\\\\\\\\nconst renderedItems = items.map(cachedRenderItem);\\\\\\\\n\\\\\\\\nconst Head =\\\\\\\\n  props.recency == \\\\\\\\\\\\\\\"hot\\\\\\\\\\\\\\\" ? (\\\\\\\\n    <div class=\\\\\\\\\\\\\\\"row\\\\\\\\\\\\\\\">\\\\\\\\n      <div class=\\\\\\\\\\\\\\\"fs-5 col-6 align-self-center\\\\\\\\\\\\\\\">\\\\\\\\n        <i class=\\\\\\\\\\\\\\\"bi-fire\\\\\\\\\\\\\\\"></i>\\\\\\\\n        <span>Hottest Posts</span>\\\\\\\\n      </div>\\\\\\\\n      <div class=\\\\\\\\\\\\\\\"col-6 dropdown d-flex justify-content-end\\\\\\\\\\\\\\\">\\\\\\\\n        <a\\\\\\\\n          class=\\\\\\\\\\\\\\\"btn btn-secondary dropdown-toggle\\\\\\\\\\\\\\\"\\\\\\\\n          href=\\\\\\\\\\\\\\\"#\\\\\\\\\\\\\\\"\\\\\\\\n          role=\\\\\\\\\\\\\\\"button\\\\\\\\\\\\\\\"\\\\\\\\n          id=\\\\\\\\\\\\\\\"dropdownMenuLink\\\\\\\\\\\\\\\"\\\\\\\\n          data-bs-toggle=\\\\\\\\\\\\\\\"dropdown\\\\\\\\\\\\\\\"\\\\\\\\n          aria-expanded=\\\\\\\\\\\\\\\"false\\\\\\\\\\\\\\\"\\\\\\\\n        >\\\\\\\\n          {getPeriodText(state.period)}\\\\\\\\n        </a>\\\\\\\\n\\\\\\\\n        <ul class=\\\\\\\\\\\\\\\"dropdown-menu\\\\\\\\\\\\\\\" aria-labelledby=\\\\\\\\\\\\\\\"dropdownMenuLink\\\\\\\\\\\\\\\">\\\\\\\\n          <li>\\\\\\\\n            <button\\\\\\\\n              class=\\\\\\\\\\\\\\\"dropdown-item\\\\\\\\\\\\\\\"\\\\\\\\n              onClick={() => {\\\\\\\\n                State.update({ period: \\\\\\\\\\\\\\\"day\\\\\\\\\\\\\\\" });\\\\\\\\n              }}\\\\\\\\n            >\\\\\\\\n              {getPeriodText(\\\\\\\\\\\\\\\"day\\\\\\\\\\\\\\\")}\\\\\\\\n            </button>\\\\\\\\n          </li>\\\\\\\\n          <li>\\\\\\\\n            <button\\\\\\\\n              class=\\\\\\\\\\\\\\\"dropdown-item\\\\\\\\\\\\\\\"\\\\\\\\n              onClick={() => {\\\\\\\\n                State.update({ period: \\\\\\\\\\\\\\\"week\\\\\\\\\\\\\\\" });\\\\\\\\n              }}\\\\\\\\n            >\\\\\\\\n              {getPeriodText(\\\\\\\\\\\\\\\"week\\\\\\\\\\\\\\\")}\\\\\\\\n            </button>\\\\\\\\n          </li>\\\\\\\\n          <li>\\\\\\\\n            <button\\\\\\\\n              class=\\\\\\\\\\\\\\\"dropdown-item\\\\\\\\\\\\\\\"\\\\\\\\n              onClick={() => {\\\\\\\\n                State.update({ period: \\\\\\\\\\\\\\\"month\\\\\\\\\\\\\\\" });\\\\\\\\n              }}\\\\\\\\n            >\\\\\\\\n              {getPeriodText(\\\\\\\\\\\\\\\"month\\\\\\\\\\\\\\\")}\\\\\\\\n            </button>\\\\\\\\n          </li>\\\\\\\\n        </ul>\\\\\\\\n      </div>\\\\\\\\n    </div>\\\\\\\\n  ) : (\\\\\\\\n    <></>\\\\\\\\n  );\\\\\\\\n\\\\\\\\nreturn (\\\\\\\\n  <>\\\\\\\\n    {Head}\\\\\\\\n    {state.loading ? loader : null}\\\\\\\\n    {is_edit_or_add_post_transaction ? (\\\\\\\\n      <p class=\\\\\\\\\\\\\\\"text-secondary mt-4\\\\\\\\\\\\\\\">\\\\\\\\n        Post {transaction_method_name == \\\\\\\\\\\\\\\"edit_post\\\\\\\\\\\\\\\" ? \\\\\\\\\\\\\\\"edited\\\\\\\\\\\\\\\" : \\\\\\\\\\\\\\\"added\\\\\\\\\\\\\\\"}{\\\\\\\\\\\\\\\" \\\\\\\\\\\\\\\"}\\\\\\\\n        successfully. Back to{\\\\\\\\\\\\\\\" \\\\\\\\\\\\\\\"}\\\\\\\\n        <Link\\\\\\\\n          style={{\\\\\\\\n            color: \\\\\\\\\\\\\\\"#3252A6\\\\\\\\\\\\\\\",\\\\\\\\n          }}\\\\\\\\n          className=\\\\\\\\\\\\\\\"fw-bold\\\\\\\\\\\\\\\"\\\\\\\\n          to={href({\\\\\\\\n            widgetSrc: \\\\\\\\\\\\\\\"devhub.near/widget/app\\\\\\\\\\\\\\\",\\\\\\\\n            params: { page: \\\\\\\\\\\\\\\"feed\\\\\\\\\\\\\\\" },\\\\\\\\n          })}\\\\\\\\n        >\\\\\\\\n          feed\\\\\\\\n        </Link>\\\\\\\\n      </p>\\\\\\\\n    ) : state.items.length > 0 ? (\\\\\\\\n      <InfiniteScroll\\\\\\\\n        pageStart={0}\\\\\\\\n        loadMore={makeMoreItems}\\\\\\\\n        hasMore={state.displayCount < state.items.length}\\\\\\\\n        loader={loader}\\\\\\\\n      >\\\\\\\\n        {renderedItems}\\\\\\\\n      </InfiniteScroll>\\\\\\\\n    ) : (\\\\\\\\n      <p class=\\\\\\\\\\\\\\\"text-secondary\\\\\\\\\\\\\\\">\\\\\\\\n        No posts{\\\\\\\\\\\\\\\" \\\\\\\\\\\\\\\"}\\\\\\\\n        {props.term || props.tag || props.author ? \\\\\\\\\\\\\\\"matches search\\\\\\\\\\\\\\\" : \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\"}\\\\\\\\n        {props.recency === \\\\\\\\\\\\\\\"hot\\\\\\\\\\\\\\\"\\\\\\\\n          ? \\\\\\\\\\\\\\\" in \\\\\\\\\\\\\\\" + getPeriodText(state.period).toLowerCase()\\\\\\\\n          : \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\"}\\\\\\\\n      </p>\\\\\\\\n    )}\\\\\\\\n  </>\\\\\\\\n);\\\\\\\\n\"}, \"devhub.entity.post.Post\": {\"\": \"// Ideally, this would be a page\\\\\\\\n\\\\\\\\nconst { href } = VM.require(\\\\\\\\\\\\\\\"devhub.near/widget/core.lib.url\\\\\\\\\\\\\\\");\\\\\\\\n\\\\\\\\nconst { draftState, onDraftStateChange } = VM.require(\\\\\\\\n  \\\\\\\\\\\\\\\"devhub.near/widget/devhub.entity.post.draft\\\\\\\\\\\\\\\"\\\\\\\\n);\\\\\\\\n\\\\\\\\nif (!href) {\\\\\\\\n  return <p>Loading modules...</p>;\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst ButtonWithHover = styled.button`\\\\\\\\n  background-color: #fff;\\\\\\\\n  transition: all 300ms;\\\\\\\\n  border-radius: 0.5rem;\\\\\\\\n\\\\\\\\n  &:hover {\\\\\\\\n    background-color: #e9ecef;\\\\\\\\n    color: #000;\\\\\\\\n  }\\\\\\\\n\\\\\\\\n  &:disabled {\\\\\\\\n    background-color: #fff;\\\\\\\\n    color: #b7b7b7;\\\\\\\\n  }\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst postId = props.post.id ?? (props.id ? parseInt(props.id) : 0);\\\\\\\\n\\\\\\\\nconst post =\\\\\\\\n  props.post ??\\\\\\\\n  Near.view(\\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"get_post\\\\\\\\\\\\\\\", { post_id: postId });\\\\\\\\n\\\\\\\\nif (!post) {\\\\\\\\n  return <div>Loading ...</div>;\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst referral = props.referral;\\\\\\\\nconst currentTimestamp = props.timestamp ?? post.snapshot.timestamp;\\\\\\\\nconst compareTimestamp = props.compareTimestamp ?? \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\";\\\\\\\\nconst swapTimestamps = currentTimestamp < compareTimestamp;\\\\\\\\n\\\\\\\\nconst snapshotHistory = post.snapshot_history;\\\\\\\\n\\\\\\\\nconst snapshot =\\\\\\\\n  currentTimestamp === post.snapshot.timestamp\\\\\\\\n    ? post.snapshot\\\\\\\\n    : (snapshotHistory &&\\\\\\\\n        snapshotHistory.find((s) => s.timestamp === currentTimestamp)) ??\\\\\\\\n      null;\\\\\\\\n\\\\\\\\nconst compareSnapshot =\\\\\\\\n  compareTimestamp === post.snapshot.timestamp\\\\\\\\n    ? post.snapshot\\\\\\\\n    : (snapshotHistory &&\\\\\\\\n        snapshotHistory.find((s) => s.timestamp === compareTimestamp)) ??\\\\\\\\n      null;\\\\\\\\n\\\\\\\\n// If this post is displayed under another post. Used to limit the size.\\\\\\\\nconst isUnderPost = props.isUnderPost ? true : false;\\\\\\\\n\\\\\\\\nconst parentId = Near.view(\\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"get_parent_id\\\\\\\\\\\\\\\", {\\\\\\\\n  post_id: postId,\\\\\\\\n});\\\\\\\\n\\\\\\\\nconst childPostIdsUnordered =\\\\\\\\n  Near.view(\\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"get_children_ids\\\\\\\\\\\\\\\", {\\\\\\\\n    post_id: postId,\\\\\\\\n  }) ?? [];\\\\\\\\n\\\\\\\\nconst childPostIds = props.isPreview ? [] : childPostIdsUnordered.reverse();\\\\\\\\nconst expandable = props.isPreview ? false : props.expandable ?? false;\\\\\\\\nconst defaultExpanded = expandable ? props.defaultExpanded : true;\\\\\\\\n\\\\\\\\nfunction readableDate(timestamp) {\\\\\\\\n  var a = new Date(timestamp);\\\\\\\\n  return a.toDateString() + \\\\\\\\\\\\\\\" \\\\\\\\\\\\\\\" + a.toLocaleTimeString();\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst timestamp = readableDate(\\\\\\\\n  snapshot.timestamp ? snapshot.timestamp / 1000000 : Date.now()\\\\\\\\n);\\\\\\\\n\\\\\\\\nconst postSearchKeywords = props.searchKeywords ? (\\\\\\\\n  <div style={{ \\\\\\\\\\\\\\\"font-family\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"monospace\\\\\\\\\\\\\\\" }} key=\\\\\\\\\\\\\\\"post-search-keywords\\\\\\\\\\\\\\\">\\\\\\\\n    <span>Found keywords: </span>\\\\\\\\n\\\\\\\\n    {props.searchKeywords.map((tag) => (\\\\\\\\n      <Widget\\\\\\\\n        src={\\\\\\\\\\\\\\\"devhub.near/widget/devhub.components.atom.Tag\\\\\\\\\\\\\\\"}\\\\\\\\n        props={{ linkTo: \\\\\\\\\\\\\\\"Feed\\\\\\\\\\\\\\\", tag }}\\\\\\\\n      />\\\\\\\\n    ))}\\\\\\\\n  </div>\\\\\\\\n) : (\\\\\\\\n  <div key=\\\\\\\\\\\\\\\"post-search-keywords\\\\\\\\\\\\\\\"></div>\\\\\\\\n);\\\\\\\\n\\\\\\\\nconst searchKeywords = props.searchKeywords ? (\\\\\\\\n  <div class=\\\\\\\\\\\\\\\"mb-4\\\\\\\\\\\\\\\" key=\\\\\\\\\\\\\\\"search-keywords\\\\\\\\\\\\\\\">\\\\\\\\n    <small class=\\\\\\\\\\\\\\\"text-muted\\\\\\\\\\\\\\\">{postSearchKeywords}</small>\\\\\\\\n  </div>\\\\\\\\n) : (\\\\\\\\n  <div key=\\\\\\\\\\\\\\\"search-keywords\\\\\\\\\\\\\\\"></div>\\\\\\\\n);\\\\\\\\n\\\\\\\\nconst allowedToEdit =\\\\\\\\n  !props.isPreview &&\\\\\\\\n  Near.view(\\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"is_allowed_to_edit\\\\\\\\\\\\\\\", {\\\\\\\\n    post_id: postId,\\\\\\\\n    editor: context.accountId,\\\\\\\\n  });\\\\\\\\n\\\\\\\\nconst btnEditorWidget = (postType, name) => {\\\\\\\\n  return (\\\\\\\\n    <li>\\\\\\\\n      <a\\\\\\\\n        class=\\\\\\\\\\\\\\\"dropdown-item\\\\\\\\\\\\\\\"\\\\\\\\n        role=\\\\\\\\\\\\\\\"button\\\\\\\\\\\\\\\"\\\\\\\\n        onClick={() =>\\\\\\\\n          State.update({ postType, editorType: \\\\\\\\\\\\\\\"EDIT\\\\\\\\\\\\\\\", showEditor: true })\\\\\\\\n        }\\\\\\\\n      >\\\\\\\\n        {name}\\\\\\\\n      </a>\\\\\\\\n    </li>\\\\\\\\n  );\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst editControl = allowedToEdit ? (\\\\\\\\n  <div class=\\\\\\\\\\\\\\\"btn-group\\\\\\\\\\\\\\\" role=\\\\\\\\\\\\\\\"group\\\\\\\\\\\\\\\">\\\\\\\\n    <a\\\\\\\\n      class=\\\\\\\\\\\\\\\"card-link px-2\\\\\\\\\\\\\\\"\\\\\\\\n      role=\\\\\\\\\\\\\\\"button\\\\\\\\\\\\\\\"\\\\\\\\n      title=\\\\\\\\\\\\\\\"Edit post\\\\\\\\\\\\\\\"\\\\\\\\n      data-bs-toggle=\\\\\\\\\\\\\\\"dropdown\\\\\\\\\\\\\\\"\\\\\\\\n      aria-expanded=\\\\\\\\\\\\\\\"false\\\\\\\\\\\\\\\"\\\\\\\\n      type=\\\\\\\\\\\\\\\"button\\\\\\\\\\\\\\\"\\\\\\\\n    >\\\\\\\\n      <div class=\\\\\\\\\\\\\\\"bi bi-pencil-square\\\\\\\\\\\\\\\"></div>\\\\\\\\n    </a>\\\\\\\\n\\\\\\\\n    <ul class=\\\\\\\\\\\\\\\"dropdown-menu\\\\\\\\\\\\\\\">\\\\\\\\n      {btnEditorWidget(\\\\\\\\\\\\\\\"Idea\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"Edit as an idea\\\\\\\\\\\\\\\")}\\\\\\\\n      {btnEditorWidget(\\\\\\\\\\\\\\\"Solution\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"Edit as a solution\\\\\\\\\\\\\\\")}\\\\\\\\n      {btnEditorWidget(\\\\\\\\\\\\\\\"Attestation\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"Edit as an attestation\\\\\\\\\\\\\\\")}\\\\\\\\n      {btnEditorWidget(\\\\\\\\\\\\\\\"Sponsorship\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"Edit as a sponsorship\\\\\\\\\\\\\\\")}\\\\\\\\n      {btnEditorWidget(\\\\\\\\\\\\\\\"Comment\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"Edit as a comment\\\\\\\\\\\\\\\")}\\\\\\\\n    </ul>\\\\\\\\n  </div>\\\\\\\\n) : (\\\\\\\\n  <div></div>\\\\\\\\n);\\\\\\\\n\\\\\\\\nconst shareButton = props.isPreview ? (\\\\\\\\n  <div></div>\\\\\\\\n) : (\\\\\\\\n  <Link\\\\\\\\n    class=\\\\\\\\\\\\\\\"card-link text-dark\\\\\\\\\\\\\\\"\\\\\\\\n    to={href({\\\\\\\\n      widgetSrc: \\\\\\\\\\\\\\\"devhub.near/widget/app\\\\\\\\\\\\\\\",\\\\\\\\n      params: { page: \\\\\\\\\\\\\\\"post\\\\\\\\\\\\\\\", id: postId },\\\\\\\\n    })}\\\\\\\\n    role=\\\\\\\\\\\\\\\"button\\\\\\\\\\\\\\\"\\\\\\\\n    target=\\\\\\\\\\\\\\\"_blank\\\\\\\\\\\\\\\"\\\\\\\\n    title=\\\\\\\\\\\\\\\"Open in new tab\\\\\\\\\\\\\\\"\\\\\\\\n  >\\\\\\\\n    <div class=\\\\\\\\\\\\\\\"bi bi-share\\\\\\\\\\\\\\\"></div>\\\\\\\\n  </Link>\\\\\\\\n);\\\\\\\\n\\\\\\\\nconst ProfileCardContainer = styled.div`\\\\\\\\n  @media screen and (max-width: 960px) {\\\\\\\\n    width: 100%;\\\\\\\\n  }\\\\\\\\n`;\\\\\\\\n\\\\\\\\n// card-header\\\\\\\\nconst header = (\\\\\\\\n  <div key=\\\\\\\\\\\\\\\"header\\\\\\\\\\\\\\\">\\\\\\\\n    <small class=\\\\\\\\\\\\\\\"text-muted\\\\\\\\\\\\\\\">\\\\\\\\n      <div class=\\\\\\\\\\\\\\\"row justify-content-between\\\\\\\\\\\\\\\">\\\\\\\\n        <div class=\\\\\\\\\\\\\\\"d-flex align-items-center flex-wrap\\\\\\\\\\\\\\\">\\\\\\\\n          <ProfileCardContainer>\\\\\\\\n            <Widget\\\\\\\\n              src={\\\\\\\\n                \\\\\\\\\\\\\\\"devhub.near/widget/devhub.components.molecule.ProfileCard\\\\\\\\\\\\\\\"\\\\\\\\n              }\\\\\\\\n              props={{\\\\\\\\n                accountId: post.author_id,\\\\\\\\n              }}\\\\\\\\n            />\\\\\\\\n          </ProfileCardContainer>\\\\\\\\n\\\\\\\\n          <div class=\\\\\\\\\\\\\\\"d-flex ms-auto\\\\\\\\\\\\\\\">\\\\\\\\n            {editControl}\\\\\\\\n            {timestamp}\\\\\\\\n\\\\\\\\n            <Widget\\\\\\\\n              src={\\\\\\\\\\\\\\\"devhub.near/widget/devhub.entity.post.History\\\\\\\\\\\\\\\"}\\\\\\\\n              props={{\\\\\\\\n                post,\\\\\\\\n                timestamp: currentTimestamp,\\\\\\\\n              }}\\\\\\\\n            />\\\\\\\\n            {shareButton}\\\\\\\\n          </div>\\\\\\\\n        </div>\\\\\\\\n      </div>\\\\\\\\n    </small>\\\\\\\\n  </div>\\\\\\\\n);\\\\\\\\n\\\\\\\\n// const emptyIcons = {\\\\\\\\n//   Idea: \\\\\\\\\\\\\\\"bi-lightbulb\\\\\\\\\\\\\\\",\\\\\\\\n//   Comment: \\\\\\\\\\\\\\\"bi-chat\\\\\\\\\\\\\\\",\\\\\\\\n//   Solution: \\\\\\\\\\\\\\\"bi-rocket\\\\\\\\\\\\\\\",\\\\\\\\n//   Attestation: \\\\\\\\\\\\\\\"bi-check-circle\\\\\\\\\\\\\\\",\\\\\\\\n//   Sponsorship: \\\\\\\\\\\\\\\"bi-cash-coin\\\\\\\\\\\\\\\",\\\\\\\\n//   Github: \\\\\\\\\\\\\\\"bi-github\\\\\\\\\\\\\\\",\\\\\\\\n//   Like: \\\\\\\\\\\\\\\"bi-heart\\\\\\\\\\\\\\\",\\\\\\\\n//   Reply: \\\\\\\\\\\\\\\"bi-reply\\\\\\\\\\\\\\\",\\\\\\\\n// };\\\\\\\\n\\\\\\\\nconst emptyIcons = {\\\\\\\\n  Idea: \\\\\\\\\\\\\\\"\\\\\\\\u{1f4a1}\\\\\\\\\\\\\\\",\\\\\\\\n  Comment: \\\\\\\\\\\\\\\"bi-chat\\\\\\\\\\\\\\\",\\\\\\\\n  Solution: \\\\\\\\\\\\\\\"\\\\\\\\u{1f680}\\\\\\\\\\\\\\\",\\\\\\\\n  Attestation: \\\\\\\\\\\\\\\"\\\\\\\\u{2705}\\\\\\\\\\\\\\\",\\\\\\\\n  Sponsorship: \\\\\\\\\\\\\\\"\\\\\\\\u{1fa99}\\\\\\\\\\\\\\\",\\\\\\\\n  Github: \\\\\\\\\\\\\\\"bi-github\\\\\\\\\\\\\\\",\\\\\\\\n  Like: \\\\\\\\\\\\\\\"bi-heart\\\\\\\\\\\\\\\",\\\\\\\\n  Reply: \\\\\\\\\\\\\\\"bi-reply\\\\\\\\\\\\\\\",\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst fillIcons = {\\\\\\\\n  Idea: \\\\\\\\\\\\\\\"\\\\\\\\u{1f4a1}\\\\\\\\\\\\\\\",\\\\\\\\n  Comment: \\\\\\\\\\\\\\\"bi-chat-fill\\\\\\\\\\\\\\\",\\\\\\\\n  Solution: \\\\\\\\\\\\\\\"\\\\\\\\u{1f680}\\\\\\\\\\\\\\\",\\\\\\\\n  Attestation: \\\\\\\\\\\\\\\"\\\\\\\\u{2705}\\\\\\\\\\\\\\\",\\\\\\\\n  Sponsorship: \\\\\\\\\\\\\\\"\\\\\\\\u{1fa99}\\\\\\\\\\\\\\\",\\\\\\\\n  Github: \\\\\\\\\\\\\\\"bi-github\\\\\\\\\\\\\\\",\\\\\\\\n  Like: \\\\\\\\\\\\\\\"bi-heart-fill\\\\\\\\\\\\\\\",\\\\\\\\n  Reply: \\\\\\\\\\\\\\\"bi-reply-fill\\\\\\\\\\\\\\\",\\\\\\\\n};\\\\\\\\n\\\\\\\\n// Trigger saving this widget.\\\\\\\\n\\\\\\\\nconst borders = {\\\\\\\\n  Idea: \\\\\\\\\\\\\\\"border-light\\\\\\\\\\\\\\\",\\\\\\\\n  Comment: \\\\\\\\\\\\\\\"border-light\\\\\\\\\\\\\\\",\\\\\\\\n  Solution: \\\\\\\\\\\\\\\"border-light\\\\\\\\\\\\\\\",\\\\\\\\n  Attestation: \\\\\\\\\\\\\\\"border-light\\\\\\\\\\\\\\\",\\\\\\\\n  Sponsorship: \\\\\\\\\\\\\\\"border-light\\\\\\\\\\\\\\\",\\\\\\\\n  Github: \\\\\\\\\\\\\\\"border-light\\\\\\\\\\\\\\\",\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst containsLike = props.isPreview\\\\\\\\n  ? false\\\\\\\\n  : post.likes.find((l) => l.author_id == context.accountId);\\\\\\\\nconst likeBtnClass = containsLike ? fillIcons.Like : emptyIcons.Like;\\\\\\\\n// This must be outside onLike, because Near.view returns null at first, and when the view call finished, it returns true/false.\\\\\\\\n// If checking this inside onLike, it will give `null` and we cannot tell the result is true or false.\\\\\\\\nlet grantNotify = Near.view(\\\\\\\\\\\\\\\"social.near\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"is_write_permission_granted\\\\\\\\\\\\\\\", {\\\\\\\\n  predecessor_id: \\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\",\\\\\\\\n  key: context.accountId + \\\\\\\\\\\\\\\"/index/notify\\\\\\\\\\\\\\\",\\\\\\\\n});\\\\\\\\n\\\\\\\\nif (grantNotify === null) {\\\\\\\\n  return;\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst onLike = () => {\\\\\\\\n  if (!context.accountId) {\\\\\\\\n    return;\\\\\\\\n  }\\\\\\\\n\\\\\\\\n  let likeTxn = [\\\\\\\\n    {\\\\\\\\n      contractName: \\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\",\\\\\\\\n      methodName: \\\\\\\\\\\\\\\"add_like\\\\\\\\\\\\\\\",\\\\\\\\n      args: {\\\\\\\\n        post_id: postId,\\\\\\\\n      },\\\\\\\\n      gas: Big(10).pow(14),\\\\\\\\n    },\\\\\\\\n  ];\\\\\\\\n\\\\\\\\n  if (grantNotify === false) {\\\\\\\\n    likeTxn.unshift({\\\\\\\\n      contractName: \\\\\\\\\\\\\\\"social.near\\\\\\\\\\\\\\\",\\\\\\\\n      methodName: \\\\\\\\\\\\\\\"grant_write_permission\\\\\\\\\\\\\\\",\\\\\\\\n      args: {\\\\\\\\n        predecessor_id: \\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\",\\\\\\\\n        keys: [context.accountId + \\\\\\\\\\\\\\\"/index/notify\\\\\\\\\\\\\\\"],\\\\\\\\n      },\\\\\\\\n      gas: Big(10).pow(14),\\\\\\\\n      deposit: Big(10).pow(22),\\\\\\\\n    });\\\\\\\\n  }\\\\\\\\n\\\\\\\\n  Near.call(likeTxn);\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst btnCreatorWidget = (postType, icon, name, desc) => {\\\\\\\\n  return (\\\\\\\\n    <li class=\\\\\\\\\\\\\\\"py-1\\\\\\\\\\\\\\\">\\\\\\\\n      <a\\\\\\\\n        class=\\\\\\\\\\\\\\\"dropdown-item text-decoration-none d-flex align-items-center lh-sm\\\\\\\\\\\\\\\"\\\\\\\\n        style={{ color: \\\\\\\\\\\\\\\"rgb(55,109,137)\\\\\\\\\\\\\\\" }}\\\\\\\\n        role=\\\\\\\\\\\\\\\"button\\\\\\\\\\\\\\\"\\\\\\\\n        onClick={() =>\\\\\\\\n          State.update({ postType, editorType: \\\\\\\\\\\\\\\"CREATE\\\\\\\\\\\\\\\", showEditor: true })\\\\\\\\n        }\\\\\\\\n      >\\\\\\\\n        <i class={`bi ${icon}`} style={{ fontSize: \\\\\\\\\\\\\\\"1.5rem\\\\\\\\\\\\\\\" }}>\\\\\\\\n          {\\\\\\\\\\\\\\\" \\\\\\\\\\\\\\\"}\\\\\\\\n        </i>\\\\\\\\n\\\\\\\\n        <div class=\\\\\\\\\\\\\\\"ps-2 text-wrap\\\\\\\\\\\\\\\" style={{ width: \\\\\\\\\\\\\\\"18rem\\\\\\\\\\\\\\\" }}>\\\\\\\\n          <div>{name}</div>\\\\\\\\n          <small class=\\\\\\\\\\\\\\\"fw-light text-secondary\\\\\\\\\\\\\\\">{desc}</small>\\\\\\\\n        </div>\\\\\\\\n      </a>\\\\\\\\n    </li>\\\\\\\\n  );\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst FooterButtonsContianer = styled.div`\\\\\\\\n  width: 66.66666667%;\\\\\\\\n\\\\\\\\n  @media screen and (max-width: 960px) {\\\\\\\\n    width: 100%;\\\\\\\\n  }\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst buttonsFooter = props.isPreview ? null : (\\\\\\\\n  <div class=\\\\\\\\\\\\\\\"row\\\\\\\\\\\\\\\" key=\\\\\\\\\\\\\\\"buttons-footer\\\\\\\\\\\\\\\">\\\\\\\\n    <FooterButtonsContianer>\\\\\\\\n      <div class=\\\\\\\\\\\\\\\"btn-group\\\\\\\\\\\\\\\" role=\\\\\\\\\\\\\\\"group\\\\\\\\\\\\\\\" aria-label=\\\\\\\\\\\\\\\"Basic outlined example\\\\\\\\\\\\\\\">\\\\\\\\n        <ButtonWithHover\\\\\\\\n          type=\\\\\\\\\\\\\\\"button\\\\\\\\\\\\\\\"\\\\\\\\n          class=\\\\\\\\\\\\\\\"btn d-flex align-items-center\\\\\\\\\\\\\\\"\\\\\\\\n          style={{ border: \\\\\\\\\\\\\\\"0px\\\\\\\\\\\\\\\" }}\\\\\\\\n          onClick={onLike}\\\\\\\\n        >\\\\\\\\n          <i class={`bi ${likeBtnClass}`}> </i>\\\\\\\\n          {post.likes.length == 0 ? (\\\\\\\\n            \\\\\\\\\\\\\\\"Like\\\\\\\\\\\\\\\"\\\\\\\\n          ) : (\\\\\\\\n            <Widget\\\\\\\\n              src=\\\\\\\\\\\\\\\"devhub.near/widget/devhub.components.layout.LikeButton.Faces\\\\\\\\\\\\\\\"\\\\\\\\n              props={{\\\\\\\\n                likesByUsers: Object.fromEntries(\\\\\\\\n                  post.likes.map(({ author_id }) => [author_id, \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\"])\\\\\\\\n                ),\\\\\\\\n              }}\\\\\\\\n            />\\\\\\\\n          )}\\\\\\\\n        </ButtonWithHover>\\\\\\\\n\\\\\\\\n        <div class=\\\\\\\\\\\\\\\"btn-group\\\\\\\\\\\\\\\" role=\\\\\\\\\\\\\\\"group\\\\\\\\\\\\\\\">\\\\\\\\n          <ButtonWithHover\\\\\\\\n            type=\\\\\\\\\\\\\\\"button\\\\\\\\\\\\\\\"\\\\\\\\n            class=\\\\\\\\\\\\\\\"btn\\\\\\\\\\\\\\\"\\\\\\\\n            style={{ border: \\\\\\\\\\\\\\\"0px\\\\\\\\\\\\\\\" }}\\\\\\\\n            data-bs-toggle=\\\\\\\\\\\\\\\"dropdown\\\\\\\\\\\\\\\"\\\\\\\\n            aria-expanded=\\\\\\\\\\\\\\\"false\\\\\\\\\\\\\\\"\\\\\\\\n          >\\\\\\\\n            \\\\\\\\u{21aa} Reply\\\\\\\\n          </ButtonWithHover>\\\\\\\\n          <ul class=\\\\\\\\\\\\\\\"dropdown-menu\\\\\\\\\\\\\\\">\\\\\\\\n            {btnCreatorWidget(\\\\\\\\n              \\\\\\\\\\\\\\\"Idea\\\\\\\\\\\\\\\",\\\\\\\\n              emptyIcons.Idea,\\\\\\\\n              \\\\\\\\\\\\\\\"Idea\\\\\\\\\\\\\\\",\\\\\\\\n              \\\\\\\\\\\\\\\"Get feedback from the community about a problem, opportunity, or need.\\\\\\\\\\\\\\\"\\\\\\\\n            )}\\\\\\\\n            {btnCreatorWidget(\\\\\\\\n              \\\\\\\\\\\\\\\"Solution\\\\\\\\\\\\\\\",\\\\\\\\n              emptyIcons.Solution,\\\\\\\\n              \\\\\\\\\\\\\\\"Solution\\\\\\\\\\\\\\\",\\\\\\\\n              \\\\\\\\\\\\\\\"Provide a specific proposal or implementation to an idea, optionally requesting funding.\\\\\\\\\\\\\\\"\\\\\\\\n            )}\\\\\\\\n            {btnCreatorWidget(\\\\\\\\n              \\\\\\\\\\\\\\\"Attestation\\\\\\\\\\\\\\\",\\\\\\\\n              emptyIcons.Attestation,\\\\\\\\n              \\\\\\\\\\\\\\\"Attestation\\\\\\\\\\\\\\\",\\\\\\\\n              \\\\\\\\\\\\\\\"Formally review or validate a solution as a recognized expert.\\\\\\\\\\\\\\\"\\\\\\\\n            )}\\\\\\\\n            {btnCreatorWidget(\\\\\\\\n              \\\\\\\\\\\\\\\"Sponsorship\\\\\\\\\\\\\\\",\\\\\\\\n              emptyIcons.Sponsorship,\\\\\\\\n              \\\\\\\\\\\\\\\"Sponsorship\\\\\\\\\\\\\\\",\\\\\\\\n              \\\\\\\\\\\\\\\"Offer to fund projects, events, or proposals that match your needs.\\\\\\\\\\\\\\\"\\\\\\\\n            )}\\\\\\\\n            <li>\\\\\\\\n              <hr class=\\\\\\\\\\\\\\\"dropdown-divider\\\\\\\\\\\\\\\" />\\\\\\\\n            </li>\\\\\\\\n            {btnCreatorWidget(\\\\\\\\n              \\\\\\\\\\\\\\\"Comment\\\\\\\\\\\\\\\",\\\\\\\\n              emptyIcons.Comment,\\\\\\\\n              \\\\\\\\\\\\\\\"Comment\\\\\\\\\\\\\\\",\\\\\\\\n              \\\\\\\\\\\\\\\"Ask a question, provide information, or share a resource that is relevant to the thread.\\\\\\\\\\\\\\\"\\\\\\\\n            )}\\\\\\\\n          </ul>\\\\\\\\n        </div>\\\\\\\\n        {childPostIds.length > 0 && (\\\\\\\\n          <ButtonWithHover\\\\\\\\n            type=\\\\\\\\\\\\\\\"button\\\\\\\\\\\\\\\"\\\\\\\\n            class=\\\\\\\\\\\\\\\"btn\\\\\\\\\\\\\\\"\\\\\\\\n            style={{ border: \\\\\\\\\\\\\\\"0px\\\\\\\\\\\\\\\" }}\\\\\\\\n            data-bs-toggle=\\\\\\\\\\\\\\\"collapse\\\\\\\\\\\\\\\"\\\\\\\\n            href={`#collapseChildPosts${postId}`}\\\\\\\\n            aria-expanded={defaultExpanded}\\\\\\\\n            aria-controls={`collapseChildPosts${postId}`}\\\\\\\\n            onClick={() =>\\\\\\\\n              State.update({ expandReplies: !state.expandReplies })\\\\\\\\n            }\\\\\\\\n          >\\\\\\\\n            <i\\\\\\\\n              class={`bi bi-chevron-${state.expandReplies ? \\\\\\\\\\\\\\\"up\\\\\\\\\\\\\\\" : \\\\\\\\\\\\\\\"down\\\\\\\\\\\\\\\"}`}\\\\\\\\n            ></i>{\\\\\\\\\\\\\\\" \\\\\\\\\\\\\\\"}\\\\\\\\n            {`${state.expandReplies ? \\\\\\\\\\\\\\\"Collapse\\\\\\\\\\\\\\\" : \\\\\\\\\\\\\\\"Expand\\\\\\\\\\\\\\\"} Replies (${\\\\\\\\n              childPostIds.length\\\\\\\\n            })`}\\\\\\\\n          </ButtonWithHover>\\\\\\\\n        )}\\\\\\\\n\\\\\\\\n        {isUnderPost || !parentId ? (\\\\\\\\n          <div key=\\\\\\\\\\\\\\\"link-to-parent\\\\\\\\\\\\\\\"></div>\\\\\\\\n        ) : (\\\\\\\\n          <Link\\\\\\\\n            to={href({\\\\\\\\n              widgetSrc: \\\\\\\\\\\\\\\"devhub.near/widget/app\\\\\\\\\\\\\\\",\\\\\\\\n              params: { page: \\\\\\\\\\\\\\\"post\\\\\\\\\\\\\\\", id: parentId },\\\\\\\\n            })}\\\\\\\\n          >\\\\\\\\n            <ButtonWithHover\\\\\\\\n              type=\\\\\\\\\\\\\\\"button\\\\\\\\\\\\\\\"\\\\\\\\n              style={{ border: \\\\\\\\\\\\\\\"0px\\\\\\\\\\\\\\\" }}\\\\\\\\n              className=\\\\\\\\\\\\\\\"btn\\\\\\\\\\\\\\\"\\\\\\\\n              key=\\\\\\\\\\\\\\\"link-to-parent\\\\\\\\\\\\\\\"\\\\\\\\n            >\\\\\\\\n              <i class=\\\\\\\\\\\\\\\"bi bi-arrow-90deg-up\\\\\\\\\\\\\\\"></i>Go to parent\\\\\\\\n            </ButtonWithHover>\\\\\\\\n          </Link>\\\\\\\\n        )}\\\\\\\\n      </div>\\\\\\\\n    </FooterButtonsContianer>\\\\\\\\n  </div>\\\\\\\\n);\\\\\\\\n\\\\\\\\nconst tokenMapping = {\\\\\\\\n  NEAR: \\\\\\\\\\\\\\\"NEAR\\\\\\\\\\\\\\\",\\\\\\\\n  USDT: {\\\\\\\\n    NEP141: {\\\\\\\\n      address: \\\\\\\\\\\\\\\"usdt.tether-token.near\\\\\\\\\\\\\\\",\\\\\\\\n    },\\\\\\\\n  },\\\\\\\\n  USDC: {\\\\\\\\n    NEP141: {\\\\\\\\n      address:\\\\\\\\n        \\\\\\\\\\\\\\\"17208628f84f5d6ad33f0da3bbbeb27ffcb398eac501a31bd6ad2011e36133a1\\\\\\\\\\\\\\\",\\\\\\\\n    },\\\\\\\\n  },\\\\\\\\n  // Add more tokens here as needed\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst reverseTokenMapping = Object.keys(tokenMapping).reduce(\\\\\\\\n  (reverseMap, key) => {\\\\\\\\n    const value = tokenMapping[key];\\\\\\\\n    if (typeof value === \\\\\\\\\\\\\\\"object\\\\\\\\\\\\\\\") {\\\\\\\\n      reverseMap[JSON.stringify(value)] = key;\\\\\\\\n    }\\\\\\\\n    return reverseMap;\\\\\\\\n  },\\\\\\\\n  {}\\\\\\\\n);\\\\\\\\n\\\\\\\\nfunction tokenResolver(token) {\\\\\\\\n  if (typeof token === \\\\\\\\\\\\\\\"string\\\\\\\\\\\\\\\") {\\\\\\\\n    return token;\\\\\\\\n  } else if (typeof token === \\\\\\\\\\\\\\\"object\\\\\\\\\\\\\\\") {\\\\\\\\n    const tokenString = reverseTokenMapping[JSON.stringify(token)];\\\\\\\\n    return tokenString || null;\\\\\\\\n  } else {\\\\\\\\n    return null; // Invalid input\\\\\\\\n  }\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst isDraft =\\\\\\\\n  (draftState?.parent_post_id === postId &&\\\\\\\\n    draftState?.postType === state.postType) ||\\\\\\\\n  (draftState?.edit_post_id === postId &&\\\\\\\\n    draftState?.postType === state.postType);\\\\\\\\n\\\\\\\\nconst toggleEditor = () => {\\\\\\\\n  State.update({ showEditor: !state.showEditor });\\\\\\\\n};\\\\\\\\n\\\\\\\\nlet amount = null;\\\\\\\\nlet token = null;\\\\\\\\nlet supervisor = null;\\\\\\\\n\\\\\\\\nif (state.postType === \\\\\\\\\\\\\\\"Solution\\\\\\\\\\\\\\\") {\\\\\\\\n  const amountMatch = post.snapshot.description.match(\\\\\\\\n    /Requested amount: (\\\\\\\\\\\\\\\\d+(\\\\\\\\\\\\\\\\.\\\\\\\\\\\\\\\\d+)?) (\\\\\\\\\\\\\\\\w+)/\\\\\\\\n  );\\\\\\\\n  amount = amountMatch ? parseFloat(amountMatch[1]) : null;\\\\\\\\n  token = amountMatch ? amountMatch[3] : null;\\\\\\\\n\\\\\\\\n  const sponsorMatch = post.snapshot.description.match(\\\\\\\\n    /Requested sponsor: @([^\\\\\\\\\\\\\\\\s]+)/\\\\\\\\n  );\\\\\\\\n  supervisor = sponsorMatch ? sponsorMatch[1] : null;\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst seekingFunding = amount !== null || token !== null || supervisor !== null;\\\\\\\\n\\\\\\\\nfunction Editor() {\\\\\\\\n  return (\\\\\\\\n    <div class=\\\\\\\\\\\\\\\"row\\\\\\\\\\\\\\\" id={`accordion${postId}`} key=\\\\\\\\\\\\\\\"editors-footer\\\\\\\\\\\\\\\">\\\\\\\\n      <div\\\\\\\\n        key={`${state.postType}${state.editorType}${postId}`}\\\\\\\\n        className={\\\\\\\\\\\\\\\"w-100\\\\\\\\\\\\\\\"}\\\\\\\\n      >\\\\\\\\n        {state.editorType === \\\\\\\\\\\\\\\"CREATE\\\\\\\\\\\\\\\" ? (\\\\\\\\n          <>\\\\\\\\n            <Widget\\\\\\\\n              src={\\\\\\\\\\\\\\\"devhub.near/widget/devhub.entity.post.PostEditor\\\\\\\\\\\\\\\"}\\\\\\\\n              props={{\\\\\\\\n                postType: state.postType,\\\\\\\\n                onDraftStateChange,\\\\\\\\n                draftState:\\\\\\\\n                  draftState?.parent_post_id == postId ? draftState : undefined,\\\\\\\\n                parentId: postId,\\\\\\\\n                mode: \\\\\\\\\\\\\\\"Create\\\\\\\\\\\\\\\",\\\\\\\\n                toggleEditor: toggleEditor,\\\\\\\\n                transactionHashes: props.transactionHashes,\\\\\\\\n              }}\\\\\\\\n            />\\\\\\\\n          </>\\\\\\\\n        ) : (\\\\\\\\n          <>\\\\\\\\n            <Widget\\\\\\\\n              src={\\\\\\\\\\\\\\\"devhub.near/widget/devhub.entity.post.PostEditor\\\\\\\\\\\\\\\"}\\\\\\\\n              props={{\\\\\\\\n                postType: state.postType,\\\\\\\\n                postId,\\\\\\\\n                mode: \\\\\\\\\\\\\\\"Edit\\\\\\\\\\\\\\\",\\\\\\\\n                author_id: post.author_id,\\\\\\\\n                labels: post.snapshot.labels,\\\\\\\\n                name: post.snapshot.name,\\\\\\\\n                description: post.snapshot.description,\\\\\\\\n                amount: post.snapshot.amount || amount,\\\\\\\\n                token: tokenResolver(post.snapshot.sponsorship_token || token),\\\\\\\\n                supervisor:\\\\\\\\n                  post.snapshot.post.snapshot.supervisor || supervisor,\\\\\\\\n                seekingFunding: seekingFunding,\\\\\\\\n                githubLink: post.snapshot.github_link,\\\\\\\\n                onDraftStateChange,\\\\\\\\n                draftState:\\\\\\\\n                  draftState?.edit_post_id == postId ? draftState : undefined,\\\\\\\\n                toggleEditor: toggleEditor,\\\\\\\\n                transactionHashes: props.transactionHashes,\\\\\\\\n              }}\\\\\\\\n            />\\\\\\\\n          </>\\\\\\\\n        )}\\\\\\\\n      </div>\\\\\\\\n    </div>\\\\\\\\n  );\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst renamedPostType =\\\\\\\\n  snapshot.post_type == \\\\\\\\\\\\\\\"Submission\\\\\\\\\\\\\\\" ? \\\\\\\\\\\\\\\"Solution\\\\\\\\\\\\\\\" : snapshot.post_type;\\\\\\\\n\\\\\\\\nconst tags = post.snapshot.labels ? (\\\\\\\\n  <div\\\\\\\\n    class=\\\\\\\\\\\\\\\"card-title d-flex flex-wrap align-items-center\\\\\\\\\\\\\\\"\\\\\\\\n    style={{ margin: \\\\\\\\\\\\\\\"20px 0\\\\\\\\\\\\\\\" }}\\\\\\\\n    key=\\\\\\\\\\\\\\\"post-labels\\\\\\\\\\\\\\\"\\\\\\\\n  >\\\\\\\\n    {post.snapshot.labels.map((tag, idx) => (\\\\\\\\n      <div className=\\\\\\\\\\\\\\\"d-flex align-items-center my-3 me-3\\\\\\\\\\\\\\\">\\\\\\\\n        <Link\\\\\\\\n          to={href({\\\\\\\\n            widgetSrc: \\\\\\\\\\\\\\\"devhub.near/widget/app\\\\\\\\\\\\\\\",\\\\\\\\n            params: { page: \\\\\\\\\\\\\\\"feed\\\\\\\\\\\\\\\", tag: tag },\\\\\\\\n          })}\\\\\\\\n        >\\\\\\\\n          <div\\\\\\\\n            onClick={() => {\\\\\\\\n              if (typeof props.updateTagInParent === \\\\\\\\\\\\\\\"function\\\\\\\\\\\\\\\") {\\\\\\\\n                props.updateTagInParent(tag);\\\\\\\\n              }\\\\\\\\n            }}\\\\\\\\n            className=\\\\\\\\\\\\\\\"d-flex gap-3 align-items-center\\\\\\\\\\\\\\\"\\\\\\\\n            style={{ cursor: \\\\\\\\\\\\\\\"pointer\\\\\\\\\\\\\\\", textDecoration: \\\\\\\\\\\\\\\"none\\\\\\\\\\\\\\\" }}\\\\\\\\n          >\\\\\\\\n            <Widget\\\\\\\\n              src={\\\\\\\\\\\\\\\"devhub.near/widget/devhub.components.atom.Tag\\\\\\\\\\\\\\\"}\\\\\\\\n              props={{\\\\\\\\n                tag,\\\\\\\\n                black: true,\\\\\\\\n              }}\\\\\\\\n            />\\\\\\\\n          </div>\\\\\\\\n        </Link>\\\\\\\\n        {idx !== post.snapshot.labels.length - 1 && (\\\\\\\\n          <span className=\\\\\\\\\\\\\\\"ms-3\\\\\\\\\\\\\\\">\\\\\\\\u{2022}</span>\\\\\\\\n        )}\\\\\\\\n      </div>\\\\\\\\n    ))}\\\\\\\\n  </div>\\\\\\\\n) : (\\\\\\\\n  <div key=\\\\\\\\\\\\\\\"post-labels\\\\\\\\\\\\\\\"></div>\\\\\\\\n);\\\\\\\\n\\\\\\\\nconst Title = styled.h5`\\\\\\\\n  margin: 1rem 0;\\\\\\\\n\\\\\\\\n  color: #151515;\\\\\\\\n  font-size: 1.15rem;\\\\\\\\n  font-style: normal;\\\\\\\\n  font-weight: 700;\\\\\\\\n  line-height: 1.625rem; /* 55.556% */\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst postTitle =\\\\\\\\n  snapshot.post_type == \\\\\\\\\\\\\\\"Comment\\\\\\\\\\\\\\\" ? (\\\\\\\\n    <div key=\\\\\\\\\\\\\\\"post-title\\\\\\\\\\\\\\\"></div>\\\\\\\\n  ) : (\\\\\\\\n    <Title key=\\\\\\\\\\\\\\\"post-title\\\\\\\\\\\\\\\">\\\\\\\\n      {emptyIcons[snapshot.post_type]} {renamedPostType}: {snapshot.name}\\\\\\\\n    </Title>\\\\\\\\n  );\\\\\\\\n\\\\\\\\nconst postExtra =\\\\\\\\n  snapshot.post_type == \\\\\\\\\\\\\\\"Sponsorship\\\\\\\\\\\\\\\" ? (\\\\\\\\n    <div key=\\\\\\\\\\\\\\\"post-extra\\\\\\\\\\\\\\\">\\\\\\\\n      <h6 class=\\\\\\\\\\\\\\\"card-subtitle mb-2 text-muted\\\\\\\\\\\\\\\">\\\\\\\\n        Maximum amount: {snapshot.amount}{\\\\\\\\\\\\\\\" \\\\\\\\\\\\\\\"}\\\\\\\\n        {tokenResolver(snapshot.sponsorship_token)}\\\\\\\\n      </h6>\\\\\\\\n      <h6 class=\\\\\\\\\\\\\\\"card-subtitle mb-2 text-muted\\\\\\\\\\\\\\\">\\\\\\\\n        Supervisor:{\\\\\\\\\\\\\\\" \\\\\\\\\\\\\\\"}\\\\\\\\n        <Widget\\\\\\\\n          src={\\\\\\\\\\\\\\\"neardevgov.near/widget/ProfileLine\\\\\\\\\\\\\\\"}\\\\\\\\n          props={{ accountId: snapshot.supervisor }}\\\\\\\\n        />\\\\\\\\n      </h6>\\\\\\\\n    </div>\\\\\\\\n  ) : (\\\\\\\\n    <div></div>\\\\\\\\n  );\\\\\\\\n\\\\\\\\nconst childPostHasDraft = childPostIds.find(\\\\\\\\n  (childId) =>\\\\\\\\n    childId == draftState?.edit_post_id || childId == draftState?.parent_post_id\\\\\\\\n);\\\\\\\\nif (\\\\\\\\n  (childPostHasDraft || state.childrenOfChildPostsHasDraft) &&\\\\\\\\n  props.expandParent\\\\\\\\n) {\\\\\\\\n  props.expandParent();\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst postsList =\\\\\\\\n  props.isPreview || childPostIds.length == 0 ? (\\\\\\\\n    <div key=\\\\\\\\\\\\\\\"posts-list\\\\\\\\\\\\\\\"></div>\\\\\\\\n  ) : (\\\\\\\\n    <div class=\\\\\\\\\\\\\\\"row\\\\\\\\\\\\\\\" key=\\\\\\\\\\\\\\\"posts-list\\\\\\\\\\\\\\\">\\\\\\\\n      <div\\\\\\\\n        class={`collapse mt-3 ${\\\\\\\\n          defaultExpanded ||\\\\\\\\n          childPostHasDraft ||\\\\\\\\n          state.childrenOfChildPostsHasDraft\\\\\\\\n            ? \\\\\\\\\\\\\\\"show\\\\\\\\\\\\\\\"\\\\\\\\n            : \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\"\\\\\\\\n        }`}\\\\\\\\n        id={`collapseChildPosts${postId}`}\\\\\\\\n      >\\\\\\\\n        {childPostIds.map((childId) => (\\\\\\\\n          <div key={childId} style={{ marginBottom: \\\\\\\\\\\\\\\"0.5rem\\\\\\\\\\\\\\\" }}>\\\\\\\\n            <Widget\\\\\\\\n              src=\\\\\\\\\\\\\\\"devhub.near/widget/devhub.entity.post.Post\\\\\\\\\\\\\\\"\\\\\\\\n              props={{\\\\\\\\n                id: childId,\\\\\\\\n                isUnderPost: true,\\\\\\\\n                onDraftStateChange,\\\\\\\\n                draftState,\\\\\\\\n                expandParent: () =>\\\\\\\\n                  State.update({ childrenOfChildPostsHasDraft: true }),\\\\\\\\n                referral: `subpost${childId}of${postId}`,\\\\\\\\n              }}\\\\\\\\n            />\\\\\\\\n          </div>\\\\\\\\n        ))}\\\\\\\\n      </div>\\\\\\\\n    </div>\\\\\\\\n  );\\\\\\\\n\\\\\\\\nconst LimitedMarkdown = styled.div`\\\\\\\\n  max-height: 20em;\\\\\\\\n`;\\\\\\\\n\\\\\\\\n// Determine if located in the post page.\\\\\\\\nconst isInList = props.isInList;\\\\\\\\nconst contentArray = snapshot.description.split(\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\");\\\\\\\\nconst needClamp = isInList && contentArray.length > 5;\\\\\\\\n\\\\\\\\ninitState({\\\\\\\\n  clamp: needClamp,\\\\\\\\n  expandReplies: defaultExpanded,\\\\\\\\n});\\\\\\\\n\\\\\\\\nconst clampedContent = needClamp\\\\\\\\n  ? contentArray.slice(0, 3).join(\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\")\\\\\\\\n  : snapshot.description;\\\\\\\\n\\\\\\\\n// Should make sure the posts under the currently top viewed post are limited in size.\\\\\\\\nconst descriptionArea = isUnderPost ? (\\\\\\\\n  <LimitedMarkdown className=\\\\\\\\\\\\\\\"overflow-auto\\\\\\\\\\\\\\\" key=\\\\\\\\\\\\\\\"description-area\\\\\\\\\\\\\\\">\\\\\\\\n    {/* {widget(\\\\\\\\\\\\\\\"components.molecule.markdown-viewer\\\\\\\\\\\\\\\", {\\\\\\\\n      text: snapshot.description,\\\\\\\\n    })} */}\\\\\\\\n    <Widget\\\\\\\\n      src={\\\\\\\\\\\\\\\"devhub.near/widget/devhub.components.molecule.MarkdownViewer\\\\\\\\\\\\\\\"}\\\\\\\\n      props={{\\\\\\\\n        text: snapshot.description,\\\\\\\\n      }}\\\\\\\\n    />\\\\\\\\n  </LimitedMarkdown>\\\\\\\\n) : (\\\\\\\\n  <div className=\\\\\\\\\\\\\\\"w-100 overflow-auto\\\\\\\\\\\\\\\">\\\\\\\\n    <div class={state.clamp ? \\\\\\\\\\\\\\\"clamp\\\\\\\\\\\\\\\" : \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\"}>\\\\\\\\n      {/* {widget(\\\\\\\\\\\\\\\"components.molecule.markdown-viewer\\\\\\\\\\\\\\\", {\\\\\\\\n        text: state.clamp ? clampedContent : snapshot.description,\\\\\\\\n      })} */}\\\\\\\\n      <Widget\\\\\\\\n        src={\\\\\\\\\\\\\\\"devhub.near/widget/devhub.components.molecule.MarkdownViewer\\\\\\\\\\\\\\\"}\\\\\\\\n        props={{\\\\\\\\n          text: state.clamp ? clampedContent : snapshot.description,\\\\\\\\n        }}\\\\\\\\n      />\\\\\\\\n    </div>\\\\\\\\n    {state.clamp ? (\\\\\\\\n      <div class=\\\\\\\\\\\\\\\"d-flex justify-content-start\\\\\\\\\\\\\\\">\\\\\\\\n        <a\\\\\\\\n          style={{ cursor: \\\\\\\\\\\\\\\"pointer\\\\\\\\\\\\\\\", color: \\\\\\\\\\\\\\\"#00ec97\\\\\\\\\\\\\\\" }}\\\\\\\\n          class=\\\\\\\\\\\\\\\"btn-link text-dark fw-bold text-decoration-none\\\\\\\\\\\\\\\"\\\\\\\\n          onClick={() => State.update({ clamp: false })}\\\\\\\\n        >\\\\\\\\n          See more\\\\\\\\n        </a>\\\\\\\\n      </div>\\\\\\\\n    ) : (\\\\\\\\n      <></>\\\\\\\\n    )}\\\\\\\\n  </div>\\\\\\\\n);\\\\\\\\n\\\\\\\\nconst timestampElement = (_snapshot) => {\\\\\\\\n  return (\\\\\\\\n    <Link\\\\\\\\n      class=\\\\\\\\\\\\\\\"text-muted\\\\\\\\\\\\\\\"\\\\\\\\n      href={href({\\\\\\\\n        widgetSrc: \\\\\\\\\\\\\\\"devhub.near/widget/app\\\\\\\\\\\\\\\",\\\\\\\\n        params: {\\\\\\\\n          page: \\\\\\\\\\\\\\\"post\\\\\\\\\\\\\\\",\\\\\\\\n          id: postId,\\\\\\\\n          timestamp: _snapshot.timestamp,\\\\\\\\n          compareTimestamp: null,\\\\\\\\n          referral,\\\\\\\\n        },\\\\\\\\n      })}\\\\\\\\n    >\\\\\\\\n      {readableDate(_snapshot.timestamp / 1000000).substring(4)}\\\\\\\\n\\\\\\\\n      <Widget\\\\\\\\n        src=\\\\\\\\\\\\\\\"mob.near/widget/ProfileImage\\\\\\\\\\\\\\\"\\\\\\\\n        props={{\\\\\\\\n          accountId: _snapshot.editor_id,\\\\\\\\n          style: {\\\\\\\\n            width: \\\\\\\\\\\\\\\"1.25em\\\\\\\\\\\\\\\",\\\\\\\\n            height: \\\\\\\\\\\\\\\"1.25em\\\\\\\\\\\\\\\",\\\\\\\\n          },\\\\\\\\n          imageStyle: {\\\\\\\\n            transform: \\\\\\\\\\\\\\\"translateY(-12.5%)\\\\\\\\\\\\\\\",\\\\\\\\n          },\\\\\\\\n        }}\\\\\\\\n      />\\\\\\\\n      {_snapshot.editor_id.substring(0, 8)}\\\\\\\\n    </Link>\\\\\\\\n  );\\\\\\\\n};\\\\\\\\n\\\\\\\\nfunction combineText(_snapshot) {\\\\\\\\n  return (\\\\\\\\n    \\\\\\\\\\\\\\\"## \\\\\\\\\\\\\\\" +\\\\\\\\n    _snapshot.post_type +\\\\\\\\n    \\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\" +\\\\\\\\n    _snapshot.name +\\\\\\\\n    \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\" +\\\\\\\\n    _snapshot.description\\\\\\\\n  );\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst CardContainer = styled.div`\\\\\\\\n  padding: 1.5rem 3rem !important;\\\\\\\\n  border-radius: 16px !important;\\\\\\\\n  border: 1px solid rgba(129, 129, 129, 0.3) !important;\\\\\\\\n  background: #fffefe !important;\\\\\\\\n\\\\\\\\n  @media screen and (max-width: 960px) {\\\\\\\\n    padding: 1rem !important;\\\\\\\\n  }\\\\\\\\n`;\\\\\\\\n\\\\\\\\nreturn (\\\\\\\\n  <CardContainer className={`card ${borders[snapshot.post_type]} attractable`}>\\\\\\\\n    {header}\\\\\\\\n    <div className=\\\\\\\\\\\\\\\"card-body\\\\\\\\\\\\\\\" style={{ padding: 0 }}>\\\\\\\\n      {searchKeywords}\\\\\\\\n      {compareSnapshot ? (\\\\\\\\n        <div\\\\\\\\n          class=\\\\\\\\\\\\\\\"border rounded\\\\\\\\\\\\\\\"\\\\\\\\n          style={{ marginTop: \\\\\\\\\\\\\\\"16px\\\\\\\\\\\\\\\", marginBottom: \\\\\\\\\\\\\\\"16px\\\\\\\\\\\\\\\" }}\\\\\\\\n        >\\\\\\\\n          <div class=\\\\\\\\\\\\\\\"d-flex justify-content-end\\\\\\\\\\\\\\\" style={{ fontSize: \\\\\\\\\\\\\\\"12px\\\\\\\\\\\\\\\" }}>\\\\\\\\n            <div class=\\\\\\\\\\\\\\\"d-flex w-50 justify-content-end mt-1 me-2\\\\\\\\\\\\\\\">\\\\\\\\n              {timestampElement(snapshot)}\\\\\\\\n              {snapshot !== compareSnapshot && (\\\\\\\\n                <>\\\\\\\\n                  <div class=\\\\\\\\\\\\\\\"mx-1 align-self-center\\\\\\\\\\\\\\\">\\\\\\\\n                    <i class=\\\\\\\\\\\\\\\"bi bi-file-earmark-diff\\\\\\\\\\\\\\\" />\\\\\\\\n                  </div>\\\\\\\\n                  {timestampElement(compareSnapshot)}\\\\\\\\n                </>\\\\\\\\n              )}\\\\\\\\n            </div>\\\\\\\\n          </div>\\\\\\\\n          <div className=\\\\\\\\\\\\\\\"w-100 overflow-auto\\\\\\\\\\\\\\\">\\\\\\\\n            <Widget\\\\\\\\n              src=\\\\\\\\\\\\\\\"markeljan.near/widget/MarkdownDiff\\\\\\\\\\\\\\\"\\\\\\\\n              props={{\\\\\\\\n                post: post,\\\\\\\\n                currentCode: combineText(\\\\\\\\n                  swapTimestamps ? compareSnapshot : snapshot\\\\\\\\n                ),\\\\\\\\n                prevCode: combineText(\\\\\\\\n                  swapTimestamps ? snapshot : compareSnapshot\\\\\\\\n                ),\\\\\\\\n                showLineNumber: true,\\\\\\\\n              }}\\\\\\\\n            />\\\\\\\\n          </div>\\\\\\\\n        </div>\\\\\\\\n      ) : (\\\\\\\\n        <>\\\\\\\\n          {postTitle}\\\\\\\\n          {postExtra}\\\\\\\\n          {descriptionArea}\\\\\\\\n        </>\\\\\\\\n      )}\\\\\\\\n      {tags}\\\\\\\\n      {buttonsFooter}\\\\\\\\n      {!props.isPreview && (isDraft || state.showEditor) && <Editor />}\\\\\\\\n      {postsList}\\\\\\\\n    </div>\\\\\\\\n  </CardContainer>\\\\\\\\n);\\\\\\\\n\"}, \"devhub.entity.post.draft\": {\"\": \"const DRAFT_STATE_STORAGE_KEY = \\\\\\\\\\\\\\\"POST_DRAFT_STATE\\\\\\\\\\\\\\\";\\\\\\\\n\\\\\\\\nconst onDraftStateChange = (draftState) =>\\\\\\\\n  Storage.privateSet(DRAFT_STATE_STORAGE_KEY, JSON.stringify(draftState));\\\\\\\\nlet draftState;\\\\\\\\ntry {\\\\\\\\n  draftState = JSON.parse(Storage.privateGet(DRAFT_STATE_STORAGE_KEY));\\\\\\\\n} catch (e) {}\\\\\\\\n\\\\\\\\nreturn { DRAFT_STATE_STORAGE_KEY, draftState, onDraftStateChange };\\\\\\\\n\"}, \"devhub.entity.post.PostEditor\": {\"\": \"const cleanDescription = (description) => {\\\\\\\\n  return description\\\\\\\\n    ? description.replace(\\\\\\\\n        /###### Requested amount: .+?\\\\\\\\\\\\\\\\n###### Requested sponsor: @[^\\\\\\\\\\\\\\\\s]+\\\\\\\\\\\\\\\\n/g,\\\\\\\\n        \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\"\\\\\\\\n      )\\\\\\\\n    : description;\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst postType = props.postType ?? \\\\\\\\\\\\\\\"Sponsorship\\\\\\\\\\\\\\\";\\\\\\\\nconst parentId = props.parentId ?? null;\\\\\\\\nconst postId = props.postId ?? null;\\\\\\\\nconst mode = props.mode ?? \\\\\\\\\\\\\\\"Create\\\\\\\\\\\\\\\";\\\\\\\\nconst toggleEditor = props.toggleEditor;\\\\\\\\nconst referralLabels = props.referral ? [`referral:${props.referral}`] : [];\\\\\\\\nconst labelStrings = (props.labels ?? []).concat(referralLabels);\\\\\\\\n\\\\\\\\nconst labels = labelStrings.map((s) => {\\\\\\\\n  return { name: s };\\\\\\\\n});\\\\\\\\n\\\\\\\\ninitState({\\\\\\\\n  seekingFunding: props.seekingFunding ?? false,\\\\\\\\n  author_id: context.accountId,\\\\\\\\n  // Should be a list of objects with field \\\\\\\\\\\\\\\"name\\\\\\\\\\\\\\\".\\\\\\\\n  labels,\\\\\\\\n  // Should be a list of labels as strings.\\\\\\\\n  // Both of the label structures should be modified together.\\\\\\\\n  labelStrings: [],\\\\\\\\n  postType,\\\\\\\\n  name: props.name ?? \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\",\\\\\\\\n  description:\\\\\\\\n    (props.postType === \\\\\\\\\\\\\\\"Solution\\\\\\\\\\\\\\\"\\\\\\\\n      ? cleanDescription(props.description)\\\\\\\\n      : props.description) ?? \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\",\\\\\\\\n  amount: props.amount ?? \\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\n  token: props.token ?? \\\\\\\\\\\\\\\"USDT\\\\\\\\\\\\\\\",\\\\\\\\n  supervisor: props.supervisor ?? \\\\\\\\\\\\\\\"neardevdao.near\\\\\\\\\\\\\\\",\\\\\\\\n  githubLink: props.githubLink ?? \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\",\\\\\\\\n  warning: \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\",\\\\\\\\n  draftStateApplied: false,\\\\\\\\n  mentionInput: \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\", // text next to @ tag\\\\\\\\n  mentionsArray: [], // all the mentions in the description\\\\\\\\n});\\\\\\\\n\\\\\\\\n/* INCLUDE: \\\\\\\\\\\\\\\"core/lib/autocomplete\\\\\\\\\\\\\\\" */\\\\\\\\nconst autocompleteEnabled = true;\\\\\\\\n\\\\\\\\nconst AutoComplete = styled.div`\\\\\\\\n  z-index: 5;\\\\\\\\n\\\\\\\\n  > div > div {\\\\\\\\n    padding: calc(var(--padding) / 2);\\\\\\\\n  }\\\\\\\\n`;\\\\\\\\n\\\\\\\\nif (props.transactionHashes) {\\\\\\\\n  const transaction = useCache(\\\\\\\\n    () =>\\\\\\\\n      asyncFetch(\\\\\\\\\\\\\\\"https://rpc.mainnet.near.org\\\\\\\\\\\\\\\", {\\\\\\\\n        method: \\\\\\\\\\\\\\\"POST\\\\\\\\\\\\\\\",\\\\\\\\n        headers: {\\\\\\\\n          \\\\\\\\\\\\\\\"content-type\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"application/json\\\\\\\\\\\\\\\",\\\\\\\\n        },\\\\\\\\n        body: JSON.stringify({\\\\\\\\n          jsonrpc: \\\\\\\\\\\\\\\"2.0\\\\\\\\\\\\\\\",\\\\\\\\n          id: \\\\\\\\\\\\\\\"dontcare\\\\\\\\\\\\\\\",\\\\\\\\n          method: \\\\\\\\\\\\\\\"tx\\\\\\\\\\\\\\\",\\\\\\\\n          params: [props.transactionHashes, context.accountId],\\\\\\\\n        }),\\\\\\\\n      }).then((res) => res),\\\\\\\\n    props.transactionHashes + context.accountId,\\\\\\\\n    { subscribe: false }\\\\\\\\n  );\\\\\\\\n\\\\\\\\n  if (transaction !== null) {\\\\\\\\n    const transaction_method_name =\\\\\\\\n      transaction?.body?.result?.transaction?.actions[0].FunctionCall\\\\\\\\n        .method_name;\\\\\\\\n\\\\\\\\n    const is_edit_or_add_post_transaction =\\\\\\\\n      transaction_method_name == \\\\\\\\\\\\\\\"add_post\\\\\\\\\\\\\\\" ||\\\\\\\\n      transaction_method_name == \\\\\\\\\\\\\\\"edit_post\\\\\\\\\\\\\\\";\\\\\\\\n\\\\\\\\n    if (is_edit_or_add_post_transaction) {\\\\\\\\n      props.onDraftStateChange(null);\\\\\\\\n    }\\\\\\\\n  }\\\\\\\\n}\\\\\\\\n\\\\\\\\nfunction textareaInputHandler(value) {\\\\\\\\n  const words = value.split(/\\\\\\\\\\\\\\\\s+/);\\\\\\\\n  const allMentiones = words\\\\\\\\n    .filter((word) => word.startsWith(\\\\\\\\\\\\\\\"@\\\\\\\\\\\\\\\"))\\\\\\\\n    .map((mention) => mention.slice(1));\\\\\\\\n  const newMentiones = allMentiones.filter(\\\\\\\\n    (item) => !state.mentionsArray.includes(item)\\\\\\\\n  );\\\\\\\\n\\\\\\\\n  State.update((lastKnownState) => ({\\\\\\\\n    ...lastKnownState,\\\\\\\\n    text: value,\\\\\\\\n    showAccountAutocomplete: newMentiones?.length > 0,\\\\\\\\n    mentionsArray: allMentiones,\\\\\\\\n    mentionInput: newMentiones?.[0] ?? \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\",\\\\\\\\n  }));\\\\\\\\n}\\\\\\\\n\\\\\\\\nfunction autoCompleteAccountId(id) {\\\\\\\\n  // to make sure we update the @ at correct index\\\\\\\\n  let currentIndex = 0;\\\\\\\\n  const updatedDescription = state.description.replace(\\\\\\\\n    /(?:^|\\\\\\\\\\\\\\\\s)(@[^\\\\\\\\\\\\\\\\s]*)/g,\\\\\\\\n    (match) => {\\\\\\\\n      if (currentIndex === state.mentionsArray.indexOf(state.mentionInput)) {\\\\\\\\n        currentIndex++;\\\\\\\\n        return ` @${id}`;\\\\\\\\n      } else {\\\\\\\\n        currentIndex++;\\\\\\\\n        return match;\\\\\\\\n      }\\\\\\\\n    }\\\\\\\\n  );\\\\\\\\n  State.update((lastKnownState) => ({\\\\\\\\n    ...lastKnownState,\\\\\\\\n    handler: \\\\\\\\\\\\\\\"autocompleteSelected\\\\\\\\\\\\\\\",\\\\\\\\n    description: updatedDescription,\\\\\\\\n    showAccountAutocomplete: false,\\\\\\\\n  }));\\\\\\\\n}\\\\\\\\n\\\\\\\\n/* END_INCLUDE: \\\\\\\\\\\\\\\"core/lib/autocomplete\\\\\\\\\\\\\\\" */\\\\\\\\n\\\\\\\\nif (!state.draftStateApplied && props.draftState) {\\\\\\\\n  State.update({ ...props.draftState, draftStateApplied: true });\\\\\\\\n}\\\\\\\\n\\\\\\\\nlet fields = {\\\\\\\\n  Comment: [\\\\\\\\\\\\\\\"description\\\\\\\\\\\\\\\"],\\\\\\\\n  Idea: [\\\\\\\\\\\\\\\"name\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"description\\\\\\\\\\\\\\\"],\\\\\\\\n  Solution: [\\\\\\\\\\\\\\\"name\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"description\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"fund_raising\\\\\\\\\\\\\\\"],\\\\\\\\n  Attestation: [\\\\\\\\\\\\\\\"name\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"description\\\\\\\\\\\\\\\"],\\\\\\\\n  Sponsorship: [\\\\\\\\n    \\\\\\\\\\\\\\\"name\\\\\\\\\\\\\\\",\\\\\\\\n    \\\\\\\\\\\\\\\"description\\\\\\\\\\\\\\\",\\\\\\\\n    \\\\\\\\\\\\\\\"amount\\\\\\\\\\\\\\\",\\\\\\\\n    \\\\\\\\\\\\\\\"sponsorship_token\\\\\\\\\\\\\\\",\\\\\\\\n    \\\\\\\\\\\\\\\"supervisor\\\\\\\\\\\\\\\",\\\\\\\\n  ],\\\\\\\\n  Github: [\\\\\\\\\\\\\\\"githubLink\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"name\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"description\\\\\\\\\\\\\\\"],\\\\\\\\n}[postType];\\\\\\\\n\\\\\\\\n// This must be outside onClick, because Near.view returns null at first, and when the view call finished, it returns true/false.\\\\\\\\n// If checking this inside onClick, it will give `null` and we cannot tell the result is true or false.\\\\\\\\nlet grantNotify = Near.view(\\\\\\\\\\\\\\\"social.near\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"is_write_permission_granted\\\\\\\\\\\\\\\", {\\\\\\\\n  predecessor_id: \\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\",\\\\\\\\n  key: context.accountId + \\\\\\\\\\\\\\\"/index/notify\\\\\\\\\\\\\\\",\\\\\\\\n});\\\\\\\\nif (grantNotify === null) {\\\\\\\\n  return;\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst tokenMapping = {\\\\\\\\n  NEAR: \\\\\\\\\\\\\\\"NEAR\\\\\\\\\\\\\\\",\\\\\\\\n  USDT: {\\\\\\\\n    NEP141: {\\\\\\\\n      address: \\\\\\\\\\\\\\\"usdt.tether-token.near\\\\\\\\\\\\\\\",\\\\\\\\n    },\\\\\\\\n  },\\\\\\\\n  USDC: {\\\\\\\\n    NEP141: {\\\\\\\\n      address:\\\\\\\\n        \\\\\\\\\\\\\\\"17208628f84f5d6ad33f0da3bbbeb27ffcb398eac501a31bd6ad2011e36133a1\\\\\\\\\\\\\\\",\\\\\\\\n    },\\\\\\\\n  },\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst onSubmit = () => {\\\\\\\\n  let labels = state.labelStrings;\\\\\\\\n  var body = {\\\\\\\\n    Comment: { description: state.description, comment_version: \\\\\\\\\\\\\\\"V2\\\\\\\\\\\\\\\" },\\\\\\\\n    Idea: {\\\\\\\\n      name: state.name,\\\\\\\\n      description: state.description,\\\\\\\\n      idea_version: \\\\\\\\\\\\\\\"V1\\\\\\\\\\\\\\\",\\\\\\\\n    },\\\\\\\\n    Solution: {\\\\\\\\n      name: state.name,\\\\\\\\n      description: generateDescription(\\\\\\\\n        state.description,\\\\\\\\n        state.amount,\\\\\\\\n        state.token,\\\\\\\\n        state.supervisor,\\\\\\\\n        state.seekingFunding\\\\\\\\n      ),\\\\\\\\n      solution_version: \\\\\\\\\\\\\\\"V1\\\\\\\\\\\\\\\",\\\\\\\\n    },\\\\\\\\n    Attestation: {\\\\\\\\n      name: state.name,\\\\\\\\n      description: state.description,\\\\\\\\n      attestation_version: \\\\\\\\\\\\\\\"V1\\\\\\\\\\\\\\\",\\\\\\\\n    },\\\\\\\\n    Sponsorship: {\\\\\\\\n      name: state.name,\\\\\\\\n      description: state.description,\\\\\\\\n      amount: state.amount,\\\\\\\\n      sponsorship_token: tokenMapping[state.token],\\\\\\\\n      supervisor: state.supervisor,\\\\\\\\n      sponsorship_version: \\\\\\\\\\\\\\\"V1\\\\\\\\\\\\\\\",\\\\\\\\n    },\\\\\\\\n    Github: {\\\\\\\\n      name: state.name,\\\\\\\\n      description: state.description,\\\\\\\\n      github_version: \\\\\\\\\\\\\\\"V0\\\\\\\\\\\\\\\",\\\\\\\\n      github_link: state.githubLink,\\\\\\\\n    },\\\\\\\\n  }[postType];\\\\\\\\n  body[\\\\\\\\\\\\\\\"post_type\\\\\\\\\\\\\\\"] = postType;\\\\\\\\n  if (!context.accountId) {\\\\\\\\n    return;\\\\\\\\n  }\\\\\\\\n  let txn = [];\\\\\\\\n  if (mode == \\\\\\\\\\\\\\\"Create\\\\\\\\\\\\\\\") {\\\\\\\\n    props.onDraftStateChange(\\\\\\\\n      Object.assign({}, state, { parent_post_id: parentId })\\\\\\\\n    );\\\\\\\\n    txn.push({\\\\\\\\n      contractName: \\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\",\\\\\\\\n      methodName: \\\\\\\\\\\\\\\"add_post\\\\\\\\\\\\\\\",\\\\\\\\n      args: {\\\\\\\\n        parent_id: parentId,\\\\\\\\n        labels,\\\\\\\\n        body,\\\\\\\\n      },\\\\\\\\n      gas: Big(10).pow(14),\\\\\\\\n    });\\\\\\\\n  } else if (mode == \\\\\\\\\\\\\\\"Edit\\\\\\\\\\\\\\\") {\\\\\\\\n    props.onDraftStateChange(\\\\\\\\n      Object.assign({}, state, { edit_post_id: postId })\\\\\\\\n    );\\\\\\\\n    txn.push({\\\\\\\\n      contractName: \\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\",\\\\\\\\n      methodName: \\\\\\\\\\\\\\\"edit_post\\\\\\\\\\\\\\\",\\\\\\\\n      args: {\\\\\\\\n        id: postId,\\\\\\\\n        labels,\\\\\\\\n        body,\\\\\\\\n      },\\\\\\\\n      gas: Big(10).pow(14),\\\\\\\\n    });\\\\\\\\n  }\\\\\\\\n  if (mode == \\\\\\\\\\\\\\\"Create\\\\\\\\\\\\\\\" || mode == \\\\\\\\\\\\\\\"Edit\\\\\\\\\\\\\\\") {\\\\\\\\n    if (grantNotify === false) {\\\\\\\\n      txn.unshift({\\\\\\\\n        contractName: \\\\\\\\\\\\\\\"social.near\\\\\\\\\\\\\\\",\\\\\\\\n        methodName: \\\\\\\\\\\\\\\"grant_write_permission\\\\\\\\\\\\\\\",\\\\\\\\n        args: {\\\\\\\\n          predecessor_id: \\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\",\\\\\\\\n          keys: [context.accountId + \\\\\\\\\\\\\\\"/index/notify\\\\\\\\\\\\\\\"],\\\\\\\\n        },\\\\\\\\n        gas: Big(10).pow(14),\\\\\\\\n        deposit: Big(10).pow(22),\\\\\\\\n      });\\\\\\\\n    }\\\\\\\\n    Near.call(txn);\\\\\\\\n  }\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst normalizeLabel = (label) =>\\\\\\\\n  label\\\\\\\\n    .replaceAll(/[- \\\\\\\\\\\\\\\\.]/g, \\\\\\\\\\\\\\\"_\\\\\\\\\\\\\\\")\\\\\\\\n    .replaceAll(/[^\\\\\\\\\\\\\\\\w]+/g, \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\")\\\\\\\\n    .replaceAll(/_+/g, \\\\\\\\\\\\\\\"-\\\\\\\\\\\\\\\")\\\\\\\\n    .replace(/^-+/, \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\")\\\\\\\\n    .replace(/-+$/, \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\")\\\\\\\\n    .toLowerCase()\\\\\\\\n    .trim(\\\\\\\\\\\\\\\"-\\\\\\\\\\\\\\\");\\\\\\\\n\\\\\\\\nconst checkLabel = (label) => {\\\\\\\\n  Near.asyncView(\\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"is_allowed_to_use_labels\\\\\\\\\\\\\\\", {\\\\\\\\n    editor: context.accountId,\\\\\\\\n    labels: [label],\\\\\\\\n  }).then((allowed) => {\\\\\\\\n    if (allowed) {\\\\\\\\n      State.update({ warning: \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\" });\\\\\\\\n    } else {\\\\\\\\n      State.update({\\\\\\\\n        warning:\\\\\\\\n          \\\\\\\\\\\\'The label \\\\\\\\\\\\\\\"\\\\\\\\\\\\' +\\\\\\\\n          label +\\\\\\\\n          \\\\\\\\\\\\'\\\\\\\\\\\\\\\" is protected and can only be added by moderators\\\\\\\\\\\\',\\\\\\\\n      });\\\\\\\\n      return;\\\\\\\\n    }\\\\\\\\n  });\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst setLabels = (labels) => {\\\\\\\\n  labels = labels.map((o) => {\\\\\\\\n    o.name = normalizeLabel(o.name);\\\\\\\\n    return o;\\\\\\\\n  });\\\\\\\\n  if (labels.length < state.labels.length) {\\\\\\\\n    let oldLabels = new Set(state.labels.map((label) => label.name));\\\\\\\\n    for (let label of labels) {\\\\\\\\n      oldLabels.delete(label.name);\\\\\\\\n    }\\\\\\\\n    let removed = oldLabels.values().next().value;\\\\\\\\n    Near.asyncView(\\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"is_allowed_to_use_labels\\\\\\\\\\\\\\\", {\\\\\\\\n      editor: context.accountId,\\\\\\\\n      labels: [removed],\\\\\\\\n    }).then((allowed) => {\\\\\\\\n      if (allowed) {\\\\\\\\n        let labelStrings = labels.map(({ name }) => name);\\\\\\\\n        State.update({ labels, labelStrings });\\\\\\\\n      } else {\\\\\\\\n        State.update({\\\\\\\\n          warning:\\\\\\\\n            \\\\\\\\\\\\'The label \\\\\\\\\\\\\\\"\\\\\\\\\\\\' +\\\\\\\\n            removed +\\\\\\\\n            \\\\\\\\\\\\'\\\\\\\\\\\\\\\" is protected and can only be updated by moderators\\\\\\\\\\\\',\\\\\\\\n        });\\\\\\\\n        return;\\\\\\\\n      }\\\\\\\\n    });\\\\\\\\n  } else {\\\\\\\\n    let labelStrings = labels.map((o) => {\\\\\\\\n      return o.name;\\\\\\\\n    });\\\\\\\\n    State.update({ labels, labelStrings });\\\\\\\\n  }\\\\\\\\n};\\\\\\\\nconst existingLabelStrings =\\\\\\\\n  Near.view(\\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"get_all_allowed_labels\\\\\\\\\\\\\\\", {\\\\\\\\n    editor: context.accountId,\\\\\\\\n  }) ?? [];\\\\\\\\nconst existingLabelSet = new Set(existingLabelStrings);\\\\\\\\nconst existingLabels = existingLabelStrings\\\\\\\\n  .filter((it) => it !== \\\\\\\\\\\\\\\"blog\\\\\\\\\\\\\\\") // remove blog label so users cannot publish blogs from feed\\\\\\\\n  .map((s) => {\\\\\\\\n    return { name: s };\\\\\\\\n  });\\\\\\\\n\\\\\\\\nconst labelEditor = (\\\\\\\\n  <div className=\\\\\\\\\\\\\\\"col-lg-12  mb-2\\\\\\\\\\\\\\\">\\\\\\\\n    Labels:\\\\\\\\n    <Typeahead\\\\\\\\n      multiple\\\\\\\\n      labelKey=\\\\\\\\\\\\\\\"name\\\\\\\\\\\\\\\"\\\\\\\\n      onInputChange={checkLabel}\\\\\\\\n      onChange={setLabels}\\\\\\\\n      options={existingLabels}\\\\\\\\n      placeholder=\\\\\\\\\\\\\\\"near.social, widget, NEP, standard, protocol, tool\\\\\\\\\\\\\\\"\\\\\\\\n      selected={state.labels}\\\\\\\\n      positionFixed\\\\\\\\n      allowNew={(results, props) => {\\\\\\\\n        return (\\\\\\\\n          !existingLabelSet.has(props.text) &&\\\\\\\\n          props.text.toLowerCase() !== \\\\\\\\\\\\\\\"blog\\\\\\\\\\\\\\\" && // dont allow adding \\\\\\\\\\\\\\\"Blog\\\\\\\\\\\\\\\"\\\\\\\\n          props.selected.filter((selected) => selected.name === props.text)\\\\\\\\n            .length == 0 &&\\\\\\\\n          Near.view(\\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"is_allowed_to_use_labels\\\\\\\\\\\\\\\", {\\\\\\\\n            editor: context.accountId,\\\\\\\\n            labels: [props.text],\\\\\\\\n          })\\\\\\\\n        );\\\\\\\\n      }}\\\\\\\\n    />\\\\\\\\n  </div>\\\\\\\\n);\\\\\\\\n\\\\\\\\nconst githubLinkDiv = (\\\\\\\\n  <div className=\\\\\\\\\\\\\\\"col-lg-12  mb-2\\\\\\\\\\\\\\\">\\\\\\\\n    Github Issue URL:\\\\\\\\n    <input\\\\\\\\n      type=\\\\\\\\\\\\\\\"text\\\\\\\\\\\\\\\"\\\\\\\\n      value={state.githubLink}\\\\\\\\n      onChange={(event) => State.update({ githubLink: event.target.value })}\\\\\\\\n    />\\\\\\\\n  </div>\\\\\\\\n);\\\\\\\\n\\\\\\\\nconst nameDiv = (\\\\\\\\n  <div className=\\\\\\\\\\\\\\\"col-lg-6  mb-2\\\\\\\\\\\\\\\">\\\\\\\\n    Title:\\\\\\\\n    <input\\\\\\\\n      type=\\\\\\\\\\\\\\\"text\\\\\\\\\\\\\\\"\\\\\\\\n      value={state.name}\\\\\\\\n      onChange={(event) => State.update({ name: event.target.value })}\\\\\\\\n    />\\\\\\\\n  </div>\\\\\\\\n);\\\\\\\\n\\\\\\\\nconst amountDiv = (\\\\\\\\n  <div className=\\\\\\\\\\\\\\\"col-lg-6  mb-2\\\\\\\\\\\\\\\">\\\\\\\\n    Amount:\\\\\\\\n    <input\\\\\\\\n      type=\\\\\\\\\\\\\\\"text\\\\\\\\\\\\\\\"\\\\\\\\n      value={state.amount}\\\\\\\\n      onChange={(event) => State.update({ amount: event.target.value })}\\\\\\\\n    />\\\\\\\\n  </div>\\\\\\\\n);\\\\\\\\n\\\\\\\\nconst tokenDiv = (\\\\\\\\n  <div className=\\\\\\\\\\\\\\\"col-lg-6 mb-2\\\\\\\\\\\\\\\">\\\\\\\\n    Currency\\\\\\\\n    <select\\\\\\\\n      onChange={(event) => State.update({ token: event.target.value })}\\\\\\\\n      class=\\\\\\\\\\\\\\\"form-select\\\\\\\\\\\\\\\"\\\\\\\\n      aria-label=\\\\\\\\\\\\\\\"Select currency\\\\\\\\\\\\\\\"\\\\\\\\n      value={state.token}\\\\\\\\n    >\\\\\\\\n      <option value=\\\\\\\\\\\\\\\"USDT\\\\\\\\\\\\\\\">USDT</option>\\\\\\\\n      <option value=\\\\\\\\\\\\\\\"NEAR\\\\\\\\\\\\\\\">NEAR</option>\\\\\\\\n      <option value=\\\\\\\\\\\\\\\"USDC\\\\\\\\\\\\\\\">USDC</option>\\\\\\\\n    </select>\\\\\\\\n  </div>\\\\\\\\n);\\\\\\\\n\\\\\\\\nconst supervisorDiv = (\\\\\\\\n  <div className=\\\\\\\\\\\\\\\"col-lg-6 mb-2\\\\\\\\\\\\\\\">\\\\\\\\n    Supervisor:\\\\\\\\n    <input\\\\\\\\n      type=\\\\\\\\\\\\\\\"text\\\\\\\\\\\\\\\"\\\\\\\\n      value={state.supervisor}\\\\\\\\n      onChange={(event) => State.update({ supervisor: event.target.value })}\\\\\\\\n    />\\\\\\\\n  </div>\\\\\\\\n);\\\\\\\\n\\\\\\\\nconst callDescriptionDiv = () => {\\\\\\\\n  return (\\\\\\\\n    <div className=\\\\\\\\\\\\\\\"col-lg-12  mb-2\\\\\\\\\\\\\\\">\\\\\\\\n      Description:\\\\\\\\n      <br />\\\\\\\\n      <Widget\\\\\\\\n        src={\\\\\\\\\\\\\\\"devhub.near/widget/devhub.components.molecule.MarkdownEditor\\\\\\\\\\\\\\\"}\\\\\\\\n        props={{\\\\\\\\n          data: { handler: state.handler, content: state.description },\\\\\\\\n          onChange: (content) => {\\\\\\\\n            State.update({ description: content, handler: \\\\\\\\\\\\\\\"update\\\\\\\\\\\\\\\" });\\\\\\\\n            textareaInputHandler(content);\\\\\\\\n          },\\\\\\\\n        }}\\\\\\\\n      />\\\\\\\\n      {autocompleteEnabled && state.showAccountAutocomplete && (\\\\\\\\n        <AutoComplete>\\\\\\\\n          <Widget\\\\\\\\n            src=\\\\\\\\\\\\\\\"devhub.near/widget/devhub.components.molecule.AccountAutocomplete\\\\\\\\\\\\\\\"\\\\\\\\n            props={{\\\\\\\\n              term: state.mentionInput,\\\\\\\\n              onSelect: autoCompleteAccountId,\\\\\\\\n              onClose: () => State.update({ showAccountAutocomplete: false }),\\\\\\\\n            }}\\\\\\\\n          />\\\\\\\\n        </AutoComplete>\\\\\\\\n      )}\\\\\\\\n    </div>\\\\\\\\n  );\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst disclaimer = (\\\\\\\\n  <p>\\\\\\\\n    <i>\\\\\\\\n      * Note, all projects that were granted sponsorships are required to pass\\\\\\\\n      KYC to receive the funding.\\\\\\\\n    </i>\\\\\\\\n  </p>\\\\\\\\n);\\\\\\\\n\\\\\\\\nconst isFundraisingDiv = (\\\\\\\\n  // This is jank with just btns and not radios. But the radios were glitchy af\\\\\\\\n  <>\\\\\\\\n    <div class=\\\\\\\\\\\\\\\"mb-2\\\\\\\\\\\\\\\">\\\\\\\\n      <p class=\\\\\\\\\\\\\\\"fs-6 fw-bold mb-1\\\\\\\\\\\\\\\">\\\\\\\\n        Are you seeking funding for your solution?\\\\\\\\n        <span class=\\\\\\\\\\\\\\\"text-muted fw-normal\\\\\\\\\\\\\\\">(Optional)</span>\\\\\\\\n      </p>\\\\\\\\n      <div class=\\\\\\\\\\\\\\\"form-check form-check-inline\\\\\\\\\\\\\\\">\\\\\\\\n        <label class=\\\\\\\\\\\\\\\"form-check-label\\\\\\\\\\\\\\\">\\\\\\\\n          <button\\\\\\\\n            className=\\\\\\\\\\\\\\\"btn btn-light p-0\\\\\\\\\\\\\\\"\\\\\\\\n            style={{\\\\\\\\n              backgroundColor: state.seekingFunding ? \\\\\\\\\\\\\\\"#0C7283\\\\\\\\\\\\\\\" : \\\\\\\\\\\\\\\"inherit\\\\\\\\\\\\\\\",\\\\\\\\n              color: \\\\\\\\\\\\\\\"#f3f3f3\\\\\\\\\\\\\\\",\\\\\\\\n              border: \\\\\\\\\\\\\\\"solid #D9D9D9\\\\\\\\\\\\\\\",\\\\\\\\n              borderRadius: \\\\\\\\\\\\\\\"100%\\\\\\\\\\\\\\\",\\\\\\\\n              height: \\\\\\\\\\\\\\\"20px\\\\\\\\\\\\\\\",\\\\\\\\n              width: \\\\\\\\\\\\\\\"20px\\\\\\\\\\\\\\\",\\\\\\\\n            }}\\\\\\\\n            onClick={() => State.update({ seekingFunding: true })}\\\\\\\\n          />\\\\\\\\n          Yes\\\\\\\\n        </label>\\\\\\\\n      </div>\\\\\\\\n      <div class=\\\\\\\\\\\\\\\"form-check form-check-inline\\\\\\\\\\\\\\\">\\\\\\\\n        <label class=\\\\\\\\\\\\\\\"form-check-label\\\\\\\\\\\\\\\">\\\\\\\\n          <button\\\\\\\\n            className=\\\\\\\\\\\\\\\"btn btn-light p-0\\\\\\\\\\\\\\\"\\\\\\\\n            style={{\\\\\\\\n              backgroundColor: !state.seekingFunding ? \\\\\\\\\\\\\\\"#0C7283\\\\\\\\\\\\\\\" : \\\\\\\\\\\\\\\"inherit\\\\\\\\\\\\\\\",\\\\\\\\n              color: \\\\\\\\\\\\\\\"#f3f3f3\\\\\\\\\\\\\\\",\\\\\\\\n              border: \\\\\\\\\\\\\\\"solid #D9D9D9\\\\\\\\\\\\\\\",\\\\\\\\n              borderRadius: \\\\\\\\\\\\\\\"100%\\\\\\\\\\\\\\\",\\\\\\\\n              height: \\\\\\\\\\\\\\\"20px\\\\\\\\\\\\\\\",\\\\\\\\n              width: \\\\\\\\\\\\\\\"20px\\\\\\\\\\\\\\\",\\\\\\\\n            }}\\\\\\\\n            onClick={() => State.update({ seekingFunding: false })}\\\\\\\\n          />\\\\\\\\n          No\\\\\\\\n        </label>\\\\\\\\n      </div>\\\\\\\\n    </div>\\\\\\\\n  </>\\\\\\\\n);\\\\\\\\n\\\\\\\\nconst fundraisingDiv = (\\\\\\\\n  <div class=\\\\\\\\\\\\\\\"d-flex flex-column mb-2\\\\\\\\\\\\\\\">\\\\\\\\n    <div className=\\\\\\\\\\\\\\\"col-lg-6 mb-2\\\\\\\\\\\\\\\">\\\\\\\\n      Currency\\\\\\\\n      <select\\\\\\\\n        onChange={(event) => State.update({ token: event.target.value })}\\\\\\\\n        class=\\\\\\\\\\\\\\\"form-select\\\\\\\\\\\\\\\"\\\\\\\\n        aria-label=\\\\\\\\\\\\\\\"Default select example\\\\\\\\\\\\\\\"\\\\\\\\n        value={state.token}\\\\\\\\n      >\\\\\\\\n        <option value=\\\\\\\\\\\\\\\"USDT\\\\\\\\\\\\\\\">USDT</option>\\\\\\\\n        <option value=\\\\\\\\\\\\\\\"NEAR\\\\\\\\\\\\\\\">NEAR</option>\\\\\\\\n        <option value=\\\\\\\\\\\\\\\"USDC\\\\\\\\\\\\\\\">USDC</option>\\\\\\\\n      </select>\\\\\\\\n    </div>\\\\\\\\n    <div className=\\\\\\\\\\\\\\\"col-lg-6 mb-2\\\\\\\\\\\\\\\">\\\\\\\\n      Requested amount\\\\\\\\n      <span class=\\\\\\\\\\\\\\\"text-muted fw-normal\\\\\\\\\\\\\\\">(Numbers Only)</span>\\\\\\\\n      <input\\\\\\\\n        type=\\\\\\\\\\\\\\\"number\\\\\\\\\\\\\\\"\\\\\\\\n        value={parseInt(state.amount) > 0 ? state.amount : \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\"}\\\\\\\\n        min={0}\\\\\\\\n        onChange={(event) => {\\\\\\\\n          State.update({\\\\\\\\n            amount: Number(\\\\\\\\n              event.target.value.toString().replace(/e/g, \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\")\\\\\\\\n            ).toString(),\\\\\\\\n          });\\\\\\\\n        }}\\\\\\\\n      />\\\\\\\\n    </div>\\\\\\\\n    <div className=\\\\\\\\\\\\\\\"col-lg-6 mb-2\\\\\\\\\\\\\\\">\\\\\\\\n      <p class=\\\\\\\\\\\\\\\"mb-1\\\\\\\\\\\\\\\">\\\\\\\\n        Requested sponsor\\\\\\\\n        <span class=\\\\\\\\\\\\\\\"text-muted fw-normal\\\\\\\\\\\\\\\">(Optional)</span>\\\\\\\\n      </p>\\\\\\\\n      <p style={{ fontSize: \\\\\\\\\\\\\\\"13px\\\\\\\\\\\\\\\" }} class=\\\\\\\\\\\\\\\"m-0 text-muted fw-light\\\\\\\\\\\\\\\">\\\\\\\\n        If you are requesting funding from a specific sponsor, please enter\\\\\\\\n        their username.\\\\\\\\n      </p>\\\\\\\\n      <div class=\\\\\\\\\\\\\\\"input-group flex-nowrap\\\\\\\\\\\\\\\">\\\\\\\\n        <span class=\\\\\\\\\\\\\\\"input-group-text\\\\\\\\\\\\\\\" id=\\\\\\\\\\\\\\\"addon-wrapping\\\\\\\\\\\\\\\">\\\\\\\\n          @\\\\\\\\n        </span>\\\\\\\\n        <input\\\\\\\\n          type=\\\\\\\\\\\\\\\"text\\\\\\\\\\\\\\\"\\\\\\\\n          class=\\\\\\\\\\\\\\\"form-control\\\\\\\\\\\\\\\"\\\\\\\\n          placeholder=\\\\\\\\\\\\\\\"Enter username\\\\\\\\\\\\\\\"\\\\\\\\n          value={state.supervisor}\\\\\\\\n          onChange={(event) => State.update({ supervisor: event.target.value })}\\\\\\\\n        />\\\\\\\\n      </div>\\\\\\\\n    </div>\\\\\\\\n  </div>\\\\\\\\n);\\\\\\\\n\\\\\\\\nfunction generateDescription(text, amount, token, supervisor, seekingFunding) {\\\\\\\\n  const fundingText =\\\\\\\\n    amount > 0 && token ? `###### Requested amount: ${amount} ${token}\\\\\\\\\\\\\\\\n` : \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\";\\\\\\\\n  const supervisorText = supervisor\\\\\\\\n    ? `###### Requested sponsor: @${supervisor}\\\\\\\\\\\\\\\\n`\\\\\\\\n    : \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\";\\\\\\\\n  return seekingFunding ? `${fundingText}${supervisorText}${text}` : text;\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst [tab, setTab] = useState(\\\\\\\\\\\\\\\"editor\\\\\\\\\\\\\\\");\\\\\\\\n\\\\\\\\nconst renamedPostType = postType == \\\\\\\\\\\\\\\"Submission\\\\\\\\\\\\\\\" ? \\\\\\\\\\\\\\\"Solution\\\\\\\\\\\\\\\" : postType;\\\\\\\\n// Below there is a weird code with fields.includes(\\\\\\\\\\\\\\\"githubLink\\\\\\\\\\\\\\\") ternary operator.\\\\\\\\n// This is to hack around rendering bug of near.social.\\\\\\\\nreturn (\\\\\\\\n  <div className=\\\\\\\\\\\\\\\"card\\\\\\\\\\\\\\\">\\\\\\\\n    <div className=\\\\\\\\\\\\\\\"card-header\\\\\\\\\\\\\\\">\\\\\\\\n      <div>\\\\\\\\n        <ul class=\\\\\\\\\\\\\\\"nav nav-tabs\\\\\\\\\\\\\\\">\\\\\\\\n          <li class=\\\\\\\\\\\\\\\"nav-item\\\\\\\\\\\\\\\">\\\\\\\\n            <button\\\\\\\\n              class={`nav-link ${tab === \\\\\\\\\\\\\\\"editor\\\\\\\\\\\\\\\" ? \\\\\\\\\\\\\\\"active\\\\\\\\\\\\\\\" : \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\"}`}\\\\\\\\n              onClick={() => setTab(\\\\\\\\\\\\\\\"editor\\\\\\\\\\\\\\\")}\\\\\\\\n            >\\\\\\\\n              Editor\\\\\\\\n            </button>\\\\\\\\n          </li>\\\\\\\\n          <li class=\\\\\\\\\\\\\\\"nav-item\\\\\\\\\\\\\\\">\\\\\\\\n            <button\\\\\\\\n              class={`nav-link ${tab === \\\\\\\\\\\\\\\"preview\\\\\\\\\\\\\\\" ? \\\\\\\\\\\\\\\"active\\\\\\\\\\\\\\\" : \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\"}`}\\\\\\\\n              onClick={() => setTab(\\\\\\\\\\\\\\\"preview\\\\\\\\\\\\\\\")}\\\\\\\\n            >\\\\\\\\n              Preview\\\\\\\\n            </button>\\\\\\\\n          </li>\\\\\\\\n        </ul>\\\\\\\\n      </div>\\\\\\\\n      {tab === \\\\\\\\\\\\\\\"editor\\\\\\\\\\\\\\\" && (\\\\\\\\n        <div className=\\\\\\\\\\\\\\\"my-3\\\\\\\\\\\\\\\">\\\\\\\\n          {mode} {renamedPostType}\\\\\\\\n        </div>\\\\\\\\n      )}\\\\\\\\n      {tab === \\\\\\\\\\\\\\\"preview\\\\\\\\\\\\\\\" && <div className=\\\\\\\\\\\\\\\"my-3\\\\\\\\\\\\\\\">Post Preview</div>}\\\\\\\\n    </div>\\\\\\\\n\\\\\\\\n    {tab === \\\\\\\\\\\\\\\"editor\\\\\\\\\\\\\\\" && (\\\\\\\\n      <div class=\\\\\\\\\\\\\\\"card-body\\\\\\\\\\\\\\\">\\\\\\\\n        {state.warning && (\\\\\\\\n          <div\\\\\\\\n            class=\\\\\\\\\\\\\\\"alert alert-warning alert-dismissible fade show\\\\\\\\\\\\\\\"\\\\\\\\n            role=\\\\\\\\\\\\\\\"alert\\\\\\\\\\\\\\\"\\\\\\\\n          >\\\\\\\\n            {state.warning}\\\\\\\\n            <button\\\\\\\\n              type=\\\\\\\\\\\\\\\"button\\\\\\\\\\\\\\\"\\\\\\\\n              class=\\\\\\\\\\\\\\\"btn-close\\\\\\\\\\\\\\\"\\\\\\\\n              data-bs-dismiss=\\\\\\\\\\\\\\\"alert\\\\\\\\\\\\\\\"\\\\\\\\n              aria-label=\\\\\\\\\\\\\\\"Close\\\\\\\\\\\\\\\"\\\\\\\\n              onClick={() => State.update({ warning: \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\" })}\\\\\\\\n            ></button>\\\\\\\\n          </div>\\\\\\\\n        )}\\\\\\\\n        {/* This statement around the githubLinkDiv creates a weird render bug\\\\\\\\n      where the title renders extra on state change. */}\\\\\\\\n        {fields.includes(\\\\\\\\\\\\\\\"githubLink\\\\\\\\\\\\\\\") ? (\\\\\\\\n          <div className=\\\\\\\\\\\\\\\"row\\\\\\\\\\\\\\\">\\\\\\\\n            {fields.includes(\\\\\\\\\\\\\\\"githubLink\\\\\\\\\\\\\\\") && githubLinkDiv}\\\\\\\\n            {labelEditor}\\\\\\\\n            {fields.includes(\\\\\\\\\\\\\\\"name\\\\\\\\\\\\\\\") && nameDiv}\\\\\\\\n            {fields.includes(\\\\\\\\\\\\\\\"description\\\\\\\\\\\\\\\") && callDescriptionDiv()}\\\\\\\\n          </div>\\\\\\\\n        ) : (\\\\\\\\n          <div className=\\\\\\\\\\\\\\\"row\\\\\\\\\\\\\\\">\\\\\\\\n            {labelEditor}\\\\\\\\n            {fields.includes(\\\\\\\\\\\\\\\"name\\\\\\\\\\\\\\\") && nameDiv}\\\\\\\\n            {fields.includes(\\\\\\\\\\\\\\\"amount\\\\\\\\\\\\\\\") && amountDiv}\\\\\\\\n            {fields.includes(\\\\\\\\\\\\\\\"sponsorship_token\\\\\\\\\\\\\\\") && tokenDiv}\\\\\\\\n            {fields.includes(\\\\\\\\\\\\\\\"supervisor\\\\\\\\\\\\\\\") && supervisorDiv}\\\\\\\\n            {fields.includes(\\\\\\\\\\\\\\\"description\\\\\\\\\\\\\\\") && callDescriptionDiv()}\\\\\\\\n            {fields.includes(\\\\\\\\\\\\\\\"fund_raising\\\\\\\\\\\\\\\") && isFundraisingDiv}\\\\\\\\n            {state.seekingFunding &&\\\\\\\\n              fields.includes(\\\\\\\\\\\\\\\"fund_raising\\\\\\\\\\\\\\\") &&\\\\\\\\n              fundraisingDiv}\\\\\\\\n          </div>\\\\\\\\n        )}\\\\\\\\n        <button\\\\\\\\n          style={{\\\\\\\\n            width: \\\\\\\\\\\\\\\"7rem\\\\\\\\\\\\\\\",\\\\\\\\n            backgroundColor: \\\\\\\\\\\\\\\"#0C7283\\\\\\\\\\\\\\\",\\\\\\\\n            color: \\\\\\\\\\\\\\\"#f3f3f3\\\\\\\\\\\\\\\",\\\\\\\\n          }}\\\\\\\\n          disabled={state.seekingFunding && (!state.amount || state.amount < 1)}\\\\\\\\n          className=\\\\\\\\\\\\\\\"btn btn-light mb-2 p-3\\\\\\\\\\\\\\\"\\\\\\\\n          onClick={onSubmit}\\\\\\\\n        >\\\\\\\\n          Submit\\\\\\\\n        </button>\\\\\\\\n        <button\\\\\\\\n          style={{\\\\\\\\n            width: \\\\\\\\\\\\\\\"7rem\\\\\\\\\\\\\\\",\\\\\\\\n            backgroundColor: \\\\\\\\\\\\\\\"#fff\\\\\\\\\\\\\\\",\\\\\\\\n            color: \\\\\\\\\\\\\\\"#000\\\\\\\\\\\\\\\",\\\\\\\\n          }}\\\\\\\\n          className=\\\\\\\\\\\\\\\"btn btn-light mb-2 p-3\\\\\\\\\\\\\\\"\\\\\\\\n          onClick={toggleEditor}\\\\\\\\n        >\\\\\\\\n          Cancel\\\\\\\\n        </button>\\\\\\\\n        {disclaimer}\\\\\\\\n      </div>\\\\\\\\n    )}\\\\\\\\n    {tab === \\\\\\\\\\\\\\\"preview\\\\\\\\\\\\\\\" && (\\\\\\\\n      <div class=\\\\\\\\\\\\\\\"card-body\\\\\\\\\\\\\\\">\\\\\\\\n        <Widget\\\\\\\\n          src=\\\\\\\\\\\\\\\"devhub.near/widget/devhub.entity.post.Post\\\\\\\\\\\\\\\"\\\\\\\\n          props={{\\\\\\\\n            isPreview: true,\\\\\\\\n            id: 0, // irrelevant\\\\\\\\n            post: {\\\\\\\\n              author_id: state.author_id,\\\\\\\\n              likes: [],\\\\\\\\n              snapshot: {\\\\\\\\n                editor_id: state.editor_id,\\\\\\\\n                labels: state.labelStrings,\\\\\\\\n                post_type: postType,\\\\\\\\n                name: state.name,\\\\\\\\n                description:\\\\\\\\n                  postType == \\\\\\\\\\\\\\\"Solution\\\\\\\\\\\\\\\"\\\\\\\\n                    ? generateDescription(\\\\\\\\n                        state.description,\\\\\\\\n                        state.amount,\\\\\\\\n                        state.token,\\\\\\\\n                        state.supervisor,\\\\\\\\n                        state.seekingFunding\\\\\\\\n                      )\\\\\\\\n                    : state.description,\\\\\\\\n                amount: state.amount,\\\\\\\\n                sponsorship_token: state.token,\\\\\\\\n                supervisor: state.supervisor,\\\\\\\\n                github_link: state.githubLink,\\\\\\\\n              },\\\\\\\\n            },\\\\\\\\n          }}\\\\\\\\n        />\\\\\\\\n      </div>\\\\\\\\n    )}\\\\\\\\n  </div>\\\\\\\\n);\\\\\\\\n\"}}}}}"
      }
    ],
    "actions_agg": {
      "deposit": 0
    },
    "outcomes": {
      "status": true
    },
    "outcomes_agg": {
      "transaction_fee": 2.0171406396638e+21
    }
  },
  {
    "id": "1818255356",
    "receipt_id": "2t2t5JRukiCQVePH1V4eLeY7sFUWjcCeue9NHQac8uUL",
    "predecessor_account_id": "system",
    "receiver_account_id": "devhub.near",
    "receipt_kind": "ACTION",
    "receipt_block": {
      "block_hash": "8PuvVun2oRwLXBsYudAiio4sfhk3rQP9tsh5NvhWXQ2d",
      "block_height": 108530333,
      "block_timestamp": 1703224007951043000
    },
    "receipt_outcome": {
      "gas_burnt": 223182562500,
      "tokens_burnt": 0,
      "executor_account_id": "devhub.near",
      "status": true
    },
    "transaction_hash": "A3no9A6UdkStPNDqeHzmspPWoMDJw9KsEGc4zFD6kdDP",
    "included_in_block_hash": "8BL4B6RpdBujoNjzuKA97eDcwycqi78wwCxyXaiERwQf",
    "block_timestamp": "1703224004709698708",
    "block": {
      "block_height": 108530331
    },
    "receipt_conversion_tokens_burnt": "255823570538800000000",
    "actions": [
      {
        "action": "TRANSFER",
        "method": null,
        "deposit": 1.8734973522130372e+23,
        "fee": 0,
        "args": null
      }
    ],
    "actions_agg": {
      "deposit": 0
    },
    "outcomes": {
      "status": true
    },
    "outcomes_agg": {
      "transaction_fee": 2.0171406396638e+21
    }
  },
  {
    "id": "1821032884",
    "receipt_id": "9nFDdUDKwpWdUw83Rd324aZavVAmb8jvpinW9bWHvLPd",
    "predecessor_account_id": "devhub.near",
    "receiver_account_id": "social.near",
    "receipt_kind": "ACTION",
    "receipt_block": {
      "block_hash": "C8SfJqXxstP7xH2heGvo4BLMK8dZz8ixgXKQBH8cC56F",
      "block_height": 108540531,
      "block_timestamp": 1703236727318314800
    },
    "receipt_outcome": {
      "gas_burnt": 8468115116907,
      "tokens_burnt": 846811511690700000000,
      "executor_account_id": "social.near",
      "status": true
    },
    "transaction_hash": "9EZZTiA9esM7secSbxPCnC3JpYwg72ywHFZsGJb8pr74",
    "included_in_block_hash": "GXwB6ayxkDWy6yhXDw7vuthU2XFVzocbG4YWbZBZgDco",
    "block_timestamp": "1703236726245883842",
    "block": {
      "block_height": 108540530
    },
    "receipt_conversion_tokens_burnt": "247018015260000000000",
    "actions": [
      {
        "action": "FUNCTION_CALL",
        "method": "set",
        "deposit": 0,
        "fee": 846811511690700000000,
        "args": "{\"data\": {\"devhub.near\": {\"widget\": {\"devhub.page.create\": {\"\": \"const CenteredMessage = styled.div`\\\\\\\\n  display: flex;\\\\\\\\n  flex-direction: column;\\\\\\\\n  justify-content: center;\\\\\\\\n  align-items: center;\\\\\\\\n  width: 100%;\\\\\\\\n  height: 384px;\\\\\\\\n`;\\\\\\\\n\\\\\\\\nif (!context.accountId) {\\\\\\\\n  return (\\\\\\\\n    <CenteredMessage height={\\\\\\\\\\\\\\\"384px\\\\\\\\\\\\\\\"}>\\\\\\\\n      <h2>Please sign in to create a post.</h2>\\\\\\\\n    </CenteredMessage>\\\\\\\\n  );\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst postTypeOptions = {\\\\\\\\n  Idea: {\\\\\\\\n    name: \\\\\\\\\\\\\\\"Idea\\\\\\\\\\\\\\\",\\\\\\\\n    icon: \\\\\\\\\\\\\\\"bi-lightbulb\\\\\\\\\\\\\\\",\\\\\\\\n\\\\\\\\n    description:\\\\\\\\n      \\\\\\\\\\\\\\\"Get feedback from the community about a problem, opportunity, or need.\\\\\\\\\\\\\\\",\\\\\\\\n  },\\\\\\\\n\\\\\\\\n  Solution: {\\\\\\\\n    name: \\\\\\\\\\\\\\\"Solution\\\\\\\\\\\\\\\",\\\\\\\\n    icon: \\\\\\\\\\\\\\\"bi-rocket\\\\\\\\\\\\\\\",\\\\\\\\n\\\\\\\\n    description:\\\\\\\\n      \\\\\\\\\\\\\\\"Provide a specific proposal or implementation to an idea, optionally requesting funding. If your solution relates to an existing idea, please reply to the original post with a solution.\\\\\\\\\\\\\\\",\\\\\\\\n  },\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst typeSwitch = (optionName) => {\\\\\\\\n  State.update({\\\\\\\\n    postType: optionName,\\\\\\\\n  });\\\\\\\\n};\\\\\\\\n\\\\\\\\nfunction initLabels() {\\\\\\\\n  const labels = [];\\\\\\\\n  if (props.labels) {\\\\\\\\n    labels.push(...props.labels.split(\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"));\\\\\\\\n  }\\\\\\\\n  if (props.referral) {\\\\\\\\n    labels.push(`referral:${props.referral}`);\\\\\\\\n  }\\\\\\\\n  return labels;\\\\\\\\n}\\\\\\\\n\\\\\\\\nState.init({\\\\\\\\n  seekingFunding: false,\\\\\\\\n  labels: initLabels(),\\\\\\\\n  postType: \\\\\\\\\\\\\\\"Idea\\\\\\\\\\\\\\\",\\\\\\\\n  name: props.name ?? \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\",\\\\\\\\n  description: props.description ?? \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\",\\\\\\\\n  amount: props.amount ?? \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\",\\\\\\\\n  token: props.token ?? \\\\\\\\\\\\\\\"USDT\\\\\\\\\\\\\\\",\\\\\\\\n  supervisor: props.supervisor ?? \\\\\\\\\\\\\\\"neardevdao.near\\\\\\\\\\\\\\\",\\\\\\\\n  warning: \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\",\\\\\\\\n  mentionInput: \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\", // text next to @ tag\\\\\\\\n  mentionsArray: [], // all the mentions in the description\\\\\\\\n});\\\\\\\\n\\\\\\\\nconst autocompleteEnabled = true;\\\\\\\\n\\\\\\\\nconst AutoComplete = styled.div`\\\\\\\\n  z-index: 5;\\\\\\\\n\\\\\\\\n  > div > div {\\\\\\\\n    padding: calc(var(--padding) / 2);\\\\\\\\n  }\\\\\\\\n`;\\\\\\\\n\\\\\\\\nfunction textareaInputHandler(value) {\\\\\\\\n  const words = value.split(/\\\\\\\\\\\\\\\\s+/);\\\\\\\\n  const allMentions = words\\\\\\\\n    .filter((word) => word.startsWith(\\\\\\\\\\\\\\\"@\\\\\\\\\\\\\\\"))\\\\\\\\n    .map((mention) => mention.slice(1));\\\\\\\\n  const newMentions = allMentions.filter(\\\\\\\\n    (item) => !state.mentionsArray.includes(item)\\\\\\\\n  );\\\\\\\\n\\\\\\\\n  State.update({\\\\\\\\n    text: value,\\\\\\\\n    showAccountAutocomplete: newMentions?.length > 0,\\\\\\\\n    mentionsArray: allMentions,\\\\\\\\n    mentionInput: newMentions?.[0] ?? \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\",\\\\\\\\n  });\\\\\\\\n}\\\\\\\\n\\\\\\\\nfunction autoCompleteAccountId(id) {\\\\\\\\n  // to make sure we update the @ at correct index\\\\\\\\n  let currentIndex = 0;\\\\\\\\n  const updatedDescription = state.description.replace(\\\\\\\\n    /(?:^|\\\\\\\\\\\\\\\\s)(@[^\\\\\\\\\\\\\\\\s]*)/g,\\\\\\\\n    (match) => {\\\\\\\\n      if (currentIndex === state.mentionsArray.indexOf(state.mentionInput)) {\\\\\\\\n        currentIndex++;\\\\\\\\n        return ` @${id}`;\\\\\\\\n      } else {\\\\\\\\n        currentIndex++;\\\\\\\\n        return match;\\\\\\\\n      }\\\\\\\\n    }\\\\\\\\n  );\\\\\\\\n\\\\\\\\n  State.update({\\\\\\\\n    handler: \\\\\\\\\\\\\\\"autocompleteSelected\\\\\\\\\\\\\\\",\\\\\\\\n    description: updatedDescription,\\\\\\\\n    showAccountAutocomplete: false,\\\\\\\\n  });\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst { href } = VM.require(\\\\\\\\\\\\\\\"devhub.near/widget/core.lib.url\\\\\\\\\\\\\\\");\\\\\\\\n\\\\\\\\nif (!href) {\\\\\\\\n  return <p>Loading modules...</p>;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// This must be outside onClick, because Near.view returns null at first, and when the view call finished, it returns true/false.\\\\\\\\n// If checking this inside onClick, it will give `null` and we cannot tell the result is true or false.\\\\\\\\nlet grantNotify = Near.view(\\\\\\\\\\\\\\\"social.near\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"is_write_permission_granted\\\\\\\\\\\\\\\", {\\\\\\\\n  predecessor_id: \\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\",\\\\\\\\n  key: context.accountId + \\\\\\\\\\\\\\\"/index/notify\\\\\\\\\\\\\\\",\\\\\\\\n});\\\\\\\\nif (grantNotify === null) {\\\\\\\\n  return;\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst onSubmit = () => {\\\\\\\\n  let body = {\\\\\\\\n    name: state.name,\\\\\\\\n    description: generateDescription(\\\\\\\\n      state.description,\\\\\\\\n      state.amount,\\\\\\\\n      state.token,\\\\\\\\n      state.supervisor,\\\\\\\\n      state.seekingFunding\\\\\\\\n    ),\\\\\\\\n  };\\\\\\\\n\\\\\\\\n  if (state.postType === \\\\\\\\\\\\\\\"Solution\\\\\\\\\\\\\\\") {\\\\\\\\n    body = {\\\\\\\\n      ...body,\\\\\\\\n      post_type: \\\\\\\\\\\\\\\"Solution\\\\\\\\\\\\\\\",\\\\\\\\n      solution_version: \\\\\\\\\\\\\\\"V1\\\\\\\\\\\\\\\",\\\\\\\\n    };\\\\\\\\n  } else {\\\\\\\\n    // Idea\\\\\\\\n    body = {\\\\\\\\n      ...body,\\\\\\\\n      post_type: \\\\\\\\\\\\\\\"Idea\\\\\\\\\\\\\\\",\\\\\\\\n      idea_version: \\\\\\\\\\\\\\\"V1\\\\\\\\\\\\\\\",\\\\\\\\n    };\\\\\\\\n  }\\\\\\\\n\\\\\\\\n  let txn = [];\\\\\\\\n\\\\\\\\n  txn.push({\\\\\\\\n    contractName: \\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\",\\\\\\\\n    methodName: \\\\\\\\\\\\\\\"add_post\\\\\\\\\\\\\\\",\\\\\\\\n    args: {\\\\\\\\n      parent_id: null,\\\\\\\\n      labels: state.labels,\\\\\\\\n      body: body,\\\\\\\\n    },\\\\\\\\n    gas: Big(10).pow(14),\\\\\\\\n  });\\\\\\\\n\\\\\\\\n  if (grantNotify === false) {\\\\\\\\n    txn.unshift({\\\\\\\\n      contractName: \\\\\\\\\\\\\\\"social.near\\\\\\\\\\\\\\\",\\\\\\\\n      methodName: \\\\\\\\\\\\\\\"grant_write_permission\\\\\\\\\\\\\\\",\\\\\\\\n      args: {\\\\\\\\n        predecessor_id: \\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\",\\\\\\\\n        keys: [context.accountId + \\\\\\\\\\\\\\\"/index/notify\\\\\\\\\\\\\\\"],\\\\\\\\n      },\\\\\\\\n      gas: Big(10).pow(14),\\\\\\\\n      deposit: Big(10).pow(22),\\\\\\\\n    });\\\\\\\\n  }\\\\\\\\n\\\\\\\\n  Near.call(txn);\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst onIdeaClick = () => {\\\\\\\\n  State.update({ postType: \\\\\\\\\\\\\\\"Idea\\\\\\\\\\\\\\\", seekingFunding: false });\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst onSolutionClick = () => {\\\\\\\\n  State.update({ postType: \\\\\\\\\\\\\\\"Solution\\\\\\\\\\\\\\\" });\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst normalizeLabel = (label) =>\\\\\\\\n  label\\\\\\\\n    .replaceAll(/[- \\\\\\\\\\\\\\\\.]/g, \\\\\\\\\\\\\\\"_\\\\\\\\\\\\\\\")\\\\\\\\n    .replaceAll(/[^\\\\\\\\\\\\\\\\w]+/g, \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\")\\\\\\\\n    .replaceAll(/_+/g, \\\\\\\\\\\\\\\"-\\\\\\\\\\\\\\\")\\\\\\\\n    .replace(/^-+/, \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\")\\\\\\\\n    .replace(/-+$/, \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\")\\\\\\\\n    .toLowerCase()\\\\\\\\n    .trim(\\\\\\\\\\\\\\\"-\\\\\\\\\\\\\\\");\\\\\\\\n\\\\\\\\nconst checkLabel = (label) => {\\\\\\\\n  Near.asyncView(\\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"is_allowed_to_use_labels\\\\\\\\\\\\\\\", {\\\\\\\\n    editor: context.accountId,\\\\\\\\n    labels: [label],\\\\\\\\n  }).then((allowed) => {\\\\\\\\n    if (allowed) {\\\\\\\\n      State.update({ warning: \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\" });\\\\\\\\n    } else {\\\\\\\\n      State.update({\\\\\\\\n        warning:\\\\\\\\n          \\\\\\\\\\\\'The label \\\\\\\\\\\\\\\"\\\\\\\\\\\\' +\\\\\\\\n          label +\\\\\\\\n          \\\\\\\\\\\\'\\\\\\\\\\\\\\\" is protected and can only be added by moderators\\\\\\\\\\\\',\\\\\\\\n      });\\\\\\\\n      return;\\\\\\\\n    }\\\\\\\\n  });\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst setLabels = (labels) => {\\\\\\\\n  const normalizedLabels = labels.map((o) =>\\\\\\\\n    o.customOption ? normalizeLabel(o.label) : normalizeLabel(o)\\\\\\\\n  );\\\\\\\\n  const uniqueLabels = [...new Set(normalizedLabels)];\\\\\\\\n\\\\\\\\n  if (uniqueLabels.length < state.labels.length) {\\\\\\\\n    const removedLabel = state.labels.find(\\\\\\\\n      (label) => !uniqueLabels.includes(label)\\\\\\\\n    );\\\\\\\\n\\\\\\\\n    const allowed = Near.asyncView(\\\\\\\\n      \\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\",\\\\\\\\n      \\\\\\\\\\\\\\\"is_allowed_to_use_labels\\\\\\\\\\\\\\\",\\\\\\\\n      {\\\\\\\\n        editor: context.accountId,\\\\\\\\n        labels: [removedLabel],\\\\\\\\n      }\\\\\\\\n    );\\\\\\\\n\\\\\\\\n    if (allowed) {\\\\\\\\n      State.update({ labels: uniqueLabels });\\\\\\\\n    } else {\\\\\\\\n      State.update({\\\\\\\\n        warning: `The label \\\\\\\\\\\\\\\"${removedLabel}\\\\\\\\\\\\\\\" is protected and can only be updated by moderators`,\\\\\\\\n      });\\\\\\\\n    }\\\\\\\\n  } else {\\\\\\\\n    State.update({ labels: uniqueLabels });\\\\\\\\n  }\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst existingLabels =\\\\\\\\n  Near.view(\\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"get_all_allowed_labels\\\\\\\\\\\\\\\", {\\\\\\\\n    editor: context.accountId,\\\\\\\\n  }) ?? [];\\\\\\\\nconst allowedLabels = existingLabels.filter((it) => it !== \\\\\\\\\\\\\\\"blog\\\\\\\\\\\\\\\"); // remove blog label so users cannot publish blogs from feed\\\\\\\\n\\\\\\\\nfunction NameEditor() {\\\\\\\\n  return (\\\\\\\\n    <div className=\\\\\\\\\\\\\\\"col-lg-6 mb-2\\\\\\\\\\\\\\\">\\\\\\\\n      <p className=\\\\\\\\\\\\\\\"fs-6 fw-bold mb-1\\\\\\\\\\\\\\\">Title</p>\\\\\\\\n      <input\\\\\\\\n        data-testid=\\\\\\\\\\\\\\\"name-editor\\\\\\\\\\\\\\\"\\\\\\\\n        type=\\\\\\\\\\\\\\\"text\\\\\\\\\\\\\\\"\\\\\\\\n        value={state.name}\\\\\\\\n        onChange={(event) => State.update({ name: event.target.value })}\\\\\\\\n      />\\\\\\\\n    </div>\\\\\\\\n  );\\\\\\\\n}\\\\\\\\n\\\\\\\\nfunction DescriptionEditor() {\\\\\\\\n  return (\\\\\\\\n    <div className=\\\\\\\\\\\\\\\"col-lg-12 mb-2\\\\\\\\\\\\\\\">\\\\\\\\n      <p className=\\\\\\\\\\\\\\\"fs-6 fw-bold mb-1\\\\\\\\\\\\\\\">Description</p>\\\\\\\\n      <Widget\\\\\\\\n        src=\\\\\\\\\\\\\\\"devhub.near/widget/devhub.components.molecule.MarkdownEditor\\\\\\\\\\\\\\\"\\\\\\\\n        props={{\\\\\\\\n          data: { handler: state.handler, content: state.description },\\\\\\\\n          onChange: (content) => {\\\\\\\\n            State.update({ description: content, handler: \\\\\\\\\\\\\\\"update\\\\\\\\\\\\\\\" });\\\\\\\\n            textareaInputHandler(content);\\\\\\\\n          },\\\\\\\\n        }}\\\\\\\\n      />\\\\\\\\n      {autocompleteEnabled && state.showAccountAutocomplete && (\\\\\\\\n        <AutoComplete>\\\\\\\\n          <Widget\\\\\\\\n            src=\\\\\\\\\\\\\\\"devhub.near/widget/devhub.components.molecule.AccountAutocomplete\\\\\\\\\\\\\\\"\\\\\\\\n            props={{\\\\\\\\n              term: state.mentionInput,\\\\\\\\n              onSelect: autoCompleteAccountId,\\\\\\\\n              onClose: () => State.update({ showAccountAutocomplete: false }),\\\\\\\\n            }}\\\\\\\\n          />\\\\\\\\n        </AutoComplete>\\\\\\\\n      )}\\\\\\\\n    </div>\\\\\\\\n  );\\\\\\\\n}\\\\\\\\n\\\\\\\\nfunction LabelsEditor() {\\\\\\\\n  return (\\\\\\\\n    <div className=\\\\\\\\\\\\\\\"col-lg-12 mb-2\\\\\\\\\\\\\\\">\\\\\\\\n      <p className=\\\\\\\\\\\\\\\"fs-6 fw-bold mb-1\\\\\\\\\\\\\\\">Labels</p>\\\\\\\\n      <Typeahead\\\\\\\\n        multiple\\\\\\\\n        onInputChange={checkLabel}\\\\\\\\n        onChange={setLabels}\\\\\\\\n        options={allowedLabels}\\\\\\\\n        placeholder=\\\\\\\\\\\\\\\"near.social, widget, NEP, standard, protocol, tool\\\\\\\\\\\\\\\"\\\\\\\\n        selected={state.labels}\\\\\\\\n        positionFixed\\\\\\\\n        allowNew={(results, props) => {\\\\\\\\n          return (\\\\\\\\n            !allowedLabels.includes(props.text) &&\\\\\\\\n            props.text.toLowerCase() !== \\\\\\\\\\\\\\\"blog\\\\\\\\\\\\\\\" && // dont allow adding \\\\\\\\\\\\\\\"Blog\\\\\\\\\\\\\\\"\\\\\\\\n            props.selected.filter((selected) => selected.name === props.text)\\\\\\\\n              .length == 0 &&\\\\\\\\n            Near.view(\\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"is_allowed_to_use_labels\\\\\\\\\\\\\\\", {\\\\\\\\n              editor: context.accountId,\\\\\\\\n              labels: [props.text],\\\\\\\\n            })\\\\\\\\n          );\\\\\\\\n        }}\\\\\\\\n      />\\\\\\\\n    </div>\\\\\\\\n  );\\\\\\\\n}\\\\\\\\n\\\\\\\\nfunction FundraisingToggle() {\\\\\\\\n  return (\\\\\\\\n    <>\\\\\\\\n      <div class=\\\\\\\\\\\\\\\"mb-2\\\\\\\\\\\\\\\">\\\\\\\\n        <p class=\\\\\\\\\\\\\\\"fs-6 fw-bold mb-1\\\\\\\\\\\\\\\">\\\\\\\\n          Are you seeking funding for your solution?\\\\\\\\n          <span class=\\\\\\\\\\\\\\\"text-muted fw-normal\\\\\\\\\\\\\\\">(Optional)</span>\\\\\\\\n        </p>\\\\\\\\n        <div class=\\\\\\\\\\\\\\\"form-check form-check-inline\\\\\\\\\\\\\\\">\\\\\\\\n          <label class=\\\\\\\\\\\\\\\"form-check-label\\\\\\\\\\\\\\\">\\\\\\\\n            <button\\\\\\\\n              className=\\\\\\\\\\\\\\\"btn btn-light p-0\\\\\\\\\\\\\\\"\\\\\\\\n              style={{\\\\\\\\n                backgroundColor: state.seekingFunding ? \\\\\\\\\\\\\\\"#0C7283\\\\\\\\\\\\\\\" : \\\\\\\\\\\\\\\"inherit\\\\\\\\\\\\\\\",\\\\\\\\n                color: \\\\\\\\\\\\\\\"#f3f3f3\\\\\\\\\\\\\\\",\\\\\\\\n                border: \\\\\\\\\\\\\\\"solid #D9D9D9\\\\\\\\\\\\\\\",\\\\\\\\n                borderRadius: \\\\\\\\\\\\\\\"100%\\\\\\\\\\\\\\\",\\\\\\\\n                height: \\\\\\\\\\\\\\\"20px\\\\\\\\\\\\\\\",\\\\\\\\n                width: \\\\\\\\\\\\\\\"20px\\\\\\\\\\\\\\\",\\\\\\\\n              }}\\\\\\\\n              onClick={() => State.update({ seekingFunding: true })}\\\\\\\\n            />\\\\\\\\n            Yes\\\\\\\\n          </label>\\\\\\\\n        </div>\\\\\\\\n        <div class=\\\\\\\\\\\\\\\"form-check form-check-inline\\\\\\\\\\\\\\\">\\\\\\\\n          <label class=\\\\\\\\\\\\\\\"form-check-label\\\\\\\\\\\\\\\">\\\\\\\\n            <button\\\\\\\\n              className=\\\\\\\\\\\\\\\"btn btn-light p-0\\\\\\\\\\\\\\\"\\\\\\\\n              style={{\\\\\\\\n                backgroundColor: !state.seekingFunding ? \\\\\\\\\\\\\\\"#0C7283\\\\\\\\\\\\\\\" : \\\\\\\\\\\\\\\"inherit\\\\\\\\\\\\\\\",\\\\\\\\n                color: \\\\\\\\\\\\\\\"#f3f3f3\\\\\\\\\\\\\\\",\\\\\\\\n                border: \\\\\\\\\\\\\\\"solid #D9D9D9\\\\\\\\\\\\\\\",\\\\\\\\n                borderRadius: \\\\\\\\\\\\\\\"100%\\\\\\\\\\\\\\\",\\\\\\\\n                height: \\\\\\\\\\\\\\\"20px\\\\\\\\\\\\\\\",\\\\\\\\n                width: \\\\\\\\\\\\\\\"20px\\\\\\\\\\\\\\\",\\\\\\\\n              }}\\\\\\\\n              onClick={() => State.update({ seekingFunding: false })}\\\\\\\\n            />\\\\\\\\n            No\\\\\\\\n          </label>\\\\\\\\n        </div>\\\\\\\\n      </div>\\\\\\\\n    </>\\\\\\\\n  );\\\\\\\\n}\\\\\\\\n\\\\\\\\nfunction Fundraising() {\\\\\\\\n  return (\\\\\\\\n    <div class=\\\\\\\\\\\\\\\"d-flex flex-column mb-2\\\\\\\\\\\\\\\">\\\\\\\\n      <div className=\\\\\\\\\\\\\\\"col-lg-6  mb-2\\\\\\\\\\\\\\\">\\\\\\\\n        Currency\\\\\\\\n        <select\\\\\\\\n          onChange={(event) => State.update({ token: event.target.value })}\\\\\\\\n          class=\\\\\\\\\\\\\\\"form-select\\\\\\\\\\\\\\\"\\\\\\\\n          aria-label=\\\\\\\\\\\\\\\"Default select\\\\\\\\\\\\\\\"\\\\\\\\n        >\\\\\\\\n          <option selected value=\\\\\\\\\\\\\\\"USDT\\\\\\\\\\\\\\\">\\\\\\\\n            USDT\\\\\\\\n          </option>\\\\\\\\n          <option value=\\\\\\\\\\\\\\\"NEAR\\\\\\\\\\\\\\\">NEAR</option>\\\\\\\\n          <option value=\\\\\\\\\\\\\\\"USDC\\\\\\\\\\\\\\\">USDC</option>\\\\\\\\n        </select>\\\\\\\\n      </div>\\\\\\\\n      <div className=\\\\\\\\\\\\\\\"col-lg-6 mb-2\\\\\\\\\\\\\\\">\\\\\\\\n        Requested amount{\\\\\\\\\\\\\\\" \\\\\\\\\\\\\\\"}\\\\\\\\n        <span class=\\\\\\\\\\\\\\\"text-muted fw-normal\\\\\\\\\\\\\\\">(Numbers Only)</span>\\\\\\\\n        <input\\\\\\\\n          data-testid=\\\\\\\\\\\\\\\"requested-amount-editor\\\\\\\\\\\\\\\"\\\\\\\\n          type=\\\\\\\\\\\\\\\"number\\\\\\\\\\\\\\\"\\\\\\\\n          value={parseInt(state.amount) > 0 ? state.amount : \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\"}\\\\\\\\n          min={0}\\\\\\\\n          onChange={(event) =>\\\\\\\\n            State.update({\\\\\\\\n              amount: Number(\\\\\\\\n                event.target.value.toString().replace(/e/g, \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\")\\\\\\\\n              ).toString(),\\\\\\\\n            })\\\\\\\\n          }\\\\\\\\n        />\\\\\\\\n      </div>\\\\\\\\n      <div className=\\\\\\\\\\\\\\\"col-lg-6 mb-2\\\\\\\\\\\\\\\">\\\\\\\\n        <p class=\\\\\\\\\\\\\\\"mb-1\\\\\\\\\\\\\\\">\\\\\\\\n          Requested sponsor <span class=\\\\\\\\\\\\\\\"text-muted fw-normal\\\\\\\\\\\\\\\">(Optional)</span>\\\\\\\\n        </p>\\\\\\\\n        <p style={{ fontSize: \\\\\\\\\\\\\\\"13px\\\\\\\\\\\\\\\" }} class=\\\\\\\\\\\\\\\"m-0 text-muted fw-light\\\\\\\\\\\\\\\">\\\\\\\\n          If you are requesting funding from a specific sponsor, please enter\\\\\\\\n          their username.\\\\\\\\n        </p>\\\\\\\\n        <div class=\\\\\\\\\\\\\\\"input-group flex-nowrap\\\\\\\\\\\\\\\">\\\\\\\\n          <span class=\\\\\\\\\\\\\\\"input-group-text\\\\\\\\\\\\\\\" id=\\\\\\\\\\\\\\\"addon-wrapping\\\\\\\\\\\\\\\">\\\\\\\\n            @\\\\\\\\n          </span>\\\\\\\\n          <input\\\\\\\\n            type=\\\\\\\\\\\\\\\"text\\\\\\\\\\\\\\\"\\\\\\\\n            class=\\\\\\\\\\\\\\\"form-control\\\\\\\\\\\\\\\"\\\\\\\\n            placeholder=\\\\\\\\\\\\\\\"Enter username\\\\\\\\\\\\\\\"\\\\\\\\n            value={state.supervisor}\\\\\\\\n            onChange={(event) =>\\\\\\\\n              State.update({ supervisor: event.target.value })\\\\\\\\n            }\\\\\\\\n          />\\\\\\\\n        </div>\\\\\\\\n      </div>\\\\\\\\n    </div>\\\\\\\\n  );\\\\\\\\n}\\\\\\\\n\\\\\\\\nfunction generateDescription(text, amount, token, supervisor, seekingFunding) {\\\\\\\\n  const fundingText =\\\\\\\\n    amount > 0 && token ? `###### Requested amount: ${amount} ${token}\\\\\\\\\\\\\\\\n` : \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\";\\\\\\\\n  const supervisorText = supervisor\\\\\\\\n    ? `###### Requested sponsor: @${supervisor}\\\\\\\\\\\\\\\\n`\\\\\\\\n    : \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\";\\\\\\\\n  return seekingFunding ? `${fundingText}${supervisorText}${text}` : text;\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst [tab, setTab] = useState(\\\\\\\\\\\\\\\"editor\\\\\\\\\\\\\\\");\\\\\\\\n\\\\\\\\nreturn (\\\\\\\\n  <div class=\\\\\\\\\\\\\\\"bg-light d-flex flex-column flex-grow-1 w-100\\\\\\\\\\\\\\\">\\\\\\\\n    <div class=\\\\\\\\\\\\\\\"mx-5 mb-5\\\\\\\\\\\\\\\">\\\\\\\\n      {props.transactionHashes ? (\\\\\\\\n        <>\\\\\\\\n          Post created successfully. Back to{\\\\\\\\\\\\\\\" \\\\\\\\\\\\\\\"}\\\\\\\\n          <Link\\\\\\\\n            style={{\\\\\\\\n              color: \\\\\\\\\\\\\\\"#3252A6\\\\\\\\\\\\\\\",\\\\\\\\n            }}\\\\\\\\n            className=\\\\\\\\\\\\\\\"fw-bold\\\\\\\\\\\\\\\"\\\\\\\\n            to={href({\\\\\\\\n              widgetSrc: \\\\\\\\\\\\\\\"devhub.near/widget/app\\\\\\\\\\\\\\\",\\\\\\\\n              params: { page: \\\\\\\\\\\\\\\"feed\\\\\\\\\\\\\\\" },\\\\\\\\n            })}\\\\\\\\n          >\\\\\\\\n            feed\\\\\\\\n          </Link>\\\\\\\\n        </>\\\\\\\\n      ) : (\\\\\\\\n        <>\\\\\\\\n          <div className=\\\\\\\\\\\\\\\"card\\\\\\\\\\\\\\\">\\\\\\\\n            <div className=\\\\\\\\\\\\\\\"card-header\\\\\\\\\\\\\\\">\\\\\\\\n              <div>\\\\\\\\n                <ul class=\\\\\\\\\\\\\\\"nav nav-tabs\\\\\\\\\\\\\\\">\\\\\\\\n                  <li class=\\\\\\\\\\\\\\\"nav-item\\\\\\\\\\\\\\\">\\\\\\\\n                    <button\\\\\\\\n                      class={`nav-link ${tab === \\\\\\\\\\\\\\\"editor\\\\\\\\\\\\\\\" ? \\\\\\\\\\\\\\\"active\\\\\\\\\\\\\\\" : \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\"}`}\\\\\\\\n                      onClick={() => setTab(\\\\\\\\\\\\\\\"editor\\\\\\\\\\\\\\\")}\\\\\\\\n                    >\\\\\\\\n                      Editor\\\\\\\\n                    </button>\\\\\\\\n                  </li>\\\\\\\\n                  <li class=\\\\\\\\\\\\\\\"nav-item\\\\\\\\\\\\\\\">\\\\\\\\n                    <button\\\\\\\\n                      class={`nav-link ${tab === \\\\\\\\\\\\\\\"preview\\\\\\\\\\\\\\\" ? \\\\\\\\\\\\\\\"active\\\\\\\\\\\\\\\" : \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\"}`}\\\\\\\\n                      onClick={() => setTab(\\\\\\\\\\\\\\\"preview\\\\\\\\\\\\\\\")}\\\\\\\\n                    >\\\\\\\\n                      Preview\\\\\\\\n                    </button>\\\\\\\\n                  </li>\\\\\\\\n                </ul>\\\\\\\\n              </div>\\\\\\\\n            </div>\\\\\\\\n            <div class=\\\\\\\\\\\\\\\"card border-light\\\\\\\\\\\\\\\">\\\\\\\\n              {tab === \\\\\\\\\\\\\\\"editor\\\\\\\\\\\\\\\" && (\\\\\\\\n                <>\\\\\\\\n                  <div class=\\\\\\\\\\\\\\\"card-body\\\\\\\\\\\\\\\">\\\\\\\\n                    <p class=\\\\\\\\\\\\\\\"card-title fw-bold fs-6\\\\\\\\\\\\\\\">\\\\\\\\n                      What do you want to create?\\\\\\\\n                    </p>\\\\\\\\n                    <div class=\\\\\\\\\\\\\\\"d-flex flex-row gap-2\\\\\\\\\\\\\\\">\\\\\\\\n                      {Object.values(postTypeOptions).map((option) => (\\\\\\\\n                        <button\\\\\\\\n                          className={`btn btn-${\\\\\\\\n                            state.postType === option.name\\\\\\\\n                              ? \\\\\\\\\\\\\\\"primary\\\\\\\\\\\\\\\"\\\\\\\\n                              : \\\\\\\\\\\\\\\"outline-secondary\\\\\\\\\\\\\\\"\\\\\\\\n                          }`}\\\\\\\\n                          data-testid={`btn-${option.name.toLowerCase()}`}\\\\\\\\n                          key={option.name}\\\\\\\\n                          onClick={() => typeSwitch(option.name)}\\\\\\\\n                          style={\\\\\\\\n                            state.postType === option.name\\\\\\\\n                              ? {\\\\\\\\n                                  backgroundColor: \\\\\\\\\\\\\\\"#0C7283\\\\\\\\\\\\\\\",\\\\\\\\n                                  color: \\\\\\\\\\\\\\\"#f3f3f3\\\\\\\\\\\\\\\",\\\\\\\\n                                }\\\\\\\\n                              : null\\\\\\\\n                          }\\\\\\\\n                          type=\\\\\\\\\\\\\\\"button\\\\\\\\\\\\\\\"\\\\\\\\n                        >\\\\\\\\n                          <i className={`bi ${option.icon}`} />\\\\\\\\n                          <span>{option.name}</span>\\\\\\\\n                        </button>\\\\\\\\n                      ))}\\\\\\\\n                    </div>\\\\\\\\n                    <p class=\\\\\\\\\\\\\\\"text-muted w-75 my-1\\\\\\\\\\\\\\\">\\\\\\\\n                      {postTypeOptions[state.postType].description}\\\\\\\\n                    </p>\\\\\\\\n                    {state.warning && (\\\\\\\\n                      <div\\\\\\\\n                        class=\\\\\\\\\\\\\\\"alert alert-warning alert-dismissible fade show\\\\\\\\\\\\\\\"\\\\\\\\n                        role=\\\\\\\\\\\\\\\"alert\\\\\\\\\\\\\\\"\\\\\\\\n                      >\\\\\\\\n                        {state.warning}\\\\\\\\n                        <button\\\\\\\\n                          type=\\\\\\\\\\\\\\\"button\\\\\\\\\\\\\\\"\\\\\\\\n                          class=\\\\\\\\\\\\\\\"btn-close\\\\\\\\\\\\\\\"\\\\\\\\n                          data-bs-dismiss=\\\\\\\\\\\\\\\"alert\\\\\\\\\\\\\\\"\\\\\\\\n                          aria-label=\\\\\\\\\\\\\\\"Close\\\\\\\\\\\\\\\"\\\\\\\\n                          onClick={() => State.update({ warning: \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\" })}\\\\\\\\n                        ></button>\\\\\\\\n                      </div>\\\\\\\\n                    )}\\\\\\\\n                    <div className=\\\\\\\\\\\\\\\"row\\\\\\\\\\\\\\\">\\\\\\\\n                      <NameEditor />\\\\\\\\n                      <DescriptionEditor />\\\\\\\\n                      <LabelsEditor />\\\\\\\\n                      {state.postType === \\\\\\\\\\\\\\\"Solution\\\\\\\\\\\\\\\" && <FundraisingToggle />}\\\\\\\\n                      {state.seekingFunding && <Fundraising />}\\\\\\\\n                    </div>\\\\\\\\n                    <button\\\\\\\\n                      data-testid=\\\\\\\\\\\\\\\"submit-create-post\\\\\\\\\\\\\\\"\\\\\\\\n                      style={{\\\\\\\\n                        width: \\\\\\\\\\\\\\\"7rem\\\\\\\\\\\\\\\",\\\\\\\\n                        backgroundColor: \\\\\\\\\\\\\\\"#0C7283\\\\\\\\\\\\\\\",\\\\\\\\n                        color: \\\\\\\\\\\\\\\"#f3f3f3\\\\\\\\\\\\\\\",\\\\\\\\n                      }}\\\\\\\\n                      disabled={\\\\\\\\n                        state.seekingFunding &&\\\\\\\\n                        (!state.amount || state.amount < 1)\\\\\\\\n                      }\\\\\\\\n                      className=\\\\\\\\\\\\\\\"btn btn-light mb-2 p-3\\\\\\\\\\\\\\\"\\\\\\\\n                      onClick={onSubmit}\\\\\\\\n                    >\\\\\\\\n                      Submit\\\\\\\\n                    </button>\\\\\\\\n                  </div>\\\\\\\\n                  <div class=\\\\\\\\\\\\\\\"bg-light d-flex flex-row p-1 border-bottom\\\\\\\\\\\\\\\"></div>\\\\\\\\n                </>\\\\\\\\n              )}\\\\\\\\n              {tab === \\\\\\\\\\\\\\\"preview\\\\\\\\\\\\\\\" && (\\\\\\\\n                <div class=\\\\\\\\\\\\\\\"card-body\\\\\\\\\\\\\\\">\\\\\\\\n                  <p class=\\\\\\\\\\\\\\\"text-muted m-0\\\\\\\\\\\\\\\">Preview</p>\\\\\\\\n                  <div>\\\\\\\\n                    <Widget\\\\\\\\n                      src=\\\\\\\\\\\\\\\"devhub.near/widget/devhub.entity.post.Post\\\\\\\\\\\\\\\"\\\\\\\\n                      props={{\\\\\\\\n                        isPreview: true,\\\\\\\\n                        id: 0, // irrelevant\\\\\\\\n                        post: {\\\\\\\\n                          author_id: context.accountId,\\\\\\\\n                          likes: [],\\\\\\\\n                          snapshot: {\\\\\\\\n                            labels: state.labels,\\\\\\\\n                            post_type: state.postType,\\\\\\\\n                            name: state.name,\\\\\\\\n                            description: generateDescription(\\\\\\\\n                              state.description,\\\\\\\\n                              state.amount,\\\\\\\\n                              state.token,\\\\\\\\n                              state.supervisor,\\\\\\\\n                              state.seekingFunding\\\\\\\\n                            ),\\\\\\\\n                          },\\\\\\\\n                        },\\\\\\\\n                      }}\\\\\\\\n                    />\\\\\\\\n                  </div>\\\\\\\\n                </div>\\\\\\\\n              )}\\\\\\\\n            </div>\\\\\\\\n          </div>\\\\\\\\n        </>\\\\\\\\n      )}\\\\\\\\n    </div>\\\\\\\\n  </div>\\\\\\\\n);\\\\\\\\n\"}}}}}"
      }
    ],
    "actions_agg": {
      "deposit": 0
    },
    "outcomes": {
      "status": true
    },
    "outcomes_agg": {
      "transaction_fee": 1.0938295269507e+21
    }
  },
  {
    "id": "1821033386",
    "receipt_id": "8EhR9nzu2hu5AZj75LjPQp1yNiHxNt8e6XBCdf4bgngV",
    "predecessor_account_id": "system",
    "receiver_account_id": "devhub.near",
    "receipt_kind": "ACTION",
    "receipt_block": {
      "block_hash": "76UZgBBtFAoXfqEdnZ8Nno3PwG3oxLmQCHdaU7VaB2PB",
      "block_height": 108540532,
      "block_timestamp": 1703236728498369000
    },
    "receipt_outcome": {
      "gas_burnt": 223182562500,
      "tokens_burnt": 0,
      "executor_account_id": "devhub.near",
      "status": true
    },
    "transaction_hash": "9EZZTiA9esM7secSbxPCnC3JpYwg72ywHFZsGJb8pr74",
    "included_in_block_hash": "GXwB6ayxkDWy6yhXDw7vuthU2XFVzocbG4YWbZBZgDco",
    "block_timestamp": "1703236726245883842",
    "block": {
      "block_height": 108540530
    },
    "receipt_conversion_tokens_burnt": "247018015260000000000",
    "actions": [
      {
        "action": "TRANSFER",
        "method": null,
        "deposit": 1.8820920252070176e+23,
        "fee": 0,
        "args": null
      }
    ],
    "actions_agg": {
      "deposit": 0
    },
    "outcomes": {
      "status": true
    },
    "outcomes_agg": {
      "transaction_fee": 1.0938295269507e+21
    }
  },
  {
    "id": "1894214512",
    "receipt_id": "EuJh6af5mYzVApUBPDc2MtuNmcb21DNNLSkiAGGguTDp",
    "predecessor_account_id": "devhub.near",
    "receiver_account_id": "social.near",
    "receipt_kind": "ACTION",
    "receipt_block": {
      "block_hash": "29nmCE9YeQe5jQDFebiLadFRvR4Kj9Q5XdzScMgohAYG",
      "block_height": 108958784,
      "block_timestamp": 1703714794711778800
    },
    "receipt_outcome": {
      "gas_burnt": 9311657358445,
      "tokens_burnt": 931165735844500000000,
      "executor_account_id": "social.near",
      "status": true
    },
    "transaction_hash": "6d9iJGQ8qGSQCLJ9h2hBSNX3gr1UwcGSmTay5xMxjZFf",
    "included_in_block_hash": "ATa3PthnU5bxjMuM3kx68Q4sngtt6Hm5eNdorphW5Mt6",
    "block_timestamp": "1703714793736747169",
    "block": {
      "block_height": 108958783
    },
    "receipt_conversion_tokens_burnt": "248321564782000000000",
    "actions": [
      {
        "action": "FUNCTION_CALL",
        "method": "set",
        "deposit": 0,
        "fee": 931165735844500000000,
        "args": "{\"data\": {\"devhub.near\": {\"widget\": {\"devhub.entity.post.Post\": {\"\": \"// Ideally, this would be a page\\\\\\\\n\\\\\\\\nconst { href } = VM.require(\\\\\\\\\\\\\\\"devhub.near/widget/core.lib.url\\\\\\\\\\\\\\\");\\\\\\\\n\\\\\\\\nconst { draftState, onDraftStateChange } = VM.require(\\\\\\\\n  \\\\\\\\\\\\\\\"devhub.near/widget/devhub.entity.post.draft\\\\\\\\\\\\\\\"\\\\\\\\n);\\\\\\\\n\\\\\\\\nif (!href) {\\\\\\\\n  return <p>Loading modules...</p>;\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst ButtonWithHover = styled.button`\\\\\\\\n  background-color: #fff;\\\\\\\\n  transition: all 300ms;\\\\\\\\n  border-radius: 0.5rem;\\\\\\\\n\\\\\\\\n  &:hover {\\\\\\\\n    background-color: #e9ecef;\\\\\\\\n    color: #000;\\\\\\\\n  }\\\\\\\\n\\\\\\\\n  &:disabled {\\\\\\\\n    background-color: #fff;\\\\\\\\n    color: #b7b7b7;\\\\\\\\n  }\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst postId = props.post.id ?? (props.id ? parseInt(props.id) : 0);\\\\\\\\n\\\\\\\\nconst post =\\\\\\\\n  props.post ??\\\\\\\\n  Near.view(\\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"get_post\\\\\\\\\\\\\\\", { post_id: postId });\\\\\\\\n\\\\\\\\nif (!post) {\\\\\\\\n  return <div>Loading ...</div>;\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst referral = props.referral;\\\\\\\\nconst currentTimestamp = props.timestamp ?? post.snapshot.timestamp;\\\\\\\\nconst compareTimestamp = props.compareTimestamp ?? \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\";\\\\\\\\nconst swapTimestamps = currentTimestamp < compareTimestamp;\\\\\\\\n\\\\\\\\nconst snapshotHistory = post.snapshot_history;\\\\\\\\n\\\\\\\\nconst snapshot =\\\\\\\\n  currentTimestamp === post.snapshot.timestamp\\\\\\\\n    ? post.snapshot\\\\\\\\n    : (snapshotHistory &&\\\\\\\\n        snapshotHistory.find((s) => s.timestamp === currentTimestamp)) ??\\\\\\\\n      null;\\\\\\\\n\\\\\\\\nconst compareSnapshot =\\\\\\\\n  compareTimestamp === post.snapshot.timestamp\\\\\\\\n    ? post.snapshot\\\\\\\\n    : (snapshotHistory &&\\\\\\\\n        snapshotHistory.find((s) => s.timestamp === compareTimestamp)) ??\\\\\\\\n      null;\\\\\\\\n\\\\\\\\n// If this post is displayed under another post. Used to limit the size.\\\\\\\\nconst isUnderPost = props.isUnderPost ? true : false;\\\\\\\\n\\\\\\\\nconst parentId = Near.view(\\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"get_parent_id\\\\\\\\\\\\\\\", {\\\\\\\\n  post_id: postId,\\\\\\\\n});\\\\\\\\n\\\\\\\\nconst childPostIdsUnordered =\\\\\\\\n  Near.view(\\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"get_children_ids\\\\\\\\\\\\\\\", {\\\\\\\\n    post_id: postId,\\\\\\\\n  }) ?? [];\\\\\\\\n\\\\\\\\nconst childPostIds = props.isPreview ? [] : childPostIdsUnordered.reverse();\\\\\\\\nconst expandable = props.isPreview ? false : props.expandable ?? false;\\\\\\\\nconst defaultExpanded = expandable ? props.defaultExpanded : true;\\\\\\\\n\\\\\\\\nfunction readableDate(timestamp) {\\\\\\\\n  var a = new Date(timestamp);\\\\\\\\n  return a.toDateString() + \\\\\\\\\\\\\\\" \\\\\\\\\\\\\\\" + a.toLocaleTimeString();\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst timestamp = readableDate(\\\\\\\\n  snapshot.timestamp ? snapshot.timestamp / 1000000 : Date.now()\\\\\\\\n);\\\\\\\\n\\\\\\\\nconst postSearchKeywords = props.searchKeywords ? (\\\\\\\\n  <div style={{ \\\\\\\\\\\\\\\"font-family\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"monospace\\\\\\\\\\\\\\\" }} key=\\\\\\\\\\\\\\\"post-search-keywords\\\\\\\\\\\\\\\">\\\\\\\\n    <span>Found keywords: </span>\\\\\\\\n\\\\\\\\n    {props.searchKeywords.map((tag) => (\\\\\\\\n      <Widget\\\\\\\\n        src={\\\\\\\\\\\\\\\"devhub.near/widget/devhub.components.atom.Tag\\\\\\\\\\\\\\\"}\\\\\\\\n        props={{ linkTo: \\\\\\\\\\\\\\\"Feed\\\\\\\\\\\\\\\", tag }}\\\\\\\\n      />\\\\\\\\n    ))}\\\\\\\\n  </div>\\\\\\\\n) : (\\\\\\\\n  <div key=\\\\\\\\\\\\\\\"post-search-keywords\\\\\\\\\\\\\\\"></div>\\\\\\\\n);\\\\\\\\n\\\\\\\\nconst searchKeywords = props.searchKeywords ? (\\\\\\\\n  <div class=\\\\\\\\\\\\\\\"mb-4\\\\\\\\\\\\\\\" key=\\\\\\\\\\\\\\\"search-keywords\\\\\\\\\\\\\\\">\\\\\\\\n    <small class=\\\\\\\\\\\\\\\"text-muted\\\\\\\\\\\\\\\">{postSearchKeywords}</small>\\\\\\\\n  </div>\\\\\\\\n) : (\\\\\\\\n  <div key=\\\\\\\\\\\\\\\"search-keywords\\\\\\\\\\\\\\\"></div>\\\\\\\\n);\\\\\\\\n\\\\\\\\nconst allowedToEdit =\\\\\\\\n  !props.isPreview &&\\\\\\\\n  Near.view(\\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"is_allowed_to_edit\\\\\\\\\\\\\\\", {\\\\\\\\n    post_id: postId,\\\\\\\\n    editor: context.accountId,\\\\\\\\n  });\\\\\\\\n\\\\\\\\nconst btnEditorWidget = (postType, name) => {\\\\\\\\n  return (\\\\\\\\n    <li>\\\\\\\\n      <a\\\\\\\\n        class=\\\\\\\\\\\\\\\"dropdown-item\\\\\\\\\\\\\\\"\\\\\\\\n        role=\\\\\\\\\\\\\\\"button\\\\\\\\\\\\\\\"\\\\\\\\n        onClick={() =>\\\\\\\\n          State.update({ postType, editorType: \\\\\\\\\\\\\\\"EDIT\\\\\\\\\\\\\\\", showEditor: true })\\\\\\\\n        }\\\\\\\\n      >\\\\\\\\n        {name}\\\\\\\\n      </a>\\\\\\\\n    </li>\\\\\\\\n  );\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst editControl = allowedToEdit ? (\\\\\\\\n  <div class=\\\\\\\\\\\\\\\"btn-group\\\\\\\\\\\\\\\" role=\\\\\\\\\\\\\\\"group\\\\\\\\\\\\\\\">\\\\\\\\n    <a\\\\\\\\n      class=\\\\\\\\\\\\\\\"card-link px-2\\\\\\\\\\\\\\\"\\\\\\\\n      role=\\\\\\\\\\\\\\\"button\\\\\\\\\\\\\\\"\\\\\\\\n      title=\\\\\\\\\\\\\\\"Edit post\\\\\\\\\\\\\\\"\\\\\\\\n      data-bs-toggle=\\\\\\\\\\\\\\\"dropdown\\\\\\\\\\\\\\\"\\\\\\\\n      aria-expanded=\\\\\\\\\\\\\\\"false\\\\\\\\\\\\\\\"\\\\\\\\n      type=\\\\\\\\\\\\\\\"button\\\\\\\\\\\\\\\"\\\\\\\\n    >\\\\\\\\n      <div class=\\\\\\\\\\\\\\\"bi bi-pencil-square\\\\\\\\\\\\\\\"></div>\\\\\\\\n    </a>\\\\\\\\n\\\\\\\\n    <ul class=\\\\\\\\\\\\\\\"dropdown-menu\\\\\\\\\\\\\\\">\\\\\\\\n      {btnEditorWidget(\\\\\\\\\\\\\\\"Idea\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"Edit as an idea\\\\\\\\\\\\\\\")}\\\\\\\\n      {btnEditorWidget(\\\\\\\\\\\\\\\"Solution\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"Edit as a solution\\\\\\\\\\\\\\\")}\\\\\\\\n      {btnEditorWidget(\\\\\\\\\\\\\\\"Attestation\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"Edit as an attestation\\\\\\\\\\\\\\\")}\\\\\\\\n      {btnEditorWidget(\\\\\\\\\\\\\\\"Sponsorship\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"Edit as a sponsorship\\\\\\\\\\\\\\\")}\\\\\\\\n      {btnEditorWidget(\\\\\\\\\\\\\\\"Comment\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"Edit as a comment\\\\\\\\\\\\\\\")}\\\\\\\\n    </ul>\\\\\\\\n  </div>\\\\\\\\n) : (\\\\\\\\n  <div></div>\\\\\\\\n);\\\\\\\\n\\\\\\\\nconst shareButton = props.isPreview ? (\\\\\\\\n  <div></div>\\\\\\\\n) : (\\\\\\\\n  <Link\\\\\\\\n    class=\\\\\\\\\\\\\\\"card-link text-dark\\\\\\\\\\\\\\\"\\\\\\\\n    to={href({\\\\\\\\n      widgetSrc: \\\\\\\\\\\\\\\"devhub.near/widget/app\\\\\\\\\\\\\\\",\\\\\\\\n      params: { page: \\\\\\\\\\\\\\\"post\\\\\\\\\\\\\\\", id: postId },\\\\\\\\n    })}\\\\\\\\n    role=\\\\\\\\\\\\\\\"button\\\\\\\\\\\\\\\"\\\\\\\\n    target=\\\\\\\\\\\\\\\"_blank\\\\\\\\\\\\\\\"\\\\\\\\n    title=\\\\\\\\\\\\\\\"Open in new tab\\\\\\\\\\\\\\\"\\\\\\\\n  >\\\\\\\\n    <div class=\\\\\\\\\\\\\\\"bi bi-share\\\\\\\\\\\\\\\"></div>\\\\\\\\n  </Link>\\\\\\\\n);\\\\\\\\n\\\\\\\\nconst ProfileCardContainer = styled.div`\\\\\\\\n  @media screen and (max-width: 960px) {\\\\\\\\n    width: 100%;\\\\\\\\n  }\\\\\\\\n`;\\\\\\\\n\\\\\\\\n// card-header\\\\\\\\nconst header = (\\\\\\\\n  <div key=\\\\\\\\\\\\\\\"header\\\\\\\\\\\\\\\">\\\\\\\\n    <small class=\\\\\\\\\\\\\\\"text-muted\\\\\\\\\\\\\\\">\\\\\\\\n      <div class=\\\\\\\\\\\\\\\"row justify-content-between\\\\\\\\\\\\\\\">\\\\\\\\n        <div class=\\\\\\\\\\\\\\\"d-flex align-items-center flex-wrap\\\\\\\\\\\\\\\">\\\\\\\\n          <ProfileCardContainer>\\\\\\\\n            <Widget\\\\\\\\n              src={\\\\\\\\n                \\\\\\\\\\\\\\\"devhub.near/widget/devhub.components.molecule.ProfileCard\\\\\\\\\\\\\\\"\\\\\\\\n              }\\\\\\\\n              props={{\\\\\\\\n                accountId: post.author_id,\\\\\\\\n              }}\\\\\\\\n            />\\\\\\\\n          </ProfileCardContainer>\\\\\\\\n\\\\\\\\n          <div class=\\\\\\\\\\\\\\\"d-flex ms-auto\\\\\\\\\\\\\\\">\\\\\\\\n            {editControl}\\\\\\\\n            {timestamp}\\\\\\\\n\\\\\\\\n            <Widget\\\\\\\\n              src={\\\\\\\\\\\\\\\"devhub.near/widget/devhub.entity.post.History\\\\\\\\\\\\\\\"}\\\\\\\\n              props={{\\\\\\\\n                post,\\\\\\\\n                timestamp: currentTimestamp,\\\\\\\\n              }}\\\\\\\\n            />\\\\\\\\n            {shareButton}\\\\\\\\n          </div>\\\\\\\\n        </div>\\\\\\\\n      </div>\\\\\\\\n    </small>\\\\\\\\n  </div>\\\\\\\\n);\\\\\\\\n\\\\\\\\n// const emptyIcons = {\\\\\\\\n//   Idea: \\\\\\\\\\\\\\\"bi-lightbulb\\\\\\\\\\\\\\\",\\\\\\\\n//   Comment: \\\\\\\\\\\\\\\"bi-chat\\\\\\\\\\\\\\\",\\\\\\\\n//   Solution: \\\\\\\\\\\\\\\"bi-rocket\\\\\\\\\\\\\\\",\\\\\\\\n//   Attestation: \\\\\\\\\\\\\\\"bi-check-circle\\\\\\\\\\\\\\\",\\\\\\\\n//   Sponsorship: \\\\\\\\\\\\\\\"bi-cash-coin\\\\\\\\\\\\\\\",\\\\\\\\n//   Github: \\\\\\\\\\\\\\\"bi-github\\\\\\\\\\\\\\\",\\\\\\\\n//   Like: \\\\\\\\\\\\\\\"bi-heart\\\\\\\\\\\\\\\",\\\\\\\\n//   Reply: \\\\\\\\\\\\\\\"bi-reply\\\\\\\\\\\\\\\",\\\\\\\\n// };\\\\\\\\n\\\\\\\\nconst emptyIcons = {\\\\\\\\n  Idea: \\\\\\\\\\\\\\\"\\\\\\\\u{1f4a1}\\\\\\\\\\\\\\\",\\\\\\\\n  Comment: \\\\\\\\\\\\\\\"bi-chat\\\\\\\\\\\\\\\",\\\\\\\\n  Solution: \\\\\\\\\\\\\\\"\\\\\\\\u{1f680}\\\\\\\\\\\\\\\",\\\\\\\\n  Attestation: \\\\\\\\\\\\\\\"\\\\\\\\u{2705}\\\\\\\\\\\\\\\",\\\\\\\\n  Sponsorship: \\\\\\\\\\\\\\\"\\\\\\\\u{1fa99}\\\\\\\\\\\\\\\",\\\\\\\\n  Github: \\\\\\\\\\\\\\\"bi-github\\\\\\\\\\\\\\\",\\\\\\\\n  Like: \\\\\\\\\\\\\\\"bi-heart\\\\\\\\\\\\\\\",\\\\\\\\n  Reply: \\\\\\\\\\\\\\\"bi-reply\\\\\\\\\\\\\\\",\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst fillIcons = {\\\\\\\\n  Idea: \\\\\\\\\\\\\\\"\\\\\\\\u{1f4a1}\\\\\\\\\\\\\\\",\\\\\\\\n  Comment: \\\\\\\\\\\\\\\"bi-chat-fill\\\\\\\\\\\\\\\",\\\\\\\\n  Solution: \\\\\\\\\\\\\\\"\\\\\\\\u{1f680}\\\\\\\\\\\\\\\",\\\\\\\\n  Attestation: \\\\\\\\\\\\\\\"\\\\\\\\u{2705}\\\\\\\\\\\\\\\",\\\\\\\\n  Sponsorship: \\\\\\\\\\\\\\\"\\\\\\\\u{1fa99}\\\\\\\\\\\\\\\",\\\\\\\\n  Github: \\\\\\\\\\\\\\\"bi-github\\\\\\\\\\\\\\\",\\\\\\\\n  Like: \\\\\\\\\\\\\\\"bi-heart-fill\\\\\\\\\\\\\\\",\\\\\\\\n  Reply: \\\\\\\\\\\\\\\"bi-reply-fill\\\\\\\\\\\\\\\",\\\\\\\\n};\\\\\\\\n\\\\\\\\n// Trigger saving this widget.\\\\\\\\n\\\\\\\\nconst borders = {\\\\\\\\n  Idea: \\\\\\\\\\\\\\\"border-light\\\\\\\\\\\\\\\",\\\\\\\\n  Comment: \\\\\\\\\\\\\\\"border-light\\\\\\\\\\\\\\\",\\\\\\\\n  Solution: \\\\\\\\\\\\\\\"border-light\\\\\\\\\\\\\\\",\\\\\\\\n  Attestation: \\\\\\\\\\\\\\\"border-light\\\\\\\\\\\\\\\",\\\\\\\\n  Sponsorship: \\\\\\\\\\\\\\\"border-light\\\\\\\\\\\\\\\",\\\\\\\\n  Github: \\\\\\\\\\\\\\\"border-light\\\\\\\\\\\\\\\",\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst containsLike = props.isPreview\\\\\\\\n  ? false\\\\\\\\n  : post.likes.find((l) => l.author_id == context.accountId);\\\\\\\\nconst likeBtnClass = containsLike ? fillIcons.Like : emptyIcons.Like;\\\\\\\\n// This must be outside onLike, because Near.view returns null at first, and when the view call finished, it returns true/false.\\\\\\\\n// If checking this inside onLike, it will give `null` and we cannot tell the result is true or false.\\\\\\\\nlet grantNotify = Near.view(\\\\\\\\\\\\\\\"social.near\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"is_write_permission_granted\\\\\\\\\\\\\\\", {\\\\\\\\n  predecessor_id: \\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\",\\\\\\\\n  key: context.accountId + \\\\\\\\\\\\\\\"/index/notify\\\\\\\\\\\\\\\",\\\\\\\\n});\\\\\\\\n\\\\\\\\nif (grantNotify === null) {\\\\\\\\n  return;\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst onLike = () => {\\\\\\\\n  if (!context.accountId) {\\\\\\\\n    return;\\\\\\\\n  }\\\\\\\\n\\\\\\\\n  let likeTxn = [\\\\\\\\n    {\\\\\\\\n      contractName: \\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\",\\\\\\\\n      methodName: \\\\\\\\\\\\\\\"add_like\\\\\\\\\\\\\\\",\\\\\\\\n      args: {\\\\\\\\n        post_id: postId,\\\\\\\\n      },\\\\\\\\n      gas: Big(10).pow(14),\\\\\\\\n    },\\\\\\\\n  ];\\\\\\\\n\\\\\\\\n  if (grantNotify === false) {\\\\\\\\n    likeTxn.unshift({\\\\\\\\n      contractName: \\\\\\\\\\\\\\\"social.near\\\\\\\\\\\\\\\",\\\\\\\\n      methodName: \\\\\\\\\\\\\\\"grant_write_permission\\\\\\\\\\\\\\\",\\\\\\\\n      args: {\\\\\\\\n        predecessor_id: \\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\",\\\\\\\\n        keys: [context.accountId + \\\\\\\\\\\\\\\"/index/notify\\\\\\\\\\\\\\\"],\\\\\\\\n      },\\\\\\\\n      gas: Big(10).pow(14),\\\\\\\\n      deposit: Big(10).pow(22),\\\\\\\\n    });\\\\\\\\n  }\\\\\\\\n\\\\\\\\n  Near.call(likeTxn);\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst btnCreatorWidget = (postType, icon, name, desc) => {\\\\\\\\n  return (\\\\\\\\n    <li class=\\\\\\\\\\\\\\\"py-1\\\\\\\\\\\\\\\">\\\\\\\\n      <a\\\\\\\\n        class=\\\\\\\\\\\\\\\"dropdown-item text-decoration-none d-flex align-items-center lh-sm\\\\\\\\\\\\\\\"\\\\\\\\n        style={{ color: \\\\\\\\\\\\\\\"rgb(55,109,137)\\\\\\\\\\\\\\\" }}\\\\\\\\n        role=\\\\\\\\\\\\\\\"button\\\\\\\\\\\\\\\"\\\\\\\\n        onClick={() =>\\\\\\\\n          State.update({ postType, editorType: \\\\\\\\\\\\\\\"CREATE\\\\\\\\\\\\\\\", showEditor: true })\\\\\\\\n        }\\\\\\\\n      >\\\\\\\\n        <i class={`bi ${icon}`} style={{ fontSize: \\\\\\\\\\\\\\\"1.5rem\\\\\\\\\\\\\\\" }}>\\\\\\\\n          {\\\\\\\\\\\\\\\" \\\\\\\\\\\\\\\"}\\\\\\\\n        </i>\\\\\\\\n\\\\\\\\n        <div class=\\\\\\\\\\\\\\\"ps-2 text-wrap\\\\\\\\\\\\\\\" style={{ width: \\\\\\\\\\\\\\\"18rem\\\\\\\\\\\\\\\" }}>\\\\\\\\n          <div>{name}</div>\\\\\\\\n          <small class=\\\\\\\\\\\\\\\"fw-light text-secondary\\\\\\\\\\\\\\\">{desc}</small>\\\\\\\\n        </div>\\\\\\\\n      </a>\\\\\\\\n    </li>\\\\\\\\n  );\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst FooterButtonsContianer = styled.div`\\\\\\\\n  width: 66.66666667%;\\\\\\\\n\\\\\\\\n  @media screen and (max-width: 960px) {\\\\\\\\n    width: 100%;\\\\\\\\n  }\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst buttonsFooter = props.isPreview ? null : (\\\\\\\\n  <div class=\\\\\\\\\\\\\\\"row\\\\\\\\\\\\\\\" key=\\\\\\\\\\\\\\\"buttons-footer\\\\\\\\\\\\\\\">\\\\\\\\n    <FooterButtonsContianer>\\\\\\\\n      <div class=\\\\\\\\\\\\\\\"btn-group\\\\\\\\\\\\\\\" role=\\\\\\\\\\\\\\\"group\\\\\\\\\\\\\\\" aria-label=\\\\\\\\\\\\\\\"Basic outlined example\\\\\\\\\\\\\\\">\\\\\\\\n        <ButtonWithHover\\\\\\\\n          type=\\\\\\\\\\\\\\\"button\\\\\\\\\\\\\\\"\\\\\\\\n          class=\\\\\\\\\\\\\\\"btn d-flex align-items-center\\\\\\\\\\\\\\\"\\\\\\\\n          style={{ border: \\\\\\\\\\\\\\\"0px\\\\\\\\\\\\\\\" }}\\\\\\\\n          onClick={onLike}\\\\\\\\n        >\\\\\\\\n          <i class={`bi ${likeBtnClass}`}> </i>\\\\\\\\n          {post.likes.length == 0 ? (\\\\\\\\n            \\\\\\\\\\\\\\\"Like\\\\\\\\\\\\\\\"\\\\\\\\n          ) : (\\\\\\\\n            <Widget\\\\\\\\n              src=\\\\\\\\\\\\\\\"devhub.near/widget/devhub.components.layout.LikeButton.Faces\\\\\\\\\\\\\\\"\\\\\\\\n              props={{\\\\\\\\n                likesByUsers: Object.fromEntries(\\\\\\\\n                  post.likes.map(({ author_id }) => [author_id, \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\"])\\\\\\\\n                ),\\\\\\\\n              }}\\\\\\\\n            />\\\\\\\\n          )}\\\\\\\\n        </ButtonWithHover>\\\\\\\\n\\\\\\\\n        <div class=\\\\\\\\\\\\\\\"btn-group\\\\\\\\\\\\\\\" role=\\\\\\\\\\\\\\\"group\\\\\\\\\\\\\\\">\\\\\\\\n          <ButtonWithHover\\\\\\\\n            type=\\\\\\\\\\\\\\\"button\\\\\\\\\\\\\\\"\\\\\\\\n            class=\\\\\\\\\\\\\\\"btn\\\\\\\\\\\\\\\"\\\\\\\\n            style={{ border: \\\\\\\\\\\\\\\"0px\\\\\\\\\\\\\\\" }}\\\\\\\\n            data-bs-toggle=\\\\\\\\\\\\\\\"dropdown\\\\\\\\\\\\\\\"\\\\\\\\n            aria-expanded=\\\\\\\\\\\\\\\"false\\\\\\\\\\\\\\\"\\\\\\\\n          >\\\\\\\\n            \\\\\\\\u{21aa} Reply\\\\\\\\n          </ButtonWithHover>\\\\\\\\n          <ul class=\\\\\\\\\\\\\\\"dropdown-menu\\\\\\\\\\\\\\\">\\\\\\\\n            {btnCreatorWidget(\\\\\\\\n              \\\\\\\\\\\\\\\"Idea\\\\\\\\\\\\\\\",\\\\\\\\n              emptyIcons.Idea,\\\\\\\\n              \\\\\\\\\\\\\\\"Idea\\\\\\\\\\\\\\\",\\\\\\\\n              \\\\\\\\\\\\\\\"Get feedback from the community about a problem, opportunity, or need.\\\\\\\\\\\\\\\"\\\\\\\\n            )}\\\\\\\\n            {btnCreatorWidget(\\\\\\\\n              \\\\\\\\\\\\\\\"Solution\\\\\\\\\\\\\\\",\\\\\\\\n              emptyIcons.Solution,\\\\\\\\n              \\\\\\\\\\\\\\\"Solution\\\\\\\\\\\\\\\",\\\\\\\\n              \\\\\\\\\\\\\\\"Provide a specific proposal or implementation to an idea, optionally requesting funding.\\\\\\\\\\\\\\\"\\\\\\\\n            )}\\\\\\\\n            {btnCreatorWidget(\\\\\\\\n              \\\\\\\\\\\\\\\"Attestation\\\\\\\\\\\\\\\",\\\\\\\\n              emptyIcons.Attestation,\\\\\\\\n              \\\\\\\\\\\\\\\"Attestation\\\\\\\\\\\\\\\",\\\\\\\\n              \\\\\\\\\\\\\\\"Formally review or validate a solution as a recognized expert.\\\\\\\\\\\\\\\"\\\\\\\\n            )}\\\\\\\\n            {btnCreatorWidget(\\\\\\\\n              \\\\\\\\\\\\\\\"Sponsorship\\\\\\\\\\\\\\\",\\\\\\\\n              emptyIcons.Sponsorship,\\\\\\\\n              \\\\\\\\\\\\\\\"Sponsorship\\\\\\\\\\\\\\\",\\\\\\\\n              \\\\\\\\\\\\\\\"Offer to fund projects, events, or proposals that match your needs.\\\\\\\\\\\\\\\"\\\\\\\\n            )}\\\\\\\\n            <li>\\\\\\\\n              <hr class=\\\\\\\\\\\\\\\"dropdown-divider\\\\\\\\\\\\\\\" />\\\\\\\\n            </li>\\\\\\\\n            {btnCreatorWidget(\\\\\\\\n              \\\\\\\\\\\\\\\"Comment\\\\\\\\\\\\\\\",\\\\\\\\n              emptyIcons.Comment,\\\\\\\\n              \\\\\\\\\\\\\\\"Comment\\\\\\\\\\\\\\\",\\\\\\\\n              \\\\\\\\\\\\\\\"Ask a question, provide information, or share a resource that is relevant to the thread.\\\\\\\\\\\\\\\"\\\\\\\\n            )}\\\\\\\\n          </ul>\\\\\\\\n        </div>\\\\\\\\n        {childPostIds.length > 0 && (\\\\\\\\n          <ButtonWithHover\\\\\\\\n            type=\\\\\\\\\\\\\\\"button\\\\\\\\\\\\\\\"\\\\\\\\n            class=\\\\\\\\\\\\\\\"btn\\\\\\\\\\\\\\\"\\\\\\\\n            style={{ border: \\\\\\\\\\\\\\\"0px\\\\\\\\\\\\\\\" }}\\\\\\\\n            data-bs-toggle=\\\\\\\\\\\\\\\"collapse\\\\\\\\\\\\\\\"\\\\\\\\n            href={`#collapseChildPosts${postId}`}\\\\\\\\n            aria-expanded={defaultExpanded}\\\\\\\\n            aria-controls={`collapseChildPosts${postId}`}\\\\\\\\n            onClick={() =>\\\\\\\\n              State.update({ expandReplies: !state.expandReplies })\\\\\\\\n            }\\\\\\\\n          >\\\\\\\\n            <i\\\\\\\\n              class={`bi bi-chevron-${state.expandReplies ? \\\\\\\\\\\\\\\"up\\\\\\\\\\\\\\\" : \\\\\\\\\\\\\\\"down\\\\\\\\\\\\\\\"}`}\\\\\\\\n            ></i>{\\\\\\\\\\\\\\\" \\\\\\\\\\\\\\\"}\\\\\\\\n            {`${state.expandReplies ? \\\\\\\\\\\\\\\"Collapse\\\\\\\\\\\\\\\" : \\\\\\\\\\\\\\\"Expand\\\\\\\\\\\\\\\"} Replies (${\\\\\\\\n              childPostIds.length\\\\\\\\n            })`}\\\\\\\\n          </ButtonWithHover>\\\\\\\\n        )}\\\\\\\\n\\\\\\\\n        {isUnderPost || !parentId ? (\\\\\\\\n          <div key=\\\\\\\\\\\\\\\"link-to-parent\\\\\\\\\\\\\\\"></div>\\\\\\\\n        ) : (\\\\\\\\n          <Link\\\\\\\\n            to={href({\\\\\\\\n              widgetSrc: \\\\\\\\\\\\\\\"devhub.near/widget/app\\\\\\\\\\\\\\\",\\\\\\\\n              params: { page: \\\\\\\\\\\\\\\"post\\\\\\\\\\\\\\\", id: parentId },\\\\\\\\n            })}\\\\\\\\n          >\\\\\\\\n            <ButtonWithHover\\\\\\\\n              type=\\\\\\\\\\\\\\\"button\\\\\\\\\\\\\\\"\\\\\\\\n              style={{ border: \\\\\\\\\\\\\\\"0px\\\\\\\\\\\\\\\" }}\\\\\\\\n              className=\\\\\\\\\\\\\\\"btn\\\\\\\\\\\\\\\"\\\\\\\\n              key=\\\\\\\\\\\\\\\"link-to-parent\\\\\\\\\\\\\\\"\\\\\\\\n            >\\\\\\\\n              <i class=\\\\\\\\\\\\\\\"bi bi-arrow-90deg-up\\\\\\\\\\\\\\\"></i>Go to parent\\\\\\\\n            </ButtonWithHover>\\\\\\\\n          </Link>\\\\\\\\n        )}\\\\\\\\n      </div>\\\\\\\\n    </FooterButtonsContianer>\\\\\\\\n  </div>\\\\\\\\n);\\\\\\\\n\\\\\\\\nconst tokenMapping = {\\\\\\\\n  NEAR: \\\\\\\\\\\\\\\"NEAR\\\\\\\\\\\\\\\",\\\\\\\\n  USDT: {\\\\\\\\n    NEP141: {\\\\\\\\n      address: \\\\\\\\\\\\\\\"usdt.tether-token.near\\\\\\\\\\\\\\\",\\\\\\\\n    },\\\\\\\\n  },\\\\\\\\n  USDC: {\\\\\\\\n    NEP141: {\\\\\\\\n      address:\\\\\\\\n        \\\\\\\\\\\\\\\"17208628f84f5d6ad33f0da3bbbeb27ffcb398eac501a31bd6ad2011e36133a1\\\\\\\\\\\\\\\",\\\\\\\\n    },\\\\\\\\n  },\\\\\\\\n  // Add more tokens here as needed\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst reverseTokenMapping = Object.keys(tokenMapping).reduce(\\\\\\\\n  (reverseMap, key) => {\\\\\\\\n    const value = tokenMapping[key];\\\\\\\\n    if (typeof value === \\\\\\\\\\\\\\\"object\\\\\\\\\\\\\\\") {\\\\\\\\n      reverseMap[JSON.stringify(value)] = key;\\\\\\\\n    }\\\\\\\\n    return reverseMap;\\\\\\\\n  },\\\\\\\\n  {}\\\\\\\\n);\\\\\\\\n\\\\\\\\nfunction tokenResolver(token) {\\\\\\\\n  if (typeof token === \\\\\\\\\\\\\\\"string\\\\\\\\\\\\\\\") {\\\\\\\\n    return token;\\\\\\\\n  } else if (typeof token === \\\\\\\\\\\\\\\"object\\\\\\\\\\\\\\\") {\\\\\\\\n    const tokenString = reverseTokenMapping[JSON.stringify(token)];\\\\\\\\n    return tokenString || null;\\\\\\\\n  } else {\\\\\\\\n    return null; // Invalid input\\\\\\\\n  }\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst isDraft =\\\\\\\\n  (draftState?.parent_post_id === postId &&\\\\\\\\n    draftState?.postType === state.postType) ||\\\\\\\\n  (draftState?.edit_post_id === postId &&\\\\\\\\n    draftState?.postType === state.postType);\\\\\\\\n\\\\\\\\nconst toggleEditor = () => {\\\\\\\\n  State.update({ showEditor: !state.showEditor });\\\\\\\\n};\\\\\\\\n\\\\\\\\nlet amount = null;\\\\\\\\nlet token = null;\\\\\\\\nlet supervisor = null;\\\\\\\\n\\\\\\\\nif (state.postType === \\\\\\\\\\\\\\\"Solution\\\\\\\\\\\\\\\") {\\\\\\\\n  const amountMatch = post.snapshot.description.match(\\\\\\\\n    /Requested amount: (\\\\\\\\\\\\\\\\d+(\\\\\\\\\\\\\\\\.\\\\\\\\\\\\\\\\d+)?) (\\\\\\\\\\\\\\\\w+)/\\\\\\\\n  );\\\\\\\\n  amount = amountMatch ? parseFloat(amountMatch[1]) : null;\\\\\\\\n  token = amountMatch ? amountMatch[3] : null;\\\\\\\\n\\\\\\\\n  const sponsorMatch = post.snapshot.description.match(\\\\\\\\n    /Requested sponsor: @([^\\\\\\\\\\\\\\\\s]+)/\\\\\\\\n  );\\\\\\\\n  supervisor = sponsorMatch ? sponsorMatch[1] : null;\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst seekingFunding = amount !== null || token !== null || supervisor !== null;\\\\\\\\n\\\\\\\\nfunction Editor() {\\\\\\\\n  return (\\\\\\\\n    <div class=\\\\\\\\\\\\\\\"row\\\\\\\\\\\\\\\" id={`accordion${postId}`} key=\\\\\\\\\\\\\\\"editors-footer\\\\\\\\\\\\\\\">\\\\\\\\n      <div\\\\\\\\n        key={`${state.postType}${state.editorType}${postId}`}\\\\\\\\n        className={\\\\\\\\\\\\\\\"w-100\\\\\\\\\\\\\\\"}\\\\\\\\n      >\\\\\\\\n        {state.editorType === \\\\\\\\\\\\\\\"CREATE\\\\\\\\\\\\\\\" ? (\\\\\\\\n          <>\\\\\\\\n            <Widget\\\\\\\\n              src={\\\\\\\\\\\\\\\"devhub.near/widget/devhub.entity.post.PostEditor\\\\\\\\\\\\\\\"}\\\\\\\\n              props={{\\\\\\\\n                postType: state.postType,\\\\\\\\n                onDraftStateChange,\\\\\\\\n                draftState:\\\\\\\\n                  draftState?.parent_post_id == postId ? draftState : undefined,\\\\\\\\n                parentId: postId,\\\\\\\\n                mode: \\\\\\\\\\\\\\\"Create\\\\\\\\\\\\\\\",\\\\\\\\n                toggleEditor: toggleEditor,\\\\\\\\n                transactionHashes: props.transactionHashes,\\\\\\\\n              }}\\\\\\\\n            />\\\\\\\\n          </>\\\\\\\\n        ) : (\\\\\\\\n          <>\\\\\\\\n            <Widget\\\\\\\\n              src={\\\\\\\\\\\\\\\"devhub.near/widget/devhub.entity.post.PostEditor\\\\\\\\\\\\\\\"}\\\\\\\\n              props={{\\\\\\\\n                postType: state.postType,\\\\\\\\n                postId,\\\\\\\\n                mode: \\\\\\\\\\\\\\\"Edit\\\\\\\\\\\\\\\",\\\\\\\\n                author_id: post.author_id,\\\\\\\\n                labels: post.snapshot.labels,\\\\\\\\n                name: post.snapshot.name,\\\\\\\\n                description: post.snapshot.description,\\\\\\\\n                amount: post.snapshot.amount || amount,\\\\\\\\n                token: tokenResolver(post.snapshot.sponsorship_token || token),\\\\\\\\n                supervisor:\\\\\\\\n                  post.snapshot.post.snapshot.supervisor || supervisor,\\\\\\\\n                seekingFunding: seekingFunding,\\\\\\\\n                githubLink: post.snapshot.github_link,\\\\\\\\n                onDraftStateChange,\\\\\\\\n                draftState:\\\\\\\\n                  draftState?.edit_post_id == postId ? draftState : undefined,\\\\\\\\n                toggleEditor: toggleEditor,\\\\\\\\n                transactionHashes: props.transactionHashes,\\\\\\\\n              }}\\\\\\\\n            />\\\\\\\\n          </>\\\\\\\\n        )}\\\\\\\\n      </div>\\\\\\\\n    </div>\\\\\\\\n  );\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst renamedPostType =\\\\\\\\n  snapshot.post_type == \\\\\\\\\\\\\\\"Submission\\\\\\\\\\\\\\\" ? \\\\\\\\\\\\\\\"Solution\\\\\\\\\\\\\\\" : snapshot.post_type;\\\\\\\\n\\\\\\\\nconst tags = post.snapshot.labels ? (\\\\\\\\n  <div\\\\\\\\n    class=\\\\\\\\\\\\\\\"card-title d-flex flex-wrap align-items-center\\\\\\\\\\\\\\\"\\\\\\\\n    style={{ margin: \\\\\\\\\\\\\\\"20px 0\\\\\\\\\\\\\\\" }}\\\\\\\\n    key=\\\\\\\\\\\\\\\"post-labels\\\\\\\\\\\\\\\"\\\\\\\\n  >\\\\\\\\n    {post.snapshot.labels.map((tag, idx) => (\\\\\\\\n      <div className=\\\\\\\\\\\\\\\"d-flex align-items-center my-3 me-3\\\\\\\\\\\\\\\">\\\\\\\\n        <Link\\\\\\\\n          to={href({\\\\\\\\n            widgetSrc: \\\\\\\\\\\\\\\"devhub.near/widget/app\\\\\\\\\\\\\\\",\\\\\\\\n            params: { page: \\\\\\\\\\\\\\\"feed\\\\\\\\\\\\\\\", tag: tag },\\\\\\\\n          })}\\\\\\\\n        >\\\\\\\\n          <div\\\\\\\\n            onClick={() => {\\\\\\\\n              if (typeof props.updateTagInParent === \\\\\\\\\\\\\\\"function\\\\\\\\\\\\\\\") {\\\\\\\\n                props.updateTagInParent(tag);\\\\\\\\n              }\\\\\\\\n            }}\\\\\\\\n            className=\\\\\\\\\\\\\\\"d-flex gap-3 align-items-center\\\\\\\\\\\\\\\"\\\\\\\\n            style={{ cursor: \\\\\\\\\\\\\\\"pointer\\\\\\\\\\\\\\\", textDecoration: \\\\\\\\\\\\\\\"none\\\\\\\\\\\\\\\" }}\\\\\\\\n          >\\\\\\\\n            <Widget\\\\\\\\n              src={\\\\\\\\\\\\\\\"devhub.near/widget/devhub.components.atom.Tag\\\\\\\\\\\\\\\"}\\\\\\\\n              props={{\\\\\\\\n                tag,\\\\\\\\n                black: true,\\\\\\\\n              }}\\\\\\\\n            />\\\\\\\\n          </div>\\\\\\\\n        </Link>\\\\\\\\n        {idx !== post.snapshot.labels.length - 1 && (\\\\\\\\n          <span className=\\\\\\\\\\\\\\\"ms-3\\\\\\\\\\\\\\\">\\\\\\\\u{2022}</span>\\\\\\\\n        )}\\\\\\\\n      </div>\\\\\\\\n    ))}\\\\\\\\n  </div>\\\\\\\\n) : (\\\\\\\\n  <div key=\\\\\\\\\\\\\\\"post-labels\\\\\\\\\\\\\\\"></div>\\\\\\\\n);\\\\\\\\n\\\\\\\\nconst Title = styled.h5`\\\\\\\\n  margin: 1rem 0;\\\\\\\\n\\\\\\\\n  color: #151515;\\\\\\\\n  font-size: 1.15rem;\\\\\\\\n  font-style: normal;\\\\\\\\n  font-weight: 700;\\\\\\\\n  line-height: 1.625rem; /* 55.556% */\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst postTitle =\\\\\\\\n  snapshot.post_type == \\\\\\\\\\\\\\\"Comment\\\\\\\\\\\\\\\" ? (\\\\\\\\n    <div key=\\\\\\\\\\\\\\\"post-title\\\\\\\\\\\\\\\"></div>\\\\\\\\n  ) : (\\\\\\\\n    <Title key=\\\\\\\\\\\\\\\"post-title\\\\\\\\\\\\\\\">\\\\\\\\n      {emptyIcons[snapshot.post_type]} {renamedPostType}: {snapshot.name}\\\\\\\\n    </Title>\\\\\\\\n  );\\\\\\\\n\\\\\\\\nconst postExtra =\\\\\\\\n  snapshot.post_type == \\\\\\\\\\\\\\\"Sponsorship\\\\\\\\\\\\\\\" ? (\\\\\\\\n    <div key=\\\\\\\\\\\\\\\"post-extra\\\\\\\\\\\\\\\">\\\\\\\\n      <h6 class=\\\\\\\\\\\\\\\"card-subtitle mb-2 text-muted\\\\\\\\\\\\\\\">\\\\\\\\n        Maximum amount: {snapshot.amount}{\\\\\\\\\\\\\\\" \\\\\\\\\\\\\\\"}\\\\\\\\n        {tokenResolver(snapshot.sponsorship_token)}\\\\\\\\n      </h6>\\\\\\\\n      <h6 class=\\\\\\\\\\\\\\\"card-subtitle mb-2 text-muted\\\\\\\\\\\\\\\">\\\\\\\\n        Supervisor:{\\\\\\\\\\\\\\\" \\\\\\\\\\\\\\\"}\\\\\\\\n        <Widget\\\\\\\\n          src={\\\\\\\\\\\\\\\"neardevgov.near/widget/ProfileLine\\\\\\\\\\\\\\\"}\\\\\\\\n          props={{ accountId: snapshot.supervisor }}\\\\\\\\n        />\\\\\\\\n      </h6>\\\\\\\\n    </div>\\\\\\\\n  ) : (\\\\\\\\n    <div></div>\\\\\\\\n  );\\\\\\\\n\\\\\\\\nconst childPostHasDraft = childPostIds.find(\\\\\\\\n  (childId) =>\\\\\\\\n    childId == draftState?.edit_post_id || childId == draftState?.parent_post_id\\\\\\\\n);\\\\\\\\nif (\\\\\\\\n  (childPostHasDraft || state.childrenOfChildPostsHasDraft) &&\\\\\\\\n  props.expandParent\\\\\\\\n) {\\\\\\\\n  props.expandParent();\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst postsList =\\\\\\\\n  props.isPreview || childPostIds.length == 0 ? (\\\\\\\\n    <div key=\\\\\\\\\\\\\\\"posts-list\\\\\\\\\\\\\\\"></div>\\\\\\\\n  ) : (\\\\\\\\n    <div class=\\\\\\\\\\\\\\\"row\\\\\\\\\\\\\\\" key=\\\\\\\\\\\\\\\"posts-list\\\\\\\\\\\\\\\">\\\\\\\\n      <div\\\\\\\\n        class={`collapse mt-3 ${\\\\\\\\n          defaultExpanded ||\\\\\\\\n          childPostHasDraft ||\\\\\\\\n          state.childrenOfChildPostsHasDraft\\\\\\\\n            ? \\\\\\\\\\\\\\\"show\\\\\\\\\\\\\\\"\\\\\\\\n            : \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\"\\\\\\\\n        }`}\\\\\\\\n        id={`collapseChildPosts${postId}`}\\\\\\\\n      >\\\\\\\\n        {childPostIds.map((childId) => (\\\\\\\\n          <div key={childId} style={{ marginBottom: \\\\\\\\\\\\\\\"0.5rem\\\\\\\\\\\\\\\" }}>\\\\\\\\n            <Widget\\\\\\\\n              src=\\\\\\\\\\\\\\\"devhub.near/widget/devhub.entity.post.Post\\\\\\\\\\\\\\\"\\\\\\\\n              props={{\\\\\\\\n                id: childId,\\\\\\\\n                isUnderPost: true,\\\\\\\\n                onDraftStateChange,\\\\\\\\n                draftState,\\\\\\\\n                expandParent: () =>\\\\\\\\n                  State.update({ childrenOfChildPostsHasDraft: true }),\\\\\\\\n                referral: `subpost${childId}of${postId}`,\\\\\\\\n              }}\\\\\\\\n            />\\\\\\\\n          </div>\\\\\\\\n        ))}\\\\\\\\n      </div>\\\\\\\\n    </div>\\\\\\\\n  );\\\\\\\\n\\\\\\\\nconst LimitedMarkdown = styled.div`\\\\\\\\n  max-height: 20em;\\\\\\\\n`;\\\\\\\\n\\\\\\\\n// Determine if located in the post page.\\\\\\\\nconst isInList = props.isInList;\\\\\\\\nconst contentArray = snapshot.description.split(\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\");\\\\\\\\nconst needClamp = isInList && contentArray.length > 5;\\\\\\\\n\\\\\\\\ninitState({\\\\\\\\n  clamp: needClamp,\\\\\\\\n  expandReplies: defaultExpanded,\\\\\\\\n});\\\\\\\\n\\\\\\\\nconst clampedContent = needClamp\\\\\\\\n  ? contentArray.slice(0, 3).join(\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\")\\\\\\\\n  : snapshot.description;\\\\\\\\n\\\\\\\\nconst SeeMore = styled.a`\\\\\\\\n  cursor: pointer;\\\\\\\\n  color: #00b774 !important;\\\\\\\\n  font-weight: bold;\\\\\\\\n`;\\\\\\\\n\\\\\\\\n// Should make sure the posts under the currently top viewed post are limited in size.\\\\\\\\nconst descriptionArea = isUnderPost ? (\\\\\\\\n  <LimitedMarkdown className=\\\\\\\\\\\\\\\"overflow-auto\\\\\\\\\\\\\\\" key=\\\\\\\\\\\\\\\"description-area\\\\\\\\\\\\\\\">\\\\\\\\n    {/* {widget(\\\\\\\\\\\\\\\"components.molecule.markdown-viewer\\\\\\\\\\\\\\\", {\\\\\\\\n      text: snapshot.description,\\\\\\\\n    })} */}\\\\\\\\n    <Widget\\\\\\\\n      src={\\\\\\\\\\\\\\\"devhub.near/widget/devhub.components.molecule.MarkdownViewer\\\\\\\\\\\\\\\"}\\\\\\\\n      props={{\\\\\\\\n        text: snapshot.description,\\\\\\\\n      }}\\\\\\\\n    />\\\\\\\\n  </LimitedMarkdown>\\\\\\\\n) : (\\\\\\\\n  <div className=\\\\\\\\\\\\\\\"w-100 overflow-auto\\\\\\\\\\\\\\\">\\\\\\\\n    <div class={state.clamp ? \\\\\\\\\\\\\\\"clamp\\\\\\\\\\\\\\\" : \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\"}>\\\\\\\\n      {/* {widget(\\\\\\\\\\\\\\\"components.molecule.markdown-viewer\\\\\\\\\\\\\\\", {\\\\\\\\n        text: state.clamp ? clampedContent : snapshot.description,\\\\\\\\n      })} */}\\\\\\\\n      <Widget\\\\\\\\n        src={\\\\\\\\\\\\\\\"devhub.near/widget/devhub.components.molecule.MarkdownViewer\\\\\\\\\\\\\\\"}\\\\\\\\n        props={{\\\\\\\\n          text: state.clamp ? clampedContent : snapshot.description,\\\\\\\\n        }}\\\\\\\\n      />\\\\\\\\n    </div>\\\\\\\\n    {state.clamp ? (\\\\\\\\n      <div class=\\\\\\\\\\\\\\\"d-flex justify-content-start\\\\\\\\\\\\\\\">\\\\\\\\n        <SeeMore onClick={() => State.update({ clamp: false })}>\\\\\\\\n          See more\\\\\\\\n        </SeeMore>\\\\\\\\n      </div>\\\\\\\\n    ) : (\\\\\\\\n      <></>\\\\\\\\n    )}\\\\\\\\n  </div>\\\\\\\\n);\\\\\\\\n\\\\\\\\nconst timestampElement = (_snapshot) => {\\\\\\\\n  return (\\\\\\\\n    <Link\\\\\\\\n      class=\\\\\\\\\\\\\\\"text-muted\\\\\\\\\\\\\\\"\\\\\\\\n      href={href({\\\\\\\\n        widgetSrc: \\\\\\\\\\\\\\\"devhub.near/widget/app\\\\\\\\\\\\\\\",\\\\\\\\n        params: {\\\\\\\\n          page: \\\\\\\\\\\\\\\"post\\\\\\\\\\\\\\\",\\\\\\\\n          id: postId,\\\\\\\\n          timestamp: _snapshot.timestamp,\\\\\\\\n          compareTimestamp: null,\\\\\\\\n          referral,\\\\\\\\n        },\\\\\\\\n      })}\\\\\\\\n    >\\\\\\\\n      {readableDate(_snapshot.timestamp / 1000000).substring(4)}\\\\\\\\n\\\\\\\\n      <Widget\\\\\\\\n        src=\\\\\\\\\\\\\\\"mob.near/widget/ProfileImage\\\\\\\\\\\\\\\"\\\\\\\\n        props={{\\\\\\\\n          accountId: _snapshot.editor_id,\\\\\\\\n          style: {\\\\\\\\n            width: \\\\\\\\\\\\\\\"1.25em\\\\\\\\\\\\\\\",\\\\\\\\n            height: \\\\\\\\\\\\\\\"1.25em\\\\\\\\\\\\\\\",\\\\\\\\n          },\\\\\\\\n          imageStyle: {\\\\\\\\n            transform: \\\\\\\\\\\\\\\"translateY(-12.5%)\\\\\\\\\\\\\\\",\\\\\\\\n          },\\\\\\\\n        }}\\\\\\\\n      />\\\\\\\\n      {_snapshot.editor_id.substring(0, 8)}\\\\\\\\n    </Link>\\\\\\\\n  );\\\\\\\\n};\\\\\\\\n\\\\\\\\nfunction combineText(_snapshot) {\\\\\\\\n  return (\\\\\\\\n    \\\\\\\\\\\\\\\"## \\\\\\\\\\\\\\\" +\\\\\\\\n    _snapshot.post_type +\\\\\\\\n    \\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\" +\\\\\\\\n    _snapshot.name +\\\\\\\\n    \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\" +\\\\\\\\n    _snapshot.description\\\\\\\\n  );\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst CardContainer = styled.div`\\\\\\\\n  padding: 1.5rem 3rem !important;\\\\\\\\n  border-radius: 16px !important;\\\\\\\\n  border: 1px solid rgba(129, 129, 129, 0.3) !important;\\\\\\\\n  background: #fffefe !important;\\\\\\\\n\\\\\\\\n  @media screen and (max-width: 960px) {\\\\\\\\n    padding: 1rem !important;\\\\\\\\n  }\\\\\\\\n`;\\\\\\\\n\\\\\\\\nreturn (\\\\\\\\n  <CardContainer className={`card ${borders[snapshot.post_type]} attractable`}>\\\\\\\\n    {header}\\\\\\\\n    <div className=\\\\\\\\\\\\\\\"card-body\\\\\\\\\\\\\\\" style={{ padding: 0 }}>\\\\\\\\n      {searchKeywords}\\\\\\\\n      {compareSnapshot ? (\\\\\\\\n        <div\\\\\\\\n          class=\\\\\\\\\\\\\\\"border rounded\\\\\\\\\\\\\\\"\\\\\\\\n          style={{ marginTop: \\\\\\\\\\\\\\\"16px\\\\\\\\\\\\\\\", marginBottom: \\\\\\\\\\\\\\\"16px\\\\\\\\\\\\\\\" }}\\\\\\\\n        >\\\\\\\\n          <div class=\\\\\\\\\\\\\\\"d-flex justify-content-end\\\\\\\\\\\\\\\" style={{ fontSize: \\\\\\\\\\\\\\\"12px\\\\\\\\\\\\\\\" }}>\\\\\\\\n            <div class=\\\\\\\\\\\\\\\"d-flex w-50 justify-content-end mt-1 me-2\\\\\\\\\\\\\\\">\\\\\\\\n              {timestampElement(snapshot)}\\\\\\\\n              {snapshot !== compareSnapshot && (\\\\\\\\n                <>\\\\\\\\n                  <div class=\\\\\\\\\\\\\\\"mx-1 align-self-center\\\\\\\\\\\\\\\">\\\\\\\\n                    <i class=\\\\\\\\\\\\\\\"bi bi-file-earmark-diff\\\\\\\\\\\\\\\" />\\\\\\\\n                  </div>\\\\\\\\n                  {timestampElement(compareSnapshot)}\\\\\\\\n                </>\\\\\\\\n              )}\\\\\\\\n            </div>\\\\\\\\n          </div>\\\\\\\\n          <div className=\\\\\\\\\\\\\\\"w-100 overflow-auto\\\\\\\\\\\\\\\">\\\\\\\\n            <Widget\\\\\\\\n              src=\\\\\\\\\\\\\\\"markeljan.near/widget/MarkdownDiff\\\\\\\\\\\\\\\"\\\\\\\\n              props={{\\\\\\\\n                post: post,\\\\\\\\n                currentCode: combineText(\\\\\\\\n                  swapTimestamps ? compareSnapshot : snapshot\\\\\\\\n                ),\\\\\\\\n                prevCode: combineText(\\\\\\\\n                  swapTimestamps ? snapshot : compareSnapshot\\\\\\\\n                ),\\\\\\\\n                showLineNumber: true,\\\\\\\\n              }}\\\\\\\\n            />\\\\\\\\n          </div>\\\\\\\\n        </div>\\\\\\\\n      ) : (\\\\\\\\n        <>\\\\\\\\n          {postTitle}\\\\\\\\n          {postExtra}\\\\\\\\n          {descriptionArea}\\\\\\\\n        </>\\\\\\\\n      )}\\\\\\\\n      {tags}\\\\\\\\n      {buttonsFooter}\\\\\\\\n      {!props.isPreview && (isDraft || state.showEditor) && <Editor />}\\\\\\\\n      {postsList}\\\\\\\\n    </div>\\\\\\\\n  </CardContainer>\\\\\\\\n);\\\\\\\\n\"}}}}}"
      }
    ],
    "actions_agg": {
      "deposit": 0
    },
    "outcomes": {
      "status": true
    },
    "outcomes_agg": {
      "transaction_fee": 1.1794873006265e+21
    }
  },
  {
    "id": "1894214882",
    "receipt_id": "HvLXGdHBE3Kg2KEnX7XbCt46fGLhzqMyCyZTUhv9C918",
    "predecessor_account_id": "system",
    "receiver_account_id": "devhub.near",
    "receipt_kind": "ACTION",
    "receipt_block": {
      "block_hash": "DGFm5LWiccr1YhJUN2arfdVs1uHBYL3ihfut4iKWbJTo",
      "block_height": 108958785,
      "block_timestamp": 1703714795673622300
    },
    "receipt_outcome": {
      "gas_burnt": 223182562500,
      "tokens_burnt": 0,
      "executor_account_id": "devhub.near",
      "status": true
    },
    "transaction_hash": "6d9iJGQ8qGSQCLJ9h2hBSNX3gr1UwcGSmTay5xMxjZFf",
    "included_in_block_hash": "ATa3PthnU5bxjMuM3kx68Q4sngtt6Hm5eNdorphW5Mt6",
    "block_timestamp": "1703714793736747169",
    "block": {
      "block_height": 108958783
    },
    "receipt_conversion_tokens_burnt": "248321564782000000000",
    "actions": [
      {
        "action": "TRANSFER",
        "method": null,
        "deposit": 1.8813299600474843e+23,
        "fee": 0,
        "args": null
      }
    ],
    "actions_agg": {
      "deposit": 0
    },
    "outcomes": {
      "status": true
    },
    "outcomes_agg": {
      "transaction_fee": 1.1794873006265e+21
    }
  },
  {
    "id": "1906032752",
    "receipt_id": "A3d5p2SB1Maj6s3QdNCcp65C7VRz37g9uYGvafT621rj",
    "predecessor_account_id": "devhub.near",
    "receiver_account_id": "social.near",
    "receipt_kind": "ACTION",
    "receipt_block": {
      "block_hash": "4JjdxX1wmcrfeSqLCA7SBPJ21r5whnwtRdTwtqVw8X69",
      "block_height": 109021216,
      "block_timestamp": 1703784609439248000
    },
    "receipt_outcome": {
      "gas_burnt": 17881827660313,
      "tokens_burnt": 1.7881827660313e+21,
      "executor_account_id": "social.near",
      "status": true
    },
    "transaction_hash": "gEgjfY3xJNUWChGmkrUXyP5kYvCnY9SWisRMMyvpVje",
    "included_in_block_hash": "Gx2gd1vx5oTpGY4gGKmXzZWGGyWcPw9qESYeDrfL4hXn",
    "block_timestamp": "1703784608008659608",
    "block": {
      "block_height": 109021215
    },
    "receipt_conversion_tokens_burnt": "251169697511200000000",
    "actions": [
      {
        "action": "FUNCTION_CALL",
        "method": "set",
        "deposit": 0,
        "fee": 1.7881827660313e+21,
        "args": "{\"data\": {\"devhub.near\": {\"widget\": {\"devhub.entity.post.Post\": {\"\": \"// Ideally, this would be a page\\\\\\\\n\\\\\\\\nconst { href } = VM.require(\\\\\\\\\\\\\\\"devhub.near/widget/core.lib.url\\\\\\\\\\\\\\\");\\\\\\\\n\\\\\\\\nconst { draftState, onDraftStateChange } = VM.require(\\\\\\\\n  \\\\\\\\\\\\\\\"devhub.near/widget/devhub.entity.post.draft\\\\\\\\\\\\\\\"\\\\\\\\n);\\\\\\\\n\\\\\\\\nif (!href) {\\\\\\\\n  return <p>Loading modules...</p>;\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst ButtonWithHover = styled.button`\\\\\\\\n  background-color: #fff;\\\\\\\\n  transition: all 300ms;\\\\\\\\n  border-radius: 0.5rem;\\\\\\\\n\\\\\\\\n  &:hover {\\\\\\\\n    background-color: #e9ecef;\\\\\\\\n    color: #000;\\\\\\\\n  }\\\\\\\\n\\\\\\\\n  &:disabled {\\\\\\\\n    background-color: #fff;\\\\\\\\n    color: #b7b7b7;\\\\\\\\n  }\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst postId = props.post.id ?? (props.id ? parseInt(props.id) : 0);\\\\\\\\n\\\\\\\\nconst post =\\\\\\\\n  props.post ??\\\\\\\\n  Near.view(\\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"get_post\\\\\\\\\\\\\\\", { post_id: postId });\\\\\\\\n\\\\\\\\nif (!post) {\\\\\\\\n  return <div>Loading ...</div>;\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst referral = props.referral;\\\\\\\\nconst currentTimestamp = props.timestamp ?? post.snapshot.timestamp;\\\\\\\\nconst compareTimestamp = props.compareTimestamp ?? \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\";\\\\\\\\nconst swapTimestamps = currentTimestamp < compareTimestamp;\\\\\\\\n\\\\\\\\nconst snapshotHistory = post.snapshot_history;\\\\\\\\n\\\\\\\\nconst snapshot =\\\\\\\\n  currentTimestamp === post.snapshot.timestamp\\\\\\\\n    ? post.snapshot\\\\\\\\n    : (snapshotHistory &&\\\\\\\\n        snapshotHistory.find((s) => s.timestamp === currentTimestamp)) ??\\\\\\\\n      null;\\\\\\\\n\\\\\\\\nconst compareSnapshot =\\\\\\\\n  compareTimestamp === post.snapshot.timestamp\\\\\\\\n    ? post.snapshot\\\\\\\\n    : (snapshotHistory &&\\\\\\\\n        snapshotHistory.find((s) => s.timestamp === compareTimestamp)) ??\\\\\\\\n      null;\\\\\\\\n\\\\\\\\n// If this post is displayed under another post. Used to limit the size.\\\\\\\\nconst isUnderPost = props.isUnderPost ? true : false;\\\\\\\\n\\\\\\\\nconst parentId = Near.view(\\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"get_parent_id\\\\\\\\\\\\\\\", {\\\\\\\\n  post_id: postId,\\\\\\\\n});\\\\\\\\n\\\\\\\\nconst childPostIdsUnordered =\\\\\\\\n  Near.view(\\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"get_children_ids\\\\\\\\\\\\\\\", {\\\\\\\\n    post_id: postId,\\\\\\\\n  }) ?? [];\\\\\\\\n\\\\\\\\nconst childPostIds = props.isPreview ? [] : childPostIdsUnordered.reverse();\\\\\\\\nconst expandable = props.isPreview ? false : props.expandable ?? false;\\\\\\\\nconst defaultExpanded = expandable ? props.defaultExpanded : true;\\\\\\\\n\\\\\\\\nfunction readableDate(timestamp) {\\\\\\\\n  var a = new Date(timestamp);\\\\\\\\n  return a.toDateString() + \\\\\\\\\\\\\\\" \\\\\\\\\\\\\\\" + a.toLocaleTimeString();\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst timestamp = readableDate(\\\\\\\\n  snapshot.timestamp ? snapshot.timestamp / 1000000 : Date.now()\\\\\\\\n);\\\\\\\\n\\\\\\\\nconst postSearchKeywords = props.searchKeywords ? (\\\\\\\\n  <div style={{ \\\\\\\\\\\\\\\"font-family\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"monospace\\\\\\\\\\\\\\\" }} key=\\\\\\\\\\\\\\\"post-search-keywords\\\\\\\\\\\\\\\">\\\\\\\\n    <span>Found keywords: </span>\\\\\\\\n\\\\\\\\n    {props.searchKeywords.map((tag) => (\\\\\\\\n      <Widget\\\\\\\\n        src={\\\\\\\\\\\\\\\"devhub.near/widget/devhub.components.atom.Tag\\\\\\\\\\\\\\\"}\\\\\\\\n        props={{ linkTo: \\\\\\\\\\\\\\\"Feed\\\\\\\\\\\\\\\", tag }}\\\\\\\\n      />\\\\\\\\n    ))}\\\\\\\\n  </div>\\\\\\\\n) : (\\\\\\\\n  <div key=\\\\\\\\\\\\\\\"post-search-keywords\\\\\\\\\\\\\\\"></div>\\\\\\\\n);\\\\\\\\n\\\\\\\\nconst searchKeywords = props.searchKeywords ? (\\\\\\\\n  <div class=\\\\\\\\\\\\\\\"mb-4\\\\\\\\\\\\\\\" key=\\\\\\\\\\\\\\\"search-keywords\\\\\\\\\\\\\\\">\\\\\\\\n    <small class=\\\\\\\\\\\\\\\"text-muted\\\\\\\\\\\\\\\">{postSearchKeywords}</small>\\\\\\\\n  </div>\\\\\\\\n) : (\\\\\\\\n  <div key=\\\\\\\\\\\\\\\"search-keywords\\\\\\\\\\\\\\\"></div>\\\\\\\\n);\\\\\\\\n\\\\\\\\nconst allowedToEdit =\\\\\\\\n  !props.isPreview &&\\\\\\\\n  Near.view(\\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"is_allowed_to_edit\\\\\\\\\\\\\\\", {\\\\\\\\n    post_id: postId,\\\\\\\\n    editor: context.accountId,\\\\\\\\n  });\\\\\\\\n\\\\\\\\nconst btnEditorWidget = (postType, name) => {\\\\\\\\n  return (\\\\\\\\n    <li>\\\\\\\\n      <a\\\\\\\\n        class=\\\\\\\\\\\\\\\"dropdown-item\\\\\\\\\\\\\\\"\\\\\\\\n        role=\\\\\\\\\\\\\\\"button\\\\\\\\\\\\\\\"\\\\\\\\n        onClick={() =>\\\\\\\\n          State.update({ postType, editorType: \\\\\\\\\\\\\\\"EDIT\\\\\\\\\\\\\\\", showEditor: true })\\\\\\\\n        }\\\\\\\\n      >\\\\\\\\n        {name}\\\\\\\\n      </a>\\\\\\\\n    </li>\\\\\\\\n  );\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst editControl = allowedToEdit ? (\\\\\\\\n  <div class=\\\\\\\\\\\\\\\"btn-group\\\\\\\\\\\\\\\" role=\\\\\\\\\\\\\\\"group\\\\\\\\\\\\\\\">\\\\\\\\n    <a\\\\\\\\n      class=\\\\\\\\\\\\\\\"card-link px-2\\\\\\\\\\\\\\\"\\\\\\\\n      role=\\\\\\\\\\\\\\\"button\\\\\\\\\\\\\\\"\\\\\\\\n      title=\\\\\\\\\\\\\\\"Edit post\\\\\\\\\\\\\\\"\\\\\\\\n      data-bs-toggle=\\\\\\\\\\\\\\\"dropdown\\\\\\\\\\\\\\\"\\\\\\\\n      aria-expanded=\\\\\\\\\\\\\\\"false\\\\\\\\\\\\\\\"\\\\\\\\n      type=\\\\\\\\\\\\\\\"button\\\\\\\\\\\\\\\"\\\\\\\\n    >\\\\\\\\n      <div class=\\\\\\\\\\\\\\\"bi bi-pencil-square\\\\\\\\\\\\\\\"></div>\\\\\\\\n    </a>\\\\\\\\n\\\\\\\\n    <ul class=\\\\\\\\\\\\\\\"dropdown-menu\\\\\\\\\\\\\\\">\\\\\\\\n      {btnEditorWidget(\\\\\\\\\\\\\\\"Idea\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"Edit as an idea\\\\\\\\\\\\\\\")}\\\\\\\\n      {btnEditorWidget(\\\\\\\\\\\\\\\"Solution\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"Edit as a solution\\\\\\\\\\\\\\\")}\\\\\\\\n      {btnEditorWidget(\\\\\\\\\\\\\\\"Attestation\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"Edit as an attestation\\\\\\\\\\\\\\\")}\\\\\\\\n      {btnEditorWidget(\\\\\\\\\\\\\\\"Sponsorship\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"Edit as a sponsorship\\\\\\\\\\\\\\\")}\\\\\\\\n      {btnEditorWidget(\\\\\\\\\\\\\\\"Comment\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"Edit as a comment\\\\\\\\\\\\\\\")}\\\\\\\\n    </ul>\\\\\\\\n  </div>\\\\\\\\n) : (\\\\\\\\n  <div></div>\\\\\\\\n);\\\\\\\\n\\\\\\\\nconst shareButton = props.isPreview ? (\\\\\\\\n  <div></div>\\\\\\\\n) : (\\\\\\\\n  <Link\\\\\\\\n    class=\\\\\\\\\\\\\\\"card-link text-dark\\\\\\\\\\\\\\\"\\\\\\\\n    to={href({\\\\\\\\n      widgetSrc: \\\\\\\\\\\\\\\"devhub.near/widget/app\\\\\\\\\\\\\\\",\\\\\\\\n      params: { page: \\\\\\\\\\\\\\\"post\\\\\\\\\\\\\\\", id: postId },\\\\\\\\n    })}\\\\\\\\n    role=\\\\\\\\\\\\\\\"button\\\\\\\\\\\\\\\"\\\\\\\\n    target=\\\\\\\\\\\\\\\"_blank\\\\\\\\\\\\\\\"\\\\\\\\n    title=\\\\\\\\\\\\\\\"Open in new tab\\\\\\\\\\\\\\\"\\\\\\\\n  >\\\\\\\\n    <div class=\\\\\\\\\\\\\\\"bi bi-share\\\\\\\\\\\\\\\"></div>\\\\\\\\n  </Link>\\\\\\\\n);\\\\\\\\n\\\\\\\\nconst ProfileCardContainer = styled.div`\\\\\\\\n  @media screen and (max-width: 960px) {\\\\\\\\n    width: 100%;\\\\\\\\n  }\\\\\\\\n`;\\\\\\\\n\\\\\\\\n// card-header\\\\\\\\nconst header = (\\\\\\\\n  <div key=\\\\\\\\\\\\\\\"header\\\\\\\\\\\\\\\">\\\\\\\\n    <small class=\\\\\\\\\\\\\\\"text-muted\\\\\\\\\\\\\\\">\\\\\\\\n      <div class=\\\\\\\\\\\\\\\"row justify-content-between\\\\\\\\\\\\\\\">\\\\\\\\n        <div class=\\\\\\\\\\\\\\\"d-flex align-items-center flex-wrap\\\\\\\\\\\\\\\">\\\\\\\\n          <ProfileCardContainer>\\\\\\\\n            <Widget\\\\\\\\n              src={\\\\\\\\n                \\\\\\\\\\\\\\\"devhub.near/widget/devhub.components.molecule.ProfileCard\\\\\\\\\\\\\\\"\\\\\\\\n              }\\\\\\\\n              props={{\\\\\\\\n                accountId: post.author_id,\\\\\\\\n              }}\\\\\\\\n            />\\\\\\\\n          </ProfileCardContainer>\\\\\\\\n\\\\\\\\n          <div class=\\\\\\\\\\\\\\\"d-flex ms-auto\\\\\\\\\\\\\\\">\\\\\\\\n            {editControl}\\\\\\\\n            {timestamp}\\\\\\\\n\\\\\\\\n            <Widget\\\\\\\\n              src={\\\\\\\\\\\\\\\"devhub.near/widget/devhub.entity.post.History\\\\\\\\\\\\\\\"}\\\\\\\\n              props={{\\\\\\\\n                post,\\\\\\\\n                timestamp: currentTimestamp,\\\\\\\\n              }}\\\\\\\\n            />\\\\\\\\n            {shareButton}\\\\\\\\n          </div>\\\\\\\\n        </div>\\\\\\\\n      </div>\\\\\\\\n    </small>\\\\\\\\n  </div>\\\\\\\\n);\\\\\\\\n\\\\\\\\n// const emptyIcons = {\\\\\\\\n//   Idea: \\\\\\\\\\\\\\\"bi-lightbulb\\\\\\\\\\\\\\\",\\\\\\\\n//   Comment: \\\\\\\\\\\\\\\"bi-chat\\\\\\\\\\\\\\\",\\\\\\\\n//   Solution: \\\\\\\\\\\\\\\"bi-rocket\\\\\\\\\\\\\\\",\\\\\\\\n//   Attestation: \\\\\\\\\\\\\\\"bi-check-circle\\\\\\\\\\\\\\\",\\\\\\\\n//   Sponsorship: \\\\\\\\\\\\\\\"bi-cash-coin\\\\\\\\\\\\\\\",\\\\\\\\n//   Github: \\\\\\\\\\\\\\\"bi-github\\\\\\\\\\\\\\\",\\\\\\\\n//   Like: \\\\\\\\\\\\\\\"bi-heart\\\\\\\\\\\\\\\",\\\\\\\\n//   Reply: \\\\\\\\\\\\\\\"bi-reply\\\\\\\\\\\\\\\",\\\\\\\\n// };\\\\\\\\n\\\\\\\\nconst emptyIcons = {\\\\\\\\n  Idea: \\\\\\\\\\\\\\\"\\\\\\\\u{1f4a1}\\\\\\\\\\\\\\\",\\\\\\\\n  Comment: \\\\\\\\\\\\\\\"bi-chat\\\\\\\\\\\\\\\",\\\\\\\\n  Solution: \\\\\\\\\\\\\\\"\\\\\\\\u{1f680}\\\\\\\\\\\\\\\",\\\\\\\\n  Attestation: \\\\\\\\\\\\\\\"\\\\\\\\u{2705}\\\\\\\\\\\\\\\",\\\\\\\\n  Sponsorship: \\\\\\\\\\\\\\\"\\\\\\\\u{1fa99}\\\\\\\\\\\\\\\",\\\\\\\\n  Github: \\\\\\\\\\\\\\\"bi-github\\\\\\\\\\\\\\\",\\\\\\\\n  Like: \\\\\\\\\\\\\\\"bi-heart\\\\\\\\\\\\\\\",\\\\\\\\n  Reply: \\\\\\\\\\\\\\\"bi-reply\\\\\\\\\\\\\\\",\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst fillIcons = {\\\\\\\\n  Idea: \\\\\\\\\\\\\\\"\\\\\\\\u{1f4a1}\\\\\\\\\\\\\\\",\\\\\\\\n  Comment: \\\\\\\\\\\\\\\"bi-chat-fill\\\\\\\\\\\\\\\",\\\\\\\\n  Solution: \\\\\\\\\\\\\\\"\\\\\\\\u{1f680}\\\\\\\\\\\\\\\",\\\\\\\\n  Attestation: \\\\\\\\\\\\\\\"\\\\\\\\u{2705}\\\\\\\\\\\\\\\",\\\\\\\\n  Sponsorship: \\\\\\\\\\\\\\\"\\\\\\\\u{1fa99}\\\\\\\\\\\\\\\",\\\\\\\\n  Github: \\\\\\\\\\\\\\\"bi-github\\\\\\\\\\\\\\\",\\\\\\\\n  Like: \\\\\\\\\\\\\\\"bi-heart-fill\\\\\\\\\\\\\\\",\\\\\\\\n  Reply: \\\\\\\\\\\\\\\"bi-reply-fill\\\\\\\\\\\\\\\",\\\\\\\\n};\\\\\\\\n\\\\\\\\n// Trigger saving this widget.\\\\\\\\n\\\\\\\\nconst borders = {\\\\\\\\n  Idea: \\\\\\\\\\\\\\\"border-light\\\\\\\\\\\\\\\",\\\\\\\\n  Comment: \\\\\\\\\\\\\\\"border-light\\\\\\\\\\\\\\\",\\\\\\\\n  Solution: \\\\\\\\\\\\\\\"border-light\\\\\\\\\\\\\\\",\\\\\\\\n  Attestation: \\\\\\\\\\\\\\\"border-light\\\\\\\\\\\\\\\",\\\\\\\\n  Sponsorship: \\\\\\\\\\\\\\\"border-light\\\\\\\\\\\\\\\",\\\\\\\\n  Github: \\\\\\\\\\\\\\\"border-light\\\\\\\\\\\\\\\",\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst containsLike = props.isPreview\\\\\\\\n  ? false\\\\\\\\n  : post.likes.find((l) => l.author_id == context.accountId);\\\\\\\\nconst likeBtnClass = containsLike ? fillIcons.Like : emptyIcons.Like;\\\\\\\\n// This must be outside onLike, because Near.view returns null at first, and when the view call finished, it returns true/false.\\\\\\\\n// If checking this inside onLike, it will give `null` and we cannot tell the result is true or false.\\\\\\\\nlet grantNotify = Near.view(\\\\\\\\\\\\\\\"social.near\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"is_write_permission_granted\\\\\\\\\\\\\\\", {\\\\\\\\n  predecessor_id: \\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\",\\\\\\\\n  key: context.accountId + \\\\\\\\\\\\\\\"/index/notify\\\\\\\\\\\\\\\",\\\\\\\\n});\\\\\\\\n\\\\\\\\nif (grantNotify === null) {\\\\\\\\n  return;\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst onLike = () => {\\\\\\\\n  if (!context.accountId) {\\\\\\\\n    return;\\\\\\\\n  }\\\\\\\\n\\\\\\\\n  let likeTxn = [\\\\\\\\n    {\\\\\\\\n      contractName: \\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\",\\\\\\\\n      methodName: \\\\\\\\\\\\\\\"add_like\\\\\\\\\\\\\\\",\\\\\\\\n      args: {\\\\\\\\n        post_id: postId,\\\\\\\\n      },\\\\\\\\n      gas: Big(10).pow(14),\\\\\\\\n    },\\\\\\\\n  ];\\\\\\\\n\\\\\\\\n  if (grantNotify === false) {\\\\\\\\n    likeTxn.unshift({\\\\\\\\n      contractName: \\\\\\\\\\\\\\\"social.near\\\\\\\\\\\\\\\",\\\\\\\\n      methodName: \\\\\\\\\\\\\\\"grant_write_permission\\\\\\\\\\\\\\\",\\\\\\\\n      args: {\\\\\\\\n        predecessor_id: \\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\",\\\\\\\\n        keys: [context.accountId + \\\\\\\\\\\\\\\"/index/notify\\\\\\\\\\\\\\\"],\\\\\\\\n      },\\\\\\\\n      gas: Big(10).pow(14),\\\\\\\\n      deposit: Big(10).pow(22),\\\\\\\\n    });\\\\\\\\n  }\\\\\\\\n\\\\\\\\n  Near.call(likeTxn);\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst btnCreatorWidget = (postType, icon, name, desc) => {\\\\\\\\n  return (\\\\\\\\n    <li class=\\\\\\\\\\\\\\\"py-1\\\\\\\\\\\\\\\">\\\\\\\\n      <a\\\\\\\\n        class=\\\\\\\\\\\\\\\"dropdown-item text-decoration-none d-flex align-items-center lh-sm\\\\\\\\\\\\\\\"\\\\\\\\n        style={{ color: \\\\\\\\\\\\\\\"rgb(55,109,137)\\\\\\\\\\\\\\\" }}\\\\\\\\n        role=\\\\\\\\\\\\\\\"button\\\\\\\\\\\\\\\"\\\\\\\\n        onClick={() =>\\\\\\\\n          State.update({ postType, editorType: \\\\\\\\\\\\\\\"CREATE\\\\\\\\\\\\\\\", showEditor: true })\\\\\\\\n        }\\\\\\\\n      >\\\\\\\\n        <i class={`bi ${icon}`} style={{ fontSize: \\\\\\\\\\\\\\\"1.5rem\\\\\\\\\\\\\\\" }}>\\\\\\\\n          {\\\\\\\\\\\\\\\" \\\\\\\\\\\\\\\"}\\\\\\\\n        </i>\\\\\\\\n\\\\\\\\n        <div class=\\\\\\\\\\\\\\\"ps-2 text-wrap\\\\\\\\\\\\\\\" style={{ width: \\\\\\\\\\\\\\\"18rem\\\\\\\\\\\\\\\" }}>\\\\\\\\n          <div>{name}</div>\\\\\\\\n          <small class=\\\\\\\\\\\\\\\"fw-light text-secondary\\\\\\\\\\\\\\\">{desc}</small>\\\\\\\\n        </div>\\\\\\\\n      </a>\\\\\\\\n    </li>\\\\\\\\n  );\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst FooterButtonsContianer = styled.div`\\\\\\\\n  width: 66.66666667%;\\\\\\\\n\\\\\\\\n  @media screen and (max-width: 960px) {\\\\\\\\n    width: 100%;\\\\\\\\n  }\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst buttonsFooter = props.isPreview ? null : (\\\\\\\\n  <div class=\\\\\\\\\\\\\\\"row\\\\\\\\\\\\\\\" key=\\\\\\\\\\\\\\\"buttons-footer\\\\\\\\\\\\\\\">\\\\\\\\n    <FooterButtonsContianer>\\\\\\\\n      <div class=\\\\\\\\\\\\\\\"btn-group\\\\\\\\\\\\\\\" role=\\\\\\\\\\\\\\\"group\\\\\\\\\\\\\\\" aria-label=\\\\\\\\\\\\\\\"Basic outlined example\\\\\\\\\\\\\\\">\\\\\\\\n        <ButtonWithHover\\\\\\\\n          type=\\\\\\\\\\\\\\\"button\\\\\\\\\\\\\\\"\\\\\\\\n          class=\\\\\\\\\\\\\\\"btn d-flex align-items-center\\\\\\\\\\\\\\\"\\\\\\\\n          style={{ border: \\\\\\\\\\\\\\\"0px\\\\\\\\\\\\\\\" }}\\\\\\\\n          onClick={onLike}\\\\\\\\n        >\\\\\\\\n          <i class={`bi ${likeBtnClass}`}> </i>\\\\\\\\n          {post.likes.length == 0 ? (\\\\\\\\n            \\\\\\\\\\\\\\\"Like\\\\\\\\\\\\\\\"\\\\\\\\n          ) : (\\\\\\\\n            <Widget\\\\\\\\n              src=\\\\\\\\\\\\\\\"devhub.near/widget/devhub.components.layout.LikeButton.Faces\\\\\\\\\\\\\\\"\\\\\\\\n              props={{\\\\\\\\n                likesByUsers: Object.fromEntries(\\\\\\\\n                  post.likes.map(({ author_id }) => [author_id, \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\"])\\\\\\\\n                ),\\\\\\\\n              }}\\\\\\\\n            />\\\\\\\\n          )}\\\\\\\\n        </ButtonWithHover>\\\\\\\\n\\\\\\\\n        <div class=\\\\\\\\\\\\\\\"btn-group\\\\\\\\\\\\\\\" role=\\\\\\\\\\\\\\\"group\\\\\\\\\\\\\\\">\\\\\\\\n          <ButtonWithHover\\\\\\\\n            type=\\\\\\\\\\\\\\\"button\\\\\\\\\\\\\\\"\\\\\\\\n            class=\\\\\\\\\\\\\\\"btn\\\\\\\\\\\\\\\"\\\\\\\\n            style={{ border: \\\\\\\\\\\\\\\"0px\\\\\\\\\\\\\\\" }}\\\\\\\\n            data-bs-toggle=\\\\\\\\\\\\\\\"dropdown\\\\\\\\\\\\\\\"\\\\\\\\n            aria-expanded=\\\\\\\\\\\\\\\"false\\\\\\\\\\\\\\\"\\\\\\\\n          >\\\\\\\\n            \\\\\\\\u{21aa} Reply\\\\\\\\n          </ButtonWithHover>\\\\\\\\n          <ul class=\\\\\\\\\\\\\\\"dropdown-menu\\\\\\\\\\\\\\\">\\\\\\\\n            {btnCreatorWidget(\\\\\\\\n              \\\\\\\\\\\\\\\"Idea\\\\\\\\\\\\\\\",\\\\\\\\n              emptyIcons.Idea,\\\\\\\\n              \\\\\\\\\\\\\\\"Idea\\\\\\\\\\\\\\\",\\\\\\\\n              \\\\\\\\\\\\\\\"Get feedback from the community about a problem, opportunity, or need.\\\\\\\\\\\\\\\"\\\\\\\\n            )}\\\\\\\\n            {btnCreatorWidget(\\\\\\\\n              \\\\\\\\\\\\\\\"Solution\\\\\\\\\\\\\\\",\\\\\\\\n              emptyIcons.Solution,\\\\\\\\n              \\\\\\\\\\\\\\\"Solution\\\\\\\\\\\\\\\",\\\\\\\\n              \\\\\\\\\\\\\\\"Provide a specific proposal or implementation to an idea, optionally requesting funding.\\\\\\\\\\\\\\\"\\\\\\\\n            )}\\\\\\\\n            {btnCreatorWidget(\\\\\\\\n              \\\\\\\\\\\\\\\"Attestation\\\\\\\\\\\\\\\",\\\\\\\\n              emptyIcons.Attestation,\\\\\\\\n              \\\\\\\\\\\\\\\"Attestation\\\\\\\\\\\\\\\",\\\\\\\\n              \\\\\\\\\\\\\\\"Formally review or validate a solution as a recognized expert.\\\\\\\\\\\\\\\"\\\\\\\\n            )}\\\\\\\\n            {btnCreatorWidget(\\\\\\\\n              \\\\\\\\\\\\\\\"Sponsorship\\\\\\\\\\\\\\\",\\\\\\\\n              emptyIcons.Sponsorship,\\\\\\\\n              \\\\\\\\\\\\\\\"Sponsorship\\\\\\\\\\\\\\\",\\\\\\\\n              \\\\\\\\\\\\\\\"Offer to fund projects, events, or proposals that match your needs.\\\\\\\\\\\\\\\"\\\\\\\\n            )}\\\\\\\\n            <li>\\\\\\\\n              <hr class=\\\\\\\\\\\\\\\"dropdown-divider\\\\\\\\\\\\\\\" />\\\\\\\\n            </li>\\\\\\\\n            {btnCreatorWidget(\\\\\\\\n              \\\\\\\\\\\\\\\"Comment\\\\\\\\\\\\\\\",\\\\\\\\n              emptyIcons.Comment,\\\\\\\\n              \\\\\\\\\\\\\\\"Comment\\\\\\\\\\\\\\\",\\\\\\\\n              \\\\\\\\\\\\\\\"Ask a question, provide information, or share a resource that is relevant to the thread.\\\\\\\\\\\\\\\"\\\\\\\\n            )}\\\\\\\\n          </ul>\\\\\\\\n        </div>\\\\\\\\n        {childPostIds.length > 0 && (\\\\\\\\n          <ButtonWithHover\\\\\\\\n            type=\\\\\\\\\\\\\\\"button\\\\\\\\\\\\\\\"\\\\\\\\n            class=\\\\\\\\\\\\\\\"btn\\\\\\\\\\\\\\\"\\\\\\\\n            style={{ border: \\\\\\\\\\\\\\\"0px\\\\\\\\\\\\\\\" }}\\\\\\\\n            data-bs-toggle=\\\\\\\\\\\\\\\"collapse\\\\\\\\\\\\\\\"\\\\\\\\n            href={`#collapseChildPosts${postId}`}\\\\\\\\n            aria-expanded={defaultExpanded}\\\\\\\\n            aria-controls={`collapseChildPosts${postId}`}\\\\\\\\n            onClick={() =>\\\\\\\\n              State.update({ expandReplies: !state.expandReplies })\\\\\\\\n            }\\\\\\\\n          >\\\\\\\\n            <i\\\\\\\\n              class={`bi bi-chevron-${state.expandReplies ? \\\\\\\\\\\\\\\"up\\\\\\\\\\\\\\\" : \\\\\\\\\\\\\\\"down\\\\\\\\\\\\\\\"}`}\\\\\\\\n            ></i>{\\\\\\\\\\\\\\\" \\\\\\\\\\\\\\\"}\\\\\\\\n            {`${state.expandReplies ? \\\\\\\\\\\\\\\"Collapse\\\\\\\\\\\\\\\" : \\\\\\\\\\\\\\\"Expand\\\\\\\\\\\\\\\"} Replies (${\\\\\\\\n              childPostIds.length\\\\\\\\n            })`}\\\\\\\\n          </ButtonWithHover>\\\\\\\\n        )}\\\\\\\\n\\\\\\\\n        {isUnderPost || !parentId ? (\\\\\\\\n          <div key=\\\\\\\\\\\\\\\"link-to-parent\\\\\\\\\\\\\\\"></div>\\\\\\\\n        ) : (\\\\\\\\n          <Link\\\\\\\\n            to={href({\\\\\\\\n              widgetSrc: \\\\\\\\\\\\\\\"devhub.near/widget/app\\\\\\\\\\\\\\\",\\\\\\\\n              params: { page: \\\\\\\\\\\\\\\"post\\\\\\\\\\\\\\\", id: parentId },\\\\\\\\n            })}\\\\\\\\n          >\\\\\\\\n            <ButtonWithHover\\\\\\\\n              type=\\\\\\\\\\\\\\\"button\\\\\\\\\\\\\\\"\\\\\\\\n              style={{ border: \\\\\\\\\\\\\\\"0px\\\\\\\\\\\\\\\" }}\\\\\\\\n              className=\\\\\\\\\\\\\\\"btn\\\\\\\\\\\\\\\"\\\\\\\\n              key=\\\\\\\\\\\\\\\"link-to-parent\\\\\\\\\\\\\\\"\\\\\\\\n            >\\\\\\\\n              <i class=\\\\\\\\\\\\\\\"bi bi-arrow-90deg-up\\\\\\\\\\\\\\\"></i>Go to parent\\\\\\\\n            </ButtonWithHover>\\\\\\\\n          </Link>\\\\\\\\n        )}\\\\\\\\n      </div>\\\\\\\\n    </FooterButtonsContianer>\\\\\\\\n  </div>\\\\\\\\n);\\\\\\\\n\\\\\\\\nconst tokenMapping = {\\\\\\\\n  NEAR: \\\\\\\\\\\\\\\"NEAR\\\\\\\\\\\\\\\",\\\\\\\\n  USDT: {\\\\\\\\n    NEP141: {\\\\\\\\n      address: \\\\\\\\\\\\\\\"usdt.tether-token.near\\\\\\\\\\\\\\\",\\\\\\\\n    },\\\\\\\\n  },\\\\\\\\n  USDC: {\\\\\\\\n    NEP141: {\\\\\\\\n      address:\\\\\\\\n        \\\\\\\\\\\\\\\"17208628f84f5d6ad33f0da3bbbeb27ffcb398eac501a31bd6ad2011e36133a1\\\\\\\\\\\\\\\",\\\\\\\\n    },\\\\\\\\n  },\\\\\\\\n  // Add more tokens here as needed\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst reverseTokenMapping = Object.keys(tokenMapping).reduce(\\\\\\\\n  (reverseMap, key) => {\\\\\\\\n    const value = tokenMapping[key];\\\\\\\\n    if (typeof value === \\\\\\\\\\\\\\\"object\\\\\\\\\\\\\\\") {\\\\\\\\n      reverseMap[JSON.stringify(value)] = key;\\\\\\\\n    }\\\\\\\\n    return reverseMap;\\\\\\\\n  },\\\\\\\\n  {}\\\\\\\\n);\\\\\\\\n\\\\\\\\nfunction tokenResolver(token) {\\\\\\\\n  if (typeof token === \\\\\\\\\\\\\\\"string\\\\\\\\\\\\\\\") {\\\\\\\\n    return token;\\\\\\\\n  } else if (typeof token === \\\\\\\\\\\\\\\"object\\\\\\\\\\\\\\\") {\\\\\\\\n    const tokenString = reverseTokenMapping[JSON.stringify(token)];\\\\\\\\n    return tokenString || null;\\\\\\\\n  } else {\\\\\\\\n    return null; // Invalid input\\\\\\\\n  }\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst isDraft =\\\\\\\\n  (draftState?.parent_post_id === postId &&\\\\\\\\n    draftState?.postType === state.postType) ||\\\\\\\\n  (draftState?.edit_post_id === postId &&\\\\\\\\n    draftState?.postType === state.postType);\\\\\\\\n\\\\\\\\nconst toggleEditor = () => {\\\\\\\\n  State.update({ showEditor: !state.showEditor });\\\\\\\\n};\\\\\\\\n\\\\\\\\nlet amount = null;\\\\\\\\nlet token = null;\\\\\\\\nlet supervisor = null;\\\\\\\\n\\\\\\\\nif (state.postType === \\\\\\\\\\\\\\\"Solution\\\\\\\\\\\\\\\") {\\\\\\\\n  const amountMatch = post.snapshot.description.match(\\\\\\\\n    /Requested amount: (\\\\\\\\\\\\\\\\d+(\\\\\\\\\\\\\\\\.\\\\\\\\\\\\\\\\d+)?) (\\\\\\\\\\\\\\\\w+)/\\\\\\\\n  );\\\\\\\\n  amount = amountMatch ? parseFloat(amountMatch[1]) : null;\\\\\\\\n  token = amountMatch ? amountMatch[3] : null;\\\\\\\\n\\\\\\\\n  const sponsorMatch = post.snapshot.description.match(\\\\\\\\n    /Requested sponsor: @([^\\\\\\\\\\\\\\\\s]+)/\\\\\\\\n  );\\\\\\\\n  supervisor = sponsorMatch ? sponsorMatch[1] : null;\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst seekingFunding = amount !== null || token !== null || supervisor !== null;\\\\\\\\n\\\\\\\\nfunction Editor() {\\\\\\\\n  return (\\\\\\\\n    <div class=\\\\\\\\\\\\\\\"row\\\\\\\\\\\\\\\" id={`accordion${postId}`} key=\\\\\\\\\\\\\\\"editors-footer\\\\\\\\\\\\\\\">\\\\\\\\n      <div\\\\\\\\n        key={`${state.postType}${state.editorType}${postId}`}\\\\\\\\n        className={\\\\\\\\\\\\\\\"w-100\\\\\\\\\\\\\\\"}\\\\\\\\n      >\\\\\\\\n        {state.editorType === \\\\\\\\\\\\\\\"CREATE\\\\\\\\\\\\\\\" ? (\\\\\\\\n          <>\\\\\\\\n            <Widget\\\\\\\\n              src={\\\\\\\\\\\\\\\"devhub.near/widget/devhub.entity.post.PostEditor\\\\\\\\\\\\\\\"}\\\\\\\\n              props={{\\\\\\\\n                postType: state.postType,\\\\\\\\n                onDraftStateChange,\\\\\\\\n                draftState:\\\\\\\\n                  draftState?.parent_post_id == postId ? draftState : undefined,\\\\\\\\n                parentId: postId,\\\\\\\\n                mode: \\\\\\\\\\\\\\\"Create\\\\\\\\\\\\\\\",\\\\\\\\n                toggleEditor: toggleEditor,\\\\\\\\n                transactionHashes: props.transactionHashes,\\\\\\\\n              }}\\\\\\\\n            />\\\\\\\\n          </>\\\\\\\\n        ) : (\\\\\\\\n          <>\\\\\\\\n            <Widget\\\\\\\\n              src={\\\\\\\\\\\\\\\"devhub.near/widget/devhub.entity.post.PostEditor\\\\\\\\\\\\\\\"}\\\\\\\\n              props={{\\\\\\\\n                postType: state.postType,\\\\\\\\n                postId,\\\\\\\\n                mode: \\\\\\\\\\\\\\\"Edit\\\\\\\\\\\\\\\",\\\\\\\\n                author_id: post.author_id,\\\\\\\\n                labels: post.snapshot.labels,\\\\\\\\n                name: post.snapshot.name,\\\\\\\\n                description: post.snapshot.description,\\\\\\\\n                amount: post.snapshot.amount || amount,\\\\\\\\n                token: tokenResolver(post.snapshot.sponsorship_token || token),\\\\\\\\n                supervisor:\\\\\\\\n                  post.snapshot.post.snapshot.supervisor || supervisor,\\\\\\\\n                seekingFunding: seekingFunding,\\\\\\\\n                githubLink: post.snapshot.github_link,\\\\\\\\n                onDraftStateChange,\\\\\\\\n                draftState:\\\\\\\\n                  draftState?.edit_post_id == postId ? draftState : undefined,\\\\\\\\n                toggleEditor: toggleEditor,\\\\\\\\n                transactionHashes: props.transactionHashes,\\\\\\\\n              }}\\\\\\\\n            />\\\\\\\\n          </>\\\\\\\\n        )}\\\\\\\\n      </div>\\\\\\\\n    </div>\\\\\\\\n  );\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst renamedPostType =\\\\\\\\n  snapshot.post_type == \\\\\\\\\\\\\\\"Submission\\\\\\\\\\\\\\\" ? \\\\\\\\\\\\\\\"Solution\\\\\\\\\\\\\\\" : snapshot.post_type;\\\\\\\\n\\\\\\\\nconst tags = post.snapshot.labels ? (\\\\\\\\n  <div\\\\\\\\n    class=\\\\\\\\\\\\\\\"card-title d-flex flex-wrap align-items-center\\\\\\\\\\\\\\\"\\\\\\\\n    style={{ margin: \\\\\\\\\\\\\\\"20px 0\\\\\\\\\\\\\\\" }}\\\\\\\\n    key=\\\\\\\\\\\\\\\"post-labels\\\\\\\\\\\\\\\"\\\\\\\\n  >\\\\\\\\n    {post.snapshot.labels.map((tag, idx) => (\\\\\\\\n      <div className=\\\\\\\\\\\\\\\"d-flex align-items-center my-3 me-3\\\\\\\\\\\\\\\">\\\\\\\\n        <Link\\\\\\\\n          to={href({\\\\\\\\n            widgetSrc: \\\\\\\\\\\\\\\"devhub.near/widget/app\\\\\\\\\\\\\\\",\\\\\\\\n            params: { page: \\\\\\\\\\\\\\\"feed\\\\\\\\\\\\\\\", tag: tag },\\\\\\\\n          })}\\\\\\\\n        >\\\\\\\\n          <div\\\\\\\\n            onClick={() => {\\\\\\\\n              if (typeof props.updateTagInParent === \\\\\\\\\\\\\\\"function\\\\\\\\\\\\\\\") {\\\\\\\\n                props.updateTagInParent(tag);\\\\\\\\n              }\\\\\\\\n            }}\\\\\\\\n            className=\\\\\\\\\\\\\\\"d-flex gap-3 align-items-center\\\\\\\\\\\\\\\"\\\\\\\\n            style={{ cursor: \\\\\\\\\\\\\\\"pointer\\\\\\\\\\\\\\\", textDecoration: \\\\\\\\\\\\\\\"none\\\\\\\\\\\\\\\" }}\\\\\\\\n          >\\\\\\\\n            <Widget\\\\\\\\n              src={\\\\\\\\\\\\\\\"devhub.near/widget/devhub.components.atom.Tag\\\\\\\\\\\\\\\"}\\\\\\\\n              props={{\\\\\\\\n                tag,\\\\\\\\n                black: true,\\\\\\\\n              }}\\\\\\\\n            />\\\\\\\\n          </div>\\\\\\\\n        </Link>\\\\\\\\n        {idx !== post.snapshot.labels.length - 1 && (\\\\\\\\n          <span className=\\\\\\\\\\\\\\\"ms-3\\\\\\\\\\\\\\\">\\\\\\\\u{2022}</span>\\\\\\\\n        )}\\\\\\\\n      </div>\\\\\\\\n    ))}\\\\\\\\n  </div>\\\\\\\\n) : (\\\\\\\\n  <div key=\\\\\\\\\\\\\\\"post-labels\\\\\\\\\\\\\\\"></div>\\\\\\\\n);\\\\\\\\n\\\\\\\\nconst Title = styled.h5`\\\\\\\\n  margin: 1rem 0;\\\\\\\\n\\\\\\\\n  color: #151515;\\\\\\\\n  font-size: 1.15rem;\\\\\\\\n  font-style: normal;\\\\\\\\n  font-weight: 700;\\\\\\\\n  line-height: 1.625rem; /* 55.556% */\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst postTitle =\\\\\\\\n  snapshot.post_type == \\\\\\\\\\\\\\\"Comment\\\\\\\\\\\\\\\" ? (\\\\\\\\n    <div key=\\\\\\\\\\\\\\\"post-title\\\\\\\\\\\\\\\"></div>\\\\\\\\n  ) : (\\\\\\\\n    <Title key=\\\\\\\\\\\\\\\"post-title\\\\\\\\\\\\\\\">\\\\\\\\n      {emptyIcons[snapshot.post_type]} {renamedPostType}: {snapshot.name}\\\\\\\\n    </Title>\\\\\\\\n  );\\\\\\\\n\\\\\\\\nconst postExtra =\\\\\\\\n  snapshot.post_type == \\\\\\\\\\\\\\\"Sponsorship\\\\\\\\\\\\\\\" ? (\\\\\\\\n    <div key=\\\\\\\\\\\\\\\"post-extra\\\\\\\\\\\\\\\">\\\\\\\\n      <h6 class=\\\\\\\\\\\\\\\"card-subtitle mb-2 text-muted\\\\\\\\\\\\\\\">\\\\\\\\n        Maximum amount: {snapshot.amount}{\\\\\\\\\\\\\\\" \\\\\\\\\\\\\\\"}\\\\\\\\n        {tokenResolver(snapshot.sponsorship_token)}\\\\\\\\n      </h6>\\\\\\\\n      <h6 class=\\\\\\\\\\\\\\\"card-subtitle mb-2 text-muted\\\\\\\\\\\\\\\">\\\\\\\\n        Supervisor:{\\\\\\\\\\\\\\\" \\\\\\\\\\\\\\\"}\\\\\\\\n        <Widget\\\\\\\\n          src={\\\\\\\\\\\\\\\"devhub.near/widget/devhub.components.molecule.ProfileLine\\\\\\\\\\\\\\\"}\\\\\\\\n          props={{ accountId: snapshot.supervisor }}\\\\\\\\n        />\\\\\\\\n      </h6>\\\\\\\\n    </div>\\\\\\\\n  ) : (\\\\\\\\n    <div></div>\\\\\\\\n  );\\\\\\\\n\\\\\\\\nconst childPostHasDraft = childPostIds.find(\\\\\\\\n  (childId) =>\\\\\\\\n    childId == draftState?.edit_post_id || childId == draftState?.parent_post_id\\\\\\\\n);\\\\\\\\nif (\\\\\\\\n  (childPostHasDraft || state.childrenOfChildPostsHasDraft) &&\\\\\\\\n  props.expandParent\\\\\\\\n) {\\\\\\\\n  props.expandParent();\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst postsList =\\\\\\\\n  props.isPreview || childPostIds.length == 0 ? (\\\\\\\\n    <div key=\\\\\\\\\\\\\\\"posts-list\\\\\\\\\\\\\\\"></div>\\\\\\\\n  ) : (\\\\\\\\n    <div class=\\\\\\\\\\\\\\\"row\\\\\\\\\\\\\\\" key=\\\\\\\\\\\\\\\"posts-list\\\\\\\\\\\\\\\">\\\\\\\\n      <div\\\\\\\\n        class={`collapse mt-3 ${\\\\\\\\n          defaultExpanded ||\\\\\\\\n          childPostHasDraft ||\\\\\\\\n          state.childrenOfChildPostsHasDraft\\\\\\\\n            ? \\\\\\\\\\\\\\\"show\\\\\\\\\\\\\\\"\\\\\\\\n            : \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\"\\\\\\\\n        }`}\\\\\\\\n        id={`collapseChildPosts${postId}`}\\\\\\\\n      >\\\\\\\\n        {childPostIds.map((childId) => (\\\\\\\\n          <div key={childId} style={{ marginBottom: \\\\\\\\\\\\\\\"0.5rem\\\\\\\\\\\\\\\" }}>\\\\\\\\n            <Widget\\\\\\\\n              src=\\\\\\\\\\\\\\\"devhub.near/widget/devhub.entity.post.Post\\\\\\\\\\\\\\\"\\\\\\\\n              props={{\\\\\\\\n                id: childId,\\\\\\\\n                isUnderPost: true,\\\\\\\\n                onDraftStateChange,\\\\\\\\n                draftState,\\\\\\\\n                expandParent: () =>\\\\\\\\n                  State.update({ childrenOfChildPostsHasDraft: true }),\\\\\\\\n                referral: `subpost${childId}of${postId}`,\\\\\\\\n              }}\\\\\\\\n            />\\\\\\\\n          </div>\\\\\\\\n        ))}\\\\\\\\n      </div>\\\\\\\\n    </div>\\\\\\\\n  );\\\\\\\\n\\\\\\\\nconst LimitedMarkdown = styled.div`\\\\\\\\n  max-height: 20em;\\\\\\\\n`;\\\\\\\\n\\\\\\\\n// Determine if located in the post page.\\\\\\\\nconst isInList = props.isInList;\\\\\\\\nconst contentArray = snapshot.description.split(\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\");\\\\\\\\nconst needClamp = isInList && contentArray.length > 5;\\\\\\\\n\\\\\\\\ninitState({\\\\\\\\n  clamp: needClamp,\\\\\\\\n  expandReplies: defaultExpanded,\\\\\\\\n});\\\\\\\\n\\\\\\\\nconst clampedContent = needClamp\\\\\\\\n  ? contentArray.slice(0, 3).join(\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\")\\\\\\\\n  : snapshot.description;\\\\\\\\n\\\\\\\\nconst SeeMore = styled.a`\\\\\\\\n  cursor: pointer;\\\\\\\\n  color: #00b774 !important;\\\\\\\\n  font-weight: bold;\\\\\\\\n`;\\\\\\\\n\\\\\\\\n// Should make sure the posts under the currently top viewed post are limited in size.\\\\\\\\nconst descriptionArea = isUnderPost ? (\\\\\\\\n  <LimitedMarkdown className=\\\\\\\\\\\\\\\"overflow-auto\\\\\\\\\\\\\\\" key=\\\\\\\\\\\\\\\"description-area\\\\\\\\\\\\\\\">\\\\\\\\n    {/* {widget(\\\\\\\\\\\\\\\"components.molecule.markdown-viewer\\\\\\\\\\\\\\\", {\\\\\\\\n      text: snapshot.description,\\\\\\\\n    })} */}\\\\\\\\n    <Widget\\\\\\\\n      src={\\\\\\\\\\\\\\\"devhub.near/widget/devhub.components.molecule.MarkdownViewer\\\\\\\\\\\\\\\"}\\\\\\\\n      props={{\\\\\\\\n        text: snapshot.description,\\\\\\\\n      }}\\\\\\\\n    />\\\\\\\\n  </LimitedMarkdown>\\\\\\\\n) : (\\\\\\\\n  <div className=\\\\\\\\\\\\\\\"w-100 overflow-auto\\\\\\\\\\\\\\\">\\\\\\\\n    <div class={state.clamp ? \\\\\\\\\\\\\\\"clamp\\\\\\\\\\\\\\\" : \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\"}>\\\\\\\\n      {/* {widget(\\\\\\\\\\\\\\\"components.molecule.markdown-viewer\\\\\\\\\\\\\\\", {\\\\\\\\n        text: state.clamp ? clampedContent : snapshot.description,\\\\\\\\n      })} */}\\\\\\\\n      <Widget\\\\\\\\n        src={\\\\\\\\\\\\\\\"devhub.near/widget/devhub.components.molecule.MarkdownViewer\\\\\\\\\\\\\\\"}\\\\\\\\n        props={{\\\\\\\\n          text: state.clamp ? clampedContent : snapshot.description,\\\\\\\\n        }}\\\\\\\\n      />\\\\\\\\n    </div>\\\\\\\\n    {state.clamp ? (\\\\\\\\n      <div class=\\\\\\\\\\\\\\\"d-flex justify-content-start\\\\\\\\\\\\\\\">\\\\\\\\n        <SeeMore onClick={() => State.update({ clamp: false })}>\\\\\\\\n          See more\\\\\\\\n        </SeeMore>\\\\\\\\n      </div>\\\\\\\\n    ) : (\\\\\\\\n      <></>\\\\\\\\n    )}\\\\\\\\n  </div>\\\\\\\\n);\\\\\\\\n\\\\\\\\nconst timestampElement = (_snapshot) => {\\\\\\\\n  return (\\\\\\\\n    <Link\\\\\\\\n      class=\\\\\\\\\\\\\\\"text-muted\\\\\\\\\\\\\\\"\\\\\\\\n      href={href({\\\\\\\\n        widgetSrc: \\\\\\\\\\\\\\\"devhub.near/widget/app\\\\\\\\\\\\\\\",\\\\\\\\n        params: {\\\\\\\\n          page: \\\\\\\\\\\\\\\"post\\\\\\\\\\\\\\\",\\\\\\\\n          id: postId,\\\\\\\\n          timestamp: _snapshot.timestamp,\\\\\\\\n          compareTimestamp: null,\\\\\\\\n          referral,\\\\\\\\n        },\\\\\\\\n      })}\\\\\\\\n    >\\\\\\\\n      {readableDate(_snapshot.timestamp / 1000000).substring(4)}\\\\\\\\n\\\\\\\\n      <Widget\\\\\\\\n        src=\\\\\\\\\\\\\\\"mob.near/widget/ProfileImage\\\\\\\\\\\\\\\"\\\\\\\\n        props={{\\\\\\\\n          accountId: _snapshot.editor_id,\\\\\\\\n          style: {\\\\\\\\n            width: \\\\\\\\\\\\\\\"1.25em\\\\\\\\\\\\\\\",\\\\\\\\n            height: \\\\\\\\\\\\\\\"1.25em\\\\\\\\\\\\\\\",\\\\\\\\n          },\\\\\\\\n          imageStyle: {\\\\\\\\n            transform: \\\\\\\\\\\\\\\"translateY(-12.5%)\\\\\\\\\\\\\\\",\\\\\\\\n          },\\\\\\\\n        }}\\\\\\\\n      />\\\\\\\\n      {_snapshot.editor_id.substring(0, 8)}\\\\\\\\n    </Link>\\\\\\\\n  );\\\\\\\\n};\\\\\\\\n\\\\\\\\nfunction combineText(_snapshot) {\\\\\\\\n  return (\\\\\\\\n    \\\\\\\\\\\\\\\"## \\\\\\\\\\\\\\\" +\\\\\\\\n    _snapshot.post_type +\\\\\\\\n    \\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\" +\\\\\\\\n    _snapshot.name +\\\\\\\\n    \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\" +\\\\\\\\n    _snapshot.description\\\\\\\\n  );\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst CardContainer = styled.div`\\\\\\\\n  padding: 1.5rem 3rem !important;\\\\\\\\n  border-radius: 16px !important;\\\\\\\\n  border: 1px solid rgba(129, 129, 129, 0.3) !important;\\\\\\\\n  background: #fffefe !important;\\\\\\\\n\\\\\\\\n  @media screen and (max-width: 960px) {\\\\\\\\n    padding: 1rem !important;\\\\\\\\n  }\\\\\\\\n`;\\\\\\\\n\\\\\\\\nreturn (\\\\\\\\n  <CardContainer className={`card ${borders[snapshot.post_type]} attractable`}>\\\\\\\\n    {header}\\\\\\\\n    <div className=\\\\\\\\\\\\\\\"card-body\\\\\\\\\\\\\\\" style={{ padding: 0 }}>\\\\\\\\n      {searchKeywords}\\\\\\\\n      {compareSnapshot ? (\\\\\\\\n        <div\\\\\\\\n          class=\\\\\\\\\\\\\\\"border rounded\\\\\\\\\\\\\\\"\\\\\\\\n          style={{ marginTop: \\\\\\\\\\\\\\\"16px\\\\\\\\\\\\\\\", marginBottom: \\\\\\\\\\\\\\\"16px\\\\\\\\\\\\\\\" }}\\\\\\\\n        >\\\\\\\\n          <div class=\\\\\\\\\\\\\\\"d-flex justify-content-end\\\\\\\\\\\\\\\" style={{ fontSize: \\\\\\\\\\\\\\\"12px\\\\\\\\\\\\\\\" }}>\\\\\\\\n            <div class=\\\\\\\\\\\\\\\"d-flex w-50 justify-content-end mt-1 me-2\\\\\\\\\\\\\\\">\\\\\\\\n              {timestampElement(snapshot)}\\\\\\\\n              {snapshot !== compareSnapshot && (\\\\\\\\n                <>\\\\\\\\n                  <div class=\\\\\\\\\\\\\\\"mx-1 align-self-center\\\\\\\\\\\\\\\">\\\\\\\\n                    <i class=\\\\\\\\\\\\\\\"bi bi-file-earmark-diff\\\\\\\\\\\\\\\" />\\\\\\\\n                  </div>\\\\\\\\n                  {timestampElement(compareSnapshot)}\\\\\\\\n                </>\\\\\\\\n              )}\\\\\\\\n            </div>\\\\\\\\n          </div>\\\\\\\\n          <div className=\\\\\\\\\\\\\\\"w-100 overflow-auto\\\\\\\\\\\\\\\">\\\\\\\\n            <Widget\\\\\\\\n              src=\\\\\\\\\\\\\\\"markeljan.near/widget/MarkdownDiff\\\\\\\\\\\\\\\"\\\\\\\\n              props={{\\\\\\\\n                post: post,\\\\\\\\n                currentCode: combineText(\\\\\\\\n                  swapTimestamps ? compareSnapshot : snapshot\\\\\\\\n                ),\\\\\\\\n                prevCode: combineText(\\\\\\\\n                  swapTimestamps ? snapshot : compareSnapshot\\\\\\\\n                ),\\\\\\\\n                showLineNumber: true,\\\\\\\\n              }}\\\\\\\\n            />\\\\\\\\n          </div>\\\\\\\\n        </div>\\\\\\\\n      ) : (\\\\\\\\n        <>\\\\\\\\n          {postTitle}\\\\\\\\n          {postExtra}\\\\\\\\n          {descriptionArea}\\\\\\\\n        </>\\\\\\\\n      )}\\\\\\\\n      {tags}\\\\\\\\n      {buttonsFooter}\\\\\\\\n      {!props.isPreview && (isDraft || state.showEditor) && <Editor />}\\\\\\\\n      {postsList}\\\\\\\\n    </div>\\\\\\\\n  </CardContainer>\\\\\\\\n);\\\\\\\\n\"}, \"devhub.entity.community.Teams\": {\"\": \"const { handle } = props;\\\\\\\\n\\\\\\\\nconst { Tile } =\\\\\\\\n  VM.require(\\\\\\\\\\\\\\\"devhub.near/widget/devhub.components.molecule.Tile\\\\\\\\\\\\\\\") ||\\\\\\\\n  (() => <></>);\\\\\\\\n\\\\\\\\nif (!Tile) {\\\\\\\\n  return <div>Loading...</div>;\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst { getCommunity } = VM.require(\\\\\\\\n  \\\\\\\\\\\\\\\"devhub.near/widget/core.adapter.devhub-contract\\\\\\\\\\\\\\\"\\\\\\\\n);\\\\\\\\n\\\\\\\\nconst communityData = getCommunity({ handle });\\\\\\\\n\\\\\\\\nif (communityData === null) {\\\\\\\\n  return <div>Loading...</div>;\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst UserList = ({ name, users }) => (\\\\\\\\n  <div>\\\\\\\\n    {(users ?? []).map((user, i) => (\\\\\\\\n      <div className={`row ${i < users.length - 1 ? \\\\\\\\\\\\\\\"mb-3\\\\\\\\\\\\\\\" : \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\"}`}>\\\\\\\\n        <div class=\\\\\\\\\\\\\\\"col-3\\\\\\\\\\\\\\\">\\\\\\\\n          <b>{name + \\\\\\\\\\\\\\\" #\\\\\\\\\\\\\\\" + (i + 1)}</b>\\\\\\\\n        </div>\\\\\\\\n\\\\\\\\n        <div class=\\\\\\\\\\\\\\\"col-9\\\\\\\\\\\\\\\">\\\\\\\\n          <span\\\\\\\\n            key={user}\\\\\\\\n            className=\\\\\\\\\\\\\\\"d-inline-flex\\\\\\\\\\\\\\\"\\\\\\\\n            style={{ fontWeight: 500 }}\\\\\\\\n          >\\\\\\\\n            <Widget\\\\\\\\n              src=\\\\\\\\\\\\\\\"devhub.near/widget/devhub.components.molecule.ProfileLine\\\\\\\\\\\\\\\"\\\\\\\\n              props={{ accountId: user, hideAccountId: true, tooltip: true }}\\\\\\\\n            />\\\\\\\\n          </span>\\\\\\\\n        </div>\\\\\\\\n      </div>\\\\\\\\n    ))}\\\\\\\\n  </div>\\\\\\\\n);\\\\\\\\n\\\\\\\\nreturn (\\\\\\\\n  <div className=\\\\\\\\\\\\\\\"d-flex flex-column align-items-center gap-4 w-100\\\\\\\\\\\\\\\">\\\\\\\\n    <Tile className=\\\\\\\\\\\\\\\"p-3 w-100 bg-white mb-3\\\\\\\\\\\\\\\" style={{ maxWidth: 960 }}>\\\\\\\\n      <div>\\\\\\\\n        <div\\\\\\\\n          className=\\\\\\\\\\\\\\\"d-flex align-items-center justify-content-between w-100 pb-3\\\\\\\\\\\\\\\"\\\\\\\\n          style={{ minHeight: 30 }}\\\\\\\\n        >\\\\\\\\n          <h5 className=\\\\\\\\\\\\\\\"h5 d-inline-flex gap-2 m-0\\\\\\\\\\\\\\\">\\\\\\\\n            <span>Community Admins</span>\\\\\\\\n          </h5>\\\\\\\\n        </div>\\\\\\\\n        <UserList name=\\\\\\\\\\\\\\\"Admin\\\\\\\\\\\\\\\" users={communityData.admins} />\\\\\\\\n      </div>\\\\\\\\n    </Tile>\\\\\\\\n  </div>\\\\\\\\n);\\\\\\\\n\"}, \"devhub.page.admin.moderatorsTab\": {\"\": \"const { accessControlInfo, createEditTeam } = props;\\\\\\\\n\\\\\\\\nconst { Tile } =\\\\\\\\n  VM.require(\\\\\\\\\\\\\\\"devhub.near/widget/devhub.components.molecule.Tile\\\\\\\\\\\\\\\") ||\\\\\\\\n  (() => <></>);\\\\\\\\n\\\\\\\\nif (!Tile) {\\\\\\\\n  return <div>Loading...</div>;\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst [editModerators, setEditModerators] = useState(false);\\\\\\\\nconst [moderators, setModerators] = useState(\\\\\\\\n  accessControlInfo.members_list[\\\\\\\\\\\\\\\"team:moderators\\\\\\\\\\\\\\\"].children || []\\\\\\\\n);\\\\\\\\n\\\\\\\\nconst handleEditModerators = () => {\\\\\\\\n  createEditTeam({\\\\\\\\n    teamName: \\\\\\\\\\\\\\\"moderators\\\\\\\\\\\\\\\",\\\\\\\\n    description:\\\\\\\\n      \\\\\\\\\\\\\\\"The moderator group has permissions to edit any posts and apply all labels, including restricted ones.\\\\\\\\\\\\\\\",\\\\\\\\n    label: \\\\\\\\\\\\\\\"any\\\\\\\\\\\\\\\",\\\\\\\\n    editPost: true,\\\\\\\\n    useLabels: true,\\\\\\\\n    members: moderators,\\\\\\\\n    contractCall: \\\\\\\\\\\\\\\"edit_member\\\\\\\\\\\\\\\",\\\\\\\\n  });\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst handleCancelModerators = () => {\\\\\\\\n  setEditModerators(false);\\\\\\\\n  setModerators(accessControlInfo.members_list[\\\\\\\\\\\\\\\"team:moderators\\\\\\\\\\\\\\\"].children);\\\\\\\\n};\\\\\\\\n\\\\\\\\nreturn (\\\\\\\\n  <>\\\\\\\\n    <h1>Moderators</h1>\\\\\\\\n    <div className=\\\\\\\\\\\\\\\"card-body\\\\\\\\\\\\\\\">\\\\\\\\n      <h5>\\\\\\\\n        The moderator group has permissions to edit any posts and apply all\\\\\\\\n        labels, including restricted ones.\\\\\\\\n      </h5>\\\\\\\\n      <Widget\\\\\\\\n        src={\\\\\\\\\\\\\\\"devhub.near/widget/devhub.components.molecule.PostControls\\\\\\\\\\\\\\\"}\\\\\\\\n        props={{\\\\\\\\n          icon: \\\\\\\\\\\\\\\"bi bi-gear-wide-connected\\\\\\\\\\\\\\\",\\\\\\\\n          className: \\\\\\\\\\\\\\\"mb-3\\\\\\\\\\\\\\\",\\\\\\\\n\\\\\\\\n          title: \\\\\\\\\\\\\\\"Edit members\\\\\\\\\\\\\\\",\\\\\\\\n          onClick: () => setEditModerators(!editModerators),\\\\\\\\n          testId: \\\\\\\\\\\\\\\"edit-members\\\\\\\\\\\\\\\",\\\\\\\\n        }}\\\\\\\\n      />\\\\\\\\n    </div>\\\\\\\\n    <Tile className=\\\\\\\\\\\\\\\"p-3\\\\\\\\\\\\\\\">\\\\\\\\n      {editModerators ? (\\\\\\\\n        <>\\\\\\\\n          <Widget\\\\\\\\n            src=\\\\\\\\\\\\\\\"devhub.near/widget/devhub.components.molecule.ListEditor\\\\\\\\\\\\\\\"\\\\\\\\n            props={{\\\\\\\\n              data: {\\\\\\\\n                maxLength: 100,\\\\\\\\n                placeholder: \\\\\\\\\\\\\\\"member.near\\\\\\\\\\\\\\\",\\\\\\\\n                prefix: \\\\\\\\\\\\\\\"member\\\\\\\\\\\\\\\",\\\\\\\\n                list: moderators,\\\\\\\\n              },\\\\\\\\n              setList: setModerators,\\\\\\\\n              // Could add a check to see if it is an valid account id.\\\\\\\\n              validate: (newItem) => true,\\\\\\\\n              invalidate: () => null,\\\\\\\\n            }}\\\\\\\\n          />\\\\\\\\n          <div\\\\\\\\n            className={\\\\\\\\n              \\\\\\\\\\\\\\\"d-flex align-items-center justify-content-end gap-3 mt-4\\\\\\\\\\\\\\\"\\\\\\\\n            }\\\\\\\\n          >\\\\\\\\n            <Widget\\\\\\\\n              src={\\\\\\\\\\\\\\\"devhub.near/widget/devhub.components.molecule.Button\\\\\\\\\\\\\\\"}\\\\\\\\n              props={{\\\\\\\\n                classNames: {\\\\\\\\n                  root: \\\\\\\\\\\\\\\"btn-outline-danger shadow-none border-0\\\\\\\\\\\\\\\",\\\\\\\\n                },\\\\\\\\n                label: \\\\\\\\\\\\\\\"Cancel\\\\\\\\\\\\\\\",\\\\\\\\n                onClick: handleCancelModerators,\\\\\\\\n              }}\\\\\\\\n            />\\\\\\\\n            <Widget\\\\\\\\n              src={\\\\\\\\\\\\\\\"devhub.near/widget/devhub.components.molecule.Button\\\\\\\\\\\\\\\"}\\\\\\\\n              props={{\\\\\\\\n                classNames: { root: \\\\\\\\\\\\\\\"btn\\\\\\\\\\\\\\\" },\\\\\\\\n                icon: {\\\\\\\\n                  type: \\\\\\\\\\\\\\\"bootstrap_icon\\\\\\\\\\\\\\\",\\\\\\\\n                  variant: \\\\\\\\\\\\\\\"bi-check-circle-fill\\\\\\\\\\\\\\\",\\\\\\\\n                },\\\\\\\\n                label: \\\\\\\\\\\\\\\"Submit\\\\\\\\\\\\\\\",\\\\\\\\n                onClick: handleEditModerators,\\\\\\\\n              }}\\\\\\\\n            />\\\\\\\\n          </div>\\\\\\\\n        </>\\\\\\\\n      ) : (\\\\\\\\n        <>\\\\\\\\n          <div class=\\\\\\\\\\\\\\\"pt-4\\\\\\\\\\\\\\\">Members</div>\\\\\\\\n\\\\\\\\n          {moderators && (\\\\\\\\n            <div class=\\\\\\\\\\\\\\\"vstack\\\\\\\\\\\\\\\">\\\\\\\\n              {moderators.length ? (\\\\\\\\n                moderators.map((child) => (\\\\\\\\n                  <Tile className=\\\\\\\\\\\\\\\"w-25 p-3 m-1\\\\\\\\\\\\\\\" minHeight={10}>\\\\\\\\n                    <Widget\\\\\\\\n                      src={`devhub.near/widget/devhub.components.molecule.ProfileLine`}\\\\\\\\n                      props={{ accountId: child }}\\\\\\\\n                    />\\\\\\\\n                  </Tile>\\\\\\\\n                ))\\\\\\\\n              ) : (\\\\\\\\n                <div>No moderators</div>\\\\\\\\n              )}\\\\\\\\n            </div>\\\\\\\\n          )}\\\\\\\\n        </>\\\\\\\\n      )}\\\\\\\\n    </Tile>\\\\\\\\n  </>\\\\\\\\n);\\\\\\\\n\"}, \"devhub.components.molecule.ProfileCard\": {\"\": \"const MutedText = styled.span`\\\\\\\\n  color: #818181;\\\\\\\\n\\\\\\\\n  font-size: 16px;\\\\\\\\n  font-style: normal;\\\\\\\\n  font-weight: 400;\\\\\\\\n  line-height: 20px; /* 125% */\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst AccountName = styled.span`\\\\\\\\n  color: #818181;\\\\\\\\n  font-size: 16px;\\\\\\\\n  font-style: normal;\\\\\\\\n  font-weight: 500;\\\\\\\\n  line-height: 20px;\\\\\\\\n\\\\\\\\n  max-width: 30ch;\\\\\\\\n  overflow: hidden;\\\\\\\\n  text-overflow: ellipsis;\\\\\\\\n  white-space: nowrap;\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst ProfileCard = (props) => {\\\\\\\\n  const accountId = props.accountId ?? context.accountId;\\\\\\\\n  const link = props.link ?? true;\\\\\\\\n  // const hideAccountId = props.hideAccountId;\\\\\\\\n  // const hideName = props.hideName;\\\\\\\\n  const hideImage = props.hideImage;\\\\\\\\n  const iconOnly = props.iconOnly;\\\\\\\\n  const openLinkInNewTab = props.openLinkInNewTab ?? false;\\\\\\\\n\\\\\\\\n  const profile = props.profile ?? Social.getr(`${accountId}/profile`);\\\\\\\\n\\\\\\\\n  const name = profile.name ?? accountId;\\\\\\\\n  const title = props.title ?? `${name} @${accountId}`;\\\\\\\\n  const tooltip =\\\\\\\\n    props.tooltip && (props.tooltip === true ? title : props.tooltip);\\\\\\\\n\\\\\\\\n  let inner = (\\\\\\\\n    <div className=\\\\\\\\\\\\\\\"d-flex flex-row justify-content-center align-items-center\\\\\\\\\\\\\\\">\\\\\\\\n      {!hideImage && (\\\\\\\\n        <Widget\\\\\\\\n          key=\\\\\\\\\\\\\\\"image\\\\\\\\\\\\\\\"\\\\\\\\n          src=\\\\\\\\\\\\\\\"mob.near/widget/ProfileImage\\\\\\\\\\\\\\\"\\\\\\\\n          props={{\\\\\\\\n            style: { width: \\\\\\\\\\\\\\\"2.5em\\\\\\\\\\\\\\\", height: \\\\\\\\\\\\\\\"2.5em\\\\\\\\\\\\\\\", marginRight: \\\\\\\\\\\\\\\"0.3em\\\\\\\\\\\\\\\" },\\\\\\\\n            profile,\\\\\\\\n            accountId,\\\\\\\\n            className: \\\\\\\\\\\\\\\"d-inline-block flex-shrink-0\\\\\\\\\\\\\\\",\\\\\\\\n            imageClassName: \\\\\\\\\\\\\\\"rounded-circle w-100 h-100 align-top\\\\\\\\\\\\\\\",\\\\\\\\n          }}\\\\\\\\n        />\\\\\\\\n      )}\\\\\\\\n      {!iconOnly && (\\\\\\\\n        <div className=\\\\\\\\\\\\\\\"d-flex flex-column gap-1\\\\\\\\\\\\\\\">\\\\\\\\n          <AccountName key=\\\\\\\\\\\\\\\"accountName\\\\\\\\\\\\\\\">{name}</AccountName>\\\\\\\\n          <AccountName key=\\\\\\\\\\\\\\\"accountId\\\\\\\\\\\\\\\">@{accountId}</AccountName>\\\\\\\\n        </div>\\\\\\\\n      )}\\\\\\\\n    </div>\\\\\\\\n  );\\\\\\\\n\\\\\\\\n  inner = link ? (\\\\\\\\n    <a\\\\\\\\n      href={\\\\\\\\n        link !== true\\\\\\\\n          ? link\\\\\\\\n          : `/mob.near/widget/ProfilePage?accountId=${accountId}`\\\\\\\\n      }\\\\\\\\n      target={openLinkInNewTab ? \\\\\\\\\\\\\\\"_blank\\\\\\\\\\\\\\\" : \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\"}\\\\\\\\n      rel=\\\\\\\\\\\\\\\"noopener noreferrer\\\\\\\\\\\\\\\"\\\\\\\\n      className=\\\\\\\\\\\\\\\"link-dark text-truncate d-inline-flex\\\\\\\\\\\\\\\"\\\\\\\\n    >\\\\\\\\n      {inner}\\\\\\\\n    </a>\\\\\\\\n  ) : (\\\\\\\\n    <span className=\\\\\\\\\\\\\\\"text-truncate d-inline-flex\\\\\\\\\\\\\\\">{inner}</span>\\\\\\\\n  );\\\\\\\\n\\\\\\\\n  if (props.tooltip === true) {\\\\\\\\n    return (\\\\\\\\n      <Widget\\\\\\\\n        src=\\\\\\\\\\\\\\\"mob.near/widget/Profile.OverlayTrigger\\\\\\\\\\\\\\\"\\\\\\\\n        props={{ accountId, children: inner }}\\\\\\\\n      />\\\\\\\\n    );\\\\\\\\n  }\\\\\\\\n  if (tooltip) {\\\\\\\\n    inner = (\\\\\\\\n      <OverlayTrigger placement=\\\\\\\\\\\\\\\"auto\\\\\\\\\\\\\\\" overlay={<Tooltip>{tooltip}</Tooltip>}>\\\\\\\\n        {inner}\\\\\\\\n      </OverlayTrigger>\\\\\\\\n    );\\\\\\\\n  }\\\\\\\\n  return (\\\\\\\\n    <div className=\\\\\\\\\\\\\\\"d-flex flex-row align-items-center\\\\\\\\\\\\\\\">\\\\\\\\n      {inner}\\\\\\\\n      <Widget\\\\\\\\n        src=\\\\\\\\\\\\\\\"devhub.near/widget/devhub.components.molecule.BadgesList\\\\\\\\\\\\\\\"\\\\\\\\n        props={{\\\\\\\\n          accountId,\\\\\\\\n          mode: \\\\\\\\\\\\\\\"compact\\\\\\\\\\\\\\\",\\\\\\\\n        }}\\\\\\\\n      />\\\\\\\\n    </div>\\\\\\\\n  );\\\\\\\\n};\\\\\\\\n\\\\\\\\nreturn ProfileCard(props);\\\\\\\\n\"}, \"devhub.components.molecule.ProfileLine\": {\"\": \"const accountId = props.accountId ?? context.accountId;\\\\\\\\n\\\\\\\\nreturn (\\\\\\\\n  <span>\\\\\\\\n    <Widget\\\\\\\\n      src=\\\\\\\\\\\\\\\"mob.near/widget/ProfileLine\\\\\\\\\\\\\\\"\\\\\\\\n      props={{\\\\\\\\n        ...props,\\\\\\\\n        accountId,\\\\\\\\n        link: `#/mob.near/widget/ProfilePage?accountId=${accountId}`,\\\\\\\\n      }}\\\\\\\\n    />\\\\\\\\n    <Widget\\\\\\\\n      src=\\\\\\\\\\\\\\\"devhub.near/widget/devhub.components.molecule.BadgesList\\\\\\\\\\\\\\\"\\\\\\\\n      props={{\\\\\\\\n        accountId,\\\\\\\\n        mode: \\\\\\\\\\\\\\\"compact\\\\\\\\\\\\\\\",\\\\\\\\n      }}\\\\\\\\n    />\\\\\\\\n  </span>\\\\\\\\n);\\\\\\\\n\"}, \"devhub.components.molecule.BadgeDetails\": {\"\": \"const nearDevGovBadgesContractId = \\\\\\\\\\\\\\\"neardevgov.near\\\\\\\\\\\\\\\";\\\\\\\\n\\\\\\\\nlet badgeId, ownerAccountId;\\\\\\\\nif (props.tokenId) {\\\\\\\\n  let [_badgeId, _ownerAccountId] = props.tokenId.split(\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\", 2);\\\\\\\\n  badgeId = _badgeId;\\\\\\\\n  ownerAccountId = _ownerAccountId;\\\\\\\\n} else {\\\\\\\\n  badgeId = props.badgeId;\\\\\\\\n}\\\\\\\\n\\\\\\\\nif (!badgeId) {\\\\\\\\n  return (\\\\\\\\n    <>\\\\\\\\n      Please, provide <pre>badgeId</pre> or <pre>tokenId</pre> to the\\\\\\\\n      DevGovBadgeDetails component\\\\\\\\n    </>\\\\\\\\n  );\\\\\\\\n}\\\\\\\\n\\\\\\\\nlet badgeMetadata =\\\\\\\\n  props.badgeMetadata ??\\\\\\\\n  Near.view(nearDevGovBadgesContractId, \\\\\\\\\\\\\\\"get_badge\\\\\\\\\\\\\\\", {\\\\\\\\n    badge_id: badgeId,\\\\\\\\n  }).badge_metadata;\\\\\\\\n\\\\\\\\nif (!badgeMetadata) {\\\\\\\\n  return <>Loading...</>;\\\\\\\\n}\\\\\\\\n\\\\\\\\nreturn (\\\\\\\\n  <>\\\\\\\\n    <div className=\\\\\\\\\\\\\\\"bg-white shadow rounded overflow-hidden\\\\\\\\\\\\\\\">\\\\\\\\n      <div className=\\\\\\\\\\\\\\\"px-4 pt-0 pb-5 bg-dark position-relative\\\\\\\\\\\\\\\">\\\\\\\\n        <div\\\\\\\\n          className=\\\\\\\\\\\\\\\"profile-picture d-inline-block\\\\\\\\\\\\\\\"\\\\\\\\n          style={{ transform: \\\\\\\\\\\\\\\"translateY(7rem)\\\\\\\\\\\\\\\" }}\\\\\\\\n        >\\\\\\\\n          <Widget\\\\\\\\n            src=\\\\\\\\\\\\\\\"mob.near/widget/NftImage\\\\\\\\\\\\\\\"\\\\\\\\n            props={{\\\\\\\\n              style: { width: \\\\\\\\\\\\\\\"10em\\\\\\\\\\\\\\\", height: \\\\\\\\\\\\\\\"10em\\\\\\\\\\\\\\\" },\\\\\\\\n              className: \\\\\\\\\\\\\\\"rounded-circle w-100 h-100 img-thumbnail d-block\\\\\\\\\\\\\\\",\\\\\\\\n              nft: {\\\\\\\\n                tokenMetadata: badgeMetadata,\\\\\\\\n                contractId: nearDevGovBadgesContractId,\\\\\\\\n              },\\\\\\\\n              alt: badgeMetadata.title,\\\\\\\\n            }}\\\\\\\\n          />\\\\\\\\n        </div>\\\\\\\\n      </div>\\\\\\\\n      <div className=\\\\\\\\\\\\\\\"bg-light px-4 pb-4\\\\\\\\\\\\\\\">\\\\\\\\n        <div className=\\\\\\\\\\\\\\\"d-md-flex justify-content-between pt-3 mb-2\\\\\\\\\\\\\\\">\\\\\\\\n          <div style={{ paddingTop: \\\\\\\\\\\\\\\"3rem\\\\\\\\\\\\\\\" }}>\\\\\\\\n            <div className=\\\\\\\\\\\\\\\"me-2 d-sm-flex gap-1 flex-row align-items-center\\\\\\\\\\\\\\\">\\\\\\\\n              <div className=\\\\\\\\\\\\\\\"me-2 position-relative\\\\\\\\\\\\\\\">\\\\\\\\n                <h4 className=\\\\\\\\\\\\\\\"mt-0 mb-0 text-truncate\\\\\\\\\\\\\\\">\\\\\\\\n                  {badgeMetadata.title}\\\\\\\\n                </h4>\\\\\\\\n              </div>\\\\\\\\n            </div>\\\\\\\\n            <div className=\\\\\\\\\\\\\\\"d-flex flex-row\\\\\\\\\\\\\\\">\\\\\\\\n              <div className=\\\\\\\\\\\\\\\"me-4\\\\\\\\\\\\\\\">\\\\\\\\n                <span className=\\\\\\\\\\\\\\\"text-muted\\\\\\\\\\\\\\\">Awarded to</span>\\\\\\\\n                <span className=\\\\\\\\\\\\\\\"fw-bolder\\\\\\\\\\\\\\\">{badgeMetadata.copies}</span>\\\\\\\\n                <span className=\\\\\\\\\\\\\\\"text-muted\\\\\\\\\\\\\\\">developers</span>\\\\\\\\n              </div>\\\\\\\\n            </div>\\\\\\\\n            <div>\\\\\\\\n              <Markdown text={badgeMetadata.description} />\\\\\\\\n            </div>\\\\\\\\n          </div>\\\\\\\\n        </div>\\\\\\\\n      </div>\\\\\\\\n    </div>\\\\\\\\n  </>\\\\\\\\n);\\\\\\\\n\"}, \"devhub.components.molecule.MarkdownViewer\": {\"\": \"const Wrapper = styled.div`\\\\\\\\n  p {\\\\\\\\n    white-space: pre-line; // This ensures text breaks to new line\\\\\\\\n\\\\\\\\n    span {\\\\\\\\n      white-space: normal; // and this ensures profile links look normal\\\\\\\\n    }\\\\\\\\n  }\\\\\\\\n\\\\\\\\n  blockquote {\\\\\\\\n    margin: 1em 0;\\\\\\\\n    padding-left: 1.5em;\\\\\\\\n    border-left: 4px solid #ccc;\\\\\\\\n    color: #666;\\\\\\\\n    font-style: italic;\\\\\\\\n    font-size: inherit;\\\\\\\\n  }\\\\\\\\n\\\\\\\\n  pre {\\\\\\\\n    background-color: #f4f4f4;\\\\\\\\n    border: 1px solid #ddd;\\\\\\\\n    border-radius: 4px;\\\\\\\\n    padding: 1em;\\\\\\\\n    overflow-x: auto;\\\\\\\\n    font-family: \\\\\\\\\\\\\\\"Courier New\\\\\\\\\\\\\\\", Courier, monospace;\\\\\\\\n  }\\\\\\\\n\\\\\\\\n  a {\\\\\\\\n    color: #04a46e;\\\\\\\\n  }\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst Embedded = styled.span`\\\\\\\\n  white-space: normal;\\\\\\\\n\\\\\\\\n  p {\\\\\\\\n    white-space: normal;\\\\\\\\n  }\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst renderMention =\\\\\\\\n  props.renderMention ??\\\\\\\\n  ((accountId) => (\\\\\\\\n    <span key={accountId} className=\\\\\\\\\\\\\\\"d-inline-flex\\\\\\\\\\\\\\\" style={{ fontWeight: 500 }}>\\\\\\\\n      <Widget\\\\\\\\n        src=\\\\\\\\\\\\\\\"devhub.near/widget/devhub.components.molecule.ProfileLine\\\\\\\\\\\\\\\"\\\\\\\\n        props={{\\\\\\\\n          accountId: accountId.toLowerCase(),\\\\\\\\n          hideAccountId: true,\\\\\\\\n          tooltip: true,\\\\\\\\n        }}\\\\\\\\n      />\\\\\\\\n    </span>\\\\\\\\n  ));\\\\\\\\n\\\\\\\\nreturn (\\\\\\\\n  <Wrapper>\\\\\\\\n    <Markdown text={props.text} onMention={renderMention} />\\\\\\\\n  </Wrapper>\\\\\\\\n);\\\\\\\\n\"}}}}}"
      }
    ],
    "actions_agg": {
      "deposit": 0
    },
    "outcomes": {
      "status": true
    },
    "outcomes_agg": {
      "transaction_fee": 2.0393524635425e+21
    }
  },
  {
    "id": "1906033155",
    "receipt_id": "8NkavH4XZZVNb2daDNBCWu9fsX5hBR2Ut2Rjx8igJfou",
    "predecessor_account_id": "system",
    "receiver_account_id": "devhub.near",
    "receipt_kind": "ACTION",
    "receipt_block": {
      "block_hash": "ETd4QP6XdCBbyb7jUaCD9jcskYWk4sFit1XcJv8PiiVa",
      "block_height": 109021217,
      "block_timestamp": 1703784610654450700
    },
    "receipt_outcome": {
      "gas_burnt": 223182562500,
      "tokens_burnt": 0,
      "executor_account_id": "devhub.near",
      "status": true
    },
    "transaction_hash": "gEgjfY3xJNUWChGmkrUXyP5kYvCnY9SWisRMMyvpVje",
    "included_in_block_hash": "Gx2gd1vx5oTpGY4gGKmXzZWGGyWcPw9qESYeDrfL4hXn",
    "block_timestamp": "1703784608008659608",
    "block": {
      "block_height": 109021215
    },
    "receipt_conversion_tokens_burnt": "251169697511200000000",
    "actions": [
      {
        "action": "TRANSFER",
        "method": null,
        "deposit": 1.87293780948328e+23,
        "fee": 0,
        "args": null
      }
    ],
    "actions_agg": {
      "deposit": 0
    },
    "outcomes": {
      "status": true
    },
    "outcomes_agg": {
      "transaction_fee": 2.0393524635425e+21
    }
  },
  {
    "id": "1946972877",
    "receipt_id": "3Y7VbP6W36f1yjkNQFWDD4GXp4jFGqHWZVqQbJX5vgKZ",
    "predecessor_account_id": "frol.near",
    "receiver_account_id": "devhub.near",
    "receipt_kind": "ACTION",
    "receipt_block": {
      "block_hash": "B8WsQ55fAmGjmX2Zv2wQG6SfxUhZvz1df7ziWjPwxFzs",
      "block_height": 109149565,
      "block_timestamp": 1703935010131329300
    },
    "receipt_outcome": {
      "gas_burnt": 223182562500,
      "tokens_burnt": 22318256250000000000,
      "executor_account_id": "devhub.near",
      "status": true
    },
    "transaction_hash": "EN3R4zVLvHbfaAeN7s2nK1CowBHD8jorvrsmWoMj77Ke",
    "included_in_block_hash": "2QC94RC9h8e4v3cDmgoe7GFurAdxWuCVPUtEEFT5QAkk",
    "block_timestamp": "1703935009149824986",
    "block": {
      "block_height": 109149564
    },
    "receipt_conversion_tokens_burnt": "22318256250000000000",
    "actions": [
      {
        "action": "TRANSFER",
        "method": null,
        "deposit": 5e+25,
        "fee": 22318256250000000000,
        "args": null
      }
    ],
    "actions_agg": {
      "deposit": 5e+25
    },
    "outcomes": {
      "status": true
    },
    "outcomes_agg": {
      "transaction_fee": 44636512500000000000
    }
  },
  {
    "id": "1946978291",
    "receipt_id": "EQBuPop8SFDevTC4XYaeu5nj5WUg7rvUoHMMgm1dpWJ8",
    "predecessor_account_id": "devhub.near",
    "receiver_account_id": "social.near",
    "receipt_kind": "ACTION",
    "receipt_block": {
      "block_hash": "FBRy8gWcZGQ7WuSdYgEsa3Zpp4Ass4BnVbqwJ23a92T2",
      "block_height": 109149715,
      "block_timestamp": 1703935160649290200
    },
    "receipt_outcome": {
      "gas_burnt": 13855786705103,
      "tokens_burnt": 1.3855786705103e+21,
      "executor_account_id": "social.near",
      "status": true
    },
    "transaction_hash": "4Ue9rtZndGNcfVCJpZJMppzif7bTaKVczFWFfK6ieVKS",
    "included_in_block_hash": "HL1qBVGRdaxZgZaRL2oVCLu5CmwNZuk3kCVvX3z7pCgU",
    "block_timestamp": "1703935159492886618",
    "block": {
      "block_height": 109149714
    },
    "receipt_conversion_tokens_burnt": "250308639327800000000",
    "actions": [
      {
        "action": "FUNCTION_CALL",
        "method": "set",
        "deposit": 0,
        "fee": 1.3855786705103e+21,
        "args": "{\"data\": {\"devhub.near\": {\"widget\": {\"devhub.page.create\": {\"\": \"const CenteredMessage = styled.div`\\\\\\\\n  display: flex;\\\\\\\\n  flex-direction: column;\\\\\\\\n  justify-content: center;\\\\\\\\n  align-items: center;\\\\\\\\n  width: 100%;\\\\\\\\n  height: 384px;\\\\\\\\n`;\\\\\\\\n\\\\\\\\nif (!context.accountId) {\\\\\\\\n  return (\\\\\\\\n    <CenteredMessage height={\\\\\\\\\\\\\\\"384px\\\\\\\\\\\\\\\"}>\\\\\\\\n      <h2>Please sign in to create a post.</h2>\\\\\\\\n    </CenteredMessage>\\\\\\\\n  );\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst postTypeOptions = {\\\\\\\\n  Idea: {\\\\\\\\n    name: \\\\\\\\\\\\\\\"Idea\\\\\\\\\\\\\\\",\\\\\\\\n    icon: \\\\\\\\\\\\\\\"bi-lightbulb\\\\\\\\\\\\\\\",\\\\\\\\n\\\\\\\\n    description:\\\\\\\\n      \\\\\\\\\\\\\\\"Get feedback from the community about a problem, opportunity, or need.\\\\\\\\\\\\\\\",\\\\\\\\n  },\\\\\\\\n\\\\\\\\n  Solution: {\\\\\\\\n    name: \\\\\\\\\\\\\\\"Solution\\\\\\\\\\\\\\\",\\\\\\\\n    icon: \\\\\\\\\\\\\\\"bi-rocket\\\\\\\\\\\\\\\",\\\\\\\\n\\\\\\\\n    description:\\\\\\\\n      \\\\\\\\\\\\\\\"Provide a specific proposal or implementation to an idea, optionally requesting funding. If your solution relates to an existing idea, please reply to the original post with a solution.\\\\\\\\\\\\\\\",\\\\\\\\n  },\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst typeSwitch = (optionName) => {\\\\\\\\n  State.update({\\\\\\\\n    postType: optionName,\\\\\\\\n  });\\\\\\\\n};\\\\\\\\n\\\\\\\\nfunction initLabels() {\\\\\\\\n  const labels = [];\\\\\\\\n  if (props.labels) {\\\\\\\\n    labels.push(...props.labels.split(\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"));\\\\\\\\n  }\\\\\\\\n  if (props.referral) {\\\\\\\\n    labels.push(`referral:${props.referral}`);\\\\\\\\n  }\\\\\\\\n  return labels;\\\\\\\\n}\\\\\\\\n\\\\\\\\nState.init({\\\\\\\\n  seekingFunding: false,\\\\\\\\n  labels: initLabels(),\\\\\\\\n  postType: \\\\\\\\\\\\\\\"Idea\\\\\\\\\\\\\\\",\\\\\\\\n  name: props.name ?? \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\",\\\\\\\\n  description: props.description ?? \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\",\\\\\\\\n  amount: props.amount ?? \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\",\\\\\\\\n  token: props.token ?? \\\\\\\\\\\\\\\"USDT\\\\\\\\\\\\\\\",\\\\\\\\n  supervisor: props.supervisor ?? \\\\\\\\\\\\\\\"neardevdao.near\\\\\\\\\\\\\\\",\\\\\\\\n  warning: \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\",\\\\\\\\n  mentionInput: \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\", // text next to @ tag\\\\\\\\n  mentionsArray: [], // all the mentions in the description\\\\\\\\n});\\\\\\\\n\\\\\\\\nconst autocompleteEnabled = true;\\\\\\\\n\\\\\\\\nconst AutoComplete = styled.div`\\\\\\\\n  z-index: 5;\\\\\\\\n\\\\\\\\n  > div > div {\\\\\\\\n    padding: calc(var(--padding) / 2);\\\\\\\\n  }\\\\\\\\n`;\\\\\\\\n\\\\\\\\nfunction textareaInputHandler(value) {\\\\\\\\n  const words = value.split(/\\\\\\\\\\\\\\\\s+/);\\\\\\\\n  const allMentions = words\\\\\\\\n    .filter((word) => word.startsWith(\\\\\\\\\\\\\\\"@\\\\\\\\\\\\\\\"))\\\\\\\\n    .map((mention) => mention.slice(1));\\\\\\\\n  const newMentions = allMentions.filter(\\\\\\\\n    (item) => !state.mentionsArray.includes(item)\\\\\\\\n  );\\\\\\\\n\\\\\\\\n  State.update({\\\\\\\\n    text: value,\\\\\\\\n    showAccountAutocomplete: newMentions?.length > 0,\\\\\\\\n    mentionsArray: allMentions,\\\\\\\\n    mentionInput: newMentions?.[0] ?? \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\",\\\\\\\\n  });\\\\\\\\n}\\\\\\\\n\\\\\\\\nfunction autoCompleteAccountId(id) {\\\\\\\\n  // to make sure we update the @ at correct index\\\\\\\\n  let currentIndex = 0;\\\\\\\\n  const updatedDescription = state.description.replace(\\\\\\\\n    /(?:^|\\\\\\\\\\\\\\\\s)(@[^\\\\\\\\\\\\\\\\s]*)/g,\\\\\\\\n    (match) => {\\\\\\\\n      if (currentIndex === state.mentionsArray.indexOf(state.mentionInput)) {\\\\\\\\n        currentIndex++;\\\\\\\\n        return ` @${id}`;\\\\\\\\n      } else {\\\\\\\\n        currentIndex++;\\\\\\\\n        return match;\\\\\\\\n      }\\\\\\\\n    }\\\\\\\\n  );\\\\\\\\n\\\\\\\\n  State.update({\\\\\\\\n    handler: \\\\\\\\\\\\\\\"autocompleteSelected\\\\\\\\\\\\\\\",\\\\\\\\n    description: updatedDescription,\\\\\\\\n    showAccountAutocomplete: false,\\\\\\\\n  });\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst { href } = VM.require(\\\\\\\\\\\\\\\"devhub.near/widget/core.lib.url\\\\\\\\\\\\\\\");\\\\\\\\n\\\\\\\\nif (!href) {\\\\\\\\n  return <p>Loading modules...</p>;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// This must be outside onClick, because Near.view returns null at first, and when the view call finished, it returns true/false.\\\\\\\\n// If checking this inside onClick, it will give `null` and we cannot tell the result is true or false.\\\\\\\\nlet grantNotify = Near.view(\\\\\\\\\\\\\\\"social.near\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"is_write_permission_granted\\\\\\\\\\\\\\\", {\\\\\\\\n  predecessor_id: \\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\",\\\\\\\\n  key: context.accountId + \\\\\\\\\\\\\\\"/index/notify\\\\\\\\\\\\\\\",\\\\\\\\n});\\\\\\\\nif (grantNotify === null) {\\\\\\\\n  return;\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst onSubmit = () => {\\\\\\\\n  let body = {\\\\\\\\n    name: state.name,\\\\\\\\n    description: generateDescription(\\\\\\\\n      state.description,\\\\\\\\n      state.amount,\\\\\\\\n      state.token,\\\\\\\\n      state.supervisor,\\\\\\\\n      state.seekingFunding\\\\\\\\n    ),\\\\\\\\n  };\\\\\\\\n\\\\\\\\n  if (state.postType === \\\\\\\\\\\\\\\"Solution\\\\\\\\\\\\\\\") {\\\\\\\\n    body = {\\\\\\\\n      ...body,\\\\\\\\n      post_type: \\\\\\\\\\\\\\\"Solution\\\\\\\\\\\\\\\",\\\\\\\\n      solution_version: \\\\\\\\\\\\\\\"V1\\\\\\\\\\\\\\\",\\\\\\\\n    };\\\\\\\\n  } else {\\\\\\\\n    // Idea\\\\\\\\n    body = {\\\\\\\\n      ...body,\\\\\\\\n      post_type: \\\\\\\\\\\\\\\"Idea\\\\\\\\\\\\\\\",\\\\\\\\n      idea_version: \\\\\\\\\\\\\\\"V1\\\\\\\\\\\\\\\",\\\\\\\\n    };\\\\\\\\n  }\\\\\\\\n\\\\\\\\n  let txn = [];\\\\\\\\n\\\\\\\\n  txn.push({\\\\\\\\n    contractName: \\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\",\\\\\\\\n    methodName: \\\\\\\\\\\\\\\"add_post\\\\\\\\\\\\\\\",\\\\\\\\n    args: {\\\\\\\\n      parent_id: null,\\\\\\\\n      labels: state.labels,\\\\\\\\n      body: body,\\\\\\\\n    },\\\\\\\\n    gas: Big(10).pow(14),\\\\\\\\n  });\\\\\\\\n\\\\\\\\n  if (grantNotify === false) {\\\\\\\\n    txn.unshift({\\\\\\\\n      contractName: \\\\\\\\\\\\\\\"social.near\\\\\\\\\\\\\\\",\\\\\\\\n      methodName: \\\\\\\\\\\\\\\"grant_write_permission\\\\\\\\\\\\\\\",\\\\\\\\n      args: {\\\\\\\\n        predecessor_id: \\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\",\\\\\\\\n        keys: [context.accountId + \\\\\\\\\\\\\\\"/index/notify\\\\\\\\\\\\\\\"],\\\\\\\\n      },\\\\\\\\n      gas: Big(10).pow(14),\\\\\\\\n      deposit: Big(10).pow(22),\\\\\\\\n    });\\\\\\\\n  }\\\\\\\\n\\\\\\\\n  Near.call(txn);\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst onIdeaClick = () => {\\\\\\\\n  State.update({ postType: \\\\\\\\\\\\\\\"Idea\\\\\\\\\\\\\\\", seekingFunding: false });\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst onSolutionClick = () => {\\\\\\\\n  State.update({ postType: \\\\\\\\\\\\\\\"Solution\\\\\\\\\\\\\\\" });\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst normalizeLabel = (label) =>\\\\\\\\n  label\\\\\\\\n    .replaceAll(/[- \\\\\\\\\\\\\\\\.]/g, \\\\\\\\\\\\\\\"_\\\\\\\\\\\\\\\")\\\\\\\\n    .replaceAll(/[^\\\\\\\\\\\\\\\\w]+/g, \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\")\\\\\\\\n    .replaceAll(/_+/g, \\\\\\\\\\\\\\\"-\\\\\\\\\\\\\\\")\\\\\\\\n    .replace(/^-+/, \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\")\\\\\\\\n    .replace(/-+$/, \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\")\\\\\\\\n    .toLowerCase()\\\\\\\\n    .trim(\\\\\\\\\\\\\\\"-\\\\\\\\\\\\\\\");\\\\\\\\n\\\\\\\\nconst checkLabel = (label) => {\\\\\\\\n  Near.asyncView(\\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"is_allowed_to_use_labels\\\\\\\\\\\\\\\", {\\\\\\\\n    editor: context.accountId,\\\\\\\\n    labels: [label],\\\\\\\\n  }).then((allowed) => {\\\\\\\\n    if (allowed) {\\\\\\\\n      State.update({ warning: \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\" });\\\\\\\\n    } else {\\\\\\\\n      State.update({\\\\\\\\n        warning:\\\\\\\\n          \\\\\\\\\\\\'The label \\\\\\\\\\\\\\\"\\\\\\\\\\\\' +\\\\\\\\n          label +\\\\\\\\n          \\\\\\\\\\\\'\\\\\\\\\\\\\\\" is protected and can only be added by moderators\\\\\\\\\\\\',\\\\\\\\n      });\\\\\\\\n      return;\\\\\\\\n    }\\\\\\\\n  });\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst setLabels = (labels) => {\\\\\\\\n  const normalizedLabels = labels.map((o) =>\\\\\\\\n    o.customOption ? normalizeLabel(o.label) : normalizeLabel(o)\\\\\\\\n  );\\\\\\\\n  const uniqueLabels = [...new Set(normalizedLabels)];\\\\\\\\n\\\\\\\\n  if (uniqueLabels.length < state.labels.length) {\\\\\\\\n    const removedLabel = state.labels.find(\\\\\\\\n      (label) => !uniqueLabels.includes(label)\\\\\\\\n    );\\\\\\\\n\\\\\\\\n    const allowed = Near.asyncView(\\\\\\\\n      \\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\",\\\\\\\\n      \\\\\\\\\\\\\\\"is_allowed_to_use_labels\\\\\\\\\\\\\\\",\\\\\\\\n      {\\\\\\\\n        editor: context.accountId,\\\\\\\\n        labels: [removedLabel],\\\\\\\\n      }\\\\\\\\n    );\\\\\\\\n\\\\\\\\n    if (allowed) {\\\\\\\\n      State.update({ labels: uniqueLabels });\\\\\\\\n    } else {\\\\\\\\n      State.update({\\\\\\\\n        warning: `The label \\\\\\\\\\\\\\\"${removedLabel}\\\\\\\\\\\\\\\" is protected and can only be updated by moderators`,\\\\\\\\n      });\\\\\\\\n    }\\\\\\\\n  } else {\\\\\\\\n    State.update({ labels: uniqueLabels });\\\\\\\\n  }\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst existingLabels =\\\\\\\\n  Near.view(\\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"get_all_allowed_labels\\\\\\\\\\\\\\\", {\\\\\\\\n    editor: context.accountId,\\\\\\\\n  }) ?? [];\\\\\\\\nconst allowedLabels = existingLabels.filter((it) => it !== \\\\\\\\\\\\\\\"blog\\\\\\\\\\\\\\\"); // remove blog label so users cannot publish blogs from feed\\\\\\\\n\\\\\\\\nfunction NameEditor() {\\\\\\\\n  return (\\\\\\\\n    <div className=\\\\\\\\\\\\\\\"col-lg-12 mb-2\\\\\\\\\\\\\\\">\\\\\\\\n      <label htmlFor=\\\\\\\\\\\\\\\"title\\\\\\\\\\\\\\\" className=\\\\\\\\\\\\\\\"fs-6 fw-bold mb-1\\\\\\\\\\\\\\\">\\\\\\\\n        Title\\\\\\\\n      </label>\\\\\\\\n      <input\\\\\\\\n        name=\\\\\\\\\\\\\\\"title\\\\\\\\\\\\\\\"\\\\\\\\n        id=\\\\\\\\\\\\\\\"title\\\\\\\\\\\\\\\"\\\\\\\\n        data-testid=\\\\\\\\\\\\\\\"name-editor\\\\\\\\\\\\\\\"\\\\\\\\n        type=\\\\\\\\\\\\\\\"text\\\\\\\\\\\\\\\"\\\\\\\\n        value={state.name}\\\\\\\\n        onChange={(event) => State.update({ name: event.target.value })}\\\\\\\\n      />\\\\\\\\n    </div>\\\\\\\\n  );\\\\\\\\n}\\\\\\\\n\\\\\\\\nfunction DescriptionEditor() {\\\\\\\\n  return (\\\\\\\\n    <div className=\\\\\\\\\\\\\\\"col-lg-12 mb-2\\\\\\\\\\\\\\\">\\\\\\\\n      <label htmlFor=\\\\\\\\\\\\\\\"description\\\\\\\\\\\\\\\" className=\\\\\\\\\\\\\\\"fs-6 fw-bold mb-1\\\\\\\\\\\\\\\">\\\\\\\\n        Description\\\\\\\\n      </label>\\\\\\\\n      <Widget\\\\\\\\n        src=\\\\\\\\\\\\\\\"devhub.near/widget/devhub.components.molecule.MarkdownEditor\\\\\\\\\\\\\\\"\\\\\\\\n        props={{\\\\\\\\n          data: { handler: state.handler, content: state.description },\\\\\\\\n          onChange: (content) => {\\\\\\\\n            State.update({ description: content, handler: \\\\\\\\\\\\\\\"update\\\\\\\\\\\\\\\" });\\\\\\\\n            textareaInputHandler(content);\\\\\\\\n          },\\\\\\\\n        }}\\\\\\\\n      />\\\\\\\\n      {autocompleteEnabled && state.showAccountAutocomplete && (\\\\\\\\n        <AutoComplete>\\\\\\\\n          <Widget\\\\\\\\n            src=\\\\\\\\\\\\\\\"devhub.near/widget/devhub.components.molecule.AccountAutocomplete\\\\\\\\\\\\\\\"\\\\\\\\n            props={{\\\\\\\\n              term: state.mentionInput,\\\\\\\\n              onSelect: autoCompleteAccountId,\\\\\\\\n              onClose: () => State.update({ showAccountAutocomplete: false }),\\\\\\\\n            }}\\\\\\\\n          />\\\\\\\\n        </AutoComplete>\\\\\\\\n      )}\\\\\\\\n    </div>\\\\\\\\n  );\\\\\\\\n}\\\\\\\\n\\\\\\\\nfunction LabelsEditor() {\\\\\\\\n  return (\\\\\\\\n    <div className=\\\\\\\\\\\\\\\"col-lg-12 mb-2\\\\\\\\\\\\\\\">\\\\\\\\n      <label htmlFor=\\\\\\\\\\\\\\\"labels\\\\\\\\\\\\\\\" className=\\\\\\\\\\\\\\\"fs-6 fw-bold mb-1\\\\\\\\\\\\\\\">\\\\\\\\n        Labels\\\\\\\\n      </label>\\\\\\\\n      <Typeahead\\\\\\\\n        multiple\\\\\\\\n        onInputChange={checkLabel}\\\\\\\\n        onChange={setLabels}\\\\\\\\n        options={allowedLabels}\\\\\\\\n        placeholder=\\\\\\\\\\\\\\\"near.social, widget, NEP, standard, protocol, tool\\\\\\\\\\\\\\\"\\\\\\\\n        selected={state.labels}\\\\\\\\n        positionFixed\\\\\\\\n        allowNew={(results, props) => {\\\\\\\\n          return (\\\\\\\\n            !allowedLabels.includes(props.text) &&\\\\\\\\n            props.text.toLowerCase() !== \\\\\\\\\\\\\\\"blog\\\\\\\\\\\\\\\" && // dont allow adding \\\\\\\\\\\\\\\"Blog\\\\\\\\\\\\\\\"\\\\\\\\n            props.selected.filter((selected) => selected.name === props.text)\\\\\\\\n              .length == 0 &&\\\\\\\\n            Near.view(\\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"is_allowed_to_use_labels\\\\\\\\\\\\\\\", {\\\\\\\\n              editor: context.accountId,\\\\\\\\n              labels: [props.text],\\\\\\\\n            })\\\\\\\\n          );\\\\\\\\n        }}\\\\\\\\n      />\\\\\\\\n    </div>\\\\\\\\n  );\\\\\\\\n}\\\\\\\\n\\\\\\\\nfunction FundraisingToggle() {\\\\\\\\n  return (\\\\\\\\n    <>\\\\\\\\n      <div class=\\\\\\\\\\\\\\\"mb-2\\\\\\\\\\\\\\\">\\\\\\\\n        <p class=\\\\\\\\\\\\\\\"fs-6 fw-bold mb-1\\\\\\\\\\\\\\\">\\\\\\\\n          Are you seeking funding for your solution?\\\\\\\\n          <span class=\\\\\\\\\\\\\\\"text-muted fw-normal\\\\\\\\\\\\\\\">(Optional)</span>\\\\\\\\n        </p>\\\\\\\\n        <div class=\\\\\\\\\\\\\\\"form-check form-check-inline\\\\\\\\\\\\\\\">\\\\\\\\n          <label class=\\\\\\\\\\\\\\\"form-check-label\\\\\\\\\\\\\\\">\\\\\\\\n            <button\\\\\\\\n              className=\\\\\\\\\\\\\\\"btn btn-light p-0\\\\\\\\\\\\\\\"\\\\\\\\n              style={{\\\\\\\\n                backgroundColor: state.seekingFunding ? \\\\\\\\\\\\\\\"#0C7283\\\\\\\\\\\\\\\" : \\\\\\\\\\\\\\\"inherit\\\\\\\\\\\\\\\",\\\\\\\\n                color: \\\\\\\\\\\\\\\"#f3f3f3\\\\\\\\\\\\\\\",\\\\\\\\n                border: \\\\\\\\\\\\\\\"solid #D9D9D9\\\\\\\\\\\\\\\",\\\\\\\\n                borderRadius: \\\\\\\\\\\\\\\"100%\\\\\\\\\\\\\\\",\\\\\\\\n                height: \\\\\\\\\\\\\\\"20px\\\\\\\\\\\\\\\",\\\\\\\\n                width: \\\\\\\\\\\\\\\"20px\\\\\\\\\\\\\\\",\\\\\\\\n              }}\\\\\\\\n              onClick={() => State.update({ seekingFunding: true })}\\\\\\\\n            />\\\\\\\\n            Yes\\\\\\\\n          </label>\\\\\\\\n        </div>\\\\\\\\n        <div class=\\\\\\\\\\\\\\\"form-check form-check-inline\\\\\\\\\\\\\\\">\\\\\\\\n          <label class=\\\\\\\\\\\\\\\"form-check-label\\\\\\\\\\\\\\\">\\\\\\\\n            <button\\\\\\\\n              className=\\\\\\\\\\\\\\\"btn btn-light p-0\\\\\\\\\\\\\\\"\\\\\\\\n              style={{\\\\\\\\n                backgroundColor: !state.seekingFunding ? \\\\\\\\\\\\\\\"#0C7283\\\\\\\\\\\\\\\" : \\\\\\\\\\\\\\\"inherit\\\\\\\\\\\\\\\",\\\\\\\\n                color: \\\\\\\\\\\\\\\"#f3f3f3\\\\\\\\\\\\\\\",\\\\\\\\n                border: \\\\\\\\\\\\\\\"solid #D9D9D9\\\\\\\\\\\\\\\",\\\\\\\\n                borderRadius: \\\\\\\\\\\\\\\"100%\\\\\\\\\\\\\\\",\\\\\\\\n                height: \\\\\\\\\\\\\\\"20px\\\\\\\\\\\\\\\",\\\\\\\\n                width: \\\\\\\\\\\\\\\"20px\\\\\\\\\\\\\\\",\\\\\\\\n              }}\\\\\\\\n              onClick={() => State.update({ seekingFunding: false })}\\\\\\\\n            />\\\\\\\\n            No\\\\\\\\n          </label>\\\\\\\\n        </div>\\\\\\\\n      </div>\\\\\\\\n    </>\\\\\\\\n  );\\\\\\\\n}\\\\\\\\n\\\\\\\\nfunction Fundraising() {\\\\\\\\n  return (\\\\\\\\n    <div class=\\\\\\\\\\\\\\\"d-flex flex-column mb-2\\\\\\\\\\\\\\\">\\\\\\\\n      <div className=\\\\\\\\\\\\\\\"col-lg-6  mb-2\\\\\\\\\\\\\\\">\\\\\\\\n        Currency\\\\\\\\n        <select\\\\\\\\n          onChange={(event) => State.update({ token: event.target.value })}\\\\\\\\n          class=\\\\\\\\\\\\\\\"form-select\\\\\\\\\\\\\\\"\\\\\\\\n          aria-label=\\\\\\\\\\\\\\\"Default select\\\\\\\\\\\\\\\"\\\\\\\\n        >\\\\\\\\n          <option selected value=\\\\\\\\\\\\\\\"USDT\\\\\\\\\\\\\\\">\\\\\\\\n            USDT\\\\\\\\n          </option>\\\\\\\\n          <option value=\\\\\\\\\\\\\\\"NEAR\\\\\\\\\\\\\\\">NEAR</option>\\\\\\\\n          <option value=\\\\\\\\\\\\\\\"USDC\\\\\\\\\\\\\\\">USDC</option>\\\\\\\\n        </select>\\\\\\\\n      </div>\\\\\\\\n      <div className=\\\\\\\\\\\\\\\"col-lg-6 mb-2\\\\\\\\\\\\\\\">\\\\\\\\n        Requested amount{\\\\\\\\\\\\\\\" \\\\\\\\\\\\\\\"}\\\\\\\\n        <span class=\\\\\\\\\\\\\\\"text-muted fw-normal\\\\\\\\\\\\\\\">(Numbers Only)</span>\\\\\\\\n        <input\\\\\\\\n          data-testid=\\\\\\\\\\\\\\\"requested-amount-editor\\\\\\\\\\\\\\\"\\\\\\\\n          type=\\\\\\\\\\\\\\\"number\\\\\\\\\\\\\\\"\\\\\\\\n          value={parseInt(state.amount) > 0 ? state.amount : \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\"}\\\\\\\\n          min={0}\\\\\\\\n          onChange={(event) =>\\\\\\\\n            State.update({\\\\\\\\n              amount: Number(\\\\\\\\n                event.target.value.toString().replace(/e/g, \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\")\\\\\\\\n              ).toString(),\\\\\\\\n            })\\\\\\\\n          }\\\\\\\\n        />\\\\\\\\n      </div>\\\\\\\\n      <div className=\\\\\\\\\\\\\\\"col-lg-6 mb-2\\\\\\\\\\\\\\\">\\\\\\\\n        <p class=\\\\\\\\\\\\\\\"mb-1\\\\\\\\\\\\\\\">\\\\\\\\n          Requested sponsor <span class=\\\\\\\\\\\\\\\"text-muted fw-normal\\\\\\\\\\\\\\\">(Optional)</span>\\\\\\\\n        </p>\\\\\\\\n        <p style={{ fontSize: \\\\\\\\\\\\\\\"13px\\\\\\\\\\\\\\\" }} class=\\\\\\\\\\\\\\\"m-0 text-muted fw-light\\\\\\\\\\\\\\\">\\\\\\\\n          If you are requesting funding from a specific sponsor, please enter\\\\\\\\n          their username.\\\\\\\\n        </p>\\\\\\\\n        <div class=\\\\\\\\\\\\\\\"input-group flex-nowrap\\\\\\\\\\\\\\\">\\\\\\\\n          <span class=\\\\\\\\\\\\\\\"input-group-text\\\\\\\\\\\\\\\" id=\\\\\\\\\\\\\\\"addon-wrapping\\\\\\\\\\\\\\\">\\\\\\\\n            @\\\\\\\\n          </span>\\\\\\\\n          <input\\\\\\\\n            type=\\\\\\\\\\\\\\\"text\\\\\\\\\\\\\\\"\\\\\\\\n            class=\\\\\\\\\\\\\\\"form-control\\\\\\\\\\\\\\\"\\\\\\\\n            placeholder=\\\\\\\\\\\\\\\"Enter username\\\\\\\\\\\\\\\"\\\\\\\\n            value={state.supervisor}\\\\\\\\n            onChange={(event) =>\\\\\\\\n              State.update({ supervisor: event.target.value })\\\\\\\\n            }\\\\\\\\n          />\\\\\\\\n        </div>\\\\\\\\n      </div>\\\\\\\\n    </div>\\\\\\\\n  );\\\\\\\\n}\\\\\\\\n\\\\\\\\nfunction generateDescription(text, amount, token, supervisor, seekingFunding) {\\\\\\\\n  const fundingText =\\\\\\\\n    amount > 0 && token ? `###### Requested amount: ${amount} ${token}\\\\\\\\\\\\\\\\n` : \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\";\\\\\\\\n  const supervisorText = supervisor\\\\\\\\n    ? `###### Requested sponsor: @${supervisor}\\\\\\\\\\\\\\\\n`\\\\\\\\n    : \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\";\\\\\\\\n  return seekingFunding ? `${fundingText}${supervisorText}${text}` : text;\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst [tab, setTab] = useState(\\\\\\\\\\\\\\\"editor\\\\\\\\\\\\\\\");\\\\\\\\n\\\\\\\\nreturn (\\\\\\\\n  <div class=\\\\\\\\\\\\\\\"bg-light d-flex flex-column flex-grow-1 w-100\\\\\\\\\\\\\\\">\\\\\\\\n    <div class=\\\\\\\\\\\\\\\"mx-2 mx-md-5 mb-5\\\\\\\\\\\\\\\">\\\\\\\\n      {props.transactionHashes ? (\\\\\\\\n        <>\\\\\\\\n          Post created successfully. Back to{\\\\\\\\\\\\\\\" \\\\\\\\\\\\\\\"}\\\\\\\\n          <Link\\\\\\\\n            style={{\\\\\\\\n              color: \\\\\\\\\\\\\\\"#3252A6\\\\\\\\\\\\\\\",\\\\\\\\n            }}\\\\\\\\n            className=\\\\\\\\\\\\\\\"fw-bold\\\\\\\\\\\\\\\"\\\\\\\\n            to={href({\\\\\\\\n              widgetSrc: \\\\\\\\\\\\\\\"devhub.near/widget/app\\\\\\\\\\\\\\\",\\\\\\\\n              params: { page: \\\\\\\\\\\\\\\"feed\\\\\\\\\\\\\\\" },\\\\\\\\n            })}\\\\\\\\n          >\\\\\\\\n            feed\\\\\\\\n          </Link>\\\\\\\\n        </>\\\\\\\\n      ) : (\\\\\\\\n        <>\\\\\\\\n          <div className=\\\\\\\\\\\\\\\"card\\\\\\\\\\\\\\\">\\\\\\\\n            <div className=\\\\\\\\\\\\\\\"card-header pb-0\\\\\\\\\\\\\\\">\\\\\\\\n              <div>\\\\\\\\n                <ul class=\\\\\\\\\\\\\\\"nav nav-tabs\\\\\\\\\\\\\\\">\\\\\\\\n                  <li class=\\\\\\\\\\\\\\\"nav-item\\\\\\\\\\\\\\\">\\\\\\\\n                    <button\\\\\\\\n                      class={`nav-link ${tab === \\\\\\\\\\\\\\\"editor\\\\\\\\\\\\\\\" ? \\\\\\\\\\\\\\\"active\\\\\\\\\\\\\\\" : \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\"}`}\\\\\\\\n                      onClick={() => setTab(\\\\\\\\\\\\\\\"editor\\\\\\\\\\\\\\\")}\\\\\\\\n                    >\\\\\\\\n                      Editor\\\\\\\\n                    </button>\\\\\\\\n                  </li>\\\\\\\\n                  <li class=\\\\\\\\\\\\\\\"nav-item\\\\\\\\\\\\\\\">\\\\\\\\n                    <button\\\\\\\\n                      class={`nav-link ${tab === \\\\\\\\\\\\\\\"preview\\\\\\\\\\\\\\\" ? \\\\\\\\\\\\\\\"active\\\\\\\\\\\\\\\" : \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\"}`}\\\\\\\\n                      onClick={() => setTab(\\\\\\\\\\\\\\\"preview\\\\\\\\\\\\\\\")}\\\\\\\\n                    >\\\\\\\\n                      Preview\\\\\\\\n                    </button>\\\\\\\\n                  </li>\\\\\\\\n                </ul>\\\\\\\\n              </div>\\\\\\\\n            </div>\\\\\\\\n            <div class=\\\\\\\\\\\\\\\"card border-light\\\\\\\\\\\\\\\">\\\\\\\\n              {tab === \\\\\\\\\\\\\\\"editor\\\\\\\\\\\\\\\" && (\\\\\\\\n                <>\\\\\\\\n                  <div class=\\\\\\\\\\\\\\\"card-body\\\\\\\\\\\\\\\">\\\\\\\\n                    <p class=\\\\\\\\\\\\\\\"card-title fw-bold fs-6\\\\\\\\\\\\\\\">\\\\\\\\n                      What do you want to create?\\\\\\\\n                    </p>\\\\\\\\n                    <div class=\\\\\\\\\\\\\\\"d-flex flex-row gap-2\\\\\\\\\\\\\\\">\\\\\\\\n                      {Object.values(postTypeOptions).map((option) => (\\\\\\\\n                        <button\\\\\\\\n                          className={`btn btn-${\\\\\\\\n                            state.postType === option.name\\\\\\\\n                              ? \\\\\\\\\\\\\\\"primary\\\\\\\\\\\\\\\"\\\\\\\\n                              : \\\\\\\\\\\\\\\"outline-secondary\\\\\\\\\\\\\\\"\\\\\\\\n                          }`}\\\\\\\\n                          data-testid={`btn-${option.name.toLowerCase()}`}\\\\\\\\n                          key={option.name}\\\\\\\\n                          onClick={() => typeSwitch(option.name)}\\\\\\\\n                          style={\\\\\\\\n                            state.postType === option.name\\\\\\\\n                              ? {\\\\\\\\n                                  backgroundColor: \\\\\\\\\\\\\\\"#0C7283\\\\\\\\\\\\\\\",\\\\\\\\n                                  color: \\\\\\\\\\\\\\\"#f3f3f3\\\\\\\\\\\\\\\",\\\\\\\\n                                }\\\\\\\\n                              : null\\\\\\\\n                          }\\\\\\\\n                          type=\\\\\\\\\\\\\\\"button\\\\\\\\\\\\\\\"\\\\\\\\n                        >\\\\\\\\n                          <i className={`bi ${option.icon}`} />\\\\\\\\n                          <span>{option.name}</span>\\\\\\\\n                        </button>\\\\\\\\n                      ))}\\\\\\\\n                    </div>\\\\\\\\n                    <p class=\\\\\\\\\\\\\\\"text-muted w-100 my-1\\\\\\\\\\\\\\\">\\\\\\\\n                      {postTypeOptions[state.postType].description}\\\\\\\\n                    </p>\\\\\\\\n                    {state.warning && (\\\\\\\\n                      <div\\\\\\\\n                        class=\\\\\\\\\\\\\\\"alert alert-warning alert-dismissible fade show\\\\\\\\\\\\\\\"\\\\\\\\n                        role=\\\\\\\\\\\\\\\"alert\\\\\\\\\\\\\\\"\\\\\\\\n                      >\\\\\\\\n                        {state.warning}\\\\\\\\n                        <button\\\\\\\\n                          type=\\\\\\\\\\\\\\\"button\\\\\\\\\\\\\\\"\\\\\\\\n                          class=\\\\\\\\\\\\\\\"btn-close\\\\\\\\\\\\\\\"\\\\\\\\n                          data-bs-dismiss=\\\\\\\\\\\\\\\"alert\\\\\\\\\\\\\\\"\\\\\\\\n                          aria-label=\\\\\\\\\\\\\\\"Close\\\\\\\\\\\\\\\"\\\\\\\\n                          onClick={() => State.update({ warning: \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\" })}\\\\\\\\n                        ></button>\\\\\\\\n                      </div>\\\\\\\\n                    )}\\\\\\\\n                    <div className=\\\\\\\\\\\\\\\"row mt-3\\\\\\\\\\\\\\\">\\\\\\\\n                      <NameEditor />\\\\\\\\n                      <DescriptionEditor />\\\\\\\\n                      <LabelsEditor />\\\\\\\\n                      {state.postType === \\\\\\\\\\\\\\\"Solution\\\\\\\\\\\\\\\" && <FundraisingToggle />}\\\\\\\\n                      {state.seekingFunding && <Fundraising />}\\\\\\\\n                    </div>\\\\\\\\n                    <button\\\\\\\\n                      data-testid=\\\\\\\\\\\\\\\"submit-create-post\\\\\\\\\\\\\\\"\\\\\\\\n                      style={{\\\\\\\\n                        width: \\\\\\\\\\\\\\\"7rem\\\\\\\\\\\\\\\",\\\\\\\\n                        backgroundColor: \\\\\\\\\\\\\\\"#0C7283\\\\\\\\\\\\\\\",\\\\\\\\n                        color: \\\\\\\\\\\\\\\"#f3f3f3\\\\\\\\\\\\\\\",\\\\\\\\n                      }}\\\\\\\\n                      disabled={\\\\\\\\n                        (state.seekingFunding &&\\\\\\\\n                          (!state.amount || state.amount < 1)) ||\\\\\\\\n                        state.name === \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\" ||\\\\\\\\n                        state.description === \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\"\\\\\\\\n                      }\\\\\\\\n                      className=\\\\\\\\\\\\\\\"btn btn-light mb-2 p-3\\\\\\\\\\\\\\\"\\\\\\\\n                      onClick={onSubmit}\\\\\\\\n                    >\\\\\\\\n                      Submit\\\\\\\\n                    </button>\\\\\\\\n                  </div>\\\\\\\\n                </>\\\\\\\\n              )}\\\\\\\\n              {tab === \\\\\\\\\\\\\\\"preview\\\\\\\\\\\\\\\" && (\\\\\\\\n                <div class=\\\\\\\\\\\\\\\"card-body\\\\\\\\\\\\\\\">\\\\\\\\n                  <p class=\\\\\\\\\\\\\\\"card-title fw-bold fs-6\\\\\\\\\\\\\\\">Preview</p>\\\\\\\\n                  <div>\\\\\\\\n                    <Widget\\\\\\\\n                      src=\\\\\\\\\\\\\\\"devhub.near/widget/devhub.entity.post.Post\\\\\\\\\\\\\\\"\\\\\\\\n                      props={{\\\\\\\\n                        isPreview: true,\\\\\\\\n                        id: 0, // irrelevant\\\\\\\\n                        post: {\\\\\\\\n                          author_id: context.accountId,\\\\\\\\n                          likes: [],\\\\\\\\n                          snapshot: {\\\\\\\\n                            labels: state.labels,\\\\\\\\n                            post_type: state.postType,\\\\\\\\n                            name: state.name,\\\\\\\\n                            description: generateDescription(\\\\\\\\n                              state.description,\\\\\\\\n                              state.amount,\\\\\\\\n                              state.token,\\\\\\\\n                              state.supervisor,\\\\\\\\n                              state.seekingFunding\\\\\\\\n                            ),\\\\\\\\n                          },\\\\\\\\n                        },\\\\\\\\n                      }}\\\\\\\\n                    />\\\\\\\\n                  </div>\\\\\\\\n                  <button\\\\\\\\n                    data-testid=\\\\\\\\\\\\\\\"submit-create-post\\\\\\\\\\\\\\\"\\\\\\\\n                    style={{\\\\\\\\n                      width: \\\\\\\\\\\\\\\"7rem\\\\\\\\\\\\\\\",\\\\\\\\n                      backgroundColor: \\\\\\\\\\\\\\\"#0C7283\\\\\\\\\\\\\\\",\\\\\\\\n                      color: \\\\\\\\\\\\\\\"#f3f3f3\\\\\\\\\\\\\\\",\\\\\\\\n                    }}\\\\\\\\n                    disabled={\\\\\\\\n                      (state.seekingFunding &&\\\\\\\\n                        (!state.amount || state.amount < 1)) ||\\\\\\\\n                      state.name === \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\" ||\\\\\\\\n                      state.description === \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\"\\\\\\\\n                    }\\\\\\\\n                    className=\\\\\\\\\\\\\\\"btn btn-light my-2 p-3\\\\\\\\\\\\\\\"\\\\\\\\n                    onClick={onSubmit}\\\\\\\\n                  >\\\\\\\\n                    Submit\\\\\\\\n                  </button>\\\\\\\\n                </div>\\\\\\\\n              )}\\\\\\\\n            </div>\\\\\\\\n          </div>\\\\\\\\n        </>\\\\\\\\n      )}\\\\\\\\n    </div>\\\\\\\\n  </div>\\\\\\\\n);\\\\\\\\n\"}, \"devhub.page.communities\": {\"\": \"const { getAllCommunitiesMetadata, createCommunity } = VM.require(\\\\\\\\n  \\\\\\\\\\\\\\\"devhub.near/widget/core.adapter.devhub-contract\\\\\\\\\\\\\\\"\\\\\\\\n);\\\\\\\\n\\\\\\\\nif (!getAllCommunitiesMetadata || !createCommunity) {\\\\\\\\n  return <p>Loading modules...</p>;\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst onCommunitySubmit = (inputs) =>\\\\\\\\n  createCommunity({\\\\\\\\n    inputs: {\\\\\\\\n      ...inputs,\\\\\\\\n\\\\\\\\n      bio_markdown: [\\\\\\\\n        \\\\\\\\\\\\\\\"This is a sample text about your community.\\\\\\\\\\\\\\\",\\\\\\\\n        \\\\\\\\\\\\\\\"You can change it on the community configuration page.\\\\\\\\\\\\\\\",\\\\\\\\n      ].join(\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\"),\\\\\\\\n\\\\\\\\n      logo_url:\\\\\\\\n        \\\\\\\\\\\\\\\"https://ipfs.near.social/ipfs/bafkreibysr2mkwhb4j36h2t7mqwhynqdy4vzjfygfkfg65kuspd2bawauu\\\\\\\\\\\\\\\",\\\\\\\\n\\\\\\\\n      banner_url:\\\\\\\\n        \\\\\\\\\\\\\\\"https://ipfs.near.social/ipfs/bafkreic4xgorjt6ha5z4s5e3hscjqrowe5ahd7hlfc5p4hb6kdfp6prgy4\\\\\\\\\\\\\\\",\\\\\\\\n    },\\\\\\\\n  });\\\\\\\\n\\\\\\\\nconst [showSpawner, setShowSpawner] = useState(false);\\\\\\\\n\\\\\\\\nconst [searchKey, setSearchKey] = useState(\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\");\\\\\\\\nconst [sort, setSort] = useState(\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\");\\\\\\\\n\\\\\\\\nconst communitiesMetadata = getAllCommunitiesMetadata();\\\\\\\\n\\\\\\\\nif (!communitiesMetadata) {\\\\\\\\n  return <p>Loading...</p>;\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst SortedAndFiltered = (searchKey, sortBy) => {\\\\\\\\n  let communities = (communitiesMetadata ?? []).reverse();\\\\\\\\n\\\\\\\\n  let filtered = [...communities];\\\\\\\\n  if (searchKey !== \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\") {\\\\\\\\n    filtered = communities.filter((community) =>\\\\\\\\n      community.name.toLowerCase().includes(searchKey.toLowerCase())\\\\\\\\n    );\\\\\\\\n  }\\\\\\\\n\\\\\\\\n  let sortedCommunities = [...filtered];\\\\\\\\n  if (sortBy !== \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\") {\\\\\\\\n    sortedCommunities.sort((a, b) => {\\\\\\\\n      let nameA = a.name.toLowerCase();\\\\\\\\n      let nameB = b.name.toLowerCase();\\\\\\\\n\\\\\\\\n      if (nameA < nameB) {\\\\\\\\n        return -1;\\\\\\\\n      }\\\\\\\\n      if (nameA > nameB) {\\\\\\\\n        return 1;\\\\\\\\n      }\\\\\\\\n      return 0;\\\\\\\\n    });\\\\\\\\n\\\\\\\\n    if (sortBy === \\\\\\\\\\\\\\\"z-a\\\\\\\\\\\\\\\") {\\\\\\\\n      sortedCommunities.reverse();\\\\\\\\n    }\\\\\\\\n  }\\\\\\\\n\\\\\\\\n  return sortedCommunities;\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst CardGrid = styled.div`\\\\\\\\n  width: 100%;\\\\\\\\n  height: 100%;\\\\\\\\n\\\\\\\\n  display: grid;\\\\\\\\n  grid-template-columns: repeat(3, 1fr);\\\\\\\\n  gap: 3rem;\\\\\\\\n\\\\\\\\n  @media screen and (max-width: 992px) {\\\\\\\\n    grid-template-columns: repeat(2, 1fr);\\\\\\\\n  }\\\\\\\\n\\\\\\\\n  @media screen and (max-width: 768px) {\\\\\\\\n    display: flex;\\\\\\\\n    flex-direction: column;\\\\\\\\n    gap: 2rem;\\\\\\\\n  }\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst InputContainer = styled.div`\\\\\\\\n  display: flex;\\\\\\\\n  flex-direction: row;\\\\\\\\n  position: relative;\\\\\\\\n  width: 100%;\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst StyledDropdown = styled.div`\\\\\\\\n  button {\\\\\\\\n    text-align: left;\\\\\\\\n\\\\\\\\n    &::after {\\\\\\\\n      position: absolute;\\\\\\\\n      right: 8px;\\\\\\\\n      top: 45%;\\\\\\\\n      transform: translateX(-50%);\\\\\\\\n    }\\\\\\\\n  }\\\\\\\\n`;\\\\\\\\n\\\\\\\\nreturn (\\\\\\\\n  <div className=\\\\\\\\\\\\\\\"w-100\\\\\\\\\\\\\\\">\\\\\\\\n    <Widget src={`devhub.near/widget/devhub.components.island.banner`} />\\\\\\\\n    <div style={{ background: \\\\\\\\\\\\\\\"#f4f4f4\\\\\\\\\\\\\\\" }}>\\\\\\\\n      <div\\\\\\\\n        className=\\\\\\\\\\\\\\\"d-flex justify-content-between p-4\\\\\\\\\\\\\\\"\\\\\\\\n        style={{ backgroundColor: \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\" }}\\\\\\\\n      >\\\\\\\\n        <div className=\\\\\\\\\\\\\\\"d-flex flex-column gap-3 w-100\\\\\\\\\\\\\\\">\\\\\\\\n          <h1\\\\\\\\n            className=\\\\\\\\\\\\\\\"m-0 fs-4\\\\\\\\\\\\\\\"\\\\\\\\n            style={{ color: \\\\\\\\\\\\\\\"#555555\\\\\\\\\\\\\\\", fontSize: \\\\\\\\\\\\\\\"1.5rem\\\\\\\\\\\\\\\" }}\\\\\\\\n          >\\\\\\\\n            Communities\\\\\\\\n          </h1>\\\\\\\\n\\\\\\\\n          <div className=\\\\\\\\\\\\\\\"d-flex col-12 flex-column flex-sm-row gap-4 justify-content-between align-items-center\\\\\\\\\\\\\\\">\\\\\\\\n            <div className=\\\\\\\\\\\\\\\"d-flex flex-column flex-sm-row align-items-center gap-4 col-12 col-sm-6\\\\\\\\\\\\\\\">\\\\\\\\n              <InputContainer className=\\\\\\\\\\\\\\\"border rounded-2\\\\\\\\\\\\\\\">\\\\\\\\n                <div className=\\\\\\\\\\\\\\\"position-absolute d-flex ps-3 flex-column h-100 justify-center\\\\\\\\\\\\\\\">\\\\\\\\n                  <i class=\\\\\\\\\\\\\\\"bi bi-search m-auto\\\\\\\\\\\\\\\"></i>\\\\\\\\n                </div>\\\\\\\\n                <input\\\\\\\\n                  type=\\\\\\\\\\\\\\\"search\\\\\\\\\\\\\\\"\\\\\\\\n                  className=\\\\\\\\\\\\\\\"ps-5 form-control border border-0\\\\\\\\\\\\\\\"\\\\\\\\n                  value={searchKey ?? \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\"}\\\\\\\\n                  onChange={(e) => setSearchKey(e.target.value)}\\\\\\\\n                  placeholder={props.placeholder ?? `Search by name`}\\\\\\\\n                />\\\\\\\\n              </InputContainer>\\\\\\\\n              <div class=\\\\\\\\\\\\\\\"dropdown w-100\\\\\\\\\\\\\\\">\\\\\\\\n                <StyledDropdown>\\\\\\\\n                  <button\\\\\\\\n                    class=\\\\\\\\\\\\\\\"btn dropdown-toggle border rounded-2 bg-white w-100\\\\\\\\\\\\\\\"\\\\\\\\n                    type=\\\\\\\\\\\\\\\"button\\\\\\\\\\\\\\\"\\\\\\\\n                    data-bs-toggle=\\\\\\\\\\\\\\\"dropdown\\\\\\\\\\\\\\\"\\\\\\\\n                    aria-expanded=\\\\\\\\\\\\\\\"false\\\\\\\\\\\\\\\"\\\\\\\\n                  >\\\\\\\\n                    Sort: {sort?.toUpperCase() || \\\\\\\\\\\\\\\"Latest\\\\\\\\\\\\\\\"}\\\\\\\\n                  </button>\\\\\\\\n                  <ul class=\\\\\\\\\\\\\\\"dropdown-menu dropdown-menu-end dropdown-menu-lg-start px-2 shadow\\\\\\\\\\\\\\\">\\\\\\\\n                    <li\\\\\\\\n                      onClick={() => setSort(\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\")}\\\\\\\\n                      class=\\\\\\\\\\\\\\\"dropdown-item link-underline link-underline-opacity-0\\\\\\\\\\\\\\\"\\\\\\\\n                    >\\\\\\\\n                      Latest\\\\\\\\n                    </li>\\\\\\\\n                    <li\\\\\\\\n                      onClick={() => setSort(\\\\\\\\\\\\\\\"a-z\\\\\\\\\\\\\\\")}\\\\\\\\n                      class=\\\\\\\\\\\\\\\"dropdown-item link-underline link-underline-opacity-0\\\\\\\\\\\\\\\"\\\\\\\\n                    >\\\\\\\\n                      A-Z\\\\\\\\n                    </li>\\\\\\\\n                    <li\\\\\\\\n                      onClick={() => setSort(\\\\\\\\\\\\\\\"z-a\\\\\\\\\\\\\\\")}\\\\\\\\n                      class=\\\\\\\\\\\\\\\"dropdown-item link-underline link-underline-opacity-0\\\\\\\\\\\\\\\"\\\\\\\\n                    >\\\\\\\\n                      Z-A\\\\\\\\n                    </li>\\\\\\\\n                  </ul>\\\\\\\\n                </StyledDropdown>\\\\\\\\n              </div>\\\\\\\\n            </div>\\\\\\\\n            {context.accountId && (\\\\\\\\n              <div className=\\\\\\\\\\\\\\\"d-flex flex-column justify-content-center align-self-end\\\\\\\\\\\\\\\">\\\\\\\\n                <Widget\\\\\\\\n                  src={\\\\\\\\n                    \\\\\\\\\\\\\\\"devhub.near/widget/devhub.components.molecule.CommunityControl\\\\\\\\\\\\\\\"\\\\\\\\n                  }\\\\\\\\n                  props={{\\\\\\\\n                    title: \\\\\\\\\\\\\\\"Community\\\\\\\\\\\\\\\",\\\\\\\\n                    onClick: () => setShowSpawner(!showSpawner),\\\\\\\\n                  }}\\\\\\\\n                />\\\\\\\\n              </div>\\\\\\\\n            )}\\\\\\\\n          </div>\\\\\\\\n        </div>\\\\\\\\n      </div>\\\\\\\\n      <div className=\\\\\\\\\\\\\\\"d-flex flex-wrap align-content-start gap-4 py-2 px-4 w-100 h-100\\\\\\\\\\\\\\\">\\\\\\\\n        {showSpawner && (\\\\\\\\n          <Widget\\\\\\\\n            src=\\\\\\\\\\\\\\\"devhub.near/widget/devhub.entity.community.Spawner\\\\\\\\\\\\\\\"\\\\\\\\n            props={{\\\\\\\\n              data: null,\\\\\\\\n              onSubmit: onCommunitySubmit,\\\\\\\\n              onCancel: () => setShowSpawner(false),\\\\\\\\n            }}\\\\\\\\n          />\\\\\\\\n        )}\\\\\\\\n        <CardGrid>\\\\\\\\n          {searchKey === \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\" && sort === \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\"\\\\\\\\n            ? (communitiesMetadata ?? []).reverse().map((communityMetadata) => (\\\\\\\\n                <Widget\\\\\\\\n                  src=\\\\\\\\\\\\\\\"devhub.near/widget/devhub.entity.community.Card\\\\\\\\\\\\\\\"\\\\\\\\n                  props={{\\\\\\\\n                    format: \\\\\\\\\\\\\\\"small\\\\\\\\\\\\\\\",\\\\\\\\n                    isBannerEnabled: false,\\\\\\\\n                    metadata: communityMetadata,\\\\\\\\n                  }}\\\\\\\\n                />\\\\\\\\n              ))\\\\\\\\n            : SortedAndFiltered(searchKey, sort).map((communityMetadata) => (\\\\\\\\n                <Widget\\\\\\\\n                  src=\\\\\\\\\\\\\\\"devhub.near/widget/devhub.entity.community.Card\\\\\\\\\\\\\\\"\\\\\\\\n                  props={{\\\\\\\\n                    format: \\\\\\\\\\\\\\\"small\\\\\\\\\\\\\\\",\\\\\\\\n                    isBannerEnabled: false,\\\\\\\\n                    metadata: communityMetadata,\\\\\\\\n                  }}\\\\\\\\n                />\\\\\\\\n              ))}\\\\\\\\n        </CardGrid>\\\\\\\\n      </div>\\\\\\\\n    </div>\\\\\\\\n  </div>\\\\\\\\n);\\\\\\\\n\"}, \"devhub.feature.post-search.panel\": {\"\": \"const { href } = VM.require(\\\\\\\\\\\\\\\"devhub.near/widget/core.lib.url\\\\\\\\\\\\\\\");\\\\\\\\n\\\\\\\\nhref || (href = () => {});\\\\\\\\n\\\\\\\\nState.init({\\\\\\\\n  tag: props.tag,\\\\\\\\n  author: props.author,\\\\\\\\n  term: \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\",\\\\\\\\n});\\\\\\\\n\\\\\\\\nconst updateInput = (term) => {\\\\\\\\n  State.update({\\\\\\\\n    term: term,\\\\\\\\n  });\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst buttonStyle = {\\\\\\\\n  backgroundColor: \\\\\\\\\\\\\\\"#0C7283\\\\\\\\\\\\\\\",\\\\\\\\n  color: \\\\\\\\\\\\\\\"#f3f3f3\\\\\\\\\\\\\\\",\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst PageTitle = styled.h1`\\\\\\\\n  color: #555555;\\\\\\\\n  font-size: 24px;\\\\\\\\n  font-style: normal;\\\\\\\\n  font-weight: 500;\\\\\\\\n  line-height: 120%; /* 28.8px */\\\\\\\\n  letter-spacing: -0.24px;\\\\\\\\n\\\\\\\\n  margin: 0;\\\\\\\\n  margin-bottom: 1rem;\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst Container = styled.div`\\\\\\\\n  padding: 24px;\\\\\\\\n  width: 100%;\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst PostContainer = styled.div`\\\\\\\\n  margin: 0 1rem;\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst InputContainer = styled.div`\\\\\\\\n  display: flex;\\\\\\\\n  flex-direction: row;\\\\\\\\n  position: relative;\\\\\\\\n  width: 25%;\\\\\\\\n\\\\\\\\n  @media screen and (max-width: 768px) {\\\\\\\\n    width: 100%;\\\\\\\\n  }\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst DropdownContainer = styled.div`\\\\\\\\n  width: 25%;\\\\\\\\n\\\\\\\\n  @media screen and (max-width: 768px) {\\\\\\\\n    width: 100%;\\\\\\\\n  }\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst StyledDropdown = styled.div`\\\\\\\\n  button {\\\\\\\\n    width: 100%;\\\\\\\\n    text-align: left;\\\\\\\\n\\\\\\\\n    &::after {\\\\\\\\n      position: absolute;\\\\\\\\n      right: 8px;\\\\\\\\n      top: 45%;\\\\\\\\n      transform: translateX(-50%);\\\\\\\\n    }\\\\\\\\n  }\\\\\\\\n`;\\\\\\\\n\\\\\\\\nreturn (\\\\\\\\n  <>\\\\\\\\n    {!props.hideHeader && (\\\\\\\\n      <Container>\\\\\\\\n        <div className=\\\\\\\\\\\\\\\"w-100\\\\\\\\\\\\\\\">\\\\\\\\n          <PageTitle>Activity Feed</PageTitle>\\\\\\\\n          <div>\\\\\\\\n            <div className=\\\\\\\\\\\\\\\"d-flex flex-column flex-md-row gap-4\\\\\\\\\\\\\\\">\\\\\\\\n              <InputContainer>\\\\\\\\n                <div className=\\\\\\\\\\\\\\\"position-absolute d-flex ps-3 flex-column h-100 justify-center\\\\\\\\\\\\\\\">\\\\\\\\n                  <i class=\\\\\\\\\\\\\\\"bi bi-search m-auto\\\\\\\\\\\\\\\"></i>\\\\\\\\n                </div>\\\\\\\\n                <input\\\\\\\\n                  type=\\\\\\\\\\\\\\\"search\\\\\\\\\\\\\\\"\\\\\\\\n                  className=\\\\\\\\\\\\\\\"ps-5 form-control border rounded-2\\\\\\\\\\\\\\\"\\\\\\\\n                  value={state.term ?? \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\"}\\\\\\\\n                  onChange={(e) => updateInput(e.target.value)}\\\\\\\\n                  onKeyDown={(e) => e.key == \\\\\\\\\\\\\\\"Enter\\\\\\\\\\\\\\\" && search()}\\\\\\\\n                  placeholder={props.placeholder ?? `Search by content`}\\\\\\\\n                />\\\\\\\\n              </InputContainer>\\\\\\\\n              <DropdownContainer>\\\\\\\\n                <div class=\\\\\\\\\\\\\\\"dropdown\\\\\\\\\\\\\\\">\\\\\\\\n                  <StyledDropdown>\\\\\\\\n                    <button\\\\\\\\n                      class=\\\\\\\\\\\\\\\"btn dropdown-toggle bg-white border rounded-2\\\\\\\\\\\\\\\"\\\\\\\\n                      type=\\\\\\\\\\\\\\\"button\\\\\\\\\\\\\\\"\\\\\\\\n                      data-bs-toggle=\\\\\\\\\\\\\\\"dropdown\\\\\\\\\\\\\\\"\\\\\\\\n                      aria-expanded=\\\\\\\\\\\\\\\"false\\\\\\\\\\\\\\\"\\\\\\\\n                    >\\\\\\\\n                      Sort: {props.recency === \\\\\\\\\\\\\\\"all\\\\\\\\\\\\\\\" ? \\\\\\\\\\\\\\\"All replies\\\\\\\\\\\\\\\" : \\\\\\\\\\\\\\\"Latest\\\\\\\\\\\\\\\"}{\\\\\\\\\\\\\\\" \\\\\\\\\\\\\\\"}\\\\\\\\n                    </button>\\\\\\\\n                    <ul class=\\\\\\\\\\\\\\\"dropdown-menu dropdown-menu-end dropdown-menu-lg-start px-2 shadow\\\\\\\\\\\\\\\">\\\\\\\\n                      <li>\\\\\\\\n                        <a\\\\\\\\n                          style={{ borderRadius: \\\\\\\\\\\\\\\"5px\\\\\\\\\\\\\\\" }}\\\\\\\\n                          class=\\\\\\\\\\\\\\\"dropdown-item link-underline link-underline-opacity-0\\\\\\\\\\\\\\\"\\\\\\\\n                          href={href({\\\\\\\\n                            widgetSrc: \\\\\\\\\\\\\\\"devhub.near/widget/app\\\\\\\\\\\\\\\",\\\\\\\\n                            params: { page: \\\\\\\\\\\\\\\"feed\\\\\\\\\\\\\\\" },\\\\\\\\n                          })}\\\\\\\\n                        >\\\\\\\\n                          Latest\\\\\\\\n                        </a>\\\\\\\\n                      </li>\\\\\\\\n                      <li>\\\\\\\\n                        <a\\\\\\\\n                          style={{ borderRadius: \\\\\\\\\\\\\\\"5px\\\\\\\\\\\\\\\" }}\\\\\\\\n                          class=\\\\\\\\\\\\\\\"dropdown-item link-underline link-underline-opacity-0\\\\\\\\\\\\\\\"\\\\\\\\n                          href={href({\\\\\\\\n                            widgetSrc: \\\\\\\\\\\\\\\"devhub.near/widget/app\\\\\\\\\\\\\\\",\\\\\\\\n                            params: { page: \\\\\\\\\\\\\\\"feed\\\\\\\\\\\\\\\", recency: \\\\\\\\\\\\\\\"all\\\\\\\\\\\\\\\" },\\\\\\\\n                          })}\\\\\\\\n                        >\\\\\\\\n                          All replies\\\\\\\\n                        </a>\\\\\\\\n                      </li>\\\\\\\\n                    </ul>\\\\\\\\n                  </StyledDropdown>\\\\\\\\n                </div>\\\\\\\\n              </DropdownContainer>\\\\\\\\n              <div class=\\\\\\\\\\\\\\\"dropdown\\\\\\\\\\\\\\\">\\\\\\\\n                <Widget\\\\\\\\n                  src=\\\\\\\\\\\\\\\"devhub.near/widget/devhub.feature.post-search.by-author\\\\\\\\\\\\\\\"\\\\\\\\n                  props={{\\\\\\\\n                    author: state.author,\\\\\\\\n                    onAuthorSearch: (author) => {\\\\\\\\n                      State.update({ author });\\\\\\\\n                    },\\\\\\\\n                  }}\\\\\\\\n                />\\\\\\\\n              </div>\\\\\\\\n              <div>\\\\\\\\n                <Widget\\\\\\\\n                  src=\\\\\\\\\\\\\\\"devhub.near/widget/devhub.feature.post-search.by-tag\\\\\\\\\\\\\\\"\\\\\\\\n                  props={{\\\\\\\\n                    tag: state.tag,\\\\\\\\n                    onTagSearch: (tag) => {\\\\\\\\n                      State.update({ tag });\\\\\\\\n                    },\\\\\\\\n                  }}\\\\\\\\n                />\\\\\\\\n              </div>\\\\\\\\n              <div className=\\\\\\\\\\\\\\\"d-flex flex-row-reverse flex-grow-1\\\\\\\\\\\\\\\">\\\\\\\\n                {props.children}\\\\\\\\n              </div>\\\\\\\\n            </div>\\\\\\\\n          </div>\\\\\\\\n        </div>\\\\\\\\n      </Container>\\\\\\\\n    )}\\\\\\\\n    <PostContainer>\\\\\\\\n      <Widget\\\\\\\\n        src=\\\\\\\\\\\\\\\"devhub.near/widget/devhub.entity.post.List\\\\\\\\\\\\\\\"\\\\\\\\n        props={{\\\\\\\\n          author: state.author,\\\\\\\\n          tag: state.tag,\\\\\\\\n          term: state.term,\\\\\\\\n          recency: props.recency,\\\\\\\\n          transactionHashes: props.transactionHashes,\\\\\\\\n          updateTagInput: (tag) => State.update({ tag }),\\\\\\\\n        }}\\\\\\\\n      />\\\\\\\\n    </PostContainer>\\\\\\\\n  </>\\\\\\\\n);\\\\\\\\n\"}, \"devhub.components.molecule.CommunityControl\": {\"\": \"const { className, title, icon, href, onClick } = props;\\\\\\\\n\\\\\\\\nconst Button = styled.button`\\\\\\\\n  display: flex;\\\\\\\\n  align-items: center;\\\\\\\\n  gap: 8px;\\\\\\\\n\\\\\\\\n  border-radius: 4px;\\\\\\\\n  background: #04a46e;\\\\\\\\n\\\\\\\\n  color: #f4f4f4;\\\\\\\\n  font-size: 16px;\\\\\\\\n  font-style: normal;\\\\\\\\n  font-weight: 700;\\\\\\\\n  line-height: 20px; /* 125% */\\\\\\\\n\\\\\\\\n  padding: 0.5rem 1rem;\\\\\\\\n\\\\\\\\n  &:hover {\\\\\\\\n    background: #555555;\\\\\\\\n    text-decoration: none !important;\\\\\\\\n  }\\\\\\\\n\\\\\\\\n  outline: none;\\\\\\\\n  border: none;\\\\\\\\n`;\\\\\\\\n\\\\\\\\nreturn (\\\\\\\\n  <div className={`d-flex flex-row-reverse ${props.className}`}>\\\\\\\\n    {props.href ? (\\\\\\\\n      <Link to={props.href} style={{ textDecoration: \\\\\\\\\\\\\\\"none\\\\\\\\\\\\\\\" }}>\\\\\\\\n        <Button\\\\\\\\n          className=\\\\\\\\\\\\\\\"community-control\\\\\\\\\\\\\\\"\\\\\\\\n          data-testid={props.testId ? props.testId : \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\"}\\\\\\\\n        >\\\\\\\\n          <i className={props.icon ? props.icon : \\\\\\\\\\\\\\\"bi bi-plus-circle-fill\\\\\\\\\\\\\\\"}></i>\\\\\\\\n          {props.title}\\\\\\\\n        </Button>\\\\\\\\n      </Link>\\\\\\\\n    ) : (\\\\\\\\n      <Button\\\\\\\\n        onClick={props.onClick}\\\\\\\\n        className=\\\\\\\\\\\\\\\"community-control\\\\\\\\\\\\\\\"\\\\\\\\n        data-testid={props.testId ? props.testId : \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\"}\\\\\\\\n      >\\\\\\\\n        <i className={props.icon ? props.icon : \\\\\\\\\\\\\\\"bi bi-plus-circle-fill\\\\\\\\\\\\\\\"}></i>\\\\\\\\n        {props.title || \\\\\\\\\\\\\\\"Community\\\\\\\\\\\\\\\"}\\\\\\\\n      </Button>\\\\\\\\n    )}\\\\\\\\n  </div>\\\\\\\\n);\\\\\\\\n\"}}}}}"
      }
    ],
    "actions_agg": {
      "deposit": 0
    },
    "outcomes": {
      "status": true
    },
    "outcomes_agg": {
      "transaction_fee": 1.6358873098381e+21
    }
  },
  {
    "id": "1946978690",
    "receipt_id": "BW5gz8oXebqz44pLgb2AXhhncSxb3ADuj2pP7GUNSHYU",
    "predecessor_account_id": "system",
    "receiver_account_id": "devhub.near",
    "receipt_kind": "ACTION",
    "receipt_block": {
      "block_hash": "G8tpUShfxp5mdMaZCPGe9cM2Cy8iC23grVXLvUMDDjE8",
      "block_height": 109149716,
      "block_timestamp": 1703935161875048400
    },
    "receipt_outcome": {
      "gas_burnt": 223182562500,
      "tokens_burnt": 0,
      "executor_account_id": "devhub.near",
      "status": true
    },
    "transaction_hash": "4Ue9rtZndGNcfVCJpZJMppzif7bTaKVczFWFfK6ieVKS",
    "included_in_block_hash": "HL1qBVGRdaxZgZaRL2oVCLu5CmwNZuk3kCVvX3z7pCgU",
    "block_timestamp": "1703935159492886618",
    "block": {
      "block_height": 109149714
    },
    "receipt_conversion_tokens_burnt": "250308639327800000000",
    "actions": [
      {
        "action": "TRANSFER",
        "method": null,
        "deposit": 1.876910030842812e+23,
        "fee": 0,
        "args": null
      }
    ],
    "actions_agg": {
      "deposit": 0
    },
    "outcomes": {
      "status": true
    },
    "outcomes_agg": {
      "transaction_fee": 1.6358873098381e+21
    }
  },
  {
    "id": "1950490762",
    "receipt_id": "DoYhCs9ddkS4w2m5gzMyh9wt1PBdFHSYrJWWJTiPQewU",
    "predecessor_account_id": "devhub.near",
    "receiver_account_id": "social.near",
    "receipt_kind": "ACTION",
    "receipt_block": {
      "block_hash": "7HpmXLp7jQuQzrZVB96gACTGXC4avXZhEEtYPpo8okZy",
      "block_height": 109177833,
      "block_timestamp": 1703964355578795800
    },
    "receipt_outcome": {
      "gas_burnt": 5801249527655,
      "tokens_burnt": 580124952765500000000,
      "executor_account_id": "social.near",
      "status": true
    },
    "transaction_hash": "GBbxnLFFdh8Mz61MBsceKkvnzbCJq7oy2VaHHvMgnwWK",
    "included_in_block_hash": "BaKsYkCRFzCUoiaPfTK3vP2NtizZoZUsfnPCfXMV3qDF",
    "block_timestamp": "1703964354658508145",
    "block": {
      "block_height": 109177832
    },
    "receipt_conversion_tokens_burnt": "243639071799200000000",
    "actions": [
      {
        "action": "FUNCTION_CALL",
        "method": "set",
        "deposit": 0,
        "fee": 580124952765500000000,
        "args": "{\"data\": {\"devhub.near\": {\"widget\": {\"devhub.entity.post.History\": {\"\": \"/*\\\\\\\\n---props---\\\\\\\\nprops.post: {};\\\\\\\\nprops.id: number;\\\\\\\\nprops.newTab: boolean;\\\\\\\\nprops.timestamp: number;\\\\\\\\nprops.referral: any;\\\\\\\\n*/\\\\\\\\nconst { href } = VM.require(\\\\\\\\\\\\\\\"devhub.near/widget/core.lib.url\\\\\\\\\\\\\\\") || (() => {});\\\\\\\\n\\\\\\\\nconst postId = props.post.id ?? (props.id ? parseInt(props.id) : 0);\\\\\\\\nconst post =\\\\\\\\n  props.post ??\\\\\\\\n  Near.view(nearDevGovGigsContractAccountId, \\\\\\\\\\\\\\\"get_post\\\\\\\\\\\\\\\", {\\\\\\\\n    post_id: postId,\\\\\\\\n  });\\\\\\\\nif (!post || !post.snapshot_history) {\\\\\\\\n  return <div class=\\\\\\\\\\\\\\\"bi bi-clock-history px-2\\\\\\\\\\\\\\\"></div>;\\\\\\\\n}\\\\\\\\nconst referral = props.referral;\\\\\\\\n\\\\\\\\nfunction readableDate(timestamp) {\\\\\\\\n  var a = new Date(timestamp);\\\\\\\\n  return (\\\\\\\\n    a.toDateString() +\\\\\\\\n    \\\\\\\\\\\\\\\" \\\\\\\\\\\\\\\" +\\\\\\\\n    a.toLocaleTimeString([], { hour: \\\\\\\\\\\\\\\"2-digit\\\\\\\\\\\\\\\", minute: \\\\\\\\\\\\\\\"2-digit\\\\\\\\\\\\\\\" })\\\\\\\\n  ).substring(4);\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst currentTimestamp = props.timestamp ?? post.snapshot.timestamp;\\\\\\\\nconst snapshot = post.snapshot;\\\\\\\\nconst snapshotHistory = post.snapshot_history\\\\\\\\n  ? Array.from(post.snapshot_history)\\\\\\\\n  : [];\\\\\\\\n\\\\\\\\nsnapshotHistory.push(snapshot);\\\\\\\\nsnapshotHistory.reverse();\\\\\\\\n\\\\\\\\nconst history = (\\\\\\\\n  <div class=\\\\\\\\\\\\\\\"btn-group\\\\\\\\\\\\\\\" role=\\\\\\\\\\\\\\\"group\\\\\\\\\\\\\\\">\\\\\\\\n    <a\\\\\\\\n      class=\\\\\\\\\\\\\\\"card-link\\\\\\\\\\\\\\\"\\\\\\\\n      role=\\\\\\\\\\\\\\\"button\\\\\\\\\\\\\\\"\\\\\\\\n      title=\\\\\\\\\\\\\\\"Post History\\\\\\\\\\\\\\\"\\\\\\\\n      data-bs-toggle=\\\\\\\\\\\\\\\"dropdown\\\\\\\\\\\\\\\"\\\\\\\\n      aria-expanded=\\\\\\\\\\\\\\\"false\\\\\\\\\\\\\\\"\\\\\\\\n      type=\\\\\\\\\\\\\\\"button\\\\\\\\\\\\\\\"\\\\\\\\n    >\\\\\\\\n      <div class=\\\\\\\\\\\\\\\"bi bi-clock-history px-2\\\\\\\\\\\\\\\"></div>\\\\\\\\n    </a>\\\\\\\\n    <ul class=\\\\\\\\\\\\\\\"dropdown-menu\\\\\\\\\\\\\\\">\\\\\\\\n      <a\\\\\\\\n        class=\\\\\\\\\\\\\\\"d-flex text-muted\\\\\\\\\\\\\\\"\\\\\\\\n        style={{ fontSize: \\\\\\\\\\\\\\\"12px\\\\\\\\\\\\\\\", textDecoration: \\\\\\\\\\\\\\\"none\\\\\\\\\\\\\\\", cursor: \\\\\\\\\\\\\\\"default\\\\\\\\\\\\\\\" }}\\\\\\\\n      >\\\\\\\\n        <a\\\\\\\\n          style={{\\\\\\\\n            textAlign: \\\\\\\\\\\\\\\"center\\\\\\\\\\\\\\\",\\\\\\\\n            minWidth: \\\\\\\\\\\\\\\"290px\\\\\\\\\\\\\\\",\\\\\\\\n            maxWidth: \\\\\\\\\\\\\\\"290px\\\\\\\\\\\\\\\",\\\\\\\\n          }}\\\\\\\\n        >\\\\\\\\n          Edit History\\\\\\\\n        </a>\\\\\\\\n        <a style={{ marginRight: \\\\\\\\\\\\\\\"8px\\\\\\\\\\\\\\\" }}>Compare</a>\\\\\\\\n      </a>\\\\\\\\n      {snapshotHistory.map((item) => {\\\\\\\\n        if (item === undefined) return;\\\\\\\\n        return (\\\\\\\\n          <li style={{ display: \\\\\\\\\\\\\\\"flex\\\\\\\\\\\\\\\" }}>\\\\\\\\n            <div\\\\\\\\n              style={{\\\\\\\\n                minWidth: \\\\\\\\\\\\\\\"290px\\\\\\\\\\\\\\\",\\\\\\\\n                maxWidth: \\\\\\\\\\\\\\\"290px\\\\\\\\\\\\\\\",\\\\\\\\n              }}\\\\\\\\n            >\\\\\\\\n              <a\\\\\\\\n                class=\\\\\\\\\\\\\\\"dropdown-item\\\\\\\\\\\\\\\"\\\\\\\\n                href={href({\\\\\\\\n                  widgetSrc: \\\\\\\\\\\\\\\"devhub.near/widget/devhub.entity.post.Post\\\\\\\\\\\\\\\",\\\\\\\\n                  params: {\\\\\\\\n                    id: postId,\\\\\\\\n                    timestamp: item.timestamp,\\\\\\\\n                    compareTimestamp: null,\\\\\\\\n                    referral,\\\\\\\\n                  },\\\\\\\\n                })}\\\\\\\\n                target={props.newTab ? \\\\\\\\\\\\\\\"_blank\\\\\\\\\\\\\\\" : undefined}\\\\\\\\n              >\\\\\\\\n                {readableDate(item.timestamp / 1000000)}\\\\\\\\n\\\\\\\\n                <Widget\\\\\\\\n                  src=\\\\\\\\\\\\\\\"mob.near/widget/ProfileImage\\\\\\\\\\\\\\\"\\\\\\\\n                  props={{\\\\\\\\n                    accountId: item.editor_id,\\\\\\\\n                    style: {\\\\\\\\n                      width: \\\\\\\\\\\\\\\"1.25em\\\\\\\\\\\\\\\",\\\\\\\\n                      height: \\\\\\\\\\\\\\\"1.25em\\\\\\\\\\\\\\\",\\\\\\\\n                    },\\\\\\\\n                    imageStyle: {\\\\\\\\n                      transform: \\\\\\\\\\\\\\\"translateY(-12.5%)\\\\\\\\\\\\\\\",\\\\\\\\n                    },\\\\\\\\n                  }}\\\\\\\\n                />\\\\\\\\n                {post.author_id.substring(0, 8)}\\\\\\\\n              </a>\\\\\\\\n            </div>\\\\\\\\n            <a\\\\\\\\n              class=\\\\\\\\\\\\\\\"dropdown-item\\\\\\\\\\\\\\\"\\\\\\\\n              href={href({\\\\\\\\n                widgetSrc: \\\\\\\\\\\\\\\"devhub.near/widget/devhub.entity.post.Post\\\\\\\\\\\\\\\",\\\\\\\\n                params: {\\\\\\\\n                  id: postId,\\\\\\\\n                  timestamp: currentTimestamp,\\\\\\\\n                  compareTimestamp: item.timestamp,\\\\\\\\n                  referral,\\\\\\\\n                },\\\\\\\\n              })}\\\\\\\\n            >\\\\\\\\n              <i class=\\\\\\\\\\\\\\\"bi bi-file-earmark-diff\\\\\\\\\\\\\\\" />\\\\\\\\n            </a>\\\\\\\\n          </li>\\\\\\\\n        );\\\\\\\\n      })}\\\\\\\\n    </ul>\\\\\\\\n  </div>\\\\\\\\n);\\\\\\\\n\\\\\\\\nreturn history;\\\\\\\\n\"}}}}}"
      }
    ],
    "actions_agg": {
      "deposit": 0
    },
    "outcomes": {
      "status": true
    },
    "outcomes_agg": {
      "transaction_fee": 823764024564700000000
    }
  },
  {
    "id": "1950491194",
    "receipt_id": "8pYAUAtcGBY3Yt8DPDxyh6EGvPJYYVv9ujNPGTVZzXEQ",
    "predecessor_account_id": "system",
    "receiver_account_id": "devhub.near",
    "receipt_kind": "ACTION",
    "receipt_block": {
      "block_hash": "2Mc75LMW6RytKYwXMPAaZu5EAVX4sPZ8nCExPSmHAEX3",
      "block_height": 109177834,
      "block_timestamp": 1703964356905220900
    },
    "receipt_outcome": {
      "gas_burnt": 223182562500,
      "tokens_burnt": 0,
      "executor_account_id": "devhub.near",
      "status": true
    },
    "transaction_hash": "GBbxnLFFdh8Mz61MBsceKkvnzbCJq7oy2VaHHvMgnwWK",
    "included_in_block_hash": "BaKsYkCRFzCUoiaPfTK3vP2NtizZoZUsfnPCfXMV3qDF",
    "block_timestamp": "1703964354658508145",
    "block": {
      "block_height": 109177832
    },
    "receipt_conversion_tokens_burnt": "243639071799200000000",
    "actions": [
      {
        "action": "TRANSFER",
        "method": null,
        "deposit": 1.884547693255402e+23,
        "fee": 0,
        "args": null
      }
    ],
    "actions_agg": {
      "deposit": 0
    },
    "outcomes": {
      "status": true
    },
    "outcomes_agg": {
      "transaction_fee": 823764024564700000000
    }
  },
  {
    "id": "1997111471",
    "receipt_id": "9tGoAeHHJTcdjULJuX9UBFyM1TF1LzMZRJvZF9tauwXZ",
    "predecessor_account_id": "devhub.near",
    "receiver_account_id": "social.near",
    "receipt_kind": "ACTION",
    "receipt_block": {
      "block_hash": "3ECntgqy3Tfi7n738gSfwZFQ4MpLkmWpsUFXLqammcNw",
      "block_height": 109507106,
      "block_timestamp": 1704304555909450500
    },
    "receipt_outcome": {
      "gas_burnt": 21987770100046,
      "tokens_burnt": 2.1987770100046e+21,
      "executor_account_id": "social.near",
      "status": true
    },
    "transaction_hash": "5u3d3Z58WKnHaLsyfXuNt1YdfEsow1A5UzgK1XYG2nLX",
    "included_in_block_hash": "2kE3X2TYJGbDgev7cZRjMuP6NtW4AnBLxQNy1R2NUr1V",
    "block_timestamp": "1704304554948027683",
    "block": {
      "block_height": 109507105
    },
    "receipt_conversion_tokens_burnt": "257325447406600000000",
    "actions": [
      {
        "action": "FUNCTION_CALL",
        "method": "set",
        "deposit": 0,
        "fee": 2.1987770100046e+21,
        "args": "{\"data\": {\"devhub.near\": {\"widget\": {\"devhub.page.create\": {\"\": \"const { normalize } =\\\\\\\\n  VM.require(\\\\\\\\\\\\\\\"devhub.near/widget/core.lib.stringUtils\\\\\\\\\\\\\\\") || (() => {});\\\\\\\\n\\\\\\\\nconst CenteredMessage = styled.div`\\\\\\\\n  display: flex;\\\\\\\\n  flex-direction: column;\\\\\\\\n  justify-content: center;\\\\\\\\n  align-items: center;\\\\\\\\n  width: 100%;\\\\\\\\n  height: 384px;\\\\\\\\n`;\\\\\\\\n\\\\\\\\nif (!context.accountId) {\\\\\\\\n  return (\\\\\\\\n    <CenteredMessage height={\\\\\\\\\\\\\\\"384px\\\\\\\\\\\\\\\"}>\\\\\\\\n      <h2>Please sign in to create a post.</h2>\\\\\\\\n    </CenteredMessage>\\\\\\\\n  );\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst postTypeOptions = {\\\\\\\\n  Idea: {\\\\\\\\n    name: \\\\\\\\\\\\\\\"Idea\\\\\\\\\\\\\\\",\\\\\\\\n    icon: \\\\\\\\\\\\\\\"bi-lightbulb\\\\\\\\\\\\\\\",\\\\\\\\n\\\\\\\\n    description:\\\\\\\\n      \\\\\\\\\\\\\\\"Get feedback from the community about a problem, opportunity, or need.\\\\\\\\\\\\\\\",\\\\\\\\n  },\\\\\\\\n\\\\\\\\n  Solution: {\\\\\\\\n    name: \\\\\\\\\\\\\\\"Solution\\\\\\\\\\\\\\\",\\\\\\\\n    icon: \\\\\\\\\\\\\\\"bi-rocket\\\\\\\\\\\\\\\",\\\\\\\\n\\\\\\\\n    description:\\\\\\\\n      \\\\\\\\\\\\\\\"Provide a specific proposal or implementation to an idea, optionally requesting funding. If your solution relates to an existing idea, please reply to the original post with a solution.\\\\\\\\\\\\\\\",\\\\\\\\n  },\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst typeSwitch = (optionName) => {\\\\\\\\n  State.update({\\\\\\\\n    postType: optionName,\\\\\\\\n  });\\\\\\\\n};\\\\\\\\n\\\\\\\\nfunction initLabels() {\\\\\\\\n  const labels = [];\\\\\\\\n  if (props.labels) {\\\\\\\\n    labels.push(...props.labels.split(\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"));\\\\\\\\n  }\\\\\\\\n  if (props.referral) {\\\\\\\\n    labels.push(`referral:${props.referral}`);\\\\\\\\n  }\\\\\\\\n  return labels;\\\\\\\\n}\\\\\\\\n\\\\\\\\nState.init({\\\\\\\\n  seekingFunding: false,\\\\\\\\n  labels: initLabels(),\\\\\\\\n  postType: \\\\\\\\\\\\\\\"Idea\\\\\\\\\\\\\\\",\\\\\\\\n  name: props.name ?? \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\",\\\\\\\\n  description: props.description ?? \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\",\\\\\\\\n  amount: props.amount ?? \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\",\\\\\\\\n  token: props.token ?? \\\\\\\\\\\\\\\"USDT\\\\\\\\\\\\\\\",\\\\\\\\n  supervisor: props.supervisor ?? \\\\\\\\\\\\\\\"neardevdao.near\\\\\\\\\\\\\\\",\\\\\\\\n  warning: \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\",\\\\\\\\n  mentionInput: \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\", // text next to @ tag\\\\\\\\n  mentionsArray: [], // all the mentions in the description\\\\\\\\n});\\\\\\\\n\\\\\\\\nconst autocompleteEnabled = true;\\\\\\\\n\\\\\\\\nconst AutoComplete = styled.div`\\\\\\\\n  z-index: 5;\\\\\\\\n\\\\\\\\n  > div > div {\\\\\\\\n    padding: calc(var(--padding) / 2);\\\\\\\\n  }\\\\\\\\n`;\\\\\\\\n\\\\\\\\nfunction textareaInputHandler(value) {\\\\\\\\n  const words = value.split(/\\\\\\\\\\\\\\\\s+/);\\\\\\\\n  const allMentions = words\\\\\\\\n    .filter((word) => word.startsWith(\\\\\\\\\\\\\\\"@\\\\\\\\\\\\\\\"))\\\\\\\\n    .map((mention) => mention.slice(1));\\\\\\\\n  const newMentions = allMentions.filter(\\\\\\\\n    (item) => !state.mentionsArray.includes(item)\\\\\\\\n  );\\\\\\\\n\\\\\\\\n  State.update({\\\\\\\\n    text: value,\\\\\\\\n    showAccountAutocomplete: newMentions?.length > 0,\\\\\\\\n    mentionsArray: allMentions,\\\\\\\\n    mentionInput: newMentions?.[0] ?? \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\",\\\\\\\\n  });\\\\\\\\n}\\\\\\\\n\\\\\\\\nfunction autoCompleteAccountId(id) {\\\\\\\\n  // to make sure we update the @ at correct index\\\\\\\\n  let currentIndex = 0;\\\\\\\\n  const updatedDescription = state.description.replace(\\\\\\\\n    /(?:^|\\\\\\\\\\\\\\\\s)(@[^\\\\\\\\\\\\\\\\s]*)/g,\\\\\\\\n    (match) => {\\\\\\\\n      if (currentIndex === state.mentionsArray.indexOf(state.mentionInput)) {\\\\\\\\n        currentIndex++;\\\\\\\\n        return ` @${id}`;\\\\\\\\n      } else {\\\\\\\\n        currentIndex++;\\\\\\\\n        return match;\\\\\\\\n      }\\\\\\\\n    }\\\\\\\\n  );\\\\\\\\n\\\\\\\\n  State.update({\\\\\\\\n    handler: \\\\\\\\\\\\\\\"autocompleteSelected\\\\\\\\\\\\\\\",\\\\\\\\n    description: updatedDescription,\\\\\\\\n    showAccountAutocomplete: false,\\\\\\\\n  });\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst { href } = VM.require(\\\\\\\\\\\\\\\"devhub.near/widget/core.lib.url\\\\\\\\\\\\\\\");\\\\\\\\n\\\\\\\\nif (!href) {\\\\\\\\n  return <p>Loading modules...</p>;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// This must be outside onClick, because Near.view returns null at first, and when the view call finished, it returns true/false.\\\\\\\\n// If checking this inside onClick, it will give `null` and we cannot tell the result is true or false.\\\\\\\\nlet grantNotify = Near.view(\\\\\\\\\\\\\\\"social.near\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"is_write_permission_granted\\\\\\\\\\\\\\\", {\\\\\\\\n  predecessor_id: \\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\",\\\\\\\\n  key: context.accountId + \\\\\\\\\\\\\\\"/index/notify\\\\\\\\\\\\\\\",\\\\\\\\n});\\\\\\\\nif (grantNotify === null) {\\\\\\\\n  return;\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst onSubmit = () => {\\\\\\\\n  let body = {\\\\\\\\n    name: state.name,\\\\\\\\n    description: generateDescription(\\\\\\\\n      state.description,\\\\\\\\n      state.amount,\\\\\\\\n      state.token,\\\\\\\\n      state.supervisor,\\\\\\\\n      state.seekingFunding\\\\\\\\n    ),\\\\\\\\n  };\\\\\\\\n\\\\\\\\n  if (state.postType === \\\\\\\\\\\\\\\"Solution\\\\\\\\\\\\\\\") {\\\\\\\\n    body = {\\\\\\\\n      ...body,\\\\\\\\n      post_type: \\\\\\\\\\\\\\\"Solution\\\\\\\\\\\\\\\",\\\\\\\\n      solution_version: \\\\\\\\\\\\\\\"V1\\\\\\\\\\\\\\\",\\\\\\\\n    };\\\\\\\\n  } else {\\\\\\\\n    // Idea\\\\\\\\n    body = {\\\\\\\\n      ...body,\\\\\\\\n      post_type: \\\\\\\\\\\\\\\"Idea\\\\\\\\\\\\\\\",\\\\\\\\n      idea_version: \\\\\\\\\\\\\\\"V1\\\\\\\\\\\\\\\",\\\\\\\\n    };\\\\\\\\n  }\\\\\\\\n\\\\\\\\n  let txn = [];\\\\\\\\n\\\\\\\\n  txn.push({\\\\\\\\n    contractName: \\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\",\\\\\\\\n    methodName: \\\\\\\\\\\\\\\"add_post\\\\\\\\\\\\\\\",\\\\\\\\n    args: {\\\\\\\\n      parent_id: null,\\\\\\\\n      labels: state.labels,\\\\\\\\n      body: body,\\\\\\\\n    },\\\\\\\\n    gas: Big(10).pow(14),\\\\\\\\n  });\\\\\\\\n\\\\\\\\n  if (grantNotify === false) {\\\\\\\\n    txn.unshift({\\\\\\\\n      contractName: \\\\\\\\\\\\\\\"social.near\\\\\\\\\\\\\\\",\\\\\\\\n      methodName: \\\\\\\\\\\\\\\"grant_write_permission\\\\\\\\\\\\\\\",\\\\\\\\n      args: {\\\\\\\\n        predecessor_id: \\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\",\\\\\\\\n        keys: [context.accountId + \\\\\\\\\\\\\\\"/index/notify\\\\\\\\\\\\\\\"],\\\\\\\\n      },\\\\\\\\n      gas: Big(10).pow(14),\\\\\\\\n      deposit: Big(10).pow(22),\\\\\\\\n    });\\\\\\\\n  }\\\\\\\\n\\\\\\\\n  Near.call(txn);\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst onIdeaClick = () => {\\\\\\\\n  State.update({ postType: \\\\\\\\\\\\\\\"Idea\\\\\\\\\\\\\\\", seekingFunding: false });\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst onSolutionClick = () => {\\\\\\\\n  State.update({ postType: \\\\\\\\\\\\\\\"Solution\\\\\\\\\\\\\\\" });\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst checkLabel = (label) => {\\\\\\\\n  Near.asyncView(\\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"is_allowed_to_use_labels\\\\\\\\\\\\\\\", {\\\\\\\\n    editor: context.accountId,\\\\\\\\n    labels: [label],\\\\\\\\n  }).then((allowed) => {\\\\\\\\n    if (allowed) {\\\\\\\\n      State.update({ warning: \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\" });\\\\\\\\n    } else {\\\\\\\\n      State.update({\\\\\\\\n        warning:\\\\\\\\n          \\\\\\\\\\\\'The label \\\\\\\\\\\\\\\"\\\\\\\\\\\\' +\\\\\\\\n          label +\\\\\\\\n          \\\\\\\\\\\\'\\\\\\\\\\\\\\\" is protected and can only be added by moderators\\\\\\\\\\\\',\\\\\\\\n      });\\\\\\\\n      return;\\\\\\\\n    }\\\\\\\\n  });\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst setLabels = (labels) => {\\\\\\\\n  const normalizedLabels = labels.map((o) =>\\\\\\\\n    o.customOption ? normalize(o.label) : normalize(o)\\\\\\\\n  );\\\\\\\\n  const uniqueLabels = [...new Set(normalizedLabels)];\\\\\\\\n\\\\\\\\n  if (uniqueLabels.length < state.labels.length) {\\\\\\\\n    const removedLabel = state.labels.find(\\\\\\\\n      (label) => !uniqueLabels.includes(label)\\\\\\\\n    );\\\\\\\\n\\\\\\\\n    const allowed = Near.asyncView(\\\\\\\\n      \\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\",\\\\\\\\n      \\\\\\\\\\\\\\\"is_allowed_to_use_labels\\\\\\\\\\\\\\\",\\\\\\\\n      {\\\\\\\\n        editor: context.accountId,\\\\\\\\n        labels: [removedLabel],\\\\\\\\n      }\\\\\\\\n    );\\\\\\\\n\\\\\\\\n    if (allowed) {\\\\\\\\n      State.update({ labels: uniqueLabels });\\\\\\\\n    } else {\\\\\\\\n      State.update({\\\\\\\\n        warning: `The label \\\\\\\\\\\\\\\"${removedLabel}\\\\\\\\\\\\\\\" is protected and can only be updated by moderators`,\\\\\\\\n      });\\\\\\\\n    }\\\\\\\\n  } else {\\\\\\\\n    State.update({ labels: uniqueLabels });\\\\\\\\n  }\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst existingLabels =\\\\\\\\n  Near.view(\\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"get_all_allowed_labels\\\\\\\\\\\\\\\", {\\\\\\\\n    editor: context.accountId,\\\\\\\\n  }) ?? [];\\\\\\\\nconst allowedLabels = existingLabels.filter((it) => it !== \\\\\\\\\\\\\\\"blog\\\\\\\\\\\\\\\"); // remove blog label so users cannot publish blogs from feed\\\\\\\\n\\\\\\\\nfunction NameEditor() {\\\\\\\\n  return (\\\\\\\\n    <div className=\\\\\\\\\\\\\\\"col-lg-12 mb-2\\\\\\\\\\\\\\\">\\\\\\\\n      <label htmlFor=\\\\\\\\\\\\\\\"title\\\\\\\\\\\\\\\" className=\\\\\\\\\\\\\\\"fs-6 fw-bold mb-1\\\\\\\\\\\\\\\">\\\\\\\\n        Title\\\\\\\\n      </label>\\\\\\\\n      <input\\\\\\\\n        name=\\\\\\\\\\\\\\\"title\\\\\\\\\\\\\\\"\\\\\\\\n        id=\\\\\\\\\\\\\\\"title\\\\\\\\\\\\\\\"\\\\\\\\n        data-testid=\\\\\\\\\\\\\\\"name-editor\\\\\\\\\\\\\\\"\\\\\\\\n        type=\\\\\\\\\\\\\\\"text\\\\\\\\\\\\\\\"\\\\\\\\n        value={state.name}\\\\\\\\n        onChange={(event) => State.update({ name: event.target.value })}\\\\\\\\n      />\\\\\\\\n    </div>\\\\\\\\n  );\\\\\\\\n}\\\\\\\\n\\\\\\\\nfunction DescriptionEditor() {\\\\\\\\n  return (\\\\\\\\n    <div className=\\\\\\\\\\\\\\\"col-lg-12 mb-2\\\\\\\\\\\\\\\">\\\\\\\\n      <label htmlFor=\\\\\\\\\\\\\\\"description\\\\\\\\\\\\\\\" className=\\\\\\\\\\\\\\\"fs-6 fw-bold mb-1\\\\\\\\\\\\\\\">\\\\\\\\n        Description\\\\\\\\n      </label>\\\\\\\\n      <Widget\\\\\\\\n        src=\\\\\\\\\\\\\\\"devhub.near/widget/devhub.components.molecule.MarkdownEditor\\\\\\\\\\\\\\\"\\\\\\\\n        props={{\\\\\\\\n          data: { handler: state.handler, content: state.description },\\\\\\\\n          onChange: (content) => {\\\\\\\\n            State.update({ description: content, handler: \\\\\\\\\\\\\\\"update\\\\\\\\\\\\\\\" });\\\\\\\\n            textareaInputHandler(content);\\\\\\\\n          },\\\\\\\\n        }}\\\\\\\\n      />\\\\\\\\n      {autocompleteEnabled && state.showAccountAutocomplete && (\\\\\\\\n        <AutoComplete>\\\\\\\\n          <Widget\\\\\\\\n            src=\\\\\\\\\\\\\\\"devhub.near/widget/devhub.components.molecule.AccountAutocomplete\\\\\\\\\\\\\\\"\\\\\\\\n            props={{\\\\\\\\n              term: state.mentionInput,\\\\\\\\n              onSelect: autoCompleteAccountId,\\\\\\\\n              onClose: () => State.update({ showAccountAutocomplete: false }),\\\\\\\\n            }}\\\\\\\\n          />\\\\\\\\n        </AutoComplete>\\\\\\\\n      )}\\\\\\\\n    </div>\\\\\\\\n  );\\\\\\\\n}\\\\\\\\n\\\\\\\\nfunction LabelsEditor() {\\\\\\\\n  return (\\\\\\\\n    <div className=\\\\\\\\\\\\\\\"col-lg-12 mb-2\\\\\\\\\\\\\\\">\\\\\\\\n      <label htmlFor=\\\\\\\\\\\\\\\"labels\\\\\\\\\\\\\\\" className=\\\\\\\\\\\\\\\"fs-6 fw-bold mb-1\\\\\\\\\\\\\\\">\\\\\\\\n        Labels\\\\\\\\n      </label>\\\\\\\\n      <Typeahead\\\\\\\\n        multiple\\\\\\\\n        onInputChange={checkLabel}\\\\\\\\n        onChange={setLabels}\\\\\\\\n        options={allowedLabels}\\\\\\\\n        placeholder=\\\\\\\\\\\\\\\"near.social, widget, NEP, standard, protocol, tool\\\\\\\\\\\\\\\"\\\\\\\\n        selected={state.labels}\\\\\\\\n        positionFixed\\\\\\\\n        allowNew={(results, props) => {\\\\\\\\n          return (\\\\\\\\n            !allowedLabels.includes(props.text) &&\\\\\\\\n            props.text.toLowerCase() !== \\\\\\\\\\\\\\\"blog\\\\\\\\\\\\\\\" && // dont allow adding \\\\\\\\\\\\\\\"Blog\\\\\\\\\\\\\\\"\\\\\\\\n            props.selected.filter((selected) => selected.name === props.text)\\\\\\\\n              .length == 0 &&\\\\\\\\n            Near.view(\\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"is_allowed_to_use_labels\\\\\\\\\\\\\\\", {\\\\\\\\n              editor: context.accountId,\\\\\\\\n              labels: [props.text],\\\\\\\\n            })\\\\\\\\n          );\\\\\\\\n        }}\\\\\\\\n      />\\\\\\\\n    </div>\\\\\\\\n  );\\\\\\\\n}\\\\\\\\n\\\\\\\\nfunction FundraisingToggle() {\\\\\\\\n  return (\\\\\\\\n    <>\\\\\\\\n      <div class=\\\\\\\\\\\\\\\"mb-2\\\\\\\\\\\\\\\">\\\\\\\\n        <p class=\\\\\\\\\\\\\\\"fs-6 fw-bold mb-1\\\\\\\\\\\\\\\">\\\\\\\\n          Are you seeking funding for your solution?\\\\\\\\n          <span class=\\\\\\\\\\\\\\\"text-muted fw-normal\\\\\\\\\\\\\\\">(Optional)</span>\\\\\\\\n        </p>\\\\\\\\n        <div class=\\\\\\\\\\\\\\\"form-check form-check-inline\\\\\\\\\\\\\\\">\\\\\\\\n          <label class=\\\\\\\\\\\\\\\"form-check-label\\\\\\\\\\\\\\\">\\\\\\\\n            <button\\\\\\\\n              className=\\\\\\\\\\\\\\\"btn btn-light p-0\\\\\\\\\\\\\\\"\\\\\\\\n              style={{\\\\\\\\n                backgroundColor: state.seekingFunding ? \\\\\\\\\\\\\\\"#0C7283\\\\\\\\\\\\\\\" : \\\\\\\\\\\\\\\"inherit\\\\\\\\\\\\\\\",\\\\\\\\n                color: \\\\\\\\\\\\\\\"#f3f3f3\\\\\\\\\\\\\\\",\\\\\\\\n                border: \\\\\\\\\\\\\\\"solid #D9D9D9\\\\\\\\\\\\\\\",\\\\\\\\n                borderRadius: \\\\\\\\\\\\\\\"100%\\\\\\\\\\\\\\\",\\\\\\\\n                height: \\\\\\\\\\\\\\\"20px\\\\\\\\\\\\\\\",\\\\\\\\n                width: \\\\\\\\\\\\\\\"20px\\\\\\\\\\\\\\\",\\\\\\\\n              }}\\\\\\\\n              onClick={() => State.update({ seekingFunding: true })}\\\\\\\\n            />\\\\\\\\n            Yes\\\\\\\\n          </label>\\\\\\\\n        </div>\\\\\\\\n        <div class=\\\\\\\\\\\\\\\"form-check form-check-inline\\\\\\\\\\\\\\\">\\\\\\\\n          <label class=\\\\\\\\\\\\\\\"form-check-label\\\\\\\\\\\\\\\">\\\\\\\\n            <button\\\\\\\\n              className=\\\\\\\\\\\\\\\"btn btn-light p-0\\\\\\\\\\\\\\\"\\\\\\\\n              style={{\\\\\\\\n                backgroundColor: !state.seekingFunding ? \\\\\\\\\\\\\\\"#0C7283\\\\\\\\\\\\\\\" : \\\\\\\\\\\\\\\"inherit\\\\\\\\\\\\\\\",\\\\\\\\n                color: \\\\\\\\\\\\\\\"#f3f3f3\\\\\\\\\\\\\\\",\\\\\\\\n                border: \\\\\\\\\\\\\\\"solid #D9D9D9\\\\\\\\\\\\\\\",\\\\\\\\n                borderRadius: \\\\\\\\\\\\\\\"100%\\\\\\\\\\\\\\\",\\\\\\\\n                height: \\\\\\\\\\\\\\\"20px\\\\\\\\\\\\\\\",\\\\\\\\n                width: \\\\\\\\\\\\\\\"20px\\\\\\\\\\\\\\\",\\\\\\\\n              }}\\\\\\\\n              onClick={() => State.update({ seekingFunding: false })}\\\\\\\\n            />\\\\\\\\n            No\\\\\\\\n          </label>\\\\\\\\n        </div>\\\\\\\\n      </div>\\\\\\\\n    </>\\\\\\\\n  );\\\\\\\\n}\\\\\\\\n\\\\\\\\nfunction Fundraising() {\\\\\\\\n  return (\\\\\\\\n    <div class=\\\\\\\\\\\\\\\"d-flex flex-column mb-2\\\\\\\\\\\\\\\">\\\\\\\\n      <div className=\\\\\\\\\\\\\\\"col-lg-6  mb-2\\\\\\\\\\\\\\\">\\\\\\\\n        Currency\\\\\\\\n        <select\\\\\\\\n          onChange={(event) => State.update({ token: event.target.value })}\\\\\\\\n          class=\\\\\\\\\\\\\\\"form-select\\\\\\\\\\\\\\\"\\\\\\\\n          aria-label=\\\\\\\\\\\\\\\"Default select\\\\\\\\\\\\\\\"\\\\\\\\n        >\\\\\\\\n          <option selected value=\\\\\\\\\\\\\\\"USDT\\\\\\\\\\\\\\\">\\\\\\\\n            USDT\\\\\\\\n          </option>\\\\\\\\n          <option value=\\\\\\\\\\\\\\\"NEAR\\\\\\\\\\\\\\\">NEAR</option>\\\\\\\\n          <option value=\\\\\\\\\\\\\\\"USDC\\\\\\\\\\\\\\\">USDC</option>\\\\\\\\n        </select>\\\\\\\\n      </div>\\\\\\\\n      <div className=\\\\\\\\\\\\\\\"col-lg-6 mb-2\\\\\\\\\\\\\\\">\\\\\\\\n        Requested amount{\\\\\\\\\\\\\\\" \\\\\\\\\\\\\\\"}\\\\\\\\n        <span class=\\\\\\\\\\\\\\\"text-muted fw-normal\\\\\\\\\\\\\\\">(Numbers Only)</span>\\\\\\\\n        <input\\\\\\\\n          data-testid=\\\\\\\\\\\\\\\"requested-amount-editor\\\\\\\\\\\\\\\"\\\\\\\\n          type=\\\\\\\\\\\\\\\"number\\\\\\\\\\\\\\\"\\\\\\\\n          value={parseInt(state.amount) > 0 ? state.amount : \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\"}\\\\\\\\n          min={0}\\\\\\\\n          onChange={(event) =>\\\\\\\\n            State.update({\\\\\\\\n              amount: Number(\\\\\\\\n                event.target.value.toString().replace(/e/g, \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\")\\\\\\\\n              ).toString(),\\\\\\\\n            })\\\\\\\\n          }\\\\\\\\n        />\\\\\\\\n      </div>\\\\\\\\n      <div className=\\\\\\\\\\\\\\\"col-lg-6 mb-2\\\\\\\\\\\\\\\">\\\\\\\\n        <p class=\\\\\\\\\\\\\\\"mb-1\\\\\\\\\\\\\\\">\\\\\\\\n          Requested sponsor <span class=\\\\\\\\\\\\\\\"text-muted fw-normal\\\\\\\\\\\\\\\">(Optional)</span>\\\\\\\\n        </p>\\\\\\\\n        <p style={{ fontSize: \\\\\\\\\\\\\\\"13px\\\\\\\\\\\\\\\" }} class=\\\\\\\\\\\\\\\"m-0 text-muted fw-light\\\\\\\\\\\\\\\">\\\\\\\\n          If you are requesting funding from a specific sponsor, please enter\\\\\\\\n          their username.\\\\\\\\n        </p>\\\\\\\\n        <div class=\\\\\\\\\\\\\\\"input-group flex-nowrap\\\\\\\\\\\\\\\">\\\\\\\\n          <span class=\\\\\\\\\\\\\\\"input-group-text\\\\\\\\\\\\\\\" id=\\\\\\\\\\\\\\\"addon-wrapping\\\\\\\\\\\\\\\">\\\\\\\\n            @\\\\\\\\n          </span>\\\\\\\\n          <input\\\\\\\\n            type=\\\\\\\\\\\\\\\"text\\\\\\\\\\\\\\\"\\\\\\\\n            class=\\\\\\\\\\\\\\\"form-control\\\\\\\\\\\\\\\"\\\\\\\\n            placeholder=\\\\\\\\\\\\\\\"Enter username\\\\\\\\\\\\\\\"\\\\\\\\n            value={state.supervisor}\\\\\\\\n            onChange={(event) =>\\\\\\\\n              State.update({ supervisor: event.target.value })\\\\\\\\n            }\\\\\\\\n          />\\\\\\\\n        </div>\\\\\\\\n      </div>\\\\\\\\n    </div>\\\\\\\\n  );\\\\\\\\n}\\\\\\\\n\\\\\\\\nfunction generateDescription(text, amount, token, supervisor, seekingFunding) {\\\\\\\\n  const fundingText =\\\\\\\\n    amount > 0 && token ? `###### Requested amount: ${amount} ${token}\\\\\\\\\\\\\\\\n` : \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\";\\\\\\\\n  const supervisorText = supervisor\\\\\\\\n    ? `###### Requested sponsor: @${supervisor}\\\\\\\\\\\\\\\\n`\\\\\\\\n    : \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\";\\\\\\\\n  return seekingFunding ? `${fundingText}${supervisorText}${text}` : text;\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst [tab, setTab] = useState(\\\\\\\\\\\\\\\"editor\\\\\\\\\\\\\\\");\\\\\\\\n\\\\\\\\nreturn (\\\\\\\\n  <div class=\\\\\\\\\\\\\\\"bg-light d-flex flex-column flex-grow-1 w-100\\\\\\\\\\\\\\\">\\\\\\\\n    <div class=\\\\\\\\\\\\\\\"mx-2 mx-md-5 mb-5\\\\\\\\\\\\\\\">\\\\\\\\n      {props.transactionHashes ? (\\\\\\\\n        <>\\\\\\\\n          Post created successfully. Back to{\\\\\\\\\\\\\\\" \\\\\\\\\\\\\\\"}\\\\\\\\n          <Link\\\\\\\\n            style={{\\\\\\\\n              color: \\\\\\\\\\\\\\\"#3252A6\\\\\\\\\\\\\\\",\\\\\\\\n            }}\\\\\\\\n            className=\\\\\\\\\\\\\\\"fw-bold\\\\\\\\\\\\\\\"\\\\\\\\n            to={href({\\\\\\\\n              widgetSrc: \\\\\\\\\\\\\\\"devhub.near/widget/app\\\\\\\\\\\\\\\",\\\\\\\\n              params: { page: \\\\\\\\\\\\\\\"feed\\\\\\\\\\\\\\\" },\\\\\\\\n            })}\\\\\\\\n          >\\\\\\\\n            feed\\\\\\\\n          </Link>\\\\\\\\n        </>\\\\\\\\n      ) : (\\\\\\\\n        <>\\\\\\\\n          <div className=\\\\\\\\\\\\\\\"card\\\\\\\\\\\\\\\">\\\\\\\\n            <div className=\\\\\\\\\\\\\\\"card-header pb-0\\\\\\\\\\\\\\\">\\\\\\\\n              <div>\\\\\\\\n                <ul class=\\\\\\\\\\\\\\\"nav nav-tabs\\\\\\\\\\\\\\\">\\\\\\\\n                  <li class=\\\\\\\\\\\\\\\"nav-item\\\\\\\\\\\\\\\">\\\\\\\\n                    <button\\\\\\\\n                      class={`nav-link ${tab === \\\\\\\\\\\\\\\"editor\\\\\\\\\\\\\\\" ? \\\\\\\\\\\\\\\"active\\\\\\\\\\\\\\\" : \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\"}`}\\\\\\\\n                      onClick={() => setTab(\\\\\\\\\\\\\\\"editor\\\\\\\\\\\\\\\")}\\\\\\\\n                    >\\\\\\\\n                      Editor\\\\\\\\n                    </button>\\\\\\\\n                  </li>\\\\\\\\n                  <li class=\\\\\\\\\\\\\\\"nav-item\\\\\\\\\\\\\\\">\\\\\\\\n                    <button\\\\\\\\n                      class={`nav-link ${tab === \\\\\\\\\\\\\\\"preview\\\\\\\\\\\\\\\" ? \\\\\\\\\\\\\\\"active\\\\\\\\\\\\\\\" : \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\"}`}\\\\\\\\n                      onClick={() => setTab(\\\\\\\\\\\\\\\"preview\\\\\\\\\\\\\\\")}\\\\\\\\n                    >\\\\\\\\n                      Preview\\\\\\\\n                    </button>\\\\\\\\n                  </li>\\\\\\\\n                </ul>\\\\\\\\n              </div>\\\\\\\\n            </div>\\\\\\\\n            <div class=\\\\\\\\\\\\\\\"card border-light\\\\\\\\\\\\\\\">\\\\\\\\n              {tab === \\\\\\\\\\\\\\\"editor\\\\\\\\\\\\\\\" && (\\\\\\\\n                <>\\\\\\\\n                  <div class=\\\\\\\\\\\\\\\"card-body\\\\\\\\\\\\\\\">\\\\\\\\n                    <p class=\\\\\\\\\\\\\\\"card-title fw-bold fs-6\\\\\\\\\\\\\\\">\\\\\\\\n                      What do you want to create?\\\\\\\\n                    </p>\\\\\\\\n                    <div class=\\\\\\\\\\\\\\\"d-flex flex-row gap-2\\\\\\\\\\\\\\\">\\\\\\\\n                      {Object.values(postTypeOptions).map((option) => (\\\\\\\\n                        <button\\\\\\\\n                          className={`btn btn-${\\\\\\\\n                            state.postType === option.name\\\\\\\\n                              ? \\\\\\\\\\\\\\\"primary\\\\\\\\\\\\\\\"\\\\\\\\n                              : \\\\\\\\\\\\\\\"outline-secondary\\\\\\\\\\\\\\\"\\\\\\\\n                          }`}\\\\\\\\n                          data-testid={`btn-${option.name.toLowerCase()}`}\\\\\\\\n                          key={option.name}\\\\\\\\n                          onClick={() => typeSwitch(option.name)}\\\\\\\\n                          style={\\\\\\\\n                            state.postType === option.name\\\\\\\\n                              ? {\\\\\\\\n                                  backgroundColor: \\\\\\\\\\\\\\\"#0C7283\\\\\\\\\\\\\\\",\\\\\\\\n                                  color: \\\\\\\\\\\\\\\"#f3f3f3\\\\\\\\\\\\\\\",\\\\\\\\n                                }\\\\\\\\n                              : null\\\\\\\\n                          }\\\\\\\\n                          type=\\\\\\\\\\\\\\\"button\\\\\\\\\\\\\\\"\\\\\\\\n                        >\\\\\\\\n                          <i className={`bi ${option.icon}`} />\\\\\\\\n                          <span>{option.name}</span>\\\\\\\\n                        </button>\\\\\\\\n                      ))}\\\\\\\\n                    </div>\\\\\\\\n                    <p class=\\\\\\\\\\\\\\\"text-muted w-100 my-1\\\\\\\\\\\\\\\">\\\\\\\\n                      {postTypeOptions[state.postType].description}\\\\\\\\n                    </p>\\\\\\\\n                    {state.warning && (\\\\\\\\n                      <div\\\\\\\\n                        class=\\\\\\\\\\\\\\\"alert alert-warning alert-dismissible fade show\\\\\\\\\\\\\\\"\\\\\\\\n                        role=\\\\\\\\\\\\\\\"alert\\\\\\\\\\\\\\\"\\\\\\\\n                      >\\\\\\\\n                        {state.warning}\\\\\\\\n                        <button\\\\\\\\n                          type=\\\\\\\\\\\\\\\"button\\\\\\\\\\\\\\\"\\\\\\\\n                          class=\\\\\\\\\\\\\\\"btn-close\\\\\\\\\\\\\\\"\\\\\\\\n                          data-bs-dismiss=\\\\\\\\\\\\\\\"alert\\\\\\\\\\\\\\\"\\\\\\\\n                          aria-label=\\\\\\\\\\\\\\\"Close\\\\\\\\\\\\\\\"\\\\\\\\n                          onClick={() => State.update({ warning: \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\" })}\\\\\\\\n                        ></button>\\\\\\\\n                      </div>\\\\\\\\n                    )}\\\\\\\\n                    <div className=\\\\\\\\\\\\\\\"row mt-3\\\\\\\\\\\\\\\">\\\\\\\\n                      <NameEditor />\\\\\\\\n                      <DescriptionEditor />\\\\\\\\n                      <LabelsEditor />\\\\\\\\n                      {state.postType === \\\\\\\\\\\\\\\"Solution\\\\\\\\\\\\\\\" && <FundraisingToggle />}\\\\\\\\n                      {state.seekingFunding && <Fundraising />}\\\\\\\\n                    </div>\\\\\\\\n                    <button\\\\\\\\n                      data-testid=\\\\\\\\\\\\\\\"submit-create-post\\\\\\\\\\\\\\\"\\\\\\\\n                      style={{\\\\\\\\n                        width: \\\\\\\\\\\\\\\"7rem\\\\\\\\\\\\\\\",\\\\\\\\n                        backgroundColor: \\\\\\\\\\\\\\\"#0C7283\\\\\\\\\\\\\\\",\\\\\\\\n                        color: \\\\\\\\\\\\\\\"#f3f3f3\\\\\\\\\\\\\\\",\\\\\\\\n                      }}\\\\\\\\n                      disabled={\\\\\\\\n                        (state.seekingFunding &&\\\\\\\\n                          (!state.amount || state.amount < 1)) ||\\\\\\\\n                        state.name === \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\" ||\\\\\\\\n                        state.description === \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\"\\\\\\\\n                      }\\\\\\\\n                      className=\\\\\\\\\\\\\\\"btn btn-light mb-2 p-3\\\\\\\\\\\\\\\"\\\\\\\\n                      onClick={onSubmit}\\\\\\\\n                    >\\\\\\\\n                      Submit\\\\\\\\n                    </button>\\\\\\\\n                  </div>\\\\\\\\n                </>\\\\\\\\n              )}\\\\\\\\n              {tab === \\\\\\\\\\\\\\\"preview\\\\\\\\\\\\\\\" && (\\\\\\\\n                <div class=\\\\\\\\\\\\\\\"card-body\\\\\\\\\\\\\\\">\\\\\\\\n                  <p class=\\\\\\\\\\\\\\\"card-title fw-bold fs-6\\\\\\\\\\\\\\\">Preview</p>\\\\\\\\n                  <div>\\\\\\\\n                    <Widget\\\\\\\\n                      src=\\\\\\\\\\\\\\\"devhub.near/widget/devhub.entity.post.Post\\\\\\\\\\\\\\\"\\\\\\\\n                      props={{\\\\\\\\n                        isPreview: true,\\\\\\\\n                        id: 0, // irrelevant\\\\\\\\n                        post: {\\\\\\\\n                          author_id: context.accountId,\\\\\\\\n                          likes: [],\\\\\\\\n                          snapshot: {\\\\\\\\n                            labels: state.labels,\\\\\\\\n                            post_type: state.postType,\\\\\\\\n                            name: state.name,\\\\\\\\n                            description: generateDescription(\\\\\\\\n                              state.description,\\\\\\\\n                              state.amount,\\\\\\\\n                              state.token,\\\\\\\\n                              state.supervisor,\\\\\\\\n                              state.seekingFunding\\\\\\\\n                            ),\\\\\\\\n                          },\\\\\\\\n                        },\\\\\\\\n                      }}\\\\\\\\n                    />\\\\\\\\n                  </div>\\\\\\\\n                  <button\\\\\\\\n                    data-testid=\\\\\\\\\\\\\\\"submit-create-post\\\\\\\\\\\\\\\"\\\\\\\\n                    style={{\\\\\\\\n                      width: \\\\\\\\\\\\\\\"7rem\\\\\\\\\\\\\\\",\\\\\\\\n                      backgroundColor: \\\\\\\\\\\\\\\"#0C7283\\\\\\\\\\\\\\\",\\\\\\\\n                      color: \\\\\\\\\\\\\\\"#f3f3f3\\\\\\\\\\\\\\\",\\\\\\\\n                    }}\\\\\\\\n                    disabled={\\\\\\\\n                      (state.seekingFunding &&\\\\\\\\n                        (!state.amount || state.amount < 1)) ||\\\\\\\\n                      state.name === \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\" ||\\\\\\\\n                      state.description === \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\"\\\\\\\\n                    }\\\\\\\\n                    className=\\\\\\\\\\\\\\\"btn btn-light my-2 p-3\\\\\\\\\\\\\\\"\\\\\\\\n                    onClick={onSubmit}\\\\\\\\n                  >\\\\\\\\n                    Submit\\\\\\\\n                  </button>\\\\\\\\n                </div>\\\\\\\\n              )}\\\\\\\\n            </div>\\\\\\\\n          </div>\\\\\\\\n        </>\\\\\\\\n      )}\\\\\\\\n    </div>\\\\\\\\n  </div>\\\\\\\\n);\\\\\\\\n\"}, \"core.lib.stringUtils\": {\"\": \"/**\\\\\\\\n * Transform input into a consistent and standardized format\\\\\\\\n *\\\\\\\\n * @param {string} text - The input to normalize.\\\\\\\\n * @returns {string} - normalized input\\\\\\\\n */\\\\\\\\n\\\\\\\\nconst normalize = (text) =>\\\\\\\\n  text\\\\\\\\n    .replaceAll(/[- \\\\\\\\\\\\\\\\.]/g, \\\\\\\\\\\\\\\"_\\\\\\\\\\\\\\\")\\\\\\\\n    .replaceAll(/[^\\\\\\\\\\\\\\\\w]+/g, \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\")\\\\\\\\n    .replaceAll(/_+/g, \\\\\\\\\\\\\\\"-\\\\\\\\\\\\\\\")\\\\\\\\n    .replace(/^-+/, \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\")\\\\\\\\n    .replace(/-+$/, \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\")\\\\\\\\n    .toLowerCase()\\\\\\\\n    .trim(\\\\\\\\\\\\\\\"-\\\\\\\\\\\\\\\");\\\\\\\\n\\\\\\\\nreturn { normalize };\\\\\\\\n\"}, \"devhub.page.contribute\": {\"\": \"const Header = styled.div`\\\\\\\\n  //background: white;\\\\\\\\n  padding: 1rem 3.125rem;\\\\\\\\n  width: 100%;\\\\\\\\n  margin: 24px;\\\\\\\\n\\\\\\\\n  @media screen and (max-width: 768px) {\\\\\\\\n    margin: 1rem 0;\\\\\\\\n    padding: 1rem;\\\\\\\\n  }\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst PageHeader = styled.h1`\\\\\\\\n  color: #555555;\\\\\\\\n  font-size: 1.5rem;\\\\\\\\n  font-style: normal;\\\\\\\\n  font-weight: 500;\\\\\\\\n  line-height: 120%; /* 28.8px */\\\\\\\\n  letter-spacing: -0.24px;\\\\\\\\n  margin: 0;\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst Lead = styled.h5`\\\\\\\\n  color: #151515;\\\\\\\\n  font-size: 2.5rem;\\\\\\\\n  font-style: normal;\\\\\\\\n  font-weight: 700;\\\\\\\\n  line-height: 120%; /* 48px */\\\\\\\\n  margin: 2.25rem 8rem;\\\\\\\\n  margin-top: 0;\\\\\\\\n\\\\\\\\n  @media screen and (max-width: 768px) {\\\\\\\\n    font-size: 1.75rem;\\\\\\\\n    margin: 1rem;\\\\\\\\n    margin-top: 0;\\\\\\\\n  }\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst Container = styled.div`\\\\\\\\n  padding: 2.25rem 8rem;\\\\\\\\n  width: 100%;\\\\\\\\n  //background-color: white;\\\\\\\\n\\\\\\\\n  @media screen and (max-width: 768px) {\\\\\\\\n    padding: 1rem;\\\\\\\\n  }\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst actions = [\\\\\\\\n  {\\\\\\\\n    title: \\\\\\\\\\\\\\\"Ideate on DevHub\\\\\\\\\\\\\\\",\\\\\\\\n    description:\\\\\\\\n      \\\\\\\\\\\\\\\"The first step in any NEAR ecosystem project is ideation. It is crucial to have a way to find people to share and explore ideas with, partly because it can save a lot of time based on prior discussions. But also because it can you gauge support from a diversity of stakeholders.\\\\\\\\\\\\\\\",\\\\\\\\n    ctaAction: \\\\\\\\\\\\\\\"Learn More \\\\\\\\u{2192}\\\\\\\\\\\\\\\",\\\\\\\\n    ctaLink: \\\\\\\\\\\\\\\"/devhub.near/widget/app?page=blog&id=2029\\\\\\\\\\\\\\\",\\\\\\\\n  },\\\\\\\\n  {\\\\\\\\n    title: \\\\\\\\\\\\\\\"Post a Proposal\\\\\\\\\\\\\\\",\\\\\\\\n    description:\\\\\\\\n      \\\\\\\\\\\\\\\"If you have already nurtured and refined your idea, you\\\\\\\\\\\\'re ready to draft and post your funding proposal.This guide is here to help you craft a compelling, convincing, and concise proposal that will capture the interest of potential funders.\\\\\\\\\\\\\\\",\\\\\\\\n    ctaAction: \\\\\\\\\\\\\\\"Learn More \\\\\\\\u{2192}\\\\\\\\\\\\\\\",\\\\\\\\n    ctaLink: \\\\\\\\\\\\\\\"/devhub.near/widget/app?page=blog&id=2035\\\\\\\\\\\\\\\",\\\\\\\\n  },\\\\\\\\n  {\\\\\\\\n    title: \\\\\\\\\\\\\\\"Host an Event\\\\\\\\\\\\\\\",\\\\\\\\n    description:\\\\\\\\n      \\\\\\\\\\\\\\\"We are always on the lookout for events that align with our mission and provide value to the NEAR ecosystem. If you are organizing such an event, we would love to hear from you! Below is a guide on how to submit a sponsorship proposal to us.\\\\\\\\\\\\\\\",\\\\\\\\n    ctaAction: \\\\\\\\\\\\\\\"Learn More \\\\\\\\u{2192}\\\\\\\\\\\\\\\",\\\\\\\\n    ctaLink: \\\\\\\\\\\\\\\"/devhub.near/widget/app?page=community&handle=hacks&tab=wiki-202\\\\\\\\\\\\\\\",\\\\\\\\n  },\\\\\\\\n  {\\\\\\\\n    title: \\\\\\\\\\\\\\\"Improve NEAR Docs\\\\\\\\\\\\\\\",\\\\\\\\n    description:\\\\\\\\n      \\\\\\\\\\\\\\\"NEAR documentation is an open source repository that anyone can fork, extend and contribute to by creating pull requests. To get started, head over to our github repository and checkout how you can make your first contribution. \\\\\\\\\\\\\\\",\\\\\\\\n    ctaAction: \\\\\\\\\\\\\\\"Learn More \\\\\\\\u{2192}\\\\\\\\\\\\\\\",\\\\\\\\n    ctaLink: \\\\\\\\\\\\\\\"https://github.com/near/docs\\\\\\\\\\\\\\\",\\\\\\\\n  },\\\\\\\\n  {\\\\\\\\n    title: \\\\\\\\\\\\\\\"Join the Fellowship\\\\\\\\\\\\\\\",\\\\\\\\n    description:\\\\\\\\n      \\\\\\\\\\\\\\\"As the NEAR ecosystem grows rapidly, there is an increasing need to improve developer productivity. The DevDAO NEAR Platform Fellowship Program aims to solve this issue by providing guidance to new contributors from experienced developers.\\\\\\\\\\\\\\\",\\\\\\\\n    ctaAction: \\\\\\\\\\\\\\\"Learn More \\\\\\\\u{2192}\\\\\\\\\\\\\\\",\\\\\\\\n    ctaLink:\\\\\\\\n      \\\\\\\\\\\\\\\"/devhub.near/widget/app?page=community&handle=fellowship&tab=wiki-1\\\\\\\\\\\\\\\",\\\\\\\\n  },\\\\\\\\n  {\\\\\\\\n    title: \\\\\\\\\\\\\\\"Join NEAR Campus\\\\\\\\\\\\\\\",\\\\\\\\n    description:\\\\\\\\n      \\\\\\\\\\\\\\\"DevHub\\\\\\\\u{2019}s NEAR Campus supports existing student clubs, researchers, and faculties in blockchain technologies, enhancing both curricular and extracurricular activities. We aim to merge blockchain education with mainstream academics.\\\\\\\\\\\\\\\",\\\\\\\\n    ctaAction: \\\\\\\\\\\\\\\"Learn More \\\\\\\\u{2192}\\\\\\\\\\\\\\\",\\\\\\\\n    ctaLink: \\\\\\\\\\\\\\\"/devhub.near/widget/app?page=community&handle=near-campus\\\\\\\\\\\\\\\",\\\\\\\\n  },\\\\\\\\n  {\\\\\\\\n    title: \\\\\\\\\\\\\\\"Dive into Hackbox\\\\\\\\\\\\\\\",\\\\\\\\n    description:\\\\\\\\n      \\\\\\\\\\\\\\\"Hackbox is a revolutionary plug-and-play solution designed to empower local leads and community stewards in hosting hackathons easily and efficiently.\\\\\\\\\\\\\\\",\\\\\\\\n    ctaAction: \\\\\\\\\\\\\\\"Learn More \\\\\\\\u{2192}\\\\\\\\\\\\\\\",\\\\\\\\n    ctaLink: \\\\\\\\\\\\\\\"/hackbox.near/widget/home\\\\\\\\\\\\\\\",\\\\\\\\n  },\\\\\\\\n];\\\\\\\\n\\\\\\\\nconst Card = styled.div`\\\\\\\\n  display: flex;\\\\\\\\n  flex-direction: column;\\\\\\\\n  gap: 0.5rem;\\\\\\\\n\\\\\\\\n  h5 {\\\\\\\\n    color: #151515;\\\\\\\\n    font-size: 1.75rem;\\\\\\\\n    font-style: normal;\\\\\\\\n    font-weight: 400;\\\\\\\\n    line-height: 120%; /* 43.2px */\\\\\\\\n\\\\\\\\n    display: flex;\\\\\\\\n    align-items: center;\\\\\\\\n  }\\\\\\\\n\\\\\\\\n  p {\\\\\\\\n    color: #000;\\\\\\\\n    font-size: 1rem;\\\\\\\\n    font-style: normal;\\\\\\\\n    font-weight: 400;\\\\\\\\n    line-height: 120%; /* 28.8px */\\\\\\\\n  }\\\\\\\\n\\\\\\\\n  a {\\\\\\\\n    color: #f4f4f4;\\\\\\\\n    font-size: 1rem;\\\\\\\\n    font-style: normal;\\\\\\\\n    font-weight: 700;\\\\\\\\n    line-height: 120%; /* 28.8px */\\\\\\\\n    letter-spacing: -0.48px;\\\\\\\\n\\\\\\\\n    display: flex;\\\\\\\\n    padding: 0.5rem 1rem;\\\\\\\\n    align-items: center;\\\\\\\\n    gap: 8px;\\\\\\\\n\\\\\\\\n    border-radius: 0.5rem;\\\\\\\\n    background: #00ec97;\\\\\\\\n\\\\\\\\n    width: max-content;\\\\\\\\n  }\\\\\\\\n`;\\\\\\\\nconst ActionCard = ({ action, index }) => {\\\\\\\\n  return (\\\\\\\\n    <Card>\\\\\\\\n      <h5>\\\\\\\\n        <span\\\\\\\\n          style={{\\\\\\\\n            color: \\\\\\\\\\\\\\\"#151515\\\\\\\\\\\\\\\",\\\\\\\\n            border: \\\\\\\\\\\\\\\"2px #151515 solid\\\\\\\\\\\\\\\",\\\\\\\\n            fontSize: 12,\\\\\\\\n            padding: 4,\\\\\\\\n            width: 22,\\\\\\\\n            height: 22,\\\\\\\\n          }}\\\\\\\\n          className=\\\\\\\\\\\\\\\"rounded-circle d-flex align-items-center justify-content-center me-1\\\\\\\\\\\\\\\"\\\\\\\\n        >\\\\\\\\n          {index + 1}\\\\\\\\n        </span>\\\\\\\\n        {action.title}\\\\\\\\n      </h5>\\\\\\\\n      <p>{action.description}</p>\\\\\\\\n      <a href={action.ctaLink} target=\\\\\\\\\\\\\\\"no_blank\\\\\\\\\\\\\\\">\\\\\\\\n        {action.ctaAction}\\\\\\\\n      </a>\\\\\\\\n    </Card>\\\\\\\\n  );\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst ActionContainer = styled.div`\\\\\\\\n  display: grid;\\\\\\\\n  grid-template-columns: repeat(2, 1fr);\\\\\\\\n  justify-content: center;\\\\\\\\n  column-gap: 1rem;\\\\\\\\n  row-gap: 2rem;\\\\\\\\n\\\\\\\\n  width: 100%;\\\\\\\\n\\\\\\\\n  @media screen and (max-width: 768px) {\\\\\\\\n    display: flex;\\\\\\\\n    flex-direction: column;\\\\\\\\n  }\\\\\\\\n`;\\\\\\\\n\\\\\\\\nreturn (\\\\\\\\n  <>\\\\\\\\n    <Widget src={`devhub.near/widget/devhub.components.island.banner`} />\\\\\\\\n    <Header>\\\\\\\\n      <PageHeader>Contribute</PageHeader>\\\\\\\\n    </Header>\\\\\\\\n    <Lead>\\\\\\\\n      There are many ways to start your contribution journey. You can:\\\\\\\\n    </Lead>\\\\\\\\n    <Container>\\\\\\\\n      <ActionContainer>\\\\\\\\n        {actions.map((action, index) => (\\\\\\\\n          <ActionCard action={action} index={index} />\\\\\\\\n        ))}\\\\\\\\n      </ActionContainer>\\\\\\\\n    </Container>\\\\\\\\n  </>\\\\\\\\n);\\\\\\\\n\"}, \"devhub.page.community.index\": {\"\": \"const { normalize } =\\\\\\\\n  VM.require(\\\\\\\\\\\\\\\"devhub.near/widget/core.lib.stringUtils\\\\\\\\\\\\\\\") || (() => {});\\\\\\\\n\\\\\\\\nconst Button = styled.button`\\\\\\\\n  height: 40px;\\\\\\\\n  font-size: 14px;\\\\\\\\n  border-color: #e3e3e0;\\\\\\\\n  background-color: #ffffff;\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst Banner = styled.div`\\\\\\\\n  max-width: 100%;\\\\\\\\n  min-height: 240px;\\\\\\\\n  height: 240px;\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst CenteredMessage = styled.div`\\\\\\\\n  display: flex;\\\\\\\\n  flex-direction: column;\\\\\\\\n  justify-content: center;\\\\\\\\n  align-items: center;\\\\\\\\n  width: 100%;\\\\\\\\n  height: ${(p) => p.height ?? \\\\\\\\\\\\\\\"100%\\\\\\\\\\\\\\\"};\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst NavUnderline = styled.ul`\\\\\\\\n  cursor: pointer;\\\\\\\\n  a {\\\\\\\\n    color: #151515;\\\\\\\\n    text-decoration: none;\\\\\\\\n  }\\\\\\\\n\\\\\\\\n  a.active {\\\\\\\\n    font-weight: bold;\\\\\\\\n    border-bottom: 4px solid #00ec97;\\\\\\\\n  }\\\\\\\\n  border-bottom: 1px solid #cccccc;\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst { tab, permissions, community, view } = props;\\\\\\\\n\\\\\\\\nconst { href } = VM.require(\\\\\\\\\\\\\\\"devhub.near/widget/core.lib.url\\\\\\\\\\\\\\\");\\\\\\\\n\\\\\\\\nif (!href) {\\\\\\\\n  return <></>;\\\\\\\\n}\\\\\\\\n\\\\\\\\nif (!tab) {\\\\\\\\n  tab = \\\\\\\\\\\\\\\"Activity\\\\\\\\\\\\\\\";\\\\\\\\n}\\\\\\\\n\\\\\\\\ntab = normalize(tab);\\\\\\\\n\\\\\\\\nconst [isLinkCopied, setLinkCopied] = useState(false);\\\\\\\\n\\\\\\\\nconst tabs = [\\\\\\\\n  {\\\\\\\\n    title: \\\\\\\\\\\\\\\"Activity\\\\\\\\\\\\\\\",\\\\\\\\n    view: \\\\\\\\\\\\\\\"devhub.near/widget/devhub.entity.community.Activity\\\\\\\\\\\\\\\",\\\\\\\\n    params: {\\\\\\\\n      handle: community.handle,\\\\\\\\n    },\\\\\\\\n  },\\\\\\\\n  {\\\\\\\\n    title: \\\\\\\\\\\\\\\"Teams\\\\\\\\\\\\\\\",\\\\\\\\n    view: \\\\\\\\\\\\\\\"devhub.near/widget/devhub.entity.community.Teams\\\\\\\\\\\\\\\",\\\\\\\\n    params: {\\\\\\\\n      handle: community.handle,\\\\\\\\n    },\\\\\\\\n  },\\\\\\\\n];\\\\\\\\n\\\\\\\\n(community.addons || []).map((addon) => {\\\\\\\\n  addon.enabled &&\\\\\\\\n    tabs.push({\\\\\\\\n      title: addon.display_name,\\\\\\\\n      view: \\\\\\\\\\\\\\\"devhub.near/widget/devhub.page.addon\\\\\\\\\\\\\\\",\\\\\\\\n      params: { addon },\\\\\\\\n    });\\\\\\\\n});\\\\\\\\n\\\\\\\\nconst onShareClick = () =>\\\\\\\\n  clipboard\\\\\\\\n    .writeText(\\\\\\\\n      href({\\\\\\\\n        gateway: \\\\\\\\\\\\\\\"near.social\\\\\\\\\\\\\\\",\\\\\\\\n        widgetSrc: \\\\\\\\\\\\\\\"devhub.near/widget/app\\\\\\\\\\\\\\\",\\\\\\\\n        params: { page: \\\\\\\\\\\\\\\"community\\\\\\\\\\\\\\\", handle: community.handle },\\\\\\\\n      })\\\\\\\\n    )\\\\\\\\n    .then(setLinkCopied(true));\\\\\\\\n\\\\\\\\nlet currentTab = tabs.find((it) => normalize(it.title) === tab);\\\\\\\\n\\\\\\\\nconst CommunityName = styled.span`\\\\\\\\n  color: #151515;\\\\\\\\n  font-size: 2.25rem;\\\\\\\\n  font-style: normal;\\\\\\\\n  font-weight: 700;\\\\\\\\n  line-height: 100%; /* 48px */\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst CommunityDetails = styled.span`\\\\\\\\n  color: #818181;\\\\\\\\n  font-size: 1rem;\\\\\\\\n  font-style: normal;\\\\\\\\n  font-weight: 400;\\\\\\\\n  line-height: 120%; /* 28.8px */\\\\\\\\n`;\\\\\\\\n\\\\\\\\nfunction trimHttps(url) {\\\\\\\\n  if (url.startsWith(\\\\\\\\\\\\\\\"https://\\\\\\\\\\\\\\\")) {\\\\\\\\n    return url.substring(8);\\\\\\\\n  }\\\\\\\\n  return url;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// some communties have url as handle (eg: devhub platform) while others has correct handle\\\\\\\\nfunction checkTelegramHandle(tg) {\\\\\\\\n  const pattern = /https:\\\\\\\\\\\\\\\\/\\\\\\\\\\\\\\\\/t.me\\\\\\\\\\\\\\\\/(.*)/;\\\\\\\\n  const includesHttp = tg.match(pattern);\\\\\\\\n  const handle = includesHttp ? includesHttp[1] : tg;\\\\\\\\n  return { handle, url: \\\\\\\\\\\\\\\"https://t.me/\\\\\\\\\\\\\\\" + handle };\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst socialLinks = [\\\\\\\\n  ...((community.website_url?.length ?? 0) > 0\\\\\\\\n    ? [\\\\\\\\n        {\\\\\\\\n          href: `https://${trimHttps(community.website_url)}`,\\\\\\\\n          iconClass: \\\\\\\\\\\\\\\"bi bi-globe\\\\\\\\\\\\\\\",\\\\\\\\n          name: trimHttps(community.website_url),\\\\\\\\n        },\\\\\\\\n      ]\\\\\\\\n    : []),\\\\\\\\n\\\\\\\\n  ...((community.github_handle?.length ?? 0) > 0\\\\\\\\n    ? [\\\\\\\\n        {\\\\\\\\n          href: `https://github.com/${community.github_handle}`,\\\\\\\\n          iconClass: \\\\\\\\\\\\\\\"bi bi-github\\\\\\\\\\\\\\\",\\\\\\\\n          name: community.github_handle,\\\\\\\\n        },\\\\\\\\n      ]\\\\\\\\n    : []),\\\\\\\\n\\\\\\\\n  ...((community.twitter_handle?.length ?? 0) > 0\\\\\\\\n    ? [\\\\\\\\n        {\\\\\\\\n          href: `https://twitter.com/${community.twitter_handle}`,\\\\\\\\n          iconClass: \\\\\\\\\\\\\\\"bi bi-twitter\\\\\\\\\\\\\\\",\\\\\\\\n          name: community.twitter_handle,\\\\\\\\n        },\\\\\\\\n      ]\\\\\\\\n    : []),\\\\\\\\n\\\\\\\\n  ...(community.telegram_handle?.length > 0\\\\\\\\n    ? [\\\\\\\\n        {\\\\\\\\n          href: checkTelegramHandle(community.telegram_handle).url,\\\\\\\\n          iconClass: \\\\\\\\\\\\\\\"bi bi-telegram\\\\\\\\\\\\\\\",\\\\\\\\n          name: checkTelegramHandle(community.telegram_handle).handle,\\\\\\\\n        },\\\\\\\\n      ]\\\\\\\\n    : []),\\\\\\\\n];\\\\\\\\n\\\\\\\\nconst NavlinksContainer = styled.div`\\\\\\\\n  //background: white;\\\\\\\\n  padding: 0 3rem;\\\\\\\\n\\\\\\\\n  @media screen and (max-width: 960px) {\\\\\\\\n    padding: 0 1rem;\\\\\\\\n  }\\\\\\\\n`;\\\\\\\\n\\\\\\\\nreturn (\\\\\\\\n  <div\\\\\\\\n    className=\\\\\\\\\\\\\\\"d-flex flex-column gap-3 w-100\\\\\\\\\\\\\\\"\\\\\\\\n    style={{ background: \\\\\\\\\\\\\\\"#F4F4F4\\\\\\\\\\\\\\\" }}\\\\\\\\n  >\\\\\\\\n    <Banner\\\\\\\\n      className=\\\\\\\\\\\\\\\"object-fit-cover\\\\\\\\\\\\\\\"\\\\\\\\n      style={{\\\\\\\\n        background: `center / cover no-repeat url(${community.banner_url})`,\\\\\\\\n      }}\\\\\\\\n    />\\\\\\\\n\\\\\\\\n    <div className=\\\\\\\\\\\\\\\"container d-flex flex-wrap justify-content-between align-items-center align-items-md-start gap-4\\\\\\\\\\\\\\\">\\\\\\\\n      <div className=\\\\\\\\\\\\\\\"d-flex flex-column ms-3\\\\\\\\\\\\\\\">\\\\\\\\n        <div className=\\\\\\\\\\\\\\\"position-relative\\\\\\\\\\\\\\\">\\\\\\\\n          <div style={{ width: 150, height: 45 }}>\\\\\\\\n            <img\\\\\\\\n              alt=\\\\\\\\\\\\\\\"Loading logo...\\\\\\\\\\\\\\\"\\\\\\\\n              className=\\\\\\\\\\\\\\\"rounded-circle position-absolute\\\\\\\\\\\\\\\"\\\\\\\\n              width=\\\\\\\\\\\\\\\"160\\\\\\\\\\\\\\\"\\\\\\\\n              height=\\\\\\\\\\\\\\\"160\\\\\\\\\\\\\\\"\\\\\\\\n              src={community.logo_url}\\\\\\\\n              style={{ top: -124 }}\\\\\\\\n            />\\\\\\\\n          </div>\\\\\\\\n        </div>\\\\\\\\n\\\\\\\\n        <div className=\\\\\\\\\\\\\\\"d-flex flex-column gap-3 ps-md-3 pt-md-3 pb-md-2\\\\\\\\\\\\\\\">\\\\\\\\n          <CommunityName className=\\\\\\\\\\\\\\\"text-nowrap\\\\\\\\\\\\\\\">\\\\\\\\n            {community.name}\\\\\\\\n          </CommunityName>\\\\\\\\n          <CommunityDetails>{community.description}</CommunityDetails>\\\\\\\\n        </div>\\\\\\\\n\\\\\\\\n        <div className=\\\\\\\\\\\\\\\"mt-3 ps-3 d-flex gap-3 align-items-center\\\\\\\\\\\\\\\">\\\\\\\\n          {socialLinks.map((link, index) => (\\\\\\\\n            <a\\\\\\\\n              href={link.href}\\\\\\\\n              style={{\\\\\\\\n                marginLeft: index !== 0 ? \\\\\\\\\\\\\\\"0px\\\\\\\\\\\\\\\" : \\\\\\\\\\\\\\\"0px\\\\\\\\\\\\\\\",\\\\\\\\n                color: \\\\\\\\\\\\\\\"#818181\\\\\\\\\\\\\\\",\\\\\\\\n              }}\\\\\\\\n              key={link.href}\\\\\\\\n              target=\\\\\\\\\\\\\\\"_blank\\\\\\\\\\\\\\\"\\\\\\\\n            >\\\\\\\\n              <i className={link.iconClass}></i>\\\\\\\\n            </a>\\\\\\\\n          ))}\\\\\\\\n        </div>\\\\\\\\n      </div>\\\\\\\\n\\\\\\\\n      <div className=\\\\\\\\\\\\\\\"d-flex align-items-end gap-3 ms-auto mb-md-5 me-4\\\\\\\\\\\\\\\">\\\\\\\\n        {permissions.can_configure && (\\\\\\\\n          <Link\\\\\\\\n            to={`/devhub.near/widget/app?page=community.configuration&handle=${community.handle}`}\\\\\\\\n          >\\\\\\\\n            <Widget\\\\\\\\n              src={\\\\\\\\\\\\\\\"devhub.near/widget/devhub.components.molecule.Button\\\\\\\\\\\\\\\"}\\\\\\\\n              props={{\\\\\\\\n                classNames: { root: \\\\\\\\\\\\\\\"btn-outline-light text-dark shadow-none\\\\\\\\\\\\\\\" },\\\\\\\\n                notRounded: true,\\\\\\\\n                style: {\\\\\\\\n                  display: \\\\\\\\\\\\\\\"flex\\\\\\\\\\\\\\\",\\\\\\\\n                  padding: \\\\\\\\\\\\\\\"0.75rem 1rem\\\\\\\\\\\\\\\",\\\\\\\\n                  alignItems: \\\\\\\\\\\\\\\"center\\\\\\\\\\\\\\\",\\\\\\\\n                  gap: \\\\\\\\\\\\\\\"16px\\\\\\\\\\\\\\\",\\\\\\\\n\\\\\\\\n                  borderRadius: \\\\\\\\\\\\\\\"4px\\\\\\\\\\\\\\\",\\\\\\\\n                  border: \\\\\\\\\\\\\\\"1px solid #00EC97\\\\\\\\\\\\\\\",\\\\\\\\n                  background: \\\\\\\\\\\\\\\"rgba(129, 129, 129, 0.00)\\\\\\\\\\\\\\\",\\\\\\\\n                },\\\\\\\\n                icon: {\\\\\\\\n                  type: \\\\\\\\\\\\\\\"bootstrap_icon\\\\\\\\\\\\\\\",\\\\\\\\n                  variant: \\\\\\\\\\\\\\\"bi-gear-wide-connected\\\\\\\\\\\\\\\",\\\\\\\\n                },\\\\\\\\n                label: \\\\\\\\\\\\\\\"Configure community\\\\\\\\\\\\\\\",\\\\\\\\n              }}\\\\\\\\n            />\\\\\\\\n          </Link>\\\\\\\\n        )}\\\\\\\\n        <Widget\\\\\\\\n          src={\\\\\\\\\\\\\\\"devhub.near/widget/devhub.components.molecule.Button\\\\\\\\\\\\\\\"}\\\\\\\\n          props={{\\\\\\\\n            classNames: { root: \\\\\\\\\\\\\\\"btn-outline-light text-dark shadow-none\\\\\\\\\\\\\\\" },\\\\\\\\n            notRounded: true,\\\\\\\\n            style: {\\\\\\\\n              display: \\\\\\\\\\\\\\\"flex\\\\\\\\\\\\\\\",\\\\\\\\n              padding: \\\\\\\\\\\\\\\"0.75rem 1rem\\\\\\\\\\\\\\\",\\\\\\\\n              alignItems: \\\\\\\\\\\\\\\"center\\\\\\\\\\\\\\\",\\\\\\\\n              gap: \\\\\\\\\\\\\\\"16px\\\\\\\\\\\\\\\",\\\\\\\\n\\\\\\\\n              borderRadius: \\\\\\\\\\\\\\\"4px\\\\\\\\\\\\\\\",\\\\\\\\n              border: \\\\\\\\\\\\\\\"1px solid #00EC97\\\\\\\\\\\\\\\",\\\\\\\\n              background: \\\\\\\\\\\\\\\"rgba(129, 129, 129, 0.00)\\\\\\\\\\\\\\\",\\\\\\\\n            },\\\\\\\\n            label: \\\\\\\\\\\\\\\"Share \\\\\\\\u{2197}\\\\\\\\\\\\\\\",\\\\\\\\n            onClick: onShareClick,\\\\\\\\n            onMouseLeave: () => setLinkCopied(false),\\\\\\\\n            title: \\\\\\\\\\\\\\\"Copy link to clipboard\\\\\\\\\\\\\\\",\\\\\\\\n          }}\\\\\\\\n        />\\\\\\\\n      </div>\\\\\\\\n    </div>\\\\\\\\n    <NavlinksContainer>\\\\\\\\n      <NavUnderline className=\\\\\\\\\\\\\\\"nav gap-4 my-4\\\\\\\\\\\\\\\">\\\\\\\\n        {tabs.map(\\\\\\\\n          ({ title }) =>\\\\\\\\n            title && (\\\\\\\\n              <li className=\\\\\\\\\\\\\\\"nav-item\\\\\\\\\\\\\\\" key={title}>\\\\\\\\n                <Link\\\\\\\\n                  to={href({\\\\\\\\n                    widgetSrc: \\\\\\\\\\\\\\\"devhub.near/widget/app\\\\\\\\\\\\\\\",\\\\\\\\n                    params: {\\\\\\\\n                      page: \\\\\\\\\\\\\\\"community\\\\\\\\\\\\\\\",\\\\\\\\n                      handle: community.handle,\\\\\\\\n                      tab: normalize(title),\\\\\\\\n                    },\\\\\\\\n                  })}\\\\\\\\n                  aria-current={tab === normalize(title) && \\\\\\\\\\\\\\\"page\\\\\\\\\\\\\\\"}\\\\\\\\n                  className={[\\\\\\\\n                    \\\\\\\\\\\\\\\"d-inline-flex gap-2\\\\\\\\\\\\\\\",\\\\\\\\n                    tab === normalize(title) ? \\\\\\\\\\\\\\\"nav-link active\\\\\\\\\\\\\\\" : \\\\\\\\\\\\\\\"nav-link\\\\\\\\\\\\\\\",\\\\\\\\n                  ].join(\\\\\\\\\\\\\\\" \\\\\\\\\\\\\\\")}\\\\\\\\n                >\\\\\\\\n                  <span>{title}</span>\\\\\\\\n                </Link>\\\\\\\\n              </li>\\\\\\\\n            )\\\\\\\\n        )}\\\\\\\\n      </NavUnderline>\\\\\\\\n      {currentTab.title === \\\\\\\\\\\\\\\"Activity\\\\\\\\\\\\\\\" && (\\\\\\\\n        <div\\\\\\\\n          className=\\\\\\\\\\\\\\\"my-4 d-flex align-items-center justify-content-between\\\\\\\\\\\\\\\"\\\\\\\\n          style={{ gap: \\\\\\\\\\\\\\\"2.5rem\\\\\\\\\\\\\\\" }}\\\\\\\\n        >\\\\\\\\n          <div class=\\\\\\\\\\\\\\\"d-flex align-items-center justify-content-between\\\\\\\\\\\\\\\">\\\\\\\\n            <small class=\\\\\\\\\\\\\\\"text-muted\\\\\\\\\\\\\\\">\\\\\\\\n              <span>Required tags:</span>\\\\\\\\n              <Link\\\\\\\\n                to={href({\\\\\\\\n                  widgetSrc: \\\\\\\\\\\\\\\"devhub.near/widget/app\\\\\\\\\\\\\\\",\\\\\\\\n                  params: { page: \\\\\\\\\\\\\\\"feed\\\\\\\\\\\\\\\", tag: community.tag },\\\\\\\\n                })}\\\\\\\\n              >\\\\\\\\n                <Widget\\\\\\\\n                  src={\\\\\\\\\\\\\\\"devhub.near/widget/devhub.components.atom.Tag\\\\\\\\\\\\\\\"}\\\\\\\\n                  props={{\\\\\\\\n                    tag: community.tag,\\\\\\\\n                  }}\\\\\\\\n                />\\\\\\\\n              </Link>\\\\\\\\n            </small>\\\\\\\\n          </div>\\\\\\\\n          {context.accountId && (\\\\\\\\n            <Widget\\\\\\\\n              src={\\\\\\\\n                \\\\\\\\\\\\\\\"devhub.near/widget/devhub.components.molecule.PostControls\\\\\\\\\\\\\\\"\\\\\\\\n              }\\\\\\\\n              props={{\\\\\\\\n                title: \\\\\\\\\\\\\\\"Post\\\\\\\\\\\\\\\",\\\\\\\\n                href: href({\\\\\\\\n                  widgetSrc: \\\\\\\\\\\\\\\"devhub.near/widget/app\\\\\\\\\\\\\\\",\\\\\\\\n                  params: {\\\\\\\\n                    page: \\\\\\\\\\\\\\\"create\\\\\\\\\\\\\\\",\\\\\\\\n                    labels: [community.tag],\\\\\\\\n                  },\\\\\\\\n                }),\\\\\\\\n              }}\\\\\\\\n            />\\\\\\\\n          )}\\\\\\\\n        </div>\\\\\\\\n      )}\\\\\\\\n    </NavlinksContainer>\\\\\\\\n    {currentTab && (\\\\\\\\n      <div className=\\\\\\\\\\\\\\\"d-flex w-100 h-100\\\\\\\\\\\\\\\" key={currentTab.title}>\\\\\\\\n        <Widget\\\\\\\\n          src={currentTab.view}\\\\\\\\n          props={{\\\\\\\\n            ...currentTab.params,\\\\\\\\n            view, // default view for an addon, can come as a prop from a community or from a direct link to page.addon\\\\\\\\n\\\\\\\\n            // below is temporary prop drilling until kanban and github are migrated\\\\\\\\n            permissions,\\\\\\\\n            handle: community.handle,\\\\\\\\n          }}\\\\\\\\n        />\\\\\\\\n      </div>\\\\\\\\n    )}\\\\\\\\n  </div>\\\\\\\\n);\\\\\\\\n\"}, \"devhub.entity.post.PostEditor\": {\"\": \"const { normalize } =\\\\\\\\n  VM.require(\\\\\\\\\\\\\\\"devhub.near/widget/core.lib.stringUtils\\\\\\\\\\\\\\\") || (() => {});\\\\\\\\n\\\\\\\\nconst cleanDescription = (description) => {\\\\\\\\n  return description\\\\\\\\n    ? description.replace(\\\\\\\\n        /###### Requested amount: .+?\\\\\\\\\\\\\\\\n###### Requested sponsor: @[^\\\\\\\\\\\\\\\\s]+\\\\\\\\\\\\\\\\n/g,\\\\\\\\n        \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\"\\\\\\\\n      )\\\\\\\\n    : description;\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst postType = props.postType ?? \\\\\\\\\\\\\\\"Sponsorship\\\\\\\\\\\\\\\";\\\\\\\\nconst parentId = props.parentId ?? null;\\\\\\\\nconst postId = props.postId ?? null;\\\\\\\\nconst mode = props.mode ?? \\\\\\\\\\\\\\\"Create\\\\\\\\\\\\\\\";\\\\\\\\nconst toggleEditor = props.toggleEditor;\\\\\\\\nconst referralLabels = props.referral ? [`referral:${props.referral}`] : [];\\\\\\\\nconst labelStrings = (props.labels ?? []).concat(referralLabels);\\\\\\\\n\\\\\\\\nconst labels = labelStrings.map((s) => {\\\\\\\\n  return { name: s };\\\\\\\\n});\\\\\\\\n\\\\\\\\ninitState({\\\\\\\\n  seekingFunding: props.seekingFunding ?? false,\\\\\\\\n  author_id: context.accountId,\\\\\\\\n  // Should be a list of objects with field \\\\\\\\\\\\\\\"name\\\\\\\\\\\\\\\".\\\\\\\\n  labels,\\\\\\\\n  // Should be a list of labels as strings.\\\\\\\\n  // Both of the label structures should be modified together.\\\\\\\\n  labelStrings: [],\\\\\\\\n  postType,\\\\\\\\n  name: props.name ?? \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\",\\\\\\\\n  description:\\\\\\\\n    (props.postType === \\\\\\\\\\\\\\\"Solution\\\\\\\\\\\\\\\"\\\\\\\\n      ? cleanDescription(props.description)\\\\\\\\n      : props.description) ?? \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\",\\\\\\\\n  amount: props.amount ?? \\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\n  token: props.token ?? \\\\\\\\\\\\\\\"USDT\\\\\\\\\\\\\\\",\\\\\\\\n  supervisor: props.supervisor ?? \\\\\\\\\\\\\\\"neardevdao.near\\\\\\\\\\\\\\\",\\\\\\\\n  githubLink: props.githubLink ?? \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\",\\\\\\\\n  warning: \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\",\\\\\\\\n  draftStateApplied: false,\\\\\\\\n  mentionInput: \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\", // text next to @ tag\\\\\\\\n  mentionsArray: [], // all the mentions in the description\\\\\\\\n});\\\\\\\\n\\\\\\\\n/* INCLUDE: \\\\\\\\\\\\\\\"core/lib/autocomplete\\\\\\\\\\\\\\\" */\\\\\\\\nconst autocompleteEnabled = true;\\\\\\\\n\\\\\\\\nconst AutoComplete = styled.div`\\\\\\\\n  z-index: 5;\\\\\\\\n\\\\\\\\n  > div > div {\\\\\\\\n    padding: calc(var(--padding) / 2);\\\\\\\\n  }\\\\\\\\n`;\\\\\\\\n\\\\\\\\nif (props.transactionHashes) {\\\\\\\\n  const transaction = useCache(\\\\\\\\n    () =>\\\\\\\\n      asyncFetch(\\\\\\\\\\\\\\\"https://rpc.mainnet.near.org\\\\\\\\\\\\\\\", {\\\\\\\\n        method: \\\\\\\\\\\\\\\"POST\\\\\\\\\\\\\\\",\\\\\\\\n        headers: {\\\\\\\\n          \\\\\\\\\\\\\\\"content-type\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"application/json\\\\\\\\\\\\\\\",\\\\\\\\n        },\\\\\\\\n        body: JSON.stringify({\\\\\\\\n          jsonrpc: \\\\\\\\\\\\\\\"2.0\\\\\\\\\\\\\\\",\\\\\\\\n          id: \\\\\\\\\\\\\\\"dontcare\\\\\\\\\\\\\\\",\\\\\\\\n          method: \\\\\\\\\\\\\\\"tx\\\\\\\\\\\\\\\",\\\\\\\\n          params: [props.transactionHashes, context.accountId],\\\\\\\\n        }),\\\\\\\\n      }).then((res) => res),\\\\\\\\n    props.transactionHashes + context.accountId,\\\\\\\\n    { subscribe: false }\\\\\\\\n  );\\\\\\\\n\\\\\\\\n  if (transaction !== null) {\\\\\\\\n    const transaction_method_name =\\\\\\\\n      transaction?.body?.result?.transaction?.actions[0].FunctionCall\\\\\\\\n        .method_name;\\\\\\\\n\\\\\\\\n    const is_edit_or_add_post_transaction =\\\\\\\\n      transaction_method_name == \\\\\\\\\\\\\\\"add_post\\\\\\\\\\\\\\\" ||\\\\\\\\n      transaction_method_name == \\\\\\\\\\\\\\\"edit_post\\\\\\\\\\\\\\\";\\\\\\\\n\\\\\\\\n    if (is_edit_or_add_post_transaction) {\\\\\\\\n      props.onDraftStateChange(null);\\\\\\\\n    }\\\\\\\\n  }\\\\\\\\n}\\\\\\\\n\\\\\\\\nfunction textareaInputHandler(value) {\\\\\\\\n  const words = value.split(/\\\\\\\\\\\\\\\\s+/);\\\\\\\\n  const allMentiones = words\\\\\\\\n    .filter((word) => word.startsWith(\\\\\\\\\\\\\\\"@\\\\\\\\\\\\\\\"))\\\\\\\\n    .map((mention) => mention.slice(1));\\\\\\\\n  const newMentiones = allMentiones.filter(\\\\\\\\n    (item) => !state.mentionsArray.includes(item)\\\\\\\\n  );\\\\\\\\n\\\\\\\\n  State.update((lastKnownState) => ({\\\\\\\\n    ...lastKnownState,\\\\\\\\n    text: value,\\\\\\\\n    showAccountAutocomplete: newMentiones?.length > 0,\\\\\\\\n    mentionsArray: allMentiones,\\\\\\\\n    mentionInput: newMentiones?.[0] ?? \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\",\\\\\\\\n  }));\\\\\\\\n}\\\\\\\\n\\\\\\\\nfunction autoCompleteAccountId(id) {\\\\\\\\n  // to make sure we update the @ at correct index\\\\\\\\n  let currentIndex = 0;\\\\\\\\n  const updatedDescription = state.description.replace(\\\\\\\\n    /(?:^|\\\\\\\\\\\\\\\\s)(@[^\\\\\\\\\\\\\\\\s]*)/g,\\\\\\\\n    (match) => {\\\\\\\\n      if (currentIndex === state.mentionsArray.indexOf(state.mentionInput)) {\\\\\\\\n        currentIndex++;\\\\\\\\n        return ` @${id}`;\\\\\\\\n      } else {\\\\\\\\n        currentIndex++;\\\\\\\\n        return match;\\\\\\\\n      }\\\\\\\\n    }\\\\\\\\n  );\\\\\\\\n  State.update((lastKnownState) => ({\\\\\\\\n    ...lastKnownState,\\\\\\\\n    handler: \\\\\\\\\\\\\\\"autocompleteSelected\\\\\\\\\\\\\\\",\\\\\\\\n    description: updatedDescription,\\\\\\\\n    showAccountAutocomplete: false,\\\\\\\\n  }));\\\\\\\\n}\\\\\\\\n\\\\\\\\n/* END_INCLUDE: \\\\\\\\\\\\\\\"core/lib/autocomplete\\\\\\\\\\\\\\\" */\\\\\\\\n\\\\\\\\nif (!state.draftStateApplied && props.draftState) {\\\\\\\\n  State.update({ ...props.draftState, draftStateApplied: true });\\\\\\\\n}\\\\\\\\n\\\\\\\\nlet fields = {\\\\\\\\n  Comment: [\\\\\\\\\\\\\\\"description\\\\\\\\\\\\\\\"],\\\\\\\\n  Idea: [\\\\\\\\\\\\\\\"name\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"description\\\\\\\\\\\\\\\"],\\\\\\\\n  Solution: [\\\\\\\\\\\\\\\"name\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"description\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"fund_raising\\\\\\\\\\\\\\\"],\\\\\\\\n  Attestation: [\\\\\\\\\\\\\\\"name\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"description\\\\\\\\\\\\\\\"],\\\\\\\\n  Sponsorship: [\\\\\\\\n    \\\\\\\\\\\\\\\"name\\\\\\\\\\\\\\\",\\\\\\\\n    \\\\\\\\\\\\\\\"description\\\\\\\\\\\\\\\",\\\\\\\\n    \\\\\\\\\\\\\\\"amount\\\\\\\\\\\\\\\",\\\\\\\\n    \\\\\\\\\\\\\\\"sponsorship_token\\\\\\\\\\\\\\\",\\\\\\\\n    \\\\\\\\\\\\\\\"supervisor\\\\\\\\\\\\\\\",\\\\\\\\n  ],\\\\\\\\n  Github: [\\\\\\\\\\\\\\\"githubLink\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"name\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"description\\\\\\\\\\\\\\\"],\\\\\\\\n}[postType];\\\\\\\\n\\\\\\\\n// This must be outside onClick, because Near.view returns null at first, and when the view call finished, it returns true/false.\\\\\\\\n// If checking this inside onClick, it will give `null` and we cannot tell the result is true or false.\\\\\\\\nlet grantNotify = Near.view(\\\\\\\\\\\\\\\"social.near\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"is_write_permission_granted\\\\\\\\\\\\\\\", {\\\\\\\\n  predecessor_id: \\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\",\\\\\\\\n  key: context.accountId + \\\\\\\\\\\\\\\"/index/notify\\\\\\\\\\\\\\\",\\\\\\\\n});\\\\\\\\nif (grantNotify === null) {\\\\\\\\n  return;\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst tokenMapping = {\\\\\\\\n  NEAR: \\\\\\\\\\\\\\\"NEAR\\\\\\\\\\\\\\\",\\\\\\\\n  USDT: {\\\\\\\\n    NEP141: {\\\\\\\\n      address: \\\\\\\\\\\\\\\"usdt.tether-token.near\\\\\\\\\\\\\\\",\\\\\\\\n    },\\\\\\\\n  },\\\\\\\\n  USDC: {\\\\\\\\n    NEP141: {\\\\\\\\n      address:\\\\\\\\n        \\\\\\\\\\\\\\\"17208628f84f5d6ad33f0da3bbbeb27ffcb398eac501a31bd6ad2011e36133a1\\\\\\\\\\\\\\\",\\\\\\\\n    },\\\\\\\\n  },\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst onSubmit = () => {\\\\\\\\n  let labels = state.labelStrings;\\\\\\\\n  var body = {\\\\\\\\n    Comment: { description: state.description, comment_version: \\\\\\\\\\\\\\\"V2\\\\\\\\\\\\\\\" },\\\\\\\\n    Idea: {\\\\\\\\n      name: state.name,\\\\\\\\n      description: state.description,\\\\\\\\n      idea_version: \\\\\\\\\\\\\\\"V1\\\\\\\\\\\\\\\",\\\\\\\\n    },\\\\\\\\n    Solution: {\\\\\\\\n      name: state.name,\\\\\\\\n      description: generateDescription(\\\\\\\\n        state.description,\\\\\\\\n        state.amount,\\\\\\\\n        state.token,\\\\\\\\n        state.supervisor,\\\\\\\\n        state.seekingFunding\\\\\\\\n      ),\\\\\\\\n      solution_version: \\\\\\\\\\\\\\\"V1\\\\\\\\\\\\\\\",\\\\\\\\n    },\\\\\\\\n    Attestation: {\\\\\\\\n      name: state.name,\\\\\\\\n      description: state.description,\\\\\\\\n      attestation_version: \\\\\\\\\\\\\\\"V1\\\\\\\\\\\\\\\",\\\\\\\\n    },\\\\\\\\n    Sponsorship: {\\\\\\\\n      name: state.name,\\\\\\\\n      description: state.description,\\\\\\\\n      amount: state.amount,\\\\\\\\n      sponsorship_token: tokenMapping[state.token],\\\\\\\\n      supervisor: state.supervisor,\\\\\\\\n      sponsorship_version: \\\\\\\\\\\\\\\"V1\\\\\\\\\\\\\\\",\\\\\\\\n    },\\\\\\\\n    Github: {\\\\\\\\n      name: state.name,\\\\\\\\n      description: state.description,\\\\\\\\n      github_version: \\\\\\\\\\\\\\\"V0\\\\\\\\\\\\\\\",\\\\\\\\n      github_link: state.githubLink,\\\\\\\\n    },\\\\\\\\n  }[postType];\\\\\\\\n  body[\\\\\\\\\\\\\\\"post_type\\\\\\\\\\\\\\\"] = postType;\\\\\\\\n  if (!context.accountId) {\\\\\\\\n    return;\\\\\\\\n  }\\\\\\\\n  let txn = [];\\\\\\\\n  if (mode == \\\\\\\\\\\\\\\"Create\\\\\\\\\\\\\\\") {\\\\\\\\n    props.onDraftStateChange(\\\\\\\\n      Object.assign({}, state, { parent_post_id: parentId })\\\\\\\\n    );\\\\\\\\n    txn.push({\\\\\\\\n      contractName: \\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\",\\\\\\\\n      methodName: \\\\\\\\\\\\\\\"add_post\\\\\\\\\\\\\\\",\\\\\\\\n      args: {\\\\\\\\n        parent_id: parentId,\\\\\\\\n        labels,\\\\\\\\n        body,\\\\\\\\n      },\\\\\\\\n      gas: Big(10).pow(14),\\\\\\\\n    });\\\\\\\\n  } else if (mode == \\\\\\\\\\\\\\\"Edit\\\\\\\\\\\\\\\") {\\\\\\\\n    props.onDraftStateChange(\\\\\\\\n      Object.assign({}, state, { edit_post_id: postId })\\\\\\\\n    );\\\\\\\\n    txn.push({\\\\\\\\n      contractName: \\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\",\\\\\\\\n      methodName: \\\\\\\\\\\\\\\"edit_post\\\\\\\\\\\\\\\",\\\\\\\\n      args: {\\\\\\\\n        id: postId,\\\\\\\\n        labels,\\\\\\\\n        body,\\\\\\\\n      },\\\\\\\\n      gas: Big(10).pow(14),\\\\\\\\n    });\\\\\\\\n  }\\\\\\\\n  if (mode == \\\\\\\\\\\\\\\"Create\\\\\\\\\\\\\\\" || mode == \\\\\\\\\\\\\\\"Edit\\\\\\\\\\\\\\\") {\\\\\\\\n    if (grantNotify === false) {\\\\\\\\n      txn.unshift({\\\\\\\\n        contractName: \\\\\\\\\\\\\\\"social.near\\\\\\\\\\\\\\\",\\\\\\\\n        methodName: \\\\\\\\\\\\\\\"grant_write_permission\\\\\\\\\\\\\\\",\\\\\\\\n        args: {\\\\\\\\n          predecessor_id: \\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\",\\\\\\\\n          keys: [context.accountId + \\\\\\\\\\\\\\\"/index/notify\\\\\\\\\\\\\\\"],\\\\\\\\n        },\\\\\\\\n        gas: Big(10).pow(14),\\\\\\\\n        deposit: Big(10).pow(22),\\\\\\\\n      });\\\\\\\\n    }\\\\\\\\n    Near.call(txn);\\\\\\\\n  }\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst checkLabel = (label) => {\\\\\\\\n  Near.asyncView(\\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"is_allowed_to_use_labels\\\\\\\\\\\\\\\", {\\\\\\\\n    editor: context.accountId,\\\\\\\\n    labels: [label],\\\\\\\\n  }).then((allowed) => {\\\\\\\\n    if (allowed) {\\\\\\\\n      State.update({ warning: \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\" });\\\\\\\\n    } else {\\\\\\\\n      State.update({\\\\\\\\n        warning:\\\\\\\\n          \\\\\\\\\\\\'The label \\\\\\\\\\\\\\\"\\\\\\\\\\\\' +\\\\\\\\n          label +\\\\\\\\n          \\\\\\\\\\\\'\\\\\\\\\\\\\\\" is protected and can only be added by moderators\\\\\\\\\\\\',\\\\\\\\n      });\\\\\\\\n      return;\\\\\\\\n    }\\\\\\\\n  });\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst setLabels = (labels) => {\\\\\\\\n  labels = labels.map((o) => {\\\\\\\\n    o.name = normalize(o.name);\\\\\\\\n    return o;\\\\\\\\n  });\\\\\\\\n  if (labels.length < state.labels.length) {\\\\\\\\n    let oldLabels = new Set(state.labels.map((label) => label.name));\\\\\\\\n    for (let label of labels) {\\\\\\\\n      oldLabels.delete(label.name);\\\\\\\\n    }\\\\\\\\n    let removed = oldLabels.values().next().value;\\\\\\\\n    Near.asyncView(\\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"is_allowed_to_use_labels\\\\\\\\\\\\\\\", {\\\\\\\\n      editor: context.accountId,\\\\\\\\n      labels: [removed],\\\\\\\\n    }).then((allowed) => {\\\\\\\\n      if (allowed) {\\\\\\\\n        let labelStrings = labels.map(({ name }) => name);\\\\\\\\n        State.update({ labels, labelStrings });\\\\\\\\n      } else {\\\\\\\\n        State.update({\\\\\\\\n          warning:\\\\\\\\n            \\\\\\\\\\\\'The label \\\\\\\\\\\\\\\"\\\\\\\\\\\\' +\\\\\\\\n            removed +\\\\\\\\n            \\\\\\\\\\\\'\\\\\\\\\\\\\\\" is protected and can only be updated by moderators\\\\\\\\\\\\',\\\\\\\\n        });\\\\\\\\n        return;\\\\\\\\n      }\\\\\\\\n    });\\\\\\\\n  } else {\\\\\\\\n    let labelStrings = labels.map((o) => {\\\\\\\\n      return o.name;\\\\\\\\n    });\\\\\\\\n    State.update({ labels, labelStrings });\\\\\\\\n  }\\\\\\\\n};\\\\\\\\nconst existingLabelStrings =\\\\\\\\n  Near.view(\\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"get_all_allowed_labels\\\\\\\\\\\\\\\", {\\\\\\\\n    editor: context.accountId,\\\\\\\\n  }) ?? [];\\\\\\\\nconst existingLabelSet = new Set(existingLabelStrings);\\\\\\\\nconst existingLabels = existingLabelStrings\\\\\\\\n  .filter((it) => it !== \\\\\\\\\\\\\\\"blog\\\\\\\\\\\\\\\") // remove blog label so users cannot publish blogs from feed\\\\\\\\n  .map((s) => {\\\\\\\\n    return { name: s };\\\\\\\\n  });\\\\\\\\n\\\\\\\\nconst labelEditor = (\\\\\\\\n  <div className=\\\\\\\\\\\\\\\"col-lg-12  mb-2\\\\\\\\\\\\\\\">\\\\\\\\n    Labels:\\\\\\\\n    <Typeahead\\\\\\\\n      multiple\\\\\\\\n      labelKey=\\\\\\\\\\\\\\\"name\\\\\\\\\\\\\\\"\\\\\\\\n      onInputChange={checkLabel}\\\\\\\\n      onChange={setLabels}\\\\\\\\n      options={existingLabels}\\\\\\\\n      placeholder=\\\\\\\\\\\\\\\"near.social, widget, NEP, standard, protocol, tool\\\\\\\\\\\\\\\"\\\\\\\\n      selected={state.labels}\\\\\\\\n      positionFixed\\\\\\\\n      allowNew={(results, props) => {\\\\\\\\n        return (\\\\\\\\n          !existingLabelSet.has(props.text) &&\\\\\\\\n          props.text.toLowerCase() !== \\\\\\\\\\\\\\\"blog\\\\\\\\\\\\\\\" && // dont allow adding \\\\\\\\\\\\\\\"Blog\\\\\\\\\\\\\\\"\\\\\\\\n          props.selected.filter((selected) => selected.name === props.text)\\\\\\\\n            .length == 0 &&\\\\\\\\n          Near.view(\\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"is_allowed_to_use_labels\\\\\\\\\\\\\\\", {\\\\\\\\n            editor: context.accountId,\\\\\\\\n            labels: [props.text],\\\\\\\\n          })\\\\\\\\n        );\\\\\\\\n      }}\\\\\\\\n    />\\\\\\\\n  </div>\\\\\\\\n);\\\\\\\\n\\\\\\\\nconst githubLinkDiv = (\\\\\\\\n  <div className=\\\\\\\\\\\\\\\"col-lg-12  mb-2\\\\\\\\\\\\\\\">\\\\\\\\n    Github Issue URL:\\\\\\\\n    <input\\\\\\\\n      type=\\\\\\\\\\\\\\\"text\\\\\\\\\\\\\\\"\\\\\\\\n      value={state.githubLink}\\\\\\\\n      onChange={(event) => State.update({ githubLink: event.target.value })}\\\\\\\\n    />\\\\\\\\n  </div>\\\\\\\\n);\\\\\\\\n\\\\\\\\nconst nameDiv = (\\\\\\\\n  <div className=\\\\\\\\\\\\\\\"col-lg-6  mb-2\\\\\\\\\\\\\\\">\\\\\\\\n    Title:\\\\\\\\n    <input\\\\\\\\n      type=\\\\\\\\\\\\\\\"text\\\\\\\\\\\\\\\"\\\\\\\\n      value={state.name}\\\\\\\\n      onChange={(event) => State.update({ name: event.target.value })}\\\\\\\\n    />\\\\\\\\n  </div>\\\\\\\\n);\\\\\\\\n\\\\\\\\nconst amountDiv = (\\\\\\\\n  <div className=\\\\\\\\\\\\\\\"col-lg-6  mb-2\\\\\\\\\\\\\\\">\\\\\\\\n    Amount:\\\\\\\\n    <input\\\\\\\\n      type=\\\\\\\\\\\\\\\"text\\\\\\\\\\\\\\\"\\\\\\\\n      value={state.amount}\\\\\\\\n      onChange={(event) => State.update({ amount: event.target.value })}\\\\\\\\n    />\\\\\\\\n  </div>\\\\\\\\n);\\\\\\\\n\\\\\\\\nconst tokenDiv = (\\\\\\\\n  <div className=\\\\\\\\\\\\\\\"col-lg-6 mb-2\\\\\\\\\\\\\\\">\\\\\\\\n    Currency\\\\\\\\n    <select\\\\\\\\n      onChange={(event) => State.update({ token: event.target.value })}\\\\\\\\n      class=\\\\\\\\\\\\\\\"form-select\\\\\\\\\\\\\\\"\\\\\\\\n      aria-label=\\\\\\\\\\\\\\\"Select currency\\\\\\\\\\\\\\\"\\\\\\\\n      value={state.token}\\\\\\\\n    >\\\\\\\\n      <option value=\\\\\\\\\\\\\\\"USDT\\\\\\\\\\\\\\\">USDT</option>\\\\\\\\n      <option value=\\\\\\\\\\\\\\\"NEAR\\\\\\\\\\\\\\\">NEAR</option>\\\\\\\\n      <option value=\\\\\\\\\\\\\\\"USDC\\\\\\\\\\\\\\\">USDC</option>\\\\\\\\n    </select>\\\\\\\\n  </div>\\\\\\\\n);\\\\\\\\n\\\\\\\\nconst supervisorDiv = (\\\\\\\\n  <div className=\\\\\\\\\\\\\\\"col-lg-6 mb-2\\\\\\\\\\\\\\\">\\\\\\\\n    Supervisor:\\\\\\\\n    <input\\\\\\\\n      type=\\\\\\\\\\\\\\\"text\\\\\\\\\\\\\\\"\\\\\\\\n      value={state.supervisor}\\\\\\\\n      onChange={(event) => State.update({ supervisor: event.target.value })}\\\\\\\\n    />\\\\\\\\n  </div>\\\\\\\\n);\\\\\\\\n\\\\\\\\nconst callDescriptionDiv = () => {\\\\\\\\n  return (\\\\\\\\n    <div className=\\\\\\\\\\\\\\\"col-lg-12  mb-2\\\\\\\\\\\\\\\">\\\\\\\\n      Description:\\\\\\\\n      <br />\\\\\\\\n      <Widget\\\\\\\\n        src={\\\\\\\\\\\\\\\"devhub.near/widget/devhub.components.molecule.MarkdownEditor\\\\\\\\\\\\\\\"}\\\\\\\\n        props={{\\\\\\\\n          data: { handler: state.handler, content: state.description },\\\\\\\\n          onChange: (content) => {\\\\\\\\n            State.update({ description: content, handler: \\\\\\\\\\\\\\\"update\\\\\\\\\\\\\\\" });\\\\\\\\n            textareaInputHandler(content);\\\\\\\\n          },\\\\\\\\n        }}\\\\\\\\n      />\\\\\\\\n      {autocompleteEnabled && state.showAccountAutocomplete && (\\\\\\\\n        <AutoComplete>\\\\\\\\n          <Widget\\\\\\\\n            src=\\\\\\\\\\\\\\\"devhub.near/widget/devhub.components.molecule.AccountAutocomplete\\\\\\\\\\\\\\\"\\\\\\\\n            props={{\\\\\\\\n              term: state.mentionInput,\\\\\\\\n              onSelect: autoCompleteAccountId,\\\\\\\\n              onClose: () => State.update({ showAccountAutocomplete: false }),\\\\\\\\n            }}\\\\\\\\n          />\\\\\\\\n        </AutoComplete>\\\\\\\\n      )}\\\\\\\\n    </div>\\\\\\\\n  );\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst disclaimer = (\\\\\\\\n  <p>\\\\\\\\n    <i>\\\\\\\\n      * Note, all projects that were granted sponsorships are required to pass\\\\\\\\n      KYC to receive the funding.\\\\\\\\n    </i>\\\\\\\\n  </p>\\\\\\\\n);\\\\\\\\n\\\\\\\\nconst isFundraisingDiv = (\\\\\\\\n  // This is jank with just btns and not radios. But the radios were glitchy af\\\\\\\\n  <>\\\\\\\\n    <div class=\\\\\\\\\\\\\\\"mb-2\\\\\\\\\\\\\\\">\\\\\\\\n      <p class=\\\\\\\\\\\\\\\"fs-6 fw-bold mb-1\\\\\\\\\\\\\\\">\\\\\\\\n        Are you seeking funding for your solution?\\\\\\\\n        <span class=\\\\\\\\\\\\\\\"text-muted fw-normal\\\\\\\\\\\\\\\">(Optional)</span>\\\\\\\\n      </p>\\\\\\\\n      <div class=\\\\\\\\\\\\\\\"form-check form-check-inline\\\\\\\\\\\\\\\">\\\\\\\\n        <label class=\\\\\\\\\\\\\\\"form-check-label\\\\\\\\\\\\\\\">\\\\\\\\n          <button\\\\\\\\n            className=\\\\\\\\\\\\\\\"btn btn-light p-0\\\\\\\\\\\\\\\"\\\\\\\\n            style={{\\\\\\\\n              backgroundColor: state.seekingFunding ? \\\\\\\\\\\\\\\"#0C7283\\\\\\\\\\\\\\\" : \\\\\\\\\\\\\\\"inherit\\\\\\\\\\\\\\\",\\\\\\\\n              color: \\\\\\\\\\\\\\\"#f3f3f3\\\\\\\\\\\\\\\",\\\\\\\\n              border: \\\\\\\\\\\\\\\"solid #D9D9D9\\\\\\\\\\\\\\\",\\\\\\\\n              borderRadius: \\\\\\\\\\\\\\\"100%\\\\\\\\\\\\\\\",\\\\\\\\n              height: \\\\\\\\\\\\\\\"20px\\\\\\\\\\\\\\\",\\\\\\\\n              width: \\\\\\\\\\\\\\\"20px\\\\\\\\\\\\\\\",\\\\\\\\n            }}\\\\\\\\n            onClick={() => State.update({ seekingFunding: true })}\\\\\\\\n          />\\\\\\\\n          Yes\\\\\\\\n        </label>\\\\\\\\n      </div>\\\\\\\\n      <div class=\\\\\\\\\\\\\\\"form-check form-check-inline\\\\\\\\\\\\\\\">\\\\\\\\n        <label class=\\\\\\\\\\\\\\\"form-check-label\\\\\\\\\\\\\\\">\\\\\\\\n          <button\\\\\\\\n            className=\\\\\\\\\\\\\\\"btn btn-light p-0\\\\\\\\\\\\\\\"\\\\\\\\n            style={{\\\\\\\\n              backgroundColor: !state.seekingFunding ? \\\\\\\\\\\\\\\"#0C7283\\\\\\\\\\\\\\\" : \\\\\\\\\\\\\\\"inherit\\\\\\\\\\\\\\\",\\\\\\\\n              color: \\\\\\\\\\\\\\\"#f3f3f3\\\\\\\\\\\\\\\",\\\\\\\\n              border: \\\\\\\\\\\\\\\"solid #D9D9D9\\\\\\\\\\\\\\\",\\\\\\\\n              borderRadius: \\\\\\\\\\\\\\\"100%\\\\\\\\\\\\\\\",\\\\\\\\n              height: \\\\\\\\\\\\\\\"20px\\\\\\\\\\\\\\\",\\\\\\\\n              width: \\\\\\\\\\\\\\\"20px\\\\\\\\\\\\\\\",\\\\\\\\n            }}\\\\\\\\n            onClick={() => State.update({ seekingFunding: false })}\\\\\\\\n          />\\\\\\\\n          No\\\\\\\\n        </label>\\\\\\\\n      </div>\\\\\\\\n    </div>\\\\\\\\n  </>\\\\\\\\n);\\\\\\\\n\\\\\\\\nconst fundraisingDiv = (\\\\\\\\n  <div class=\\\\\\\\\\\\\\\"d-flex flex-column mb-2\\\\\\\\\\\\\\\">\\\\\\\\n    <div className=\\\\\\\\\\\\\\\"col-lg-6 mb-2\\\\\\\\\\\\\\\">\\\\\\\\n      Currency\\\\\\\\n      <select\\\\\\\\n        onChange={(event) => State.update({ token: event.target.value })}\\\\\\\\n        class=\\\\\\\\\\\\\\\"form-select\\\\\\\\\\\\\\\"\\\\\\\\n        aria-label=\\\\\\\\\\\\\\\"Default select example\\\\\\\\\\\\\\\"\\\\\\\\n        value={state.token}\\\\\\\\n      >\\\\\\\\n        <option value=\\\\\\\\\\\\\\\"USDT\\\\\\\\\\\\\\\">USDT</option>\\\\\\\\n        <option value=\\\\\\\\\\\\\\\"NEAR\\\\\\\\\\\\\\\">NEAR</option>\\\\\\\\n        <option value=\\\\\\\\\\\\\\\"USDC\\\\\\\\\\\\\\\">USDC</option>\\\\\\\\n      </select>\\\\\\\\n    </div>\\\\\\\\n    <div className=\\\\\\\\\\\\\\\"col-lg-6 mb-2\\\\\\\\\\\\\\\">\\\\\\\\n      Requested amount\\\\\\\\n      <span class=\\\\\\\\\\\\\\\"text-muted fw-normal\\\\\\\\\\\\\\\">(Numbers Only)</span>\\\\\\\\n      <input\\\\\\\\n        type=\\\\\\\\\\\\\\\"number\\\\\\\\\\\\\\\"\\\\\\\\n        value={parseInt(state.amount) > 0 ? state.amount : \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\"}\\\\\\\\n        min={0}\\\\\\\\n        onChange={(event) => {\\\\\\\\n          State.update({\\\\\\\\n            amount: Number(\\\\\\\\n              event.target.value.toString().replace(/e/g, \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\")\\\\\\\\n            ).toString(),\\\\\\\\n          });\\\\\\\\n        }}\\\\\\\\n      />\\\\\\\\n    </div>\\\\\\\\n    <div className=\\\\\\\\\\\\\\\"col-lg-6 mb-2\\\\\\\\\\\\\\\">\\\\\\\\n      <p class=\\\\\\\\\\\\\\\"mb-1\\\\\\\\\\\\\\\">\\\\\\\\n        Requested sponsor\\\\\\\\n        <span class=\\\\\\\\\\\\\\\"text-muted fw-normal\\\\\\\\\\\\\\\">(Optional)</span>\\\\\\\\n      </p>\\\\\\\\n      <p style={{ fontSize: \\\\\\\\\\\\\\\"13px\\\\\\\\\\\\\\\" }} class=\\\\\\\\\\\\\\\"m-0 text-muted fw-light\\\\\\\\\\\\\\\">\\\\\\\\n        If you are requesting funding from a specific sponsor, please enter\\\\\\\\n        their username.\\\\\\\\n      </p>\\\\\\\\n      <div class=\\\\\\\\\\\\\\\"input-group flex-nowrap\\\\\\\\\\\\\\\">\\\\\\\\n        <span class=\\\\\\\\\\\\\\\"input-group-text\\\\\\\\\\\\\\\" id=\\\\\\\\\\\\\\\"addon-wrapping\\\\\\\\\\\\\\\">\\\\\\\\n          @\\\\\\\\n        </span>\\\\\\\\n        <input\\\\\\\\n          type=\\\\\\\\\\\\\\\"text\\\\\\\\\\\\\\\"\\\\\\\\n          class=\\\\\\\\\\\\\\\"form-control\\\\\\\\\\\\\\\"\\\\\\\\n          placeholder=\\\\\\\\\\\\\\\"Enter username\\\\\\\\\\\\\\\"\\\\\\\\n          value={state.supervisor}\\\\\\\\n          onChange={(event) => State.update({ supervisor: event.target.value })}\\\\\\\\n        />\\\\\\\\n      </div>\\\\\\\\n    </div>\\\\\\\\n  </div>\\\\\\\\n);\\\\\\\\n\\\\\\\\nfunction generateDescription(text, amount, token, supervisor, seekingFunding) {\\\\\\\\n  const fundingText =\\\\\\\\n    amount > 0 && token ? `###### Requested amount: ${amount} ${token}\\\\\\\\\\\\\\\\n` : \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\";\\\\\\\\n  const supervisorText = supervisor\\\\\\\\n    ? `###### Requested sponsor: @${supervisor}\\\\\\\\\\\\\\\\n`\\\\\\\\n    : \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\";\\\\\\\\n  return seekingFunding ? `${fundingText}${supervisorText}${text}` : text;\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst [tab, setTab] = useState(\\\\\\\\\\\\\\\"editor\\\\\\\\\\\\\\\");\\\\\\\\n\\\\\\\\nconst renamedPostType = postType == \\\\\\\\\\\\\\\"Submission\\\\\\\\\\\\\\\" ? \\\\\\\\\\\\\\\"Solution\\\\\\\\\\\\\\\" : postType;\\\\\\\\n// Below there is a weird code with fields.includes(\\\\\\\\\\\\\\\"githubLink\\\\\\\\\\\\\\\") ternary operator.\\\\\\\\n// This is to hack around rendering bug of near.social.\\\\\\\\nreturn (\\\\\\\\n  <div className=\\\\\\\\\\\\\\\"card\\\\\\\\\\\\\\\">\\\\\\\\n    <div className=\\\\\\\\\\\\\\\"card-header\\\\\\\\\\\\\\\">\\\\\\\\n      <div>\\\\\\\\n        <ul class=\\\\\\\\\\\\\\\"nav nav-tabs\\\\\\\\\\\\\\\">\\\\\\\\n          <li class=\\\\\\\\\\\\\\\"nav-item\\\\\\\\\\\\\\\">\\\\\\\\n            <button\\\\\\\\n              class={`nav-link ${tab === \\\\\\\\\\\\\\\"editor\\\\\\\\\\\\\\\" ? \\\\\\\\\\\\\\\"active\\\\\\\\\\\\\\\" : \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\"}`}\\\\\\\\n              onClick={() => setTab(\\\\\\\\\\\\\\\"editor\\\\\\\\\\\\\\\")}\\\\\\\\n            >\\\\\\\\n              Editor\\\\\\\\n            </button>\\\\\\\\n          </li>\\\\\\\\n          <li class=\\\\\\\\\\\\\\\"nav-item\\\\\\\\\\\\\\\">\\\\\\\\n            <button\\\\\\\\n              class={`nav-link ${tab === \\\\\\\\\\\\\\\"preview\\\\\\\\\\\\\\\" ? \\\\\\\\\\\\\\\"active\\\\\\\\\\\\\\\" : \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\"}`}\\\\\\\\n              onClick={() => setTab(\\\\\\\\\\\\\\\"preview\\\\\\\\\\\\\\\")}\\\\\\\\n            >\\\\\\\\n              Preview\\\\\\\\n            </button>\\\\\\\\n          </li>\\\\\\\\n        </ul>\\\\\\\\n      </div>\\\\\\\\n      {tab === \\\\\\\\\\\\\\\"editor\\\\\\\\\\\\\\\" && (\\\\\\\\n        <div className=\\\\\\\\\\\\\\\"my-3\\\\\\\\\\\\\\\">\\\\\\\\n          {mode} {renamedPostType}\\\\\\\\n        </div>\\\\\\\\n      )}\\\\\\\\n      {tab === \\\\\\\\\\\\\\\"preview\\\\\\\\\\\\\\\" && <div className=\\\\\\\\\\\\\\\"my-3\\\\\\\\\\\\\\\">Post Preview</div>}\\\\\\\\n    </div>\\\\\\\\n\\\\\\\\n    {tab === \\\\\\\\\\\\\\\"editor\\\\\\\\\\\\\\\" && (\\\\\\\\n      <div class=\\\\\\\\\\\\\\\"card-body\\\\\\\\\\\\\\\">\\\\\\\\n        {state.warning && (\\\\\\\\n          <div\\\\\\\\n            class=\\\\\\\\\\\\\\\"alert alert-warning alert-dismissible fade show\\\\\\\\\\\\\\\"\\\\\\\\n            role=\\\\\\\\\\\\\\\"alert\\\\\\\\\\\\\\\"\\\\\\\\n          >\\\\\\\\n            {state.warning}\\\\\\\\n            <button\\\\\\\\n              type=\\\\\\\\\\\\\\\"button\\\\\\\\\\\\\\\"\\\\\\\\n              class=\\\\\\\\\\\\\\\"btn-close\\\\\\\\\\\\\\\"\\\\\\\\n              data-bs-dismiss=\\\\\\\\\\\\\\\"alert\\\\\\\\\\\\\\\"\\\\\\\\n              aria-label=\\\\\\\\\\\\\\\"Close\\\\\\\\\\\\\\\"\\\\\\\\n              onClick={() => State.update({ warning: \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\" })}\\\\\\\\n            ></button>\\\\\\\\n          </div>\\\\\\\\n        )}\\\\\\\\n        {/* This statement around the githubLinkDiv creates a weird render bug\\\\\\\\n      where the title renders extra on state change. */}\\\\\\\\n        {fields.includes(\\\\\\\\\\\\\\\"githubLink\\\\\\\\\\\\\\\") ? (\\\\\\\\n          <div className=\\\\\\\\\\\\\\\"row\\\\\\\\\\\\\\\">\\\\\\\\n            {fields.includes(\\\\\\\\\\\\\\\"githubLink\\\\\\\\\\\\\\\") && githubLinkDiv}\\\\\\\\n            {labelEditor}\\\\\\\\n            {fields.includes(\\\\\\\\\\\\\\\"name\\\\\\\\\\\\\\\") && nameDiv}\\\\\\\\n            {fields.includes(\\\\\\\\\\\\\\\"description\\\\\\\\\\\\\\\") && callDescriptionDiv()}\\\\\\\\n          </div>\\\\\\\\n        ) : (\\\\\\\\n          <div className=\\\\\\\\\\\\\\\"row\\\\\\\\\\\\\\\">\\\\\\\\n            {labelEditor}\\\\\\\\n            {fields.includes(\\\\\\\\\\\\\\\"name\\\\\\\\\\\\\\\") && nameDiv}\\\\\\\\n            {fields.includes(\\\\\\\\\\\\\\\"amount\\\\\\\\\\\\\\\") && amountDiv}\\\\\\\\n            {fields.includes(\\\\\\\\\\\\\\\"sponsorship_token\\\\\\\\\\\\\\\") && tokenDiv}\\\\\\\\n            {fields.includes(\\\\\\\\\\\\\\\"supervisor\\\\\\\\\\\\\\\") && supervisorDiv}\\\\\\\\n            {fields.includes(\\\\\\\\\\\\\\\"description\\\\\\\\\\\\\\\") && callDescriptionDiv()}\\\\\\\\n            {fields.includes(\\\\\\\\\\\\\\\"fund_raising\\\\\\\\\\\\\\\") && isFundraisingDiv}\\\\\\\\n            {state.seekingFunding &&\\\\\\\\n              fields.includes(\\\\\\\\\\\\\\\"fund_raising\\\\\\\\\\\\\\\") &&\\\\\\\\n              fundraisingDiv}\\\\\\\\n          </div>\\\\\\\\n        )}\\\\\\\\n        <button\\\\\\\\n          style={{\\\\\\\\n            width: \\\\\\\\\\\\\\\"7rem\\\\\\\\\\\\\\\",\\\\\\\\n            backgroundColor: \\\\\\\\\\\\\\\"#0C7283\\\\\\\\\\\\\\\",\\\\\\\\n            color: \\\\\\\\\\\\\\\"#f3f3f3\\\\\\\\\\\\\\\",\\\\\\\\n          }}\\\\\\\\n          disabled={state.seekingFunding && (!state.amount || state.amount < 1)}\\\\\\\\n          className=\\\\\\\\\\\\\\\"btn btn-light mb-2 p-3\\\\\\\\\\\\\\\"\\\\\\\\n          onClick={onSubmit}\\\\\\\\n        >\\\\\\\\n          Submit\\\\\\\\n        </button>\\\\\\\\n        <button\\\\\\\\n          style={{\\\\\\\\n            width: \\\\\\\\\\\\\\\"7rem\\\\\\\\\\\\\\\",\\\\\\\\n            backgroundColor: \\\\\\\\\\\\\\\"#fff\\\\\\\\\\\\\\\",\\\\\\\\n            color: \\\\\\\\\\\\\\\"#000\\\\\\\\\\\\\\\",\\\\\\\\n          }}\\\\\\\\n          className=\\\\\\\\\\\\\\\"btn btn-light mb-2 p-3\\\\\\\\\\\\\\\"\\\\\\\\n          onClick={toggleEditor}\\\\\\\\n        >\\\\\\\\n          Cancel\\\\\\\\n        </button>\\\\\\\\n        {disclaimer}\\\\\\\\n      </div>\\\\\\\\n    )}\\\\\\\\n    {tab === \\\\\\\\\\\\\\\"preview\\\\\\\\\\\\\\\" && (\\\\\\\\n      <div class=\\\\\\\\\\\\\\\"card-body\\\\\\\\\\\\\\\">\\\\\\\\n        <Widget\\\\\\\\n          src=\\\\\\\\\\\\\\\"devhub.near/widget/devhub.entity.post.Post\\\\\\\\\\\\\\\"\\\\\\\\n          props={{\\\\\\\\n            isPreview: true,\\\\\\\\n            id: 0, // irrelevant\\\\\\\\n            post: {\\\\\\\\n              author_id: state.author_id,\\\\\\\\n              likes: [],\\\\\\\\n              snapshot: {\\\\\\\\n                editor_id: state.editor_id,\\\\\\\\n                labels: state.labelStrings,\\\\\\\\n                post_type: postType,\\\\\\\\n                name: state.name,\\\\\\\\n                description:\\\\\\\\n                  postType == \\\\\\\\\\\\\\\"Solution\\\\\\\\\\\\\\\"\\\\\\\\n                    ? generateDescription(\\\\\\\\n                        state.description,\\\\\\\\n                        state.amount,\\\\\\\\n                        state.token,\\\\\\\\n                        state.supervisor,\\\\\\\\n                        state.seekingFunding\\\\\\\\n                      )\\\\\\\\n                    : state.description,\\\\\\\\n                amount: state.amount,\\\\\\\\n                sponsorship_token: state.token,\\\\\\\\n                supervisor: state.supervisor,\\\\\\\\n                github_link: state.githubLink,\\\\\\\\n              },\\\\\\\\n            },\\\\\\\\n          }}\\\\\\\\n        />\\\\\\\\n      </div>\\\\\\\\n    )}\\\\\\\\n  </div>\\\\\\\\n);\\\\\\\\n\"}, \"devhub.components.island.support\": {\"\": \"const Items = [\\\\\\\\n  {\\\\\\\\n    heading: (\\\\\\\\n      <>\\\\\\\\n        Developer\\\\\\\\n        <br />\\\\\\\\n        Resources\\\\\\\\n      </>\\\\\\\\n    ),\\\\\\\\n    description: \\\\\\\\\\\\\\\"Learn the fundamentals of NEAR and build with confidence\\\\\\\\\\\\\\\",\\\\\\\\n    cta: {\\\\\\\\n      href: \\\\\\\\\\\\\\\"https://docs.near.org\\\\\\\\\\\\\\\",\\\\\\\\n      title: \\\\\\\\\\\\\\\"Read \\\\\\\\u{2197}\\\\\\\\\\\\\\\",\\\\\\\\n    },\\\\\\\\n  },\\\\\\\\n  {\\\\\\\\n    heading: <>Office Hours</>,\\\\\\\\n    description: (\\\\\\\\n      <>\\\\\\\\n        Need some help?\\\\\\\\n        <br /> DevRel contributors are available to answer your technical\\\\\\\\n        questions\\\\\\\\n      </>\\\\\\\\n    ),\\\\\\\\n    cta: {\\\\\\\\n      href: \\\\\\\\\\\\\\\"/devhub.near/widget/app?page=community&handle=devrel&tab=office-hours-support\\\\\\\\\\\\\\\",\\\\\\\\n      title: \\\\\\\\\\\\\\\"Join \\\\\\\\u{2197}\\\\\\\\\\\\\\\",\\\\\\\\n    },\\\\\\\\n  },\\\\\\\\n  {\\\\\\\\n    heading: <>Get Funding</>,\\\\\\\\n    description:\\\\\\\\n      \\\\\\\\\\\\\\\"Explore funding opportunities from DevHub to fuel your vision\\\\\\\\\\\\\\\",\\\\\\\\n    cta: {\\\\\\\\n      href: \\\\\\\\\\\\\\\"/devhub.near/widget/app?page=community&handle=developer-dao&tab=funding\\\\\\\\\\\\\\\",\\\\\\\\n      title: \\\\\\\\\\\\\\\"Learn more \\\\\\\\u{2197}\\\\\\\\\\\\\\\",\\\\\\\\n    },\\\\\\\\n  },\\\\\\\\n];\\\\\\\\n\\\\\\\\nconst Circle = styled.div`\\\\\\\\n  display: flex;\\\\\\\\n  width: 18.75rem;\\\\\\\\n  height: 18.75rem;\\\\\\\\n  padding: 2.25rem;\\\\\\\\n  flex-direction: column;\\\\\\\\n  justify-content: center;\\\\\\\\n  align-items: center;\\\\\\\\n  gap: 1rem;\\\\\\\\n  flex-shrink: 0;\\\\\\\\n\\\\\\\\n  border-radius: 22.5rem;\\\\\\\\n  border: 1px solid #00ec97;\\\\\\\\n  background: #f4f4f4;\\\\\\\\n\\\\\\\\n  h3 {\\\\\\\\n    color: #101820;\\\\\\\\n    text-align: center;\\\\\\\\n    font-size: 1.75rem;\\\\\\\\n    font-style: normal;\\\\\\\\n    font-weight: 700;\\\\\\\\n    line-height: 100%; /* 36px */\\\\\\\\n  }\\\\\\\\n\\\\\\\\n  p {\\\\\\\\n    color: #101820;\\\\\\\\n    text-align: center;\\\\\\\\n    font-size: 1.125rem;\\\\\\\\n    font-style: normal;\\\\\\\\n    font-weight: 400;\\\\\\\\n    line-height: 120%; /* 28.8px */\\\\\\\\n    letter-spacing: -0.72px;\\\\\\\\n  }\\\\\\\\n\\\\\\\\n  a {\\\\\\\\n    color: #555555;\\\\\\\\n    font-size: 1.125rem;\\\\\\\\n    font-style: normal;\\\\\\\\n    font-weight: 700;\\\\\\\\n    line-height: 120%; /* 28.8px */\\\\\\\\n  }\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst Container = styled.div`\\\\\\\\n  padding: 3rem;\\\\\\\\n  padding-top: 0;\\\\\\\\n  margin-top: 1.5rem;\\\\\\\\n\\\\\\\\n  @media screen and (max-width: 786px) {\\\\\\\\n    padding: 1.5rem;\\\\\\\\n    padding-top: 0;\\\\\\\\n  }\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst ItemsContainer = styled.div`\\\\\\\\n  display: flex;\\\\\\\\n  flex-direction: row;\\\\\\\\n  justify-content: center;\\\\\\\\n  align-items: center;\\\\\\\\n  width: 100%;\\\\\\\\n\\\\\\\\n  flex-wrap: wrap;\\\\\\\\n  gap: 3rem;\\\\\\\\n\\\\\\\\n  @media screen and (max-width: 768px) {\\\\\\\\n    flex-direction: column;\\\\\\\\n    gap: 1rem;\\\\\\\\n  }\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst Content = (\\\\\\\\n  <Container>\\\\\\\\n    <ItemsContainer>\\\\\\\\n      {Items.map((it) => (\\\\\\\\n        <Circle key={Math.random()}>\\\\\\\\n          <h3>{it.heading}</h3>\\\\\\\\n          <p>{it.description}</p>\\\\\\\\n          <a href={it.cta.href}>{it.cta.title}</a>\\\\\\\\n        </Circle>\\\\\\\\n      ))}\\\\\\\\n    </ItemsContainer>\\\\\\\\n  </Container>\\\\\\\\n);\\\\\\\\n\\\\\\\\nreturn (\\\\\\\\n  <Widget\\\\\\\\n    src=\\\\\\\\\\\\\\\"devhub.near/widget/devhub.components.island.home-section\\\\\\\\\\\\\\\"\\\\\\\\n    props={{\\\\\\\\n      title: \\\\\\\\\\\\\\\"/get support\\\\\\\\\\\\\\\",\\\\\\\\n      children: Content,\\\\\\\\n      background: true,\\\\\\\\n    }}\\\\\\\\n  />\\\\\\\\n);\\\\\\\\n\"}, \"devhub.components.island.participate\": {\"\": \"const { href } = VM.require(\\\\\\\\\\\\\\\"devhub.near/widget/core.lib.url\\\\\\\\\\\\\\\");\\\\\\\\n\\\\\\\\nhref || (href = () => {});\\\\\\\\n\\\\\\\\nconst Container = styled.div`\\\\\\\\n  margin-top: 2.25rem;\\\\\\\\n\\\\\\\\n  display: flex;\\\\\\\\n  flex-direction: row;\\\\\\\\n  justify-content: space-between;\\\\\\\\n  width: 100%;\\\\\\\\n\\\\\\\\n  @media screen and (max-width: 768px) {\\\\\\\\n    flex-direction: column;\\\\\\\\n    margin-top: 0;\\\\\\\\n  }\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst LinkItem = styled.a`\\\\\\\\n  color: #00ec97;\\\\\\\\n  font-size: 1.25rem;\\\\\\\\n  font-style: normal;\\\\\\\\n  font-weight: 400;\\\\\\\\n  line-height: 120%; /* 28.8px */\\\\\\\\n\\\\\\\\n  display: flex;\\\\\\\\n  align-items: center;\\\\\\\\n\\\\\\\\n  &:hover {\\\\\\\\n    text-decoration: none;\\\\\\\\n    color: #096d50;\\\\\\\\n  }\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst Links = [\\\\\\\\n  {\\\\\\\\n    links: [\\\\\\\\n      {\\\\\\\\n        title: \\\\\\\\\\\\\\\"Ideate on DevHub\\\\\\\\\\\\\\\",\\\\\\\\n        href: \\\\\\\\\\\\\\\"/devhub.near/widget/app?page=blog&id=2029\\\\\\\\\\\\\\\",\\\\\\\\n        count: 1,\\\\\\\\n      },\\\\\\\\n      {\\\\\\\\n        title: \\\\\\\\\\\\\\\"Post a Proposal\\\\\\\\\\\\\\\",\\\\\\\\n        href: \\\\\\\\\\\\\\\"/devhub.near/widget/app?page=blog&id=2035\\\\\\\\\\\\\\\",\\\\\\\\n        count: 2,\\\\\\\\n      },\\\\\\\\n      {\\\\\\\\n        title: \\\\\\\\\\\\\\\"Host an Event\\\\\\\\\\\\\\\",\\\\\\\\n        href: \\\\\\\\\\\\\\\"/devhub.near/widget/app?page=community&handle=hacks&tab=wiki-202\\\\\\\\\\\\\\\",\\\\\\\\n        count: 3,\\\\\\\\n      },\\\\\\\\n    ],\\\\\\\\n  },\\\\\\\\n  {\\\\\\\\n    links: [\\\\\\\\n      {\\\\\\\\n        title: \\\\\\\\\\\\\\\"Improve NEAR Docs\\\\\\\\\\\\\\\",\\\\\\\\n        href: \\\\\\\\\\\\\\\"https://github.com/near/docs\\\\\\\\\\\\\\\",\\\\\\\\n        count: 4,\\\\\\\\n      },\\\\\\\\n      {\\\\\\\\n        title: \\\\\\\\\\\\\\\"Join the Fellowship\\\\\\\\\\\\\\\",\\\\\\\\n        href: \\\\\\\\\\\\\\\"/devhub.near/widget/app?page=community&handle=fellowship&tab=wiki-201\\\\\\\\\\\\\\\",\\\\\\\\n        count: 5,\\\\\\\\n      },\\\\\\\\n      {\\\\\\\\n        title: \\\\\\\\\\\\\\\"Join NEAR Campus\\\\\\\\\\\\\\\",\\\\\\\\n        href: \\\\\\\\\\\\\\\"/devhub.near/widget/app?page=community&handle=near-campus\\\\\\\\\\\\\\\",\\\\\\\\n        count: 6,\\\\\\\\n      },\\\\\\\\n    ],\\\\\\\\n  },\\\\\\\\n  {\\\\\\\\n    links: [\\\\\\\\n      {\\\\\\\\n        title: \\\\\\\\\\\\\\\"Dive into Hackbox\\\\\\\\\\\\\\\",\\\\\\\\n        href: \\\\\\\\\\\\\\\"/hackbox.near/widget/home\\\\\\\\\\\\\\\",\\\\\\\\n        count: 7,\\\\\\\\n      },\\\\\\\\n    ],\\\\\\\\n  },\\\\\\\\n];\\\\\\\\n\\\\\\\\nconst CTA = styled.a`\\\\\\\\n  display: flex;\\\\\\\\n  padding: 0.875rem 1rem;\\\\\\\\n  align-items: center;\\\\\\\\n  gap: 0.5rem;\\\\\\\\n\\\\\\\\n  border-radius: 1rem;\\\\\\\\n  background: #00ec97;\\\\\\\\n\\\\\\\\n  color: #f4f4f4 !important;\\\\\\\\n  font-size: 1.5rem;\\\\\\\\n  font-style: normal;\\\\\\\\n  font-weight: 700;\\\\\\\\n  line-height: 120%; /* 28.8px */\\\\\\\\n  letter-spacing: -0.03rem;\\\\\\\\n\\\\\\\\n  width: max-content;\\\\\\\\n  margin-top: 1.5rem;\\\\\\\\n\\\\\\\\n  &:hover {\\\\\\\\n    background: #555555;\\\\\\\\n    text-decoration: none !important;\\\\\\\\n  }\\\\\\\\n\\\\\\\\n  @media screen and (max-width: 768px) {\\\\\\\\n    color: #f4f4f4 !important;\\\\\\\\n    font-size: 20px;\\\\\\\\n    font-style: normal;\\\\\\\\n    font-weight: 700;\\\\\\\\n    line-height: 120%; /* 24px */\\\\\\\\n\\\\\\\\n    display: flex;\\\\\\\\n    padding: 14px 16px;\\\\\\\\n    align-items: center;\\\\\\\\n    gap: 8px;\\\\\\\\n\\\\\\\\n    border-radius: 16px;\\\\\\\\n    background: #555555;\\\\\\\\n\\\\\\\\n    &:hover {\\\\\\\\n      //background: #555555;\\\\\\\\n      text-decoration: none;\\\\\\\\n    }\\\\\\\\n  }\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst SectionPadding = styled.div`\\\\\\\\n  padding: 3rem;\\\\\\\\n  padding-top: 0;\\\\\\\\n\\\\\\\\n  display: flex;\\\\\\\\n  flex-direction: column;\\\\\\\\n\\\\\\\\n  @media screen and (max-width: 768px) {\\\\\\\\n    padding: 1rem;\\\\\\\\n    padding-top: 0;\\\\\\\\n  }\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst LinksContainer = styled.div`\\\\\\\\n  width: 30%;\\\\\\\\n\\\\\\\\n  @media screen and (max-width: 768px) {\\\\\\\\n    width: 100%;\\\\\\\\n    margin-bottom: 1rem;\\\\\\\\n  }\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst Content = (\\\\\\\\n  <SectionPadding>\\\\\\\\n    <Container>\\\\\\\\n      {Links.map((it) => (\\\\\\\\n        <LinksContainer key={Math.random()}>\\\\\\\\n          <div className=\\\\\\\\\\\\\\\"d-flex flex-column gap-3 gap-md-2\\\\\\\\\\\\\\\">\\\\\\\\n            {it.links.map((link) => (\\\\\\\\n              <div className=\\\\\\\\\\\\\\\"d-flex flex-row\\\\\\\\\\\\\\\">\\\\\\\\n                <span\\\\\\\\n                  style={{\\\\\\\\n                    color: \\\\\\\\\\\\\\\"#555555\\\\\\\\\\\\\\\",\\\\\\\\n                    border: \\\\\\\\\\\\\\\"2px #555555 solid\\\\\\\\\\\\\\\",\\\\\\\\n                    fontSize: 12,\\\\\\\\n                    padding: 4,\\\\\\\\n                    width: 22,\\\\\\\\n                    height: 22,\\\\\\\\n                  }}\\\\\\\\n                  className=\\\\\\\\\\\\\\\"rounded-circle d-flex align-items-center justify-content-center me-1\\\\\\\\\\\\\\\"\\\\\\\\n                >\\\\\\\\n                  {link.count}\\\\\\\\n                </span>{\\\\\\\\\\\\\\\" \\\\\\\\\\\\\\\"}\\\\\\\\n                <LinkItem href={link.href} target=\\\\\\\\\\\\\\\"no_blank\\\\\\\\\\\\\\\">\\\\\\\\n                  {link.title}\\\\\\\\n                </LinkItem>\\\\\\\\n              </div>\\\\\\\\n            ))}\\\\\\\\n          </div>\\\\\\\\n        </LinksContainer>\\\\\\\\n      ))}\\\\\\\\n    </Container>\\\\\\\\n\\\\\\\\n    <Link\\\\\\\\n      to={href({\\\\\\\\n        widgetSrc: \\\\\\\\\\\\\\\"devhub.near/widget/app\\\\\\\\\\\\\\\",\\\\\\\\n        params: { page: \\\\\\\\\\\\\\\"contribute\\\\\\\\\\\\\\\" },\\\\\\\\n      })}\\\\\\\\n      style={{ textDecoration: \\\\\\\\\\\\\\\"none\\\\\\\\\\\\\\\" }}\\\\\\\\n    >\\\\\\\\n      <CTA>Learn more \\\\\\\\u{2192}</CTA>\\\\\\\\n    </Link>\\\\\\\\n  </SectionPadding>\\\\\\\\n);\\\\\\\\n\\\\\\\\nreturn (\\\\\\\\n  <Widget\\\\\\\\n    src=\\\\\\\\\\\\\\\"devhub.near/widget/devhub.components.island.home-section\\\\\\\\\\\\\\\"\\\\\\\\n    props={{\\\\\\\\n      title: \\\\\\\\\\\\\\\"/participate\\\\\\\\\\\\\\\",\\\\\\\\n      titleColor: \\\\\\\\\\\\\\\"#555555\\\\\\\\\\\\\\\",\\\\\\\\n      description:\\\\\\\\n        \\\\\\\\\\\\\\\"There are many ways to start your contribution journey. You can:\\\\\\\\\\\\\\\",\\\\\\\\n      children: Content,\\\\\\\\n    }}\\\\\\\\n  />\\\\\\\\n);\\\\\\\\n\"}}}}}"
      }
    ],
    "actions_agg": {
      "deposit": 0
    },
    "outcomes": {
      "status": true
    },
    "outcomes_agg": {
      "transaction_fee": 2.4561024574112e+21
    }
  },
  {
    "id": "1997111516",
    "receipt_id": "25Hn6Mvc64YRgfb5Ny3daYy25fMxRnZUWeSEGyYf1sR5",
    "predecessor_account_id": "system",
    "receiver_account_id": "devhub.near",
    "receipt_kind": "ACTION",
    "receipt_block": {
      "block_hash": "FPG24d6C7MkW6RmfYaThbBhbEHydLKG3138Tzxe64DS5",
      "block_height": 109507107,
      "block_timestamp": 1704304556792474000
    },
    "receipt_outcome": {
      "gas_burnt": 223182562500,
      "tokens_burnt": 0,
      "executor_account_id": "devhub.near",
      "status": true
    },
    "transaction_hash": "5u3d3Z58WKnHaLsyfXuNt1YdfEsow1A5UzgK1XYG2nLX",
    "included_in_block_hash": "2kE3X2TYJGbDgev7cZRjMuP6NtW4AnBLxQNy1R2NUr1V",
    "block_timestamp": "1704304554948027683",
    "block": {
      "block_height": 109507105
    },
    "receipt_conversion_tokens_burnt": "257325447406600000000",
    "actions": [
      {
        "action": "TRANSFER",
        "method": null,
        "deposit": 1.869216626142119e+23,
        "fee": 0,
        "args": null
      }
    ],
    "actions_agg": {
      "deposit": 0
    },
    "outcomes": {
      "status": true
    },
    "outcomes_agg": {
      "transaction_fee": 2.4561024574112e+21
    }
  },
  {
    "id": "2006512037",
    "receipt_id": "27BNHZiVGjZ9LC7HLtPWWyfZn3i3TLM1zThM4jV7pcmZ",
    "predecessor_account_id": "devhub.near",
    "receiver_account_id": "social.near",
    "receipt_kind": "ACTION",
    "receipt_block": {
      "block_hash": "3QAg8qMf8434qk5piEUM8atrFrxs46KwgxJZaKo4Nbyz",
      "block_height": 109579771,
      "block_timestamp": 1704381670258504700
    },
    "receipt_outcome": {
      "gas_burnt": 22615342980045,
      "tokens_burnt": 2.2615342980045e+21,
      "executor_account_id": "social.near",
      "status": true
    },
    "transaction_hash": "6aFfv3RpTi7YPGpcErP1BPG8odb7AhFXJxnEH5Yuqtrv",
    "included_in_block_hash": "7t6gXoWhcFb1YdjZfNSD46VQQHTov4UQchmxJRjsr64b",
    "block_timestamp": "1704381669208666957",
    "block": {
      "block_height": 109579770
    },
    "receipt_conversion_tokens_burnt": "257488223401800000000",
    "actions": [
      {
        "action": "FUNCTION_CALL",
        "method": "set",
        "deposit": 0,
        "fee": 2.2615342980045e+21,
        "args": "{\"data\": {\"devhub.near\": {\"widget\": {\"app\": {\"\": \"/**\\\\\\\\n * This is the main entry point for the DevHub application.\\\\\\\\n * Page route gets passed in through params, along with all other page props.\\\\\\\\n */\\\\\\\\n\\\\\\\\nconst { onDraftStateChange } = VM.require(\\\\\\\\n  \\\\\\\\\\\\\\\"devhub.near/widget/devhub.entity.post.draft\\\\\\\\\\\\\\\"\\\\\\\\n);\\\\\\\\n\\\\\\\\nconst { page, ...passProps } = props;\\\\\\\\n\\\\\\\\n// Import our modules\\\\\\\\nconst { AppLayout } = VM.require(\\\\\\\\n  \\\\\\\\\\\\\\\"devhub.near/widget/devhub.components.templates.AppLayout\\\\\\\\\\\\\\\"\\\\\\\\n);\\\\\\\\n\\\\\\\\nif (!AppLayout) {\\\\\\\\n  return <p>Loading modules...</p>;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// CSS styles to be used across the app.\\\\\\\\n// Define fonts here, as well as any other global styles.\\\\\\\\nconst Theme = styled.div`\\\\\\\\n  a {\\\\\\\\n    color: inherit;\\\\\\\\n  }\\\\\\\\n\\\\\\\\n  .attractable {\\\\\\\\n    box-shadow: 0 0.125rem 0.25rem rgba(0, 0, 0, 0.075) !important;\\\\\\\\n    transition: box-shadow 0.6s;\\\\\\\\n\\\\\\\\n    &:hover {\\\\\\\\n      box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.15) !important;\\\\\\\\n    }\\\\\\\\n  }\\\\\\\\n`;\\\\\\\\n\\\\\\\\nif (!page) {\\\\\\\\n  // If no page is specified, we default to the feed page TEMP\\\\\\\\n  page = \\\\\\\\\\\\\\\"home\\\\\\\\\\\\\\\";\\\\\\\\n}\\\\\\\\n\\\\\\\\n// This is our navigation, rendering the page based on the page parameter\\\\\\\\nfunction Page() {\\\\\\\\n  const routes = page.split(\\\\\\\\\\\\\\\".\\\\\\\\\\\\\\\");\\\\\\\\n  switch (routes[0]) {\\\\\\\\n    case \\\\\\\\\\\\\\\"home\\\\\\\\\\\\\\\": {\\\\\\\\n      return (\\\\\\\\n        <Widget\\\\\\\\n          src=\\\\\\\\\\\\\\\"devhub.near/widget/devhub.page.home\\\\\\\\\\\\\\\"\\\\\\\\n          props={passProps}\\\\\\\\n        />\\\\\\\\n      );\\\\\\\\n    }\\\\\\\\n    // ?page=communities\\\\\\\\n    case \\\\\\\\\\\\\\\"communities\\\\\\\\\\\\\\\": {\\\\\\\\n      return (\\\\\\\\n        <Widget\\\\\\\\n          src={\\\\\\\\\\\\\\\"devhub.near/widget/devhub.page.communities\\\\\\\\\\\\\\\"}\\\\\\\\n          props={passProps}\\\\\\\\n        />\\\\\\\\n      );\\\\\\\\n    }\\\\\\\\n    // ?page=community\\\\\\\\n    case \\\\\\\\\\\\\\\"community\\\\\\\\\\\\\\\": {\\\\\\\\n      return (\\\\\\\\n        // Considering to consolsidate this into a single widget,\\\\\\\\n        // where each level handles its own routing.\\\\\\\\n        // Modularizing a page just like we do with addons\\\\\\\\n        <Widget\\\\\\\\n          src={\\\\\\\\\\\\\\\"devhub.near/widget/devhub.entity.community.Provider\\\\\\\\\\\\\\\"}\\\\\\\\n          props={{\\\\\\\\n            ...passProps,\\\\\\\\n            Children: (p) => {\\\\\\\\n              // passing props from the Provider into the Children\\\\\\\\n              switch (routes[1]) {\\\\\\\\n                // ?page=community.configuration\\\\\\\\n                case \\\\\\\\\\\\\\\"configuration\\\\\\\\\\\\\\\": {\\\\\\\\n                  return (\\\\\\\\n                    <Widget\\\\\\\\n                      src={\\\\\\\\n                        \\\\\\\\\\\\\\\"devhub.near/widget/devhub.page.community.configuration\\\\\\\\\\\\\\\"\\\\\\\\n                      }\\\\\\\\n                      props={{\\\\\\\\n                        ...passProps,\\\\\\\\n                        ...p,\\\\\\\\n                      }}\\\\\\\\n                    />\\\\\\\\n                  );\\\\\\\\n                }\\\\\\\\n                // ?page=community\\\\\\\\n                default: {\\\\\\\\n                  return (\\\\\\\\n                    <Widget\\\\\\\\n                      src={\\\\\\\\\\\\\\\"devhub.near/widget/devhub.page.community.index\\\\\\\\\\\\\\\"}\\\\\\\\n                      props={{\\\\\\\\n                        ...passProps,\\\\\\\\n                        ...p,\\\\\\\\n                      }}\\\\\\\\n                    />\\\\\\\\n                  );\\\\\\\\n                }\\\\\\\\n              }\\\\\\\\n            },\\\\\\\\n          }}\\\\\\\\n        />\\\\\\\\n      );\\\\\\\\n    }\\\\\\\\n    // ?page=feed\\\\\\\\n    case \\\\\\\\\\\\\\\"feed\\\\\\\\\\\\\\\": {\\\\\\\\n      return (\\\\\\\\n        <Widget\\\\\\\\n          src={\\\\\\\\\\\\\\\"devhub.near/widget/devhub.page.feed\\\\\\\\\\\\\\\"}\\\\\\\\n          props={passProps}\\\\\\\\n        />\\\\\\\\n      );\\\\\\\\n    }\\\\\\\\n    // ?page=create\\\\\\\\n    case \\\\\\\\\\\\\\\"create\\\\\\\\\\\\\\\": {\\\\\\\\n      return (\\\\\\\\n        <Widget\\\\\\\\n          src={\\\\\\\\\\\\\\\"devhub.near/widget/devhub.entity.post.PostEditor\\\\\\\\\\\\\\\"}\\\\\\\\n          props={{ ...passProps, isCreatePostPage: true, onDraftStateChange }}\\\\\\\\n        />\\\\\\\\n      );\\\\\\\\n    }\\\\\\\\n    // ?page=about\\\\\\\\n    case \\\\\\\\\\\\\\\"about\\\\\\\\\\\\\\\": {\\\\\\\\n      return (\\\\\\\\n        <Widget\\\\\\\\n          src={\\\\\\\\\\\\\\\"devhub.near/widget/devhub.page.about\\\\\\\\\\\\\\\"}\\\\\\\\n          props={passProps}\\\\\\\\n        />\\\\\\\\n      );\\\\\\\\n    }\\\\\\\\n    case \\\\\\\\\\\\\\\"contribute\\\\\\\\\\\\\\\": {\\\\\\\\n      return (\\\\\\\\n        <Widget\\\\\\\\n          src={\\\\\\\\\\\\\\\"devhub.near/widget/devhub.page.contribute\\\\\\\\\\\\\\\"}\\\\\\\\n          props={passProps}\\\\\\\\n        />\\\\\\\\n      );\\\\\\\\n    }\\\\\\\\n    case \\\\\\\\\\\\\\\"profile\\\\\\\\\\\\\\\": {\\\\\\\\n      return (\\\\\\\\n        <Widget\\\\\\\\n          src={\\\\\\\\\\\\\\\"devhub.near/widget/devhub.page.profile\\\\\\\\\\\\\\\"}\\\\\\\\n          props={passProps}\\\\\\\\n        />\\\\\\\\n      );\\\\\\\\n    }\\\\\\\\n    // ?page=blog\\\\\\\\n    case \\\\\\\\\\\\\\\"blog\\\\\\\\\\\\\\\": {\\\\\\\\n      return (\\\\\\\\n        <Widget\\\\\\\\n          src={\\\\\\\\\\\\\\\"devhub.near/widget/devhub.page.blog\\\\\\\\\\\\\\\"}\\\\\\\\n          props={passProps}\\\\\\\\n        />\\\\\\\\n      );\\\\\\\\n    }\\\\\\\\n    case \\\\\\\\\\\\\\\"post\\\\\\\\\\\\\\\": {\\\\\\\\n      return (\\\\\\\\n        <Widget\\\\\\\\n          src={\\\\\\\\\\\\\\\"devhub.near/widget/devhub.page.post\\\\\\\\\\\\\\\"}\\\\\\\\n          props={passProps}\\\\\\\\n        />\\\\\\\\n      );\\\\\\\\n    }\\\\\\\\n    case \\\\\\\\\\\\\\\"admin\\\\\\\\\\\\\\\": {\\\\\\\\n      return (\\\\\\\\n        <Widget\\\\\\\\n          src={\\\\\\\\\\\\\\\"devhub.near/widget/devhub.page.admin.index\\\\\\\\\\\\\\\"}\\\\\\\\n          props={passProps}\\\\\\\\n        />\\\\\\\\n      );\\\\\\\\n    }\\\\\\\\n    default: {\\\\\\\\n      // TODO: 404 page\\\\\\\\n      return <p>404</p>;\\\\\\\\n    }\\\\\\\\n  }\\\\\\\\n}\\\\\\\\n\\\\\\\\nreturn (\\\\\\\\n  <Theme>\\\\\\\\n    <AppLayout page={page}>\\\\\\\\n      <Page />\\\\\\\\n    </AppLayout>\\\\\\\\n  </Theme>\\\\\\\\n);\\\\\\\\n\"}, \"core.lib.autocomplete\": {\"\": \"const autocompleteEnabled = true;\\\\\\\\n\\\\\\\\nconst AutoComplete = styled.div`\\\\\\\\n  z-index: 5;\\\\\\\\n\\\\\\\\n  > div > div {\\\\\\\\n    padding: calc(var(--padding) / 2);\\\\\\\\n  }\\\\\\\\n`;\\\\\\\\n\\\\\\\\nfunction textareaInputHandler(value) {\\\\\\\\n  const showAccountAutocomplete = /@[\\\\\\\\\\\\\\\\w][^\\\\\\\\\\\\\\\\s]*$/.test(value);\\\\\\\\n  State.update((lastKnownState) => ({\\\\\\\\n    ...lastKnownState,\\\\\\\\n    text: value,\\\\\\\\n    showAccountAutocomplete,\\\\\\\\n  }));\\\\\\\\n}\\\\\\\\n\\\\\\\\nfunction autoCompleteAccountId(id) {\\\\\\\\n  let description = state.description.replace(/[\\\\\\\\\\\\\\\\s]{0,1}@[^\\\\\\\\\\\\\\\\s]*$/, \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\");\\\\\\\\n  description = `${description} @${id}`.trim() + \\\\\\\\\\\\\\\" \\\\\\\\\\\\\\\";\\\\\\\\n  State.update((lastKnownState) => ({\\\\\\\\n    ...lastKnownState,\\\\\\\\n    description,\\\\\\\\n    showAccountAutocomplete: false,\\\\\\\\n  }));\\\\\\\\n}\\\\\\\\n\\\\\\\\nreturn {\\\\\\\\n  autoCompleteAccountId,\\\\\\\\n  autocompleteEnabled,\\\\\\\\n  AutoComplete,\\\\\\\\n  textareaInputHandler,\\\\\\\\n};\\\\\\\\n\"}, \"devhub.entity.post.Post\": {\"\": \"// Ideally, this would be a page\\\\\\\\n\\\\\\\\nconst { href } = VM.require(\\\\\\\\\\\\\\\"devhub.near/widget/core.lib.url\\\\\\\\\\\\\\\");\\\\\\\\n\\\\\\\\nconst { draftState, onDraftStateChange } = VM.require(\\\\\\\\n  \\\\\\\\\\\\\\\"devhub.near/widget/devhub.entity.post.draft\\\\\\\\\\\\\\\"\\\\\\\\n);\\\\\\\\n\\\\\\\\nif (!href) {\\\\\\\\n  return <p>Loading modules...</p>;\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst ButtonWithHover = styled.button`\\\\\\\\n  background-color: #fff;\\\\\\\\n  transition: all 300ms;\\\\\\\\n  border-radius: 0.5rem;\\\\\\\\n\\\\\\\\n  &:hover {\\\\\\\\n    background-color: #e9ecef;\\\\\\\\n    color: #000;\\\\\\\\n  }\\\\\\\\n\\\\\\\\n  &:disabled {\\\\\\\\n    background-color: #fff;\\\\\\\\n    color: #b7b7b7;\\\\\\\\n  }\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst postId = props.post.id ?? (props.id ? parseInt(props.id) : 0);\\\\\\\\n\\\\\\\\nconst post =\\\\\\\\n  props.post ??\\\\\\\\n  Near.view(\\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"get_post\\\\\\\\\\\\\\\", { post_id: postId });\\\\\\\\n\\\\\\\\nif (!post) {\\\\\\\\n  return <div>Loading ...</div>;\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst referral = props.referral;\\\\\\\\nconst currentTimestamp = props.timestamp ?? post.snapshot.timestamp;\\\\\\\\nconst compareTimestamp = props.compareTimestamp ?? \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\";\\\\\\\\nconst swapTimestamps = currentTimestamp < compareTimestamp;\\\\\\\\n\\\\\\\\nconst snapshotHistory = post.snapshot_history;\\\\\\\\n\\\\\\\\nconst snapshot =\\\\\\\\n  currentTimestamp === post.snapshot.timestamp\\\\\\\\n    ? post.snapshot\\\\\\\\n    : (snapshotHistory &&\\\\\\\\n        snapshotHistory.find((s) => s.timestamp === currentTimestamp)) ??\\\\\\\\n      null;\\\\\\\\n\\\\\\\\nconst compareSnapshot =\\\\\\\\n  compareTimestamp === post.snapshot.timestamp\\\\\\\\n    ? post.snapshot\\\\\\\\n    : (snapshotHistory &&\\\\\\\\n        snapshotHistory.find((s) => s.timestamp === compareTimestamp)) ??\\\\\\\\n      null;\\\\\\\\n\\\\\\\\n// If this post is displayed under another post. Used to limit the size.\\\\\\\\nconst isUnderPost = props.isUnderPost ? true : false;\\\\\\\\n\\\\\\\\nconst parentId = Near.view(\\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"get_parent_id\\\\\\\\\\\\\\\", {\\\\\\\\n  post_id: postId,\\\\\\\\n});\\\\\\\\n\\\\\\\\nconst childPostIdsUnordered =\\\\\\\\n  Near.view(\\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"get_children_ids\\\\\\\\\\\\\\\", {\\\\\\\\n    post_id: postId,\\\\\\\\n  }) ?? [];\\\\\\\\n\\\\\\\\nconst childPostIds = props.isPreview ? [] : childPostIdsUnordered.reverse();\\\\\\\\nconst expandable = props.isPreview ? false : props.expandable ?? false;\\\\\\\\nconst defaultExpanded = expandable ? props.defaultExpanded : true;\\\\\\\\n\\\\\\\\nfunction readableDate(timestamp) {\\\\\\\\n  var a = new Date(timestamp);\\\\\\\\n  return a.toDateString() + \\\\\\\\\\\\\\\" \\\\\\\\\\\\\\\" + a.toLocaleTimeString();\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst timestamp = readableDate(\\\\\\\\n  snapshot.timestamp ? snapshot.timestamp / 1000000 : Date.now()\\\\\\\\n);\\\\\\\\n\\\\\\\\nconst postSearchKeywords = props.searchKeywords ? (\\\\\\\\n  <div style={{ \\\\\\\\\\\\\\\"font-family\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"monospace\\\\\\\\\\\\\\\" }} key=\\\\\\\\\\\\\\\"post-search-keywords\\\\\\\\\\\\\\\">\\\\\\\\n    <span>Found keywords: </span>\\\\\\\\n\\\\\\\\n    {props.searchKeywords.map((tag) => (\\\\\\\\n      <Widget\\\\\\\\n        src={\\\\\\\\\\\\\\\"devhub.near/widget/devhub.components.atom.Tag\\\\\\\\\\\\\\\"}\\\\\\\\n        props={{ linkTo: \\\\\\\\\\\\\\\"Feed\\\\\\\\\\\\\\\", tag }}\\\\\\\\n      />\\\\\\\\n    ))}\\\\\\\\n  </div>\\\\\\\\n) : (\\\\\\\\n  <div key=\\\\\\\\\\\\\\\"post-search-keywords\\\\\\\\\\\\\\\"></div>\\\\\\\\n);\\\\\\\\n\\\\\\\\nconst searchKeywords = props.searchKeywords ? (\\\\\\\\n  <div class=\\\\\\\\\\\\\\\"mb-4\\\\\\\\\\\\\\\" key=\\\\\\\\\\\\\\\"search-keywords\\\\\\\\\\\\\\\">\\\\\\\\n    <small class=\\\\\\\\\\\\\\\"text-muted\\\\\\\\\\\\\\\">{postSearchKeywords}</small>\\\\\\\\n  </div>\\\\\\\\n) : (\\\\\\\\n  <div key=\\\\\\\\\\\\\\\"search-keywords\\\\\\\\\\\\\\\"></div>\\\\\\\\n);\\\\\\\\n\\\\\\\\nconst allowedToEdit =\\\\\\\\n  !props.isPreview &&\\\\\\\\n  Near.view(\\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"is_allowed_to_edit\\\\\\\\\\\\\\\", {\\\\\\\\n    post_id: postId,\\\\\\\\n    editor: context.accountId,\\\\\\\\n  });\\\\\\\\n\\\\\\\\nconst btnEditorWidget = (postType, name) => {\\\\\\\\n  return (\\\\\\\\n    <li>\\\\\\\\n      <a\\\\\\\\n        class=\\\\\\\\\\\\\\\"dropdown-item\\\\\\\\\\\\\\\"\\\\\\\\n        role=\\\\\\\\\\\\\\\"button\\\\\\\\\\\\\\\"\\\\\\\\n        onClick={() =>\\\\\\\\n          State.update({ postType, editorType: \\\\\\\\\\\\\\\"EDIT\\\\\\\\\\\\\\\", showEditor: true })\\\\\\\\n        }\\\\\\\\n      >\\\\\\\\n        {name}\\\\\\\\n      </a>\\\\\\\\n    </li>\\\\\\\\n  );\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst editControl = allowedToEdit ? (\\\\\\\\n  <div class=\\\\\\\\\\\\\\\"btn-group\\\\\\\\\\\\\\\" role=\\\\\\\\\\\\\\\"group\\\\\\\\\\\\\\\">\\\\\\\\n    <a\\\\\\\\n      class=\\\\\\\\\\\\\\\"card-link px-2\\\\\\\\\\\\\\\"\\\\\\\\n      role=\\\\\\\\\\\\\\\"button\\\\\\\\\\\\\\\"\\\\\\\\n      title=\\\\\\\\\\\\\\\"Edit post\\\\\\\\\\\\\\\"\\\\\\\\n      data-bs-toggle=\\\\\\\\\\\\\\\"dropdown\\\\\\\\\\\\\\\"\\\\\\\\n      aria-expanded=\\\\\\\\\\\\\\\"false\\\\\\\\\\\\\\\"\\\\\\\\n      type=\\\\\\\\\\\\\\\"button\\\\\\\\\\\\\\\"\\\\\\\\n    >\\\\\\\\n      <div class=\\\\\\\\\\\\\\\"bi bi-pencil-square\\\\\\\\\\\\\\\"></div>\\\\\\\\n    </a>\\\\\\\\n\\\\\\\\n    <ul class=\\\\\\\\\\\\\\\"dropdown-menu\\\\\\\\\\\\\\\">\\\\\\\\n      {btnEditorWidget(\\\\\\\\\\\\\\\"Idea\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"Edit as an idea\\\\\\\\\\\\\\\")}\\\\\\\\n      {btnEditorWidget(\\\\\\\\\\\\\\\"Solution\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"Edit as a solution\\\\\\\\\\\\\\\")}\\\\\\\\n      {btnEditorWidget(\\\\\\\\\\\\\\\"Attestation\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"Edit as an attestation\\\\\\\\\\\\\\\")}\\\\\\\\n      {btnEditorWidget(\\\\\\\\\\\\\\\"Sponsorship\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"Edit as a sponsorship\\\\\\\\\\\\\\\")}\\\\\\\\n      {btnEditorWidget(\\\\\\\\\\\\\\\"Comment\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"Edit as a comment\\\\\\\\\\\\\\\")}\\\\\\\\n    </ul>\\\\\\\\n  </div>\\\\\\\\n) : (\\\\\\\\n  <div></div>\\\\\\\\n);\\\\\\\\n\\\\\\\\nconst shareButton = props.isPreview ? (\\\\\\\\n  <div></div>\\\\\\\\n) : (\\\\\\\\n  <Link\\\\\\\\n    class=\\\\\\\\\\\\\\\"card-link text-dark\\\\\\\\\\\\\\\"\\\\\\\\n    to={href({\\\\\\\\n      widgetSrc: \\\\\\\\\\\\\\\"devhub.near/widget/app\\\\\\\\\\\\\\\",\\\\\\\\n      params: { page: \\\\\\\\\\\\\\\"post\\\\\\\\\\\\\\\", id: postId },\\\\\\\\n    })}\\\\\\\\n    role=\\\\\\\\\\\\\\\"button\\\\\\\\\\\\\\\"\\\\\\\\n    target=\\\\\\\\\\\\\\\"_blank\\\\\\\\\\\\\\\"\\\\\\\\n    title=\\\\\\\\\\\\\\\"Open in new tab\\\\\\\\\\\\\\\"\\\\\\\\n  >\\\\\\\\n    <div class=\\\\\\\\\\\\\\\"bi bi-share\\\\\\\\\\\\\\\"></div>\\\\\\\\n  </Link>\\\\\\\\n);\\\\\\\\n\\\\\\\\nconst ProfileCardContainer = styled.div`\\\\\\\\n  @media screen and (max-width: 960px) {\\\\\\\\n    width: 100%;\\\\\\\\n  }\\\\\\\\n`;\\\\\\\\n\\\\\\\\n// card-header\\\\\\\\nconst header = (\\\\\\\\n  <div key=\\\\\\\\\\\\\\\"header\\\\\\\\\\\\\\\">\\\\\\\\n    <small class=\\\\\\\\\\\\\\\"text-muted\\\\\\\\\\\\\\\">\\\\\\\\n      <div class=\\\\\\\\\\\\\\\"row justify-content-between\\\\\\\\\\\\\\\">\\\\\\\\n        <div class=\\\\\\\\\\\\\\\"d-flex align-items-center flex-wrap\\\\\\\\\\\\\\\">\\\\\\\\n          <ProfileCardContainer>\\\\\\\\n            <Widget\\\\\\\\n              src={\\\\\\\\n                \\\\\\\\\\\\\\\"devhub.near/widget/devhub.components.molecule.ProfileCard\\\\\\\\\\\\\\\"\\\\\\\\n              }\\\\\\\\n              props={{\\\\\\\\n                accountId: post.author_id,\\\\\\\\n              }}\\\\\\\\n            />\\\\\\\\n          </ProfileCardContainer>\\\\\\\\n\\\\\\\\n          <div class=\\\\\\\\\\\\\\\"d-flex ms-auto\\\\\\\\\\\\\\\">\\\\\\\\n            {editControl}\\\\\\\\n            {timestamp}\\\\\\\\n\\\\\\\\n            <Widget\\\\\\\\n              src={\\\\\\\\\\\\\\\"devhub.near/widget/devhub.entity.post.History\\\\\\\\\\\\\\\"}\\\\\\\\n              props={{\\\\\\\\n                post,\\\\\\\\n                timestamp: currentTimestamp,\\\\\\\\n              }}\\\\\\\\n            />\\\\\\\\n            {shareButton}\\\\\\\\n          </div>\\\\\\\\n        </div>\\\\\\\\n      </div>\\\\\\\\n    </small>\\\\\\\\n  </div>\\\\\\\\n);\\\\\\\\n\\\\\\\\n// const emptyIcons = {\\\\\\\\n//   Idea: \\\\\\\\\\\\\\\"bi-lightbulb\\\\\\\\\\\\\\\",\\\\\\\\n//   Comment: \\\\\\\\\\\\\\\"bi-chat\\\\\\\\\\\\\\\",\\\\\\\\n//   Solution: \\\\\\\\\\\\\\\"bi-rocket\\\\\\\\\\\\\\\",\\\\\\\\n//   Attestation: \\\\\\\\\\\\\\\"bi-check-circle\\\\\\\\\\\\\\\",\\\\\\\\n//   Sponsorship: \\\\\\\\\\\\\\\"bi-cash-coin\\\\\\\\\\\\\\\",\\\\\\\\n//   Github: \\\\\\\\\\\\\\\"bi-github\\\\\\\\\\\\\\\",\\\\\\\\n//   Like: \\\\\\\\\\\\\\\"bi-heart\\\\\\\\\\\\\\\",\\\\\\\\n//   Reply: \\\\\\\\\\\\\\\"bi-reply\\\\\\\\\\\\\\\",\\\\\\\\n// };\\\\\\\\n\\\\\\\\nconst emptyIcons = {\\\\\\\\n  Idea: \\\\\\\\\\\\\\\"\\\\\\\\u{1f4a1}\\\\\\\\\\\\\\\",\\\\\\\\n  Comment: \\\\\\\\\\\\\\\"bi-chat\\\\\\\\\\\\\\\",\\\\\\\\n  Solution: \\\\\\\\\\\\\\\"\\\\\\\\u{1f680}\\\\\\\\\\\\\\\",\\\\\\\\n  Attestation: \\\\\\\\\\\\\\\"\\\\\\\\u{2705}\\\\\\\\\\\\\\\",\\\\\\\\n  Sponsorship: \\\\\\\\\\\\\\\"\\\\\\\\u{1fa99}\\\\\\\\\\\\\\\",\\\\\\\\n  Github: \\\\\\\\\\\\\\\"bi-github\\\\\\\\\\\\\\\",\\\\\\\\n  Like: \\\\\\\\\\\\\\\"bi-heart\\\\\\\\\\\\\\\",\\\\\\\\n  Reply: \\\\\\\\\\\\\\\"bi-reply\\\\\\\\\\\\\\\",\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst fillIcons = {\\\\\\\\n  Idea: \\\\\\\\\\\\\\\"\\\\\\\\u{1f4a1}\\\\\\\\\\\\\\\",\\\\\\\\n  Comment: \\\\\\\\\\\\\\\"bi-chat-fill\\\\\\\\\\\\\\\",\\\\\\\\n  Solution: \\\\\\\\\\\\\\\"\\\\\\\\u{1f680}\\\\\\\\\\\\\\\",\\\\\\\\n  Attestation: \\\\\\\\\\\\\\\"\\\\\\\\u{2705}\\\\\\\\\\\\\\\",\\\\\\\\n  Sponsorship: \\\\\\\\\\\\\\\"\\\\\\\\u{1fa99}\\\\\\\\\\\\\\\",\\\\\\\\n  Github: \\\\\\\\\\\\\\\"bi-github\\\\\\\\\\\\\\\",\\\\\\\\n  Like: \\\\\\\\\\\\\\\"bi-heart-fill\\\\\\\\\\\\\\\",\\\\\\\\n  Reply: \\\\\\\\\\\\\\\"bi-reply-fill\\\\\\\\\\\\\\\",\\\\\\\\n};\\\\\\\\n\\\\\\\\n// Trigger saving this widget.\\\\\\\\n\\\\\\\\nconst borders = {\\\\\\\\n  Idea: \\\\\\\\\\\\\\\"border-light\\\\\\\\\\\\\\\",\\\\\\\\n  Comment: \\\\\\\\\\\\\\\"border-light\\\\\\\\\\\\\\\",\\\\\\\\n  Solution: \\\\\\\\\\\\\\\"border-light\\\\\\\\\\\\\\\",\\\\\\\\n  Attestation: \\\\\\\\\\\\\\\"border-light\\\\\\\\\\\\\\\",\\\\\\\\n  Sponsorship: \\\\\\\\\\\\\\\"border-light\\\\\\\\\\\\\\\",\\\\\\\\n  Github: \\\\\\\\\\\\\\\"border-light\\\\\\\\\\\\\\\",\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst containsLike = props.isPreview\\\\\\\\n  ? false\\\\\\\\n  : post.likes.find((l) => l.author_id == context.accountId);\\\\\\\\nconst likeBtnClass = containsLike ? fillIcons.Like : emptyIcons.Like;\\\\\\\\n// This must be outside onLike, because Near.view returns null at first, and when the view call finished, it returns true/false.\\\\\\\\n// If checking this inside onLike, it will give `null` and we cannot tell the result is true or false.\\\\\\\\nlet grantNotify = Near.view(\\\\\\\\\\\\\\\"social.near\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"is_write_permission_granted\\\\\\\\\\\\\\\", {\\\\\\\\n  predecessor_id: \\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\",\\\\\\\\n  key: context.accountId + \\\\\\\\\\\\\\\"/index/notify\\\\\\\\\\\\\\\",\\\\\\\\n});\\\\\\\\n\\\\\\\\nif (grantNotify === null) {\\\\\\\\n  return;\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst onLike = () => {\\\\\\\\n  if (!context.accountId) {\\\\\\\\n    return;\\\\\\\\n  }\\\\\\\\n\\\\\\\\n  let likeTxn = [\\\\\\\\n    {\\\\\\\\n      contractName: \\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\",\\\\\\\\n      methodName: \\\\\\\\\\\\\\\"add_like\\\\\\\\\\\\\\\",\\\\\\\\n      args: {\\\\\\\\n        post_id: postId,\\\\\\\\n      },\\\\\\\\n      gas: Big(10).pow(14),\\\\\\\\n    },\\\\\\\\n  ];\\\\\\\\n\\\\\\\\n  if (grantNotify === false) {\\\\\\\\n    likeTxn.unshift({\\\\\\\\n      contractName: \\\\\\\\\\\\\\\"social.near\\\\\\\\\\\\\\\",\\\\\\\\n      methodName: \\\\\\\\\\\\\\\"grant_write_permission\\\\\\\\\\\\\\\",\\\\\\\\n      args: {\\\\\\\\n        predecessor_id: \\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\",\\\\\\\\n        keys: [context.accountId + \\\\\\\\\\\\\\\"/index/notify\\\\\\\\\\\\\\\"],\\\\\\\\n      },\\\\\\\\n      gas: Big(10).pow(14),\\\\\\\\n      deposit: Big(10).pow(22),\\\\\\\\n    });\\\\\\\\n  }\\\\\\\\n\\\\\\\\n  Near.call(likeTxn);\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst btnCreatorWidget = (postType, icon, name, desc) => {\\\\\\\\n  return (\\\\\\\\n    <li class=\\\\\\\\\\\\\\\"py-1\\\\\\\\\\\\\\\">\\\\\\\\n      <a\\\\\\\\n        class=\\\\\\\\\\\\\\\"dropdown-item text-decoration-none d-flex align-items-center lh-sm\\\\\\\\\\\\\\\"\\\\\\\\n        style={{ color: \\\\\\\\\\\\\\\"rgb(55,109,137)\\\\\\\\\\\\\\\" }}\\\\\\\\n        role=\\\\\\\\\\\\\\\"button\\\\\\\\\\\\\\\"\\\\\\\\n        onClick={() =>\\\\\\\\n          State.update({ postType, editorType: \\\\\\\\\\\\\\\"CREATE\\\\\\\\\\\\\\\", showEditor: true })\\\\\\\\n        }\\\\\\\\n      >\\\\\\\\n        <i class={`bi ${icon}`} style={{ fontSize: \\\\\\\\\\\\\\\"1.5rem\\\\\\\\\\\\\\\" }}>\\\\\\\\n          {\\\\\\\\\\\\\\\" \\\\\\\\\\\\\\\"}\\\\\\\\n        </i>\\\\\\\\n\\\\\\\\n        <div class=\\\\\\\\\\\\\\\"ps-2 text-wrap\\\\\\\\\\\\\\\" style={{ width: \\\\\\\\\\\\\\\"18rem\\\\\\\\\\\\\\\" }}>\\\\\\\\n          <div>{name}</div>\\\\\\\\n          <small class=\\\\\\\\\\\\\\\"fw-light text-secondary\\\\\\\\\\\\\\\">{desc}</small>\\\\\\\\n        </div>\\\\\\\\n      </a>\\\\\\\\n    </li>\\\\\\\\n  );\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst FooterButtonsContianer = styled.div`\\\\\\\\n  width: 66.66666667%;\\\\\\\\n\\\\\\\\n  @media screen and (max-width: 960px) {\\\\\\\\n    width: 100%;\\\\\\\\n  }\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst buttonsFooter = props.isPreview ? null : (\\\\\\\\n  <div class=\\\\\\\\\\\\\\\"row\\\\\\\\\\\\\\\" key=\\\\\\\\\\\\\\\"buttons-footer\\\\\\\\\\\\\\\">\\\\\\\\n    <FooterButtonsContianer>\\\\\\\\n      <div class=\\\\\\\\\\\\\\\"btn-group\\\\\\\\\\\\\\\" role=\\\\\\\\\\\\\\\"group\\\\\\\\\\\\\\\" aria-label=\\\\\\\\\\\\\\\"Basic outlined example\\\\\\\\\\\\\\\">\\\\\\\\n        <ButtonWithHover\\\\\\\\n          type=\\\\\\\\\\\\\\\"button\\\\\\\\\\\\\\\"\\\\\\\\n          class=\\\\\\\\\\\\\\\"btn d-flex align-items-center\\\\\\\\\\\\\\\"\\\\\\\\n          style={{ border: \\\\\\\\\\\\\\\"0px\\\\\\\\\\\\\\\" }}\\\\\\\\n          onClick={onLike}\\\\\\\\n        >\\\\\\\\n          <i class={`bi ${likeBtnClass}`}> </i>\\\\\\\\n          {post.likes.length == 0 ? (\\\\\\\\n            \\\\\\\\\\\\\\\"Like\\\\\\\\\\\\\\\"\\\\\\\\n          ) : (\\\\\\\\n            <Widget\\\\\\\\n              src=\\\\\\\\\\\\\\\"devhub.near/widget/devhub.components.layout.LikeButton.Faces\\\\\\\\\\\\\\\"\\\\\\\\n              props={{\\\\\\\\n                likesByUsers: Object.fromEntries(\\\\\\\\n                  post.likes.map(({ author_id }) => [author_id, \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\"])\\\\\\\\n                ),\\\\\\\\n              }}\\\\\\\\n            />\\\\\\\\n          )}\\\\\\\\n        </ButtonWithHover>\\\\\\\\n\\\\\\\\n        <div class=\\\\\\\\\\\\\\\"btn-group\\\\\\\\\\\\\\\" role=\\\\\\\\\\\\\\\"group\\\\\\\\\\\\\\\">\\\\\\\\n          <ButtonWithHover\\\\\\\\n            type=\\\\\\\\\\\\\\\"button\\\\\\\\\\\\\\\"\\\\\\\\n            class=\\\\\\\\\\\\\\\"btn\\\\\\\\\\\\\\\"\\\\\\\\n            style={{ border: \\\\\\\\\\\\\\\"0px\\\\\\\\\\\\\\\" }}\\\\\\\\n            data-bs-toggle=\\\\\\\\\\\\\\\"dropdown\\\\\\\\\\\\\\\"\\\\\\\\n            aria-expanded=\\\\\\\\\\\\\\\"false\\\\\\\\\\\\\\\"\\\\\\\\n          >\\\\\\\\n            \\\\\\\\u{21aa} Reply\\\\\\\\n          </ButtonWithHover>\\\\\\\\n          <ul class=\\\\\\\\\\\\\\\"dropdown-menu\\\\\\\\\\\\\\\">\\\\\\\\n            {btnCreatorWidget(\\\\\\\\n              \\\\\\\\\\\\\\\"Idea\\\\\\\\\\\\\\\",\\\\\\\\n              emptyIcons.Idea,\\\\\\\\n              \\\\\\\\\\\\\\\"Idea\\\\\\\\\\\\\\\",\\\\\\\\n              \\\\\\\\\\\\\\\"Get feedback from the community about a problem, opportunity, or need.\\\\\\\\\\\\\\\"\\\\\\\\n            )}\\\\\\\\n            {btnCreatorWidget(\\\\\\\\n              \\\\\\\\\\\\\\\"Solution\\\\\\\\\\\\\\\",\\\\\\\\n              emptyIcons.Solution,\\\\\\\\n              \\\\\\\\\\\\\\\"Solution\\\\\\\\\\\\\\\",\\\\\\\\n              \\\\\\\\\\\\\\\"Provide a specific proposal or implementation to an idea, optionally requesting funding.\\\\\\\\\\\\\\\"\\\\\\\\n            )}\\\\\\\\n            {btnCreatorWidget(\\\\\\\\n              \\\\\\\\\\\\\\\"Attestation\\\\\\\\\\\\\\\",\\\\\\\\n              emptyIcons.Attestation,\\\\\\\\n              \\\\\\\\\\\\\\\"Attestation\\\\\\\\\\\\\\\",\\\\\\\\n              \\\\\\\\\\\\\\\"Formally review or validate a solution as a recognized expert.\\\\\\\\\\\\\\\"\\\\\\\\n            )}\\\\\\\\n            {btnCreatorWidget(\\\\\\\\n              \\\\\\\\\\\\\\\"Sponsorship\\\\\\\\\\\\\\\",\\\\\\\\n              emptyIcons.Sponsorship,\\\\\\\\n              \\\\\\\\\\\\\\\"Sponsorship\\\\\\\\\\\\\\\",\\\\\\\\n              \\\\\\\\\\\\\\\"Offer to fund projects, events, or proposals that match your needs.\\\\\\\\\\\\\\\"\\\\\\\\n            )}\\\\\\\\n            <li>\\\\\\\\n              <hr class=\\\\\\\\\\\\\\\"dropdown-divider\\\\\\\\\\\\\\\" />\\\\\\\\n            </li>\\\\\\\\n            {btnCreatorWidget(\\\\\\\\n              \\\\\\\\\\\\\\\"Comment\\\\\\\\\\\\\\\",\\\\\\\\n              emptyIcons.Comment,\\\\\\\\n              \\\\\\\\\\\\\\\"Comment\\\\\\\\\\\\\\\",\\\\\\\\n              \\\\\\\\\\\\\\\"Ask a question, provide information, or share a resource that is relevant to the thread.\\\\\\\\\\\\\\\"\\\\\\\\n            )}\\\\\\\\n          </ul>\\\\\\\\n        </div>\\\\\\\\n        {childPostIds.length > 0 && (\\\\\\\\n          <ButtonWithHover\\\\\\\\n            type=\\\\\\\\\\\\\\\"button\\\\\\\\\\\\\\\"\\\\\\\\n            class=\\\\\\\\\\\\\\\"btn\\\\\\\\\\\\\\\"\\\\\\\\n            style={{ border: \\\\\\\\\\\\\\\"0px\\\\\\\\\\\\\\\" }}\\\\\\\\n            data-bs-toggle=\\\\\\\\\\\\\\\"collapse\\\\\\\\\\\\\\\"\\\\\\\\n            href={`#collapseChildPosts${postId}`}\\\\\\\\n            aria-expanded={defaultExpanded}\\\\\\\\n            aria-controls={`collapseChildPosts${postId}`}\\\\\\\\n            onClick={() =>\\\\\\\\n              State.update({ expandReplies: !state.expandReplies })\\\\\\\\n            }\\\\\\\\n          >\\\\\\\\n            <i\\\\\\\\n              class={`bi bi-chevron-${state.expandReplies ? \\\\\\\\\\\\\\\"up\\\\\\\\\\\\\\\" : \\\\\\\\\\\\\\\"down\\\\\\\\\\\\\\\"}`}\\\\\\\\n            ></i>{\\\\\\\\\\\\\\\" \\\\\\\\\\\\\\\"}\\\\\\\\n            {`${state.expandReplies ? \\\\\\\\\\\\\\\"Collapse\\\\\\\\\\\\\\\" : \\\\\\\\\\\\\\\"Expand\\\\\\\\\\\\\\\"} Replies (${\\\\\\\\n              childPostIds.length\\\\\\\\n            })`}\\\\\\\\n          </ButtonWithHover>\\\\\\\\n        )}\\\\\\\\n\\\\\\\\n        {isUnderPost || !parentId ? (\\\\\\\\n          <div key=\\\\\\\\\\\\\\\"link-to-parent\\\\\\\\\\\\\\\"></div>\\\\\\\\n        ) : (\\\\\\\\n          <Link\\\\\\\\n            to={href({\\\\\\\\n              widgetSrc: \\\\\\\\\\\\\\\"devhub.near/widget/app\\\\\\\\\\\\\\\",\\\\\\\\n              params: { page: \\\\\\\\\\\\\\\"post\\\\\\\\\\\\\\\", id: parentId },\\\\\\\\n            })}\\\\\\\\n          >\\\\\\\\n            <ButtonWithHover\\\\\\\\n              type=\\\\\\\\\\\\\\\"button\\\\\\\\\\\\\\\"\\\\\\\\n              style={{ border: \\\\\\\\\\\\\\\"0px\\\\\\\\\\\\\\\" }}\\\\\\\\n              className=\\\\\\\\\\\\\\\"btn\\\\\\\\\\\\\\\"\\\\\\\\n              key=\\\\\\\\\\\\\\\"link-to-parent\\\\\\\\\\\\\\\"\\\\\\\\n            >\\\\\\\\n              <i class=\\\\\\\\\\\\\\\"bi bi-arrow-90deg-up\\\\\\\\\\\\\\\"></i>Go to parent\\\\\\\\n            </ButtonWithHover>\\\\\\\\n          </Link>\\\\\\\\n        )}\\\\\\\\n      </div>\\\\\\\\n    </FooterButtonsContianer>\\\\\\\\n  </div>\\\\\\\\n);\\\\\\\\n\\\\\\\\nconst tokenMapping = {\\\\\\\\n  NEAR: \\\\\\\\\\\\\\\"NEAR\\\\\\\\\\\\\\\",\\\\\\\\n  USDT: {\\\\\\\\n    NEP141: {\\\\\\\\n      address: \\\\\\\\\\\\\\\"usdt.tether-token.near\\\\\\\\\\\\\\\",\\\\\\\\n    },\\\\\\\\n  },\\\\\\\\n  USDC: {\\\\\\\\n    NEP141: {\\\\\\\\n      address:\\\\\\\\n        \\\\\\\\\\\\\\\"17208628f84f5d6ad33f0da3bbbeb27ffcb398eac501a31bd6ad2011e36133a1\\\\\\\\\\\\\\\",\\\\\\\\n    },\\\\\\\\n  },\\\\\\\\n  // Add more tokens here as needed\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst reverseTokenMapping = Object.keys(tokenMapping).reduce(\\\\\\\\n  (reverseMap, key) => {\\\\\\\\n    const value = tokenMapping[key];\\\\\\\\n    if (typeof value === \\\\\\\\\\\\\\\"object\\\\\\\\\\\\\\\") {\\\\\\\\n      reverseMap[JSON.stringify(value)] = key;\\\\\\\\n    }\\\\\\\\n    return reverseMap;\\\\\\\\n  },\\\\\\\\n  {}\\\\\\\\n);\\\\\\\\n\\\\\\\\nfunction tokenResolver(token) {\\\\\\\\n  if (typeof token === \\\\\\\\\\\\\\\"string\\\\\\\\\\\\\\\") {\\\\\\\\n    return token;\\\\\\\\n  } else if (typeof token === \\\\\\\\\\\\\\\"object\\\\\\\\\\\\\\\") {\\\\\\\\n    const tokenString = reverseTokenMapping[JSON.stringify(token)];\\\\\\\\n    return tokenString || null;\\\\\\\\n  } else {\\\\\\\\n    return null; // Invalid input\\\\\\\\n  }\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst isDraft =\\\\\\\\n  (draftState?.parent_post_id === postId &&\\\\\\\\n    draftState?.postType === state.postType) ||\\\\\\\\n  (draftState?.edit_post_id === postId &&\\\\\\\\n    draftState?.postType === state.postType);\\\\\\\\n\\\\\\\\nconst setExpandReplies = (value) => {\\\\\\\\n  State.update({ expandReplies: value });\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst setEditorState = (value) => {\\\\\\\\n  if (draftState && !value) {\\\\\\\\n    // clear the draft state since user initiated cancel\\\\\\\\n    onDraftStateChange(null);\\\\\\\\n  }\\\\\\\\n  State.update({ showEditor: value });\\\\\\\\n};\\\\\\\\n\\\\\\\\nlet amount = null;\\\\\\\\nlet token = null;\\\\\\\\nlet supervisor = null;\\\\\\\\n\\\\\\\\nif (state.postType === \\\\\\\\\\\\\\\"Solution\\\\\\\\\\\\\\\") {\\\\\\\\n  const amountMatch = post.snapshot.description.match(\\\\\\\\n    /Requested amount: (\\\\\\\\\\\\\\\\d+(\\\\\\\\\\\\\\\\.\\\\\\\\\\\\\\\\d+)?) (\\\\\\\\\\\\\\\\w+)/\\\\\\\\n  );\\\\\\\\n  amount = amountMatch ? parseFloat(amountMatch[1]) : null;\\\\\\\\n  token = amountMatch ? amountMatch[3] : null;\\\\\\\\n\\\\\\\\n  const sponsorMatch = post.snapshot.description.match(\\\\\\\\n    /Requested sponsor: @([^\\\\\\\\\\\\\\\\s]+)/\\\\\\\\n  );\\\\\\\\n  supervisor = sponsorMatch ? sponsorMatch[1] : null;\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst seekingFunding = amount !== null || token !== null || supervisor !== null;\\\\\\\\n\\\\\\\\nfunction Editor() {\\\\\\\\n  return (\\\\\\\\n    <div class=\\\\\\\\\\\\\\\"row mt-2\\\\\\\\\\\\\\\" id={`accordion${postId}`} key=\\\\\\\\\\\\\\\"editors-footer\\\\\\\\\\\\\\\">\\\\\\\\n      <div\\\\\\\\n        key={`${state.postType}${state.editorType}${postId}`}\\\\\\\\n        className={\\\\\\\\\\\\\\\"w-100\\\\\\\\\\\\\\\"}\\\\\\\\n      >\\\\\\\\n        {state.editorType === \\\\\\\\\\\\\\\"CREATE\\\\\\\\\\\\\\\" ? (\\\\\\\\n          <>\\\\\\\\n            <Widget\\\\\\\\n              src={\\\\\\\\\\\\\\\"devhub.near/widget/devhub.entity.post.PostEditor\\\\\\\\\\\\\\\"}\\\\\\\\n              props={{\\\\\\\\n                postType: state.postType,\\\\\\\\n                onDraftStateChange,\\\\\\\\n                draftState:\\\\\\\\n                  draftState?.parent_post_id == postId ? draftState : undefined,\\\\\\\\n                parentId: postId,\\\\\\\\n                mode: \\\\\\\\\\\\\\\"Create\\\\\\\\\\\\\\\",\\\\\\\\n                transactionHashes: props.transactionHashes,\\\\\\\\n                setExpandReplies,\\\\\\\\n                setEditorState: setEditorState,\\\\\\\\n              }}\\\\\\\\n            />\\\\\\\\n          </>\\\\\\\\n        ) : (\\\\\\\\n          <>\\\\\\\\n            <Widget\\\\\\\\n              src={\\\\\\\\\\\\\\\"devhub.near/widget/devhub.entity.post.PostEditor\\\\\\\\\\\\\\\"}\\\\\\\\n              props={{\\\\\\\\n                postType: state.postType,\\\\\\\\n                postId,\\\\\\\\n                mode: \\\\\\\\\\\\\\\"Edit\\\\\\\\\\\\\\\",\\\\\\\\n                author_id: post.author_id,\\\\\\\\n                labels: post.snapshot.labels,\\\\\\\\n                name: post.snapshot.name,\\\\\\\\n                description: post.snapshot.description,\\\\\\\\n                amount: post.snapshot.amount || amount,\\\\\\\\n                token: tokenResolver(post.snapshot.sponsorship_token || token),\\\\\\\\n                supervisor:\\\\\\\\n                  post.snapshot.post.snapshot.supervisor || supervisor,\\\\\\\\n                seekingFunding: seekingFunding,\\\\\\\\n                githubLink: post.snapshot.github_link,\\\\\\\\n                onDraftStateChange,\\\\\\\\n                draftState:\\\\\\\\n                  draftState?.edit_post_id == postId ? draftState : undefined,\\\\\\\\n                setEditorState: setEditorState,\\\\\\\\n                transactionHashes: props.transactionHashes,\\\\\\\\n                setExpandReplies,\\\\\\\\n              }}\\\\\\\\n            />\\\\\\\\n          </>\\\\\\\\n        )}\\\\\\\\n      </div>\\\\\\\\n    </div>\\\\\\\\n  );\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst renamedPostType =\\\\\\\\n  snapshot.post_type == \\\\\\\\\\\\\\\"Submission\\\\\\\\\\\\\\\" ? \\\\\\\\\\\\\\\"Solution\\\\\\\\\\\\\\\" : snapshot.post_type;\\\\\\\\n\\\\\\\\nconst tags = post.snapshot.labels ? (\\\\\\\\n  <div\\\\\\\\n    class=\\\\\\\\\\\\\\\"card-title d-flex flex-wrap align-items-center\\\\\\\\\\\\\\\"\\\\\\\\n    style={{ margin: \\\\\\\\\\\\\\\"20px 0\\\\\\\\\\\\\\\" }}\\\\\\\\n    key=\\\\\\\\\\\\\\\"post-labels\\\\\\\\\\\\\\\"\\\\\\\\n  >\\\\\\\\n    {post.snapshot.labels.map((tag, idx) => (\\\\\\\\n      <div className=\\\\\\\\\\\\\\\"d-flex align-items-center my-3 me-3\\\\\\\\\\\\\\\">\\\\\\\\n        <Link\\\\\\\\n          to={href({\\\\\\\\n            widgetSrc: \\\\\\\\\\\\\\\"devhub.near/widget/app\\\\\\\\\\\\\\\",\\\\\\\\n            params: { page: \\\\\\\\\\\\\\\"feed\\\\\\\\\\\\\\\", tag: tag },\\\\\\\\n          })}\\\\\\\\n        >\\\\\\\\n          <div\\\\\\\\n            onClick={() => {\\\\\\\\n              if (typeof props.updateTagInParent === \\\\\\\\\\\\\\\"function\\\\\\\\\\\\\\\") {\\\\\\\\n                props.updateTagInParent(tag);\\\\\\\\n              }\\\\\\\\n            }}\\\\\\\\n            className=\\\\\\\\\\\\\\\"d-flex gap-3 align-items-center\\\\\\\\\\\\\\\"\\\\\\\\n            style={{ cursor: \\\\\\\\\\\\\\\"pointer\\\\\\\\\\\\\\\", textDecoration: \\\\\\\\\\\\\\\"none\\\\\\\\\\\\\\\" }}\\\\\\\\n          >\\\\\\\\n            <Widget\\\\\\\\n              src={\\\\\\\\\\\\\\\"devhub.near/widget/devhub.components.atom.Tag\\\\\\\\\\\\\\\"}\\\\\\\\n              props={{\\\\\\\\n                tag,\\\\\\\\n                black: true,\\\\\\\\n              }}\\\\\\\\n            />\\\\\\\\n          </div>\\\\\\\\n        </Link>\\\\\\\\n        {idx !== post.snapshot.labels.length - 1 && (\\\\\\\\n          <span className=\\\\\\\\\\\\\\\"ms-3\\\\\\\\\\\\\\\">\\\\\\\\u{2022}</span>\\\\\\\\n        )}\\\\\\\\n      </div>\\\\\\\\n    ))}\\\\\\\\n  </div>\\\\\\\\n) : (\\\\\\\\n  <div key=\\\\\\\\\\\\\\\"post-labels\\\\\\\\\\\\\\\"></div>\\\\\\\\n);\\\\\\\\n\\\\\\\\nconst Title = styled.h5`\\\\\\\\n  margin: 1rem 0;\\\\\\\\n\\\\\\\\n  color: #151515;\\\\\\\\n  font-size: 1.15rem;\\\\\\\\n  font-style: normal;\\\\\\\\n  font-weight: 700;\\\\\\\\n  line-height: 1.625rem; /* 55.556% */\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst postTitle =\\\\\\\\n  snapshot.post_type == \\\\\\\\\\\\\\\"Comment\\\\\\\\\\\\\\\" ? (\\\\\\\\n    <div key=\\\\\\\\\\\\\\\"post-title\\\\\\\\\\\\\\\"></div>\\\\\\\\n  ) : (\\\\\\\\n    <Title key=\\\\\\\\\\\\\\\"post-title\\\\\\\\\\\\\\\">\\\\\\\\n      {emptyIcons[snapshot.post_type]} {renamedPostType}: {snapshot.name}\\\\\\\\n    </Title>\\\\\\\\n  );\\\\\\\\n\\\\\\\\nconst postExtra =\\\\\\\\n  snapshot.post_type == \\\\\\\\\\\\\\\"Sponsorship\\\\\\\\\\\\\\\" ? (\\\\\\\\n    <div key=\\\\\\\\\\\\\\\"post-extra\\\\\\\\\\\\\\\">\\\\\\\\n      <h6 class=\\\\\\\\\\\\\\\"card-subtitle mb-2 text-muted\\\\\\\\\\\\\\\">\\\\\\\\n        Maximum amount: {snapshot.amount}{\\\\\\\\\\\\\\\" \\\\\\\\\\\\\\\"}\\\\\\\\n        {tokenResolver(snapshot.sponsorship_token)}\\\\\\\\n      </h6>\\\\\\\\n      <h6 class=\\\\\\\\\\\\\\\"card-subtitle mb-2 text-muted\\\\\\\\\\\\\\\">\\\\\\\\n        Supervisor:{\\\\\\\\\\\\\\\" \\\\\\\\\\\\\\\"}\\\\\\\\n        <Widget\\\\\\\\n          src={\\\\\\\\\\\\\\\"devhub.near/widget/devhub.components.molecule.ProfileLine\\\\\\\\\\\\\\\"}\\\\\\\\n          props={{ accountId: snapshot.supervisor }}\\\\\\\\n        />\\\\\\\\n      </h6>\\\\\\\\n    </div>\\\\\\\\n  ) : (\\\\\\\\n    <div></div>\\\\\\\\n  );\\\\\\\\n\\\\\\\\nconst childPostHasDraft = childPostIds.find(\\\\\\\\n  (childId) =>\\\\\\\\n    childId == draftState?.edit_post_id || childId == draftState?.parent_post_id\\\\\\\\n);\\\\\\\\nif (\\\\\\\\n  (childPostHasDraft || state.childrenOfChildPostsHasDraft) &&\\\\\\\\n  props.expandParent\\\\\\\\n) {\\\\\\\\n  props.expandParent();\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst postsList =\\\\\\\\n  props.isPreview || childPostIds.length == 0 ? (\\\\\\\\n    <div key=\\\\\\\\\\\\\\\"posts-list\\\\\\\\\\\\\\\"></div>\\\\\\\\n  ) : (\\\\\\\\n    <div class=\\\\\\\\\\\\\\\"row\\\\\\\\\\\\\\\" key=\\\\\\\\\\\\\\\"posts-list\\\\\\\\\\\\\\\">\\\\\\\\n      <div\\\\\\\\n        class={`collapse mt-3 ${\\\\\\\\n          defaultExpanded ||\\\\\\\\n          childPostHasDraft ||\\\\\\\\n          state.childrenOfChildPostsHasDraft ||\\\\\\\\n          state.expandReplies\\\\\\\\n            ? \\\\\\\\\\\\\\\"show\\\\\\\\\\\\\\\"\\\\\\\\n            : \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\"\\\\\\\\n        }`}\\\\\\\\n        id={`collapseChildPosts${postId}`}\\\\\\\\n      >\\\\\\\\n        {childPostIds.map((childId) => (\\\\\\\\n          <div key={childId} style={{ marginBottom: \\\\\\\\\\\\\\\"0.5rem\\\\\\\\\\\\\\\" }}>\\\\\\\\n            <Widget\\\\\\\\n              src=\\\\\\\\\\\\\\\"devhub.near/widget/devhub.entity.post.Post\\\\\\\\\\\\\\\"\\\\\\\\n              props={{\\\\\\\\n                id: childId,\\\\\\\\n                isUnderPost: true,\\\\\\\\n                onDraftStateChange,\\\\\\\\n                draftState,\\\\\\\\n                expandParent: () =>\\\\\\\\n                  State.update({ childrenOfChildPostsHasDraft: true }),\\\\\\\\n                referral: `subpost${childId}of${postId}`,\\\\\\\\n              }}\\\\\\\\n            />\\\\\\\\n          </div>\\\\\\\\n        ))}\\\\\\\\n      </div>\\\\\\\\n    </div>\\\\\\\\n  );\\\\\\\\n\\\\\\\\nconst LimitedMarkdown = styled.div`\\\\\\\\n  max-height: 20em;\\\\\\\\n`;\\\\\\\\n\\\\\\\\n// Determine if located in the post page.\\\\\\\\nconst isInList = props.isInList;\\\\\\\\nconst contentArray = snapshot.description.split(\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\");\\\\\\\\nconst needClamp = isInList && contentArray.length > 5;\\\\\\\\n\\\\\\\\ninitState({\\\\\\\\n  clamp: needClamp,\\\\\\\\n  expandReplies: defaultExpanded,\\\\\\\\n});\\\\\\\\n\\\\\\\\nconst clampedContent = needClamp\\\\\\\\n  ? contentArray.slice(0, 3).join(\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\")\\\\\\\\n  : snapshot.description;\\\\\\\\n\\\\\\\\nconst SeeMore = styled.a`\\\\\\\\n  cursor: pointer;\\\\\\\\n  color: #00b774 !important;\\\\\\\\n  font-weight: bold;\\\\\\\\n`;\\\\\\\\n\\\\\\\\n// Should make sure the posts under the currently top viewed post are limited in size.\\\\\\\\nconst descriptionArea = isUnderPost ? (\\\\\\\\n  <LimitedMarkdown className=\\\\\\\\\\\\\\\"overflow-auto\\\\\\\\\\\\\\\" key=\\\\\\\\\\\\\\\"description-area\\\\\\\\\\\\\\\">\\\\\\\\n    {/* {widget(\\\\\\\\\\\\\\\"components.molecule.markdown-viewer\\\\\\\\\\\\\\\", {\\\\\\\\n      text: snapshot.description,\\\\\\\\n    })} */}\\\\\\\\n    <Widget\\\\\\\\n      src={\\\\\\\\\\\\\\\"devhub.near/widget/devhub.components.molecule.MarkdownViewer\\\\\\\\\\\\\\\"}\\\\\\\\n      props={{\\\\\\\\n        text: snapshot.description,\\\\\\\\n      }}\\\\\\\\n    />\\\\\\\\n  </LimitedMarkdown>\\\\\\\\n) : (\\\\\\\\n  <div className=\\\\\\\\\\\\\\\"w-100 overflow-auto\\\\\\\\\\\\\\\">\\\\\\\\n    <div class={state.clamp ? \\\\\\\\\\\\\\\"clamp\\\\\\\\\\\\\\\" : \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\"}>\\\\\\\\n      {/* {widget(\\\\\\\\\\\\\\\"components.molecule.markdown-viewer\\\\\\\\\\\\\\\", {\\\\\\\\n        text: state.clamp ? clampedContent : snapshot.description,\\\\\\\\n      })} */}\\\\\\\\n      <Widget\\\\\\\\n        src={\\\\\\\\\\\\\\\"devhub.near/widget/devhub.components.molecule.MarkdownViewer\\\\\\\\\\\\\\\"}\\\\\\\\n        props={{\\\\\\\\n          text: state.clamp ? clampedContent : snapshot.description,\\\\\\\\n        }}\\\\\\\\n      />\\\\\\\\n    </div>\\\\\\\\n    {state.clamp ? (\\\\\\\\n      <div class=\\\\\\\\\\\\\\\"d-flex justify-content-start\\\\\\\\\\\\\\\">\\\\\\\\n        <SeeMore onClick={() => State.update({ clamp: false })}>\\\\\\\\n          See more\\\\\\\\n        </SeeMore>\\\\\\\\n      </div>\\\\\\\\n    ) : (\\\\\\\\n      <></>\\\\\\\\n    )}\\\\\\\\n  </div>\\\\\\\\n);\\\\\\\\n\\\\\\\\nconst timestampElement = (_snapshot) => {\\\\\\\\n  return (\\\\\\\\n    <Link\\\\\\\\n      class=\\\\\\\\\\\\\\\"text-muted\\\\\\\\\\\\\\\"\\\\\\\\n      href={href({\\\\\\\\n        widgetSrc: \\\\\\\\\\\\\\\"devhub.near/widget/app\\\\\\\\\\\\\\\",\\\\\\\\n        params: {\\\\\\\\n          page: \\\\\\\\\\\\\\\"post\\\\\\\\\\\\\\\",\\\\\\\\n          id: postId,\\\\\\\\n          timestamp: _snapshot.timestamp,\\\\\\\\n          compareTimestamp: null,\\\\\\\\n          referral,\\\\\\\\n        },\\\\\\\\n      })}\\\\\\\\n    >\\\\\\\\n      {readableDate(_snapshot.timestamp / 1000000).substring(4)}\\\\\\\\n\\\\\\\\n      <Widget\\\\\\\\n        src=\\\\\\\\\\\\\\\"mob.near/widget/ProfileImage\\\\\\\\\\\\\\\"\\\\\\\\n        props={{\\\\\\\\n          accountId: _snapshot.editor_id,\\\\\\\\n          style: {\\\\\\\\n            width: \\\\\\\\\\\\\\\"1.25em\\\\\\\\\\\\\\\",\\\\\\\\n            height: \\\\\\\\\\\\\\\"1.25em\\\\\\\\\\\\\\\",\\\\\\\\n          },\\\\\\\\n          imageStyle: {\\\\\\\\n            transform: \\\\\\\\\\\\\\\"translateY(-12.5%)\\\\\\\\\\\\\\\",\\\\\\\\n          },\\\\\\\\n        }}\\\\\\\\n      />\\\\\\\\n      {_snapshot.editor_id.substring(0, 8)}\\\\\\\\n    </Link>\\\\\\\\n  );\\\\\\\\n};\\\\\\\\n\\\\\\\\nfunction combineText(_snapshot) {\\\\\\\\n  return (\\\\\\\\n    \\\\\\\\\\\\\\\"## \\\\\\\\\\\\\\\" +\\\\\\\\n    _snapshot.post_type +\\\\\\\\n    \\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\" +\\\\\\\\n    _snapshot.name +\\\\\\\\n    \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\" +\\\\\\\\n    _snapshot.description\\\\\\\\n  );\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst CardContainer = styled.div`\\\\\\\\n  padding: 1.5rem 3rem !important;\\\\\\\\n  border-radius: 16px !important;\\\\\\\\n  border: 1px solid rgba(129, 129, 129, 0.3) !important;\\\\\\\\n  background: #fffefe !important;\\\\\\\\n\\\\\\\\n  @media screen and (max-width: 960px) {\\\\\\\\n    padding: 1rem !important;\\\\\\\\n  }\\\\\\\\n`;\\\\\\\\n\\\\\\\\nreturn (\\\\\\\\n  <CardContainer className={`card ${borders[snapshot.post_type]} attractable`}>\\\\\\\\n    {header}\\\\\\\\n    <div className=\\\\\\\\\\\\\\\"card-body\\\\\\\\\\\\\\\" style={{ padding: 0 }}>\\\\\\\\n      {searchKeywords}\\\\\\\\n      {compareSnapshot ? (\\\\\\\\n        <div\\\\\\\\n          class=\\\\\\\\\\\\\\\"border rounded\\\\\\\\\\\\\\\"\\\\\\\\n          style={{ marginTop: \\\\\\\\\\\\\\\"16px\\\\\\\\\\\\\\\", marginBottom: \\\\\\\\\\\\\\\"16px\\\\\\\\\\\\\\\" }}\\\\\\\\n        >\\\\\\\\n          <div class=\\\\\\\\\\\\\\\"d-flex justify-content-end\\\\\\\\\\\\\\\" style={{ fontSize: \\\\\\\\\\\\\\\"12px\\\\\\\\\\\\\\\" }}>\\\\\\\\n            <div class=\\\\\\\\\\\\\\\"d-flex w-50 justify-content-end mt-1 me-2\\\\\\\\\\\\\\\">\\\\\\\\n              {timestampElement(snapshot)}\\\\\\\\n              {snapshot !== compareSnapshot && (\\\\\\\\n                <>\\\\\\\\n                  <div class=\\\\\\\\\\\\\\\"mx-1 align-self-center\\\\\\\\\\\\\\\">\\\\\\\\n                    <i class=\\\\\\\\\\\\\\\"bi bi-file-earmark-diff\\\\\\\\\\\\\\\" />\\\\\\\\n                  </div>\\\\\\\\n                  {timestampElement(compareSnapshot)}\\\\\\\\n                </>\\\\\\\\n              )}\\\\\\\\n            </div>\\\\\\\\n          </div>\\\\\\\\n          <div className=\\\\\\\\\\\\\\\"w-100 overflow-auto\\\\\\\\\\\\\\\">\\\\\\\\n            <Widget\\\\\\\\n              src=\\\\\\\\\\\\\\\"markeljan.near/widget/MarkdownDiff\\\\\\\\\\\\\\\"\\\\\\\\n              props={{\\\\\\\\n                post: post,\\\\\\\\n                currentCode: combineText(\\\\\\\\n                  swapTimestamps ? compareSnapshot : snapshot\\\\\\\\n                ),\\\\\\\\n                prevCode: combineText(\\\\\\\\n                  swapTimestamps ? snapshot : compareSnapshot\\\\\\\\n                ),\\\\\\\\n                showLineNumber: true,\\\\\\\\n              }}\\\\\\\\n            />\\\\\\\\n          </div>\\\\\\\\n        </div>\\\\\\\\n      ) : (\\\\\\\\n        <>\\\\\\\\n          {postTitle}\\\\\\\\n          {postExtra}\\\\\\\\n          {descriptionArea}\\\\\\\\n        </>\\\\\\\\n      )}\\\\\\\\n      {tags}\\\\\\\\n      {buttonsFooter}\\\\\\\\n      {!props.isPreview && (isDraft || state.showEditor) && <Editor />}\\\\\\\\n      {postsList}\\\\\\\\n    </div>\\\\\\\\n  </CardContainer>\\\\\\\\n);\\\\\\\\n\"}, \"devhub.components.atom.Tag\": {\"\": \"\\\\\\\\n\\\\\\\\n\\\\\\\\n\\\\\\\\n\\\\\\\\nfunction Tag(props) {\\\\\\\\n  const { black, tag } = props;\\\\\\\\n\\\\\\\\n  const Span = styled.span`\\\\\\\\n    color: ${black ? \\\\\\\\\\\\\\\"#818181\\\\\\\\\\\\\\\" : \\\\\\\\\\\\\\\"#00ec97\\\\\\\\\\\\\\\"};\\\\\\\\n    font-size: 16px;\\\\\\\\n    font-style: normal;\\\\\\\\n    font-weight: 700;\\\\\\\\n    line-height: 20px; /* 125% */\\\\\\\\n  `;\\\\\\\\n\\\\\\\\n  return <Span>{tag}</Span>;\\\\\\\\n}\\\\\\\\n\\\\\\\\nreturn Tag(props, context);\"}, \"devhub.entity.post.History\": {\"\": \"/*\\\\\\\\n---props---\\\\\\\\nprops.post: {};\\\\\\\\nprops.id: number;\\\\\\\\nprops.newTab: boolean;\\\\\\\\nprops.timestamp: number;\\\\\\\\nprops.referral: any;\\\\\\\\n*/\\\\\\\\nconst { href } = VM.require(\\\\\\\\\\\\\\\"devhub.near/widget/core.lib.url\\\\\\\\\\\\\\\") || (() => {});\\\\\\\\nconst { getPost } =\\\\\\\\n  VM.require(\\\\\\\\\\\\\\\"devhub.near/widget/core.adapter.devhub-contract\\\\\\\\\\\\\\\") ||\\\\\\\\n  (() => {});\\\\\\\\n\\\\\\\\nconst postId = props.post.id ?? (props.id ? parseInt(props.id) : 0);\\\\\\\\nconst post = getPost({ post_id: postId });\\\\\\\\n\\\\\\\\nif (!post || !post.snapshot_history) {\\\\\\\\n  return <div class=\\\\\\\\\\\\\\\"bi bi-clock-history px-2\\\\\\\\\\\\\\\"></div>;\\\\\\\\n}\\\\\\\\nconst referral = props.referral;\\\\\\\\n\\\\\\\\nfunction readableDate(timestamp) {\\\\\\\\n  var a = new Date(timestamp);\\\\\\\\n  return (\\\\\\\\n    a.toDateString() +\\\\\\\\n    \\\\\\\\\\\\\\\" \\\\\\\\\\\\\\\" +\\\\\\\\n    a.toLocaleTimeString([], { hour: \\\\\\\\\\\\\\\"2-digit\\\\\\\\\\\\\\\", minute: \\\\\\\\\\\\\\\"2-digit\\\\\\\\\\\\\\\" })\\\\\\\\n  ).substring(4);\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst currentTimestamp = props.timestamp ?? post.snapshot.timestamp;\\\\\\\\nconst snapshot = post.snapshot;\\\\\\\\nconst snapshotHistory = post.snapshot_history\\\\\\\\n  ? Array.from(post.snapshot_history)\\\\\\\\n  : [];\\\\\\\\n\\\\\\\\nsnapshotHistory.push(snapshot);\\\\\\\\nsnapshotHistory.reverse();\\\\\\\\n\\\\\\\\nconst history = (\\\\\\\\n  <div class=\\\\\\\\\\\\\\\"btn-group\\\\\\\\\\\\\\\" role=\\\\\\\\\\\\\\\"group\\\\\\\\\\\\\\\">\\\\\\\\n    <a\\\\\\\\n      class=\\\\\\\\\\\\\\\"card-link\\\\\\\\\\\\\\\"\\\\\\\\n      role=\\\\\\\\\\\\\\\"button\\\\\\\\\\\\\\\"\\\\\\\\n      title=\\\\\\\\\\\\\\\"Post History\\\\\\\\\\\\\\\"\\\\\\\\n      data-bs-toggle=\\\\\\\\\\\\\\\"dropdown\\\\\\\\\\\\\\\"\\\\\\\\n      aria-expanded=\\\\\\\\\\\\\\\"false\\\\\\\\\\\\\\\"\\\\\\\\n      type=\\\\\\\\\\\\\\\"button\\\\\\\\\\\\\\\"\\\\\\\\n    >\\\\\\\\n      <div class=\\\\\\\\\\\\\\\"bi bi-clock-history px-2\\\\\\\\\\\\\\\"></div>\\\\\\\\n    </a>\\\\\\\\n    <ul class=\\\\\\\\\\\\\\\"dropdown-menu\\\\\\\\\\\\\\\">\\\\\\\\n      <a\\\\\\\\n        class=\\\\\\\\\\\\\\\"d-flex text-muted\\\\\\\\\\\\\\\"\\\\\\\\n        style={{ fontSize: \\\\\\\\\\\\\\\"12px\\\\\\\\\\\\\\\", textDecoration: \\\\\\\\\\\\\\\"none\\\\\\\\\\\\\\\", cursor: \\\\\\\\\\\\\\\"default\\\\\\\\\\\\\\\" }}\\\\\\\\n      >\\\\\\\\n        <a\\\\\\\\n          style={{\\\\\\\\n            textAlign: \\\\\\\\\\\\\\\"center\\\\\\\\\\\\\\\",\\\\\\\\n            minWidth: \\\\\\\\\\\\\\\"290px\\\\\\\\\\\\\\\",\\\\\\\\n            maxWidth: \\\\\\\\\\\\\\\"290px\\\\\\\\\\\\\\\",\\\\\\\\n          }}\\\\\\\\n        >\\\\\\\\n          Edit History\\\\\\\\n        </a>\\\\\\\\n        <a style={{ marginRight: \\\\\\\\\\\\\\\"8px\\\\\\\\\\\\\\\" }}>Compare</a>\\\\\\\\n      </a>\\\\\\\\n      {snapshotHistory.map((item) => {\\\\\\\\n        if (item === undefined) return;\\\\\\\\n        return (\\\\\\\\n          <li style={{ display: \\\\\\\\\\\\\\\"flex\\\\\\\\\\\\\\\" }}>\\\\\\\\n            <div\\\\\\\\n              style={{\\\\\\\\n                minWidth: \\\\\\\\\\\\\\\"290px\\\\\\\\\\\\\\\",\\\\\\\\n                maxWidth: \\\\\\\\\\\\\\\"290px\\\\\\\\\\\\\\\",\\\\\\\\n              }}\\\\\\\\n            >\\\\\\\\n              <a\\\\\\\\n                class=\\\\\\\\\\\\\\\"dropdown-item\\\\\\\\\\\\\\\"\\\\\\\\n                href={href({\\\\\\\\n                  widgetSrc: \\\\\\\\\\\\\\\"devhub.near/widget/devhub.entity.post.Post\\\\\\\\\\\\\\\",\\\\\\\\n                  params: {\\\\\\\\n                    id: postId,\\\\\\\\n                    timestamp: item.timestamp,\\\\\\\\n                    compareTimestamp: null,\\\\\\\\n                    referral,\\\\\\\\n                  },\\\\\\\\n                })}\\\\\\\\n                target={props.newTab ? \\\\\\\\\\\\\\\"_blank\\\\\\\\\\\\\\\" : undefined}\\\\\\\\n              >\\\\\\\\n                {readableDate(item.timestamp / 1000000)}\\\\\\\\n\\\\\\\\n                <Widget\\\\\\\\n                  src=\\\\\\\\\\\\\\\"mob.near/widget/ProfileImage\\\\\\\\\\\\\\\"\\\\\\\\n                  props={{\\\\\\\\n                    accountId: item.editor_id,\\\\\\\\n                    style: {\\\\\\\\n                      width: \\\\\\\\\\\\\\\"1.25em\\\\\\\\\\\\\\\",\\\\\\\\n                      height: \\\\\\\\\\\\\\\"1.25em\\\\\\\\\\\\\\\",\\\\\\\\n                    },\\\\\\\\n                    imageStyle: {\\\\\\\\n                      transform: \\\\\\\\\\\\\\\"translateY(-12.5%)\\\\\\\\\\\\\\\",\\\\\\\\n                    },\\\\\\\\n                  }}\\\\\\\\n                />\\\\\\\\n                {post.author_id.substring(0, 8)}\\\\\\\\n              </a>\\\\\\\\n            </div>\\\\\\\\n            <a\\\\\\\\n              class=\\\\\\\\\\\\\\\"dropdown-item\\\\\\\\\\\\\\\"\\\\\\\\n              href={href({\\\\\\\\n                widgetSrc: \\\\\\\\\\\\\\\"devhub.near/widget/devhub.entity.post.Post\\\\\\\\\\\\\\\",\\\\\\\\n                params: {\\\\\\\\n                  id: postId,\\\\\\\\n                  timestamp: currentTimestamp,\\\\\\\\n                  compareTimestamp: item.timestamp,\\\\\\\\n                  referral,\\\\\\\\n                },\\\\\\\\n              })}\\\\\\\\n            >\\\\\\\\n              <i class=\\\\\\\\\\\\\\\"bi bi-file-earmark-diff\\\\\\\\\\\\\\\" />\\\\\\\\n            </a>\\\\\\\\n          </li>\\\\\\\\n        );\\\\\\\\n      })}\\\\\\\\n    </ul>\\\\\\\\n  </div>\\\\\\\\n);\\\\\\\\n\\\\\\\\nreturn history;\\\\\\\\n\"}, \"devhub.entity.community.Tile\": {\"\": \"const Tile = ({\\\\\\\\n  children,\\\\\\\\n  className,\\\\\\\\n  fullWidth,\\\\\\\\n  headerSlotRight,\\\\\\\\n  heading,\\\\\\\\n  headingAdornment,\\\\\\\\n  id,\\\\\\\\n  isHidden,\\\\\\\\n  noFrame,\\\\\\\\n  minHeight,\\\\\\\\n  style,\\\\\\\\n}) => (\\\\\\\\n  <div\\\\\\\\n    className={[\\\\\\\\n      \\\\\\\\\\\\\\\"d-flex flex-column gap-3\\\\\\\\\\\\\\\",\\\\\\\\n      className,\\\\\\\\n      fullWidth ? \\\\\\\\\\\\\\\"w-100\\\\\\\\\\\\\\\" : \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\",\\\\\\\\n      !noFrame ? \\\\\\\\\\\\\\\"p-3\\\\\\\\\\\\\\\" : \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\",\\\\\\\\n      isHidden ? \\\\\\\\\\\\\\\"d-none\\\\\\\\\\\\\\\" : \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\",\\\\\\\\n      \\\\\\\\\\\\\\\"attractable\\\\\\\\\\\\\\\",\\\\\\\\n    ].join(\\\\\\\\\\\\\\\" \\\\\\\\\\\\\\\")}\\\\\\\\n    style={{\\\\\\\\n      maxWidth: fullWidth ? \\\\\\\\\\\\\\\"100%\\\\\\\\\\\\\\\" : null,\\\\\\\\n      minHeight: minHeight ?? 180,\\\\\\\\n      height: \\\\\\\\\\\\\\\"fit-content\\\\\\\\\\\\\\\",\\\\\\\\n      overflowX: \\\\\\\\\\\\\\\"auto\\\\\\\\\\\\\\\",\\\\\\\\n      borderRadius: 16,\\\\\\\\n      border: \\\\\\\\\\\\\\\"1px solid rgba(129, 129, 129, 0.30)\\\\\\\\\\\\\\\",\\\\\\\\n      background: \\\\\\\\\\\\\\\"#FFFEFE\\\\\\\\\\\\\\\",\\\\\\\\n      marginBottom: \\\\\\\\\\\\\\\"1rem\\\\\\\\\\\\\\\",\\\\\\\\n      ...style,\\\\\\\\n    }}\\\\\\\\n    {...{ id }}\\\\\\\\n  >\\\\\\\\n    {\\\\\\\\n      <div\\\\\\\\n        className={[\\\\\\\\n          \\\\\\\\\\\\\\\"d-flex align-items-center justify-content-between gap-3\\\\\\\\\\\\\\\",\\\\\\\\n\\\\\\\\n          noFrame || (!heading && !headingAdornment && !headerSlotRight)\\\\\\\\n            ? \\\\\\\\\\\\\\\"d-none\\\\\\\\\\\\\\\"\\\\\\\\n            : \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\",\\\\\\\\n        ].join(\\\\\\\\\\\\\\\" \\\\\\\\\\\\\\\")}\\\\\\\\n        style={{ minHeight: 30 }}\\\\\\\\n      >\\\\\\\\n        <h5 className=\\\\\\\\\\\\\\\"h5 d-inline-flex gap-2 m-0\\\\\\\\\\\\\\\">\\\\\\\\n          {headingAdornment}\\\\\\\\n          <span>{heading}</span>\\\\\\\\n        </h5>\\\\\\\\n\\\\\\\\n        {headerSlotRight}\\\\\\\\n      </div>\\\\\\\\n    }\\\\\\\\n\\\\\\\\n    {children}\\\\\\\\n  </div>\\\\\\\\n);\\\\\\\\n\\\\\\\\nreturn Tile(props);\\\\\\\\n\"}, \"devhub.entity.post.PostEditor\": {\"\": \"const { normalize } =\\\\\\\\n  VM.require(\\\\\\\\\\\\\\\"devhub.near/widget/core.lib.stringUtils\\\\\\\\\\\\\\\") || (() => {});\\\\\\\\n\\\\\\\\nconst CenteredMessage = styled.div`\\\\\\\\n  display: flex;\\\\\\\\n  flex-direction: column;\\\\\\\\n  justify-content: center;\\\\\\\\n  align-items: center;\\\\\\\\n  width: 100%;\\\\\\\\n  height: 384px;\\\\\\\\n`;\\\\\\\\n\\\\\\\\nfunction initLabels() {\\\\\\\\n  const labels = [];\\\\\\\\n  if (typeof props.labels === \\\\\\\\\\\\\\\"string\\\\\\\\\\\\\\\") {\\\\\\\\n    labels.push(...props.labels.split(\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"));\\\\\\\\n  }\\\\\\\\n  if (Array.isArray(props.labels)) {\\\\\\\\n    labels.push(...props.labels);\\\\\\\\n  }\\\\\\\\n  if (props.referral) {\\\\\\\\n    labels.push(`referral:${props.referral}`);\\\\\\\\n  }\\\\\\\\n  return labels;\\\\\\\\n}\\\\\\\\n\\\\\\\\nif (!context.accountId) {\\\\\\\\n  return (\\\\\\\\n    <CenteredMessage height={\\\\\\\\\\\\\\\"384px\\\\\\\\\\\\\\\"}>\\\\\\\\n      <h2>Please sign in to create a post.</h2>\\\\\\\\n    </CenteredMessage>\\\\\\\\n  );\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst cleanDescription = (description) => {\\\\\\\\n  return description\\\\\\\\n    ? description.replace(\\\\\\\\n        /###### Requested amount: .+?\\\\\\\\\\\\\\\\n###### Requested sponsor: @[^\\\\\\\\\\\\\\\\s]+\\\\\\\\\\\\\\\\n/g,\\\\\\\\n        \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\"\\\\\\\\n      )\\\\\\\\n    : description;\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst postTypeOptions = {\\\\\\\\n  Idea: {\\\\\\\\n    name: \\\\\\\\\\\\\\\"Idea\\\\\\\\\\\\\\\",\\\\\\\\n    icon: \\\\\\\\\\\\\\\"bi-lightbulb\\\\\\\\\\\\\\\",\\\\\\\\n    description:\\\\\\\\n      \\\\\\\\\\\\\\\"Get feedback from the community about a problem, opportunity, or need.\\\\\\\\\\\\\\\",\\\\\\\\n  },\\\\\\\\n\\\\\\\\n  Solution: {\\\\\\\\n    name: \\\\\\\\\\\\\\\"Solution\\\\\\\\\\\\\\\",\\\\\\\\n    icon: \\\\\\\\\\\\\\\"bi-rocket\\\\\\\\\\\\\\\",\\\\\\\\n    description:\\\\\\\\n      \\\\\\\\\\\\\\\"Provide a specific proposal or implementation to an idea, optionally requesting funding. If your solution relates to an existing idea, please reply to the original post with a solution.\\\\\\\\\\\\\\\",\\\\\\\\n  },\\\\\\\\n};\\\\\\\\n\\\\\\\\nlet fields = {\\\\\\\\n  Comment: [\\\\\\\\\\\\\\\"description\\\\\\\\\\\\\\\"],\\\\\\\\n  Idea: [\\\\\\\\\\\\\\\"name\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"description\\\\\\\\\\\\\\\"],\\\\\\\\n  Solution: [\\\\\\\\\\\\\\\"name\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"description\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"fund_raising\\\\\\\\\\\\\\\"],\\\\\\\\n  Attestation: [\\\\\\\\\\\\\\\"name\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"description\\\\\\\\\\\\\\\"],\\\\\\\\n  Sponsorship: [\\\\\\\\n    \\\\\\\\\\\\\\\"name\\\\\\\\\\\\\\\",\\\\\\\\n    \\\\\\\\\\\\\\\"description\\\\\\\\\\\\\\\",\\\\\\\\n    \\\\\\\\\\\\\\\"amount\\\\\\\\\\\\\\\",\\\\\\\\n    \\\\\\\\\\\\\\\"sponsorship_token\\\\\\\\\\\\\\\",\\\\\\\\n    \\\\\\\\\\\\\\\"supervisor\\\\\\\\\\\\\\\",\\\\\\\\n  ],\\\\\\\\n  Github: [\\\\\\\\\\\\\\\"githubLink\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"name\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"description\\\\\\\\\\\\\\\"],\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst isCreatePostPage = props.isCreatePostPage ?? false;\\\\\\\\nconst postType = props.postType ?? \\\\\\\\\\\\\\\"Idea\\\\\\\\\\\\\\\";\\\\\\\\nconst parentId = props.parentId ?? null;\\\\\\\\nconst mode = props.mode ?? \\\\\\\\\\\\\\\"Create\\\\\\\\\\\\\\\";\\\\\\\\nconst labelStrings = initLabels();\\\\\\\\nconst [postIdList, setPostIdList] = useState(null); // to show updated post after approve txn\\\\\\\\nconst [showPostPage, setShowPostPage] = useState(false); // show newly created post\\\\\\\\nconst [postId, setPostId] = useState(props.postId ?? null);\\\\\\\\nconst [postData, setPostData] = useState(null); // for capturing edit post change\\\\\\\\n\\\\\\\\nuseEffect(() => {\\\\\\\\n  if (mode == \\\\\\\\\\\\\\\"Edit\\\\\\\\\\\\\\\") {\\\\\\\\n    const data = Near.view(\\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"get_post\\\\\\\\\\\\\\\", {\\\\\\\\n      post_id: postId,\\\\\\\\n    });\\\\\\\\n    if (!postData) {\\\\\\\\n      setPostData(data);\\\\\\\\n    }\\\\\\\\n    if (postData && data && JSON.stringify(postData) !== JSON.stringify(data)) {\\\\\\\\n      props.setEditorState(false);\\\\\\\\n      props.setExpandReplies(true);\\\\\\\\n      setPostData(data);\\\\\\\\n    }\\\\\\\\n  } else {\\\\\\\\n    const postIds = Near.view(\\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"get_all_post_ids\\\\\\\\\\\\\\\");\\\\\\\\n    if (!postIdList) {\\\\\\\\n      setPostIdList(postIds);\\\\\\\\n    }\\\\\\\\n    if (\\\\\\\\n      postIdList?.length > 0 &&\\\\\\\\n      postIds.length > 0 &&\\\\\\\\n      postIdList.length !== postIds.length\\\\\\\\n    ) {\\\\\\\\n      props.onDraftStateChange(null);\\\\\\\\n      if (isCreatePostPage) {\\\\\\\\n        setShowPostPage(true);\\\\\\\\n        setPostId(postIds[postIds?.length - 1]);\\\\\\\\n      } else {\\\\\\\\n        // close editor and expand replies\\\\\\\\n        props.setEditorState(false);\\\\\\\\n        props.setExpandReplies(true);\\\\\\\\n      }\\\\\\\\n      setPostIdList(postIds);\\\\\\\\n    }\\\\\\\\n  }\\\\\\\\n});\\\\\\\\n\\\\\\\\nconst labels = labelStrings.map((s) => {\\\\\\\\n  return { name: s };\\\\\\\\n});\\\\\\\\n\\\\\\\\ninitState({\\\\\\\\n  seekingFunding: props.seekingFunding ?? false,\\\\\\\\n  author_id: context.accountId,\\\\\\\\n  // Should be a list of objects with field \\\\\\\\\\\\\\\"name\\\\\\\\\\\\\\\".\\\\\\\\n  labels,\\\\\\\\n  // Should be a list of labels as strings.\\\\\\\\n  // Both of the label structures should be modified together.\\\\\\\\n  labelStrings: [],\\\\\\\\n  postType,\\\\\\\\n  name: props.name ?? \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\",\\\\\\\\n  description:\\\\\\\\n    (props.postType === \\\\\\\\\\\\\\\"Solution\\\\\\\\\\\\\\\"\\\\\\\\n      ? cleanDescription(props.description)\\\\\\\\n      : props.description) ?? \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\",\\\\\\\\n  amount: props.amount ?? \\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\n  token: props.token ?? \\\\\\\\\\\\\\\"USDT\\\\\\\\\\\\\\\",\\\\\\\\n  supervisor: props.supervisor ?? \\\\\\\\\\\\\\\"neardevdao.near\\\\\\\\\\\\\\\",\\\\\\\\n  githubLink: props.githubLink ?? \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\",\\\\\\\\n  warning: \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\",\\\\\\\\n  draftStateApplied: false,\\\\\\\\n  mentionInput: \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\", // text next to @ tag\\\\\\\\n  mentionsArray: [], // all the mentions in the description\\\\\\\\n  displayFields: fields[postType],\\\\\\\\n});\\\\\\\\n\\\\\\\\n/* INCLUDE: \\\\\\\\\\\\\\\"core/lib/autocomplete\\\\\\\\\\\\\\\" */\\\\\\\\nconst autocompleteEnabled = true;\\\\\\\\n\\\\\\\\nconst AutoComplete = styled.div`\\\\\\\\n  z-index: 5;\\\\\\\\n\\\\\\\\n  > div > div {\\\\\\\\n    padding: calc(var(--padding) / 2);\\\\\\\\n  }\\\\\\\\n`;\\\\\\\\n\\\\\\\\nif (props.transactionHashes) {\\\\\\\\n  const transaction = useCache(\\\\\\\\n    () =>\\\\\\\\n      asyncFetch(\\\\\\\\\\\\\\\"https://rpc.mainnet.near.org\\\\\\\\\\\\\\\", {\\\\\\\\n        method: \\\\\\\\\\\\\\\"POST\\\\\\\\\\\\\\\",\\\\\\\\n        headers: {\\\\\\\\n          \\\\\\\\\\\\\\\"content-type\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"application/json\\\\\\\\\\\\\\\",\\\\\\\\n        },\\\\\\\\n        body: JSON.stringify({\\\\\\\\n          jsonrpc: \\\\\\\\\\\\\\\"2.0\\\\\\\\\\\\\\\",\\\\\\\\n          id: \\\\\\\\\\\\\\\"dontcare\\\\\\\\\\\\\\\",\\\\\\\\n          method: \\\\\\\\\\\\\\\"tx\\\\\\\\\\\\\\\",\\\\\\\\n          params: [props.transactionHashes, context.accountId],\\\\\\\\n        }),\\\\\\\\n      }).then((res) => res),\\\\\\\\n    props.transactionHashes + context.accountId,\\\\\\\\n    { subscribe: false }\\\\\\\\n  );\\\\\\\\n\\\\\\\\n  if (transaction !== null) {\\\\\\\\n    const transaction_method_name =\\\\\\\\n      transaction?.body?.result?.transaction?.actions[0].FunctionCall\\\\\\\\n        .method_name;\\\\\\\\n\\\\\\\\n    const is_edit_or_add_post_transaction =\\\\\\\\n      transaction_method_name == \\\\\\\\\\\\\\\"add_post\\\\\\\\\\\\\\\" ||\\\\\\\\n      transaction_method_name == \\\\\\\\\\\\\\\"edit_post\\\\\\\\\\\\\\\";\\\\\\\\n\\\\\\\\n    if (is_edit_or_add_post_transaction) {\\\\\\\\n      props.onDraftStateChange(null);\\\\\\\\n    }\\\\\\\\n\\\\\\\\n    // show the latest created post to user\\\\\\\\n    if (transaction_method_name == \\\\\\\\\\\\\\\"add_post\\\\\\\\\\\\\\\" && isCreatePostPage) {\\\\\\\\n      setShowPostPage(true);\\\\\\\\n      setPostId(postIdList?.[postIdList?.length - 1]);\\\\\\\\n    }\\\\\\\\n  }\\\\\\\\n}\\\\\\\\n\\\\\\\\nfunction textareaInputHandler(value) {\\\\\\\\n  const words = value.split(/\\\\\\\\\\\\\\\\s+/);\\\\\\\\n  const allMentiones = words\\\\\\\\n    .filter((word) => word.startsWith(\\\\\\\\\\\\\\\"@\\\\\\\\\\\\\\\"))\\\\\\\\n    .map((mention) => mention.slice(1));\\\\\\\\n  const newMentiones = allMentiones.filter(\\\\\\\\n    (item) => !state.mentionsArray.includes(item)\\\\\\\\n  );\\\\\\\\n\\\\\\\\n  State.update((lastKnownState) => ({\\\\\\\\n    ...lastKnownState,\\\\\\\\n    text: value,\\\\\\\\n    showAccountAutocomplete: newMentiones?.length > 0,\\\\\\\\n    mentionsArray: allMentiones,\\\\\\\\n    mentionInput: newMentiones?.[0] ?? \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\",\\\\\\\\n  }));\\\\\\\\n}\\\\\\\\n\\\\\\\\nfunction autoCompleteAccountId(id) {\\\\\\\\n  // to make sure we update the @ at correct index\\\\\\\\n  let currentIndex = 0;\\\\\\\\n  const updatedDescription = state.description.replace(\\\\\\\\n    /(?:^|\\\\\\\\\\\\\\\\s)(@[^\\\\\\\\\\\\\\\\s]*)/g,\\\\\\\\n    (match) => {\\\\\\\\n      if (currentIndex === state.mentionsArray.indexOf(state.mentionInput)) {\\\\\\\\n        currentIndex++;\\\\\\\\n        return ` @${id}`;\\\\\\\\n      } else {\\\\\\\\n        currentIndex++;\\\\\\\\n        return match;\\\\\\\\n      }\\\\\\\\n    }\\\\\\\\n  );\\\\\\\\n  State.update((lastKnownState) => ({\\\\\\\\n    ...lastKnownState,\\\\\\\\n    handler: \\\\\\\\\\\\\\\"autocompleteSelected\\\\\\\\\\\\\\\",\\\\\\\\n    description: updatedDescription,\\\\\\\\n    showAccountAutocomplete: false,\\\\\\\\n  }));\\\\\\\\n}\\\\\\\\n\\\\\\\\n/* END_INCLUDE: \\\\\\\\\\\\\\\"core/lib/autocomplete\\\\\\\\\\\\\\\" */\\\\\\\\n\\\\\\\\nif (!state.draftStateApplied && props.draftState) {\\\\\\\\n  State.update({ ...props.draftState, draftStateApplied: true });\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst typeSwitch = (optionName) => {\\\\\\\\n  State.update({\\\\\\\\n    postType: optionName,\\\\\\\\n    displayFields: fields[optionName],\\\\\\\\n  });\\\\\\\\n};\\\\\\\\n\\\\\\\\n// This must be outside onClick, because Near.view returns null at first, and when the view call finished, it returns true/false.\\\\\\\\n// If checking this inside onClick, it will give `null` and we cannot tell the result is true or false.\\\\\\\\nlet grantNotify = Near.view(\\\\\\\\\\\\\\\"social.near\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"is_write_permission_granted\\\\\\\\\\\\\\\", {\\\\\\\\n  predecessor_id: \\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\",\\\\\\\\n  key: context.accountId + \\\\\\\\\\\\\\\"/index/notify\\\\\\\\\\\\\\\",\\\\\\\\n});\\\\\\\\nif (grantNotify === null) {\\\\\\\\n  return;\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst tokenMapping = {\\\\\\\\n  NEAR: \\\\\\\\\\\\\\\"NEAR\\\\\\\\\\\\\\\",\\\\\\\\n  USDT: {\\\\\\\\n    NEP141: {\\\\\\\\n      address: \\\\\\\\\\\\\\\"usdt.tether-token.near\\\\\\\\\\\\\\\",\\\\\\\\n    },\\\\\\\\n  },\\\\\\\\n  USDC: {\\\\\\\\n    NEP141: {\\\\\\\\n      address:\\\\\\\\n        \\\\\\\\\\\\\\\"17208628f84f5d6ad33f0da3bbbeb27ffcb398eac501a31bd6ad2011e36133a1\\\\\\\\\\\\\\\",\\\\\\\\n    },\\\\\\\\n  },\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst onSubmit = () => {\\\\\\\\n  let labels = state.labelStrings;\\\\\\\\n  var body = {\\\\\\\\n    Comment: { description: state.description, comment_version: \\\\\\\\\\\\\\\"V2\\\\\\\\\\\\\\\" },\\\\\\\\n    Idea: {\\\\\\\\n      name: state.name,\\\\\\\\n      description: state.description,\\\\\\\\n      idea_version: \\\\\\\\\\\\\\\"V1\\\\\\\\\\\\\\\",\\\\\\\\n    },\\\\\\\\n    Solution: {\\\\\\\\n      name: state.name,\\\\\\\\n      description: generateDescription(\\\\\\\\n        state.description,\\\\\\\\n        state.amount,\\\\\\\\n        state.token,\\\\\\\\n        state.supervisor,\\\\\\\\n        state.seekingFunding\\\\\\\\n      ),\\\\\\\\n      solution_version: \\\\\\\\\\\\\\\"V1\\\\\\\\\\\\\\\",\\\\\\\\n    },\\\\\\\\n    Attestation: {\\\\\\\\n      name: state.name,\\\\\\\\n      description: state.description,\\\\\\\\n      attestation_version: \\\\\\\\\\\\\\\"V1\\\\\\\\\\\\\\\",\\\\\\\\n    },\\\\\\\\n    Sponsorship: {\\\\\\\\n      name: state.name,\\\\\\\\n      description: state.description,\\\\\\\\n      amount: state.amount,\\\\\\\\n      sponsorship_token: tokenMapping[state.token],\\\\\\\\n      supervisor: state.supervisor,\\\\\\\\n      sponsorship_version: \\\\\\\\\\\\\\\"V1\\\\\\\\\\\\\\\",\\\\\\\\n    },\\\\\\\\n    Github: {\\\\\\\\n      name: state.name,\\\\\\\\n      description: state.description,\\\\\\\\n      github_version: \\\\\\\\\\\\\\\"V0\\\\\\\\\\\\\\\",\\\\\\\\n      github_link: state.githubLink,\\\\\\\\n    },\\\\\\\\n  }[state.postType];\\\\\\\\n  body[\\\\\\\\\\\\\\\"post_type\\\\\\\\\\\\\\\"] = state.postType;\\\\\\\\n  if (!context.accountId) {\\\\\\\\n    return;\\\\\\\\n  }\\\\\\\\n  let txn = [];\\\\\\\\n  if (mode == \\\\\\\\\\\\\\\"Create\\\\\\\\\\\\\\\") {\\\\\\\\n    props.onDraftStateChange(\\\\\\\\n      Object.assign({}, state, { parent_post_id: parentId })\\\\\\\\n    );\\\\\\\\n    txn.push({\\\\\\\\n      contractName: \\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\",\\\\\\\\n      methodName: \\\\\\\\\\\\\\\"add_post\\\\\\\\\\\\\\\",\\\\\\\\n      args: {\\\\\\\\n        parent_id: parentId,\\\\\\\\n        labels,\\\\\\\\n        body,\\\\\\\\n      },\\\\\\\\n      gas: Big(10).pow(14),\\\\\\\\n    });\\\\\\\\n  } else if (mode == \\\\\\\\\\\\\\\"Edit\\\\\\\\\\\\\\\") {\\\\\\\\n    props.onDraftStateChange(\\\\\\\\n      Object.assign({}, state, { edit_post_id: postId })\\\\\\\\n    );\\\\\\\\n    txn.push({\\\\\\\\n      contractName: \\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\",\\\\\\\\n      methodName: \\\\\\\\\\\\\\\"edit_post\\\\\\\\\\\\\\\",\\\\\\\\n      args: {\\\\\\\\n        id: postId,\\\\\\\\n        labels,\\\\\\\\n        body,\\\\\\\\n      },\\\\\\\\n      gas: Big(10).pow(14),\\\\\\\\n    });\\\\\\\\n  }\\\\\\\\n  if (mode == \\\\\\\\\\\\\\\"Create\\\\\\\\\\\\\\\" || mode == \\\\\\\\\\\\\\\"Edit\\\\\\\\\\\\\\\") {\\\\\\\\n    if (grantNotify === false) {\\\\\\\\n      txn.unshift({\\\\\\\\n        contractName: \\\\\\\\\\\\\\\"social.near\\\\\\\\\\\\\\\",\\\\\\\\n        methodName: \\\\\\\\\\\\\\\"grant_write_permission\\\\\\\\\\\\\\\",\\\\\\\\n        args: {\\\\\\\\n          predecessor_id: \\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\",\\\\\\\\n          keys: [context.accountId + \\\\\\\\\\\\\\\"/index/notify\\\\\\\\\\\\\\\"],\\\\\\\\n        },\\\\\\\\n        gas: Big(10).pow(14),\\\\\\\\n        deposit: Big(10).pow(22),\\\\\\\\n      });\\\\\\\\n    }\\\\\\\\n    Near.call(txn);\\\\\\\\n  }\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst checkLabel = (label) => {\\\\\\\\n  Near.asyncView(\\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"is_allowed_to_use_labels\\\\\\\\\\\\\\\", {\\\\\\\\n    editor: context.accountId,\\\\\\\\n    labels: [label],\\\\\\\\n  }).then((allowed) => {\\\\\\\\n    if (allowed) {\\\\\\\\n      State.update({ warning: \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\" });\\\\\\\\n    } else {\\\\\\\\n      State.update({\\\\\\\\n        warning:\\\\\\\\n          \\\\\\\\\\\\'The label \\\\\\\\\\\\\\\"\\\\\\\\\\\\' +\\\\\\\\n          label +\\\\\\\\n          \\\\\\\\\\\\'\\\\\\\\\\\\\\\" is protected and can only be added by moderators\\\\\\\\\\\\',\\\\\\\\n      });\\\\\\\\n      return;\\\\\\\\n    }\\\\\\\\n  });\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst setLabels = (labels) => {\\\\\\\\n  labels = labels.map((o) => {\\\\\\\\n    o.name = normalize(o.name);\\\\\\\\n    return o;\\\\\\\\n  });\\\\\\\\n  if (labels.length < state.labels.length) {\\\\\\\\n    let oldLabels = new Set(state.labels.map((label) => label.name));\\\\\\\\n    for (let label of labels) {\\\\\\\\n      oldLabels.delete(label.name);\\\\\\\\n    }\\\\\\\\n    let removed = oldLabels.values().next().value;\\\\\\\\n    Near.asyncView(\\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"is_allowed_to_use_labels\\\\\\\\\\\\\\\", {\\\\\\\\n      editor: context.accountId,\\\\\\\\n      labels: [removed],\\\\\\\\n    }).then((allowed) => {\\\\\\\\n      if (allowed) {\\\\\\\\n        let labelStrings = labels.map(({ name }) => name);\\\\\\\\n        State.update({ labels, labelStrings });\\\\\\\\n      } else {\\\\\\\\n        State.update({\\\\\\\\n          warning:\\\\\\\\n            \\\\\\\\\\\\'The label \\\\\\\\\\\\\\\"\\\\\\\\\\\\' +\\\\\\\\n            removed +\\\\\\\\n            \\\\\\\\\\\\'\\\\\\\\\\\\\\\" is protected and can only be updated by moderators\\\\\\\\\\\\',\\\\\\\\n        });\\\\\\\\n        return;\\\\\\\\n      }\\\\\\\\n    });\\\\\\\\n  } else {\\\\\\\\n    let labelStrings = labels.map((o) => {\\\\\\\\n      return o.name;\\\\\\\\n    });\\\\\\\\n    State.update({ labels, labelStrings });\\\\\\\\n  }\\\\\\\\n};\\\\\\\\nconst existingLabelStrings =\\\\\\\\n  Near.view(\\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"get_all_allowed_labels\\\\\\\\\\\\\\\", {\\\\\\\\n    editor: context.accountId,\\\\\\\\n  }) ?? [];\\\\\\\\nconst existingLabelSet = new Set(existingLabelStrings);\\\\\\\\nconst existingLabels = existingLabelStrings\\\\\\\\n  .filter((it) => it !== \\\\\\\\\\\\\\\"blog\\\\\\\\\\\\\\\") // remove blog label so users cannot publish blogs from feed\\\\\\\\n  .map((s) => {\\\\\\\\n    return { name: s };\\\\\\\\n  });\\\\\\\\n\\\\\\\\nconst labelEditor = (\\\\\\\\n  <div className=\\\\\\\\\\\\\\\"col-lg-12  mb-2\\\\\\\\\\\\\\\">\\\\\\\\n    <label htmlFor=\\\\\\\\\\\\\\\"labels\\\\\\\\\\\\\\\" className=\\\\\\\\\\\\\\\"fs-6 fw-bold mb-1\\\\\\\\\\\\\\\">\\\\\\\\n      Labels\\\\\\\\n    </label>\\\\\\\\n    <Typeahead\\\\\\\\n      multiple\\\\\\\\n      labelKey=\\\\\\\\\\\\\\\"name\\\\\\\\\\\\\\\"\\\\\\\\n      onInputChange={checkLabel}\\\\\\\\n      onChange={setLabels}\\\\\\\\n      options={existingLabels}\\\\\\\\n      placeholder=\\\\\\\\\\\\\\\"near.social, widget, NEP, standard, protocol, tool\\\\\\\\\\\\\\\"\\\\\\\\n      selected={state.labels}\\\\\\\\n      positionFixed\\\\\\\\n      allowNew={(results, props) => {\\\\\\\\n        return (\\\\\\\\n          !existingLabelSet.has(props.text) &&\\\\\\\\n          props.text.toLowerCase() !== \\\\\\\\\\\\\\\"blog\\\\\\\\\\\\\\\" && // dont allow adding \\\\\\\\\\\\\\\"Blog\\\\\\\\\\\\\\\"\\\\\\\\n          props.selected.filter((selected) => selected.name === props.text)\\\\\\\\n            .length == 0 &&\\\\\\\\n          Near.view(\\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"is_allowed_to_use_labels\\\\\\\\\\\\\\\", {\\\\\\\\n            editor: context.accountId,\\\\\\\\n            labels: [props.text],\\\\\\\\n          })\\\\\\\\n        );\\\\\\\\n      }}\\\\\\\\n    />\\\\\\\\n  </div>\\\\\\\\n);\\\\\\\\n\\\\\\\\nconst githubLinkDiv = (\\\\\\\\n  <div className=\\\\\\\\\\\\\\\"col-lg-12  mb-2\\\\\\\\\\\\\\\">\\\\\\\\n    Github Issue URL:\\\\\\\\n    <input\\\\\\\\n      type=\\\\\\\\\\\\\\\"text\\\\\\\\\\\\\\\"\\\\\\\\n      value={state.githubLink}\\\\\\\\n      onChange={(event) => State.update({ githubLink: event.target.value })}\\\\\\\\n    />\\\\\\\\n  </div>\\\\\\\\n);\\\\\\\\n\\\\\\\\nconst nameDiv = (\\\\\\\\n  <div className=\\\\\\\\\\\\\\\"col-lg-12  mb-2\\\\\\\\\\\\\\\">\\\\\\\\n    <label htmlFor=\\\\\\\\\\\\\\\"title\\\\\\\\\\\\\\\" className=\\\\\\\\\\\\\\\"fs-6 fw-bold mb-1\\\\\\\\\\\\\\\">\\\\\\\\n      Title\\\\\\\\n    </label>\\\\\\\\n    <input\\\\\\\\n      name=\\\\\\\\\\\\\\\"title\\\\\\\\\\\\\\\"\\\\\\\\n      id=\\\\\\\\\\\\\\\"title\\\\\\\\\\\\\\\"\\\\\\\\n      data-testid=\\\\\\\\\\\\\\\"name-editor\\\\\\\\\\\\\\\"\\\\\\\\n      type=\\\\\\\\\\\\\\\"text\\\\\\\\\\\\\\\"\\\\\\\\n      value={state.name}\\\\\\\\n      onChange={(event) => State.update({ name: event.target.value })}\\\\\\\\n    />\\\\\\\\n  </div>\\\\\\\\n);\\\\\\\\n\\\\\\\\nconst amountDiv = (\\\\\\\\n  <div className=\\\\\\\\\\\\\\\"col-lg-6  mb-2\\\\\\\\\\\\\\\">\\\\\\\\n    Amount:\\\\\\\\n    <input\\\\\\\\n      type=\\\\\\\\\\\\\\\"text\\\\\\\\\\\\\\\"\\\\\\\\n      value={state.amount}\\\\\\\\n      onChange={(event) => State.update({ amount: event.target.value })}\\\\\\\\n    />\\\\\\\\n  </div>\\\\\\\\n);\\\\\\\\n\\\\\\\\nconst tokenDiv = (\\\\\\\\n  <div className=\\\\\\\\\\\\\\\"col-lg-6 mb-2\\\\\\\\\\\\\\\">\\\\\\\\n    Currency\\\\\\\\n    <select\\\\\\\\n      onChange={(event) => State.update({ token: event.target.value })}\\\\\\\\n      class=\\\\\\\\\\\\\\\"form-select\\\\\\\\\\\\\\\"\\\\\\\\n      aria-label=\\\\\\\\\\\\\\\"Select currency\\\\\\\\\\\\\\\"\\\\\\\\n      value={state.token}\\\\\\\\n    >\\\\\\\\n      <option value=\\\\\\\\\\\\\\\"USDT\\\\\\\\\\\\\\\">USDT</option>\\\\\\\\n      <option value=\\\\\\\\\\\\\\\"NEAR\\\\\\\\\\\\\\\">NEAR</option>\\\\\\\\n      <option value=\\\\\\\\\\\\\\\"USDC\\\\\\\\\\\\\\\">USDC</option>\\\\\\\\n    </select>\\\\\\\\n  </div>\\\\\\\\n);\\\\\\\\n\\\\\\\\nconst supervisorDiv = (\\\\\\\\n  <div className=\\\\\\\\\\\\\\\"col-lg-6 mb-2\\\\\\\\\\\\\\\">\\\\\\\\n    Supervisor:\\\\\\\\n    <input\\\\\\\\n      type=\\\\\\\\\\\\\\\"text\\\\\\\\\\\\\\\"\\\\\\\\n      value={state.supervisor}\\\\\\\\n      onChange={(event) => State.update({ supervisor: event.target.value })}\\\\\\\\n    />\\\\\\\\n  </div>\\\\\\\\n);\\\\\\\\n\\\\\\\\nconst callDescriptionDiv = () => {\\\\\\\\n  return (\\\\\\\\n    <div className=\\\\\\\\\\\\\\\"col-lg-12  mb-2\\\\\\\\\\\\\\\">\\\\\\\\n      <label htmlFor=\\\\\\\\\\\\\\\"description\\\\\\\\\\\\\\\" className=\\\\\\\\\\\\\\\"fs-6 fw-bold mb-1\\\\\\\\\\\\\\\">\\\\\\\\n        Description\\\\\\\\n      </label>\\\\\\\\n      <Widget\\\\\\\\n        src={\\\\\\\\\\\\\\\"devhub.near/widget/devhub.components.molecule.MarkdownEditor\\\\\\\\\\\\\\\"}\\\\\\\\n        props={{\\\\\\\\n          data: { handler: state.handler, content: state.description },\\\\\\\\n          onChange: (content) => {\\\\\\\\n            State.update({ description: content, handler: \\\\\\\\\\\\\\\"update\\\\\\\\\\\\\\\" });\\\\\\\\n            textareaInputHandler(content);\\\\\\\\n          },\\\\\\\\n        }}\\\\\\\\n      />\\\\\\\\n      {autocompleteEnabled && state.showAccountAutocomplete && (\\\\\\\\n        <AutoComplete>\\\\\\\\n          <Widget\\\\\\\\n            src=\\\\\\\\\\\\\\\"devhub.near/widget/devhub.components.molecule.AccountAutocomplete\\\\\\\\\\\\\\\"\\\\\\\\n            props={{\\\\\\\\n              term: state.mentionInput,\\\\\\\\n              onSelect: autoCompleteAccountId,\\\\\\\\n              onClose: () => State.update({ showAccountAutocomplete: false }),\\\\\\\\n            }}\\\\\\\\n          />\\\\\\\\n        </AutoComplete>\\\\\\\\n      )}\\\\\\\\n    </div>\\\\\\\\n  );\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst disclaimer = (\\\\\\\\n  <p>\\\\\\\\n    <i>\\\\\\\\n      * Note, all projects that were granted sponsorships are required to pass\\\\\\\\n      KYC to receive the funding.\\\\\\\\n    </i>\\\\\\\\n  </p>\\\\\\\\n);\\\\\\\\n\\\\\\\\nconst isFundraisingDiv = (\\\\\\\\n  // This is jank with just btns and not radios. But the radios were glitchy af\\\\\\\\n  <>\\\\\\\\n    <div class=\\\\\\\\\\\\\\\"mb-2\\\\\\\\\\\\\\\">\\\\\\\\n      <p class=\\\\\\\\\\\\\\\"fs-6 fw-bold mb-1\\\\\\\\\\\\\\\">\\\\\\\\n        Are you seeking funding for your solution?\\\\\\\\n        <span class=\\\\\\\\\\\\\\\"text-muted fw-normal\\\\\\\\\\\\\\\">(Optional)</span>\\\\\\\\n      </p>\\\\\\\\n      <div class=\\\\\\\\\\\\\\\"form-check form-check-inline\\\\\\\\\\\\\\\">\\\\\\\\n        <label class=\\\\\\\\\\\\\\\"form-check-label\\\\\\\\\\\\\\\">\\\\\\\\n          <button\\\\\\\\n            className=\\\\\\\\\\\\\\\"btn btn-light p-0\\\\\\\\\\\\\\\"\\\\\\\\n            style={{\\\\\\\\n              backgroundColor: state.seekingFunding ? \\\\\\\\\\\\\\\"#0C7283\\\\\\\\\\\\\\\" : \\\\\\\\\\\\\\\"inherit\\\\\\\\\\\\\\\",\\\\\\\\n              color: \\\\\\\\\\\\\\\"#f3f3f3\\\\\\\\\\\\\\\",\\\\\\\\n              border: \\\\\\\\\\\\\\\"solid #D9D9D9\\\\\\\\\\\\\\\",\\\\\\\\n              borderRadius: \\\\\\\\\\\\\\\"100%\\\\\\\\\\\\\\\",\\\\\\\\n              height: \\\\\\\\\\\\\\\"20px\\\\\\\\\\\\\\\",\\\\\\\\n              width: \\\\\\\\\\\\\\\"20px\\\\\\\\\\\\\\\",\\\\\\\\n            }}\\\\\\\\n            onClick={() => State.update({ seekingFunding: true })}\\\\\\\\n          />\\\\\\\\n          Yes\\\\\\\\n        </label>\\\\\\\\n      </div>\\\\\\\\n      <div class=\\\\\\\\\\\\\\\"form-check form-check-inline\\\\\\\\\\\\\\\">\\\\\\\\n        <label class=\\\\\\\\\\\\\\\"form-check-label\\\\\\\\\\\\\\\">\\\\\\\\n          <button\\\\\\\\n            className=\\\\\\\\\\\\\\\"btn btn-light p-0\\\\\\\\\\\\\\\"\\\\\\\\n            style={{\\\\\\\\n              backgroundColor: !state.seekingFunding ? \\\\\\\\\\\\\\\"#0C7283\\\\\\\\\\\\\\\" : \\\\\\\\\\\\\\\"inherit\\\\\\\\\\\\\\\",\\\\\\\\n              color: \\\\\\\\\\\\\\\"#f3f3f3\\\\\\\\\\\\\\\",\\\\\\\\n              border: \\\\\\\\\\\\\\\"solid #D9D9D9\\\\\\\\\\\\\\\",\\\\\\\\n              borderRadius: \\\\\\\\\\\\\\\"100%\\\\\\\\\\\\\\\",\\\\\\\\n              height: \\\\\\\\\\\\\\\"20px\\\\\\\\\\\\\\\",\\\\\\\\n              width: \\\\\\\\\\\\\\\"20px\\\\\\\\\\\\\\\",\\\\\\\\n            }}\\\\\\\\n            onClick={() => State.update({ seekingFunding: false })}\\\\\\\\n          />\\\\\\\\n          No\\\\\\\\n        </label>\\\\\\\\n      </div>\\\\\\\\n    </div>\\\\\\\\n  </>\\\\\\\\n);\\\\\\\\n\\\\\\\\nconst fundraisingDiv = (\\\\\\\\n  <div class=\\\\\\\\\\\\\\\"d-flex flex-column mb-2\\\\\\\\\\\\\\\">\\\\\\\\n    <div className=\\\\\\\\\\\\\\\"col-lg-6 mb-2\\\\\\\\\\\\\\\">\\\\\\\\n      Currency\\\\\\\\n      <select\\\\\\\\n        onChange={(event) => State.update({ token: event.target.value })}\\\\\\\\n        class=\\\\\\\\\\\\\\\"form-select\\\\\\\\\\\\\\\"\\\\\\\\n        aria-label=\\\\\\\\\\\\\\\"Default select example\\\\\\\\\\\\\\\"\\\\\\\\n        value={state.token}\\\\\\\\n      >\\\\\\\\n        <option value=\\\\\\\\\\\\\\\"USDT\\\\\\\\\\\\\\\">USDT</option>\\\\\\\\n        <option value=\\\\\\\\\\\\\\\"NEAR\\\\\\\\\\\\\\\">NEAR</option>\\\\\\\\n        <option value=\\\\\\\\\\\\\\\"USDC\\\\\\\\\\\\\\\">USDC</option>\\\\\\\\n      </select>\\\\\\\\n    </div>\\\\\\\\n    <div className=\\\\\\\\\\\\\\\"col-lg-6 mb-2\\\\\\\\\\\\\\\">\\\\\\\\n      Requested amount\\\\\\\\n      <span class=\\\\\\\\\\\\\\\"text-muted fw-normal\\\\\\\\\\\\\\\">(Numbers Only)</span>\\\\\\\\n      <input\\\\\\\\n        data-testid=\\\\\\\\\\\\\\\"requested-amount-editor\\\\\\\\\\\\\\\"\\\\\\\\n        type=\\\\\\\\\\\\\\\"number\\\\\\\\\\\\\\\"\\\\\\\\n        value={parseInt(state.amount) > 0 ? state.amount : \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\"}\\\\\\\\n        min={0}\\\\\\\\n        onChange={(event) => {\\\\\\\\n          State.update({\\\\\\\\n            amount: Number(\\\\\\\\n              event.target.value.toString().replace(/e/g, \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\")\\\\\\\\n            ).toString(),\\\\\\\\n          });\\\\\\\\n        }}\\\\\\\\n      />\\\\\\\\n    </div>\\\\\\\\n    <div className=\\\\\\\\\\\\\\\"col-lg-6 mb-2\\\\\\\\\\\\\\\">\\\\\\\\n      <p class=\\\\\\\\\\\\\\\"mb-1\\\\\\\\\\\\\\\">\\\\\\\\n        Requested sponsor\\\\\\\\n        <span class=\\\\\\\\\\\\\\\"text-muted fw-normal\\\\\\\\\\\\\\\">(Optional)</span>\\\\\\\\n      </p>\\\\\\\\n      <p style={{ fontSize: \\\\\\\\\\\\\\\"13px\\\\\\\\\\\\\\\" }} class=\\\\\\\\\\\\\\\"m-0 text-muted fw-light\\\\\\\\\\\\\\\">\\\\\\\\n        If you are requesting funding from a specific sponsor, please enter\\\\\\\\n        their username.\\\\\\\\n      </p>\\\\\\\\n      <div class=\\\\\\\\\\\\\\\"input-group flex-nowrap\\\\\\\\\\\\\\\">\\\\\\\\n        <span class=\\\\\\\\\\\\\\\"input-group-text\\\\\\\\\\\\\\\" id=\\\\\\\\\\\\\\\"addon-wrapping\\\\\\\\\\\\\\\">\\\\\\\\n          @\\\\\\\\n        </span>\\\\\\\\n        <input\\\\\\\\n          type=\\\\\\\\\\\\\\\"text\\\\\\\\\\\\\\\"\\\\\\\\n          class=\\\\\\\\\\\\\\\"form-control\\\\\\\\\\\\\\\"\\\\\\\\n          placeholder=\\\\\\\\\\\\\\\"Enter username\\\\\\\\\\\\\\\"\\\\\\\\n          value={state.supervisor}\\\\\\\\n          onChange={(event) => State.update({ supervisor: event.target.value })}\\\\\\\\n        />\\\\\\\\n      </div>\\\\\\\\n    </div>\\\\\\\\n  </div>\\\\\\\\n);\\\\\\\\n\\\\\\\\nfunction generateDescription(text, amount, token, supervisor, seekingFunding) {\\\\\\\\n  const fundingText =\\\\\\\\n    amount > 0 && token ? `###### Requested amount: ${amount} ${token}\\\\\\\\\\\\\\\\n` : \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\";\\\\\\\\n  const supervisorText = supervisor\\\\\\\\n    ? `###### Requested sponsor: @${supervisor}\\\\\\\\\\\\\\\\n`\\\\\\\\n    : \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\";\\\\\\\\n  return seekingFunding ? `${fundingText}${supervisorText}${text}` : text;\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst [tab, setTab] = useState(\\\\\\\\\\\\\\\"editor\\\\\\\\\\\\\\\");\\\\\\\\n\\\\\\\\nconst renamedPostType =\\\\\\\\n  state.postType == \\\\\\\\\\\\\\\"Submission\\\\\\\\\\\\\\\" ? \\\\\\\\\\\\\\\"Solution\\\\\\\\\\\\\\\" : state.postType;\\\\\\\\n// Below there is a weird code with fields.includes(\\\\\\\\\\\\\\\"githubLink\\\\\\\\\\\\\\\") ternary operator.\\\\\\\\n// This is to hack around rendering bug of near.social.\\\\\\\\n\\\\\\\\nreturn (\\\\\\\\n  <div className=\\\\\\\\\\\\\\\"d-flex flex-column flex-grow-1 w-100\\\\\\\\\\\\\\\">\\\\\\\\n    <div className=\\\\\\\\\\\\\\\"mx-2 mx-md-5 mb-5\\\\\\\\\\\\\\\">\\\\\\\\n      {showPostPage ? (\\\\\\\\n        <Widget\\\\\\\\n          src={\\\\\\\\\\\\\\\"devhub.near/widget/devhub.entity.post.Post\\\\\\\\\\\\\\\"}\\\\\\\\n          props={{\\\\\\\\n            id: postId,\\\\\\\\n            expandable: true,\\\\\\\\n            defaultExpanded: false,\\\\\\\\n            isInList: true,\\\\\\\\n            isPreview: false,\\\\\\\\n            onDraftStateChange: props.onDraftStateChange,\\\\\\\\n            referral: postId,\\\\\\\\n            transactionHashes: props.transactionHashes,\\\\\\\\n          }}\\\\\\\\n        />\\\\\\\\n      ) : (\\\\\\\\n        <div className=\\\\\\\\\\\\\\\"card\\\\\\\\\\\\\\\">\\\\\\\\n          <div className=\\\\\\\\\\\\\\\"card-header\\\\\\\\\\\\\\\">\\\\\\\\n            <div>\\\\\\\\n              <ul class=\\\\\\\\\\\\\\\"nav nav-tabs\\\\\\\\\\\\\\\">\\\\\\\\n                <li class=\\\\\\\\\\\\\\\"nav-item\\\\\\\\\\\\\\\">\\\\\\\\n                  <button\\\\\\\\n                    class={`nav-link ${tab === \\\\\\\\\\\\\\\"editor\\\\\\\\\\\\\\\" ? \\\\\\\\\\\\\\\"active\\\\\\\\\\\\\\\" : \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\"}`}\\\\\\\\n                    onClick={() => setTab(\\\\\\\\\\\\\\\"editor\\\\\\\\\\\\\\\")}\\\\\\\\n                  >\\\\\\\\n                    Editor\\\\\\\\n                  </button>\\\\\\\\n                </li>\\\\\\\\n                <li class=\\\\\\\\\\\\\\\"nav-item\\\\\\\\\\\\\\\">\\\\\\\\n                  <button\\\\\\\\n                    class={`nav-link ${tab === \\\\\\\\\\\\\\\"preview\\\\\\\\\\\\\\\" ? \\\\\\\\\\\\\\\"active\\\\\\\\\\\\\\\" : \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\"}`}\\\\\\\\n                    onClick={() => setTab(\\\\\\\\\\\\\\\"preview\\\\\\\\\\\\\\\")}\\\\\\\\n                  >\\\\\\\\n                    Preview\\\\\\\\n                  </button>\\\\\\\\n                </li>\\\\\\\\n              </ul>\\\\\\\\n            </div>\\\\\\\\n            {!isCreatePostPage && tab === \\\\\\\\\\\\\\\"editor\\\\\\\\\\\\\\\" && (\\\\\\\\n              <div className=\\\\\\\\\\\\\\\"my-3\\\\\\\\\\\\\\\">\\\\\\\\n                {mode} {renamedPostType}\\\\\\\\n              </div>\\\\\\\\n            )}\\\\\\\\n            {tab === \\\\\\\\\\\\\\\"preview\\\\\\\\\\\\\\\" && <div className=\\\\\\\\\\\\\\\"my-3\\\\\\\\\\\\\\\">Post Preview</div>}\\\\\\\\n          </div>\\\\\\\\n          <div class=\\\\\\\\\\\\\\\"card-body\\\\\\\\\\\\\\\">\\\\\\\\n            {tab === \\\\\\\\\\\\\\\"editor\\\\\\\\\\\\\\\" && (\\\\\\\\n              <>\\\\\\\\n                {state.warning && (\\\\\\\\n                  <div\\\\\\\\n                    class=\\\\\\\\\\\\\\\"alert alert-warning alert-dismissible fade show\\\\\\\\\\\\\\\"\\\\\\\\n                    role=\\\\\\\\\\\\\\\"alert\\\\\\\\\\\\\\\"\\\\\\\\n                  >\\\\\\\\n                    {state.warning}\\\\\\\\n                    <button\\\\\\\\n                      type=\\\\\\\\\\\\\\\"button\\\\\\\\\\\\\\\"\\\\\\\\n                      class=\\\\\\\\\\\\\\\"btn-close\\\\\\\\\\\\\\\"\\\\\\\\n                      data-bs-dismiss=\\\\\\\\\\\\\\\"alert\\\\\\\\\\\\\\\"\\\\\\\\n                      aria-label=\\\\\\\\\\\\\\\"Close\\\\\\\\\\\\\\\"\\\\\\\\n                      onClick={() => State.update({ warning: \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\" })}\\\\\\\\n                    ></button>\\\\\\\\n                  </div>\\\\\\\\n                )}\\\\\\\\n                {isCreatePostPage && (\\\\\\\\n                  <div>\\\\\\\\n                    <p class=\\\\\\\\\\\\\\\"card-title fw-bold fs-6\\\\\\\\\\\\\\\">\\\\\\\\n                      What do you want to create?\\\\\\\\n                    </p>\\\\\\\\n                    <div class=\\\\\\\\\\\\\\\"d-flex flex-row gap-2\\\\\\\\\\\\\\\">\\\\\\\\n                      {Object.values(postTypeOptions).map((option) => (\\\\\\\\n                        <button\\\\\\\\n                          className={`btn btn-${\\\\\\\\n                            state.postType === option.name\\\\\\\\n                              ? \\\\\\\\\\\\\\\"primary\\\\\\\\\\\\\\\"\\\\\\\\n                              : \\\\\\\\\\\\\\\"outline-secondary\\\\\\\\\\\\\\\"\\\\\\\\n                          }`}\\\\\\\\n                          data-testid={`btn-${option.name.toLowerCase()}`}\\\\\\\\n                          key={option.name}\\\\\\\\n                          onClick={() => typeSwitch(option.name)}\\\\\\\\n                          style={\\\\\\\\n                            state.postType === option.name\\\\\\\\n                              ? {\\\\\\\\n                                  backgroundColor: \\\\\\\\\\\\\\\"#0C7283\\\\\\\\\\\\\\\",\\\\\\\\n                                  color: \\\\\\\\\\\\\\\"#f3f3f3\\\\\\\\\\\\\\\",\\\\\\\\n                                }\\\\\\\\n                              : null\\\\\\\\n                          }\\\\\\\\n                          type=\\\\\\\\\\\\\\\"button\\\\\\\\\\\\\\\"\\\\\\\\n                        >\\\\\\\\n                          <i className={`bi ${option.icon}`} />\\\\\\\\n                          <span>{option.name}</span>\\\\\\\\n                        </button>\\\\\\\\n                      ))}\\\\\\\\n                    </div>\\\\\\\\n                    <p class=\\\\\\\\\\\\\\\"text-muted w-75 my-1\\\\\\\\\\\\\\\">\\\\\\\\n                      {postTypeOptions[state.postType].description}\\\\\\\\n                    </p>\\\\\\\\n                  </div>\\\\\\\\n                )}\\\\\\\\n                {/* This statement around the githubLinkDiv creates a weird render bug\\\\\\\\n      where the title renders extra on state change. */}\\\\\\\\n                {state.displayFields.includes(\\\\\\\\\\\\\\\"githubLink\\\\\\\\\\\\\\\") ? (\\\\\\\\n                  <div className=\\\\\\\\\\\\\\\"row\\\\\\\\\\\\\\\">\\\\\\\\n                    {state.displayFields.includes(\\\\\\\\\\\\\\\"githubLink\\\\\\\\\\\\\\\") &&\\\\\\\\n                      githubLinkDiv}\\\\\\\\n                    {labelEditor}\\\\\\\\n                    {state.displayFields.includes(\\\\\\\\\\\\\\\"name\\\\\\\\\\\\\\\") && nameDiv}\\\\\\\\n                    {state.displayFields.includes(\\\\\\\\\\\\\\\"description\\\\\\\\\\\\\\\") &&\\\\\\\\n                      callDescriptionDiv()}\\\\\\\\n                  </div>\\\\\\\\n                ) : (\\\\\\\\n                  <div className=\\\\\\\\\\\\\\\"row\\\\\\\\\\\\\\\">\\\\\\\\n                    {labelEditor}\\\\\\\\n                    {state.displayFields.includes(\\\\\\\\\\\\\\\"name\\\\\\\\\\\\\\\") && nameDiv}\\\\\\\\n                    {state.displayFields.includes(\\\\\\\\\\\\\\\"amount\\\\\\\\\\\\\\\") && amountDiv}\\\\\\\\n                    {state.displayFields.includes(\\\\\\\\\\\\\\\"sponsorship_token\\\\\\\\\\\\\\\") &&\\\\\\\\n                      tokenDiv}\\\\\\\\n                    {state.displayFields.includes(\\\\\\\\\\\\\\\"supervisor\\\\\\\\\\\\\\\") &&\\\\\\\\n                      supervisorDiv}\\\\\\\\n                    {state.displayFields.includes(\\\\\\\\\\\\\\\"description\\\\\\\\\\\\\\\") &&\\\\\\\\n                      callDescriptionDiv()}\\\\\\\\n                    {state.displayFields.includes(\\\\\\\\\\\\\\\"fund_raising\\\\\\\\\\\\\\\") &&\\\\\\\\n                      isFundraisingDiv}\\\\\\\\n                    {state.seekingFunding &&\\\\\\\\n                      state.displayFields.includes(\\\\\\\\\\\\\\\"fund_raising\\\\\\\\\\\\\\\") &&\\\\\\\\n                      fundraisingDiv}\\\\\\\\n                  </div>\\\\\\\\n                )}\\\\\\\\n\\\\\\\\n                {disclaimer}\\\\\\\\n              </>\\\\\\\\n            )}\\\\\\\\n            {tab === \\\\\\\\\\\\\\\"preview\\\\\\\\\\\\\\\" && (\\\\\\\\n              <div className=\\\\\\\\\\\\\\\"mb-2\\\\\\\\\\\\\\\">\\\\\\\\n                <Widget\\\\\\\\n                  src=\\\\\\\\\\\\\\\"devhub.near/widget/devhub.entity.post.Post\\\\\\\\\\\\\\\"\\\\\\\\n                  props={{\\\\\\\\n                    isPreview: true,\\\\\\\\n                    id: 0, // irrelevant\\\\\\\\n                    post: {\\\\\\\\n                      author_id: state.author_id,\\\\\\\\n                      likes: [],\\\\\\\\n                      snapshot: {\\\\\\\\n                        editor_id: state.editor_id,\\\\\\\\n                        labels: state.labelStrings,\\\\\\\\n                        post_type: postType,\\\\\\\\n                        name: state.name,\\\\\\\\n                        description:\\\\\\\\n                          state.postType == \\\\\\\\\\\\\\\"Solution\\\\\\\\\\\\\\\"\\\\\\\\n                            ? generateDescription(\\\\\\\\n                                state.description,\\\\\\\\n                                state.amount,\\\\\\\\n                                state.token,\\\\\\\\n                                state.supervisor,\\\\\\\\n                                state.seekingFunding\\\\\\\\n                              )\\\\\\\\n                            : state.description,\\\\\\\\n                        amount: state.amount,\\\\\\\\n                        sponsorship_token: state.token,\\\\\\\\n                        supervisor: state.supervisor,\\\\\\\\n                        github_link: state.githubLink,\\\\\\\\n                      },\\\\\\\\n                    },\\\\\\\\n                  }}\\\\\\\\n                />\\\\\\\\n              </div>\\\\\\\\n            )}\\\\\\\\n            <button\\\\\\\\n              data-testid=\\\\\\\\\\\\\\\"submit-create-post\\\\\\\\\\\\\\\"\\\\\\\\n              style={{\\\\\\\\n                width: \\\\\\\\\\\\\\\"7rem\\\\\\\\\\\\\\\",\\\\\\\\n                backgroundColor: \\\\\\\\\\\\\\\"#0C7283\\\\\\\\\\\\\\\",\\\\\\\\n                color: \\\\\\\\\\\\\\\"#f3f3f3\\\\\\\\\\\\\\\",\\\\\\\\n              }}\\\\\\\\n              disabled={\\\\\\\\n                (state.seekingFunding && (!state.amount || state.amount < 1)) ||\\\\\\\\n                (isCreatePostPage &&\\\\\\\\n                  (state.name === \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\" || state.description === \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\"))\\\\\\\\n              }\\\\\\\\n              className=\\\\\\\\\\\\\\\"btn btn-light mb-2 p-3\\\\\\\\\\\\\\\"\\\\\\\\n              onClick={onSubmit}\\\\\\\\n            >\\\\\\\\n              Submit\\\\\\\\n            </button>\\\\\\\\n            {!isCreatePostPage && (\\\\\\\\n              <button\\\\\\\\n                style={{\\\\\\\\n                  width: \\\\\\\\\\\\\\\"7rem\\\\\\\\\\\\\\\",\\\\\\\\n                  backgroundColor: \\\\\\\\\\\\\\\"#fff\\\\\\\\\\\\\\\",\\\\\\\\n                  color: \\\\\\\\\\\\\\\"#000\\\\\\\\\\\\\\\",\\\\\\\\n                }}\\\\\\\\n                className=\\\\\\\\\\\\\\\"btn btn-light mb-2 p-3\\\\\\\\\\\\\\\"\\\\\\\\n                onClick={() => props.setEditorState(false)}\\\\\\\\n              >\\\\\\\\n                Cancel\\\\\\\\n              </button>\\\\\\\\n            )}\\\\\\\\n          </div>\\\\\\\\n        </div>\\\\\\\\n      )}\\\\\\\\n    </div>\\\\\\\\n  </div>\\\\\\\\n);\\\\\\\\n\"}, \"devhub.entity.community.Sidebar\": {\"\": \"const { href } = VM.require(\\\\\\\\\\\\\\\"devhub.near/widget/core.lib.url\\\\\\\\\\\\\\\");\\\\\\\\n\\\\\\\\nif (!href) {\\\\\\\\n  return <p>Loading modules...</p>;\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst { community } = props;\\\\\\\\n\\\\\\\\nconst CommunitySummary = () => {\\\\\\\\n  return (\\\\\\\\n    <>\\\\\\\\n      <Widget\\\\\\\\n        src={\\\\\\\\\\\\\\\"devhub.near/widget/devhub.components.molecule.MarkdownViewer\\\\\\\\\\\\\\\"}\\\\\\\\n        props={{\\\\\\\\n          text: community.bio_markdown,\\\\\\\\n        }}\\\\\\\\n      />\\\\\\\\n      <small class=\\\\\\\\\\\\\\\"text-muted mb-3\\\\\\\\\\\\\\\">\\\\\\\\n        <Link\\\\\\\\n          to={href({\\\\\\\\n            widgetSrc: \\\\\\\\\\\\\\\"devhub.near/widget/app\\\\\\\\\\\\\\\",\\\\\\\\n            params: { page: \\\\\\\\\\\\\\\"feed\\\\\\\\\\\\\\\", tag: community.tag },\\\\\\\\n          })}\\\\\\\\n        >\\\\\\\\n          <Widget\\\\\\\\n            src={\\\\\\\\\\\\\\\"devhub.near/widget/devhub.components.atom.Tag\\\\\\\\\\\\\\\"}\\\\\\\\n            props={{ tag: community.tag }}\\\\\\\\n          />\\\\\\\\n        </Link>\\\\\\\\n      </small>\\\\\\\\n    </>\\\\\\\\n  );\\\\\\\\n};\\\\\\\\n\\\\\\\\nreturn community === null ? (\\\\\\\\n  <div>Loading...</div>\\\\\\\\n) : (\\\\\\\\n  <div class=\\\\\\\\\\\\\\\"d-flex flex-column align-items-end\\\\\\\\\\\\\\\">\\\\\\\\n    <Widget\\\\\\\\n      src={\\\\\\\\\\\\\\\"devhub.near/widget/devhub.entity.community.Tile\\\\\\\\\\\\\\\"}\\\\\\\\n      props={{\\\\\\\\n        fullWidth: true,\\\\\\\\n        minHeight: 0,\\\\\\\\n        children: <CommunitySummary />,\\\\\\\\n        style: { marginTop: \\\\\\\\\\\\\\\"0.5rem\\\\\\\\\\\\\\\" },\\\\\\\\n      }}\\\\\\\\n    />\\\\\\\\n\\\\\\\\n    <Widget\\\\\\\\n      src={\\\\\\\\\\\\\\\"devhub.near/widget/devhub.entity.community.Tile\\\\\\\\\\\\\\\"}\\\\\\\\n      props={{\\\\\\\\n        heading: \\\\\\\\\\\\\\\"Admins\\\\\\\\\\\\\\\",\\\\\\\\n\\\\\\\\n        children: (community?.admins ?? []).map((accountId) => (\\\\\\\\n          <div key={accountId} className=\\\\\\\\\\\\\\\"d-flex\\\\\\\\\\\\\\\" style={{ fontWeight: 500 }}>\\\\\\\\n            <Widget\\\\\\\\n              src=\\\\\\\\\\\\\\\"devhub.near/widget/devhub.components.molecule.ProfileCard\\\\\\\\\\\\\\\"\\\\\\\\n              props={{ accountId }}\\\\\\\\n            />\\\\\\\\n          </div>\\\\\\\\n        )),\\\\\\\\n\\\\\\\\n        fullWidth: true,\\\\\\\\n        minHeight: 0,\\\\\\\\n      }}\\\\\\\\n    />\\\\\\\\n  </div>\\\\\\\\n);\\\\\\\\n\"}}}}}"
      }
    ],
    "actions_agg": {
      "deposit": 0
    },
    "outcomes": {
      "status": true
    },
    "outcomes_agg": {
      "transaction_fee": 2.5190225214063e+21
    }
  },
  {
    "id": "2006512106",
    "receipt_id": "8BycuSqVkFTj1wr3P4pHZdDSQBVubsydtzRfF1eJU2nz",
    "predecessor_account_id": "system",
    "receiver_account_id": "devhub.near",
    "receipt_kind": "ACTION",
    "receipt_block": {
      "block_hash": "2f8uUyopnvRPWYP4FFBUU6Pw1azNNaqeM9kBWvammYdL",
      "block_height": 109579772,
      "block_timestamp": 1704381671354961700
    },
    "receipt_outcome": {
      "gas_burnt": 223182562500,
      "tokens_burnt": 0,
      "executor_account_id": "devhub.near",
      "status": true
    },
    "transaction_hash": "6aFfv3RpTi7YPGpcErP1BPG8odb7AhFXJxnEH5Yuqtrv",
    "included_in_block_hash": "7t6gXoWhcFb1YdjZfNSD46VQQHTov4UQchmxJRjsr64b",
    "block_timestamp": "1704381669208666957",
    "block": {
      "block_height": 109579770
    },
    "receipt_conversion_tokens_burnt": "257488223401800000000",
    "actions": [
      {
        "action": "TRANSFER",
        "method": null,
        "deposit": 1.8685992274157563e+23,
        "fee": 0,
        "args": null
      }
    ],
    "actions_agg": {
      "deposit": 0
    },
    "outcomes": {
      "status": true
    },
    "outcomes_agg": {
      "transaction_fee": 2.5190225214063e+21
    }
  },
  {
    "id": "2014013949",
    "receipt_id": "DT5T7yeJsfo2Zh7a1FdhzxFdUPFKwFiwmwHXUJomqQaw",
    "predecessor_account_id": "devhub.near",
    "receiver_account_id": "social.near",
    "receipt_kind": "ACTION",
    "receipt_block": {
      "block_hash": "8LeYm3o2KBkjn44owpCQDH3axrajAUfuBuirk7MUFToF",
      "block_height": 109639865,
      "block_timestamp": 1704444166193479700
    },
    "receipt_outcome": {
      "gas_burnt": 31423155686449,
      "tokens_burnt": 3.1423155686449e+21,
      "executor_account_id": "social.near",
      "status": true
    },
    "transaction_hash": "E3gFX7FdpWWhU6SWVAFGzmvYCX269f58tYh3LpdD2r5s",
    "included_in_block_hash": "5gbwaJmb4zKvQnAdWCvDaCCw6aJnFJYZS7jxGWXv5sV",
    "block_timestamp": "1704444165217260817",
    "block": {
      "block_height": 109639864
    },
    "receipt_conversion_tokens_burnt": "259999848064000000000",
    "actions": [
      {
        "action": "FUNCTION_CALL",
        "method": "set",
        "deposit": 0,
        "fee": 3.1423155686449e+21,
        "args": "{\"data\": {\"devhub.near\": {\"widget\": {\"core.lib.uuid\": {\"\": \"const uuid = () =>\\\\\\\\n  [Date.now().toString(16)]\\\\\\\\n    .concat(\\\\\\\\n      Array.from(\\\\\\\\n        { length: 4 },\\\\\\\\n        () => Math.floor(Math.random() * 0xffffffff) & 0xffffffff\\\\\\\\n      ).map((value) => value.toString(16))\\\\\\\\n    )\\\\\\\\n    .join(\\\\\\\\\\\\\\\"-\\\\\\\\\\\\\\\");\\\\\\\\n\\\\\\\\nconst withUUIDIndex = (data) => {\\\\\\\\n  const id = uuid();\\\\\\\\n\\\\\\\\n  return Object.fromEntries([[id, { ...data, id }]]);\\\\\\\\n};\\\\\\\\n\\\\\\\\nreturn { uuid, withUUIDIndex };\\\\\\\\n\"}, \"core.lib.struct\": {\"\": \"/**\\\\\\\\n * Deeply updates an object\\\\\\\\\\\\'s field based on the given path and transformation function.\\\\\\\\n *\\\\\\\\n * @param {Object} target - The target object to update.\\\\\\\\n * @param {Array} path - The path to the field to update.\\\\\\\\n * @param {Function} transform - The transformation function to apply.\\\\\\\\n * @returns {Object} - The updated object.\\\\\\\\n */\\\\\\\\nconst deepFieldUpdate = (target, path, transform) => {\\\\\\\\n  if (path.length === 0) {\\\\\\\\n    return transform(target);\\\\\\\\n  }\\\\\\\\n\\\\\\\\n  const [nextNodeKey, ...remainingPath] = path;\\\\\\\\n\\\\\\\\n  return {\\\\\\\\n    ...target,\\\\\\\\n    [nextNodeKey]: deepFieldUpdate(\\\\\\\\n      target[nextNodeKey] ?? {},\\\\\\\\n      remainingPath,\\\\\\\\n      transform\\\\\\\\n    ),\\\\\\\\n  };\\\\\\\\n};\\\\\\\\n\\\\\\\\n/**\\\\\\\\n * Checks if two inputs (objects or arrays) are deeply equal.\\\\\\\\n *\\\\\\\\n * @param {Object|Array} input1 - The first input.\\\\\\\\n * @param {Object|Array} input2 - The second input.\\\\\\\\n * @returns {boolean} - True if the inputs are deeply equal, false otherwise.\\\\\\\\n */\\\\\\\\nconst isEqual = (input1, input2) => {\\\\\\\\n  const input1Str = JSON.stringify(input1);\\\\\\\\n  const input2Str = JSON.stringify(input2);\\\\\\\\n  return input1Str === input2Str;\\\\\\\\n};\\\\\\\\n\\\\\\\\n/**\\\\\\\\n * Creates a new object with sorted keys based on the input object.\\\\\\\\n *\\\\\\\\n * @param {Object} input - The input object.\\\\\\\\n * @returns {Object} - A new object with sorted keys.\\\\\\\\n */\\\\\\\\nconst toOrdered = (input) => {\\\\\\\\n  if (typeof input !== \\\\\\\\\\\\\\\"object\\\\\\\\\\\\\\\" || input === null) {\\\\\\\\n    return {};\\\\\\\\n  }\\\\\\\\n\\\\\\\\n  return Object.keys(input)\\\\\\\\n    .sort()\\\\\\\\n    .reduce((output, key) => ({ ...output, [key]: input[key] }), {});\\\\\\\\n};\\\\\\\\n\\\\\\\\n/**\\\\\\\\n * Picks specified keys from an object and returns a new object with those keys.\\\\\\\\n *\\\\\\\\n * @param {Object} sourceObject - The source object to pick keys from.\\\\\\\\n * @param {Array} keysToPick - An array of keys to pick.\\\\\\\\n * @returns {Object} - A new object containing the selected keys.\\\\\\\\n */\\\\\\\\nconst pick = (sourceObject, keysToPick) => {\\\\\\\\n  if (typeof sourceObject !== \\\\\\\\\\\\\\\"object\\\\\\\\\\\\\\\" || sourceObject === null) {\\\\\\\\n    return {};\\\\\\\\n  }\\\\\\\\n\\\\\\\\n  return Object.fromEntries(\\\\\\\\n    Object.entries(sourceObject).filter(([key, _]) => keysToPick.includes(key))\\\\\\\\n  );\\\\\\\\n};\\\\\\\\n\\\\\\\\n/**\\\\\\\\n * Checks if the input matches the expected type.\\\\\\\\n *\\\\\\\\n * @param {Object} input - The input to check.\\\\\\\\n * @returns {boolean} - True if the input is an object and not an array or null, false otherwise.\\\\\\\\n */\\\\\\\\nconst typeMatch = (input) =>\\\\\\\\n  input !== null && typeof input === \\\\\\\\\\\\\\\"object\\\\\\\\\\\\\\\" && !Array.isArray(input);\\\\\\\\n\\\\\\\\nconst defaultFieldUpdate = ({\\\\\\\\n  input,\\\\\\\\n  lastKnownValue,\\\\\\\\n  params: { arrayDelimiter },\\\\\\\\n}) => {\\\\\\\\n  switch (typeof input) {\\\\\\\\n    case \\\\\\\\\\\\\\\"boolean\\\\\\\\\\\\\\\":\\\\\\\\n      return input;\\\\\\\\n\\\\\\\\n    case \\\\\\\\\\\\\\\"object\\\\\\\\\\\\\\\": {\\\\\\\\n      if (Array.isArray(input) && typeof lastKnownValue === \\\\\\\\\\\\\\\"string\\\\\\\\\\\\\\\") {\\\\\\\\n        return input.join(arrayDelimiter ?? \\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\");\\\\\\\\n      } else {\\\\\\\\n        return Array.isArray(lastKnownValue)\\\\\\\\n          ? [...lastKnownValue, ...input]\\\\\\\\n          : { ...lastKnownValue, ...input };\\\\\\\\n      }\\\\\\\\n    }\\\\\\\\n\\\\\\\\n    case \\\\\\\\\\\\\\\"string\\\\\\\\\\\\\\\":\\\\\\\\n      return Array.isArray(lastKnownValue)\\\\\\\\n        ? input.split(arrayDelimiter ?? \\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\").map((string) => string.trim())\\\\\\\\n        : input;\\\\\\\\n\\\\\\\\n    default: {\\\\\\\\n      if ((input ?? null) === null) {\\\\\\\\n        switch (typeof lastKnownValue) {\\\\\\\\n          case \\\\\\\\\\\\\\\"boolean\\\\\\\\\\\\\\\":\\\\\\\\n            return !lastKnownValue;\\\\\\\\n\\\\\\\\n          default:\\\\\\\\n            return lastKnownValue;\\\\\\\\n        }\\\\\\\\n      } else return input;\\\\\\\\n    }\\\\\\\\n  }\\\\\\\\n};\\\\\\\\n\\\\\\\\nreturn {\\\\\\\\n  deepFieldUpdate,\\\\\\\\n  isEqual,\\\\\\\\n  pick,\\\\\\\\n  toOrdered,\\\\\\\\n  typeMatch,\\\\\\\\n  defaultFieldUpdate,\\\\\\\\n};\\\\\\\\n\"}, \"devhub.page.addon\": {\"\": \"const Container = styled.div`\\\\\\\\n  display: flex;\\\\\\\\n  flex-direction: column;\\\\\\\\n  height: 100%;\\\\\\\\n  width: 100%;\\\\\\\\n  position: relative;\\\\\\\\n  padding: 0 1rem;\\\\\\\\n\\\\\\\\n  @media screen and (max-width: 960px) {\\\\\\\\n    padding: 0 1rem;\\\\\\\\n  }\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst Content = styled.div`\\\\\\\\n  flex: 1;\\\\\\\\n  padding: 20px;\\\\\\\\n  overflow: auto;\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst SettingsButton = styled.button`\\\\\\\\n  position: absolute;\\\\\\\\n  top: 10px;\\\\\\\\n  right: 10px;\\\\\\\\n\\\\\\\\n  background-color: #fff;\\\\\\\\n  display: flex;\\\\\\\\n  padding: 14px 16px;\\\\\\\\n  align-items: center;\\\\\\\\n  gap: 16px;\\\\\\\\n  width: 50px;\\\\\\\\n  height: 50px;\\\\\\\\n\\\\\\\\n  border-radius: 4px;\\\\\\\\n  border: 1px solid #00ec97;\\\\\\\\n\\\\\\\\n  z-index: 10;\\\\\\\\n\\\\\\\\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);\\\\\\\\n\\\\\\\\n  &:hover {\\\\\\\\n    transform: translateY(2px);\\\\\\\\n    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);\\\\\\\\n  }\\\\\\\\n\\\\\\\\n  &:active {\\\\\\\\n    transform: translateY(0);\\\\\\\\n    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);\\\\\\\\n  }\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst CenteredMessage = styled.div`\\\\\\\\n  display: flex;\\\\\\\\n  flex-direction: column;\\\\\\\\n  justify-content: center;\\\\\\\\n  align-items: center;\\\\\\\\n  width: 100%;\\\\\\\\n  height: ${(p) => p.height ?? \\\\\\\\\\\\\\\"100%\\\\\\\\\\\\\\\"};\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst { addon, permissions, handle } = props;\\\\\\\\n\\\\\\\\nconst { getAllAddons, setCommunityAddon } = VM.require(\\\\\\\\n  \\\\\\\\\\\\\\\"devhub.near/widget/core.adapter.devhub-contract\\\\\\\\\\\\\\\"\\\\\\\\n);\\\\\\\\n\\\\\\\\nif (!getAllAddons || !setCommunityAddon) {\\\\\\\\n  return <p>Loading modules...</p>;\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst availableAddons = getAllAddons();\\\\\\\\n\\\\\\\\nconst addonMatch = (availableAddons ?? []).find(\\\\\\\\n  (it) => it.id === addon.addon_id\\\\\\\\n);\\\\\\\\n\\\\\\\\nif (!addonMatch) {\\\\\\\\n  return (\\\\\\\\n    <CenteredMessage height={\\\\\\\\\\\\\\\"384px\\\\\\\\\\\\\\\"}>\\\\\\\\n      <h2>Addon with id: \\\\\\\\\\\\\\\"{addon.addon_id}\\\\\\\\\\\\\\\" not found.</h2>\\\\\\\\n    </CenteredMessage>\\\\\\\\n  );\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst config = JSON.parse(addon.parameters || \\\\\\\\\\\\\\\"null\\\\\\\\\\\\\\\");\\\\\\\\n\\\\\\\\nconst ButtonRow = styled.div`\\\\\\\\n  display: flex;\\\\\\\\n  justify-content: space-between;\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst [view, setView] = useState(props.view || \\\\\\\\\\\\\\\"viewer\\\\\\\\\\\\\\\");\\\\\\\\n\\\\\\\\nreturn (\\\\\\\\n  <Container>\\\\\\\\n    {permissions.can_configure && (\\\\\\\\n      <SettingsButton\\\\\\\\n        onClick={() => setView(view === \\\\\\\\\\\\\\\"configure\\\\\\\\\\\\\\\" ? \\\\\\\\\\\\\\\"view\\\\\\\\\\\\\\\" : \\\\\\\\\\\\\\\"configure\\\\\\\\\\\\\\\")}\\\\\\\\n      >\\\\\\\\n        {view === \\\\\\\\\\\\\\\"configure\\\\\\\\\\\\\\\" ? (\\\\\\\\n          <span className=\\\\\\\\\\\\\\\"bi bi-x\\\\\\\\\\\\\\\"></span>\\\\\\\\n        ) : (\\\\\\\\n          <span className=\\\\\\\\\\\\\\\"bi bi-gear\\\\\\\\\\\\\\\"></span>\\\\\\\\n        )}\\\\\\\\n      </SettingsButton>\\\\\\\\n    )}\\\\\\\\n    <Content>\\\\\\\\n      {view === \\\\\\\\\\\\\\\"configure\\\\\\\\\\\\\\\" ? (\\\\\\\\n        <Widget\\\\\\\\n          src={addonMatch.configurator_widget}\\\\\\\\n          props={{\\\\\\\\n            ...config,\\\\\\\\n            data: config,\\\\\\\\n            onSubmit: (data) => {\\\\\\\\n              setCommunityAddon({\\\\\\\\n                handle,\\\\\\\\n                addon: {\\\\\\\\n                  ...addon,\\\\\\\\n                  parameters: JSON.stringify(data),\\\\\\\\n                },\\\\\\\\n              });\\\\\\\\n            },\\\\\\\\n            handle, // this is temporary prop drilling until kanban and github are migrated\\\\\\\\n            permissions,\\\\\\\\n          }}\\\\\\\\n        />\\\\\\\\n      ) : (\\\\\\\\n        <Widget\\\\\\\\n          src={addonMatch.view_widget}\\\\\\\\n          props={{\\\\\\\\n            ...config,\\\\\\\\n            data: config,\\\\\\\\n            handle,\\\\\\\\n            permissions,\\\\\\\\n          }}\\\\\\\\n        />\\\\\\\\n      )}\\\\\\\\n    </Content>\\\\\\\\n  </Container>\\\\\\\\n);\\\\\\\\n\"}, \"core.lib.data-request\": {\"\": \"const DataRequest = {\\\\\\\\n  /**\\\\\\\\n   * Requests all the data from non-empty pages of the paginated API.\\\\\\\\n   *\\\\\\\\n   * **Notice: currently expected to work only with array responses.**\\\\\\\\n   *\\\\\\\\n   * @param {object} parameters\\\\\\\\n   * \\\\\\\\tRequest parameters including the number of page to start with,\\\\\\\\n   * \\\\\\\\tand an accumulated response buffer, if it exists.\\\\\\\\n   *\\\\\\\\n   * @param {array | null | undefined} parameters.buffer\\\\\\\\n   * @param {number} parameters.startWith\\\\\\\\n   *\\\\\\\\n   * @param {(pageNumber: number) => array} requestByNumber\\\\\\\\n   *\\\\\\\\n   * @returns {array} The final accumulated response.\\\\\\\\n   */\\\\\\\\n  paginated: (requestByNumber, { buffer, startWith }) => {\\\\\\\\n    const startPageNumber = startWith ?? 1,\\\\\\\\n      accumulatedResponse = buffer ?? [];\\\\\\\\n\\\\\\\\n    const latestResponse = requestByNumber(startPageNumber) ?? [];\\\\\\\\n\\\\\\\\n    if (latestResponse.length === 0) {\\\\\\\\n      return accumulatedResponse;\\\\\\\\n    } else {\\\\\\\\n      return DataRequest.paginated(requestByNumber, {\\\\\\\\n        buffer: [...accumulatedResponse, ...latestResponse],\\\\\\\\n        startWith: startPageNumber + 1,\\\\\\\\n      });\\\\\\\\n    }\\\\\\\\n  },\\\\\\\\n};\\\\\\\\n\\\\\\\\nreturn { DataRequest };\\\\\\\\n\"}, \"core.adapter.devhub-contract\": {\"\": \"function getRootMembers() {\\\\\\\\n  return Near.view(\\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"get_root_members\\\\\\\\\\\\\\\") ?? null;\\\\\\\\n}\\\\\\\\n\\\\\\\\nfunction removeMember(member) {\\\\\\\\n  return Near.call(\\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"remove_member\\\\\\\\\\\\\\\", { member });\\\\\\\\n}\\\\\\\\n\\\\\\\\nfunction hasModerator({ account_id }) {\\\\\\\\n  return (\\\\\\\\n    Near.view(\\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"has_moderator\\\\\\\\\\\\\\\", { account_id }) ??\\\\\\\\n    null\\\\\\\\n  );\\\\\\\\n}\\\\\\\\n\\\\\\\\nfunction createCommunity({ inputs }) {\\\\\\\\n  return Near.call(\\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"create_community\\\\\\\\\\\\\\\", { inputs });\\\\\\\\n}\\\\\\\\n\\\\\\\\nfunction getCommunity({ handle }) {\\\\\\\\n  return (\\\\\\\\n    Near.view(\\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"get_community\\\\\\\\\\\\\\\", { handle }) ?? null\\\\\\\\n  );\\\\\\\\n}\\\\\\\\n\\\\\\\\nfunction getFeaturedCommunities() {\\\\\\\\n  return (\\\\\\\\n    Near.view(\\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"get_featured_communities\\\\\\\\\\\\\\\") ?? null\\\\\\\\n  );\\\\\\\\n}\\\\\\\\n\\\\\\\\nfunction setFeaturedCommunities({ handles }) {\\\\\\\\n  return Near.call(\\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"set_featured_communities\\\\\\\\\\\\\\\", {\\\\\\\\n    handles,\\\\\\\\n  });\\\\\\\\n}\\\\\\\\n\\\\\\\\nfunction getAccountCommunityPermissions({ account_id, community_handle }) {\\\\\\\\n  return (\\\\\\\\n    Near.view(\\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"get_account_community_permissions\\\\\\\\\\\\\\\", {\\\\\\\\n      account_id,\\\\\\\\n      community_handle,\\\\\\\\n    }) ?? null\\\\\\\\n  );\\\\\\\\n}\\\\\\\\n\\\\\\\\nfunction updateCommunity({ handle, community }) {\\\\\\\\n  return Near.call(\\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"update_community\\\\\\\\\\\\\\\", {\\\\\\\\n    handle,\\\\\\\\n    community,\\\\\\\\n  });\\\\\\\\n}\\\\\\\\n\\\\\\\\nfunction deleteCommunity({ handle }) {\\\\\\\\n  return Near.call(\\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"delete_community\\\\\\\\\\\\\\\", { handle });\\\\\\\\n}\\\\\\\\n\\\\\\\\n/**\\\\\\\\n * Sets all addons, for configurating tabs\\\\\\\\n */\\\\\\\\nfunction setCommunityAddons({ handle, addons }) {\\\\\\\\n  return Near.call(\\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"set_community_addons\\\\\\\\\\\\\\\", {\\\\\\\\n    handle,\\\\\\\\n    addons,\\\\\\\\n  });\\\\\\\\n}\\\\\\\\n\\\\\\\\n/**\\\\\\\\n * Sets specific addon, for configuring params\\\\\\\\n */\\\\\\\\nfunction setCommunityAddon({ handle, addon }) {\\\\\\\\n  return Near.call(\\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"set_community_addon\\\\\\\\\\\\\\\", {\\\\\\\\n    handle,\\\\\\\\n    community_addon: addon,\\\\\\\\n  });\\\\\\\\n}\\\\\\\\n\\\\\\\\n/**\\\\\\\\n * Gets all available addons, these are controlled by devhub moderators\\\\\\\\n */\\\\\\\\nfunction getAllAddons() {\\\\\\\\n  return Near.view(\\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"get_all_addons\\\\\\\\\\\\\\\") ?? null;\\\\\\\\n}\\\\\\\\n\\\\\\\\nfunction getAccessControlInfo() {\\\\\\\\n  return (\\\\\\\\n    Near.view(\\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"get_access_control_info\\\\\\\\\\\\\\\") ?? null\\\\\\\\n  );\\\\\\\\n}\\\\\\\\n\\\\\\\\nfunction getAllAuthors() {\\\\\\\\n  return Near.view(\\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"get_all_authors\\\\\\\\\\\\\\\") ?? null;\\\\\\\\n}\\\\\\\\n\\\\\\\\nfunction getAllCommunitiesMetadata() {\\\\\\\\n  return (\\\\\\\\n    Near.view(\\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"get_all_communities_metadata\\\\\\\\\\\\\\\") ?? null\\\\\\\\n  );\\\\\\\\n}\\\\\\\\n\\\\\\\\nfunction getAllLabels() {\\\\\\\\n  return Near.view(\\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"get_all_labels\\\\\\\\\\\\\\\") ?? null;\\\\\\\\n}\\\\\\\\n\\\\\\\\nfunction getPost({ post_id }) {\\\\\\\\n  return Near.view(\\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"get_post\\\\\\\\\\\\\\\", { post_id }) ?? null;\\\\\\\\n}\\\\\\\\n\\\\\\\\nfunction getPostsByAuthor({ author }) {\\\\\\\\n  return (\\\\\\\\n    Near.view(\\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"get_posts_by_author\\\\\\\\\\\\\\\", { author }) ??\\\\\\\\n    null\\\\\\\\n  );\\\\\\\\n}\\\\\\\\n\\\\\\\\nfunction getPostsByLabel({ label }) {\\\\\\\\n  return (\\\\\\\\n    Near.view(\\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"get_posts_by_label\\\\\\\\\\\\\\\", {\\\\\\\\n      label,\\\\\\\\n    }) ?? null\\\\\\\\n  );\\\\\\\\n}\\\\\\\\n\\\\\\\\nfunction useQuery(name, params) {\\\\\\\\n  const initialState = { data: null, error: null, isLoading: true };\\\\\\\\n\\\\\\\\n  const cacheState = useCache(\\\\\\\\n    () =>\\\\\\\\n      Near.asyncView(\\\\\\\\n        \\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\",\\\\\\\\n        [\\\\\\\\\\\\\\\"get\\\\\\\\\\\\\\\", name].join(\\\\\\\\\\\\\\\"_\\\\\\\\\\\\\\\"),\\\\\\\\n        params ?? {}\\\\\\\\n      )\\\\\\\\n        .then((response) => ({\\\\\\\\n          ...initialState,\\\\\\\\n          data: response ?? null,\\\\\\\\n          isLoading: false,\\\\\\\\n        }))\\\\\\\\n        .catch((error) => ({\\\\\\\\n          ...initialState,\\\\\\\\n          error: props?.error ?? error,\\\\\\\\n          isLoading: false,\\\\\\\\n        })),\\\\\\\\n\\\\\\\\n    JSON.stringify({ name, params }),\\\\\\\\n    { subscribe: false } // NOTE: I\\\\\\\\\\\\'m turning off subscribe to stop the constant re-rendering\\\\\\\\n  );\\\\\\\\n\\\\\\\\n  return cacheState === null ? initialState : cacheState;\\\\\\\\n}\\\\\\\\n\\\\\\\\nreturn {\\\\\\\\n  getRootMembers,\\\\\\\\n  removeMember,\\\\\\\\n  hasModerator,\\\\\\\\n  createCommunity,\\\\\\\\n  getCommunity,\\\\\\\\n  getFeaturedCommunities,\\\\\\\\n  setFeaturedCommunities,\\\\\\\\n  getAccountCommunityPermissions,\\\\\\\\n  updateCommunity,\\\\\\\\n  deleteCommunity,\\\\\\\\n  setCommunityAddons,\\\\\\\\n  setCommunityAddon,\\\\\\\\n  getAccessControlInfo,\\\\\\\\n  getAllAuthors,\\\\\\\\n  getAllCommunitiesMetadata,\\\\\\\\n  getAllAddons,\\\\\\\\n  getAllLabels,\\\\\\\\n  getPost,\\\\\\\\n  getPostsByAuthor,\\\\\\\\n  getPostsByLabel,\\\\\\\\n  useQuery,\\\\\\\\n};\\\\\\\\n\"}, \"devhub.components.molecule.Button\": {\"\": \"const styles = `\\\\\\\\n  padding: 0.5rem 1.2rem !important;\\\\\\\\n  min-height: 36px;\\\\\\\\n  line-height: 1.5;\\\\\\\\n  text-decoration: none !important;\\\\\\\\n\\\\\\\\n  &:not(.shadow-none) {\\\\\\\\n    box-shadow: 0 0.125rem 0.25rem rgba(0, 0, 0, 0.075) !important;\\\\\\\\n    transition: box-shadow 0.6s;\\\\\\\\n  }\\\\\\\\n\\\\\\\\n  &.btn-sm {\\\\\\\\n    padding: 0.5rem 0.8rem !important;\\\\\\\\n    min-height: 32px;\\\\\\\\n    line-height: 1;\\\\\\\\n  }\\\\\\\\n\\\\\\\\n  &.btn-lg {\\\\\\\\n    padding: 1rem 1.5rem !important;\\\\\\\\n    min-height: 48px;\\\\\\\\n  }\\\\\\\\n\\\\\\\\n  &.btn-primary {\\\\\\\\n    border: none;\\\\\\\\n    --bs-btn-color: #ffffff;\\\\\\\\n    --bs-btn-bg: #087990;\\\\\\\\n    --bs-btn-border-color: #087990;\\\\\\\\n    --bs-btn-hover-color: #ffffff;\\\\\\\\n    --bs-btn-hover-bg: #055160;\\\\\\\\n    --bs-btn-hover-border-color: #055160;\\\\\\\\n    --bs-btn-focus-shadow-rgb: 49, 132, 253;\\\\\\\\n    --bs-btn-active-color: #ffffff;\\\\\\\\n    --bs-btn-active-bg: #055160;\\\\\\\\n    --bs-btn-active-border-color: #055160;\\\\\\\\n    --bs-btn-active-shadow: inset 0 3px 5px rgba(0, 0, 0, 0.125);\\\\\\\\n    --bs-btn-disabled-color: #ffffff;\\\\\\\\n    --bs-btn-disabled-bg: #0551604a;\\\\\\\\n  }\\\\\\\\n\\\\\\\\n\\\\\\\\t&.btn-outline-primary {\\\\\\\\n\\\\\\\\t\\\\\\\\t--bs-btn-color: #087990;\\\\\\\\n\\\\\\\\t\\\\\\\\t--bs-btn-border-color: #087990;\\\\\\\\n\\\\\\\\t\\\\\\\\t--bs-btn-hover-color: #ffffff;\\\\\\\\n\\\\\\\\t\\\\\\\\t--bs-btn-hover-bg: #087990;\\\\\\\\n\\\\\\\\t\\\\\\\\t--bs-btn-hover-border-color: #087990;\\\\\\\\n\\\\\\\\t\\\\\\\\t--bs-btn-focus-shadow-rgb: 49, 132, 253;\\\\\\\\n\\\\\\\\t\\\\\\\\t--bs-btn-active-color: #ffffff;\\\\\\\\n\\\\\\\\t\\\\\\\\t--bs-btn-active-bg: #087990;\\\\\\\\n\\\\\\\\t\\\\\\\\t--bs-btn-active-border-color: #087990;\\\\\\\\n\\\\\\\\t\\\\\\\\t--bs-btn-active-shadow: inset 0 3px 5px rgba(0, 0, 0, 0.125);\\\\\\\\n\\\\\\\\t\\\\\\\\t--bs-btn-disabled-border-color: #0551604a;\\\\\\\\n\\\\\\\\t}\\\\\\\\n\\\\\\\\n  &[class*=\\\\\\\\\\\\\\\"btn-outline-\\\\\\\\\\\\\\\"] {\\\\\\\\n    border-width: 2px;\\\\\\\\n  }\\\\\\\\n\\\\\\\\n  &.btn-outline-primary {\\\\\\\\n    --bs-btn-disabled-color: #6c757d8f;\\\\\\\\n  }\\\\\\\\n\\\\\\\\n  &.btn-secondary {\\\\\\\\n    border: none;\\\\\\\\n  }\\\\\\\\n\\\\\\\\n  &.btn-outline-secondary {\\\\\\\\n    --bs-btn-disabled-color: #6c757d8f;\\\\\\\\n  }\\\\\\\\n\\\\\\\\n  &.btn-success {\\\\\\\\n    border: none;\\\\\\\\n    --bs-btn-disabled-bg: #35482a4a;\\\\\\\\n  }\\\\\\\\n\\\\\\\\n  &.btn-outline-success {\\\\\\\\n    --bs-btn-disabled-color: #6c757d8f;\\\\\\\\n  }\\\\\\\\n\\\\\\\\n  &.btn-danger {\\\\\\\\n    border: none;\\\\\\\\n  }\\\\\\\\n\\\\\\\\n  &.btn-outline-danger {\\\\\\\\n    --bs-btn-disabled-color: #6c757d8f;\\\\\\\\n  }\\\\\\\\n\\\\\\\\n  &.btn-warning {\\\\\\\\n    border: none;\\\\\\\\n  }\\\\\\\\n\\\\\\\\n  &.btn-outline-warning {\\\\\\\\n    --bs-btn-disabled-color: #6c757d8f;\\\\\\\\n  }\\\\\\\\n\\\\\\\\n  &.btn-info {\\\\\\\\n    border: none;\\\\\\\\n  }\\\\\\\\n\\\\\\\\n  &.btn-outline-info {\\\\\\\\n    --bs-btn-disabled-color: #6c757d8f;\\\\\\\\n  }\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst rootElementByType = (type) =>\\\\\\\\n  type === \\\\\\\\\\\\\\\"link\\\\\\\\\\\\\\\"\\\\\\\\n    ? styled.a`\\\\\\\\n        ${styles}\\\\\\\\n      `\\\\\\\\n    : styled.button`\\\\\\\\n        ${styles}\\\\\\\\n      `;\\\\\\\\n\\\\\\\\nconst Button = ({\\\\\\\\n  classNames,\\\\\\\\n  icon: iconProps,\\\\\\\\n  label,\\\\\\\\n  type,\\\\\\\\n  isHidden,\\\\\\\\n  notRounded,\\\\\\\\n  ...restProps\\\\\\\\n}) => {\\\\\\\\n  const ButtonRoot = rootElementByType(type);\\\\\\\\n\\\\\\\\n  return (\\\\\\\\n    <ButtonRoot\\\\\\\\n      className={[\\\\\\\\n        \\\\\\\\\\\\\\\"btn d-inline-flex align-items-center gap-2\\\\\\\\\\\\\\\",\\\\\\\\n        classNames?.root ?? \\\\\\\\\\\\\\\"btn-primary\\\\\\\\\\\\\\\",\\\\\\\\n        !notRounded ?? \\\\\\\\\\\\\\\"rounded-pill\\\\\\\\\\\\\\\",\\\\\\\\n        isHidden ?? false ? \\\\\\\\\\\\\\\"d-none\\\\\\\\\\\\\\\" : \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\",\\\\\\\\n      ].join(\\\\\\\\\\\\\\\" \\\\\\\\\\\\\\\")}\\\\\\\\n      style={{ width: \\\\\\\\\\\\\\\"fit-content\\\\\\\\\\\\\\\" }}\\\\\\\\n      {...restProps}\\\\\\\\n    >\\\\\\\\n      {iconProps !== null &&\\\\\\\\n        typeof iconProps === \\\\\\\\\\\\\\\"object\\\\\\\\\\\\\\\" &&\\\\\\\\n        !Array.isArray(iconProps) && (\\\\\\\\n          <Widget\\\\\\\\n            src={\\\\\\\\\\\\\\\"devhub.near/widget/devhub.components.atom.Icon\\\\\\\\\\\\\\\"}\\\\\\\\n            props={iconProps}\\\\\\\\n          />\\\\\\\\n        )}\\\\\\\\n      <span className={classNames?.label} style={{ lineHeight: \\\\\\\\\\\\\\\"inherit\\\\\\\\\\\\\\\" }}>\\\\\\\\n        {label}\\\\\\\\n      </span>\\\\\\\\n    </ButtonRoot>\\\\\\\\n  );\\\\\\\\n};\\\\\\\\n\\\\\\\\nreturn Button(props);\\\\\\\\n\"}, \"devhub.entity.addon.github.Viewer\": {\"\": \"const { href } = VM.require(\\\\\\\\\\\\\\\"devhub.near/widget/core.lib.url\\\\\\\\\\\\\\\");\\\\\\\\nconst { useQuery } = VM.require(\\\\\\\\n  \\\\\\\\\\\\\\\"devhub.near/widget/core.adapter.devhub-contract\\\\\\\\\\\\\\\"\\\\\\\\n);\\\\\\\\n\\\\\\\\nuseQuery || (useQuery = () => {});\\\\\\\\n\\\\\\\\nhref || (href = () => {});\\\\\\\\nconst { kanbanBoards, handle, permissions } = props;\\\\\\\\n\\\\\\\\nconst data = Object.values(kanbanBoards ?? {})?.[0];\\\\\\\\n\\\\\\\\nif (!kanbanBoards || !data?.metadata) {\\\\\\\\n  return (\\\\\\\\n    <div\\\\\\\\n      className=\\\\\\\\\\\\\\\"d-flex flex-column align-items-center justify-content-center gap-4\\\\\\\\\\\\\\\"\\\\\\\\n      style={{ height: 384 }}\\\\\\\\n    >\\\\\\\\n      <h5 className=\\\\\\\\\\\\\\\"h5 d-inline-flex gap-2 m-0\\\\\\\\\\\\\\\">\\\\\\\\n        Please add configuration for your board.\\\\\\\\n      </h5>\\\\\\\\n    </div>\\\\\\\\n  );\\\\\\\\n}\\\\\\\\n\\\\\\\\nreturn (\\\\\\\\n  <Widget\\\\\\\\n    src={`devhub.near/widget/devhub.entity.addon.${data.metadata.type}`}\\\\\\\\n    props={{\\\\\\\\n      ...data,\\\\\\\\n      isConfiguratorActive: false,\\\\\\\\n      isSynced: true,\\\\\\\\n      permissions,\\\\\\\\n    }}\\\\\\\\n  />\\\\\\\\n);\\\\\\\\n\"}, \"devhub.entity.addon.kanban.Viewer\": {\"\": \"const Struct = VM.require(\\\\\\\\\\\\\\\"devhub.near/widget/core.lib.struct\\\\\\\\\\\\\\\");\\\\\\\\nconst { href } = VM.require(\\\\\\\\\\\\\\\"devhub.near/widget/core.lib.url\\\\\\\\\\\\\\\");\\\\\\\\n\\\\\\\\nif (!Struct) {\\\\\\\\n  return <p>Loading modules...</p>;\\\\\\\\n}\\\\\\\\n\\\\\\\\nhref || (href = () => {});\\\\\\\\n\\\\\\\\nconst { data, handle, permissions } = props;\\\\\\\\n\\\\\\\\nif (!data || !data?.metadata) {\\\\\\\\n  return (\\\\\\\\n    <div\\\\\\\\n      className=\\\\\\\\\\\\\\\"d-flex flex-column align-items-center justify-content-center gap-4\\\\\\\\\\\\\\\"\\\\\\\\n      style={{ height: 384 }}\\\\\\\\n    >\\\\\\\\n      <h5 className=\\\\\\\\\\\\\\\"h5 d-inline-flex gap-2 m-0\\\\\\\\\\\\\\\">\\\\\\\\n        Please add configuration for your board.\\\\\\\\n      </h5>\\\\\\\\n    </div>\\\\\\\\n  );\\\\\\\\n}\\\\\\\\n\\\\\\\\nreturn (\\\\\\\\n  <Widget\\\\\\\\n    src={`devhub.near/widget/devhub.entity.addon.${data.metadata.type}`}\\\\\\\\n    props={{\\\\\\\\n      ...data,\\\\\\\\n      isSynced: true,\\\\\\\\n      permissions,\\\\\\\\n    }}\\\\\\\\n  />\\\\\\\\n);\\\\\\\\n\"}, \"devhub.entity.addon.kanban.post_board\": {\"\": \"const { getPostsByLabel } = VM.require(\\\\\\\\n  \\\\\\\\\\\\\\\"devhub.near/widget/core.adapter.devhub-contract\\\\\\\\\\\\\\\"\\\\\\\\n);\\\\\\\\ngetPostsByLabel || (getPostsByLabel = () => {});\\\\\\\\n\\\\\\\\nconst postTagsToIdSet = (tags) => {\\\\\\\\n  return new Set(\\\\\\\\n    (tags ?? [])?.map((tag) => getPostsByLabel({ label: tag }) ?? []).flat(1)\\\\\\\\n  );\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst configToColumnData = ({ columns, tags }) =>\\\\\\\\n  Object.entries(columns).reduce((registry, [columnId, column]) => {\\\\\\\\n    const postIds = (getPostsByLabel({ label: column.tag }) ?? []).reverse();\\\\\\\\n    return {\\\\\\\\n      ...registry,\\\\\\\\n      [columnId]: {\\\\\\\\n        ...column,\\\\\\\\n        postIds:\\\\\\\\n          tags.required.length > 0\\\\\\\\n            ? postIds.filter(\\\\\\\\n                (postId) =>\\\\\\\\n                  postTagsToIdSet(tags.required).has(postId) &&\\\\\\\\n                  !postTagsToIdSet(tags.excluded).has(postId)\\\\\\\\n              )\\\\\\\\n            : postIds,\\\\\\\\n      },\\\\\\\\n    };\\\\\\\\n  }, {});\\\\\\\\n\\\\\\\\nconst KanbanPostBoard = ({ metadata, payload }) => {\\\\\\\\n  const columns = Object.entries(configToColumnData(payload) ?? {}).map(\\\\\\\\n    ([columnId, column]) => (\\\\\\\\n      <div className=\\\\\\\\\\\\\\\"col-3\\\\\\\\\\\\\\\" key={`column-${columnId}-view`}>\\\\\\\\n        <div className=\\\\\\\\\\\\\\\"card rounded-4\\\\\\\\\\\\\\\">\\\\\\\\n          <div\\\\\\\\n            className={[\\\\\\\\n              \\\\\\\\\\\\\\\"card-body d-flex flex-column gap-3 p-2\\\\\\\\\\\\\\\",\\\\\\\\n              \\\\\\\\\\\\\\\"border border-2 border-secondary rounded-4\\\\\\\\\\\\\\\",\\\\\\\\n            ].join(\\\\\\\\\\\\\\\" \\\\\\\\\\\\\\\")}\\\\\\\\n          >\\\\\\\\n            <span className=\\\\\\\\\\\\\\\"d-flex flex-column py-1\\\\\\\\\\\\\\\">\\\\\\\\n              <h6 className=\\\\\\\\\\\\\\\"card-title h6 d-flex align-items-center gap-2 m-0\\\\\\\\\\\\\\\">\\\\\\\\n                {column.title}\\\\\\\\n\\\\\\\\n                <span className=\\\\\\\\\\\\\\\"badge rounded-pill bg-secondary\\\\\\\\\\\\\\\">\\\\\\\\n                  {column.postIds.length}\\\\\\\\n                </span>\\\\\\\\n              </h6>\\\\\\\\n\\\\\\\\n              <p class=\\\\\\\\\\\\\\\"text-secondary m-0\\\\\\\\\\\\\\\">{column.description}</p>\\\\\\\\n            </span>\\\\\\\\n\\\\\\\\n            <div class=\\\\\\\\\\\\\\\"d-flex flex-column gap-2\\\\\\\\\\\\\\\">\\\\\\\\n              {column.postIds?.map((postId) => (\\\\\\\\n                <Widget\\\\\\\\n                  src={`devhub.near/widget/devhub.entity.addon.${metadata.ticket.type}`}\\\\\\\\n                  props={{ metadata: { id: postId, ...metadata.ticket } }}\\\\\\\\n                  key={postId}\\\\\\\\n                />\\\\\\\\n              ))}\\\\\\\\n            </div>\\\\\\\\n          </div>\\\\\\\\n        </div>\\\\\\\\n      </div>\\\\\\\\n    )\\\\\\\\n  );\\\\\\\\n\\\\\\\\n  return (\\\\\\\\n    <div>\\\\\\\\n      <div className=\\\\\\\\\\\\\\\"d-flex flex-column align-items-center gap-2 py-4\\\\\\\\\\\\\\\">\\\\\\\\n        <h5 className=\\\\\\\\\\\\\\\"h5 d-inline-flex gap-2 m-0\\\\\\\\\\\\\\\">\\\\\\\\n          <span>{metadata?.title}</span>\\\\\\\\n        </h5>\\\\\\\\n\\\\\\\\n        <p className=\\\\\\\\\\\\\\\"m-0 py-1 text-secondary text-center\\\\\\\\\\\\\\\">\\\\\\\\n          {metadata?.description}\\\\\\\\n        </p>\\\\\\\\n      </div>\\\\\\\\n      <div className=\\\\\\\\\\\\\\\"d-flex gap-3 w-100\\\\\\\\\\\\\\\" style={{ overflowX: \\\\\\\\\\\\\\\"auto\\\\\\\\\\\\\\\" }}>\\\\\\\\n        <div\\\\\\\\n          className={[\\\\\\\\n            \\\\\\\\\\\\\\\"d-flex align-items-center justify-content-center w-100 text-black-50 opacity-50\\\\\\\\\\\\\\\",\\\\\\\\n            columns.length === 0 ? \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\" : \\\\\\\\\\\\\\\"d-none\\\\\\\\\\\\\\\",\\\\\\\\n          ].join(\\\\\\\\\\\\\\\" \\\\\\\\\\\\\\\")}\\\\\\\\n          style={{ height: 384 }}\\\\\\\\n        >\\\\\\\\n          No columns were created so far.\\\\\\\\n        </div>\\\\\\\\n\\\\\\\\n        {columns}\\\\\\\\n      </div>\\\\\\\\n    </div>\\\\\\\\n  );\\\\\\\\n};\\\\\\\\n\\\\\\\\nreturn KanbanPostBoard(props);\\\\\\\\n\"}, \"devhub.entity.addon.kanban.post_ticket\": {\"\": \"const { href } = VM.require(\\\\\\\\\\\\\\\"devhub.near/widget/core.lib.url\\\\\\\\\\\\\\\");\\\\\\\\nconst { getPost } = VM.require(\\\\\\\\n  \\\\\\\\\\\\\\\"devhub.near/widget/core.adapter.devhub-contract\\\\\\\\\\\\\\\"\\\\\\\\n);\\\\\\\\ngetPost || (getPost = () => {});\\\\\\\\nhref || (href = () => {});\\\\\\\\n\\\\\\\\nconst AttractableDiv = styled.div`\\\\\\\\n  box-shadow: 0 0.125rem 0.25rem rgba(0, 0, 0, 0.075) !important;\\\\\\\\n  transition: box-shadow 0.6s;\\\\\\\\n\\\\\\\\n  &:hover {\\\\\\\\n    box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.15) !important;\\\\\\\\n  }\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst iconsByPostType = {\\\\\\\\n  Idea: \\\\\\\\\\\\\\\"bi-lightbulb\\\\\\\\\\\\\\\",\\\\\\\\n  Comment: \\\\\\\\\\\\\\\"bi-chat\\\\\\\\\\\\\\\",\\\\\\\\n  Solution: \\\\\\\\\\\\\\\"bi-rocket\\\\\\\\\\\\\\\",\\\\\\\\n  Attestation: \\\\\\\\\\\\\\\"bi-check-circle\\\\\\\\\\\\\\\",\\\\\\\\n  Sponsorship: \\\\\\\\\\\\\\\"bi-cash-coin\\\\\\\\\\\\\\\",\\\\\\\\n};\\\\\\\\n\\\\\\\\nfunction getToken(token) {\\\\\\\\n  let amountUnit = \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\";\\\\\\\\n  if (typeof token === \\\\\\\\\\\\\\\"string\\\\\\\\\\\\\\\") {\\\\\\\\n    amountUnit = token;\\\\\\\\n  } else if (typeof token === \\\\\\\\\\\\\\\"object\\\\\\\\\\\\\\\") {\\\\\\\\n    const address = Object.values(token)?.[0]?.address ?? \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\";\\\\\\\\n    const ftMetadata = Near.view(address, \\\\\\\\\\\\\\\"ft_metadata\\\\\\\\\\\\\\\", {});\\\\\\\\n    if (ftMetadata !== null) {\\\\\\\\n      amountUnit = ftMetadata?.symbol;\\\\\\\\n    }\\\\\\\\n  }\\\\\\\\n  return amountUnit;\\\\\\\\n}\\\\\\\\nconst KanbanPostTicket = ({ metadata }) => {\\\\\\\\n  const data = getPost({\\\\\\\\n    post_id: metadata.id ? parseInt(metadata.id) : 0,\\\\\\\\n  });\\\\\\\\n\\\\\\\\n  if (!data) return <div>Loading ...</div>;\\\\\\\\n\\\\\\\\n  const {\\\\\\\\n    post_type,\\\\\\\\n    name,\\\\\\\\n    description,\\\\\\\\n    labels: tags,\\\\\\\\n    requested_sponsorship_amount,\\\\\\\\n    requested_sponsorship_token,\\\\\\\\n    requested_sponsor,\\\\\\\\n    amount,\\\\\\\\n    sponsorship_token,\\\\\\\\n    supervisor,\\\\\\\\n  } = data.snapshot;\\\\\\\\n\\\\\\\\n  const isFundingRequested =\\\\\\\\n    post_type === \\\\\\\\\\\\\\\"Solution\\\\\\\\\\\\\\\" &&\\\\\\\\n    typeof requested_sponsorship_amount === \\\\\\\\\\\\\\\"string\\\\\\\\\\\\\\\" &&\\\\\\\\n    parseInt(requested_sponsorship_amount, 10) > 0;\\\\\\\\n\\\\\\\\n  const features = {\\\\\\\\n    ...metadata.features,\\\\\\\\n\\\\\\\\n    sponsorship_request_indicator:\\\\\\\\n      isFundingRequested && metadata.features.sponsorship_request_indicator,\\\\\\\\n\\\\\\\\n    requested_sponsorship_value:\\\\\\\\n      isFundingRequested && metadata.features.requested_sponsorship_value,\\\\\\\\n\\\\\\\\n    approved_sponsorship_value:\\\\\\\\n      post_type === \\\\\\\\\\\\\\\"Sponsorship\\\\\\\\\\\\\\\" &&\\\\\\\\n      metadata.features.approved_sponsorship_value,\\\\\\\\n\\\\\\\\n    requested_sponsor:\\\\\\\\n      isFundingRequested && metadata.features.requested_sponsor,\\\\\\\\n\\\\\\\\n    sponsorship_supervisor:\\\\\\\\n      post_type === \\\\\\\\\\\\\\\"Sponsorship\\\\\\\\\\\\\\\" && metadata.features.sponsorship_supervisor,\\\\\\\\n  };\\\\\\\\n\\\\\\\\n  const header = (\\\\\\\\n    <div className=\\\\\\\\\\\\\\\"card-header d-flex justify-content-between gap-3\\\\\\\\\\\\\\\">\\\\\\\\n      <a\\\\\\\\n        href={`https://near.org/mob.near/widget/ProfilePage?accountId=${data.author_id}`}\\\\\\\\n        className=\\\\\\\\\\\\\\\"d-flex gap-2 link-dark text-truncate\\\\\\\\\\\\\\\"\\\\\\\\n      >\\\\\\\\n        {features.author ? (\\\\\\\\n          <Widget\\\\\\\\n            src=\\\\\\\\\\\\\\\"mob.near/widget/ProfileImage\\\\\\\\\\\\\\\"\\\\\\\\n            props={{\\\\\\\\n              metadata,\\\\\\\\n              accountId: data.author_id,\\\\\\\\n              widgetName,\\\\\\\\n              style: { height: \\\\\\\\\\\\\\\"1.5em\\\\\\\\\\\\\\\", width: \\\\\\\\\\\\\\\"1.5em\\\\\\\\\\\\\\\", minWidth: \\\\\\\\\\\\\\\"1.5em\\\\\\\\\\\\\\\" },\\\\\\\\n            }}\\\\\\\\n          />\\\\\\\\n        ) : null}\\\\\\\\n\\\\\\\\n        <span className=\\\\\\\\\\\\\\\"text-muted\\\\\\\\\\\\\\\">@{data.author_id}</span>\\\\\\\\n      </a>\\\\\\\\n\\\\\\\\n      <a\\\\\\\\n        className=\\\\\\\\\\\\\\\"card-link\\\\\\\\\\\\\\\"\\\\\\\\n        href={href(\\\\\\\\\\\\\\\"Post\\\\\\\\\\\\\\\", { id: data.id })}\\\\\\\\n        role=\\\\\\\\\\\\\\\"button\\\\\\\\\\\\\\\"\\\\\\\\n        target=\\\\\\\\\\\\\\\"_blank\\\\\\\\\\\\\\\"\\\\\\\\n        title=\\\\\\\\\\\\\\\"Open in new tab\\\\\\\\\\\\\\\"\\\\\\\\n      >\\\\\\\\n        <i className=\\\\\\\\\\\\\\\"bi bi-share\\\\\\\\\\\\\\\" />\\\\\\\\n      </a>\\\\\\\\n    </div>\\\\\\\\n  );\\\\\\\\n\\\\\\\\n  const footer =\\\\\\\\n    features.like_count || features.reply_count ? (\\\\\\\\n      <div className=\\\\\\\\\\\\\\\"card-footer d-flex justify-content-between gap-3\\\\\\\\\\\\\\\">\\\\\\\\n        {features.like_count ? (\\\\\\\\n          <span>\\\\\\\\n            <Widget\\\\\\\\n              src={`devhub.near/widget/devhub.components.atom.Icon`}\\\\\\\\n              props={{\\\\\\\\n                type: \\\\\\\\\\\\\\\"bootstrap_icon\\\\\\\\\\\\\\\",\\\\\\\\n                variant: \\\\\\\\\\\\\\\"bi-heart-fill\\\\\\\\\\\\\\\",\\\\\\\\n              }}\\\\\\\\n            />\\\\\\\\n\\\\\\\\n            {data.likes.length}\\\\\\\\n          </span>\\\\\\\\n        ) : null}\\\\\\\\n\\\\\\\\n        {features.reply_count ? (\\\\\\\\n          <span>\\\\\\\\n            <Widget\\\\\\\\n              src={`devhub.near/widget/devhub.components.atom.Icon`}\\\\\\\\n              props={{\\\\\\\\n                type: \\\\\\\\\\\\\\\"bootstrap_icon\\\\\\\\\\\\\\\",\\\\\\\\n                ariant: \\\\\\\\\\\\\\\"bi-comment\\\\\\\\\\\\\\\",\\\\\\\\n              }}\\\\\\\\n            />\\\\\\\\n\\\\\\\\n            {data.comments.length}\\\\\\\\n          </span>\\\\\\\\n        ) : null}\\\\\\\\n      </div>\\\\\\\\n    ) : null;\\\\\\\\n\\\\\\\\n  const titleArea = (\\\\\\\\n    <span className=\\\\\\\\\\\\\\\"card-text gap-2\\\\\\\\\\\\\\\">\\\\\\\\n      {features.type ? (\\\\\\\\n        <i className={`bi ${iconsByPostType[post_type]}`} />\\\\\\\\n      ) : null}\\\\\\\\n\\\\\\\\n      <span>\\\\\\\\n        {[features.type ? post_type : null, name]\\\\\\\\n          .filter(\\\\\\\\n            (maybeString) =>\\\\\\\\n              typeof maybeString === \\\\\\\\\\\\\\\"string\\\\\\\\\\\\\\\" && maybeString.length > 0\\\\\\\\n          )\\\\\\\\n          .join(\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\")}\\\\\\\\n      </span>\\\\\\\\n    </span>\\\\\\\\n  );\\\\\\\\n\\\\\\\\n  const descriptionArea =\\\\\\\\n    post_type === \\\\\\\\\\\\\\\"Comment\\\\\\\\\\\\\\\" ? (\\\\\\\\n      <div className=\\\\\\\\\\\\\\\"overflow-auto\\\\\\\\\\\\\\\" style={{ maxHeight: \\\\\\\\\\\\\\\"6em\\\\\\\\\\\\\\\" }}>\\\\\\\\n        <Markdown className=\\\\\\\\\\\\\\\"card-text\\\\\\\\\\\\\\\" text={description} />\\\\\\\\n      </div>\\\\\\\\n    ) : null;\\\\\\\\n\\\\\\\\n  const tagList =\\\\\\\\n    Array.isArray(tags) && features.tags ? (\\\\\\\\n      <div className=\\\\\\\\\\\\\\\"d-flex flex-wrap gap-2 m-0\\\\\\\\\\\\\\\">\\\\\\\\n        {(tags ?? []).map((tag) => (\\\\\\\\n          <a href={href(\\\\\\\\\\\\\\\"Feed\\\\\\\\\\\\\\\", { tag })} key={tag}>\\\\\\\\n            <span className=\\\\\\\\\\\\\\\"badge text-bg-primary me-1\\\\\\\\\\\\\\\">{tag}</span>\\\\\\\\n          </a>\\\\\\\\n        ))}\\\\\\\\n      </div>\\\\\\\\n    ) : null;\\\\\\\\n\\\\\\\\n  return (\\\\\\\\n    <AttractableDiv className=\\\\\\\\\\\\\\\"card border-secondary\\\\\\\\\\\\\\\">\\\\\\\\n      {header}\\\\\\\\n\\\\\\\\n      <div className=\\\\\\\\\\\\\\\"card-body d-flex flex-column gap-3\\\\\\\\\\\\\\\">\\\\\\\\n        {titleArea}\\\\\\\\n        {descriptionArea}\\\\\\\\n\\\\\\\\n        {features.sponsorship_request_indicator ? (\\\\\\\\n          <span className=\\\\\\\\\\\\\\\"d-flex gap-2\\\\\\\\\\\\\\\">\\\\\\\\n            <Widget\\\\\\\\n              src={`devhub.near/widget/devhub.components.atom.Icon`}\\\\\\\\n              props={{\\\\\\\\n                type: \\\\\\\\\\\\\\\"bootstrap_icon\\\\\\\\\\\\\\\",\\\\\\\\n                variant: \\\\\\\\\\\\\\\"bi-cash\\\\\\\\\\\\\\\",\\\\\\\\n              }}\\\\\\\\n            />\\\\\\\\n\\\\\\\\n            <span>Funding requested</span>\\\\\\\\n          </span>\\\\\\\\n        ) : null}\\\\\\\\n\\\\\\\\n        {features.requested_sponsorship_value ||\\\\\\\\n        features.approved_sponsorship_value ? (\\\\\\\\n          <span className=\\\\\\\\\\\\\\\"d-flex flex-wrap gap-2\\\\\\\\\\\\\\\">\\\\\\\\n            <span>\\\\\\\\n              {post_type === \\\\\\\\\\\\\\\"Solution\\\\\\\\\\\\\\\" ? \\\\\\\\\\\\\\\"Requested\\\\\\\\\\\\\\\" : \\\\\\\\\\\\\\\"Approved\\\\\\\\\\\\\\\"} funding:\\\\\\\\n            </span>\\\\\\\\n\\\\\\\\n            <span className=\\\\\\\\\\\\\\\"d-flex flex-nowrap gap-1\\\\\\\\\\\\\\\">\\\\\\\\n              <span>{requested_sponsorship_amount ?? amount}</span>\\\\\\\\n              <span>\\\\\\\\n                {requested_sponsorship_token ?? getToken(sponsorship_token)}\\\\\\\\n              </span>\\\\\\\\n            </span>\\\\\\\\n          </span>\\\\\\\\n        ) : null}\\\\\\\\n\\\\\\\\n        {features.requested_sponsor || features.sponsorship_supervisor ? (\\\\\\\\n          <div className=\\\\\\\\\\\\\\\"d-flex flex-wrap gap-2\\\\\\\\\\\\\\\">\\\\\\\\n            <span>{`${\\\\\\\\n              post_type === \\\\\\\\\\\\\\\"Solution\\\\\\\\\\\\\\\" ? \\\\\\\\\\\\\\\"Requested sponsor\\\\\\\\\\\\\\\" : \\\\\\\\\\\\\\\"Supervisor\\\\\\\\\\\\\\\"\\\\\\\\n            }:`}</span>\\\\\\\\n\\\\\\\\n            <Widget\\\\\\\\n              className=\\\\\\\\\\\\\\\"flex-wrap\\\\\\\\\\\\\\\"\\\\\\\\n              src={`neardevgov.near/widget/ProfileLine`}\\\\\\\\n              props={{\\\\\\\\n                accountId: requested_sponsor ?? supervisor,\\\\\\\\n                hideAccountId: true,\\\\\\\\n                tooltip: true,\\\\\\\\n              }}\\\\\\\\n            />\\\\\\\\n          </div>\\\\\\\\n        ) : null}\\\\\\\\n\\\\\\\\n        {tagList}\\\\\\\\n      </div>\\\\\\\\n\\\\\\\\n      {footer}\\\\\\\\n    </AttractableDiv>\\\\\\\\n  );\\\\\\\\n};\\\\\\\\n\\\\\\\\nreturn KanbanPostTicket(props);\\\\\\\\n\"}, \"devhub.components.organism.Configurator\": {\"\": \"const Struct = VM.require(\\\\\\\\\\\\\\\"devhub.near/widget/core.lib.struct\\\\\\\\\\\\\\\");\\\\\\\\n\\\\\\\\nif (!Struct) {\\\\\\\\n  return <p>Loading modules...</p>;\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst useForm = ({ initialValues, onUpdate, stateKey }) => {\\\\\\\\n  const initialFormState = {\\\\\\\\n    hasUnsubmittedChanges: false,\\\\\\\\n    values: initialValues ?? {},\\\\\\\\n  };\\\\\\\\n\\\\\\\\n  const formState = state[stateKey] ?? null;\\\\\\\\n\\\\\\\\n  const formReset = () =>\\\\\\\\n    State.update((lastKnownComponentState) => ({\\\\\\\\n      ...lastKnownComponentState,\\\\\\\\n      [stateKey]: initialFormState,\\\\\\\\n      hasUnsubmittedChanges: false,\\\\\\\\n    }));\\\\\\\\n\\\\\\\\n  const formUpdate =\\\\\\\\n    ({ path, via: customFieldUpdate, ...params }) =>\\\\\\\\n    (fieldInput) => {\\\\\\\\n      const transformFn = (node) => {\\\\\\\\n        if (typeof customFieldUpdate === \\\\\\\\\\\\\\\"function\\\\\\\\\\\\\\\") {\\\\\\\\n          return customFieldUpdate({\\\\\\\\n            input: fieldInput?.target?.value ?? fieldInput,\\\\\\\\n            lastKnownValue: node,\\\\\\\\n            params,\\\\\\\\n          });\\\\\\\\n        } else {\\\\\\\\n          return Struct.defaultFieldUpdate({\\\\\\\\n            input: fieldInput?.target?.value ?? fieldInput,\\\\\\\\n            lastKnownValue: node,\\\\\\\\n            params,\\\\\\\\n          });\\\\\\\\n        }\\\\\\\\n      };\\\\\\\\n      const updatedValues = Struct.deepFieldUpdate(\\\\\\\\n        formState?.values ?? {},\\\\\\\\n        path,\\\\\\\\n        (node) => transformFn(node)\\\\\\\\n      );\\\\\\\\n      State.update((lastKnownComponentState) => ({\\\\\\\\n        ...lastKnownComponentState,\\\\\\\\n        [stateKey]: {\\\\\\\\n          hasUnsubmittedChanges: !Struct.isEqual(\\\\\\\\n            updatedValues,\\\\\\\\n            initialFormState.values\\\\\\\\n          ),\\\\\\\\n          values: updatedValues,\\\\\\\\n        },\\\\\\\\n      }));\\\\\\\\n\\\\\\\\n      if (typeof onUpdate === \\\\\\\\\\\\\\\"function\\\\\\\\\\\\\\\") {\\\\\\\\n        onUpdate(updatedValues);\\\\\\\\n      }\\\\\\\\n    };\\\\\\\\n\\\\\\\\n  return {\\\\\\\\n    hasUnsubmittedChanges: formState?.hasUnsubmittedChanges ?? false,\\\\\\\\n    values: {\\\\\\\\n      ...(initialValues ?? {}),\\\\\\\\n      ...(formState?.values ?? {}),\\\\\\\\n    },\\\\\\\\n    reset: formReset,\\\\\\\\n    stateKey,\\\\\\\\n    update: formUpdate,\\\\\\\\n  };\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst ValueView = styled.div`\\\\\\\\n  & > p {\\\\\\\\n    margin: 0;\\\\\\\\n  }\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst fieldParamsByType = {\\\\\\\\n  array: {\\\\\\\\n    name: \\\\\\\\\\\\\\\"components.molecule.Input\\\\\\\\\\\\\\\",\\\\\\\\n    inputProps: { type: \\\\\\\\\\\\\\\"text\\\\\\\\\\\\\\\" },\\\\\\\\n  },\\\\\\\\n\\\\\\\\n  boolean: {\\\\\\\\n    name: \\\\\\\\\\\\\\\"components.atom.Toggle\\\\\\\\\\\\\\\",\\\\\\\\n  },\\\\\\\\n\\\\\\\\n  string: {\\\\\\\\n    name: \\\\\\\\\\\\\\\"components.molecule.Input\\\\\\\\\\\\\\\",\\\\\\\\n    inputProps: { type: \\\\\\\\\\\\\\\"text\\\\\\\\\\\\\\\" },\\\\\\\\n  },\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst defaultFieldsRender = ({ schema, form, isEditable }) => (\\\\\\\\n  <>\\\\\\\\n    {Object.entries(schema).map(\\\\\\\\n      (\\\\\\\\n        [key, { format, inputProps, noop, label, order, style, ...fieldProps }],\\\\\\\\n        idx\\\\\\\\n      ) => {\\\\\\\\n        const fieldKey = `${idx}-${key}`,\\\\\\\\n          fieldValue = form.values[key];\\\\\\\\n\\\\\\\\n        const fieldType = Array.isArray(fieldValue)\\\\\\\\n          ? \\\\\\\\\\\\\\\"array\\\\\\\\\\\\\\\"\\\\\\\\n          : typeof (fieldValue ?? \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\");\\\\\\\\n\\\\\\\\n        const isDisabled = noop ?? inputProps.disabled ?? false;\\\\\\\\n\\\\\\\\n        const viewClassName = [\\\\\\\\n          (fieldValue?.length ?? 0) > 0 ? \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\" : \\\\\\\\\\\\\\\"text-muted\\\\\\\\\\\\\\\",\\\\\\\\n          \\\\\\\\\\\\\\\"m-0\\\\\\\\\\\\\\\",\\\\\\\\n        ].join(\\\\\\\\\\\\\\\" \\\\\\\\\\\\\\\");\\\\\\\\n\\\\\\\\n        return (\\\\\\\\n          <>\\\\\\\\n            <div\\\\\\\\n              className={[\\\\\\\\n                \\\\\\\\\\\\\\\"d-flex gap-3\\\\\\\\\\\\\\\",\\\\\\\\n                isEditable || noop ? \\\\\\\\\\\\\\\"d-none\\\\\\\\\\\\\\\" : \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\",\\\\\\\\n              ].join(\\\\\\\\\\\\\\\" \\\\\\\\\\\\\\\")}\\\\\\\\n              key={fieldKey}\\\\\\\\n              style={{ order }}\\\\\\\\n            >\\\\\\\\n              <label className=\\\\\\\\\\\\\\\"fw-bold w-25\\\\\\\\\\\\\\\">{label}</label>\\\\\\\\n\\\\\\\\n              <ValueView className={[viewClassName, \\\\\\\\\\\\\\\"w-75\\\\\\\\\\\\\\\"].join(\\\\\\\\\\\\\\\" \\\\\\\\\\\\\\\")}>\\\\\\\\n                {format !== \\\\\\\\\\\\\\\"markdown\\\\\\\\\\\\\\\" ? (\\\\\\\\n                  <span>\\\\\\\\n                    {(fieldType === \\\\\\\\\\\\\\\"array\\\\\\\\\\\\\\\" && format === \\\\\\\\\\\\\\\"comma-separated\\\\\\\\\\\\\\\"\\\\\\\\n                      ? fieldValue\\\\\\\\n                          .filter((string) => string.length > 0)\\\\\\\\n                          .join(\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\")\\\\\\\\n                      : fieldValue\\\\\\\\n                    )?.toString?.() || \\\\\\\\\\\\\\\"none\\\\\\\\\\\\\\\"}\\\\\\\\n                  </span>\\\\\\\\n                ) : (fieldValue?.length ?? 0) > 0 ? (\\\\\\\\n                  <Widget\\\\\\\\n                    src={\\\\\\\\n                      \\\\\\\\\\\\\\\"devhub.near/widget/devhub.components.molecule.MarkdownViewer\\\\\\\\\\\\\\\"\\\\\\\\n                    }\\\\\\\\n                    props={{\\\\\\\\n                      text: fieldValue,\\\\\\\\n                    }}\\\\\\\\n                  />\\\\\\\\n                ) : (\\\\\\\\n                  <span>none</span>\\\\\\\\n                )}\\\\\\\\n              </ValueView>\\\\\\\\n            </div>\\\\\\\\n            <Widget\\\\\\\\n              src={`devhub.near/widget/devhub.${fieldParamsByType[fieldType].name}`}\\\\\\\\n              props={{\\\\\\\\n                ...fieldProps,\\\\\\\\n                className: [\\\\\\\\n                  \\\\\\\\\\\\\\\"w-100\\\\\\\\\\\\\\\",\\\\\\\\n                  fieldProps.className ?? \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\",\\\\\\\\n                  isEditable && !noop ? \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\" : \\\\\\\\\\\\\\\"d-none\\\\\\\\\\\\\\\",\\\\\\\\n                ].join(\\\\\\\\\\\\\\\" \\\\\\\\\\\\\\\"),\\\\\\\\n\\\\\\\\n                disabled: isDisabled,\\\\\\\\n                format,\\\\\\\\n                key: `${fieldKey}--editable`,\\\\\\\\n                label,\\\\\\\\n                onChange: form.update({ path: [key] }),\\\\\\\\n                style: { ...style, order },\\\\\\\\n\\\\\\\\n                value:\\\\\\\\n                  fieldType === \\\\\\\\\\\\\\\"array\\\\\\\\\\\\\\\" && format === \\\\\\\\\\\\\\\"comma-separated\\\\\\\\\\\\\\\"\\\\\\\\n                    ? fieldValue.join(\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\")\\\\\\\\n                    : fieldValue,\\\\\\\\n\\\\\\\\n                inputProps: {\\\\\\\\n                  ...(inputProps ?? {}),\\\\\\\\n                  disabled: isDisabled,\\\\\\\\n\\\\\\\\n                  title:\\\\\\\\n                    noop ?? false\\\\\\\\n                      ? \\\\\\\\\\\\\\\"Temporarily disabled due to technical reasons.\\\\\\\\\\\\\\\"\\\\\\\\n                      : inputProps.title,\\\\\\\\n\\\\\\\\n                  ...(fieldParamsByType[fieldType].inputProps ?? {}),\\\\\\\\n                  tabIndex: order,\\\\\\\\n                },\\\\\\\\n              }}\\\\\\\\n            />\\\\\\\\n          </>\\\\\\\\n        );\\\\\\\\n      }\\\\\\\\n    )}\\\\\\\\n  </>\\\\\\\\n);\\\\\\\\n\\\\\\\\nconst Configurator = ({\\\\\\\\n  actionsAdditional,\\\\\\\\n  cancelLabel,\\\\\\\\n  classNames,\\\\\\\\n  externalState,\\\\\\\\n  fieldsRender: customFieldsRender,\\\\\\\\n  formatter: toFormatted,\\\\\\\\n  isValid,\\\\\\\\n  isActive,\\\\\\\\n  onCancel,\\\\\\\\n  onChange,\\\\\\\\n  onSubmit,\\\\\\\\n  schema,\\\\\\\\n  submitIcon,\\\\\\\\n  submitLabel,\\\\\\\\n  hideSubmitBtn,\\\\\\\\n}) => {\\\\\\\\n  const fieldsRender = customFieldsRender || defaultFieldsRender;\\\\\\\\n\\\\\\\\n  const initialValues = Struct.typeMatch(schema)\\\\\\\\n    ? Struct.pick(externalState ?? {}, Object.keys(schema))\\\\\\\\n    : {};\\\\\\\\n\\\\\\\\n  const form = useForm({ initialValues, onUpdate: onChange, stateKey: \\\\\\\\\\\\\\\"form\\\\\\\\\\\\\\\" });\\\\\\\\n\\\\\\\\n  const formFormattedValues = toFormatted\\\\\\\\n    ? toFormatted(form.values)\\\\\\\\n    : form.values;\\\\\\\\n\\\\\\\\n  const internalValidation = () =>\\\\\\\\n    Object.keys(schema).every((key) => {\\\\\\\\n      const fieldDefinition = schema[key];\\\\\\\\n      const value = form.values[key];\\\\\\\\n      if (!value || value.length === 0) {\\\\\\\\n        return !fieldDefinition.inputProps.required;\\\\\\\\n      } else if (\\\\\\\\n        fieldDefinition.inputProps.min &&\\\\\\\\n        fieldDefinition.inputProps.min > value?.length\\\\\\\\n      ) {\\\\\\\\n        return false;\\\\\\\\n      } else if (\\\\\\\\n        fieldDefinition.inputProps.max &&\\\\\\\\n        fieldDefinition.inputProps.max < value?.length\\\\\\\\n      ) {\\\\\\\\n        return false;\\\\\\\\n      } else if (\\\\\\\\n        fieldDefinition.inputProps.allowCommaAndSpace === false &&\\\\\\\\n        /^[^,\\\\\\\\\\\\\\\\s]*$/.test(value) === false\\\\\\\\n      ) {\\\\\\\\n        return false;\\\\\\\\n      } else if (\\\\\\\\n        fieldDefinition.inputProps.validUrl === true &&\\\\\\\\n        /^(www\\\\\\\\\\\\\\\\.)?[-a-zA-Z0-9@:%._\\\\\\\\\\\\\\\\+~#=]{2,256}\\\\\\\\\\\\\\\\.[a-z]{2,6}\\\\\\\\\\\\\\\\b([-a-zA-Z0-9@:%_\\\\\\\\\\\\\\\\+.~#?&//=]*)$/.test(\\\\\\\\n          value\\\\\\\\n        ) === false\\\\\\\\n      ) {\\\\\\\\n        return false;\\\\\\\\n      }\\\\\\\\n      return true;\\\\\\\\n    });\\\\\\\\n\\\\\\\\n  const isFormValid = () => {\\\\\\\\n    return internalValidation() && (!isValid || isValid(formFormattedValues));\\\\\\\\n  };\\\\\\\\n\\\\\\\\n  const onCancelClick = () => {\\\\\\\\n    form.reset();\\\\\\\\n    if (onCancel) onCancel();\\\\\\\\n  };\\\\\\\\n\\\\\\\\n  const onSubmitClick = () => {\\\\\\\\n    if (onSubmit && isFormValid()) {\\\\\\\\n      onSubmit(formFormattedValues);\\\\\\\\n    }\\\\\\\\n  };\\\\\\\\n\\\\\\\\n  return (\\\\\\\\n    <div className=\\\\\\\\\\\\\\\"flex-grow-1 d-flex flex-column gap-4\\\\\\\\\\\\\\\">\\\\\\\\n      <div className={`d-flex flex-column gap-${isActive ? 1 : 4}`}>\\\\\\\\n        {fieldsRender({\\\\\\\\n          form,\\\\\\\\n          isEditable: isActive,\\\\\\\\n          schema,\\\\\\\\n        })}\\\\\\\\n      </div>\\\\\\\\n      {isActive && !hideSubmitBtn && (\\\\\\\\n        <div className=\\\\\\\\\\\\\\\"d-flex align-items-center justify-content-end gap-3 mt-auto\\\\\\\\\\\\\\\">\\\\\\\\n          {actionsAdditional ? (\\\\\\\\n            <div className=\\\\\\\\\\\\\\\"me-auto\\\\\\\\\\\\\\\">{actionsAdditional}</div>\\\\\\\\n          ) : null}\\\\\\\\n\\\\\\\\n          <Widget\\\\\\\\n            src={\\\\\\\\\\\\\\\"devhub.near/widget/devhub.components.molecule.Button\\\\\\\\\\\\\\\"}\\\\\\\\n            props={{\\\\\\\\n              classNames: { root: \\\\\\\\\\\\\\\"btn-outline-danger shadow-none border-0\\\\\\\\\\\\\\\" },\\\\\\\\n              label: cancelLabel || \\\\\\\\\\\\\\\"Cancel\\\\\\\\\\\\\\\",\\\\\\\\n              onClick: onCancelClick,\\\\\\\\n            }}\\\\\\\\n          />\\\\\\\\n          <Widget\\\\\\\\n            src={\\\\\\\\\\\\\\\"devhub.near/widget/devhub.components.molecule.Button\\\\\\\\\\\\\\\"}\\\\\\\\n            props={{\\\\\\\\n              classNames: { root: classNames.submit || \\\\\\\\\\\\\\\"btn-success\\\\\\\\\\\\\\\" },\\\\\\\\n              disabled: !form.hasUnsubmittedChanges || !isFormValid(),\\\\\\\\n              icon: submitIcon || {\\\\\\\\n                type: \\\\\\\\\\\\\\\"bootstrap_icon\\\\\\\\\\\\\\\",\\\\\\\\n                variant: \\\\\\\\\\\\\\\"bi-check-circle-fill\\\\\\\\\\\\\\\",\\\\\\\\n              },\\\\\\\\n              label: submitLabel || \\\\\\\\\\\\\\\"Submit\\\\\\\\\\\\\\\",\\\\\\\\n              onClick: onSubmitClick,\\\\\\\\n            }}\\\\\\\\n          />\\\\\\\\n        </div>\\\\\\\\n      )}\\\\\\\\n    </div>\\\\\\\\n  );\\\\\\\\n};\\\\\\\\n\\\\\\\\nreturn Configurator(props);\\\\\\\\n\"}, \"devhub.entity.addon.github.Configurator\": {\"\": \"const Struct = VM.require(\\\\\\\\\\\\\\\"devhub.near/widget/core.lib.struct\\\\\\\\\\\\\\\");\\\\\\\\n\\\\\\\\nif (!Struct) {\\\\\\\\n  return <p>Loading modules...</p>;\\\\\\\\n}\\\\\\\\nconst { useQuery } = VM.require(\\\\\\\\n  \\\\\\\\\\\\\\\"devhub.near/widget/core.adapter.devhub-contract\\\\\\\\\\\\\\\"\\\\\\\\n);\\\\\\\\nconst { uuid, withUUIDIndex } = VM.require(\\\\\\\\n  \\\\\\\\\\\\\\\"devhub.near/widget/core.lib.uuid\\\\\\\\\\\\\\\"\\\\\\\\n);\\\\\\\\n\\\\\\\\nuuid || (uuid = () => {});\\\\\\\\nwithUUIDIndex || (withUUIDIndex = () => {});\\\\\\\\nuseQuery || (useQuery = () => {});\\\\\\\\n\\\\\\\\nconst AttractableDiv = styled.div`\\\\\\\\n  box-shadow: 0 0.125rem 0.25rem rgba(0, 0, 0, 0.075) !important;\\\\\\\\n  transition: box-shadow 0.6s;\\\\\\\\n\\\\\\\\n  &:hover {\\\\\\\\n    box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.15) !important;\\\\\\\\n  }\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst settings = {\\\\\\\\n  maxColumnsNumber: 20,\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst GithubKanbanBoardTicketFeaturesSchema = {\\\\\\\\n  id: { label: \\\\\\\\\\\\\\\"GitHub ID\\\\\\\\\\\\\\\" },\\\\\\\\n  author: { label: \\\\\\\\\\\\\\\"Author\\\\\\\\\\\\\\\" },\\\\\\\\n  labels: { label: \\\\\\\\\\\\\\\"Labels\\\\\\\\\\\\\\\" },\\\\\\\\n  type: { label: \\\\\\\\\\\\\\\"Type\\\\\\\\\\\\\\\" },\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst GithubKanbanBoardTicketTypesSchema = {\\\\\\\\n  Issue: { label: \\\\\\\\\\\\\\\"Issue\\\\\\\\\\\\\\\" },\\\\\\\\n  PullRequest: { label: \\\\\\\\\\\\\\\"Pull Request\\\\\\\\\\\\\\\" },\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst GithubKanbanBoardDefaults = {\\\\\\\\n  columns: {},\\\\\\\\n  dataTypesIncluded: { Issue: false, PullRequest: true },\\\\\\\\n  description: \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\",\\\\\\\\n  repoURL: \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\",\\\\\\\\n  ticketState: \\\\\\\\\\\\\\\"all\\\\\\\\\\\\\\\",\\\\\\\\n  title: \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\",\\\\\\\\n  metadata: {\\\\\\\\n    id: uuid(),\\\\\\\\n    type: \\\\\\\\\\\\\\\"github.kanban_board\\\\\\\\\\\\\\\",\\\\\\\\n    ticket: {\\\\\\\\n      type: \\\\\\\\\\\\\\\"github.kanban_ticket\\\\\\\\\\\\\\\",\\\\\\\\n      features: { id: true, author: true, labels: true, type: true },\\\\\\\\n    },\\\\\\\\n  },\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst toMigrated = ({ metadata, id, ...restParams }) => ({\\\\\\\\n  metadata: {\\\\\\\\n    ...GithubKanbanBoardDefaults.metadata,\\\\\\\\n    ...metadata,\\\\\\\\n    id: id ?? metadata.id,\\\\\\\\n  },\\\\\\\\n  ...restParams,\\\\\\\\n});\\\\\\\\n\\\\\\\\nconst GithubViewConfigurator = ({ kanbanBoards, permissions, onSubmit }) => {\\\\\\\\n  const data = Object.values(kanbanBoards)?.[0];\\\\\\\\n\\\\\\\\n  if (!data) {\\\\\\\\n    return (\\\\\\\\n      <div class=\\\\\\\\\\\\\\\"alert alert-danger\\\\\\\\\\\\\\\" role=\\\\\\\\\\\\\\\"alert\\\\\\\\\\\\\\\">\\\\\\\\n        Loading...\\\\\\\\n      </div>\\\\\\\\n    );\\\\\\\\n  }\\\\\\\\n\\\\\\\\n  const initialBoardState = Struct.typeMatch(data) ? toMigrated(data) : {};\\\\\\\\n\\\\\\\\n  const getColumnData = useCallback((state) => {\\\\\\\\n    if (Object.keys(state).length > 0) {\\\\\\\\n      return state?.columns ?? {};\\\\\\\\n    }\\\\\\\\n    return state;\\\\\\\\n  }, []);\\\\\\\\n\\\\\\\\n  const getNonColumnData = useCallback((state) => {\\\\\\\\n    if (Object.keys(state).length > 0) {\\\\\\\\n      delete state.columns;\\\\\\\\n      return state;\\\\\\\\n    }\\\\\\\\n    return state;\\\\\\\\n  }, []);\\\\\\\\n\\\\\\\\n  // to improve the state update speed, decoupled columns and other configuration metadata\\\\\\\\n  const [parentState, setParentState] = useState(initialBoardState);\\\\\\\\n  const [metadataState, setMetadata] = useState(\\\\\\\\n    getNonColumnData(initialBoardState)\\\\\\\\n  );\\\\\\\\n  const [showPreview, setPreview] = useState(false);\\\\\\\\n  const [columnsState, setColumnsState] = useState(\\\\\\\\n    getColumnData(initialBoardState)\\\\\\\\n  );\\\\\\\\n\\\\\\\\n  const formUpdate =\\\\\\\\n    ({ path, via: customFieldUpdate, isColumnsUpdate, ...params }) =>\\\\\\\\n    (fieldInput) => {\\\\\\\\n      const transformFn = (node) => {\\\\\\\\n        if (typeof customFieldUpdate === \\\\\\\\\\\\\\\"function\\\\\\\\\\\\\\\") {\\\\\\\\n          return customFieldUpdate({\\\\\\\\n            input: fieldInput?.target?.value ?? fieldInput,\\\\\\\\n            lastKnownValue: node,\\\\\\\\n            params,\\\\\\\\n          });\\\\\\\\n        } else {\\\\\\\\n          return Struct.defaultFieldUpdate({\\\\\\\\n            input: fieldInput?.target?.value ?? fieldInput,\\\\\\\\n            lastKnownValue: node,\\\\\\\\n            params,\\\\\\\\n          });\\\\\\\\n        }\\\\\\\\n      };\\\\\\\\n      const updatedValues = Struct.deepFieldUpdate(\\\\\\\\n        (isColumnsUpdate ? { columns: columnsState } : metadataState) ?? {},\\\\\\\\n        path,\\\\\\\\n        (node) => transformFn(node)\\\\\\\\n      );\\\\\\\\n      if (isColumnsUpdate) {\\\\\\\\n        setColumnsState(updatedValues?.columns);\\\\\\\\n      } else {\\\\\\\\n        setMetadata((prevFormState) => ({\\\\\\\\n          ...prevFormState,\\\\\\\\n          ...updatedValues,\\\\\\\\n        }));\\\\\\\\n      }\\\\\\\\n    };\\\\\\\\n\\\\\\\\n  const formReset = () => {\\\\\\\\n    setColumnsState(getColumnData(initialBoardState));\\\\\\\\n    setMetadata(getNonColumnData(initialBoardState));\\\\\\\\n    setParentState(initialBoardState);\\\\\\\\n  };\\\\\\\\n\\\\\\\\n  const newViewInit = () => {\\\\\\\\n    setColumnsState(getColumnData(GithubKanbanBoardDefaults));\\\\\\\\n    setMetadata(getNonColumnData(GithubKanbanBoardDefaults));\\\\\\\\n    setParentState(GithubKanbanBoardDefaults);\\\\\\\\n  };\\\\\\\\n\\\\\\\\n  const columnsCreateNew = ({ lastKnownValue }) =>\\\\\\\\n    Object.keys(lastKnownValue).length < settings.maxColumnsNumber\\\\\\\\n      ? {\\\\\\\\n          ...(lastKnownValue ?? {}),\\\\\\\\n          ...withUUIDIndex({\\\\\\\\n            description: \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\",\\\\\\\\n            labelSearchTerms: [],\\\\\\\\n            title: \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\",\\\\\\\\n          }),\\\\\\\\n        }\\\\\\\\n      : lastKnownValue;\\\\\\\\n\\\\\\\\n  const columnsDeleteById =\\\\\\\\n    (id) =>\\\\\\\\n    ({ lastKnownValue }) =>\\\\\\\\n      Object.fromEntries(\\\\\\\\n        Object.entries(lastKnownValue).filter(([columnId]) => columnId !== id)\\\\\\\\n      );\\\\\\\\n\\\\\\\\n  const onCancel = () => {\\\\\\\\n    formReset();\\\\\\\\n  };\\\\\\\\n\\\\\\\\n  const updateParentState = () => {\\\\\\\\n    const updatedState = { ...metadataState, columns: columnsState };\\\\\\\\n    setParentState(updatedState);\\\\\\\\n    return updatedState;\\\\\\\\n  };\\\\\\\\n\\\\\\\\n  const onSave = () => onSubmit(updateParentState());\\\\\\\\n\\\\\\\\n  const formElement = (\\\\\\\\n    <>\\\\\\\\n      <div className=\\\\\\\\\\\\\\\"d-flex flex-column\\\\\\\\\\\\\\\">\\\\\\\\n        <div className=\\\\\\\\\\\\\\\"d-flex gap-1 flex-column flex-xl-row\\\\\\\\\\\\\\\">\\\\\\\\n          <Widget\\\\\\\\n            src={`devhub.near/widget/devhub.components.molecule.Input`}\\\\\\\\n            props={{\\\\\\\\n              className: \\\\\\\\\\\\\\\"w-100\\\\\\\\\\\\\\\",\\\\\\\\n              key: `${metadataState.metadata.id}-repoURL`,\\\\\\\\n              label: \\\\\\\\\\\\\\\"Repository URL\\\\\\\\\\\\\\\",\\\\\\\\n              onChange: formUpdate({\\\\\\\\n                path: [\\\\\\\\\\\\\\\"repoURL\\\\\\\\\\\\\\\"],\\\\\\\\n                isColumnsUpdate: false,\\\\\\\\n              }),\\\\\\\\n              placeholder: \\\\\\\\\\\\\\\"https://github.com/example-org/example-repo\\\\\\\\\\\\\\\",\\\\\\\\n              value: metadataState.repoURL,\\\\\\\\n            }}\\\\\\\\n          />\\\\\\\\n          <Widget\\\\\\\\n            src={`devhub.near/widget/devhub.components.molecule.Input`}\\\\\\\\n            props={{\\\\\\\\n              className: \\\\\\\\\\\\\\\"w-100\\\\\\\\\\\\\\\",\\\\\\\\n              key: `${metadataState.metadata.id}-title`,\\\\\\\\n              label: \\\\\\\\\\\\\\\"Title\\\\\\\\\\\\\\\",\\\\\\\\n              onChange: formUpdate({ path: [\\\\\\\\\\\\\\\"title\\\\\\\\\\\\\\\"], isColumnsUpdate: false }),\\\\\\\\n              placeholder: \\\\\\\\\\\\\\\"NEAR Protocol NEPs\\\\\\\\\\\\\\\",\\\\\\\\n              value: metadataState.title,\\\\\\\\n            }}\\\\\\\\n          />\\\\\\\\n        </div>\\\\\\\\n\\\\\\\\n        <Widget\\\\\\\\n          src={`devhub.near/widget/devhub.components.molecule.Input`}\\\\\\\\n          props={{\\\\\\\\n            className: \\\\\\\\\\\\\\\"w-100\\\\\\\\\\\\\\\",\\\\\\\\n            key: `${metadataState.metadata.id}-description`,\\\\\\\\n            label: \\\\\\\\\\\\\\\"Description\\\\\\\\\\\\\\\",\\\\\\\\n            onChange: formUpdate({\\\\\\\\n              path: [\\\\\\\\\\\\\\\"description\\\\\\\\\\\\\\\"],\\\\\\\\n              isColumnsUpdate: false,\\\\\\\\n            }),\\\\\\\\n            placeholder: \\\\\\\\\\\\\\\"Latest NEAR Enhancement Proposals by status.\\\\\\\\\\\\\\\",\\\\\\\\n            value: metadataState.description,\\\\\\\\n          }}\\\\\\\\n        />\\\\\\\\n      </div>\\\\\\\\n\\\\\\\\n      <div className=\\\\\\\\\\\\\\\"d-flex gap-4 flex-row flex-wrap justify-content-between\\\\\\\\\\\\\\\">\\\\\\\\n        <Widget\\\\\\\\n          src={`devhub.near/widget/devhub.components.organism.Configurator`}\\\\\\\\n          props={{\\\\\\\\n            heading: \\\\\\\\\\\\\\\"Ticket types\\\\\\\\\\\\\\\",\\\\\\\\n            classNames: { root: \\\\\\\\\\\\\\\"col-12 col-md-4 h-auto\\\\\\\\\\\\\\\" },\\\\\\\\n            externalState: metadataState.dataTypesIncluded,\\\\\\\\n            isActive: true,\\\\\\\\n            isEmbedded: true,\\\\\\\\n            isUnlocked: permissions.can_configure,\\\\\\\\n            onChange: formUpdate({\\\\\\\\n              path: [\\\\\\\\\\\\\\\"dataTypesIncluded\\\\\\\\\\\\\\\"],\\\\\\\\n              isColumnsUpdate: false,\\\\\\\\n            }),\\\\\\\\n            schema: GithubKanbanBoardTicketTypesSchema,\\\\\\\\n            hideSubmitBtn: true,\\\\\\\\n          }}\\\\\\\\n        />\\\\\\\\n\\\\\\\\n        <div\\\\\\\\n          className={[\\\\\\\\n            \\\\\\\\\\\\\\\"col-12 col-md-3\\\\\\\\\\\\\\\",\\\\\\\\n            \\\\\\\\\\\\\\\"d-flex gap-3 flex-column justify-content-center p-4\\\\\\\\\\\\\\\",\\\\\\\\n          ].join(\\\\\\\\\\\\\\\" \\\\\\\\\\\\\\\")}\\\\\\\\n        >\\\\\\\\n          <span\\\\\\\\n            className=\\\\\\\\\\\\\\\"d-inline-flex gap-2\\\\\\\\\\\\\\\"\\\\\\\\n            id={`${metadataState.metadata.id}-ticketState`}\\\\\\\\n          >\\\\\\\\n            <i class=\\\\\\\\\\\\\\\"bi bi-cone-striped\\\\\\\\\\\\\\\" />\\\\\\\\n            <span>Ticket state</span>\\\\\\\\n          </span>\\\\\\\\n          <Widget\\\\\\\\n            src={`devhub.near/widget/devhub.components.molecule.Switch`}\\\\\\\\n            props={{\\\\\\\\n              currentValue: metadataState.ticketState,\\\\\\\\n              key: \\\\\\\\\\\\\\\"ticketState\\\\\\\\\\\\\\\",\\\\\\\\n              onChange: formUpdate({\\\\\\\\n                path: [\\\\\\\\\\\\\\\"ticketState\\\\\\\\\\\\\\\"],\\\\\\\\n                isColumnsUpdate: false,\\\\\\\\n              }),\\\\\\\\n              options: [\\\\\\\\n                { label: \\\\\\\\\\\\\\\"All\\\\\\\\\\\\\\\", value: \\\\\\\\\\\\\\\"all\\\\\\\\\\\\\\\" },\\\\\\\\n                { label: \\\\\\\\\\\\\\\"Open\\\\\\\\\\\\\\\", value: \\\\\\\\\\\\\\\"open\\\\\\\\\\\\\\\" },\\\\\\\\n                { label: \\\\\\\\\\\\\\\"Closed\\\\\\\\\\\\\\\", value: \\\\\\\\\\\\\\\"closed\\\\\\\\\\\\\\\" },\\\\\\\\n              ],\\\\\\\\n            }}\\\\\\\\n          />\\\\\\\\n        </div>\\\\\\\\n        <Widget\\\\\\\\n          src={`devhub.near/widget/devhub.components.organism.Configurator`}\\\\\\\\n          props={{\\\\\\\\n            heading: \\\\\\\\\\\\\\\"Card fields\\\\\\\\\\\\\\\",\\\\\\\\n            classNames: { root: \\\\\\\\\\\\\\\"col-12 col-md-4 h-auto\\\\\\\\\\\\\\\" },\\\\\\\\n            externalState: metadataState.metadata.ticket.features,\\\\\\\\n            isActive: true,\\\\\\\\n            isEmbedded: true,\\\\\\\\n            isUnlocked: permissions.can_configure,\\\\\\\\n            onChange: formUpdate({\\\\\\\\n              path: [\\\\\\\\\\\\\\\"metadata\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"ticket\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"features\\\\\\\\\\\\\\\"],\\\\\\\\n              isColumnsUpdate: false,\\\\\\\\n            }),\\\\\\\\n            schema: GithubKanbanBoardTicketFeaturesSchema,\\\\\\\\n            hideSubmitBtn: true,\\\\\\\\n          }}\\\\\\\\n        />\\\\\\\\n      </div>\\\\\\\\n\\\\\\\\n      <div className=\\\\\\\\\\\\\\\"d-flex align-items-center justify-content-between mb-2\\\\\\\\\\\\\\\">\\\\\\\\n        <span className=\\\\\\\\\\\\\\\"d-inline-flex gap-2 m-0\\\\\\\\\\\\\\\">\\\\\\\\n          <i className=\\\\\\\\\\\\\\\"bi bi-list-task\\\\\\\\\\\\\\\" />\\\\\\\\n          <span>{`Columns ( max. ${settings.maxColumnsNumber} )`}</span>\\\\\\\\n        </span>\\\\\\\\n      </div>\\\\\\\\n\\\\\\\\n      <div className=\\\\\\\\\\\\\\\"d-flex flex-column align-items-center gap-3 w-100\\\\\\\\\\\\\\\">\\\\\\\\n        {Object.values(columnsState ?? {}).map(\\\\\\\\n          ({ id, description, labelSearchTerms, title }, index) => (\\\\\\\\n            <AttractableDiv\\\\\\\\n              className=\\\\\\\\\\\\\\\"d-flex gap-3 rounded-4 border p-3 w-100\\\\\\\\\\\\\\\"\\\\\\\\n              key={`column-${id}-configurator`}\\\\\\\\n            >\\\\\\\\n              <div className=\\\\\\\\\\\\\\\"d-flex flex-column gap-1 w-100\\\\\\\\\\\\\\\">\\\\\\\\n                <Widget\\\\\\\\n                  src={`devhub.near/widget/devhub.components.molecule.Input`}\\\\\\\\n                  props={{\\\\\\\\n                    className: \\\\\\\\\\\\\\\"flex-grow-1\\\\\\\\\\\\\\\",\\\\\\\\n                    key: `${metadataState.metadata.id}-column-${id}-title`,\\\\\\\\n                    label: \\\\\\\\\\\\\\\"Title\\\\\\\\\\\\\\\",\\\\\\\\n                    onChange: formUpdate({\\\\\\\\n                      path: [\\\\\\\\\\\\\\\"columns\\\\\\\\\\\\\\\", id, \\\\\\\\\\\\\\\"title\\\\\\\\\\\\\\\"],\\\\\\\\n                      isColumnsUpdate: true,\\\\\\\\n                    }),\\\\\\\\n                    placeholder: \\\\\\\\\\\\\\\"\\\\\\\\u{1f440} Review\\\\\\\\\\\\\\\",\\\\\\\\n                    value: title,\\\\\\\\n                  }}\\\\\\\\n                />\\\\\\\\n                <Widget\\\\\\\\n                  src={`devhub.near/widget/devhub.components.molecule.Input`}\\\\\\\\n                  props={{\\\\\\\\n                    format: \\\\\\\\\\\\\\\"comma-separated\\\\\\\\\\\\\\\",\\\\\\\\n                    key: `${metadataState.metadata.id}-column-${title}-labelSearchTerms`,\\\\\\\\n                    label: `Search terms for all the labels\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\tMUST be presented in included tickets`,\\\\\\\\n                    onChange: formUpdate({\\\\\\\\n                      path: [\\\\\\\\\\\\\\\"columns\\\\\\\\\\\\\\\", id, \\\\\\\\\\\\\\\"labelSearchTerms\\\\\\\\\\\\\\\"],\\\\\\\\n                      isColumnsUpdate: true,\\\\\\\\n                    }),\\\\\\\\n                    placeholder: \\\\\\\\\\\\\\\"WG-, draft, review, proposal, ...\\\\\\\\\\\\\\\",\\\\\\\\n                    value: labelSearchTerms.join(\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"),\\\\\\\\n                  }}\\\\\\\\n                />\\\\\\\\n                <Widget\\\\\\\\n                  src={`devhub.near/widget/devhub.components.molecule.Input`}\\\\\\\\n                  props={{\\\\\\\\n                    className: \\\\\\\\\\\\\\\"flex-grow-1\\\\\\\\\\\\\\\",\\\\\\\\n                    key: `${metadataState.metadata.id}-column-${id}-description`,\\\\\\\\n                    label: \\\\\\\\\\\\\\\"Description\\\\\\\\\\\\\\\",\\\\\\\\n                    onChange: formUpdate({\\\\\\\\n                      path: [\\\\\\\\\\\\\\\"columns\\\\\\\\\\\\\\\", id, \\\\\\\\\\\\\\\"description\\\\\\\\\\\\\\\"],\\\\\\\\n                      isColumnsUpdate: true,\\\\\\\\n                    }),\\\\\\\\n                    placeholder:\\\\\\\\n                      \\\\\\\\\\\\\\\"NEPs that need a review by Subject Matter Experts.\\\\\\\\\\\\\\\",\\\\\\\\n                    value: description,\\\\\\\\n                  }}\\\\\\\\n                />\\\\\\\\n              </div>\\\\\\\\n\\\\\\\\n              <div\\\\\\\\n                className=\\\\\\\\\\\\\\\"d-flex flex-column gap-3 border-start p-3 pe-0\\\\\\\\\\\\\\\"\\\\\\\\n                style={{ marginTop: -16, marginBottom: -16 }}\\\\\\\\n              >\\\\\\\\n                <button\\\\\\\\n                  className=\\\\\\\\\\\\\\\"btn btn-outline-danger\\\\\\\\\\\\\\\"\\\\\\\\n                  onClick={formUpdate({\\\\\\\\n                    path: [\\\\\\\\\\\\\\\"columns\\\\\\\\\\\\\\\"],\\\\\\\\n                    via: columnsDeleteById(id),\\\\\\\\n                    isColumnsUpdate: true,\\\\\\\\n                  })}\\\\\\\\n                  title=\\\\\\\\\\\\\\\"Delete column\\\\\\\\\\\\\\\"\\\\\\\\n                >\\\\\\\\n                  <i className=\\\\\\\\\\\\\\\"bi bi-trash-fill\\\\\\\\\\\\\\\" />\\\\\\\\n                </button>\\\\\\\\n              </div>\\\\\\\\n            </AttractableDiv>\\\\\\\\n          )\\\\\\\\n        )}\\\\\\\\n\\\\\\\\n        <div className=\\\\\\\\\\\\\\\"d-flex gap-3 justify-content-end w-100\\\\\\\\\\\\\\\">\\\\\\\\n          <Widget\\\\\\\\n            src={`devhub.near/widget/devhub.components.molecule.Button`}\\\\\\\\n            props={{\\\\\\\\n              classNames: {\\\\\\\\n                root: \\\\\\\\\\\\\\\"d-flex btn btn-outline-danger shadow-none border-0\\\\\\\\\\\\\\\",\\\\\\\\n              },\\\\\\\\n              isHidden: typeof onCancel !== \\\\\\\\\\\\\\\"function\\\\\\\\\\\\\\\",\\\\\\\\n              label: \\\\\\\\\\\\\\\"Cancel\\\\\\\\\\\\\\\",\\\\\\\\n              onClick: onCancel,\\\\\\\\n            }}\\\\\\\\n          />\\\\\\\\n          <Widget\\\\\\\\n            src={`devhub.near/widget/devhub.components.molecule.Button`}\\\\\\\\n            props={{\\\\\\\\n              classNames: { root: \\\\\\\\\\\\\\\"btn btn-success\\\\\\\\\\\\\\\" },\\\\\\\\n              disabled: form.isSynced,\\\\\\\\n              icon: {\\\\\\\\n                type: \\\\\\\\\\\\\\\"svg_icon\\\\\\\\\\\\\\\",\\\\\\\\n                variant: \\\\\\\\\\\\\\\"floppy_drive\\\\\\\\\\\\\\\",\\\\\\\\n                width: 14,\\\\\\\\n                height: 14,\\\\\\\\n              },\\\\\\\\n              isHidden: typeof onSave !== \\\\\\\\\\\\\\\"function\\\\\\\\\\\\\\\",\\\\\\\\n              label: \\\\\\\\\\\\\\\"Save\\\\\\\\\\\\\\\",\\\\\\\\n              onClick: onSave,\\\\\\\\n            }}\\\\\\\\n          />\\\\\\\\n        </div>\\\\\\\\n      </div>\\\\\\\\n    </>\\\\\\\\n  );\\\\\\\\n\\\\\\\\n  return (\\\\\\\\n    <div\\\\\\\\n      className=\\\\\\\\\\\\\\\"d-flex flex-column gap-4 w-100\\\\\\\\\\\\\\\"\\\\\\\\n      style={{ maxWidth: \\\\\\\\\\\\\\\"100%\\\\\\\\\\\\\\\" }}\\\\\\\\n    >\\\\\\\\n      <ul className=\\\\\\\\\\\\\\\"nav nav-tabs\\\\\\\\\\\\\\\" id=\\\\\\\\\\\\\\\"editPreviewTabs\\\\\\\\\\\\\\\" role=\\\\\\\\\\\\\\\"tablist\\\\\\\\\\\\\\\">\\\\\\\\n        <li className=\\\\\\\\\\\\\\\"nav-item\\\\\\\\\\\\\\\" role=\\\\\\\\\\\\\\\"presentation\\\\\\\\\\\\\\\">\\\\\\\\n          <button\\\\\\\\n            className={`nav-link ${!showPreview ? \\\\\\\\\\\\\\\"active\\\\\\\\\\\\\\\" : \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\"}`}\\\\\\\\n            id=\\\\\\\\\\\\\\\"edit-tab\\\\\\\\\\\\\\\"\\\\\\\\n            data-bs-toggle=\\\\\\\\\\\\\\\"tab\\\\\\\\\\\\\\\"\\\\\\\\n            data-bs-target=\\\\\\\\\\\\\\\"#edit\\\\\\\\\\\\\\\"\\\\\\\\n            type=\\\\\\\\\\\\\\\"button\\\\\\\\\\\\\\\"\\\\\\\\n            role=\\\\\\\\\\\\\\\"tab\\\\\\\\\\\\\\\"\\\\\\\\n            aria-controls=\\\\\\\\\\\\\\\"edit\\\\\\\\\\\\\\\"\\\\\\\\n            aria-selected=\\\\\\\\\\\\\\\"true\\\\\\\\\\\\\\\"\\\\\\\\n            onClick={() => setPreview(false)}\\\\\\\\n          >\\\\\\\\n            Edit\\\\\\\\n          </button>\\\\\\\\n        </li>\\\\\\\\n        <li className=\\\\\\\\\\\\\\\"nav-item\\\\\\\\\\\\\\\" role=\\\\\\\\\\\\\\\"presentation\\\\\\\\\\\\\\\">\\\\\\\\n          <button\\\\\\\\n            className={`nav-link ${showPreview ? \\\\\\\\\\\\\\\"active\\\\\\\\\\\\\\\" : \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\"}`}\\\\\\\\n            id=\\\\\\\\\\\\\\\"preview-tab\\\\\\\\\\\\\\\"\\\\\\\\n            data-bs-toggle=\\\\\\\\\\\\\\\"tab\\\\\\\\\\\\\\\"\\\\\\\\n            data-bs-target=\\\\\\\\\\\\\\\"#preview\\\\\\\\\\\\\\\"\\\\\\\\n            type=\\\\\\\\\\\\\\\"button\\\\\\\\\\\\\\\"\\\\\\\\n            role=\\\\\\\\\\\\\\\"tab\\\\\\\\\\\\\\\"\\\\\\\\n            aria-controls=\\\\\\\\\\\\\\\"preview\\\\\\\\\\\\\\\"\\\\\\\\n            aria-selected=\\\\\\\\\\\\\\\"false\\\\\\\\\\\\\\\"\\\\\\\\n            onClick={() => {\\\\\\\\n              updateParentState();\\\\\\\\n              setPreview(true);\\\\\\\\n            }}\\\\\\\\n          >\\\\\\\\n            Preview\\\\\\\\n          </button>\\\\\\\\n        </li>\\\\\\\\n      </ul>\\\\\\\\n      {showPreview ? (\\\\\\\\n        <div>\\\\\\\\n          <Widget\\\\\\\\n            src={`devhub.near/widget/devhub.entity.addon.github.Viewer`}\\\\\\\\n            props={{\\\\\\\\n              kanbanBoards: {\\\\\\\\n                [parentState.metadata.id]: parentState,\\\\\\\\n              },\\\\\\\\n            }}\\\\\\\\n          />\\\\\\\\n        </div>\\\\\\\\n      ) : (\\\\\\\\n        <div className={[\\\\\\\\\\\\\\\"d-flex flex-column gap-4 w-100\\\\\\\\\\\\\\\"].join(\\\\\\\\\\\\\\\" \\\\\\\\\\\\\\\")}>\\\\\\\\n          <div className=\\\\\\\\\\\\\\\"d-flex align-items-center justify-content-between gap-3 w-100\\\\\\\\\\\\\\\">\\\\\\\\n            <h5 className=\\\\\\\\\\\\\\\"h5 d-inline-flex gap-2 m-0\\\\\\\\\\\\\\\">\\\\\\\\n              <i className=\\\\\\\\\\\\\\\"bi bi-gear-wide-connected\\\\\\\\\\\\\\\" />\\\\\\\\n              <span>GitHub board configuration</span>\\\\\\\\n            </h5>\\\\\\\\n          </div>\\\\\\\\n          {Object.keys(parentState).length > 0 && (\\\\\\\\n            <div>\\\\\\\\n              {formElement}\\\\\\\\n              <Widget\\\\\\\\n                src={`devhub.near/widget/devhub.components.molecule.Button`}\\\\\\\\n                props={{\\\\\\\\n                  classNames: {\\\\\\\\n                    root: \\\\\\\\\\\\\\\"btn-sm btn-outline-secondary\\\\\\\\\\\\\\\",\\\\\\\\n                  },\\\\\\\\n                  label: \\\\\\\\\\\\\\\"New column\\\\\\\\\\\\\\\",\\\\\\\\n                  disabled:\\\\\\\\n                    Object.keys(parentState.columns).length >=\\\\\\\\n                    settings.maxColumnsNumber,\\\\\\\\n                  icon: { type: \\\\\\\\\\\\\\\"bootstrap_icon\\\\\\\\\\\\\\\", variant: \\\\\\\\\\\\\\\"bi-plus-lg\\\\\\\\\\\\\\\" },\\\\\\\\n                  onClick: formUpdate({\\\\\\\\n                    path: [\\\\\\\\\\\\\\\"columns\\\\\\\\\\\\\\\"],\\\\\\\\n                    via: columnsCreateNew,\\\\\\\\n                    isColumnsUpdate: true,\\\\\\\\n                  }),\\\\\\\\n                }}\\\\\\\\n              />\\\\\\\\n            </div>\\\\\\\\n          )}\\\\\\\\n\\\\\\\\n          {!Object.keys(parentState).length && (\\\\\\\\n            <div\\\\\\\\n              className=\\\\\\\\\\\\\\\"d-flex flex-column align-items-center justify-content-center gap-4\\\\\\\\\\\\\\\"\\\\\\\\n              style={{ height: 384 }}\\\\\\\\n            >\\\\\\\\n              <h5 className=\\\\\\\\\\\\\\\"h5 d-inline-flex gap-2 m-0\\\\\\\\\\\\\\\">\\\\\\\\n                This community doesn\\\\\\\\\\\\'t have a GitHub board\\\\\\\\n              </h5>\\\\\\\\n              <Widget\\\\\\\\n                src={`devhub.near/widget/devhub.components.molecule.Button`}\\\\\\\\n                props={{\\\\\\\\n                  icon: { type: \\\\\\\\\\\\\\\"bootstrap_icon\\\\\\\\\\\\\\\", variant: \\\\\\\\\\\\\\\"bi-github\\\\\\\\\\\\\\\" },\\\\\\\\n                  isHidden: !permissions.can_configure,\\\\\\\\n                  label: \\\\\\\\\\\\\\\"Create GitHub board\\\\\\\\\\\\\\\",\\\\\\\\n                  onClick: newViewInit,\\\\\\\\n                }}\\\\\\\\n              />\\\\\\\\n            </div>\\\\\\\\n          )}\\\\\\\\n        </div>\\\\\\\\n      )}\\\\\\\\n    </div>\\\\\\\\n  );\\\\\\\\n};\\\\\\\\n\\\\\\\\nreturn GithubViewConfigurator(props);\\\\\\\\n\"}, \"devhub.entity.addon.github.kanban_board\": {\"\": \"const { DataRequest } = VM.require(\\\\\\\\n  \\\\\\\\\\\\\\\"devhub.near/widget/core.lib.data-request\\\\\\\\\\\\\\\"\\\\\\\\n);\\\\\\\\nDataRequest || (DataRequest = { paginated: () => {} });\\\\\\\\n\\\\\\\\nconst dataToColumns = (data, columns) =>\\\\\\\\n  Object.values(columns).reduce(\\\\\\\\n    (registry, column) => ({\\\\\\\\n      ...registry,\\\\\\\\n      [column.id]:\\\\\\\\n        column.labelSearchTerms.length > 0\\\\\\\\n          ? [\\\\\\\\n              ...(registry[column.id] ?? []),\\\\\\\\n              ...data.filter((ticket) =>\\\\\\\\n                column.labelSearchTerms.every((searchTerm) =>\\\\\\\\n                  searchTerm.length > 0\\\\\\\\n                    ? ticket.labels.some((label) =>\\\\\\\\n                        label.name\\\\\\\\n                          .toLowerCase()\\\\\\\\n                          .includes(searchTerm.toLowerCase())\\\\\\\\n                      )\\\\\\\\n                    : false\\\\\\\\n                )\\\\\\\\n              ),\\\\\\\\n            ]\\\\\\\\n          : [],\\\\\\\\n    }),\\\\\\\\n\\\\\\\\n    {}\\\\\\\\n  );\\\\\\\\n\\\\\\\\nconst withType = (type) => (data) => ({ ...data, type });\\\\\\\\n\\\\\\\\nconst GithubKanbanBoard = ({\\\\\\\\n  columns,\\\\\\\\n  title,\\\\\\\\n  description,\\\\\\\\n  repoURL,\\\\\\\\n  ticketState,\\\\\\\\n  dataTypesIncluded,\\\\\\\\n  metadata,\\\\\\\\n}) => {\\\\\\\\n  const ticketStateFilter =\\\\\\\\n    ticketState === \\\\\\\\\\\\\\\"open\\\\\\\\\\\\\\\" || ticketState === \\\\\\\\\\\\\\\"closed\\\\\\\\\\\\\\\" || ticketState === \\\\\\\\\\\\\\\"all\\\\\\\\\\\\\\\"\\\\\\\\n      ? ticketState\\\\\\\\n      : \\\\\\\\\\\\\\\"all\\\\\\\\\\\\\\\";\\\\\\\\n\\\\\\\\n  State.init({\\\\\\\\n    ticketsByColumn: {},\\\\\\\\n  });\\\\\\\\n\\\\\\\\n  if (repoURL) {\\\\\\\\n    const pullRequests = dataTypesIncluded.PullRequest\\\\\\\\n      ? DataRequest?.paginated(\\\\\\\\n          (pageNumber) =>\\\\\\\\n            useCache(\\\\\\\\n              () =>\\\\\\\\n                asyncFetch(\\\\\\\\n                  `https://api.github.com/repos/${repoURL\\\\\\\\n                    .split(\\\\\\\\\\\\\\\"/\\\\\\\\\\\\\\\")\\\\\\\\n                    .slice(-2)\\\\\\\\n                    .concat([\\\\\\\\\\\\\\\"pulls\\\\\\\\\\\\\\\"])\\\\\\\\n                    .join(\\\\\\\\n                      \\\\\\\\\\\\\\\"/\\\\\\\\\\\\\\\"\\\\\\\\n                    )}?state=${ticketStateFilter}&per_page=100&page=${pageNumber}`\\\\\\\\n                ).then((res) => res?.body),\\\\\\\\n              repoURL + pageNumber,\\\\\\\\n              { subscribe: false }\\\\\\\\n            ),\\\\\\\\n          { startWith: 1 }\\\\\\\\n        )\\\\\\\\n      : [];\\\\\\\\n\\\\\\\\n    const issues = dataTypesIncluded.Issue\\\\\\\\n      ? DataRequest?.paginated(\\\\\\\\n          (pageNumber) =>\\\\\\\\n            useCache(\\\\\\\\n              () =>\\\\\\\\n                asyncFetch(\\\\\\\\n                  `https://api.github.com/repos/${repoURL\\\\\\\\n                    .split(\\\\\\\\\\\\\\\"/\\\\\\\\\\\\\\\")\\\\\\\\n                    .slice(-2)\\\\\\\\n                    .concat([\\\\\\\\\\\\\\\"issues\\\\\\\\\\\\\\\"])\\\\\\\\n                    .join(\\\\\\\\n                      \\\\\\\\\\\\\\\"/\\\\\\\\\\\\\\\"\\\\\\\\n                    )}?state=${ticketStateFilter}&per_page=100&page=${pageNumber}`\\\\\\\\n                ).then((res) => res?.body),\\\\\\\\n              repoURL + pageNumber,\\\\\\\\n              { subscribe: false }\\\\\\\\n            ),\\\\\\\\n          { startWith: 1 }\\\\\\\\n        )?.map(withType(\\\\\\\\\\\\\\\"Issue\\\\\\\\\\\\\\\"))\\\\\\\\n      : [];\\\\\\\\n\\\\\\\\n    State.update((lastKnownState) => ({\\\\\\\\n      ...lastKnownState,\\\\\\\\n      ticketsByColumn: dataToColumns(\\\\\\\\n        [...(issues ?? []), ...(pullRequests ?? [])],\\\\\\\\n        columns\\\\\\\\n      ),\\\\\\\\n    }));\\\\\\\\n  }\\\\\\\\n\\\\\\\\n  return (\\\\\\\\n    <div>\\\\\\\\n      <div className=\\\\\\\\\\\\\\\"d-flex flex-column align-items-center gap-2 py-4\\\\\\\\\\\\\\\">\\\\\\\\n        <h5 className=\\\\\\\\\\\\\\\"h5 d-inline-flex gap-2 m-0\\\\\\\\\\\\\\\">\\\\\\\\n          <span>{title}</span>\\\\\\\\n        </h5>\\\\\\\\n\\\\\\\\n        <p className=\\\\\\\\\\\\\\\"m-0 py-1 text-secondary text-center\\\\\\\\\\\\\\\">{description}</p>\\\\\\\\n      </div>\\\\\\\\n\\\\\\\\n      <div className=\\\\\\\\\\\\\\\"d-flex gap-3 w-100\\\\\\\\\\\\\\\" style={{ overflowX: \\\\\\\\\\\\\\\"auto\\\\\\\\\\\\\\\" }}>\\\\\\\\n        {Object.keys(columns).length === 0 ? (\\\\\\\\n          <div\\\\\\\\n            className={[\\\\\\\\n              \\\\\\\\\\\\\\\"d-flex align-items-center justify-content-center\\\\\\\\\\\\\\\",\\\\\\\\n              \\\\\\\\\\\\\\\"w-100 text-black-50 opacity-50\\\\\\\\\\\\\\\",\\\\\\\\n            ].join(\\\\\\\\\\\\\\\" \\\\\\\\\\\\\\\")}\\\\\\\\n            style={{ height: 384 }}\\\\\\\\n          >\\\\\\\\n            No columns were created so far.\\\\\\\\n          </div>\\\\\\\\n        ) : null}\\\\\\\\n        {Object.values(columns ?? {})?.map((column) => {\\\\\\\\n          const tickets = state.ticketsByColumn[column.id] ?? [];\\\\\\\\n\\\\\\\\n          return (\\\\\\\\n            <div className=\\\\\\\\\\\\\\\"col-4\\\\\\\\\\\\\\\" key={`column-${column.id}-view`}>\\\\\\\\n              <div className=\\\\\\\\\\\\\\\"card rounded-4\\\\\\\\\\\\\\\">\\\\\\\\n                <div\\\\\\\\n                  className={[\\\\\\\\n                    \\\\\\\\\\\\\\\"card-body d-flex flex-column gap-3 p-2\\\\\\\\\\\\\\\",\\\\\\\\n                    \\\\\\\\\\\\\\\"border border-2 border-secondary rounded-4\\\\\\\\\\\\\\\",\\\\\\\\n                  ].join(\\\\\\\\\\\\\\\" \\\\\\\\\\\\\\\")}\\\\\\\\n                >\\\\\\\\n                  <span className=\\\\\\\\\\\\\\\"d-flex flex-column py-1\\\\\\\\\\\\\\\">\\\\\\\\n                    <h6 className=\\\\\\\\\\\\\\\"card-title h6 d-flex align-items-center gap-2 m-0\\\\\\\\\\\\\\\">\\\\\\\\n                      {column.title}\\\\\\\\n\\\\\\\\n                      <span className=\\\\\\\\\\\\\\\"badge rounded-pill bg-secondary\\\\\\\\\\\\\\\">\\\\\\\\n                        {tickets.length}\\\\\\\\n                      </span>\\\\\\\\n                    </h6>\\\\\\\\n\\\\\\\\n                    <p class=\\\\\\\\\\\\\\\"text-secondary m-0\\\\\\\\\\\\\\\">{column.description}</p>\\\\\\\\n                  </span>\\\\\\\\n\\\\\\\\n                  <div class=\\\\\\\\\\\\\\\"d-flex flex-column gap-2\\\\\\\\\\\\\\\">\\\\\\\\n                    {tickets.map((ticket) => (\\\\\\\\n                      <Widget\\\\\\\\n                        src={`devhub.near/widget/devhub.entity.addon.${metadata.ticket.type}`}\\\\\\\\n                        props={{ metadata: metadata.ticket, payload: ticket }}\\\\\\\\n                        key={ticket.id}\\\\\\\\n                      />\\\\\\\\n                    ))}\\\\\\\\n                  </div>\\\\\\\\n                </div>\\\\\\\\n              </div>\\\\\\\\n            </div>\\\\\\\\n          );\\\\\\\\n        })}\\\\\\\\n      </div>\\\\\\\\n    </div>\\\\\\\\n  );\\\\\\\\n};\\\\\\\\n\\\\\\\\nreturn GithubKanbanBoard(props);\\\\\\\\n\"}, \"devhub.entity.addon.kanban.Configurator\": {\"\": \"const Struct = VM.require(\\\\\\\\\\\\\\\"devhub.near/widget/core.lib.struct\\\\\\\\\\\\\\\");\\\\\\\\n\\\\\\\\nif (!Struct) {\\\\\\\\n  return <p>Loading modules...</p>;\\\\\\\\n}\\\\\\\\nconst { useQuery } = VM.require(\\\\\\\\n  \\\\\\\\\\\\\\\"devhub.near/widget/core.adapter.devhub-contract\\\\\\\\\\\\\\\"\\\\\\\\n);\\\\\\\\nconst { uuid, withUUIDIndex } = VM.require(\\\\\\\\n  \\\\\\\\\\\\\\\"devhub.near/widget/core.lib.uuid\\\\\\\\\\\\\\\"\\\\\\\\n);\\\\\\\\n\\\\\\\\nuuid || (uuid = () => {});\\\\\\\\nwithUUIDIndex || (withUUIDIndex = () => {});\\\\\\\\nuseQuery || (useQuery = () => {});\\\\\\\\n\\\\\\\\nconst AttractableDiv = styled.div`\\\\\\\\n  box-shadow: 0 0.125rem 0.25rem rgba(0, 0, 0, 0.075) !important;\\\\\\\\n  transition: box-shadow 0.6s;\\\\\\\\n\\\\\\\\n  &:hover {\\\\\\\\n    box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.15) !important;\\\\\\\\n  }\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst settings = {\\\\\\\\n  maxColumnsNumber: 10,\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst KanbanPostBoardBasicInfoSchema = {\\\\\\\\n  title: { label: \\\\\\\\\\\\\\\"Title\\\\\\\\\\\\\\\", order: 1, placeholder: \\\\\\\\\\\\\\\"Enter board title.\\\\\\\\\\\\\\\" },\\\\\\\\n\\\\\\\\n  description: {\\\\\\\\n    label: \\\\\\\\\\\\\\\"Description\\\\\\\\\\\\\\\",\\\\\\\\n    order: 2,\\\\\\\\n    placeholder: \\\\\\\\\\\\\\\"Enter board description.\\\\\\\\\\\\\\\",\\\\\\\\n  },\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst KanbanPostBoardTagsSchema = {\\\\\\\\n  required: {\\\\\\\\n    label:\\\\\\\\n      \\\\\\\\\\\\\\\"Enter tags you want to include. Posts with these tags will display.\\\\\\\\\\\\\\\",\\\\\\\\n\\\\\\\\n    order: 1,\\\\\\\\n    placeholder: \\\\\\\\\\\\\\\"tag1, tag2\\\\\\\\\\\\\\\",\\\\\\\\n  },\\\\\\\\n\\\\\\\\n  excluded: {\\\\\\\\n    label:\\\\\\\\n      \\\\\\\\\\\\\\\"Enter tags you want to exclude. Posts with these tags will not show.\\\\\\\\\\\\\\\",\\\\\\\\n\\\\\\\\n    order: 2,\\\\\\\\n    placeholder: \\\\\\\\\\\\\\\"tag3, tag4\\\\\\\\\\\\\\\",\\\\\\\\n  },\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst KanbanPostBoardTicketFeaturesSchema = {\\\\\\\\n  author: { label: \\\\\\\\\\\\\\\"Author\\\\\\\\\\\\\\\" },\\\\\\\\n  like_count: { label: \\\\\\\\\\\\\\\"Likes\\\\\\\\\\\\\\\" },\\\\\\\\n  reply_count: { label: \\\\\\\\\\\\\\\"Replies\\\\\\\\\\\\\\\", noop: true },\\\\\\\\n  sponsorship_request_indicator: { label: \\\\\\\\\\\\\\\"Sponsorship request indicator\\\\\\\\\\\\\\\" },\\\\\\\\n  requested_sponsorship_value: { label: \\\\\\\\\\\\\\\"Amount of requested funds\\\\\\\\\\\\\\\" },\\\\\\\\n  requested_sponsor: { label: \\\\\\\\\\\\\\\"Requested sponsor\\\\\\\\\\\\\\\" },\\\\\\\\n  approved_sponsorship_value: { label: \\\\\\\\\\\\\\\"Approved amount\\\\\\\\\\\\\\\" },\\\\\\\\n  sponsorship_supervisor: { label: \\\\\\\\\\\\\\\"Supervisor\\\\\\\\\\\\\\\" },\\\\\\\\n  tags: { label: \\\\\\\\\\\\\\\"Tags\\\\\\\\\\\\\\\" },\\\\\\\\n  type: { label: \\\\\\\\\\\\\\\"Post type\\\\\\\\\\\\\\\" },\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst KanbanPostBoardDefaults = {\\\\\\\\n  metadata: {\\\\\\\\n    id: uuid(),\\\\\\\\n    type: \\\\\\\\\\\\\\\"kanban.post_board\\\\\\\\\\\\\\\",\\\\\\\\n    title: \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\",\\\\\\\\n    description: \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\",\\\\\\\\n    ticket: {\\\\\\\\n      type: \\\\\\\\\\\\\\\"kanban.post_ticket\\\\\\\\\\\\\\\",\\\\\\\\n      features: {\\\\\\\\n        author: true,\\\\\\\\n        like_count: true,\\\\\\\\n        reply_count: false,\\\\\\\\n        sponsorship_request_indicator: false,\\\\\\\\n        requested_sponsorship_value: false,\\\\\\\\n        requested_sponsor: false,\\\\\\\\n        approved_sponsorship_value: true,\\\\\\\\n        sponsorship_supervisor: true,\\\\\\\\n        tags: true,\\\\\\\\n        type: true,\\\\\\\\n      },\\\\\\\\n    },\\\\\\\\n  },\\\\\\\\n  payload: {\\\\\\\\n    columns: {},\\\\\\\\n    tags: { excluded: [], required: [] },\\\\\\\\n  },\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst toMigrated = ({ config, metadata, payload }) => ({\\\\\\\\n  metadata: {\\\\\\\\n    ...KanbanPostBoardDefaults.metadata,\\\\\\\\n    ...metadata,\\\\\\\\n    ticket: {\\\\\\\\n      ...KanbanPostBoardDefaults.metadata.ticket,\\\\\\\\n      ...metadata.ticket,\\\\\\\\n      features: {\\\\\\\\n        ...KanbanPostBoardDefaults.metadata.ticket.features,\\\\\\\\n        ...metadata.ticket.features,\\\\\\\\n      },\\\\\\\\n    },\\\\\\\\n  },\\\\\\\\n  payload: {\\\\\\\\n    ...KanbanPostBoardDefaults.payload,\\\\\\\\n    ...payload,\\\\\\\\n    ...config,\\\\\\\\n  },\\\\\\\\n});\\\\\\\\n\\\\\\\\nconst KanbanViewConfigurator = ({ handle, data, permissions, onSubmit }) => {\\\\\\\\n  const tags = useCache(\\\\\\\\n    () =>\\\\\\\\n      Near.asyncView(\\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"get_all_labels\\\\\\\\\\\\\\\").then(\\\\\\\\n        (res) => res\\\\\\\\n      ),\\\\\\\\n    handle,\\\\\\\\n    { subscribe: false }\\\\\\\\n  );\\\\\\\\n\\\\\\\\n  if (!data) {\\\\\\\\n    return (\\\\\\\\n      <div class=\\\\\\\\\\\\\\\"alert alert-danger\\\\\\\\\\\\\\\" role=\\\\\\\\\\\\\\\"alert\\\\\\\\\\\\\\\">\\\\\\\\n        Loading...\\\\\\\\n      </div>\\\\\\\\n    );\\\\\\\\n  }\\\\\\\\n  const initialFormState = Struct.pick(\\\\\\\\n    data.metadata === undefined ? {} : toMigrated(data),\\\\\\\\n    [\\\\\\\\\\\\\\\"metadata\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"payload\\\\\\\\\\\\\\\"]\\\\\\\\n  );\\\\\\\\n\\\\\\\\n  const [formState, setForm] = useState(initialFormState);\\\\\\\\n  const [showPreview, setPreview] = useState(false);\\\\\\\\n\\\\\\\\n  const formUpdate =\\\\\\\\n    ({ path, via: customFieldUpdate, ...params }) =>\\\\\\\\n    (fieldInput) => {\\\\\\\\n      const transformFn = (node) => {\\\\\\\\n        if (typeof customFieldUpdate === \\\\\\\\\\\\\\\"function\\\\\\\\\\\\\\\") {\\\\\\\\n          return customFieldUpdate({\\\\\\\\n            input: fieldInput?.target?.value ?? fieldInput,\\\\\\\\n            lastKnownValue: node,\\\\\\\\n            params,\\\\\\\\n          });\\\\\\\\n        } else {\\\\\\\\n          return Struct.defaultFieldUpdate({\\\\\\\\n            input: fieldInput?.target?.value ?? fieldInput,\\\\\\\\n            lastKnownValue: node,\\\\\\\\n            params,\\\\\\\\n          });\\\\\\\\n        }\\\\\\\\n      };\\\\\\\\n      const updatedValues = Struct.deepFieldUpdate(\\\\\\\\n        formState ?? {},\\\\\\\\n        path,\\\\\\\\n        (node) => transformFn(node)\\\\\\\\n      );\\\\\\\\n      setForm((prevFormState) => ({\\\\\\\\n        ...prevFormState,\\\\\\\\n        ...updatedValues,\\\\\\\\n      }));\\\\\\\\n    };\\\\\\\\n\\\\\\\\n  const formReset = () => {\\\\\\\\n    setForm(initialFormState);\\\\\\\\n  };\\\\\\\\n\\\\\\\\n  const newViewInit = () => {\\\\\\\\n    setForm(KanbanPostBoardDefaults);\\\\\\\\n  };\\\\\\\\n\\\\\\\\n  const columnsCreateNew = ({ lastKnownValue }) =>\\\\\\\\n    Object.keys(lastKnownValue).length < settings.maxColumnsNumber\\\\\\\\n      ? {\\\\\\\\n          ...(lastKnownValue ?? {}),\\\\\\\\n          ...withUUIDIndex({ tag: \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\", title: \\\\\\\\\\\\\\\"New column\\\\\\\\\\\\\\\", description: \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\" }),\\\\\\\\n        }\\\\\\\\n      : lastKnownValue;\\\\\\\\n\\\\\\\\n  const columnsDeleteById =\\\\\\\\n    (id) =>\\\\\\\\n    ({ lastKnownValue }) =>\\\\\\\\n      Object.fromEntries(\\\\\\\\n        Object.entries(lastKnownValue).filter(([columnId]) => columnId !== id)\\\\\\\\n      );\\\\\\\\n\\\\\\\\n  const onCancel = () => {\\\\\\\\n    formReset();\\\\\\\\n  };\\\\\\\\n\\\\\\\\n  const onSave = () => onSubmit(formState);\\\\\\\\n\\\\\\\\n  const formElement = (\\\\\\\\n    <>\\\\\\\\n      <div className=\\\\\\\\\\\\\\\"d-flex flex-column flex-lg-row align-items-stretch gap-4 w-100\\\\\\\\\\\\\\\">\\\\\\\\n        <div className=\\\\\\\\\\\\\\\"d-flex flex-column gap-4 w-100\\\\\\\\\\\\\\\">\\\\\\\\n          <Widget\\\\\\\\n            src={`devhub.near/widget/devhub.components.organism.Configurator`}\\\\\\\\n            props={{\\\\\\\\n              heading: \\\\\\\\\\\\\\\"Basic information\\\\\\\\\\\\\\\",\\\\\\\\n              externalState: formState.metadata,\\\\\\\\n              isActive: true,\\\\\\\\n              isEmbedded: true,\\\\\\\\n              isUnlocked: permissions.can_configure,\\\\\\\\n              onChange: formUpdate({ path: [\\\\\\\\\\\\\\\"metadata\\\\\\\\\\\\\\\"] }),\\\\\\\\n              schema: KanbanPostBoardBasicInfoSchema,\\\\\\\\n              hideSubmitBtn: true,\\\\\\\\n            }}\\\\\\\\n          />\\\\\\\\n        </div>\\\\\\\\n        <Widget\\\\\\\\n          src={`devhub.near/widget/devhub.components.organism.Configurator`}\\\\\\\\n          props={{\\\\\\\\n            heading: \\\\\\\\\\\\\\\"Card fields\\\\\\\\\\\\\\\",\\\\\\\\n            classNames: { root: \\\\\\\\\\\\\\\"w-auto h-auto\\\\\\\\\\\\\\\" },\\\\\\\\n            externalState: formState.metadata.ticket.features,\\\\\\\\n            isActive: true,\\\\\\\\n            isEmbedded: true,\\\\\\\\n            isUnlocked: permissions.can_configure,\\\\\\\\n            onChange: formUpdate({ path: [\\\\\\\\\\\\\\\"metadata\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"ticket\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"features\\\\\\\\\\\\\\\"] }),\\\\\\\\n            schema: KanbanPostBoardTicketFeaturesSchema,\\\\\\\\n            style: { minWidth: \\\\\\\\\\\\\\\"36%\\\\\\\\\\\\\\\" },\\\\\\\\n            hideSubmitBtn: true,\\\\\\\\n          }}\\\\\\\\n        />\\\\\\\\n      </div>\\\\\\\\n\\\\\\\\n      <div className=\\\\\\\\\\\\\\\"d-flex align-items-center justify-content-between w-100 mb-2\\\\\\\\\\\\\\\">\\\\\\\\n        <span className=\\\\\\\\\\\\\\\"d-inline-flex gap-2 m-0\\\\\\\\\\\\\\\">\\\\\\\\n          <i className=\\\\\\\\\\\\\\\"bi bi-list-task\\\\\\\\\\\\\\\" />\\\\\\\\n          <span>{`Columns ( max. ${settings.maxColumnsNumber} )`}</span>\\\\\\\\n        </span>\\\\\\\\n      </div>\\\\\\\\n\\\\\\\\n      <div className=\\\\\\\\\\\\\\\"d-flex flex-column align-items-center gap-3 w-100\\\\\\\\\\\\\\\">\\\\\\\\n        {Object.values(formState.payload.columns ?? {}).map(\\\\\\\\n          ({ id, description, tag, title }) => (\\\\\\\\n            <AttractableDiv\\\\\\\\n              className=\\\\\\\\\\\\\\\"d-flex gap-3 rounded-4 border p-3 w-100\\\\\\\\\\\\\\\"\\\\\\\\n              key={`column-${id}-configurator`}\\\\\\\\n            >\\\\\\\\n              <div className=\\\\\\\\\\\\\\\"d-flex flex-column gap-1 w-100\\\\\\\\\\\\\\\">\\\\\\\\n                <Widget\\\\\\\\n                  src={`devhub.near/widget/devhub.components.molecule.Input`}\\\\\\\\n                  props={{\\\\\\\\n                    className: \\\\\\\\\\\\\\\"flex-grow-1\\\\\\\\\\\\\\\",\\\\\\\\n                    key: `column-${id}-title`,\\\\\\\\n                    label: \\\\\\\\\\\\\\\"Column title\\\\\\\\\\\\\\\",\\\\\\\\n                    onChange: formUpdate({\\\\\\\\n                      path: [\\\\\\\\\\\\\\\"payload\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"columns\\\\\\\\\\\\\\\", id, \\\\\\\\\\\\\\\"title\\\\\\\\\\\\\\\"],\\\\\\\\n                    }),\\\\\\\\n                    placeholder: \\\\\\\\\\\\\\\"Enter column title.\\\\\\\\\\\\\\\",\\\\\\\\n                    value: title,\\\\\\\\n                  }}\\\\\\\\n                />\\\\\\\\n                <Widget\\\\\\\\n                  src={`devhub.near/widget/devhub.components.molecule.Input`}\\\\\\\\n                  props={{\\\\\\\\n                    className: \\\\\\\\\\\\\\\"flex-grow-1\\\\\\\\\\\\\\\",\\\\\\\\n                    key: `column-${id}-description`,\\\\\\\\n                    label: \\\\\\\\\\\\\\\"Description\\\\\\\\\\\\\\\",\\\\\\\\n                    onChange: formUpdate({\\\\\\\\n                      path: [\\\\\\\\\\\\\\\"payload\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"columns\\\\\\\\\\\\\\\", id, \\\\\\\\\\\\\\\"description\\\\\\\\\\\\\\\"],\\\\\\\\n                    }),\\\\\\\\n                    placeholder: \\\\\\\\\\\\\\\"Enter a brief description of the column.\\\\\\\\\\\\\\\",\\\\\\\\n                    value: description,\\\\\\\\n                  }}\\\\\\\\n                />\\\\\\\\n                <Widget\\\\\\\\n                  src={`devhub.near/widget/devhub.components.molecule.Input`}\\\\\\\\n                  props={{\\\\\\\\n                    key: `kanban-view-column-${id}-tag`,\\\\\\\\n                    label: \\\\\\\\\\\\\\\"Enter a single tag to show posts in this column\\\\\\\\\\\\\\\",\\\\\\\\n                    onChange: formUpdate({\\\\\\\\n                      path: [\\\\\\\\\\\\\\\"payload\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"columns\\\\\\\\\\\\\\\", id, \\\\\\\\\\\\\\\"tag\\\\\\\\\\\\\\\"],\\\\\\\\n                    }),\\\\\\\\n                    placeholder: \\\\\\\\\\\\\\\"Tag-Name\\\\\\\\\\\\\\\",\\\\\\\\n                    value: tag,\\\\\\\\n                  }}\\\\\\\\n                />\\\\\\\\n              </div>\\\\\\\\n\\\\\\\\n              <div\\\\\\\\n                className=\\\\\\\\\\\\\\\"d-flex flex-column gap-3 border-start p-3 pe-0\\\\\\\\\\\\\\\"\\\\\\\\n                style={{ marginTop: -16, marginBottom: -16 }}\\\\\\\\n              >\\\\\\\\n                <button\\\\\\\\n                  className=\\\\\\\\\\\\\\\"btn btn-outline-danger\\\\\\\\\\\\\\\"\\\\\\\\n                  onClick={formUpdate({\\\\\\\\n                    path: [\\\\\\\\\\\\\\\"payload\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"columns\\\\\\\\\\\\\\\"],\\\\\\\\n                    via: columnsDeleteById(id),\\\\\\\\n                  })}\\\\\\\\n                  title=\\\\\\\\\\\\\\\"Delete column\\\\\\\\\\\\\\\"\\\\\\\\n                >\\\\\\\\n                  <i className=\\\\\\\\\\\\\\\"bi bi-trash-fill\\\\\\\\\\\\\\\" />\\\\\\\\n                </button>\\\\\\\\n              </div>\\\\\\\\n            </AttractableDiv>\\\\\\\\n          )\\\\\\\\n        )}\\\\\\\\n\\\\\\\\n        <div className=\\\\\\\\\\\\\\\"d-flex gap-3 justify-content-end w-100\\\\\\\\\\\\\\\">\\\\\\\\n          <Widget\\\\\\\\n            src={`devhub.near/widget/devhub.components.molecule.Button`}\\\\\\\\n            props={{\\\\\\\\n              classNames: {\\\\\\\\n                root: \\\\\\\\\\\\\\\"d-flex btn btn-outline-danger shadow-none border-0\\\\\\\\\\\\\\\",\\\\\\\\n              },\\\\\\\\n              isHidden: typeof onCancel !== \\\\\\\\\\\\\\\"function\\\\\\\\\\\\\\\",\\\\\\\\n              label: \\\\\\\\\\\\\\\"Cancel\\\\\\\\\\\\\\\",\\\\\\\\n              onClick: onCancel,\\\\\\\\n            }}\\\\\\\\n          />\\\\\\\\n          <Widget\\\\\\\\n            src={`devhub.near/widget/devhub.components.molecule.Button`}\\\\\\\\n            props={{\\\\\\\\n              classNames: { root: \\\\\\\\\\\\\\\"btn btn-success\\\\\\\\\\\\\\\" },\\\\\\\\n              disabled: form.isSynced,\\\\\\\\n              icon: {\\\\\\\\n                type: \\\\\\\\\\\\\\\"svg_icon\\\\\\\\\\\\\\\",\\\\\\\\n                variant: \\\\\\\\\\\\\\\"floppy_drive\\\\\\\\\\\\\\\",\\\\\\\\n                width: 14,\\\\\\\\n                height: 14,\\\\\\\\n              },\\\\\\\\n              isHidden: typeof onSave !== \\\\\\\\\\\\\\\"function\\\\\\\\\\\\\\\",\\\\\\\\n              label: \\\\\\\\\\\\\\\"Save\\\\\\\\\\\\\\\",\\\\\\\\n              onClick: onSave,\\\\\\\\n            }}\\\\\\\\n          />\\\\\\\\n        </div>\\\\\\\\n      </div>\\\\\\\\n    </>\\\\\\\\n  );\\\\\\\\n\\\\\\\\n  return (\\\\\\\\n    <div\\\\\\\\n      className=\\\\\\\\\\\\\\\"d-flex flex-column gap-4 w-100\\\\\\\\\\\\\\\"\\\\\\\\n      style={{ maxWidth: \\\\\\\\\\\\\\\"100%\\\\\\\\\\\\\\\" }}\\\\\\\\n    >\\\\\\\\n      <ul className=\\\\\\\\\\\\\\\"nav nav-tabs\\\\\\\\\\\\\\\" id=\\\\\\\\\\\\\\\"editPreviewTabs\\\\\\\\\\\\\\\" role=\\\\\\\\\\\\\\\"tablist\\\\\\\\\\\\\\\">\\\\\\\\n        <li className=\\\\\\\\\\\\\\\"nav-item\\\\\\\\\\\\\\\" role=\\\\\\\\\\\\\\\"presentation\\\\\\\\\\\\\\\">\\\\\\\\n          <button\\\\\\\\n            className={`nav-link ${!showPreview ? \\\\\\\\\\\\\\\"active\\\\\\\\\\\\\\\" : \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\"}`}\\\\\\\\n            id=\\\\\\\\\\\\\\\"edit-tab\\\\\\\\\\\\\\\"\\\\\\\\n            data-bs-toggle=\\\\\\\\\\\\\\\"tab\\\\\\\\\\\\\\\"\\\\\\\\n            data-bs-target=\\\\\\\\\\\\\\\"#edit\\\\\\\\\\\\\\\"\\\\\\\\n            type=\\\\\\\\\\\\\\\"button\\\\\\\\\\\\\\\"\\\\\\\\n            role=\\\\\\\\\\\\\\\"tab\\\\\\\\\\\\\\\"\\\\\\\\n            aria-controls=\\\\\\\\\\\\\\\"edit\\\\\\\\\\\\\\\"\\\\\\\\n            aria-selected=\\\\\\\\\\\\\\\"true\\\\\\\\\\\\\\\"\\\\\\\\n            onClick={() => setPreview(false)}\\\\\\\\n          >\\\\\\\\n            Edit\\\\\\\\n          </button>\\\\\\\\n        </li>\\\\\\\\n        <li className=\\\\\\\\\\\\\\\"nav-item\\\\\\\\\\\\\\\" role=\\\\\\\\\\\\\\\"presentation\\\\\\\\\\\\\\\">\\\\\\\\n          <button\\\\\\\\n            className={`nav-link ${showPreview ? \\\\\\\\\\\\\\\"active\\\\\\\\\\\\\\\" : \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\"}`}\\\\\\\\n            id=\\\\\\\\\\\\\\\"preview-tab\\\\\\\\\\\\\\\"\\\\\\\\n            data-bs-toggle=\\\\\\\\\\\\\\\"tab\\\\\\\\\\\\\\\"\\\\\\\\n            data-bs-target=\\\\\\\\\\\\\\\"#preview\\\\\\\\\\\\\\\"\\\\\\\\n            type=\\\\\\\\\\\\\\\"button\\\\\\\\\\\\\\\"\\\\\\\\n            role=\\\\\\\\\\\\\\\"tab\\\\\\\\\\\\\\\"\\\\\\\\n            aria-controls=\\\\\\\\\\\\\\\"preview\\\\\\\\\\\\\\\"\\\\\\\\n            aria-selected=\\\\\\\\\\\\\\\"false\\\\\\\\\\\\\\\"\\\\\\\\n            onClick={() => setPreview(true)}\\\\\\\\n          >\\\\\\\\n            Preview\\\\\\\\n          </button>\\\\\\\\n        </li>\\\\\\\\n      </ul>\\\\\\\\n      {showPreview ? (\\\\\\\\n        <div>\\\\\\\\n          <Widget\\\\\\\\n            src={`devhub.near/widget/devhub.entity.addon.kanban.Viewer`}\\\\\\\\n            props={{\\\\\\\\n              data: formState,\\\\\\\\n            }}\\\\\\\\n          />\\\\\\\\n        </div>\\\\\\\\n      ) : (\\\\\\\\n        <div className={[\\\\\\\\\\\\\\\"d-flex flex-column gap-4 w-100\\\\\\\\\\\\\\\"].join(\\\\\\\\\\\\\\\" \\\\\\\\\\\\\\\")}>\\\\\\\\n          <div className=\\\\\\\\\\\\\\\"d-flex align-items-center justify-content-between gap-3 w-100\\\\\\\\\\\\\\\">\\\\\\\\n            <h5 className=\\\\\\\\\\\\\\\"h5 d-inline-flex gap-2 m-0\\\\\\\\\\\\\\\">\\\\\\\\n              <i className=\\\\\\\\\\\\\\\"bi bi-gear-wide-connected\\\\\\\\\\\\\\\" />\\\\\\\\n              <span>Kanban board configuration</span>\\\\\\\\n            </h5>\\\\\\\\n          </div>\\\\\\\\n          {Object.keys(formState.metadata ?? {}).length > 0 && (\\\\\\\\n            <div>\\\\\\\\n              {formElement}\\\\\\\\n              <Widget\\\\\\\\n                src={`devhub.near/widget/devhub.components.molecule.Button`}\\\\\\\\n                props={{\\\\\\\\n                  classNames: {\\\\\\\\n                    root: \\\\\\\\\\\\\\\"btn-sm btn-outline-secondary\\\\\\\\\\\\\\\",\\\\\\\\n                  },\\\\\\\\n                  label: \\\\\\\\\\\\\\\"New column\\\\\\\\\\\\\\\",\\\\\\\\n                  disabled:\\\\\\\\n                    Object.keys(formState.payload.columns).length >=\\\\\\\\n                    settings.maxColumnsNumber,\\\\\\\\n                  icon: { type: \\\\\\\\\\\\\\\"bootstrap_icon\\\\\\\\\\\\\\\", variant: \\\\\\\\\\\\\\\"bi-plus-lg\\\\\\\\\\\\\\\" },\\\\\\\\n                  onClick: formUpdate({\\\\\\\\n                    path: [\\\\\\\\\\\\\\\"payload\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"columns\\\\\\\\\\\\\\\"],\\\\\\\\n                    via: columnsCreateNew,\\\\\\\\n                  }),\\\\\\\\n                }}\\\\\\\\n              />\\\\\\\\n            </div>\\\\\\\\n          )}\\\\\\\\n        </div>\\\\\\\\n      )}\\\\\\\\n      {!Object.keys(formState.metadata ?? {}).length && (\\\\\\\\n        <div\\\\\\\\n          className=\\\\\\\\\\\\\\\"d-flex flex-column align-items-center justify-content-center gap-4\\\\\\\\\\\\\\\"\\\\\\\\n          style={{ height: 384 }}\\\\\\\\n        >\\\\\\\\n          <h5 className=\\\\\\\\\\\\\\\"h5 d-inline-flex gap-2 m-0\\\\\\\\\\\\\\\">\\\\\\\\n            This community doesn\\\\\\\\\\\\'t have a kanban board\\\\\\\\n          </h5>\\\\\\\\n          <Widget\\\\\\\\n            src={`devhub.near/widget/devhub.components.molecule.Button`}\\\\\\\\n            props={{\\\\\\\\n              icon: { type: \\\\\\\\\\\\\\\"bootstrap_icon\\\\\\\\\\\\\\\", variant: \\\\\\\\\\\\\\\"bi-kanban-fill\\\\\\\\\\\\\\\" },\\\\\\\\n              isHidden: !permissions.can_configure,\\\\\\\\n              label: \\\\\\\\\\\\\\\"Create kanban board\\\\\\\\\\\\\\\",\\\\\\\\n              onClick: newViewInit,\\\\\\\\n            }}\\\\\\\\n          />\\\\\\\\n        </div>\\\\\\\\n      )}\\\\\\\\n    </div>\\\\\\\\n  );\\\\\\\\n};\\\\\\\\n\\\\\\\\nreturn KanbanViewConfigurator(props);\\\\\\\\n\"}, \"devhub.entity.addon.github.kanban_ticket\": {\"\": \"const AttractableDiv = styled.div`\\\\\\\\n  box-shadow: 0 0.125rem 0.25rem rgba(0, 0, 0, 0.075) !important;\\\\\\\\n  transition: box-shadow 0.6s;\\\\\\\\n\\\\\\\\n  &:hover {\\\\\\\\n    box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.15) !important;\\\\\\\\n  }\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst ticketStates = {\\\\\\\\n  closed: { displayName: \\\\\\\\\\\\\\\"Closed\\\\\\\\\\\\\\\", icon: \\\\\\\\\\\\\\\"bi-lock-fill\\\\\\\\\\\\\\\" },\\\\\\\\n  open: { displayName: \\\\\\\\\\\\\\\"Open\\\\\\\\\\\\\\\", icon: \\\\\\\\\\\\\\\"bi-unlock-fill\\\\\\\\\\\\\\\" },\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst ticketTypes = {\\\\\\\\n  Issue: { displayName: \\\\\\\\\\\\\\\"Issue\\\\\\\\\\\\\\\", icon: \\\\\\\\\\\\\\\"bi-lightbulb-fill\\\\\\\\\\\\\\\" },\\\\\\\\n  PullRequest: { displayName: \\\\\\\\\\\\\\\"Pull request\\\\\\\\\\\\\\\", icon: \\\\\\\\\\\\\\\"bi-git\\\\\\\\\\\\\\\" },\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst GithubKanbanTicket = ({\\\\\\\\n  metadata: { features },\\\\\\\\n  payload: {\\\\\\\\n    _links,\\\\\\\\n    labels,\\\\\\\\n    number,\\\\\\\\n    state: ticketState,\\\\\\\\n    title,\\\\\\\\n    type,\\\\\\\\n    user,\\\\\\\\n    url,\\\\\\\\n  },\\\\\\\\n}) => {\\\\\\\\n  const header = (\\\\\\\\n    <div className=\\\\\\\\\\\\\\\"card-header\\\\\\\\\\\\\\\">\\\\\\\\n      <div class=\\\\\\\\\\\\\\\"d-flex justify-content-start gap-3\\\\\\\\\\\\\\\">\\\\\\\\n        <i\\\\\\\\n          className={`bi ${ticketStates[ticketState].icon}`}\\\\\\\\n          title={ticketStates[ticketState].displayName}\\\\\\\\n        />\\\\\\\\n\\\\\\\\n        {features.author ? (\\\\\\\\n          <a\\\\\\\\n            className=\\\\\\\\\\\\\\\"d-flex gap-2 link-dark text-truncate\\\\\\\\\\\\\\\"\\\\\\\\n            href={user.html_url}\\\\\\\\n            rel=\\\\\\\\\\\\\\\"noreferrer\\\\\\\\\\\\\\\"\\\\\\\\n            target=\\\\\\\\\\\\\\\"_blank\\\\\\\\\\\\\\\"\\\\\\\\n          >\\\\\\\\n            <img\\\\\\\\n              alt={`${user.login}\\\\\\\\\\\\'s GitHub avatar`}\\\\\\\\n              className=\\\\\\\\\\\\\\\"img-fluid rounded\\\\\\\\\\\\\\\"\\\\\\\\n              src={user.avatar_url}\\\\\\\\n              style={{ width: 24, height: 24 }}\\\\\\\\n            />\\\\\\\\n\\\\\\\\n            <span className=\\\\\\\\\\\\\\\"text-muted\\\\\\\\\\\\\\\">@{user.login}</span>\\\\\\\\n          </a>\\\\\\\\n        ) : null}\\\\\\\\n\\\\\\\\n        <a\\\\\\\\n          className=\\\\\\\\\\\\\\\"card-link ms-auto\\\\\\\\\\\\\\\"\\\\\\\\n          href={_links?.html?.href ?? url}\\\\\\\\n          rel=\\\\\\\\\\\\\\\"noreferrer\\\\\\\\\\\\\\\"\\\\\\\\n          role=\\\\\\\\\\\\\\\"button\\\\\\\\\\\\\\\"\\\\\\\\n          target=\\\\\\\\\\\\\\\"_blank\\\\\\\\\\\\\\\"\\\\\\\\n          title=\\\\\\\\\\\\\\\"Open in new tab\\\\\\\\\\\\\\\"\\\\\\\\n        >\\\\\\\\n          <i className=\\\\\\\\\\\\\\\"bi bi-share\\\\\\\\\\\\\\\" />\\\\\\\\n        </a>\\\\\\\\n      </div>\\\\\\\\n    </div>\\\\\\\\n  );\\\\\\\\n\\\\\\\\n  const titleArea = (\\\\\\\\n    <span className=\\\\\\\\\\\\\\\"card-text gap-2\\\\\\\\\\\\\\\">\\\\\\\\n      {features.type ? <i className={`bi ${ticketTypes[type].icon}`} /> : null}\\\\\\\\n\\\\\\\\n      <span>\\\\\\\\n        {[\\\\\\\\n          `${features.type ? ticketTypes[type].displayName : \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\"} ${\\\\\\\\n            features.id ? `#${number.toString()}` : \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\"\\\\\\\\n          }`.trim(),\\\\\\\\n\\\\\\\\n          title,\\\\\\\\n        ]\\\\\\\\n          .filter(\\\\\\\\n            (maybeString) =>\\\\\\\\n              typeof maybeString === \\\\\\\\\\\\\\\"string\\\\\\\\\\\\\\\" && maybeString.length > 0\\\\\\\\n          )\\\\\\\\n          .join(\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\")}\\\\\\\\n      </span>\\\\\\\\n    </span>\\\\\\\\n  );\\\\\\\\n\\\\\\\\n  const labelList = features.labels ? (\\\\\\\\n    <div className=\\\\\\\\\\\\\\\"d-flex flex-wrap gap-2 m-0\\\\\\\\\\\\\\\">\\\\\\\\n      {labels.map((label) => (\\\\\\\\n        <a href={label.url} key={label.id} title={label.description}>\\\\\\\\n          <span\\\\\\\\n            className=\\\\\\\\\\\\\\\"badge text-wrap\\\\\\\\\\\\\\\"\\\\\\\\n            style={{ backgroundColor: `#${label.color}` }}\\\\\\\\n          >\\\\\\\\n            {label.name}\\\\\\\\n          </span>\\\\\\\\n        </a>\\\\\\\\n      ))}\\\\\\\\n    </div>\\\\\\\\n  ) : null;\\\\\\\\n\\\\\\\\n  return (\\\\\\\\n    <AttractableDiv className=\\\\\\\\\\\\\\\"card border-secondary\\\\\\\\\\\\\\\">\\\\\\\\n      {header}\\\\\\\\n      <div className=\\\\\\\\\\\\\\\"card-body d-flex flex-column gap-3\\\\\\\\\\\\\\\">\\\\\\\\n        {titleArea}\\\\\\\\n        {labelList}\\\\\\\\n      </div>\\\\\\\\n    </AttractableDiv>\\\\\\\\n  );\\\\\\\\n};\\\\\\\\n\\\\\\\\nreturn GithubKanbanTicket(props);\\\\\\\\n\"}}}}}"
      }
    ],
    "actions_agg": {
      "deposit": 0
    },
    "outcomes": {
      "status": true
    },
    "outcomes_agg": {
      "transaction_fee": 3.4023154167089e+21
    }
  },
  {
    "id": "2014014396",
    "receipt_id": "5vPQzdmHSpuox5wwC2MMDBDjrNj7CugRnRjNAjdsRrER",
    "predecessor_account_id": "system",
    "receiver_account_id": "devhub.near",
    "receipt_kind": "ACTION",
    "receipt_block": {
      "block_hash": "Bjkebi2mzzPei59BQ8iLodQ8eeU2A466QHRn1VjahJme",
      "block_height": 109639866,
      "block_timestamp": 1704444167220325400
    },
    "receipt_outcome": {
      "gas_burnt": 223182562500,
      "tokens_burnt": 0,
      "executor_account_id": "devhub.near",
      "status": true
    },
    "transaction_hash": "E3gFX7FdpWWhU6SWVAFGzmvYCX269f58tYh3LpdD2r5s",
    "included_in_block_hash": "5gbwaJmb4zKvQnAdWCvDaCCw6aJnFJYZS7jxGWXv5sV",
    "block_timestamp": "1704444165217260817",
    "block": {
      "block_height": 109639864
    },
    "receipt_conversion_tokens_burnt": "259999848064000000000",
    "actions": [
      {
        "action": "TRANSFER",
        "method": null,
        "deposit": 1.8599484013409406e+23,
        "fee": 0,
        "args": null
      }
    ],
    "actions_agg": {
      "deposit": 0
    },
    "outcomes": {
      "status": true
    },
    "outcomes_agg": {
      "transaction_fee": 3.4023154167089e+21
    }
  },
  {
    "id": "2026291203",
    "receipt_id": "B9bKNdzHxgxmqPfg7cpfNDeEd1KxKR7pB3zZcSkLMnpo",
    "predecessor_account_id": "devhub.near",
    "receiver_account_id": "social.near",
    "receipt_kind": "ACTION",
    "receipt_block": {
      "block_hash": "4mmu7zi6NPLYRDLpx9gdbiw5vCvNA7ibP4Zk6dPn56qo",
      "block_height": 109738208,
      "block_timestamp": 1704547715134399700
    },
    "receipt_outcome": {
      "gas_burnt": 23793293719012,
      "tokens_burnt": 2.3793293719012e+21,
      "executor_account_id": "social.near",
      "status": true
    },
    "transaction_hash": "ui9k7rnRMj98gxCZ6CzCDQzXoPuMbDaDYNNx95t9HQ5",
    "included_in_block_hash": "B6va5ksiwhZooA3Utdj68DXmqZ1ukzAehkcQ7GiYxBgh",
    "block_timestamp": "1704547714239338812",
    "block": {
      "block_height": 109738207
    },
    "receipt_conversion_tokens_burnt": "259732877544400000000",
    "actions": [
      {
        "action": "FUNCTION_CALL",
        "method": "set",
        "deposit": 0,
        "fee": 2.3793293719012e+21,
        "args": "{\"data\": {\"devhub.near\": {\"widget\": {\"devhub.page.community.index\": {\"\": \"const { normalize } = VM.require(\\\\\\\\\\\\\\\"devhub.near/widget/core.lib.stringUtils\\\\\\\\\\\\\\\");\\\\\\\\n\\\\\\\\nnormalize || (normalize = () => {});\\\\\\\\n\\\\\\\\nconst Button = styled.button`\\\\\\\\n  height: 40px;\\\\\\\\n  font-size: 14px;\\\\\\\\n  border-color: #e3e3e0;\\\\\\\\n  background-color: #ffffff;\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst Banner = styled.div`\\\\\\\\n  max-width: 100%;\\\\\\\\n  min-height: 240px;\\\\\\\\n  height: 240px;\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst CenteredMessage = styled.div`\\\\\\\\n  display: flex;\\\\\\\\n  flex-direction: column;\\\\\\\\n  justify-content: center;\\\\\\\\n  align-items: center;\\\\\\\\n  width: 100%;\\\\\\\\n  height: ${(p) => p.height ?? \\\\\\\\\\\\\\\"100%\\\\\\\\\\\\\\\"};\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst NavUnderline = styled.ul`\\\\\\\\n  cursor: pointer;\\\\\\\\n  a {\\\\\\\\n    color: #151515;\\\\\\\\n    text-decoration: none;\\\\\\\\n  }\\\\\\\\n\\\\\\\\n  a.active {\\\\\\\\n    font-weight: bold;\\\\\\\\n    border-bottom: 4px solid #00ec97;\\\\\\\\n  }\\\\\\\\n  border-bottom: 1px solid #cccccc;\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst { tab, permissions, community, view } = props;\\\\\\\\n\\\\\\\\nconst { href } = VM.require(\\\\\\\\\\\\\\\"devhub.near/widget/core.lib.url\\\\\\\\\\\\\\\");\\\\\\\\n\\\\\\\\nif (!href) {\\\\\\\\n  return <></>;\\\\\\\\n}\\\\\\\\n\\\\\\\\nif (!tab) {\\\\\\\\n  tab = \\\\\\\\\\\\\\\"Activity\\\\\\\\\\\\\\\";\\\\\\\\n}\\\\\\\\n\\\\\\\\ntab = normalize(tab);\\\\\\\\n\\\\\\\\nconst [isLinkCopied, setLinkCopied] = useState(false);\\\\\\\\n\\\\\\\\nconst tabs = [\\\\\\\\n  {\\\\\\\\n    title: \\\\\\\\\\\\\\\"Activity\\\\\\\\\\\\\\\",\\\\\\\\n    view: \\\\\\\\\\\\\\\"devhub.near/widget/devhub.entity.community.Activity\\\\\\\\\\\\\\\",\\\\\\\\n    params: {\\\\\\\\n      handle: community.handle,\\\\\\\\n    },\\\\\\\\n  },\\\\\\\\n  {\\\\\\\\n    title: \\\\\\\\\\\\\\\"Teams\\\\\\\\\\\\\\\",\\\\\\\\n    view: \\\\\\\\\\\\\\\"devhub.near/widget/devhub.entity.community.Teams\\\\\\\\\\\\\\\",\\\\\\\\n    params: {\\\\\\\\n      handle: community.handle,\\\\\\\\n    },\\\\\\\\n  },\\\\\\\\n];\\\\\\\\n\\\\\\\\n(community.addons || []).map((addon) => {\\\\\\\\n  addon.enabled &&\\\\\\\\n    tabs.push({\\\\\\\\n      title: addon.display_name,\\\\\\\\n      view: \\\\\\\\\\\\\\\"devhub.near/widget/devhub.page.addon\\\\\\\\\\\\\\\",\\\\\\\\n      params: { addon },\\\\\\\\n    });\\\\\\\\n});\\\\\\\\n\\\\\\\\nconst onShareClick = () =>\\\\\\\\n  clipboard\\\\\\\\n    .writeText(\\\\\\\\n      href({\\\\\\\\n        gateway: \\\\\\\\\\\\\\\"near.social\\\\\\\\\\\\\\\",\\\\\\\\n        widgetSrc: \\\\\\\\\\\\\\\"devhub.near/widget/app\\\\\\\\\\\\\\\",\\\\\\\\n        params: { page: \\\\\\\\\\\\\\\"community\\\\\\\\\\\\\\\", handle: community.handle },\\\\\\\\n      })\\\\\\\\n    )\\\\\\\\n    .then(setLinkCopied(true));\\\\\\\\n\\\\\\\\nlet currentTab = tabs.find((it) => normalize(it.title) === tab);\\\\\\\\n\\\\\\\\nconst CommunityName = styled.span`\\\\\\\\n  color: #151515;\\\\\\\\n  font-size: 2.25rem;\\\\\\\\n  font-style: normal;\\\\\\\\n  font-weight: 700;\\\\\\\\n  line-height: 100%; /* 48px */\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst CommunityDetails = styled.span`\\\\\\\\n  color: #818181;\\\\\\\\n  font-size: 1rem;\\\\\\\\n  font-style: normal;\\\\\\\\n  font-weight: 400;\\\\\\\\n  line-height: 120%; /* 28.8px */\\\\\\\\n`;\\\\\\\\n\\\\\\\\nfunction trimHttps(url) {\\\\\\\\n  if (url.startsWith(\\\\\\\\\\\\\\\"https://\\\\\\\\\\\\\\\")) {\\\\\\\\n    return url.substring(8);\\\\\\\\n  }\\\\\\\\n  return url;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// some communties have url as handle (eg: devhub platform) while others has correct handle\\\\\\\\nfunction checkTelegramHandle(tg) {\\\\\\\\n  const pattern = /https:\\\\\\\\\\\\\\\\/\\\\\\\\\\\\\\\\/t.me\\\\\\\\\\\\\\\\/(.*)/;\\\\\\\\n  const includesHttp = tg.match(pattern);\\\\\\\\n  const handle = includesHttp ? includesHttp[1] : tg;\\\\\\\\n  return { handle, url: \\\\\\\\\\\\\\\"https://t.me/\\\\\\\\\\\\\\\" + handle };\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst socialLinks = [\\\\\\\\n  ...((community.website_url?.length ?? 0) > 0\\\\\\\\n    ? [\\\\\\\\n        {\\\\\\\\n          href: `https://${trimHttps(community.website_url)}`,\\\\\\\\n          iconClass: \\\\\\\\\\\\\\\"bi bi-globe\\\\\\\\\\\\\\\",\\\\\\\\n          name: trimHttps(community.website_url),\\\\\\\\n        },\\\\\\\\n      ]\\\\\\\\n    : []),\\\\\\\\n\\\\\\\\n  ...((community.github_handle?.length ?? 0) > 0\\\\\\\\n    ? [\\\\\\\\n        {\\\\\\\\n          href: `https://github.com/${community.github_handle}`,\\\\\\\\n          iconClass: \\\\\\\\\\\\\\\"bi bi-github\\\\\\\\\\\\\\\",\\\\\\\\n          name: community.github_handle,\\\\\\\\n        },\\\\\\\\n      ]\\\\\\\\n    : []),\\\\\\\\n\\\\\\\\n  ...((community.twitter_handle?.length ?? 0) > 0\\\\\\\\n    ? [\\\\\\\\n        {\\\\\\\\n          href: `https://twitter.com/${community.twitter_handle}`,\\\\\\\\n          iconClass: \\\\\\\\\\\\\\\"bi bi-twitter\\\\\\\\\\\\\\\",\\\\\\\\n          name: community.twitter_handle,\\\\\\\\n        },\\\\\\\\n      ]\\\\\\\\n    : []),\\\\\\\\n\\\\\\\\n  ...(community.telegram_handle?.length > 0\\\\\\\\n    ? [\\\\\\\\n        {\\\\\\\\n          href: checkTelegramHandle(community.telegram_handle).url,\\\\\\\\n          iconClass: \\\\\\\\\\\\\\\"bi bi-telegram\\\\\\\\\\\\\\\",\\\\\\\\n          name: checkTelegramHandle(community.telegram_handle).handle,\\\\\\\\n        },\\\\\\\\n      ]\\\\\\\\n    : []),\\\\\\\\n];\\\\\\\\n\\\\\\\\nconst NavlinksContainer = styled.div`\\\\\\\\n  //background: white;\\\\\\\\n  padding: 0 3rem;\\\\\\\\n\\\\\\\\n  @media screen and (max-width: 960px) {\\\\\\\\n    padding: 0 1rem;\\\\\\\\n  }\\\\\\\\n`;\\\\\\\\n\\\\\\\\nreturn (\\\\\\\\n  <div\\\\\\\\n    className=\\\\\\\\\\\\\\\"d-flex flex-column gap-3 w-100\\\\\\\\\\\\\\\"\\\\\\\\n    style={{ background: \\\\\\\\\\\\\\\"#F4F4F4\\\\\\\\\\\\\\\" }}\\\\\\\\n  >\\\\\\\\n    <Banner\\\\\\\\n      className=\\\\\\\\\\\\\\\"object-fit-cover\\\\\\\\\\\\\\\"\\\\\\\\n      style={{\\\\\\\\n        background: `center / cover no-repeat url(${community.banner_url})`,\\\\\\\\n      }}\\\\\\\\n    />\\\\\\\\n\\\\\\\\n    <div className=\\\\\\\\\\\\\\\"container d-flex flex-wrap justify-content-between align-items-center align-items-md-start gap-4\\\\\\\\\\\\\\\">\\\\\\\\n      <div className=\\\\\\\\\\\\\\\"d-flex flex-column ms-3\\\\\\\\\\\\\\\">\\\\\\\\n        <div className=\\\\\\\\\\\\\\\"position-relative\\\\\\\\\\\\\\\">\\\\\\\\n          <div style={{ width: 150, height: 45 }}>\\\\\\\\n            <img\\\\\\\\n              alt=\\\\\\\\\\\\\\\"Loading logo...\\\\\\\\\\\\\\\"\\\\\\\\n              className=\\\\\\\\\\\\\\\"rounded-circle position-absolute\\\\\\\\\\\\\\\"\\\\\\\\n              width=\\\\\\\\\\\\\\\"160\\\\\\\\\\\\\\\"\\\\\\\\n              height=\\\\\\\\\\\\\\\"160\\\\\\\\\\\\\\\"\\\\\\\\n              src={community.logo_url}\\\\\\\\n              style={{ top: -124 }}\\\\\\\\n            />\\\\\\\\n          </div>\\\\\\\\n        </div>\\\\\\\\n\\\\\\\\n        <div className=\\\\\\\\\\\\\\\"d-flex flex-column gap-3 ps-md-3 pt-md-3 pb-md-2\\\\\\\\\\\\\\\">\\\\\\\\n          <CommunityName className=\\\\\\\\\\\\\\\"text-nowrap\\\\\\\\\\\\\\\">\\\\\\\\n            {community.name}\\\\\\\\n          </CommunityName>\\\\\\\\n          <CommunityDetails>{community.description}</CommunityDetails>\\\\\\\\n        </div>\\\\\\\\n\\\\\\\\n        <div className=\\\\\\\\\\\\\\\"mt-3 ps-3 d-flex gap-3 align-items-center\\\\\\\\\\\\\\\">\\\\\\\\n          {socialLinks.map((link, index) => (\\\\\\\\n            <a\\\\\\\\n              href={link.href}\\\\\\\\n              style={{\\\\\\\\n                marginLeft: index !== 0 ? \\\\\\\\\\\\\\\"0px\\\\\\\\\\\\\\\" : \\\\\\\\\\\\\\\"0px\\\\\\\\\\\\\\\",\\\\\\\\n                color: \\\\\\\\\\\\\\\"#818181\\\\\\\\\\\\\\\",\\\\\\\\n              }}\\\\\\\\n              key={link.href}\\\\\\\\n              target=\\\\\\\\\\\\\\\"_blank\\\\\\\\\\\\\\\"\\\\\\\\n            >\\\\\\\\n              <i className={link.iconClass}></i>\\\\\\\\n            </a>\\\\\\\\n          ))}\\\\\\\\n        </div>\\\\\\\\n      </div>\\\\\\\\n\\\\\\\\n      <div className=\\\\\\\\\\\\\\\"d-flex align-items-end gap-3 ms-auto mb-md-5 me-4\\\\\\\\\\\\\\\">\\\\\\\\n        {permissions.can_configure && (\\\\\\\\n          <Link\\\\\\\\n            to={`/devhub.near/widget/app?page=community.configuration&handle=${community.handle}`}\\\\\\\\n          >\\\\\\\\n            <Widget\\\\\\\\n              src={\\\\\\\\\\\\\\\"devhub.near/widget/devhub.components.molecule.Button\\\\\\\\\\\\\\\"}\\\\\\\\n              props={{\\\\\\\\n                classNames: { root: \\\\\\\\\\\\\\\"btn-outline-light text-dark shadow-none\\\\\\\\\\\\\\\" },\\\\\\\\n                notRounded: true,\\\\\\\\n                style: {\\\\\\\\n                  display: \\\\\\\\\\\\\\\"flex\\\\\\\\\\\\\\\",\\\\\\\\n                  padding: \\\\\\\\\\\\\\\"0.75rem 1rem\\\\\\\\\\\\\\\",\\\\\\\\n                  alignItems: \\\\\\\\\\\\\\\"center\\\\\\\\\\\\\\\",\\\\\\\\n                  gap: \\\\\\\\\\\\\\\"16px\\\\\\\\\\\\\\\",\\\\\\\\n\\\\\\\\n                  borderRadius: \\\\\\\\\\\\\\\"4px\\\\\\\\\\\\\\\",\\\\\\\\n                  border: \\\\\\\\\\\\\\\"1px solid #00EC97\\\\\\\\\\\\\\\",\\\\\\\\n                  background: \\\\\\\\\\\\\\\"rgba(129, 129, 129, 0.00)\\\\\\\\\\\\\\\",\\\\\\\\n                },\\\\\\\\n                icon: {\\\\\\\\n                  type: \\\\\\\\\\\\\\\"bootstrap_icon\\\\\\\\\\\\\\\",\\\\\\\\n                  variant: \\\\\\\\\\\\\\\"bi-gear-wide-connected\\\\\\\\\\\\\\\",\\\\\\\\n                },\\\\\\\\n                label: \\\\\\\\\\\\\\\"Configure community\\\\\\\\\\\\\\\",\\\\\\\\n              }}\\\\\\\\n            />\\\\\\\\n          </Link>\\\\\\\\n        )}\\\\\\\\n        <Widget\\\\\\\\n          src={\\\\\\\\\\\\\\\"devhub.near/widget/devhub.components.molecule.Button\\\\\\\\\\\\\\\"}\\\\\\\\n          props={{\\\\\\\\n            classNames: { root: \\\\\\\\\\\\\\\"btn-outline-light text-dark shadow-none\\\\\\\\\\\\\\\" },\\\\\\\\n            notRounded: true,\\\\\\\\n            style: {\\\\\\\\n              display: \\\\\\\\\\\\\\\"flex\\\\\\\\\\\\\\\",\\\\\\\\n              padding: \\\\\\\\\\\\\\\"0.75rem 1rem\\\\\\\\\\\\\\\",\\\\\\\\n              alignItems: \\\\\\\\\\\\\\\"center\\\\\\\\\\\\\\\",\\\\\\\\n              gap: \\\\\\\\\\\\\\\"16px\\\\\\\\\\\\\\\",\\\\\\\\n\\\\\\\\n              borderRadius: \\\\\\\\\\\\\\\"4px\\\\\\\\\\\\\\\",\\\\\\\\n              border: \\\\\\\\\\\\\\\"1px solid #00EC97\\\\\\\\\\\\\\\",\\\\\\\\n              background: \\\\\\\\\\\\\\\"rgba(129, 129, 129, 0.00)\\\\\\\\\\\\\\\",\\\\\\\\n            },\\\\\\\\n            label: \\\\\\\\\\\\\\\"Share \\\\\\\\u{2197}\\\\\\\\\\\\\\\",\\\\\\\\n            onClick: onShareClick,\\\\\\\\n            onMouseLeave: () => setLinkCopied(false),\\\\\\\\n            title: \\\\\\\\\\\\\\\"Copy link to clipboard\\\\\\\\\\\\\\\",\\\\\\\\n          }}\\\\\\\\n        />\\\\\\\\n      </div>\\\\\\\\n    </div>\\\\\\\\n    <NavlinksContainer>\\\\\\\\n      <NavUnderline className=\\\\\\\\\\\\\\\"nav gap-4 my-4\\\\\\\\\\\\\\\">\\\\\\\\n        {tabs.map(\\\\\\\\n          ({ title }) =>\\\\\\\\n            title && (\\\\\\\\n              <li className=\\\\\\\\\\\\\\\"nav-item\\\\\\\\\\\\\\\" key={title}>\\\\\\\\n                <Link\\\\\\\\n                  to={href({\\\\\\\\n                    widgetSrc: \\\\\\\\\\\\\\\"devhub.near/widget/app\\\\\\\\\\\\\\\",\\\\\\\\n                    params: {\\\\\\\\n                      page: \\\\\\\\\\\\\\\"community\\\\\\\\\\\\\\\",\\\\\\\\n                      handle: community.handle,\\\\\\\\n                      tab: normalize(title),\\\\\\\\n                    },\\\\\\\\n                  })}\\\\\\\\n                  aria-current={tab === normalize(title) && \\\\\\\\\\\\\\\"page\\\\\\\\\\\\\\\"}\\\\\\\\n                  className={[\\\\\\\\n                    \\\\\\\\\\\\\\\"d-inline-flex gap-2\\\\\\\\\\\\\\\",\\\\\\\\n                    tab === normalize(title) ? \\\\\\\\\\\\\\\"nav-link active\\\\\\\\\\\\\\\" : \\\\\\\\\\\\\\\"nav-link\\\\\\\\\\\\\\\",\\\\\\\\n                  ].join(\\\\\\\\\\\\\\\" \\\\\\\\\\\\\\\")}\\\\\\\\n                >\\\\\\\\n                  <span>{title}</span>\\\\\\\\n                </Link>\\\\\\\\n              </li>\\\\\\\\n            )\\\\\\\\n        )}\\\\\\\\n      </NavUnderline>\\\\\\\\n      {currentTab.title === \\\\\\\\\\\\\\\"Activity\\\\\\\\\\\\\\\" && (\\\\\\\\n        <div\\\\\\\\n          className=\\\\\\\\\\\\\\\"my-4 d-flex align-items-center justify-content-between\\\\\\\\\\\\\\\"\\\\\\\\n          style={{ gap: \\\\\\\\\\\\\\\"2.5rem\\\\\\\\\\\\\\\" }}\\\\\\\\n        >\\\\\\\\n          <div class=\\\\\\\\\\\\\\\"d-flex align-items-center justify-content-between\\\\\\\\\\\\\\\">\\\\\\\\n            <small class=\\\\\\\\\\\\\\\"text-muted\\\\\\\\\\\\\\\">\\\\\\\\n              <span>Required tags:</span>\\\\\\\\n              <Link\\\\\\\\n                to={href({\\\\\\\\n                  widgetSrc: \\\\\\\\\\\\\\\"devhub.near/widget/app\\\\\\\\\\\\\\\",\\\\\\\\n                  params: { page: \\\\\\\\\\\\\\\"feed\\\\\\\\\\\\\\\", tag: community.tag },\\\\\\\\n                })}\\\\\\\\n              >\\\\\\\\n                <Widget\\\\\\\\n                  src={\\\\\\\\\\\\\\\"devhub.near/widget/devhub.components.atom.Tag\\\\\\\\\\\\\\\"}\\\\\\\\n                  props={{\\\\\\\\n                    tag: community.tag,\\\\\\\\n                  }}\\\\\\\\n                />\\\\\\\\n              </Link>\\\\\\\\n            </small>\\\\\\\\n          </div>\\\\\\\\n          {context.accountId && (\\\\\\\\n            <Widget\\\\\\\\n              src={\\\\\\\\n                \\\\\\\\\\\\\\\"devhub.near/widget/devhub.components.molecule.PostControls\\\\\\\\\\\\\\\"\\\\\\\\n              }\\\\\\\\n              props={{\\\\\\\\n                title: \\\\\\\\\\\\\\\"Post\\\\\\\\\\\\\\\",\\\\\\\\n                href: href({\\\\\\\\n                  widgetSrc: \\\\\\\\\\\\\\\"devhub.near/widget/app\\\\\\\\\\\\\\\",\\\\\\\\n                  params: {\\\\\\\\n                    page: \\\\\\\\\\\\\\\"create\\\\\\\\\\\\\\\",\\\\\\\\n                    labels: [community.tag],\\\\\\\\n                  },\\\\\\\\n                }),\\\\\\\\n              }}\\\\\\\\n            />\\\\\\\\n          )}\\\\\\\\n        </div>\\\\\\\\n      )}\\\\\\\\n    </NavlinksContainer>\\\\\\\\n    {currentTab && (\\\\\\\\n      <div className=\\\\\\\\\\\\\\\"d-flex w-100 h-100\\\\\\\\\\\\\\\" key={currentTab.title}>\\\\\\\\n        <Widget\\\\\\\\n          src={currentTab.view}\\\\\\\\n          props={{\\\\\\\\n            ...currentTab.params,\\\\\\\\n            view, // default view for an addon, can come as a prop from a community or from a direct link to page.addon\\\\\\\\n\\\\\\\\n            // below is temporary prop drilling until kanban and github are migrated\\\\\\\\n            permissions,\\\\\\\\n            handle: community.handle,\\\\\\\\n          }}\\\\\\\\n        />\\\\\\\\n      </div>\\\\\\\\n    )}\\\\\\\\n  </div>\\\\\\\\n);\\\\\\\\n\"}, \"devhub.entity.post.PostEditor\": {\"\": \"const { normalize } = VM.require(\\\\\\\\\\\\\\\"devhub.near/widget/core.lib.stringUtils\\\\\\\\\\\\\\\");\\\\\\\\n\\\\\\\\nnormalize || (normalize = () => {});\\\\\\\\n\\\\\\\\nconst CenteredMessage = styled.div`\\\\\\\\n  display: flex;\\\\\\\\n  flex-direction: column;\\\\\\\\n  justify-content: center;\\\\\\\\n  align-items: center;\\\\\\\\n  width: 100%;\\\\\\\\n  height: 384px;\\\\\\\\n`;\\\\\\\\n\\\\\\\\nfunction initLabels() {\\\\\\\\n  const labels = [];\\\\\\\\n  if (typeof props.labels === \\\\\\\\\\\\\\\"string\\\\\\\\\\\\\\\") {\\\\\\\\n    labels.push(...props.labels.split(\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"));\\\\\\\\n  }\\\\\\\\n  if (Array.isArray(props.labels)) {\\\\\\\\n    labels.push(...props.labels);\\\\\\\\n  }\\\\\\\\n  if (props.referral) {\\\\\\\\n    labels.push(`referral:${props.referral}`);\\\\\\\\n  }\\\\\\\\n  return labels;\\\\\\\\n}\\\\\\\\n\\\\\\\\nif (!context.accountId) {\\\\\\\\n  return (\\\\\\\\n    <CenteredMessage height={\\\\\\\\\\\\\\\"384px\\\\\\\\\\\\\\\"}>\\\\\\\\n      <h2>Please sign in to create a post.</h2>\\\\\\\\n    </CenteredMessage>\\\\\\\\n  );\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst cleanDescription = (description) => {\\\\\\\\n  return description\\\\\\\\n    ? description.replace(\\\\\\\\n        /###### Requested amount: .+?\\\\\\\\\\\\\\\\n###### Requested sponsor: @[^\\\\\\\\\\\\\\\\s]+\\\\\\\\\\\\\\\\n/g,\\\\\\\\n        \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\"\\\\\\\\n      )\\\\\\\\n    : description;\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst postTypeOptions = {\\\\\\\\n  Idea: {\\\\\\\\n    name: \\\\\\\\\\\\\\\"Idea\\\\\\\\\\\\\\\",\\\\\\\\n    icon: \\\\\\\\\\\\\\\"bi-lightbulb\\\\\\\\\\\\\\\",\\\\\\\\n    description:\\\\\\\\n      \\\\\\\\\\\\\\\"Get feedback from the community about a problem, opportunity, or need.\\\\\\\\\\\\\\\",\\\\\\\\n  },\\\\\\\\n\\\\\\\\n  Solution: {\\\\\\\\n    name: \\\\\\\\\\\\\\\"Solution\\\\\\\\\\\\\\\",\\\\\\\\n    icon: \\\\\\\\\\\\\\\"bi-rocket\\\\\\\\\\\\\\\",\\\\\\\\n    description:\\\\\\\\n      \\\\\\\\\\\\\\\"Provide a specific proposal or implementation to an idea, optionally requesting funding. If your solution relates to an existing idea, please reply to the original post with a solution.\\\\\\\\\\\\\\\",\\\\\\\\n  },\\\\\\\\n};\\\\\\\\n\\\\\\\\nlet fields = {\\\\\\\\n  Comment: [\\\\\\\\\\\\\\\"description\\\\\\\\\\\\\\\"],\\\\\\\\n  Idea: [\\\\\\\\\\\\\\\"name\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"description\\\\\\\\\\\\\\\"],\\\\\\\\n  Solution: [\\\\\\\\\\\\\\\"name\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"description\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"fund_raising\\\\\\\\\\\\\\\"],\\\\\\\\n  Attestation: [\\\\\\\\\\\\\\\"name\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"description\\\\\\\\\\\\\\\"],\\\\\\\\n  Sponsorship: [\\\\\\\\n    \\\\\\\\\\\\\\\"name\\\\\\\\\\\\\\\",\\\\\\\\n    \\\\\\\\\\\\\\\"description\\\\\\\\\\\\\\\",\\\\\\\\n    \\\\\\\\\\\\\\\"amount\\\\\\\\\\\\\\\",\\\\\\\\n    \\\\\\\\\\\\\\\"sponsorship_token\\\\\\\\\\\\\\\",\\\\\\\\n    \\\\\\\\\\\\\\\"supervisor\\\\\\\\\\\\\\\",\\\\\\\\n  ],\\\\\\\\n  Github: [\\\\\\\\\\\\\\\"githubLink\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"name\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"description\\\\\\\\\\\\\\\"],\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst isCreatePostPage = props.isCreatePostPage ?? false;\\\\\\\\nconst postType = props.postType ?? \\\\\\\\\\\\\\\"Idea\\\\\\\\\\\\\\\";\\\\\\\\nconst parentId = props.parentId ?? null;\\\\\\\\nconst mode = props.mode ?? \\\\\\\\\\\\\\\"Create\\\\\\\\\\\\\\\";\\\\\\\\nconst labelStrings = initLabels();\\\\\\\\nconst [postIdList, setPostIdList] = useState(null); // to show updated post after approve txn\\\\\\\\nconst [showPostPage, setShowPostPage] = useState(false); // show newly created post\\\\\\\\nconst [postId, setPostId] = useState(props.postId ?? null);\\\\\\\\nconst [postData, setPostData] = useState(null); // for capturing edit post change\\\\\\\\n\\\\\\\\nuseEffect(() => {\\\\\\\\n  if (mode == \\\\\\\\\\\\\\\"Edit\\\\\\\\\\\\\\\") {\\\\\\\\n    const data = Near.view(\\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"get_post\\\\\\\\\\\\\\\", {\\\\\\\\n      post_id: postId,\\\\\\\\n    });\\\\\\\\n    if (!postData) {\\\\\\\\n      setPostData(data);\\\\\\\\n    }\\\\\\\\n    if (postData && data && JSON.stringify(postData) !== JSON.stringify(data)) {\\\\\\\\n      props.setEditorState(false);\\\\\\\\n      props.setExpandReplies(true);\\\\\\\\n      setPostData(data);\\\\\\\\n    }\\\\\\\\n  } else {\\\\\\\\n    const postIds = Near.view(\\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"get_all_post_ids\\\\\\\\\\\\\\\");\\\\\\\\n    if (!postIdList) {\\\\\\\\n      setPostIdList(postIds);\\\\\\\\n    }\\\\\\\\n    if (\\\\\\\\n      postIdList?.length > 0 &&\\\\\\\\n      postIds.length > 0 &&\\\\\\\\n      postIdList.length !== postIds.length\\\\\\\\n    ) {\\\\\\\\n      props.onDraftStateChange(null);\\\\\\\\n      if (isCreatePostPage) {\\\\\\\\n        setShowPostPage(true);\\\\\\\\n        setPostId(postIds[postIds?.length - 1]);\\\\\\\\n      } else {\\\\\\\\n        // close editor and expand replies\\\\\\\\n        props.setEditorState(false);\\\\\\\\n        props.setExpandReplies(true);\\\\\\\\n      }\\\\\\\\n      setPostIdList(postIds);\\\\\\\\n    }\\\\\\\\n  }\\\\\\\\n});\\\\\\\\n\\\\\\\\nconst labels = labelStrings.map((s) => {\\\\\\\\n  return { name: s };\\\\\\\\n});\\\\\\\\n\\\\\\\\ninitState({\\\\\\\\n  seekingFunding: props.seekingFunding ?? false,\\\\\\\\n  author_id: context.accountId,\\\\\\\\n  // Should be a list of objects with field \\\\\\\\\\\\\\\"name\\\\\\\\\\\\\\\".\\\\\\\\n  labels,\\\\\\\\n  // Should be a list of labels as strings.\\\\\\\\n  // Both of the label structures should be modified together.\\\\\\\\n  labelStrings: [],\\\\\\\\n  postType,\\\\\\\\n  name: props.name ?? \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\",\\\\\\\\n  description:\\\\\\\\n    (props.postType === \\\\\\\\\\\\\\\"Solution\\\\\\\\\\\\\\\"\\\\\\\\n      ? cleanDescription(props.description)\\\\\\\\n      : props.description) ?? \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\",\\\\\\\\n  amount: props.amount ?? \\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\n  token: props.token ?? \\\\\\\\\\\\\\\"USDT\\\\\\\\\\\\\\\",\\\\\\\\n  supervisor: props.supervisor ?? \\\\\\\\\\\\\\\"neardevdao.near\\\\\\\\\\\\\\\",\\\\\\\\n  githubLink: props.githubLink ?? \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\",\\\\\\\\n  warning: \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\",\\\\\\\\n  draftStateApplied: false,\\\\\\\\n  mentionInput: \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\", // text next to @ tag\\\\\\\\n  mentionsArray: [], // all the mentions in the description\\\\\\\\n  displayFields: fields[postType],\\\\\\\\n});\\\\\\\\n\\\\\\\\n/* INCLUDE: \\\\\\\\\\\\\\\"core/lib/autocomplete\\\\\\\\\\\\\\\" */\\\\\\\\nconst autocompleteEnabled = true;\\\\\\\\n\\\\\\\\nconst AutoComplete = styled.div`\\\\\\\\n  z-index: 5;\\\\\\\\n\\\\\\\\n  > div > div {\\\\\\\\n    padding: calc(var(--padding) / 2);\\\\\\\\n  }\\\\\\\\n`;\\\\\\\\n\\\\\\\\nif (props.transactionHashes) {\\\\\\\\n  const transaction = useCache(\\\\\\\\n    () =>\\\\\\\\n      asyncFetch(\\\\\\\\\\\\\\\"https://rpc.mainnet.near.org\\\\\\\\\\\\\\\", {\\\\\\\\n        method: \\\\\\\\\\\\\\\"POST\\\\\\\\\\\\\\\",\\\\\\\\n        headers: {\\\\\\\\n          \\\\\\\\\\\\\\\"content-type\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"application/json\\\\\\\\\\\\\\\",\\\\\\\\n        },\\\\\\\\n        body: JSON.stringify({\\\\\\\\n          jsonrpc: \\\\\\\\\\\\\\\"2.0\\\\\\\\\\\\\\\",\\\\\\\\n          id: \\\\\\\\\\\\\\\"dontcare\\\\\\\\\\\\\\\",\\\\\\\\n          method: \\\\\\\\\\\\\\\"tx\\\\\\\\\\\\\\\",\\\\\\\\n          params: [props.transactionHashes, context.accountId],\\\\\\\\n        }),\\\\\\\\n      }).then((res) => res),\\\\\\\\n    props.transactionHashes + context.accountId,\\\\\\\\n    { subscribe: false }\\\\\\\\n  );\\\\\\\\n\\\\\\\\n  if (transaction !== null) {\\\\\\\\n    const transaction_method_name =\\\\\\\\n      transaction?.body?.result?.transaction?.actions[0].FunctionCall\\\\\\\\n        .method_name;\\\\\\\\n\\\\\\\\n    const is_edit_or_add_post_transaction =\\\\\\\\n      transaction_method_name == \\\\\\\\\\\\\\\"add_post\\\\\\\\\\\\\\\" ||\\\\\\\\n      transaction_method_name == \\\\\\\\\\\\\\\"edit_post\\\\\\\\\\\\\\\";\\\\\\\\n\\\\\\\\n    if (is_edit_or_add_post_transaction) {\\\\\\\\n      props.onDraftStateChange(null);\\\\\\\\n    }\\\\\\\\n\\\\\\\\n    // show the latest created post to user\\\\\\\\n    if (transaction_method_name == \\\\\\\\\\\\\\\"add_post\\\\\\\\\\\\\\\" && isCreatePostPage) {\\\\\\\\n      setShowPostPage(true);\\\\\\\\n      setPostId(postIdList?.[postIdList?.length - 1]);\\\\\\\\n    }\\\\\\\\n  }\\\\\\\\n}\\\\\\\\n\\\\\\\\nfunction textareaInputHandler(value) {\\\\\\\\n  const words = value.split(/\\\\\\\\\\\\\\\\s+/);\\\\\\\\n  const allMentiones = words\\\\\\\\n    .filter((word) => word.startsWith(\\\\\\\\\\\\\\\"@\\\\\\\\\\\\\\\"))\\\\\\\\n    .map((mention) => mention.slice(1));\\\\\\\\n  const newMentiones = allMentiones.filter(\\\\\\\\n    (item) => !state.mentionsArray.includes(item)\\\\\\\\n  );\\\\\\\\n\\\\\\\\n  State.update((lastKnownState) => ({\\\\\\\\n    ...lastKnownState,\\\\\\\\n    text: value,\\\\\\\\n    showAccountAutocomplete: newMentiones?.length > 0,\\\\\\\\n    mentionsArray: allMentiones,\\\\\\\\n    mentionInput: newMentiones?.[0] ?? \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\",\\\\\\\\n  }));\\\\\\\\n}\\\\\\\\n\\\\\\\\nfunction autoCompleteAccountId(id) {\\\\\\\\n  // to make sure we update the @ at correct index\\\\\\\\n  let currentIndex = 0;\\\\\\\\n  const updatedDescription = state.description.replace(\\\\\\\\n    /(?:^|\\\\\\\\\\\\\\\\s)(@[^\\\\\\\\\\\\\\\\s]*)/g,\\\\\\\\n    (match) => {\\\\\\\\n      if (currentIndex === state.mentionsArray.indexOf(state.mentionInput)) {\\\\\\\\n        currentIndex++;\\\\\\\\n        return ` @${id}`;\\\\\\\\n      } else {\\\\\\\\n        currentIndex++;\\\\\\\\n        return match;\\\\\\\\n      }\\\\\\\\n    }\\\\\\\\n  );\\\\\\\\n  State.update((lastKnownState) => ({\\\\\\\\n    ...lastKnownState,\\\\\\\\n    handler: \\\\\\\\\\\\\\\"autocompleteSelected\\\\\\\\\\\\\\\",\\\\\\\\n    description: updatedDescription,\\\\\\\\n    showAccountAutocomplete: false,\\\\\\\\n  }));\\\\\\\\n}\\\\\\\\n\\\\\\\\n/* END_INCLUDE: \\\\\\\\\\\\\\\"core/lib/autocomplete\\\\\\\\\\\\\\\" */\\\\\\\\n\\\\\\\\nif (!state.draftStateApplied && props.draftState) {\\\\\\\\n  State.update({ ...props.draftState, draftStateApplied: true });\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst typeSwitch = (optionName) => {\\\\\\\\n  State.update({\\\\\\\\n    postType: optionName,\\\\\\\\n    displayFields: fields[optionName],\\\\\\\\n  });\\\\\\\\n};\\\\\\\\n\\\\\\\\n// This must be outside onClick, because Near.view returns null at first, and when the view call finished, it returns true/false.\\\\\\\\n// If checking this inside onClick, it will give `null` and we cannot tell the result is true or false.\\\\\\\\nlet grantNotify = Near.view(\\\\\\\\\\\\\\\"social.near\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"is_write_permission_granted\\\\\\\\\\\\\\\", {\\\\\\\\n  predecessor_id: \\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\",\\\\\\\\n  key: context.accountId + \\\\\\\\\\\\\\\"/index/notify\\\\\\\\\\\\\\\",\\\\\\\\n});\\\\\\\\nif (grantNotify === null) {\\\\\\\\n  return;\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst tokenMapping = {\\\\\\\\n  NEAR: \\\\\\\\\\\\\\\"NEAR\\\\\\\\\\\\\\\",\\\\\\\\n  USDT: {\\\\\\\\n    NEP141: {\\\\\\\\n      address: \\\\\\\\\\\\\\\"usdt.tether-token.near\\\\\\\\\\\\\\\",\\\\\\\\n    },\\\\\\\\n  },\\\\\\\\n  USDC: {\\\\\\\\n    NEP141: {\\\\\\\\n      address:\\\\\\\\n        \\\\\\\\\\\\\\\"17208628f84f5d6ad33f0da3bbbeb27ffcb398eac501a31bd6ad2011e36133a1\\\\\\\\\\\\\\\",\\\\\\\\n    },\\\\\\\\n  },\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst onSubmit = () => {\\\\\\\\n  let labels = state.labelStrings;\\\\\\\\n  var body = {\\\\\\\\n    Comment: { description: state.description, comment_version: \\\\\\\\\\\\\\\"V2\\\\\\\\\\\\\\\" },\\\\\\\\n    Idea: {\\\\\\\\n      name: state.name,\\\\\\\\n      description: state.description,\\\\\\\\n      idea_version: \\\\\\\\\\\\\\\"V1\\\\\\\\\\\\\\\",\\\\\\\\n    },\\\\\\\\n    Solution: {\\\\\\\\n      name: state.name,\\\\\\\\n      description: generateDescription(\\\\\\\\n        state.description,\\\\\\\\n        state.amount,\\\\\\\\n        state.token,\\\\\\\\n        state.supervisor,\\\\\\\\n        state.seekingFunding\\\\\\\\n      ),\\\\\\\\n      solution_version: \\\\\\\\\\\\\\\"V1\\\\\\\\\\\\\\\",\\\\\\\\n    },\\\\\\\\n    Attestation: {\\\\\\\\n      name: state.name,\\\\\\\\n      description: state.description,\\\\\\\\n      attestation_version: \\\\\\\\\\\\\\\"V1\\\\\\\\\\\\\\\",\\\\\\\\n    },\\\\\\\\n    Sponsorship: {\\\\\\\\n      name: state.name,\\\\\\\\n      description: state.description,\\\\\\\\n      amount: state.amount,\\\\\\\\n      sponsorship_token: tokenMapping[state.token],\\\\\\\\n      supervisor: state.supervisor,\\\\\\\\n      sponsorship_version: \\\\\\\\\\\\\\\"V1\\\\\\\\\\\\\\\",\\\\\\\\n    },\\\\\\\\n    Github: {\\\\\\\\n      name: state.name,\\\\\\\\n      description: state.description,\\\\\\\\n      github_version: \\\\\\\\\\\\\\\"V0\\\\\\\\\\\\\\\",\\\\\\\\n      github_link: state.githubLink,\\\\\\\\n    },\\\\\\\\n  }[state.postType];\\\\\\\\n  body[\\\\\\\\\\\\\\\"post_type\\\\\\\\\\\\\\\"] = state.postType;\\\\\\\\n  if (!context.accountId) {\\\\\\\\n    return;\\\\\\\\n  }\\\\\\\\n  let txn = [];\\\\\\\\n  if (mode == \\\\\\\\\\\\\\\"Create\\\\\\\\\\\\\\\") {\\\\\\\\n    props.onDraftStateChange(\\\\\\\\n      Object.assign({}, state, { parent_post_id: parentId })\\\\\\\\n    );\\\\\\\\n    txn.push({\\\\\\\\n      contractName: \\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\",\\\\\\\\n      methodName: \\\\\\\\\\\\\\\"add_post\\\\\\\\\\\\\\\",\\\\\\\\n      args: {\\\\\\\\n        parent_id: parentId,\\\\\\\\n        labels,\\\\\\\\n        body,\\\\\\\\n      },\\\\\\\\n      gas: Big(10).pow(14),\\\\\\\\n    });\\\\\\\\n  } else if (mode == \\\\\\\\\\\\\\\"Edit\\\\\\\\\\\\\\\") {\\\\\\\\n    props.onDraftStateChange(\\\\\\\\n      Object.assign({}, state, { edit_post_id: postId })\\\\\\\\n    );\\\\\\\\n    txn.push({\\\\\\\\n      contractName: \\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\",\\\\\\\\n      methodName: \\\\\\\\\\\\\\\"edit_post\\\\\\\\\\\\\\\",\\\\\\\\n      args: {\\\\\\\\n        id: postId,\\\\\\\\n        labels,\\\\\\\\n        body,\\\\\\\\n      },\\\\\\\\n      gas: Big(10).pow(14),\\\\\\\\n    });\\\\\\\\n  }\\\\\\\\n  if (mode == \\\\\\\\\\\\\\\"Create\\\\\\\\\\\\\\\" || mode == \\\\\\\\\\\\\\\"Edit\\\\\\\\\\\\\\\") {\\\\\\\\n    if (grantNotify === false) {\\\\\\\\n      txn.unshift({\\\\\\\\n        contractName: \\\\\\\\\\\\\\\"social.near\\\\\\\\\\\\\\\",\\\\\\\\n        methodName: \\\\\\\\\\\\\\\"grant_write_permission\\\\\\\\\\\\\\\",\\\\\\\\n        args: {\\\\\\\\n          predecessor_id: \\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\",\\\\\\\\n          keys: [context.accountId + \\\\\\\\\\\\\\\"/index/notify\\\\\\\\\\\\\\\"],\\\\\\\\n        },\\\\\\\\n        gas: Big(10).pow(14),\\\\\\\\n        deposit: Big(10).pow(22),\\\\\\\\n      });\\\\\\\\n    }\\\\\\\\n    Near.call(txn);\\\\\\\\n  }\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst checkLabel = (label) => {\\\\\\\\n  Near.asyncView(\\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"is_allowed_to_use_labels\\\\\\\\\\\\\\\", {\\\\\\\\n    editor: context.accountId,\\\\\\\\n    labels: [label],\\\\\\\\n  }).then((allowed) => {\\\\\\\\n    if (allowed) {\\\\\\\\n      State.update({ warning: \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\" });\\\\\\\\n    } else {\\\\\\\\n      State.update({\\\\\\\\n        warning:\\\\\\\\n          \\\\\\\\\\\\'The label \\\\\\\\\\\\\\\"\\\\\\\\\\\\' +\\\\\\\\n          label +\\\\\\\\n          \\\\\\\\\\\\'\\\\\\\\\\\\\\\" is protected and can only be added by moderators\\\\\\\\\\\\',\\\\\\\\n      });\\\\\\\\n      return;\\\\\\\\n    }\\\\\\\\n  });\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst setLabels = (labels) => {\\\\\\\\n  labels = labels.map((o) => {\\\\\\\\n    o.name = normalize(o.name);\\\\\\\\n    return o;\\\\\\\\n  });\\\\\\\\n  if (labels.length < state.labels.length) {\\\\\\\\n    let oldLabels = new Set(state.labels.map((label) => label.name));\\\\\\\\n    for (let label of labels) {\\\\\\\\n      oldLabels.delete(label.name);\\\\\\\\n    }\\\\\\\\n    let removed = oldLabels.values().next().value;\\\\\\\\n    Near.asyncView(\\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"is_allowed_to_use_labels\\\\\\\\\\\\\\\", {\\\\\\\\n      editor: context.accountId,\\\\\\\\n      labels: [removed],\\\\\\\\n    }).then((allowed) => {\\\\\\\\n      if (allowed) {\\\\\\\\n        let labelStrings = labels.map(({ name }) => name);\\\\\\\\n        State.update({ labels, labelStrings });\\\\\\\\n      } else {\\\\\\\\n        State.update({\\\\\\\\n          warning:\\\\\\\\n            \\\\\\\\\\\\'The label \\\\\\\\\\\\\\\"\\\\\\\\\\\\' +\\\\\\\\n            removed +\\\\\\\\n            \\\\\\\\\\\\'\\\\\\\\\\\\\\\" is protected and can only be updated by moderators\\\\\\\\\\\\',\\\\\\\\n        });\\\\\\\\n        return;\\\\\\\\n      }\\\\\\\\n    });\\\\\\\\n  } else {\\\\\\\\n    let labelStrings = labels.map((o) => {\\\\\\\\n      return o.name;\\\\\\\\n    });\\\\\\\\n    State.update({ labels, labelStrings });\\\\\\\\n  }\\\\\\\\n};\\\\\\\\nconst existingLabelStrings =\\\\\\\\n  Near.view(\\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"get_all_allowed_labels\\\\\\\\\\\\\\\", {\\\\\\\\n    editor: context.accountId,\\\\\\\\n  }) ?? [];\\\\\\\\nconst existingLabelSet = new Set(existingLabelStrings);\\\\\\\\nconst existingLabels = existingLabelStrings\\\\\\\\n  .filter((it) => it !== \\\\\\\\\\\\\\\"blog\\\\\\\\\\\\\\\") // remove blog label so users cannot publish blogs from feed\\\\\\\\n  .map((s) => {\\\\\\\\n    return { name: s };\\\\\\\\n  });\\\\\\\\n\\\\\\\\nconst labelEditor = (\\\\\\\\n  <div className=\\\\\\\\\\\\\\\"col-lg-12  mb-2\\\\\\\\\\\\\\\">\\\\\\\\n    <label htmlFor=\\\\\\\\\\\\\\\"labels\\\\\\\\\\\\\\\" className=\\\\\\\\\\\\\\\"fs-6 fw-bold mb-1\\\\\\\\\\\\\\\">\\\\\\\\n      Labels\\\\\\\\n    </label>\\\\\\\\n    <Typeahead\\\\\\\\n      multiple\\\\\\\\n      labelKey=\\\\\\\\\\\\\\\"name\\\\\\\\\\\\\\\"\\\\\\\\n      onInputChange={checkLabel}\\\\\\\\n      onChange={setLabels}\\\\\\\\n      options={existingLabels}\\\\\\\\n      placeholder=\\\\\\\\\\\\\\\"near.social, widget, NEP, standard, protocol, tool\\\\\\\\\\\\\\\"\\\\\\\\n      selected={state.labels}\\\\\\\\n      positionFixed\\\\\\\\n      allowNew={(results, props) => {\\\\\\\\n        return (\\\\\\\\n          !existingLabelSet.has(props.text) &&\\\\\\\\n          props.text.toLowerCase() !== \\\\\\\\\\\\\\\"blog\\\\\\\\\\\\\\\" && // dont allow adding \\\\\\\\\\\\\\\"Blog\\\\\\\\\\\\\\\"\\\\\\\\n          props.selected.filter((selected) => selected.name === props.text)\\\\\\\\n            .length == 0 &&\\\\\\\\n          Near.view(\\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"is_allowed_to_use_labels\\\\\\\\\\\\\\\", {\\\\\\\\n            editor: context.accountId,\\\\\\\\n            labels: [props.text],\\\\\\\\n          })\\\\\\\\n        );\\\\\\\\n      }}\\\\\\\\n    />\\\\\\\\n  </div>\\\\\\\\n);\\\\\\\\n\\\\\\\\nconst githubLinkDiv = (\\\\\\\\n  <div className=\\\\\\\\\\\\\\\"col-lg-12  mb-2\\\\\\\\\\\\\\\">\\\\\\\\n    Github Issue URL:\\\\\\\\n    <input\\\\\\\\n      type=\\\\\\\\\\\\\\\"text\\\\\\\\\\\\\\\"\\\\\\\\n      value={state.githubLink}\\\\\\\\n      onChange={(event) => State.update({ githubLink: event.target.value })}\\\\\\\\n    />\\\\\\\\n  </div>\\\\\\\\n);\\\\\\\\n\\\\\\\\nconst nameDiv = (\\\\\\\\n  <div className=\\\\\\\\\\\\\\\"col-lg-12  mb-2\\\\\\\\\\\\\\\">\\\\\\\\n    <label htmlFor=\\\\\\\\\\\\\\\"title\\\\\\\\\\\\\\\" className=\\\\\\\\\\\\\\\"fs-6 fw-bold mb-1\\\\\\\\\\\\\\\">\\\\\\\\n      Title\\\\\\\\n    </label>\\\\\\\\n    <input\\\\\\\\n      name=\\\\\\\\\\\\\\\"title\\\\\\\\\\\\\\\"\\\\\\\\n      id=\\\\\\\\\\\\\\\"title\\\\\\\\\\\\\\\"\\\\\\\\n      data-testid=\\\\\\\\\\\\\\\"name-editor\\\\\\\\\\\\\\\"\\\\\\\\n      type=\\\\\\\\\\\\\\\"text\\\\\\\\\\\\\\\"\\\\\\\\n      value={state.name}\\\\\\\\n      onChange={(event) => State.update({ name: event.target.value })}\\\\\\\\n    />\\\\\\\\n  </div>\\\\\\\\n);\\\\\\\\n\\\\\\\\nconst amountDiv = (\\\\\\\\n  <div className=\\\\\\\\\\\\\\\"col-lg-6  mb-2\\\\\\\\\\\\\\\">\\\\\\\\n    Amount:\\\\\\\\n    <input\\\\\\\\n      type=\\\\\\\\\\\\\\\"text\\\\\\\\\\\\\\\"\\\\\\\\n      value={state.amount}\\\\\\\\n      onChange={(event) => State.update({ amount: event.target.value })}\\\\\\\\n    />\\\\\\\\n  </div>\\\\\\\\n);\\\\\\\\n\\\\\\\\nconst tokenDiv = (\\\\\\\\n  <div className=\\\\\\\\\\\\\\\"col-lg-6 mb-2\\\\\\\\\\\\\\\">\\\\\\\\n    Currency\\\\\\\\n    <select\\\\\\\\n      onChange={(event) => State.update({ token: event.target.value })}\\\\\\\\n      class=\\\\\\\\\\\\\\\"form-select\\\\\\\\\\\\\\\"\\\\\\\\n      aria-label=\\\\\\\\\\\\\\\"Select currency\\\\\\\\\\\\\\\"\\\\\\\\n      value={state.token}\\\\\\\\n    >\\\\\\\\n      <option value=\\\\\\\\\\\\\\\"USDT\\\\\\\\\\\\\\\">USDT</option>\\\\\\\\n      <option value=\\\\\\\\\\\\\\\"NEAR\\\\\\\\\\\\\\\">NEAR</option>\\\\\\\\n      <option value=\\\\\\\\\\\\\\\"USDC\\\\\\\\\\\\\\\">USDC</option>\\\\\\\\n    </select>\\\\\\\\n  </div>\\\\\\\\n);\\\\\\\\n\\\\\\\\nconst supervisorDiv = (\\\\\\\\n  <div className=\\\\\\\\\\\\\\\"col-lg-6 mb-2\\\\\\\\\\\\\\\">\\\\\\\\n    Supervisor:\\\\\\\\n    <input\\\\\\\\n      type=\\\\\\\\\\\\\\\"text\\\\\\\\\\\\\\\"\\\\\\\\n      value={state.supervisor}\\\\\\\\n      onChange={(event) => State.update({ supervisor: event.target.value })}\\\\\\\\n    />\\\\\\\\n  </div>\\\\\\\\n);\\\\\\\\n\\\\\\\\nconst callDescriptionDiv = () => {\\\\\\\\n  return (\\\\\\\\n    <div className=\\\\\\\\\\\\\\\"col-lg-12  mb-2\\\\\\\\\\\\\\\">\\\\\\\\n      <label htmlFor=\\\\\\\\\\\\\\\"description\\\\\\\\\\\\\\\" className=\\\\\\\\\\\\\\\"fs-6 fw-bold mb-1\\\\\\\\\\\\\\\">\\\\\\\\n        Description\\\\\\\\n      </label>\\\\\\\\n      <Widget\\\\\\\\n        src={\\\\\\\\\\\\\\\"devhub.near/widget/devhub.components.molecule.MarkdownEditor\\\\\\\\\\\\\\\"}\\\\\\\\n        props={{\\\\\\\\n          data: { handler: state.handler, content: state.description },\\\\\\\\n          onChange: (content) => {\\\\\\\\n            State.update({ description: content, handler: \\\\\\\\\\\\\\\"update\\\\\\\\\\\\\\\" });\\\\\\\\n            textareaInputHandler(content);\\\\\\\\n          },\\\\\\\\n        }}\\\\\\\\n      />\\\\\\\\n      {autocompleteEnabled && state.showAccountAutocomplete && (\\\\\\\\n        <AutoComplete>\\\\\\\\n          <Widget\\\\\\\\n            src=\\\\\\\\\\\\\\\"devhub.near/widget/devhub.components.molecule.AccountAutocomplete\\\\\\\\\\\\\\\"\\\\\\\\n            props={{\\\\\\\\n              term: state.mentionInput,\\\\\\\\n              onSelect: autoCompleteAccountId,\\\\\\\\n              onClose: () => State.update({ showAccountAutocomplete: false }),\\\\\\\\n            }}\\\\\\\\n          />\\\\\\\\n        </AutoComplete>\\\\\\\\n      )}\\\\\\\\n    </div>\\\\\\\\n  );\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst disclaimer = (\\\\\\\\n  <p>\\\\\\\\n    <i>\\\\\\\\n      * Note, all projects that were granted sponsorships are required to pass\\\\\\\\n      KYC to receive the funding.\\\\\\\\n    </i>\\\\\\\\n  </p>\\\\\\\\n);\\\\\\\\n\\\\\\\\nconst isFundraisingDiv = (\\\\\\\\n  // This is jank with just btns and not radios. But the radios were glitchy af\\\\\\\\n  <>\\\\\\\\n    <div class=\\\\\\\\\\\\\\\"mb-2\\\\\\\\\\\\\\\">\\\\\\\\n      <p class=\\\\\\\\\\\\\\\"fs-6 fw-bold mb-1\\\\\\\\\\\\\\\">\\\\\\\\n        Are you seeking funding for your solution?\\\\\\\\n        <span class=\\\\\\\\\\\\\\\"text-muted fw-normal\\\\\\\\\\\\\\\">(Optional)</span>\\\\\\\\n      </p>\\\\\\\\n      <div class=\\\\\\\\\\\\\\\"form-check form-check-inline\\\\\\\\\\\\\\\">\\\\\\\\n        <label class=\\\\\\\\\\\\\\\"form-check-label\\\\\\\\\\\\\\\">\\\\\\\\n          <button\\\\\\\\n            className=\\\\\\\\\\\\\\\"btn btn-light p-0\\\\\\\\\\\\\\\"\\\\\\\\n            style={{\\\\\\\\n              backgroundColor: state.seekingFunding ? \\\\\\\\\\\\\\\"#0C7283\\\\\\\\\\\\\\\" : \\\\\\\\\\\\\\\"inherit\\\\\\\\\\\\\\\",\\\\\\\\n              color: \\\\\\\\\\\\\\\"#f3f3f3\\\\\\\\\\\\\\\",\\\\\\\\n              border: \\\\\\\\\\\\\\\"solid #D9D9D9\\\\\\\\\\\\\\\",\\\\\\\\n              borderRadius: \\\\\\\\\\\\\\\"100%\\\\\\\\\\\\\\\",\\\\\\\\n              height: \\\\\\\\\\\\\\\"20px\\\\\\\\\\\\\\\",\\\\\\\\n              width: \\\\\\\\\\\\\\\"20px\\\\\\\\\\\\\\\",\\\\\\\\n            }}\\\\\\\\n            onClick={() => State.update({ seekingFunding: true })}\\\\\\\\n          />\\\\\\\\n          Yes\\\\\\\\n        </label>\\\\\\\\n      </div>\\\\\\\\n      <div class=\\\\\\\\\\\\\\\"form-check form-check-inline\\\\\\\\\\\\\\\">\\\\\\\\n        <label class=\\\\\\\\\\\\\\\"form-check-label\\\\\\\\\\\\\\\">\\\\\\\\n          <button\\\\\\\\n            className=\\\\\\\\\\\\\\\"btn btn-light p-0\\\\\\\\\\\\\\\"\\\\\\\\n            style={{\\\\\\\\n              backgroundColor: !state.seekingFunding ? \\\\\\\\\\\\\\\"#0C7283\\\\\\\\\\\\\\\" : \\\\\\\\\\\\\\\"inherit\\\\\\\\\\\\\\\",\\\\\\\\n              color: \\\\\\\\\\\\\\\"#f3f3f3\\\\\\\\\\\\\\\",\\\\\\\\n              border: \\\\\\\\\\\\\\\"solid #D9D9D9\\\\\\\\\\\\\\\",\\\\\\\\n              borderRadius: \\\\\\\\\\\\\\\"100%\\\\\\\\\\\\\\\",\\\\\\\\n              height: \\\\\\\\\\\\\\\"20px\\\\\\\\\\\\\\\",\\\\\\\\n              width: \\\\\\\\\\\\\\\"20px\\\\\\\\\\\\\\\",\\\\\\\\n            }}\\\\\\\\n            onClick={() => State.update({ seekingFunding: false })}\\\\\\\\n          />\\\\\\\\n          No\\\\\\\\n        </label>\\\\\\\\n      </div>\\\\\\\\n    </div>\\\\\\\\n  </>\\\\\\\\n);\\\\\\\\n\\\\\\\\nconst fundraisingDiv = (\\\\\\\\n  <div class=\\\\\\\\\\\\\\\"d-flex flex-column mb-2\\\\\\\\\\\\\\\">\\\\\\\\n    <div className=\\\\\\\\\\\\\\\"col-lg-6 mb-2\\\\\\\\\\\\\\\">\\\\\\\\n      Currency\\\\\\\\n      <select\\\\\\\\n        onChange={(event) => State.update({ token: event.target.value })}\\\\\\\\n        class=\\\\\\\\\\\\\\\"form-select\\\\\\\\\\\\\\\"\\\\\\\\n        aria-label=\\\\\\\\\\\\\\\"Default select example\\\\\\\\\\\\\\\"\\\\\\\\n        value={state.token}\\\\\\\\n      >\\\\\\\\n        <option value=\\\\\\\\\\\\\\\"USDT\\\\\\\\\\\\\\\">USDT</option>\\\\\\\\n        <option value=\\\\\\\\\\\\\\\"NEAR\\\\\\\\\\\\\\\">NEAR</option>\\\\\\\\n        <option value=\\\\\\\\\\\\\\\"USDC\\\\\\\\\\\\\\\">USDC</option>\\\\\\\\n      </select>\\\\\\\\n    </div>\\\\\\\\n    <div className=\\\\\\\\\\\\\\\"col-lg-6 mb-2\\\\\\\\\\\\\\\">\\\\\\\\n      Requested amount\\\\\\\\n      <span class=\\\\\\\\\\\\\\\"text-muted fw-normal\\\\\\\\\\\\\\\">(Numbers Only)</span>\\\\\\\\n      <input\\\\\\\\n        data-testid=\\\\\\\\\\\\\\\"requested-amount-editor\\\\\\\\\\\\\\\"\\\\\\\\n        type=\\\\\\\\\\\\\\\"number\\\\\\\\\\\\\\\"\\\\\\\\n        value={parseInt(state.amount) > 0 ? state.amount : \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\"}\\\\\\\\n        min={0}\\\\\\\\n        onChange={(event) => {\\\\\\\\n          State.update({\\\\\\\\n            amount: Number(\\\\\\\\n              event.target.value.toString().replace(/e/g, \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\")\\\\\\\\n            ).toString(),\\\\\\\\n          });\\\\\\\\n        }}\\\\\\\\n      />\\\\\\\\n    </div>\\\\\\\\n    <div className=\\\\\\\\\\\\\\\"col-lg-6 mb-2\\\\\\\\\\\\\\\">\\\\\\\\n      <p class=\\\\\\\\\\\\\\\"mb-1\\\\\\\\\\\\\\\">\\\\\\\\n        Requested sponsor\\\\\\\\n        <span class=\\\\\\\\\\\\\\\"text-muted fw-normal\\\\\\\\\\\\\\\">(Optional)</span>\\\\\\\\n      </p>\\\\\\\\n      <p style={{ fontSize: \\\\\\\\\\\\\\\"13px\\\\\\\\\\\\\\\" }} class=\\\\\\\\\\\\\\\"m-0 text-muted fw-light\\\\\\\\\\\\\\\">\\\\\\\\n        If you are requesting funding from a specific sponsor, please enter\\\\\\\\n        their username.\\\\\\\\n      </p>\\\\\\\\n      <div class=\\\\\\\\\\\\\\\"input-group flex-nowrap\\\\\\\\\\\\\\\">\\\\\\\\n        <span class=\\\\\\\\\\\\\\\"input-group-text\\\\\\\\\\\\\\\" id=\\\\\\\\\\\\\\\"addon-wrapping\\\\\\\\\\\\\\\">\\\\\\\\n          @\\\\\\\\n        </span>\\\\\\\\n        <input\\\\\\\\n          type=\\\\\\\\\\\\\\\"text\\\\\\\\\\\\\\\"\\\\\\\\n          class=\\\\\\\\\\\\\\\"form-control\\\\\\\\\\\\\\\"\\\\\\\\n          placeholder=\\\\\\\\\\\\\\\"Enter username\\\\\\\\\\\\\\\"\\\\\\\\n          value={state.supervisor}\\\\\\\\n          onChange={(event) => State.update({ supervisor: event.target.value })}\\\\\\\\n        />\\\\\\\\n      </div>\\\\\\\\n    </div>\\\\\\\\n  </div>\\\\\\\\n);\\\\\\\\n\\\\\\\\nfunction generateDescription(text, amount, token, supervisor, seekingFunding) {\\\\\\\\n  const fundingText =\\\\\\\\n    amount > 0 && token ? `###### Requested amount: ${amount} ${token}\\\\\\\\\\\\\\\\n` : \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\";\\\\\\\\n  const supervisorText = supervisor\\\\\\\\n    ? `###### Requested sponsor: @${supervisor}\\\\\\\\\\\\\\\\n`\\\\\\\\n    : \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\";\\\\\\\\n  return seekingFunding ? `${fundingText}${supervisorText}${text}` : text;\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst [tab, setTab] = useState(\\\\\\\\\\\\\\\"editor\\\\\\\\\\\\\\\");\\\\\\\\n\\\\\\\\nconst renamedPostType =\\\\\\\\n  state.postType == \\\\\\\\\\\\\\\"Submission\\\\\\\\\\\\\\\" ? \\\\\\\\\\\\\\\"Solution\\\\\\\\\\\\\\\" : state.postType;\\\\\\\\n// Below there is a weird code with fields.includes(\\\\\\\\\\\\\\\"githubLink\\\\\\\\\\\\\\\") ternary operator.\\\\\\\\n// This is to hack around rendering bug of near.social.\\\\\\\\n\\\\\\\\nreturn (\\\\\\\\n  <div className=\\\\\\\\\\\\\\\"d-flex flex-column flex-grow-1 w-100\\\\\\\\\\\\\\\">\\\\\\\\n    <div className=\\\\\\\\\\\\\\\"mx-2 mx-md-5 mb-5\\\\\\\\\\\\\\\">\\\\\\\\n      {showPostPage ? (\\\\\\\\n        <Widget\\\\\\\\n          src={\\\\\\\\\\\\\\\"devhub.near/widget/devhub.entity.post.Post\\\\\\\\\\\\\\\"}\\\\\\\\n          props={{\\\\\\\\n            id: postId,\\\\\\\\n            expandable: true,\\\\\\\\n            defaultExpanded: false,\\\\\\\\n            isInList: true,\\\\\\\\n            isPreview: false,\\\\\\\\n            onDraftStateChange: props.onDraftStateChange,\\\\\\\\n            referral: postId,\\\\\\\\n            transactionHashes: props.transactionHashes,\\\\\\\\n          }}\\\\\\\\n        />\\\\\\\\n      ) : (\\\\\\\\n        <div className=\\\\\\\\\\\\\\\"card\\\\\\\\\\\\\\\">\\\\\\\\n          <div className=\\\\\\\\\\\\\\\"card-header\\\\\\\\\\\\\\\">\\\\\\\\n            <div>\\\\\\\\n              <ul class=\\\\\\\\\\\\\\\"nav nav-tabs\\\\\\\\\\\\\\\">\\\\\\\\n                <li class=\\\\\\\\\\\\\\\"nav-item\\\\\\\\\\\\\\\">\\\\\\\\n                  <button\\\\\\\\n                    class={`nav-link ${tab === \\\\\\\\\\\\\\\"editor\\\\\\\\\\\\\\\" ? \\\\\\\\\\\\\\\"active\\\\\\\\\\\\\\\" : \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\"}`}\\\\\\\\n                    onClick={() => setTab(\\\\\\\\\\\\\\\"editor\\\\\\\\\\\\\\\")}\\\\\\\\n                  >\\\\\\\\n                    Editor\\\\\\\\n                  </button>\\\\\\\\n                </li>\\\\\\\\n                <li class=\\\\\\\\\\\\\\\"nav-item\\\\\\\\\\\\\\\">\\\\\\\\n                  <button\\\\\\\\n                    class={`nav-link ${tab === \\\\\\\\\\\\\\\"preview\\\\\\\\\\\\\\\" ? \\\\\\\\\\\\\\\"active\\\\\\\\\\\\\\\" : \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\"}`}\\\\\\\\n                    onClick={() => setTab(\\\\\\\\\\\\\\\"preview\\\\\\\\\\\\\\\")}\\\\\\\\n                  >\\\\\\\\n                    Preview\\\\\\\\n                  </button>\\\\\\\\n                </li>\\\\\\\\n              </ul>\\\\\\\\n            </div>\\\\\\\\n            {!isCreatePostPage && tab === \\\\\\\\\\\\\\\"editor\\\\\\\\\\\\\\\" && (\\\\\\\\n              <div className=\\\\\\\\\\\\\\\"my-3\\\\\\\\\\\\\\\">\\\\\\\\n                {mode} {renamedPostType}\\\\\\\\n              </div>\\\\\\\\n            )}\\\\\\\\n            {tab === \\\\\\\\\\\\\\\"preview\\\\\\\\\\\\\\\" && <div className=\\\\\\\\\\\\\\\"my-3\\\\\\\\\\\\\\\">Post Preview</div>}\\\\\\\\n          </div>\\\\\\\\n          <div class=\\\\\\\\\\\\\\\"card-body\\\\\\\\\\\\\\\">\\\\\\\\n            {tab === \\\\\\\\\\\\\\\"editor\\\\\\\\\\\\\\\" && (\\\\\\\\n              <>\\\\\\\\n                {state.warning && (\\\\\\\\n                  <div\\\\\\\\n                    class=\\\\\\\\\\\\\\\"alert alert-warning alert-dismissible fade show\\\\\\\\\\\\\\\"\\\\\\\\n                    role=\\\\\\\\\\\\\\\"alert\\\\\\\\\\\\\\\"\\\\\\\\n                  >\\\\\\\\n                    {state.warning}\\\\\\\\n                    <button\\\\\\\\n                      type=\\\\\\\\\\\\\\\"button\\\\\\\\\\\\\\\"\\\\\\\\n                      class=\\\\\\\\\\\\\\\"btn-close\\\\\\\\\\\\\\\"\\\\\\\\n                      data-bs-dismiss=\\\\\\\\\\\\\\\"alert\\\\\\\\\\\\\\\"\\\\\\\\n                      aria-label=\\\\\\\\\\\\\\\"Close\\\\\\\\\\\\\\\"\\\\\\\\n                      onClick={() => State.update({ warning: \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\" })}\\\\\\\\n                    ></button>\\\\\\\\n                  </div>\\\\\\\\n                )}\\\\\\\\n                {isCreatePostPage && (\\\\\\\\n                  <div>\\\\\\\\n                    <p class=\\\\\\\\\\\\\\\"card-title fw-bold fs-6\\\\\\\\\\\\\\\">\\\\\\\\n                      What do you want to create?\\\\\\\\n                    </p>\\\\\\\\n                    <div class=\\\\\\\\\\\\\\\"d-flex flex-row gap-2\\\\\\\\\\\\\\\">\\\\\\\\n                      {Object.values(postTypeOptions).map((option) => (\\\\\\\\n                        <button\\\\\\\\n                          className={`btn btn-${\\\\\\\\n                            state.postType === option.name\\\\\\\\n                              ? \\\\\\\\\\\\\\\"primary\\\\\\\\\\\\\\\"\\\\\\\\n                              : \\\\\\\\\\\\\\\"outline-secondary\\\\\\\\\\\\\\\"\\\\\\\\n                          }`}\\\\\\\\n                          data-testid={`btn-${option.name.toLowerCase()}`}\\\\\\\\n                          key={option.name}\\\\\\\\n                          onClick={() => typeSwitch(option.name)}\\\\\\\\n                          style={\\\\\\\\n                            state.postType === option.name\\\\\\\\n                              ? {\\\\\\\\n                                  backgroundColor: \\\\\\\\\\\\\\\"#0C7283\\\\\\\\\\\\\\\",\\\\\\\\n                                  color: \\\\\\\\\\\\\\\"#f3f3f3\\\\\\\\\\\\\\\",\\\\\\\\n                                }\\\\\\\\n                              : null\\\\\\\\n                          }\\\\\\\\n                          type=\\\\\\\\\\\\\\\"button\\\\\\\\\\\\\\\"\\\\\\\\n                        >\\\\\\\\n                          <i className={`bi ${option.icon}`} />\\\\\\\\n                          <span>{option.name}</span>\\\\\\\\n                        </button>\\\\\\\\n                      ))}\\\\\\\\n                    </div>\\\\\\\\n                    <p class=\\\\\\\\\\\\\\\"text-muted w-75 my-1\\\\\\\\\\\\\\\">\\\\\\\\n                      {postTypeOptions[state.postType].description}\\\\\\\\n                    </p>\\\\\\\\n                  </div>\\\\\\\\n                )}\\\\\\\\n                {/* This statement around the githubLinkDiv creates a weird render bug\\\\\\\\n      where the title renders extra on state change. */}\\\\\\\\n                {state.displayFields.includes(\\\\\\\\\\\\\\\"githubLink\\\\\\\\\\\\\\\") ? (\\\\\\\\n                  <div className=\\\\\\\\\\\\\\\"row\\\\\\\\\\\\\\\">\\\\\\\\n                    {state.displayFields.includes(\\\\\\\\\\\\\\\"githubLink\\\\\\\\\\\\\\\") &&\\\\\\\\n                      githubLinkDiv}\\\\\\\\n                    {labelEditor}\\\\\\\\n                    {state.displayFields.includes(\\\\\\\\\\\\\\\"name\\\\\\\\\\\\\\\") && nameDiv}\\\\\\\\n                    {state.displayFields.includes(\\\\\\\\\\\\\\\"description\\\\\\\\\\\\\\\") &&\\\\\\\\n                      callDescriptionDiv()}\\\\\\\\n                  </div>\\\\\\\\n                ) : (\\\\\\\\n                  <div className=\\\\\\\\\\\\\\\"row\\\\\\\\\\\\\\\">\\\\\\\\n                    {labelEditor}\\\\\\\\n                    {state.displayFields.includes(\\\\\\\\\\\\\\\"name\\\\\\\\\\\\\\\") && nameDiv}\\\\\\\\n                    {state.displayFields.includes(\\\\\\\\\\\\\\\"amount\\\\\\\\\\\\\\\") && amountDiv}\\\\\\\\n                    {state.displayFields.includes(\\\\\\\\\\\\\\\"sponsorship_token\\\\\\\\\\\\\\\") &&\\\\\\\\n                      tokenDiv}\\\\\\\\n                    {state.displayFields.includes(\\\\\\\\\\\\\\\"supervisor\\\\\\\\\\\\\\\") &&\\\\\\\\n                      supervisorDiv}\\\\\\\\n                    {state.displayFields.includes(\\\\\\\\\\\\\\\"description\\\\\\\\\\\\\\\") &&\\\\\\\\n                      callDescriptionDiv()}\\\\\\\\n                    {state.displayFields.includes(\\\\\\\\\\\\\\\"fund_raising\\\\\\\\\\\\\\\") &&\\\\\\\\n                      isFundraisingDiv}\\\\\\\\n                    {state.seekingFunding &&\\\\\\\\n                      state.displayFields.includes(\\\\\\\\\\\\\\\"fund_raising\\\\\\\\\\\\\\\") &&\\\\\\\\n                      fundraisingDiv}\\\\\\\\n                  </div>\\\\\\\\n                )}\\\\\\\\n\\\\\\\\n                {disclaimer}\\\\\\\\n              </>\\\\\\\\n            )}\\\\\\\\n            {tab === \\\\\\\\\\\\\\\"preview\\\\\\\\\\\\\\\" && (\\\\\\\\n              <div className=\\\\\\\\\\\\\\\"mb-2\\\\\\\\\\\\\\\">\\\\\\\\n                <Widget\\\\\\\\n                  src=\\\\\\\\\\\\\\\"devhub.near/widget/devhub.entity.post.Post\\\\\\\\\\\\\\\"\\\\\\\\n                  props={{\\\\\\\\n                    isPreview: true,\\\\\\\\n                    id: 0, // irrelevant\\\\\\\\n                    post: {\\\\\\\\n                      author_id: state.author_id,\\\\\\\\n                      likes: [],\\\\\\\\n                      snapshot: {\\\\\\\\n                        editor_id: state.editor_id,\\\\\\\\n                        labels: state.labelStrings,\\\\\\\\n                        post_type: postType,\\\\\\\\n                        name: state.name,\\\\\\\\n                        description:\\\\\\\\n                          state.postType == \\\\\\\\\\\\\\\"Solution\\\\\\\\\\\\\\\"\\\\\\\\n                            ? generateDescription(\\\\\\\\n                                state.description,\\\\\\\\n                                state.amount,\\\\\\\\n                                state.token,\\\\\\\\n                                state.supervisor,\\\\\\\\n                                state.seekingFunding\\\\\\\\n                              )\\\\\\\\n                            : state.description,\\\\\\\\n                        amount: state.amount,\\\\\\\\n                        sponsorship_token: state.token,\\\\\\\\n                        supervisor: state.supervisor,\\\\\\\\n                        github_link: state.githubLink,\\\\\\\\n                      },\\\\\\\\n                    },\\\\\\\\n                  }}\\\\\\\\n                />\\\\\\\\n              </div>\\\\\\\\n            )}\\\\\\\\n            <button\\\\\\\\n              data-testid=\\\\\\\\\\\\\\\"submit-create-post\\\\\\\\\\\\\\\"\\\\\\\\n              style={{\\\\\\\\n                width: \\\\\\\\\\\\\\\"7rem\\\\\\\\\\\\\\\",\\\\\\\\n                backgroundColor: \\\\\\\\\\\\\\\"#0C7283\\\\\\\\\\\\\\\",\\\\\\\\n                color: \\\\\\\\\\\\\\\"#f3f3f3\\\\\\\\\\\\\\\",\\\\\\\\n              }}\\\\\\\\n              disabled={\\\\\\\\n                (state.seekingFunding && (!state.amount || state.amount < 1)) ||\\\\\\\\n                (isCreatePostPage &&\\\\\\\\n                  (state.name === \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\" || state.description === \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\"))\\\\\\\\n              }\\\\\\\\n              className=\\\\\\\\\\\\\\\"btn btn-light mb-2 p-3\\\\\\\\\\\\\\\"\\\\\\\\n              onClick={onSubmit}\\\\\\\\n            >\\\\\\\\n              Submit\\\\\\\\n            </button>\\\\\\\\n            {!isCreatePostPage && (\\\\\\\\n              <button\\\\\\\\n                style={{\\\\\\\\n                  width: \\\\\\\\\\\\\\\"7rem\\\\\\\\\\\\\\\",\\\\\\\\n                  backgroundColor: \\\\\\\\\\\\\\\"#fff\\\\\\\\\\\\\\\",\\\\\\\\n                  color: \\\\\\\\\\\\\\\"#000\\\\\\\\\\\\\\\",\\\\\\\\n                }}\\\\\\\\n                className=\\\\\\\\\\\\\\\"btn btn-light mb-2 p-3\\\\\\\\\\\\\\\"\\\\\\\\n                onClick={() => props.setEditorState(false)}\\\\\\\\n              >\\\\\\\\n                Cancel\\\\\\\\n              </button>\\\\\\\\n            )}\\\\\\\\n          </div>\\\\\\\\n        </div>\\\\\\\\n      )}\\\\\\\\n    </div>\\\\\\\\n  </div>\\\\\\\\n);\\\\\\\\n\"}, \"devhub.feature.post-search.by-tag\": {\"\": \"const { getAllLabels } = VM.require(\\\\\\\\n  \\\\\\\\\\\\\\\"devhub.near/widget/core.adapter.devhub-contract\\\\\\\\\\\\\\\"\\\\\\\\n);\\\\\\\\n\\\\\\\\nif (!getAllLabels) {\\\\\\\\n  return <p>Loading modules...</p>;\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst selectedTags = props.tag ? [{ name: props.tag }] : [];\\\\\\\\n\\\\\\\\nconst tags = getAllLabels();\\\\\\\\n\\\\\\\\nif (tags === null) {\\\\\\\\n  return <div>Loading ...</div>;\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst onChange = (selectedTags) =>\\\\\\\\n  props.onTagSearch?.(selectedTags[0]?.name ?? \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\");\\\\\\\\n\\\\\\\\nreturn (\\\\\\\\n  <Typeahead\\\\\\\\n    clearButton\\\\\\\\n    id=\\\\\\\\\\\\\\\"basic-typeahead-single\\\\\\\\\\\\\\\"\\\\\\\\n    labelKey=\\\\\\\\\\\\\\\"name\\\\\\\\\\\\\\\"\\\\\\\\n    options={tags.map((tag) => ({ name: tag }))}\\\\\\\\n    placeholder=\\\\\\\\\\\\\\\"Search by tag\\\\\\\\\\\\\\\"\\\\\\\\n    selected={selectedTags}\\\\\\\\n    {...{ onChange }}\\\\\\\\n  />\\\\\\\\n);\\\\\\\\n\"}, \"devhub.entity.addon.kanban.post_board\": {\"\": \"const { getPostsByLabel } = VM.require(\\\\\\\\n  \\\\\\\\\\\\\\\"devhub.near/widget/core.adapter.devhub-contract\\\\\\\\\\\\\\\"\\\\\\\\n);\\\\\\\\nconst { getPost } = VM.require(\\\\\\\\n  \\\\\\\\\\\\\\\"devhub.near/widget/core.adapter.devhub-contract\\\\\\\\\\\\\\\"\\\\\\\\n);\\\\\\\\ngetPost || (getPost = () => {});\\\\\\\\ngetPostsByLabel || (getPostsByLabel = () => {});\\\\\\\\n\\\\\\\\nconst postTagsToIdSet = (tags) => {\\\\\\\\n  return new Set(\\\\\\\\n    (tags ?? [])?.map((tag) => getPostsByLabel({ label: tag }) ?? []).flat(1)\\\\\\\\n  );\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst sortByValues = {\\\\\\\\n  descendingAmount: \\\\\\\\\\\\\\\"descending-amount\\\\\\\\\\\\\\\",\\\\\\\\n  ascendingAmount: \\\\\\\\\\\\\\\"ascending-amount\\\\\\\\\\\\\\\",\\\\\\\\n  descendingDate: \\\\\\\\\\\\\\\"descending-date\\\\\\\\\\\\\\\",\\\\\\\\n  ascendingDate: \\\\\\\\\\\\\\\"ascending-date\\\\\\\\\\\\\\\",\\\\\\\\n  ascendingAuthor: \\\\\\\\\\\\\\\"ascending-author\\\\\\\\\\\\\\\",\\\\\\\\n  descendingAuthor: \\\\\\\\\\\\\\\"descending-author\\\\\\\\\\\\\\\",\\\\\\\\n  ascendingSponsor: \\\\\\\\\\\\\\\"ascending-sponsor\\\\\\\\\\\\\\\",\\\\\\\\n  descendingSponsor: \\\\\\\\\\\\\\\"descending-sponsor\\\\\\\\\\\\\\\",\\\\\\\\n  descendingLikes: \\\\\\\\\\\\\\\"descending-likes\\\\\\\\\\\\\\\",\\\\\\\\n  ascendingLikes: \\\\\\\\\\\\\\\"ascending-likes\\\\\\\\\\\\\\\",\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst configToColumnData = ({ columns, tags }) =>\\\\\\\\n  Object.entries(columns).reduce((registry, [columnId, column]) => {\\\\\\\\n    const postIds = (getPostsByLabel({ label: column.tag }) ?? []).reverse();\\\\\\\\n    return {\\\\\\\\n      ...registry,\\\\\\\\n      [columnId]: {\\\\\\\\n        ...column,\\\\\\\\n        postIds: postIds,\\\\\\\\n      },\\\\\\\\n    };\\\\\\\\n  }, {});\\\\\\\\n\\\\\\\\nconst basicAlphabeticalComparison = (a, b) => {\\\\\\\\n  if (a < b) return -1;\\\\\\\\n  if (a > b) return 1;\\\\\\\\n  return 0;\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst KanbanPostBoard = ({ metadata, payload }) => {\\\\\\\\n  const boardData = Object.entries(configToColumnData(payload) ?? {});\\\\\\\\n\\\\\\\\n  const view = boardData.map(([columnId, column]) => {\\\\\\\\n    const data = [];\\\\\\\\n    column.postIds?.map((postId) => {\\\\\\\\n      if (postId) {\\\\\\\\n        const postData = getPost({\\\\\\\\n          post_id: postId ? parseInt(postId) : 0,\\\\\\\\n        });\\\\\\\\n        data.push(postData);\\\\\\\\n      }\\\\\\\\n    });\\\\\\\\n\\\\\\\\n    // sort data by selected sorting mechanism\\\\\\\\n    switch (metadata.ticket.sortBy) {\\\\\\\\n      case sortByValues.descendingAmount:\\\\\\\\n        data.sort((a, b) => b?.snapshot?.amount - a?.snapshot?.amount);\\\\\\\\n        break;\\\\\\\\n      case sortByValues.ascendingAmount:\\\\\\\\n        data.sort((a, b) => a?.snapshot?.amount - b?.snapshot?.amount);\\\\\\\\n        break;\\\\\\\\n      case sortByValues.descendingDate:\\\\\\\\n        data.sort(\\\\\\\\n          (a, b) =>\\\\\\\\n            parseInt(b?.snapshot?.timestamp) - parseInt(a?.snapshot?.timestamp)\\\\\\\\n        );\\\\\\\\n        break;\\\\\\\\n      case sortByValues.ascendingDate:\\\\\\\\n        data.sort(\\\\\\\\n          (a, b) =>\\\\\\\\n            parseInt(a?.snapshot?.timestamp) - parseInt(b?.snapshot?.timestamp)\\\\\\\\n        );\\\\\\\\n        break;\\\\\\\\n      case sortByValues.ascendingAuthor:\\\\\\\\n        data.sort((a, b) =>\\\\\\\\n          basicAlphabeticalComparison(a.author_id, b.author_id)\\\\\\\\n        );\\\\\\\\n        break;\\\\\\\\n      case sortByValues.descendingAuthor:\\\\\\\\n        data.sort((a, b) =>\\\\\\\\n          basicAlphabeticalComparison(b.author_id, a.author_id)\\\\\\\\n        );\\\\\\\\n        break;\\\\\\\\n      case sortByValues.ascendingSponsor:\\\\\\\\n        data.sort((a, b) =>\\\\\\\\n          basicAlphabeticalComparison(\\\\\\\\n            a?.snapshot?.requested_sponsor || a?.snapshot?.supervisor,\\\\\\\\n            b?.snapshot?.requested_sponsor || b?.snapshot?.supervisor\\\\\\\\n          )\\\\\\\\n        );\\\\\\\\n        break;\\\\\\\\n      case sortByValues.descendingSponsor:\\\\\\\\n        data.sort((a, b) =>\\\\\\\\n          basicAlphabeticalComparison(\\\\\\\\n            b?.snapshot?.requested_sponsor || b?.snapshot?.supervisor,\\\\\\\\n            a?.snapshot?.requested_sponsor || a?.snapshot?.supervisor\\\\\\\\n          )\\\\\\\\n        );\\\\\\\\n        break;\\\\\\\\n      case sortByValues.descendingLikes:\\\\\\\\n        data.sort((a, b) => b.likes.length - a.likes.length);\\\\\\\\n        break;\\\\\\\\n      case sortByValues.ascendingLikes:\\\\\\\\n        data.sort((a, b) => a.likes.length - b.likes.length);\\\\\\\\n        break;\\\\\\\\n      default:\\\\\\\\n        data;\\\\\\\\n        break;\\\\\\\\n    }\\\\\\\\n\\\\\\\\n    return (\\\\\\\\n      <div\\\\\\\\n        className=\\\\\\\\\\\\\\\"col-3\\\\\\\\\\\\\\\"\\\\\\\\n        style={{ minWidth: \\\\\\\\\\\\\\\"300px\\\\\\\\\\\\\\\" }}\\\\\\\\n        key={`column-${columnId}-view`}\\\\\\\\n      >\\\\\\\\n        <div className=\\\\\\\\\\\\\\\"card rounded-4\\\\\\\\\\\\\\\">\\\\\\\\n          <div\\\\\\\\n            className={[\\\\\\\\n              \\\\\\\\\\\\\\\"card-body d-flex flex-column gap-3 p-2\\\\\\\\\\\\\\\",\\\\\\\\n              \\\\\\\\\\\\\\\"border border-1 rounded-4\\\\\\\\\\\\\\\",\\\\\\\\n            ].join(\\\\\\\\\\\\\\\" \\\\\\\\\\\\\\\")}\\\\\\\\n            style={{ height: \\\\\\\\\\\\\\\"75vh\\\\\\\\\\\\\\\" }}\\\\\\\\n          >\\\\\\\\n            <span className=\\\\\\\\\\\\\\\"d-flex flex-column py-1\\\\\\\\\\\\\\\">\\\\\\\\n              <h6 className=\\\\\\\\\\\\\\\"card-title h6 d-flex align-items-center gap-2 m-0\\\\\\\\\\\\\\\">\\\\\\\\n                {column.title}\\\\\\\\n\\\\\\\\n                <span className=\\\\\\\\\\\\\\\"badge rounded-pill bg-secondary\\\\\\\\\\\\\\\">\\\\\\\\n                  {column.postIds.length}\\\\\\\\n                </span>\\\\\\\\n              </h6>\\\\\\\\n\\\\\\\\n              <p class=\\\\\\\\\\\\\\\"text-secondary m-0\\\\\\\\\\\\\\\">{column.description}</p>\\\\\\\\n            </span>\\\\\\\\n\\\\\\\\n            <div\\\\\\\\n              class=\\\\\\\\\\\\\\\"d-flex flex-column gap-2\\\\\\\\\\\\\\\"\\\\\\\\n              style={{ overflow: \\\\\\\\\\\\\\\"scroll\\\\\\\\\\\\\\\" }}\\\\\\\\n            >\\\\\\\\n              {data.length === column.postIds.length &&\\\\\\\\n                data.map((postData) => (\\\\\\\\n                  <Widget\\\\\\\\n                    src={`devhub.near/widget/devhub.entity.addon.${metadata.ticket.type}`}\\\\\\\\n                    props={{\\\\\\\\n                      metadata: { id: postData.postId, ...metadata.ticket },\\\\\\\\n\\\\\\\\n                      data: postData,\\\\\\\\n                    }}\\\\\\\\n                    key={postData.postId}\\\\\\\\n                  />\\\\\\\\n                ))}\\\\\\\\n            </div>\\\\\\\\n          </div>\\\\\\\\n        </div>\\\\\\\\n      </div>\\\\\\\\n    );\\\\\\\\n  });\\\\\\\\n\\\\\\\\n  return (\\\\\\\\n    <div>\\\\\\\\n      <div className=\\\\\\\\\\\\\\\"d-flex flex-column align-items-center gap-2 pb-4 w-100\\\\\\\\\\\\\\\">\\\\\\\\n        <h5 className=\\\\\\\\\\\\\\\"h4 d-inline-flex gap-2 m-0\\\\\\\\\\\\\\\">\\\\\\\\n          <span>{metadata?.title}</span>\\\\\\\\n        </h5>\\\\\\\\n\\\\\\\\n        <p className=\\\\\\\\\\\\\\\"h6 m-0 py-1 text-secondary text-center\\\\\\\\\\\\\\\">\\\\\\\\n          {metadata?.description}\\\\\\\\n        </p>\\\\\\\\n      </div>\\\\\\\\n      <div className=\\\\\\\\\\\\\\\"d-flex gap-3 w-100\\\\\\\\\\\\\\\" style={{ overflow: \\\\\\\\\\\\\\\"scroll\\\\\\\\\\\\\\\" }}>\\\\\\\\n        <div\\\\\\\\n          className={[\\\\\\\\n            \\\\\\\\\\\\\\\"d-flex align-items-center justify-content-center w-100 text-black-50 opacity-50\\\\\\\\\\\\\\\",\\\\\\\\n            columns.length === 0 ? \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\" : \\\\\\\\\\\\\\\"d-none\\\\\\\\\\\\\\\",\\\\\\\\n          ].join(\\\\\\\\\\\\\\\" \\\\\\\\\\\\\\\")}\\\\\\\\n          style={{ height: 384 }}\\\\\\\\n        >\\\\\\\\n          No columns were created so far.\\\\\\\\n        </div>\\\\\\\\n        <span className={\\\\\\\\\\\\\\\"d-flex gap-3 w-100\\\\\\\\\\\\\\\"}>{view}</span>\\\\\\\\n      </div>\\\\\\\\n    </div>\\\\\\\\n  );\\\\\\\\n};\\\\\\\\n\\\\\\\\nreturn KanbanPostBoard(props);\\\\\\\\n\"}, \"devhub.entity.addon.kanban.post_ticket\": {\"\": \"const columnId = props.columnId;\\\\\\\\n\\\\\\\\nconst { href } = VM.require(\\\\\\\\\\\\\\\"devhub.near/widget/core.lib.url\\\\\\\\\\\\\\\");\\\\\\\\nhref || (href = () => {});\\\\\\\\n\\\\\\\\nconst AttractableDiv = styled.div`\\\\\\\\n  box-shadow: 0 0.125rem 0.25rem rgba(0, 0, 0, 0.075) !important;\\\\\\\\n  transition: box-shadow 0.6s;\\\\\\\\n\\\\\\\\n  &:hover {\\\\\\\\n    box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.15) !important;\\\\\\\\n  }\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst iconsByPostType = {\\\\\\\\n  Idea: \\\\\\\\\\\\\\\"bi-lightbulb\\\\\\\\\\\\\\\",\\\\\\\\n  Comment: \\\\\\\\\\\\\\\"bi-chat\\\\\\\\\\\\\\\",\\\\\\\\n  Solution: \\\\\\\\\\\\\\\"bi-rocket\\\\\\\\\\\\\\\",\\\\\\\\n  Attestation: \\\\\\\\\\\\\\\"bi-check-circle\\\\\\\\\\\\\\\",\\\\\\\\n  Sponsorship: \\\\\\\\\\\\\\\"bi-cash-coin\\\\\\\\\\\\\\\",\\\\\\\\n};\\\\\\\\n\\\\\\\\nfunction getToken(token) {\\\\\\\\n  let amountUnit = \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\";\\\\\\\\n  if (typeof token === \\\\\\\\\\\\\\\"string\\\\\\\\\\\\\\\") {\\\\\\\\n    amountUnit = token;\\\\\\\\n  } else if (typeof token === \\\\\\\\\\\\\\\"object\\\\\\\\\\\\\\\") {\\\\\\\\n    const address = Object.values(token)?.[0]?.address ?? \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\";\\\\\\\\n    const ftMetadata = Near.view(address, \\\\\\\\\\\\\\\"ft_metadata\\\\\\\\\\\\\\\", {});\\\\\\\\n    if (ftMetadata !== null) {\\\\\\\\n      amountUnit = ftMetadata?.symbol;\\\\\\\\n    }\\\\\\\\n  }\\\\\\\\n  return amountUnit;\\\\\\\\n}\\\\\\\\nconst KanbanPostTicket = ({ metadata, data }) => {\\\\\\\\n  if (!data) return <div>Loading ...</div>;\\\\\\\\n\\\\\\\\n  const {\\\\\\\\n    post_type,\\\\\\\\n    name,\\\\\\\\n    description,\\\\\\\\n    labels: tags,\\\\\\\\n    requested_sponsorship_amount,\\\\\\\\n    requested_sponsorship_token,\\\\\\\\n    requested_sponsor,\\\\\\\\n    amount,\\\\\\\\n    sponsorship_token,\\\\\\\\n    supervisor,\\\\\\\\n  } = data.snapshot;\\\\\\\\n\\\\\\\\n  const features = {\\\\\\\\n    ...metadata.features,\\\\\\\\n    approved_sponsorship_value:\\\\\\\\n      post_type === \\\\\\\\\\\\\\\"Sponsorship\\\\\\\\\\\\\\\" &&\\\\\\\\n      metadata.features.approved_sponsorship_value,\\\\\\\\n    sponsorship_supervisor:\\\\\\\\n      post_type === \\\\\\\\\\\\\\\"Sponsorship\\\\\\\\\\\\\\\" && metadata.features.sponsorship_supervisor,\\\\\\\\n  };\\\\\\\\n\\\\\\\\n  const footer = (\\\\\\\\n    <div className=\\\\\\\\\\\\\\\"card-header d-flex justify-content-between gap-3 align-items-center\\\\\\\\\\\\\\\">\\\\\\\\n      {features.like_count && (\\\\\\\\n        <div className=\\\\\\\\\\\\\\\"d-flex gap-2 align-items-center\\\\\\\\\\\\\\\">\\\\\\\\n          <Widget\\\\\\\\n            src={`devhub.near/widget/devhub.components.atom.Icon`}\\\\\\\\n            props={{\\\\\\\\n              type: \\\\\\\\\\\\\\\"bootstrap_icon\\\\\\\\\\\\\\\",\\\\\\\\n              variant: \\\\\\\\\\\\\\\"bi-heart-fill\\\\\\\\\\\\\\\",\\\\\\\\n            }}\\\\\\\\n          />\\\\\\\\n          {data.likes.length}\\\\\\\\n        </div>\\\\\\\\n      )}\\\\\\\\n      <div className=\\\\\\\\\\\\\\\"d-flex justify-content-end w-100\\\\\\\\\\\\\\\">\\\\\\\\n        <a\\\\\\\\n          className=\\\\\\\\\\\\\\\"card-link\\\\\\\\\\\\\\\"\\\\\\\\n          href={href(\\\\\\\\\\\\\\\"Post\\\\\\\\\\\\\\\", { id: data.id })}\\\\\\\\n          role=\\\\\\\\\\\\\\\"button\\\\\\\\\\\\\\\"\\\\\\\\n          target=\\\\\\\\\\\\\\\"_blank\\\\\\\\\\\\\\\"\\\\\\\\n          title=\\\\\\\\\\\\\\\"Open in new tab\\\\\\\\\\\\\\\"\\\\\\\\n        >\\\\\\\\n          <i className=\\\\\\\\\\\\\\\"bi bi-share\\\\\\\\\\\\\\\" />\\\\\\\\n        </a>\\\\\\\\n      </div>\\\\\\\\n    </div>\\\\\\\\n  );\\\\\\\\n\\\\\\\\n  const titleArea = (\\\\\\\\n    <span>\\\\\\\\n      {features.type ? (\\\\\\\\n        <i className={`bi ${iconsByPostType[post_type]}`} />\\\\\\\\n      ) : null}\\\\\\\\n      <span>{name}</span>\\\\\\\\n    </span>\\\\\\\\n  );\\\\\\\\n\\\\\\\\n  const sponsorshipValue = (\\\\\\\\n    <span className=\\\\\\\\\\\\\\\"d-flex flex-nowrap gap-1\\\\\\\\\\\\\\\">\\\\\\\\n      <span>{requested_sponsorship_amount ?? amount}</span>\\\\\\\\n      <span>{requested_sponsorship_token ?? getToken(sponsorship_token)}</span>\\\\\\\\n    </span>\\\\\\\\n  );\\\\\\\\n\\\\\\\\n  const requestedSponsor = (\\\\\\\\n    <Widget\\\\\\\\n      className=\\\\\\\\\\\\\\\"flex-wrap\\\\\\\\\\\\\\\"\\\\\\\\n      src={`neardevgov.near/widget/ProfileLine`}\\\\\\\\n      props={{\\\\\\\\n        accountId: requested_sponsor ?? supervisor,\\\\\\\\n        hideAccountId: true,\\\\\\\\n        tooltip: true,\\\\\\\\n      }}\\\\\\\\n    />\\\\\\\\n  );\\\\\\\\n\\\\\\\\n  const descriptionArea =\\\\\\\\n    post_type === \\\\\\\\\\\\\\\"Comment\\\\\\\\\\\\\\\" ? (\\\\\\\\n      <div\\\\\\\\n        style={{ maxHeight: \\\\\\\\\\\\\\\"6em\\\\\\\\\\\\\\\", wordBreak: \\\\\\\\\\\\\\\"break-all\\\\\\\\\\\\\\\", overflow: \\\\\\\\\\\\\\\"hidden\\\\\\\\\\\\\\\" }}\\\\\\\\n      >\\\\\\\\n        <Markdown className=\\\\\\\\\\\\\\\"card-text\\\\\\\\\\\\\\\" text={description} />\\\\\\\\n      </div>\\\\\\\\n    ) : null;\\\\\\\\n\\\\\\\\n  const tagList =\\\\\\\\n    Array.isArray(tags) && features.tags ? (\\\\\\\\n      <div className=\\\\\\\\\\\\\\\"d-flex flex-wrap gap-2 m-0\\\\\\\\\\\\\\\">\\\\\\\\n        {(tags ?? []).map((tag) => (\\\\\\\\n          <a href={href(\\\\\\\\\\\\\\\"Feed\\\\\\\\\\\\\\\", { tag })} key={tag}>\\\\\\\\n            <span className=\\\\\\\\\\\\\\\"badge text-bg-primary me-1\\\\\\\\\\\\\\\">{tag}</span>\\\\\\\\n          </a>\\\\\\\\n        ))}\\\\\\\\n      </div>\\\\\\\\n    ) : null;\\\\\\\\n\\\\\\\\n  const showFunding = features.approved_sponsorship_value;\\\\\\\\n  const showSponsor = features.sponsorship_supervisor;\\\\\\\\n\\\\\\\\n  return (\\\\\\\\n    <AttractableDiv className=\\\\\\\\\\\\\\\"card\\\\\\\\\\\\\\\">\\\\\\\\n      <div\\\\\\\\n        className=\\\\\\\\\\\\\\\"card-body d-flex flex-column gap-2\\\\\\\\\\\\\\\"\\\\\\\\n        style={{ fontSize: 14 }}\\\\\\\\n      >\\\\\\\\n        <div className=\\\\\\\\\\\\\\\"d-flex justify-content-between gap-2\\\\\\\\\\\\\\\">\\\\\\\\n          <span className=\\\\\\\\\\\\\\\"card-text gap-2\\\\\\\\\\\\\\\">{titleArea}</span>\\\\\\\\n          {features.author && (\\\\\\\\n            <a\\\\\\\\n              href={`https://near.org/mob.near/widget/ProfilePage?accountId=${data.author_id}`}\\\\\\\\n              s\\\\\\\\n              style={{ minWidth: 20 }}\\\\\\\\n            >\\\\\\\\n              <Widget\\\\\\\\n                src=\\\\\\\\\\\\\\\"mob.near/widget/ProfileImage\\\\\\\\\\\\\\\"\\\\\\\\n                props={{\\\\\\\\n                  metadata,\\\\\\\\n                  accountId: data.author_id,\\\\\\\\n                  widgetName,\\\\\\\\n                  style: { height: \\\\\\\\\\\\\\\"1.8em\\\\\\\\\\\\\\\", width: \\\\\\\\\\\\\\\"1.8em\\\\\\\\\\\\\\\", minWidth: \\\\\\\\\\\\\\\"1.8em\\\\\\\\\\\\\\\" },\\\\\\\\n                }}\\\\\\\\n              />\\\\\\\\n            </a>\\\\\\\\n          )}\\\\\\\\n        </div>\\\\\\\\n        {descriptionArea}\\\\\\\\n        {showFunding && (\\\\\\\\n          <span className=\\\\\\\\\\\\\\\"d-flex flex-wrap gap-2\\\\\\\\\\\\\\\">\\\\\\\\n            <span>Amount:</span>\\\\\\\\n            {sponsorshipValue}\\\\\\\\n          </span>\\\\\\\\n        )}\\\\\\\\n        {showSponsor && (\\\\\\\\n          <div className=\\\\\\\\\\\\\\\"d-flex flex-wrap gap-2\\\\\\\\\\\\\\\">\\\\\\\\n            <span>{`${\\\\\\\\n              post_type === \\\\\\\\\\\\\\\"Solution\\\\\\\\\\\\\\\" ? \\\\\\\\\\\\\\\"Sponsor\\\\\\\\\\\\\\\" : \\\\\\\\\\\\\\\"Supervisor\\\\\\\\\\\\\\\"\\\\\\\\n            }:`}</span>{\\\\\\\\\\\\\\\" \\\\\\\\\\\\\\\"}\\\\\\\\n            {requestedSponsor}{\\\\\\\\\\\\\\\" \\\\\\\\\\\\\\\"}\\\\\\\\n          </div>\\\\\\\\n        )}\\\\\\\\n        {tagList}\\\\\\\\n      </div>\\\\\\\\n      {footer}\\\\\\\\n    </AttractableDiv>\\\\\\\\n  );\\\\\\\\n};\\\\\\\\n\\\\\\\\nreturn KanbanPostTicket(props);\\\\\\\\n\"}, \"devhub.entity.addon.github.kanban_board\": {\"\": \"const { DataRequest } = VM.require(\\\\\\\\n  \\\\\\\\\\\\\\\"devhub.near/widget/core.lib.data-request\\\\\\\\\\\\\\\"\\\\\\\\n);\\\\\\\\nDataRequest || (DataRequest = { paginated: () => {} });\\\\\\\\n\\\\\\\\nconst dataToColumns = (data, columns) =>\\\\\\\\n  Object.values(columns).reduce(\\\\\\\\n    (registry, column) => ({\\\\\\\\n      ...registry,\\\\\\\\n      [column.id]:\\\\\\\\n        column.labelSearchTerms.length > 0\\\\\\\\n          ? [\\\\\\\\n              ...(registry[column.id] ?? []),\\\\\\\\n              ...data.filter((ticket) =>\\\\\\\\n                column.labelSearchTerms.every((searchTerm) =>\\\\\\\\n                  searchTerm.length > 0\\\\\\\\n                    ? ticket.labels.some((label) =>\\\\\\\\n                        label.name\\\\\\\\n                          .toLowerCase()\\\\\\\\n                          .includes(searchTerm.toLowerCase())\\\\\\\\n                      )\\\\\\\\n                    : false\\\\\\\\n                )\\\\\\\\n              ),\\\\\\\\n            ]\\\\\\\\n          : [],\\\\\\\\n    }),\\\\\\\\n\\\\\\\\n    {}\\\\\\\\n  );\\\\\\\\n\\\\\\\\nconst withType = (type) => (data) => ({ ...data, type });\\\\\\\\n\\\\\\\\nconst GithubKanbanBoard = ({\\\\\\\\n  columns,\\\\\\\\n  title,\\\\\\\\n  description,\\\\\\\\n  repoURL,\\\\\\\\n  ticketState,\\\\\\\\n  dataTypesIncluded,\\\\\\\\n  metadata,\\\\\\\\n}) => {\\\\\\\\n  const ticketStateFilter =\\\\\\\\n    ticketState === \\\\\\\\\\\\\\\"open\\\\\\\\\\\\\\\" || ticketState === \\\\\\\\\\\\\\\"closed\\\\\\\\\\\\\\\" || ticketState === \\\\\\\\\\\\\\\"all\\\\\\\\\\\\\\\"\\\\\\\\n      ? ticketState\\\\\\\\n      : \\\\\\\\\\\\\\\"all\\\\\\\\\\\\\\\";\\\\\\\\n\\\\\\\\n  State.init({\\\\\\\\n    ticketsByColumn: {},\\\\\\\\n  });\\\\\\\\n\\\\\\\\n  if (repoURL) {\\\\\\\\n    const pullRequests = dataTypesIncluded.PullRequest\\\\\\\\n      ? DataRequest?.paginated(\\\\\\\\n          (pageNumber) =>\\\\\\\\n            useCache(\\\\\\\\n              () =>\\\\\\\\n                asyncFetch(\\\\\\\\n                  `https://api.github.com/repos/${repoURL\\\\\\\\n                    .split(\\\\\\\\\\\\\\\"/\\\\\\\\\\\\\\\")\\\\\\\\n                    .slice(-2)\\\\\\\\n                    .concat([\\\\\\\\\\\\\\\"pulls\\\\\\\\\\\\\\\"])\\\\\\\\n                    .join(\\\\\\\\n                      \\\\\\\\\\\\\\\"/\\\\\\\\\\\\\\\"\\\\\\\\n                    )}?state=${ticketStateFilter}&per_page=100&page=${pageNumber}`\\\\\\\\n                ).then((res) => res?.body),\\\\\\\\n              repoURL + pageNumber,\\\\\\\\n              { subscribe: false }\\\\\\\\n            ),\\\\\\\\n          { startWith: 1 }\\\\\\\\n        )\\\\\\\\n      : [];\\\\\\\\n\\\\\\\\n    const issues = dataTypesIncluded.Issue\\\\\\\\n      ? (\\\\\\\\n          DataRequest?.paginated(\\\\\\\\n            (pageNumber) =>\\\\\\\\n              useCache(\\\\\\\\n                () =>\\\\\\\\n                  asyncFetch(\\\\\\\\n                    `https://api.github.com/repos/${repoURL\\\\\\\\n                      .split(\\\\\\\\\\\\\\\"/\\\\\\\\\\\\\\\")\\\\\\\\n                      .slice(-2)\\\\\\\\n                      .concat([\\\\\\\\\\\\\\\"issues\\\\\\\\\\\\\\\"])\\\\\\\\n                      .join(\\\\\\\\n                        \\\\\\\\\\\\\\\"/\\\\\\\\\\\\\\\"\\\\\\\\n                      )}?state=${ticketStateFilter}&per_page=100&page=${pageNumber}`\\\\\\\\n                  ).then((res) => res?.body),\\\\\\\\n                repoURL + pageNumber,\\\\\\\\n                { subscribe: false }\\\\\\\\n              ),\\\\\\\\n            { startWith: 1 }\\\\\\\\n          ) ?? []\\\\\\\\n        )?.map(withType(\\\\\\\\\\\\\\\"Issue\\\\\\\\\\\\\\\"))\\\\\\\\n      : [];\\\\\\\\n\\\\\\\\n    State.update((lastKnownState) => ({\\\\\\\\n      ...lastKnownState,\\\\\\\\n      ticketsByColumn: dataToColumns(\\\\\\\\n        [...(issues ?? []), ...(pullRequests ?? [])],\\\\\\\\n        columns\\\\\\\\n      ),\\\\\\\\n    }));\\\\\\\\n  }\\\\\\\\n\\\\\\\\n  return (\\\\\\\\n    <div>\\\\\\\\n      <div className=\\\\\\\\\\\\\\\"d-flex flex-column align-items-center gap-2 pb-4\\\\\\\\\\\\\\\">\\\\\\\\n        <h5 className=\\\\\\\\\\\\\\\"h5 d-inline-flex gap-2 m-0\\\\\\\\\\\\\\\">\\\\\\\\n          <span>{title}</span>\\\\\\\\n        </h5>\\\\\\\\n\\\\\\\\n        <p className=\\\\\\\\\\\\\\\"m-0 py-1 text-secondary text-center\\\\\\\\\\\\\\\">{description}</p>\\\\\\\\n      </div>\\\\\\\\n\\\\\\\\n      <div className=\\\\\\\\\\\\\\\"d-flex gap-3 w-100\\\\\\\\\\\\\\\" style={{ overflowX: \\\\\\\\\\\\\\\"auto\\\\\\\\\\\\\\\" }}>\\\\\\\\n        {Object.keys(columns).length === 0 ? (\\\\\\\\n          <div\\\\\\\\n            className={[\\\\\\\\n              \\\\\\\\\\\\\\\"d-flex align-items-center justify-content-center\\\\\\\\\\\\\\\",\\\\\\\\n              \\\\\\\\\\\\\\\"w-100 text-black-50 opacity-50\\\\\\\\\\\\\\\",\\\\\\\\n            ].join(\\\\\\\\\\\\\\\" \\\\\\\\\\\\\\\")}\\\\\\\\n            style={{ height: 384 }}\\\\\\\\n          >\\\\\\\\n            No columns were created so far.\\\\\\\\n          </div>\\\\\\\\n        ) : null}\\\\\\\\n        {Object.values(columns ?? {})?.map((column) => {\\\\\\\\n          const tickets = state.ticketsByColumn[column.id] ?? [];\\\\\\\\n\\\\\\\\n          return (\\\\\\\\n            <div\\\\\\\\n              className=\\\\\\\\\\\\\\\"col-3\\\\\\\\\\\\\\\"\\\\\\\\n              style={{ minWidth: \\\\\\\\\\\\\\\"300px\\\\\\\\\\\\\\\" }}\\\\\\\\n              key={`column-${column.id}-view`}\\\\\\\\n            >\\\\\\\\n              <div className=\\\\\\\\\\\\\\\"card rounded-4\\\\\\\\\\\\\\\">\\\\\\\\n                <div\\\\\\\\n                  style={{ height: \\\\\\\\\\\\\\\"75vh\\\\\\\\\\\\\\\", overflow: \\\\\\\\\\\\\\\"scroll\\\\\\\\\\\\\\\" }}\\\\\\\\n                  className={[\\\\\\\\n                    \\\\\\\\\\\\\\\"card-body d-flex flex-column gap-3 p-2\\\\\\\\\\\\\\\",\\\\\\\\n                    \\\\\\\\\\\\\\\"border border-1 rounded-4\\\\\\\\\\\\\\\",\\\\\\\\n                  ].join(\\\\\\\\\\\\\\\" \\\\\\\\\\\\\\\")}\\\\\\\\n                >\\\\\\\\n                  <span className=\\\\\\\\\\\\\\\"d-flex flex-column py-1\\\\\\\\\\\\\\\">\\\\\\\\n                    <h6 className=\\\\\\\\\\\\\\\"card-title h6 d-flex align-items-center gap-2 m-0\\\\\\\\\\\\\\\">\\\\\\\\n                      {column.title}\\\\\\\\n\\\\\\\\n                      <span className=\\\\\\\\\\\\\\\"badge rounded-pill bg-secondary\\\\\\\\\\\\\\\">\\\\\\\\n                        {tickets.length}\\\\\\\\n                      </span>\\\\\\\\n                    </h6>\\\\\\\\n\\\\\\\\n                    <p class=\\\\\\\\\\\\\\\"text-secondary m-0\\\\\\\\\\\\\\\">{column.description}</p>\\\\\\\\n                  </span>\\\\\\\\n\\\\\\\\n                  <div class=\\\\\\\\\\\\\\\"d-flex flex-column gap-2\\\\\\\\\\\\\\\">\\\\\\\\n                    {tickets.map((ticket) => (\\\\\\\\n                      <Widget\\\\\\\\n                        src={`devhub.near/widget/devhub.entity.addon.${metadata.ticket.type}`}\\\\\\\\n                        props={{ metadata: metadata.ticket, payload: ticket }}\\\\\\\\n                        key={ticket.id}\\\\\\\\n                      />\\\\\\\\n                    ))}\\\\\\\\n                  </div>\\\\\\\\n                </div>\\\\\\\\n              </div>\\\\\\\\n            </div>\\\\\\\\n          );\\\\\\\\n        })}\\\\\\\\n      </div>\\\\\\\\n    </div>\\\\\\\\n  );\\\\\\\\n};\\\\\\\\n\\\\\\\\nreturn GithubKanbanBoard(props);\\\\\\\\n\"}, \"devhub.entity.addon.kanban.Configurator\": {\"\": \"const Struct = VM.require(\\\\\\\\\\\\\\\"devhub.near/widget/core.lib.struct\\\\\\\\\\\\\\\");\\\\\\\\n\\\\\\\\nif (!Struct) {\\\\\\\\n  return <p>Loading modules...</p>;\\\\\\\\n}\\\\\\\\nconst { useQuery } = VM.require(\\\\\\\\n  \\\\\\\\\\\\\\\"devhub.near/widget/core.adapter.devhub-contract\\\\\\\\\\\\\\\"\\\\\\\\n);\\\\\\\\nconst { uuid, withUUIDIndex } = VM.require(\\\\\\\\n  \\\\\\\\\\\\\\\"devhub.near/widget/core.lib.uuid\\\\\\\\\\\\\\\"\\\\\\\\n);\\\\\\\\n\\\\\\\\nuuid || (uuid = () => {});\\\\\\\\nwithUUIDIndex || (withUUIDIndex = () => {});\\\\\\\\nuseQuery || (useQuery = () => {});\\\\\\\\n\\\\\\\\nconst AttractableDiv = styled.div`\\\\\\\\n  box-shadow: 0 0.125rem 0.25rem rgba(0, 0, 0, 0.075) !important;\\\\\\\\n  transition: box-shadow 0.6s;\\\\\\\\n\\\\\\\\n  &:hover {\\\\\\\\n    box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.15) !important;\\\\\\\\n  }\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst settings = {\\\\\\\\n  maxColumnsNumber: 10,\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst KanbanPostBoardBasicInfoSchema = {\\\\\\\\n  title: { label: \\\\\\\\\\\\\\\"Title\\\\\\\\\\\\\\\", order: 1, placeholder: \\\\\\\\\\\\\\\"Enter board title\\\\\\\\\\\\\\\" },\\\\\\\\n  description: {\\\\\\\\n    label: \\\\\\\\\\\\\\\"Description\\\\\\\\\\\\\\\",\\\\\\\\n    order: 2,\\\\\\\\n    placeholder: \\\\\\\\\\\\\\\"Enter board description\\\\\\\\\\\\\\\",\\\\\\\\n  },\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst KanbanPostBoardTicketFeaturesSchema = {\\\\\\\\n  author: { label: \\\\\\\\\\\\\\\"Author\\\\\\\\\\\\\\\" },\\\\\\\\n  like_count: { label: \\\\\\\\\\\\\\\"Likes\\\\\\\\\\\\\\\" },\\\\\\\\n  approved_sponsorship_value: { label: \\\\\\\\\\\\\\\"Funding amount\\\\\\\\\\\\\\\" },\\\\\\\\n  sponsorship_supervisor: { label: \\\\\\\\\\\\\\\"Supervisor/Sponser\\\\\\\\\\\\\\\" },\\\\\\\\n  tags: { label: \\\\\\\\\\\\\\\"Tags\\\\\\\\\\\\\\\" },\\\\\\\\n  type: { label: \\\\\\\\\\\\\\\"Post type\\\\\\\\\\\\\\\" },\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst KanbanPostBoardDefaults = {\\\\\\\\n  metadata: {\\\\\\\\n    id: uuid(),\\\\\\\\n    type: \\\\\\\\\\\\\\\"kanban.post_board\\\\\\\\\\\\\\\",\\\\\\\\n    title: \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\",\\\\\\\\n    description: \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\",\\\\\\\\n    ticket: {\\\\\\\\n      type: \\\\\\\\\\\\\\\"kanban.post_ticket\\\\\\\\\\\\\\\",\\\\\\\\n      features: {\\\\\\\\n        author: true,\\\\\\\\n        like_count: true,\\\\\\\\n        approved_sponsorship_value: true,\\\\\\\\n        sponsorship_supervisor: true,\\\\\\\\n        tags: true,\\\\\\\\n        type: true,\\\\\\\\n      },\\\\\\\\n      sortBy: \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\",\\\\\\\\n    },\\\\\\\\n  },\\\\\\\\n  payload: {\\\\\\\\n    columns: {},\\\\\\\\n  },\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst toMigrated = ({ config, metadata, payload }) => ({\\\\\\\\n  metadata: {\\\\\\\\n    ...KanbanPostBoardDefaults.metadata,\\\\\\\\n    ...metadata,\\\\\\\\n    ticket: {\\\\\\\\n      ...KanbanPostBoardDefaults.metadata.ticket,\\\\\\\\n      ...metadata.ticket,\\\\\\\\n      features: {\\\\\\\\n        ...KanbanPostBoardDefaults.metadata.ticket.features,\\\\\\\\n        ...metadata.ticket.features,\\\\\\\\n      },\\\\\\\\n    },\\\\\\\\n  },\\\\\\\\n  payload: {\\\\\\\\n    ...KanbanPostBoardDefaults.payload,\\\\\\\\n    ...payload,\\\\\\\\n    ...config,\\\\\\\\n  },\\\\\\\\n});\\\\\\\\n\\\\\\\\nconst sortByOptions = [\\\\\\\\n  { label: \\\\\\\\\\\\\\\"None\\\\\\\\\\\\\\\", value: \\\\\\\\\\\\\\\"none\\\\\\\\\\\\\\\" },\\\\\\\\n  { label: \\\\\\\\\\\\\\\"Amount: High to Low\\\\\\\\\\\\\\\", value: \\\\\\\\\\\\\\\"descending-amount\\\\\\\\\\\\\\\" },\\\\\\\\n  { label: \\\\\\\\\\\\\\\"Amount: Low to High\\\\\\\\\\\\\\\", value: \\\\\\\\\\\\\\\"ascending-amount\\\\\\\\\\\\\\\" },\\\\\\\\n  { label: \\\\\\\\\\\\\\\"Date: Newest to Oldest\\\\\\\\\\\\\\\", value: \\\\\\\\\\\\\\\"descending-date\\\\\\\\\\\\\\\" },\\\\\\\\n  { label: \\\\\\\\\\\\\\\"Date: Oldest to Newest\\\\\\\\\\\\\\\", value: \\\\\\\\\\\\\\\"ascending-date\\\\\\\\\\\\\\\" },\\\\\\\\n  { label: \\\\\\\\\\\\\\\"Author: A-Z\\\\\\\\\\\\\\\", value: \\\\\\\\\\\\\\\"ascending-author\\\\\\\\\\\\\\\" },\\\\\\\\n  { label: \\\\\\\\\\\\\\\"Author: Z-A\\\\\\\\\\\\\\\", value: \\\\\\\\\\\\\\\"descending-author\\\\\\\\\\\\\\\" },\\\\\\\\n  { label: \\\\\\\\\\\\\\\"Sponsor/Supervisor: A-Z\\\\\\\\\\\\\\\", value: \\\\\\\\\\\\\\\"ascending-sponsor\\\\\\\\\\\\\\\" },\\\\\\\\n  { label: \\\\\\\\\\\\\\\"Sponsor/Supervisor: Z-A\\\\\\\\\\\\\\\", value: \\\\\\\\\\\\\\\"descending-sponsor\\\\\\\\\\\\\\\" },\\\\\\\\n  { label: \\\\\\\\\\\\\\\"Most Likes\\\\\\\\\\\\\\\", value: \\\\\\\\\\\\\\\"descending-likes\\\\\\\\\\\\\\\" },\\\\\\\\n  { label: \\\\\\\\\\\\\\\"Fewest Likes\\\\\\\\\\\\\\\", value: \\\\\\\\\\\\\\\"ascending-likes\\\\\\\\\\\\\\\" },\\\\\\\\n];\\\\\\\\n\\\\\\\\nconst KanbanViewConfigurator = ({ handle, data, permissions, onSubmit }) => {\\\\\\\\n  const tags = useCache(\\\\\\\\n    () =>\\\\\\\\n      Near.asyncView(\\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"get_all_labels\\\\\\\\\\\\\\\").then(\\\\\\\\n        (res) => res\\\\\\\\n      ),\\\\\\\\n    handle,\\\\\\\\n    { subscribe: false }\\\\\\\\n  );\\\\\\\\n\\\\\\\\n  if (!data) {\\\\\\\\n    return (\\\\\\\\n      <div class=\\\\\\\\\\\\\\\"alert alert-danger\\\\\\\\\\\\\\\" role=\\\\\\\\\\\\\\\"alert\\\\\\\\\\\\\\\">\\\\\\\\n        Loading...\\\\\\\\n      </div>\\\\\\\\n    );\\\\\\\\n  }\\\\\\\\n  const initialFormState = Struct.pick(\\\\\\\\n    data.metadata === undefined ? {} : toMigrated(data),\\\\\\\\n    [\\\\\\\\\\\\\\\"metadata\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"payload\\\\\\\\\\\\\\\"]\\\\\\\\n  );\\\\\\\\n\\\\\\\\n  const [formState, setForm] = useState(initialFormState);\\\\\\\\n  const [showPreview, setPreview] = useState(false);\\\\\\\\n\\\\\\\\n  const formUpdate =\\\\\\\\n    ({ path, via: customFieldUpdate, ...params }) =>\\\\\\\\n    (fieldInput) => {\\\\\\\\n      const transformFn = (node) => {\\\\\\\\n        if (typeof customFieldUpdate === \\\\\\\\\\\\\\\"function\\\\\\\\\\\\\\\") {\\\\\\\\n          return customFieldUpdate({\\\\\\\\n            input: fieldInput?.target?.value ?? fieldInput,\\\\\\\\n            lastKnownValue: node,\\\\\\\\n            params,\\\\\\\\n          });\\\\\\\\n        } else {\\\\\\\\n          return Struct.defaultFieldUpdate({\\\\\\\\n            input: fieldInput?.target?.value ?? fieldInput,\\\\\\\\n            lastKnownValue: node,\\\\\\\\n            params,\\\\\\\\n          });\\\\\\\\n        }\\\\\\\\n      };\\\\\\\\n      const updatedValues = Struct.deepFieldUpdate(\\\\\\\\n        formState ?? {},\\\\\\\\n        path,\\\\\\\\n        (node) => transformFn(node)\\\\\\\\n      );\\\\\\\\n      setForm((prevFormState) => ({\\\\\\\\n        ...prevFormState,\\\\\\\\n        ...updatedValues,\\\\\\\\n      }));\\\\\\\\n    };\\\\\\\\n\\\\\\\\n  const formReset = () => {\\\\\\\\n    setForm(initialFormState);\\\\\\\\n  };\\\\\\\\n\\\\\\\\n  const newViewInit = () => {\\\\\\\\n    setForm(KanbanPostBoardDefaults);\\\\\\\\n  };\\\\\\\\n\\\\\\\\n  const columnsCreateNew = ({ lastKnownValue }) =>\\\\\\\\n    Object.keys(lastKnownValue).length < settings.maxColumnsNumber\\\\\\\\n      ? {\\\\\\\\n          ...(lastKnownValue ?? {}),\\\\\\\\n          ...withUUIDIndex({ tag: \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\", title: \\\\\\\\\\\\\\\"New column\\\\\\\\\\\\\\\", description: \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\" }),\\\\\\\\n        }\\\\\\\\n      : lastKnownValue;\\\\\\\\n\\\\\\\\n  const columnsDeleteById =\\\\\\\\n    (id) =>\\\\\\\\n    ({ lastKnownValue }) =>\\\\\\\\n      Object.fromEntries(\\\\\\\\n        Object.entries(lastKnownValue).filter(([columnId]) => columnId !== id)\\\\\\\\n      );\\\\\\\\n\\\\\\\\n  const onCancel = () => {\\\\\\\\n    formReset();\\\\\\\\n  };\\\\\\\\n\\\\\\\\n  const onSave = () => onSubmit(formState);\\\\\\\\n\\\\\\\\n  const formElement = (\\\\\\\\n    <div className=\\\\\\\\\\\\\\\"card p-2\\\\\\\\\\\\\\\">\\\\\\\\n      <div className=\\\\\\\\\\\\\\\"card-body d-flex flex-column gap-3\\\\\\\\\\\\\\\">\\\\\\\\n        <div className=\\\\\\\\\\\\\\\"d-flex flex-column flex-lg-row align-items-stretch w-100\\\\\\\\\\\\\\\">\\\\\\\\n          <Widget\\\\\\\\n            src={`devhub.near/widget/devhub.components.organism.Configurator`}\\\\\\\\n            props={{\\\\\\\\n              heading: \\\\\\\\\\\\\\\"Basic information\\\\\\\\\\\\\\\",\\\\\\\\n              externalState: formState.metadata,\\\\\\\\n              isActive: true,\\\\\\\\n              isEmbedded: true,\\\\\\\\n              isUnlocked: permissions.can_configure,\\\\\\\\n              onChange: formUpdate({ path: [\\\\\\\\\\\\\\\"metadata\\\\\\\\\\\\\\\"] }),\\\\\\\\n              schema: KanbanPostBoardBasicInfoSchema,\\\\\\\\n              hideSubmitBtn: true,\\\\\\\\n            }}\\\\\\\\n          />\\\\\\\\n        </div>\\\\\\\\n        <div className=\\\\\\\\\\\\\\\"d-flex flex-column flex-1 align-items-start justify-content-evenly gap-1 p-2 flex-grow-1\\\\\\\\\\\\\\\">\\\\\\\\n          <span\\\\\\\\n            className=\\\\\\\\\\\\\\\"d-flex justify-content-between align-items-center gap-3 w-100\\\\\\\\\\\\\\\"\\\\\\\\n            style={{ fontWeight: 500, fontSize: \\\\\\\\\\\\\\\"16\\\\\\\\\\\\\\\" }}\\\\\\\\n          >\\\\\\\\n            Fields to display\\\\\\\\n          </span>\\\\\\\\n          <div>\\\\\\\\n            <Widget\\\\\\\\n              src={`devhub.near/widget/devhub.components.organism.Configurator`}\\\\\\\\n              props={{\\\\\\\\n                heading: \\\\\\\\\\\\\\\"Card fields\\\\\\\\\\\\\\\",\\\\\\\\n                classNames: { root: \\\\\\\\\\\\\\\"w-auto h-auto\\\\\\\\\\\\\\\" },\\\\\\\\n                externalState: formState.metadata.ticket.features,\\\\\\\\n                isActive: true,\\\\\\\\n                isEmbedded: true,\\\\\\\\n                isUnlocked: permissions.can_configure,\\\\\\\\n                onChange: formUpdate({\\\\\\\\n                  path: [\\\\\\\\\\\\\\\"metadata\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"ticket\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"features\\\\\\\\\\\\\\\"],\\\\\\\\n                }),\\\\\\\\n                schema: KanbanPostBoardTicketFeaturesSchema,\\\\\\\\n                style: { minWidth: \\\\\\\\\\\\\\\"36%\\\\\\\\\\\\\\\" },\\\\\\\\n                hideSubmitBtn: true,\\\\\\\\n              }}\\\\\\\\n            />\\\\\\\\n          </div>\\\\\\\\n        </div>\\\\\\\\n        <div className=\\\\\\\\\\\\\\\"d-flex flex-column flex-1 align-items-start justify-content-evenly gap-1 p-2 flex-grow-1\\\\\\\\\\\\\\\">\\\\\\\\n          <span\\\\\\\\n            className=\\\\\\\\\\\\\\\"d-flex justify-content-between align-items-center gap-3 w-100\\\\\\\\\\\\\\\"\\\\\\\\n            style={{ fontWeight: 500, fontSize: \\\\\\\\\\\\\\\"16\\\\\\\\\\\\\\\" }}\\\\\\\\n          >\\\\\\\\n            Sort by\\\\\\\\n          </span>\\\\\\\\n          <div>\\\\\\\\n            <div className=\\\\\\\\\\\\\\\"input-group\\\\\\\\\\\\\\\">\\\\\\\\n              <select\\\\\\\\n                className=\\\\\\\\\\\\\\\"form-select border border-1\\\\\\\\\\\\\\\"\\\\\\\\n                value={formState.metadata.ticket.sortBy}\\\\\\\\n                onChange={formUpdate({\\\\\\\\n                  path: [\\\\\\\\\\\\\\\"metadata\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"ticket\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"sortBy\\\\\\\\\\\\\\\"],\\\\\\\\n                })}\\\\\\\\n                aria-label={label}\\\\\\\\n              >\\\\\\\\n                <option value=\\\\\\\\\\\\\\\"none\\\\\\\\\\\\\\\" disabled hidden>\\\\\\\\n                  None\\\\\\\\n                </option>\\\\\\\\n                {sortByOptions.map((option) => (\\\\\\\\n                  <option key={option.value} value={option.value}>\\\\\\\\n                    {option.label}\\\\\\\\n                  </option>\\\\\\\\n                ))}\\\\\\\\n              </select>\\\\\\\\n            </div>\\\\\\\\n          </div>\\\\\\\\n        </div>\\\\\\\\n\\\\\\\\n        <div className=\\\\\\\\\\\\\\\"d-flex align-items-center justify-content-between w-100 mb-1\\\\\\\\\\\\\\\">\\\\\\\\n          <span className=\\\\\\\\\\\\\\\"d-inline-flex gap-2 m-0\\\\\\\\\\\\\\\">\\\\\\\\n            <i className=\\\\\\\\\\\\\\\"bi bi-list-task\\\\\\\\\\\\\\\" />\\\\\\\\n            <span>{`Columns ( max. ${settings.maxColumnsNumber} )`}</span>\\\\\\\\n          </span>\\\\\\\\n        </div>\\\\\\\\n\\\\\\\\n        <div className=\\\\\\\\\\\\\\\"d-flex flex-column align-items-center gap-4 w-100\\\\\\\\\\\\\\\">\\\\\\\\n          {Object.values(formState.payload.columns ?? {}).map(\\\\\\\\n            ({ id, description, tag, title }) => (\\\\\\\\n              <AttractableDiv\\\\\\\\n                className=\\\\\\\\\\\\\\\"d-flex gap-3 rounded-4 border p-3 w-100\\\\\\\\\\\\\\\"\\\\\\\\n                key={`column-${id}-configurator`}\\\\\\\\n              >\\\\\\\\n                <div className=\\\\\\\\\\\\\\\"d-flex flex-column gap-1 w-100\\\\\\\\\\\\\\\">\\\\\\\\n                  <Widget\\\\\\\\n                    src={`devhub.near/widget/devhub.components.molecule.Input`}\\\\\\\\n                    props={{\\\\\\\\n                      className: \\\\\\\\\\\\\\\"flex-grow-1\\\\\\\\\\\\\\\",\\\\\\\\n                      key: `column-${id}-title`,\\\\\\\\n                      label: \\\\\\\\\\\\\\\"Title\\\\\\\\\\\\\\\",\\\\\\\\n                      onChange: formUpdate({\\\\\\\\n                        path: [\\\\\\\\\\\\\\\"payload\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"columns\\\\\\\\\\\\\\\", id, \\\\\\\\\\\\\\\"title\\\\\\\\\\\\\\\"],\\\\\\\\n                      }),\\\\\\\\n                      placeholder: \\\\\\\\\\\\\\\"Enter column title\\\\\\\\\\\\\\\",\\\\\\\\n                      value: title,\\\\\\\\n                    }}\\\\\\\\n                  />\\\\\\\\n                  <Widget\\\\\\\\n                    src={`devhub.near/widget/devhub.components.molecule.Input`}\\\\\\\\n                    props={{\\\\\\\\n                      className: \\\\\\\\\\\\\\\"flex-grow-1\\\\\\\\\\\\\\\",\\\\\\\\n                      key: `column-${id}-description`,\\\\\\\\n                      label: \\\\\\\\\\\\\\\"Description\\\\\\\\\\\\\\\",\\\\\\\\n                      onChange: formUpdate({\\\\\\\\n                        path: [\\\\\\\\\\\\\\\"payload\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"columns\\\\\\\\\\\\\\\", id, \\\\\\\\\\\\\\\"description\\\\\\\\\\\\\\\"],\\\\\\\\n                      }),\\\\\\\\n                      placeholder: \\\\\\\\\\\\\\\"Enter a brief description for the column\\\\\\\\\\\\\\\",\\\\\\\\n                      value: description,\\\\\\\\n                    }}\\\\\\\\n                  />\\\\\\\\n                  <div className=\\\\\\\\\\\\\\\"d-flex flex-column flex-1 align-items-start justify-content-evenly gap-1 p-2 flex-grow-1\\\\\\\\\\\\\\\">\\\\\\\\n                    <span className=\\\\\\\\\\\\\\\"d-flex justify-content-between align-items-center gap-3 w-100\\\\\\\\\\\\\\\">\\\\\\\\n                      Enter a tag to filter posts in this column\\\\\\\\n                    </span>\\\\\\\\n                    <div className=\\\\\\\\\\\\\\\"w-100\\\\\\\\\\\\\\\">\\\\\\\\n                      <Widget\\\\\\\\n                        src=\\\\\\\\\\\\\\\"devhub.near/widget/devhub.feature.post-search.by-tag\\\\\\\\\\\\\\\"\\\\\\\\n                        props={{\\\\\\\\n                          tag: tag,\\\\\\\\n                          onTagSearch: formUpdate({\\\\\\\\n                            path: [\\\\\\\\\\\\\\\"payload\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"columns\\\\\\\\\\\\\\\", id, \\\\\\\\\\\\\\\"tag\\\\\\\\\\\\\\\"],\\\\\\\\n                          }),\\\\\\\\n                        }}\\\\\\\\n                      />\\\\\\\\n                    </div>\\\\\\\\n                  </div>\\\\\\\\n                </div>\\\\\\\\n\\\\\\\\n                <div\\\\\\\\n                  className=\\\\\\\\\\\\\\\"d-flex flex-column gap-3 border-start p-3 pe-0\\\\\\\\\\\\\\\"\\\\\\\\n                  style={{ marginTop: -16, marginBottom: -16 }}\\\\\\\\n                >\\\\\\\\n                  <button\\\\\\\\n                    className=\\\\\\\\\\\\\\\"btn btn-outline-danger\\\\\\\\\\\\\\\"\\\\\\\\n                    onClick={formUpdate({\\\\\\\\n                      path: [\\\\\\\\\\\\\\\"payload\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"columns\\\\\\\\\\\\\\\"],\\\\\\\\n                      via: columnsDeleteById(id),\\\\\\\\n                    })}\\\\\\\\n                    title=\\\\\\\\\\\\\\\"Delete column\\\\\\\\\\\\\\\"\\\\\\\\n                  >\\\\\\\\n                    <i className=\\\\\\\\\\\\\\\"bi bi-trash-fill\\\\\\\\\\\\\\\" />\\\\\\\\n                  </button>\\\\\\\\n                </div>\\\\\\\\n              </AttractableDiv>\\\\\\\\n            )\\\\\\\\n          )}\\\\\\\\n        </div>\\\\\\\\n        <div className=\\\\\\\\\\\\\\\"d-flex gap-3 justify-content-between w-100 mt-2 flex-wrap flex-sm-nowrap\\\\\\\\\\\\\\\">\\\\\\\\n          <div style={{ flex: \\\\\\\\\\\\\\\"none\\\\\\\\\\\\\\\" }}>\\\\\\\\n            <Widget\\\\\\\\n              src={`devhub.near/widget/devhub.components.molecule.Button`}\\\\\\\\n              props={{\\\\\\\\n                classNames: {\\\\\\\\n                  root: \\\\\\\\\\\\\\\"btn-sm btn-outline-secondary\\\\\\\\\\\\\\\",\\\\\\\\n                },\\\\\\\\n                label: \\\\\\\\\\\\\\\"New column\\\\\\\\\\\\\\\",\\\\\\\\n                disabled:\\\\\\\\n                  Object.keys(formState.payload.columns).length >=\\\\\\\\n                  settings.maxColumnsNumber,\\\\\\\\n                icon: { type: \\\\\\\\\\\\\\\"bootstrap_icon\\\\\\\\\\\\\\\", variant: \\\\\\\\\\\\\\\"bi-plus-lg\\\\\\\\\\\\\\\" },\\\\\\\\n                onClick: formUpdate({\\\\\\\\n                  path: [\\\\\\\\\\\\\\\"payload\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"columns\\\\\\\\\\\\\\\"],\\\\\\\\n                  via: columnsCreateNew,\\\\\\\\n                }),\\\\\\\\n              }}\\\\\\\\n            />\\\\\\\\n          </div>\\\\\\\\n          <div className=\\\\\\\\\\\\\\\"d-flex gap-3 justify-content-end w-100\\\\\\\\\\\\\\\">\\\\\\\\n            <Widget\\\\\\\\n              src={`devhub.near/widget/devhub.components.molecule.Button`}\\\\\\\\n              props={{\\\\\\\\n                classNames: {\\\\\\\\n                  root: \\\\\\\\\\\\\\\"d-flex btn btn-outline-danger shadow-none border-0\\\\\\\\\\\\\\\",\\\\\\\\n                },\\\\\\\\n                isHidden: typeof onCancel !== \\\\\\\\\\\\\\\"function\\\\\\\\\\\\\\\",\\\\\\\\n                label: \\\\\\\\\\\\\\\"Cancel\\\\\\\\\\\\\\\",\\\\\\\\n                onClick: onCancel,\\\\\\\\n              }}\\\\\\\\n            />\\\\\\\\n            <Widget\\\\\\\\n              src={`devhub.near/widget/devhub.components.molecule.Button`}\\\\\\\\n              props={{\\\\\\\\n                classNames: { root: \\\\\\\\\\\\\\\"btn btn-success\\\\\\\\\\\\\\\" },\\\\\\\\n                disabled: form.isSynced,\\\\\\\\n                icon: {\\\\\\\\n                  type: \\\\\\\\\\\\\\\"svg_icon\\\\\\\\\\\\\\\",\\\\\\\\n                  variant: \\\\\\\\\\\\\\\"floppy_drive\\\\\\\\\\\\\\\",\\\\\\\\n                  width: 14,\\\\\\\\n                  height: 14,\\\\\\\\n                },\\\\\\\\n                isHidden: typeof onSave !== \\\\\\\\\\\\\\\"function\\\\\\\\\\\\\\\",\\\\\\\\n                label: \\\\\\\\\\\\\\\"Save\\\\\\\\\\\\\\\",\\\\\\\\n                onClick: onSave,\\\\\\\\n              }}\\\\\\\\n            />\\\\\\\\n          </div>\\\\\\\\n        </div>\\\\\\\\n      </div>\\\\\\\\n    </div>\\\\\\\\n  );\\\\\\\\n\\\\\\\\n  return (\\\\\\\\n    <div\\\\\\\\n      className=\\\\\\\\\\\\\\\"d-flex flex-column gap-4 w-100\\\\\\\\\\\\\\\"\\\\\\\\n      style={{ maxWidth: \\\\\\\\\\\\\\\"100%\\\\\\\\\\\\\\\" }}\\\\\\\\n    >\\\\\\\\n      <ul className=\\\\\\\\\\\\\\\"nav nav-tabs\\\\\\\\\\\\\\\" id=\\\\\\\\\\\\\\\"editPreviewTabs\\\\\\\\\\\\\\\" role=\\\\\\\\\\\\\\\"tablist\\\\\\\\\\\\\\\">\\\\\\\\n        <li className=\\\\\\\\\\\\\\\"nav-item\\\\\\\\\\\\\\\" role=\\\\\\\\\\\\\\\"presentation\\\\\\\\\\\\\\\">\\\\\\\\n          <button\\\\\\\\n            className={`nav-link ${!showPreview ? \\\\\\\\\\\\\\\"active\\\\\\\\\\\\\\\" : \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\"}`}\\\\\\\\n            id=\\\\\\\\\\\\\\\"edit-tab\\\\\\\\\\\\\\\"\\\\\\\\n            data-bs-toggle=\\\\\\\\\\\\\\\"tab\\\\\\\\\\\\\\\"\\\\\\\\n            data-bs-target=\\\\\\\\\\\\\\\"#edit\\\\\\\\\\\\\\\"\\\\\\\\n            type=\\\\\\\\\\\\\\\"button\\\\\\\\\\\\\\\"\\\\\\\\n            role=\\\\\\\\\\\\\\\"tab\\\\\\\\\\\\\\\"\\\\\\\\n            aria-controls=\\\\\\\\\\\\\\\"edit\\\\\\\\\\\\\\\"\\\\\\\\n            aria-selected=\\\\\\\\\\\\\\\"true\\\\\\\\\\\\\\\"\\\\\\\\n            onClick={() => setPreview(false)}\\\\\\\\n          >\\\\\\\\n            Edit\\\\\\\\n          </button>\\\\\\\\n        </li>\\\\\\\\n        <li className=\\\\\\\\\\\\\\\"nav-item\\\\\\\\\\\\\\\" role=\\\\\\\\\\\\\\\"presentation\\\\\\\\\\\\\\\">\\\\\\\\n          <button\\\\\\\\n            className={`nav-link ${showPreview ? \\\\\\\\\\\\\\\"active\\\\\\\\\\\\\\\" : \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\"}`}\\\\\\\\n            id=\\\\\\\\\\\\\\\"preview-tab\\\\\\\\\\\\\\\"\\\\\\\\n            data-bs-toggle=\\\\\\\\\\\\\\\"tab\\\\\\\\\\\\\\\"\\\\\\\\n            data-bs-target=\\\\\\\\\\\\\\\"#preview\\\\\\\\\\\\\\\"\\\\\\\\n            type=\\\\\\\\\\\\\\\"button\\\\\\\\\\\\\\\"\\\\\\\\n            role=\\\\\\\\\\\\\\\"tab\\\\\\\\\\\\\\\"\\\\\\\\n            aria-controls=\\\\\\\\\\\\\\\"preview\\\\\\\\\\\\\\\"\\\\\\\\n            aria-selected=\\\\\\\\\\\\\\\"false\\\\\\\\\\\\\\\"\\\\\\\\n            onClick={() => setPreview(true)}\\\\\\\\n          >\\\\\\\\n            Preview\\\\\\\\n          </button>\\\\\\\\n        </li>\\\\\\\\n      </ul>\\\\\\\\n      {showPreview ? (\\\\\\\\n        <div>\\\\\\\\n          <Widget\\\\\\\\n            src={`devhub.near/widget/devhub.entity.addon.kanban.Viewer`}\\\\\\\\n            props={{\\\\\\\\n              data: formState,\\\\\\\\n            }}\\\\\\\\n          />\\\\\\\\n        </div>\\\\\\\\n      ) : (\\\\\\\\n        <div className={[\\\\\\\\\\\\\\\"d-flex flex-column gap-4 w-100\\\\\\\\\\\\\\\"].join(\\\\\\\\\\\\\\\" \\\\\\\\\\\\\\\")}>\\\\\\\\n          <div className=\\\\\\\\\\\\\\\"d-flex align-items-center justify-content-between gap-3 w-100\\\\\\\\\\\\\\\">\\\\\\\\n            <h5 className=\\\\\\\\\\\\\\\"h5 d-inline-flex gap-2 m-0\\\\\\\\\\\\\\\">\\\\\\\\n              <i className=\\\\\\\\\\\\\\\"bi bi-gear-wide-connected\\\\\\\\\\\\\\\" />\\\\\\\\n              <span>Kanban board configuration</span>\\\\\\\\n            </h5>\\\\\\\\n          </div>\\\\\\\\n          {Object.keys(formState.metadata ?? {}).length > 0 && formElement}\\\\\\\\n        </div>\\\\\\\\n      )}\\\\\\\\n      {!Object.keys(formState.metadata ?? {}).length && (\\\\\\\\n        <div\\\\\\\\n          className=\\\\\\\\\\\\\\\"d-flex flex-column align-items-center justify-content-center gap-4\\\\\\\\\\\\\\\"\\\\\\\\n          style={{ height: 384 }}\\\\\\\\n        >\\\\\\\\n          <h5 className=\\\\\\\\\\\\\\\"h5 d-inline-flex gap-2 m-0\\\\\\\\\\\\\\\">\\\\\\\\n            This community doesn\\\\\\\\\\\\'t have a kanban board\\\\\\\\n          </h5>\\\\\\\\n          <Widget\\\\\\\\n            src={`devhub.near/widget/devhub.components.molecule.Button`}\\\\\\\\n            props={{\\\\\\\\n              icon: { type: \\\\\\\\\\\\\\\"bootstrap_icon\\\\\\\\\\\\\\\", variant: \\\\\\\\\\\\\\\"bi-kanban-fill\\\\\\\\\\\\\\\" },\\\\\\\\n              isHidden: !permissions.can_configure,\\\\\\\\n              label: \\\\\\\\\\\\\\\"Create kanban board\\\\\\\\\\\\\\\",\\\\\\\\n              onClick: newViewInit,\\\\\\\\n            }}\\\\\\\\n          />\\\\\\\\n        </div>\\\\\\\\n      )}\\\\\\\\n    </div>\\\\\\\\n  );\\\\\\\\n};\\\\\\\\n\\\\\\\\nreturn KanbanViewConfigurator(props);\\\\\\\\n\"}, \"devhub.entity.addon.github.kanban_ticket\": {\"\": \"const AttractableDiv = styled.div`\\\\\\\\n  box-shadow: 0 0.125rem 0.25rem rgba(0, 0, 0, 0.075) !important;\\\\\\\\n  transition: box-shadow 0.6s;\\\\\\\\n\\\\\\\\n  &:hover {\\\\\\\\n    box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.15) !important;\\\\\\\\n  }\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst ticketStates = {\\\\\\\\n  closed: { displayName: \\\\\\\\\\\\\\\"Closed\\\\\\\\\\\\\\\", icon: \\\\\\\\\\\\\\\"bi-lock-fill\\\\\\\\\\\\\\\" },\\\\\\\\n  open: { displayName: \\\\\\\\\\\\\\\"Open\\\\\\\\\\\\\\\", icon: \\\\\\\\\\\\\\\"bi-unlock-fill\\\\\\\\\\\\\\\" },\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst ticketTypes = {\\\\\\\\n  Issue: { displayName: \\\\\\\\\\\\\\\"Issue\\\\\\\\\\\\\\\", icon: \\\\\\\\\\\\\\\"bi-lightbulb-fill\\\\\\\\\\\\\\\" },\\\\\\\\n  PullRequest: { displayName: \\\\\\\\\\\\\\\"Pull request\\\\\\\\\\\\\\\", icon: \\\\\\\\\\\\\\\"bi-git\\\\\\\\\\\\\\\" },\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst GithubKanbanTicket = ({\\\\\\\\n  metadata: { features },\\\\\\\\n  payload: {\\\\\\\\n    _links,\\\\\\\\n    labels,\\\\\\\\n    number,\\\\\\\\n    state: ticketState,\\\\\\\\n    title,\\\\\\\\n    type,\\\\\\\\n    user,\\\\\\\\n    url,\\\\\\\\n  },\\\\\\\\n}) => {\\\\\\\\n  const header = (\\\\\\\\n    <div className=\\\\\\\\\\\\\\\"card-header\\\\\\\\\\\\\\\">\\\\\\\\n      <div class=\\\\\\\\\\\\\\\"d-flex justify-content-start gap-3\\\\\\\\\\\\\\\">\\\\\\\\n        <i\\\\\\\\n          className={`bi ${ticketStates[ticketState].icon}`}\\\\\\\\n          title={ticketStates[ticketState].displayName}\\\\\\\\n        />\\\\\\\\n\\\\\\\\n        {features.author ? (\\\\\\\\n          <a\\\\\\\\n            className=\\\\\\\\\\\\\\\"d-flex gap-2 link-dark text-truncate\\\\\\\\\\\\\\\"\\\\\\\\n            href={user.html_url}\\\\\\\\n            rel=\\\\\\\\\\\\\\\"noreferrer\\\\\\\\\\\\\\\"\\\\\\\\n            target=\\\\\\\\\\\\\\\"_blank\\\\\\\\\\\\\\\"\\\\\\\\n          >\\\\\\\\n            <img\\\\\\\\n              alt={`${user.login}\\\\\\\\\\\\'s GitHub avatar`}\\\\\\\\n              className=\\\\\\\\\\\\\\\"img-fluid rounded\\\\\\\\\\\\\\\"\\\\\\\\n              src={user.avatar_url}\\\\\\\\n              style={{ width: 24, height: 24 }}\\\\\\\\n            />\\\\\\\\n\\\\\\\\n            <span className=\\\\\\\\\\\\\\\"text-muted\\\\\\\\\\\\\\\">@{user.login}</span>\\\\\\\\n          </a>\\\\\\\\n        ) : null}\\\\\\\\n\\\\\\\\n        <a\\\\\\\\n          className=\\\\\\\\\\\\\\\"card-link ms-auto\\\\\\\\\\\\\\\"\\\\\\\\n          href={_links?.html?.href ?? url}\\\\\\\\n          rel=\\\\\\\\\\\\\\\"noreferrer\\\\\\\\\\\\\\\"\\\\\\\\n          role=\\\\\\\\\\\\\\\"button\\\\\\\\\\\\\\\"\\\\\\\\n          target=\\\\\\\\\\\\\\\"_blank\\\\\\\\\\\\\\\"\\\\\\\\n          title=\\\\\\\\\\\\\\\"Open in new tab\\\\\\\\\\\\\\\"\\\\\\\\n        >\\\\\\\\n          <i className=\\\\\\\\\\\\\\\"bi bi-share\\\\\\\\\\\\\\\" />\\\\\\\\n        </a>\\\\\\\\n      </div>\\\\\\\\n    </div>\\\\\\\\n  );\\\\\\\\n\\\\\\\\n  const titleArea = (\\\\\\\\n    <span className=\\\\\\\\\\\\\\\"card-text gap-2\\\\\\\\\\\\\\\">\\\\\\\\n      {features.type ? <i className={`bi ${ticketTypes[type].icon}`} /> : null}\\\\\\\\n\\\\\\\\n      <span>\\\\\\\\n        {[\\\\\\\\n          `${features.type ? ticketTypes[type].displayName : \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\"} ${\\\\\\\\n            features.id ? `#${number.toString()}` : \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\"\\\\\\\\n          }`.trim(),\\\\\\\\n\\\\\\\\n          title,\\\\\\\\n        ]\\\\\\\\n          .filter(\\\\\\\\n            (maybeString) =>\\\\\\\\n              typeof maybeString === \\\\\\\\\\\\\\\"string\\\\\\\\\\\\\\\" && maybeString.length > 0\\\\\\\\n          )\\\\\\\\n          .join(\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\")}\\\\\\\\n      </span>\\\\\\\\n    </span>\\\\\\\\n  );\\\\\\\\n\\\\\\\\n  const labelList = features.labels ? (\\\\\\\\n    <div className=\\\\\\\\\\\\\\\"d-flex flex-wrap gap-2 m-0\\\\\\\\\\\\\\\">\\\\\\\\n      {(labels ?? []).map((label) => (\\\\\\\\n        <a href={label.url} key={label.id} title={label.description}>\\\\\\\\n          <span\\\\\\\\n            className=\\\\\\\\\\\\\\\"badge text-wrap\\\\\\\\\\\\\\\"\\\\\\\\n            style={{ backgroundColor: `#${label.color}` }}\\\\\\\\n          >\\\\\\\\n            {label.name}\\\\\\\\n          </span>\\\\\\\\n        </a>\\\\\\\\n      ))}\\\\\\\\n    </div>\\\\\\\\n  ) : null;\\\\\\\\n\\\\\\\\n  return (\\\\\\\\n    <AttractableDiv className=\\\\\\\\\\\\\\\"card\\\\\\\\\\\\\\\">\\\\\\\\n      {header}\\\\\\\\n      <div\\\\\\\\n        className=\\\\\\\\\\\\\\\"card-body d-flex flex-column gap-3\\\\\\\\\\\\\\\"\\\\\\\\n        style={{ fontSize: 15 }}\\\\\\\\n      >\\\\\\\\n        {titleArea}\\\\\\\\n        {labelList}\\\\\\\\n      </div>\\\\\\\\n    </AttractableDiv>\\\\\\\\n  );\\\\\\\\n};\\\\\\\\n\\\\\\\\nreturn GithubKanbanTicket(props);\\\\\\\\n\"}}}}}"
      }
    ],
    "actions_agg": {
      "deposit": 0
    },
    "outcomes": {
      "status": true
    },
    "outcomes_agg": {
      "transaction_fee": 2.6390622494456e+21
    }
  },
  {
    "id": "2026291671",
    "receipt_id": "4KXzWDvGZK1CLeCvtMcYVLMhZ3UZcAg6NPk26dn7PVc8",
    "predecessor_account_id": "system",
    "receiver_account_id": "devhub.near",
    "receipt_kind": "ACTION",
    "receipt_block": {
      "block_hash": "GsaLJGPJfA5nkFEEJz7DA2rKCaFJboSr8vRnKZP9YaGj",
      "block_height": 109738209,
      "block_timestamp": 1704547716112825300
    },
    "receipt_outcome": {
      "gas_burnt": 223182562500,
      "tokens_burnt": 0,
      "executor_account_id": "devhub.near",
      "status": true
    },
    "transaction_hash": "ui9k7rnRMj98gxCZ6CzCDQzXoPuMbDaDYNNx95t9HQ5",
    "included_in_block_hash": "B6va5ksiwhZooA3Utdj68DXmqZ1ukzAehkcQ7GiYxBgh",
    "block_timestamp": "1704547714239338812",
    "block": {
      "block_height": 109738207
    },
    "receipt_conversion_tokens_burnt": "259732877544400000000",
    "actions": [
      {
        "action": "TRANSFER",
        "method": null,
        "deposit": 1.8675615765783754e+23,
        "fee": 0,
        "args": null
      }
    ],
    "actions_agg": {
      "deposit": 0
    },
    "outcomes": {
      "status": true
    },
    "outcomes_agg": {
      "transaction_fee": 2.6390622494456e+21
    }
  },
  {
    "id": "2047471783",
    "receipt_id": "DXVYcpGNExquSwZ66tTimTCHYqvE5TiqwWoNpY7uGm15",
    "predecessor_account_id": "devhub.near",
    "receiver_account_id": "devhub.near",
    "receipt_kind": "ACTION",
    "receipt_block": {
      "block_hash": "AQaLKTFSinJ24t9DutHiRdbrcJY2yLzuGdhDw93CShDr",
      "block_height": 109887888,
      "block_timestamp": 1704705323172275500
    },
    "receipt_outcome": {
      "gas_burnt": 210344511585,
      "tokens_burnt": 21034451158500000000,
      "executor_account_id": "devhub.near",
      "status": false
    },
    "transaction_hash": "Hnq7Jg4SeAnqFrSd4kG8a3c5DBXfnjKT5P98jiFkb5jU",
    "included_in_block_hash": "AQaLKTFSinJ24t9DutHiRdbrcJY2yLzuGdhDw93CShDr",
    "block_timestamp": "1704705323172275352",
    "block": {
      "block_height": 109887888
    },
    "receipt_conversion_tokens_burnt": "21034451158500000000",
    "actions": [
      {
        "action": "ADD_KEY",
        "method": null,
        "deposit": 0,
        "fee": 21034451158500000000,
        "args": null
      }
    ],
    "actions_agg": {
      "deposit": 0
    },
    "outcomes": {
      "status": false
    },
    "outcomes_agg": {
      "transaction_fee": 42068902317000000000
    }
  },
  {
    "id": "2047506598",
    "receipt_id": "3bRfDscpC4ebwNUeuwXBLsnF4HhUhE2N4adixu6Krh2G",
    "predecessor_account_id": "devhub.near",
    "receiver_account_id": "devhub.near",
    "receipt_kind": "ACTION",
    "receipt_block": {
      "block_hash": "5Sp6nQJMQPxNfeLosCzzS27ELe3YBpN3PuKafiS4HE4R",
      "block_height": 109888120,
      "block_timestamp": 1704705556911057400
    },
    "receipt_outcome": {
      "gas_burnt": 51584602224151,
      "tokens_burnt": 5.1584602224151e+21,
      "executor_account_id": "devhub.near",
      "status": true
    },
    "transaction_hash": "HQX7ekWCm4PYpgj48fNXqpb18hrSxxUu89oLDcgrfJgh",
    "included_in_block_hash": "5Sp6nQJMQPxNfeLosCzzS27ELe3YBpN3PuKafiS4HE4R",
    "block_timestamp": "1704705556911057296",
    "block": {
      "block_height": 109888120
    },
    "receipt_conversion_tokens_burnt": "770547599916100000000",
    "actions": [
      {
        "action": "DEPLOY_CONTRACT",
        "method": null,
        "deposit": 0,
        "fee": 5.1584602224151e+21,
        "args": null
      },
      {
        "action": "FUNCTION_CALL",
        "method": "new",
        "deposit": 0,
        "fee": 5.1584602224151e+21,
        "args": "{}"
      }
    ],
    "actions_agg": {
      "deposit": 0
    },
    "outcomes": {
      "status": true
    },
    "outcomes_agg": {
      "transaction_fee": 5.9290078223312e+21
    }
  },
  {
    "id": "2047506715",
    "receipt_id": "HB8EPDcwa95ChUQGCe9hnDs8dYaEhizomoSz5bmHWaD1",
    "predecessor_account_id": "system",
    "receiver_account_id": "devhub.near",
    "receipt_kind": "ACTION",
    "receipt_block": {
      "block_hash": "7RNzfvvCQ6npu2qWXcwTLBuuXLt3DF14yfFPSriUCpmz",
      "block_height": 109888121,
      "block_timestamp": 1704705558110161000
    },
    "receipt_outcome": {
      "gas_burnt": 223182562500,
      "tokens_burnt": 0,
      "executor_account_id": "devhub.near",
      "status": true
    },
    "transaction_hash": "HQX7ekWCm4PYpgj48fNXqpb18hrSxxUu89oLDcgrfJgh",
    "included_in_block_hash": "5Sp6nQJMQPxNfeLosCzzS27ELe3YBpN3PuKafiS4HE4R",
    "block_timestamp": "1704705556911057296",
    "block": {
      "block_height": 109888120
    },
    "receipt_conversion_tokens_burnt": "770547599916100000000",
    "actions": [
      {
        "action": "TRANSFER",
        "method": null,
        "deposit": 2.2092426967545255e+22,
        "fee": 0,
        "args": null
      }
    ],
    "actions_agg": {
      "deposit": 0
    },
    "outcomes": {
      "status": true
    },
    "outcomes_agg": {
      "transaction_fee": 5.9290078223312e+21
    }
  },
  {
    "id": "2047557348",
    "receipt_id": "C4i9McXL6uGRfz6tvwyoP1khaD9UiEVwbqvi6HU2JHs6",
    "predecessor_account_id": "devhub.near",
    "receiver_account_id": "community.devhub.near",
    "receipt_kind": "ACTION",
    "receipt_block": {
      "block_hash": "8ZEvbkXDmgCkou35Uv5Lht3oNPRLQHW2HqxwdKeQweoS",
      "block_height": 109888730,
      "block_timestamp": 1704706157620716000
    },
    "receipt_outcome": {
      "gas_burnt": 4174947687500,
      "tokens_burnt": 417494768750000000000,
      "executor_account_id": "community.devhub.near",
      "status": true
    },
    "transaction_hash": "FTd846yupwHcsKm8fJYAPU4aNN4cW5WnMDNWPJ59yEQF",
    "included_in_block_hash": "BR6vXCtDoYZdSUDicpxEmKSWL9R9txnUuMm6C5PiiN1P",
    "block_timestamp": "1704706156582756986",
    "block": {
      "block_height": 109888729
    },
    "receipt_conversion_tokens_burnt": "417494768750000000000",
    "actions": [
      {
        "action": "CREATE_ACCOUNT",
        "method": null,
        "deposit": 0,
        "fee": 417494768750000000000,
        "args": null
      },
      {
        "action": "TRANSFER",
        "method": null,
        "deposit": 2e+24,
        "fee": 417494768750000000000,
        "args": null
      },
      {
        "action": "ADD_KEY",
        "method": null,
        "deposit": 0,
        "fee": 417494768750000000000,
        "args": null
      }
    ],
    "actions_agg": {
      "deposit": 2e+24
    },
    "outcomes": {
      "status": true
    },
    "outcomes_agg": {
      "transaction_fee": 834989537500000000000
    }
  }
]