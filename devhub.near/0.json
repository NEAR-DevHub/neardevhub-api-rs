[
  {
    "id": "582371775",
    "receipt_id": "7hiUx1MQTVie5ZSVLTXKPAddHut6bKQktuwsQvdqyqjh",
    "predecessor_account_id": "near",
    "receiver_account_id": "devhub.near",
    "receipt_kind": "ACTION",
    "receipt_block": {
      "block_hash": "CmbxN7hZNuws1qYMi6REY1oc8pBUiLV47D4pCVLvJQow",
      "block_height": 75426751,
      "block_timestamp": 1664786711246198800
    },
    "receipt_outcome": {
      "gas_burnt": 424555062500,
      "tokens_burnt": 42455506250000000000,
      "executor_account_id": "devhub.near",
      "status": true
    },
    "transaction_hash": "DJdHQsWjbXbrSDRQac3DVztE6N8xkQ6sTaonugqevjhG",
    "included_in_block_hash": "sjXLj2YEnyUbFTmsADLzKW7vWb9KACQaZf4ZwiB66xo",
    "block_timestamp": "1664786708868090593",
    "block": {
      "block_height": 75426749
    },
    "receipt_conversion_tokens_burnt": "242816695274000000000",
    "actions": [
      {
        "action": "CREATE_ACCOUNT",
        "method": null,
        "deposit": 0,
        "fee": 42455506250000000000,
        "args": null
      },
      {
        "action": "ADD_KEY",
        "method": null,
        "deposit": 0,
        "fee": 42455506250000000000,
        "args": null
      },
      {
        "action": "TRANSFER",
        "method": null,
        "deposit": 1e+23,
        "fee": 42455506250000000000,
        "args": null
      }
    ],
    "actions_agg": {
      "deposit": 1e+23
    },
    "outcomes": {
      "status": true
    },
    "outcomes_agg": {
      "transaction_fee": 1.1674959986114e+21
    }
  },
  {
    "id": "582371852",
    "receipt_id": "EybANTGYnrFzRGU1nHNtWh6dXnQ2CDvwuWrmL51eiub8",
    "predecessor_account_id": "devhub.near",
    "receiver_account_id": "devhub.near",
    "receipt_kind": "ACTION",
    "receipt_block": {
      "block_hash": "46kYYEPKpp2E2icoWXE4Xitzd6Q4vjnG1q2XkuRP1RiM",
      "block_height": 75426757,
      "block_timestamp": 1664786718067402800
    },
    "receipt_outcome": {
      "gas_burnt": 209824625000,
      "tokens_burnt": 20982462500000000000,
      "executor_account_id": "devhub.near",
      "status": true
    },
    "transaction_hash": "Ay1RG4fv5TtUXfu6vn6QidtpVnjFBPRNQ5bUfU8SkYFy",
    "included_in_block_hash": "46kYYEPKpp2E2icoWXE4Xitzd6Q4vjnG1q2XkuRP1RiM",
    "block_timestamp": "1664786718067402854",
    "block": {
      "block_height": 75426757
    },
    "receipt_conversion_tokens_burnt": "20982462500000000000",
    "actions": [
      {
        "action": "ADD_KEY",
        "method": null,
        "deposit": 0,
        "fee": 20982462500000000000,
        "args": null
      }
    ],
    "actions_agg": {
      "deposit": 0
    },
    "outcomes": {
      "status": true
    },
    "outcomes_agg": {
      "transaction_fee": 41964925000000000000
    }
  },
  {
    "id": "582373205",
    "receipt_id": "AXdgKjNWcrxJJYCHU76jU8yEjpVP1eA3hY6ymDTUyL14",
    "predecessor_account_id": "devhub.near",
    "receiver_account_id": "nonothenono.near",
    "receipt_kind": "ACTION",
    "receipt_block": {
      "block_hash": "DktbgmrmvGd1vje2qmoaBWgUPK9YaGQXwqjfixiJqbw4",
      "block_height": 75426826,
      "block_timestamp": 1664786795297432300
    },
    "receipt_outcome": {
      "gas_burnt": 223182562500,
      "tokens_burnt": 22318256250000000000,
      "executor_account_id": "nonothenono.near",
      "status": true
    },
    "transaction_hash": "5Gs5pSYHNNZ1ftut8PDNjCQnwRzS492MEe2wxiA78WUc",
    "included_in_block_hash": "EVsnLC9u8SYAvxn4ixcyqWHtjqSohv9ygm53chi1SCXe",
    "block_timestamp": "1664786794164668993",
    "block": {
      "block_height": 75426825
    },
    "receipt_conversion_tokens_burnt": "22318256250000000000",
    "actions": [
      {
        "action": "TRANSFER",
        "method": null,
        "deposit": 4.7318035075e+22,
        "fee": 22318256250000000000,
        "args": null
      }
    ],
    "actions_agg": {
      "deposit": 4.7318035075e+22
    },
    "outcomes": {
      "status": true
    },
    "outcomes_agg": {
      "transaction_fee": 44636512500000000000
    }
  },
  {
    "id": "582373229",
    "receipt_id": "9JWMDjRPehNc4KryaEHtMHQ65YRfK12dntv4eVc3tTfF",
    "predecessor_account_id": "system",
    "receiver_account_id": "devhub.near",
    "receipt_kind": "ACTION",
    "receipt_block": {
      "block_hash": "4Kw7WPv3tv7nfJ2pEMEw5735bxZakB2HQB6UD7HtFBa8",
      "block_height": 75426827,
      "block_timestamp": 1664786796428260900
    },
    "receipt_outcome": {
      "gas_burnt": 223182562500,
      "tokens_burnt": 0,
      "executor_account_id": "devhub.near",
      "status": true
    },
    "transaction_hash": "5Gs5pSYHNNZ1ftut8PDNjCQnwRzS492MEe2wxiA78WUc",
    "included_in_block_hash": "EVsnLC9u8SYAvxn4ixcyqWHtjqSohv9ygm53chi1SCXe",
    "block_timestamp": "1664786794164668993",
    "block": {
      "block_height": 75426825
    },
    "receipt_conversion_tokens_burnt": "22318256250000000000",
    "actions": [
      {
        "action": "TRANSFER",
        "method": null,
        "deposit": 669547687500000000,
        "fee": 0,
        "args": null
      }
    ],
    "actions_agg": {
      "deposit": 4.7318035075e+22
    },
    "outcomes": {
      "status": true
    },
    "outcomes_agg": {
      "transaction_fee": 44636512500000000000
    }
  },
  {
    "id": "1184667529",
    "receipt_id": "bQqdLwha88Le8sBjSwmQQj2hESSCuMxq46VPGzCr46s",
    "predecessor_account_id": "devhub.near",
    "receiver_account_id": "devhub.near",
    "receipt_kind": "ACTION",
    "receipt_block": {
      "block_hash": "CZtVCq9iQErU5y5S2KJuchCnJAC76o1QWt6kQV5PLoR1",
      "block_height": 103193245,
      "block_timestamp": 1697102278220895500
    },
    "receipt_outcome": {
      "gas_burnt": 209824625000,
      "tokens_burnt": 20982462500000000000,
      "executor_account_id": "devhub.near",
      "status": true
    },
    "transaction_hash": "G8badMMai3yrAYBa7A7gtmm6BqLaC3hYp5LZfKJu5FHv",
    "included_in_block_hash": "CZtVCq9iQErU5y5S2KJuchCnJAC76o1QWt6kQV5PLoR1",
    "block_timestamp": "1697102278220895554",
    "block": {
      "block_height": 103193245
    },
    "receipt_conversion_tokens_burnt": "20982462500000000000",
    "actions": [
      {
        "action": "ADD_KEY",
        "method": null,
        "deposit": 0,
        "fee": 20982462500000000000,
        "args": null
      }
    ],
    "actions_agg": {
      "deposit": 0
    },
    "outcomes": {
      "status": true
    },
    "outcomes_agg": {
      "transaction_fee": 41964925000000000000
    }
  },
  {
    "id": "1184667777",
    "receipt_id": "Db1ML3qqXSkHoaJyiyAhLDujUvQebxfeT7vHFBX6nDFR",
    "predecessor_account_id": "devhub.near",
    "receiver_account_id": "devhub.near",
    "receipt_kind": "ACTION",
    "receipt_block": {
      "block_hash": "4DU44YtsnMWivQ88dHnvLuwjz4nj1iQeSRSJgAuC6bDi",
      "block_height": 103193265,
      "block_timestamp": 1697102301043265300
    },
    "receipt_outcome": {
      "gas_burnt": 209824625000,
      "tokens_burnt": 20982462500000000000,
      "executor_account_id": "devhub.near",
      "status": true
    },
    "transaction_hash": "2ZCz1nvfmCAwHkTbHAzFJyN3CTHArEVebzM4y8n8xAaV",
    "included_in_block_hash": "4DU44YtsnMWivQ88dHnvLuwjz4nj1iQeSRSJgAuC6bDi",
    "block_timestamp": "1697102301043265280",
    "block": {
      "block_height": 103193265
    },
    "receipt_conversion_tokens_burnt": "20982462500000000000",
    "actions": [
      {
        "action": "ADD_KEY",
        "method": null,
        "deposit": 0,
        "fee": 20982462500000000000,
        "args": null
      }
    ],
    "actions_agg": {
      "deposit": 0
    },
    "outcomes": {
      "status": true
    },
    "outcomes_agg": {
      "transaction_fee": 41964925000000000000
    }
  },
  {
    "id": "1184668699",
    "receipt_id": "Bxf4fLkDomPu5WXqM15FiRCSsbkKuuW8tzd4wPAf9etY",
    "predecessor_account_id": "nonothenono.near",
    "receiver_account_id": "devhub.near",
    "receipt_kind": "ACTION",
    "receipt_block": {
      "block_hash": "FgAW8WpEk4vARLwzMDqsvAxmr7e7HR4dTo7UP5ujXcsY",
      "block_height": 103193350,
      "block_timestamp": 1697102400730633200
    },
    "receipt_outcome": {
      "gas_burnt": 223182562500,
      "tokens_burnt": 22318256250000000000,
      "executor_account_id": "devhub.near",
      "status": true
    },
    "transaction_hash": "CbnhcJ8d7e4vpGZ37z48V54dG4H7yrueymPLvMoTb1ZN",
    "included_in_block_hash": "2Gbjn6o111L6L3X6PCq2Src1Jc6kvurdtgKvNtJJCK3v",
    "block_timestamp": "1697102399614742106",
    "block": {
      "block_height": 103193349
    },
    "receipt_conversion_tokens_burnt": "22318256250000000000",
    "actions": [
      {
        "action": "TRANSFER",
        "method": null,
        "deposit": 2.976e+23,
        "fee": 22318256250000000000,
        "args": null
      }
    ],
    "actions_agg": {
      "deposit": 2.976e+23
    },
    "outcomes": {
      "status": true
    },
    "outcomes_agg": {
      "transaction_fee": 44636512500000000000
    }
  },
  {
    "id": "1184670537",
    "receipt_id": "F7ZzdHXPAXFbMdoB6oSJrgSS8LvEWGaoNvzQdyLP2Pyg",
    "predecessor_account_id": "devhub.near",
    "receiver_account_id": "core.namesky.near",
    "receipt_kind": "ACTION",
    "receipt_block": {
      "block_hash": "w2gU4uD6o9Dsb8izYB7n3A7gRRHqV5nQQiDxPdZ8aiz",
      "block_height": 103193485,
      "block_timestamp": 1697102551088890000
    },
    "receipt_outcome": {
      "gas_burnt": 3955607942174,
      "tokens_burnt": 395560794217400000000,
      "executor_account_id": "core.namesky.near",
      "status": true
    },
    "transaction_hash": "AqL9kyBafRZx7PdJVoubm5Dns6xw7NA4BXkArCQ5hCgr",
    "included_in_block_hash": "8aCRBp4mhFfP3rxdmY6Kg3FGeFJ1GCpWCneY4JvySm14",
    "block_timestamp": "1697102550058829827",
    "block": {
      "block_height": 103193484
    },
    "receipt_conversion_tokens_burnt": "242801938109600000000",
    "actions": [
      {
        "action": "FUNCTION_CALL",
        "method": "nft_register",
        "deposit": 2e+23,
        "fee": 395560794217400000000,
        "args": "{\"minter_id\": \"nonothenono.near\"}"
      }
    ],
    "actions_agg": {
      "deposit": 2e+23
    },
    "outcomes": {
      "status": true
    },
    "outcomes_agg": {
      "transaction_fee": 638362732327000000000
    }
  },
  {
    "id": "1184670563",
    "receipt_id": "89XdtFP6JsT85nZoniq5qNkGR3TUrrXBZ6bdeYq1oGNq",
    "predecessor_account_id": "system",
    "receiver_account_id": "devhub.near",
    "receipt_kind": "ACTION",
    "receipt_block": {
      "block_hash": "AMmzLeeMbpui8paUQSbPv3fFWikBy2ZcpG6oZXNGRLnD",
      "block_height": 103193486,
      "block_timestamp": 1697102552168534300
    },
    "receipt_outcome": {
      "gas_burnt": 223182562500,
      "tokens_burnt": 0,
      "executor_account_id": "devhub.near",
      "status": true
    },
    "transaction_hash": "AqL9kyBafRZx7PdJVoubm5Dns6xw7NA4BXkArCQ5hCgr",
    "included_in_block_hash": "8aCRBp4mhFfP3rxdmY6Kg3FGeFJ1GCpWCneY4JvySm14",
    "block_timestamp": "1697102550058829827",
    "block": {
      "block_height": 103193484
    },
    "receipt_conversion_tokens_burnt": "242801938109600000000",
    "actions": [
      {
        "action": "TRANSFER",
        "method": null,
        "deposit": 3.5926765750489543e+21,
        "fee": 0,
        "args": null
      }
    ],
    "actions_agg": {
      "deposit": 2e+23
    },
    "outcomes": {
      "status": true
    },
    "outcomes_agg": {
      "transaction_fee": 638362732327000000000
    }
  },
  {
    "id": "1184670589",
    "receipt_id": "AgZTJDJC72arzxvq6ZbnobVqk2ywcitwjBRNtXmNbnsy",
    "predecessor_account_id": "devhub.near",
    "receiver_account_id": "devhub.near",
    "receipt_kind": "ACTION",
    "receipt_block": {
      "block_hash": "3Lmnz8t7Mwam34gy9gndBc7VnmhfucePTcJNskTJ6U1n",
      "block_height": 103193489,
      "block_timestamp": 1697102555647670000
    },
    "receipt_outcome": {
      "gas_burnt": 4183290503206,
      "tokens_burnt": 418329050320600000000,
      "executor_account_id": "devhub.near",
      "status": true
    },
    "transaction_hash": "J4Px3fsHRqLVhxfyku2kenqCYtkEG5R5NytC8uThXhHP",
    "included_in_block_hash": "3Lmnz8t7Mwam34gy9gndBc7VnmhfucePTcJNskTJ6U1n",
    "block_timestamp": "1697102555647669913",
    "block": {
      "block_height": 103193489
    },
    "receipt_conversion_tokens_burnt": "308222696244700000000",
    "actions": [
      {
        "action": "DEPLOY_CONTRACT",
        "method": null,
        "deposit": 0,
        "fee": 418329050320600000000,
        "args": null
      },
      {
        "action": "FUNCTION_CALL",
        "method": "init",
        "deposit": 1,
        "fee": 418329050320600000000,
        "args": null
      },
      {
        "action": "DELETE_KEY",
        "method": null,
        "deposit": 0,
        "fee": 418329050320600000000,
        "args": null
      },
      {
        "action": "DELETE_KEY",
        "method": null,
        "deposit": 0,
        "fee": 418329050320600000000,
        "args": null
      },
      {
        "action": "DELETE_KEY",
        "method": null,
        "deposit": 0,
        "fee": 418329050320600000000,
        "args": null
      },
      {
        "action": "DELETE_KEY",
        "method": null,
        "deposit": 0,
        "fee": 418329050320600000000,
        "args": null
      }
    ],
    "actions_agg": {
      "deposit": 1
    },
    "outcomes": {
      "status": true
    },
    "outcomes_agg": {
      "transaction_fee": 726551746565300000000
    }
  },
  {
    "id": "1184670604",
    "receipt_id": "8ntLUidJkcYyFkWZGBEkh61cKWZnjxvb3PqJbgdDU7fh",
    "predecessor_account_id": "system",
    "receiver_account_id": "devhub.near",
    "receipt_kind": "ACTION",
    "receipt_block": {
      "block_hash": "GbytnfZ8PhbUUx81RdPsWCHy3UHUu9qPoJkKCojmaBcf",
      "block_height": 103193490,
      "block_timestamp": 1697102556659337200
    },
    "receipt_outcome": {
      "gas_burnt": 223182562500,
      "tokens_burnt": 0,
      "executor_account_id": "devhub.near",
      "status": true
    },
    "transaction_hash": "J4Px3fsHRqLVhxfyku2kenqCYtkEG5R5NytC8uThXhHP",
    "included_in_block_hash": "3Lmnz8t7Mwam34gy9gndBc7VnmhfucePTcJNskTJ6U1n",
    "block_timestamp": "1697102555647669913",
    "block": {
      "block_height": 103193489
    },
    "receipt_conversion_tokens_burnt": "308222696244700000000",
    "actions": [
      {
        "action": "TRANSFER",
        "method": null,
        "deposit": 1.0502485261494156e+21,
        "fee": 0,
        "args": null
      }
    ],
    "actions_agg": {
      "deposit": 1
    },
    "outcomes": {
      "status": true
    },
    "outcomes_agg": {
      "transaction_fee": 726551746565300000000
    }
  },
  {
    "id": "1184670707",
    "receipt_id": "GVfJ2Ma62VZfWuFpUhkYJuZWUQ4VXpCMjbufqR9pHgNk",
    "predecessor_account_id": "core.namesky.near",
    "receiver_account_id": "devhub.near",
    "receipt_kind": "ACTION",
    "receipt_block": {
      "block_hash": "2xR8eP7vJVe1RYDPH5i8w3smhCtLyHNtMa6C76EHVYJU",
      "block_height": 103193498,
      "block_timestamp": 1697102566177697500
    },
    "receipt_outcome": {
      "gas_burnt": 2590860864199,
      "tokens_burnt": 259086086419900000000,
      "executor_account_id": "devhub.near",
      "status": true
    },
    "transaction_hash": "3mZGBhByEMJRiHcG6b68jveVqWEXPnFhiY7fEskxscMd",
    "included_in_block_hash": "2Qw92JczLARsjK7D1NwXts5DLmDgfZ59LQ98mvbb8GKz",
    "block_timestamp": "1697102563606311227",
    "block": {
      "block_height": 103193496
    },
    "receipt_conversion_tokens_burnt": "243499325924200000000",
    "actions": [
      {
        "action": "FUNCTION_CALL",
        "method": "validate",
        "deposit": 0,
        "fee": 259086086419900000000,
        "args": null
      }
    ],
    "actions_agg": {
      "deposit": 0
    },
    "outcomes": {
      "status": true
    },
    "outcomes_agg": {
      "transaction_fee": 2.6028866502564e+21
    }
  },
  {
    "id": "1195913393",
    "receipt_id": "3B4keAwzzsjcMSatjzfGi3CTY1BjaVRYiDtvsL7wSvsZ",
    "predecessor_account_id": "core.namesky.near",
    "receiver_account_id": "devhub.near",
    "receipt_kind": "ACTION",
    "receipt_block": {
      "block_hash": "AySx89soR4ZUMnPk1wx158ACgtM2X9f2wPwDEvTswMis",
      "block_height": 103303610,
      "block_timestamp": 1697228057504512800
    },
    "receipt_outcome": {
      "gas_burnt": 5267303635711,
      "tokens_burnt": 526730363571100000000,
      "executor_account_id": "devhub.near",
      "status": true
    },
    "transaction_hash": "EAsfHDSNjqeDRbXqK5qnFra7EMuM2G3BV1w5dC9YrBjC",
    "included_in_block_hash": "F2Z9cPsCmEAXKsXix5gd1C6u5nQYYkUhUAhdRtDSL7Li",
    "block_timestamp": "1697228055299799157",
    "block": {
      "block_height": 103303608
    },
    "receipt_conversion_tokens_burnt": "242815353713600000000",
    "actions": [
      {
        "action": "FUNCTION_CALL",
        "method": "take_control",
        "deposit": 0,
        "fee": 526730363571100000000,
        "args": null
      }
    ],
    "actions_agg": {
      "deposit": 1
    },
    "outcomes": {
      "status": true
    },
    "outcomes_agg": {
      "transaction_fee": 3.1646011705399e+21
    }
  },
  {
    "id": "1195913417",
    "receipt_id": "GrtqmMvACyZkE49neEeiUCt1aQe32JXdeLGNwN34PN2R",
    "predecessor_account_id": "devhub.near",
    "receiver_account_id": "devhub.near",
    "receipt_kind": "ACTION",
    "receipt_block": {
      "block_hash": "69So5HuQ1iSFkzmV8YWqw8sopLdJzbbD8xGtp42J3Snf",
      "block_height": 103303611,
      "block_timestamp": 1697228058915895600
    },
    "receipt_outcome": {
      "gas_burnt": 3024913407039,
      "tokens_burnt": 302491340703900000000,
      "executor_account_id": "devhub.near",
      "status": true
    },
    "transaction_hash": "EAsfHDSNjqeDRbXqK5qnFra7EMuM2G3BV1w5dC9YrBjC",
    "included_in_block_hash": "F2Z9cPsCmEAXKsXix5gd1C6u5nQYYkUhUAhdRtDSL7Li",
    "block_timestamp": "1697228055299799157",
    "block": {
      "block_height": 103303608
    },
    "receipt_conversion_tokens_burnt": "242815353713600000000",
    "actions": [
      {
        "action": "ADD_KEY",
        "method": null,
        "deposit": 0,
        "fee": 302491340703900000000,
        "args": null
      },
      {
        "action": "FUNCTION_CALL",
        "method": "remove_owner_key",
        "deposit": 1,
        "fee": 302491340703900000000,
        "args": null
      },
      {
        "action": "DEPLOY_CONTRACT",
        "method": null,
        "deposit": 0,
        "fee": 302491340703900000000,
        "args": null
      }
    ],
    "actions_agg": {
      "deposit": 1
    },
    "outcomes": {
      "status": true
    },
    "outcomes_agg": {
      "transaction_fee": 3.1646011705399e+21
    }
  },
  {
    "id": "1195917024",
    "receipt_id": "6eoQemq79ejFv6aNwo8F1G9WW1NCrsPFmKa2ajKHaj4J",
    "predecessor_account_id": "devhub.near",
    "receiver_account_id": "devhub.near",
    "receipt_kind": "ACTION",
    "receipt_block": {
      "block_hash": "E156RpVK4MhG7V55jgjVumZuzA8PdaHYnWbanxX4SiEK",
      "block_height": 103303775,
      "block_timestamp": 1697228235785827800
    },
    "receipt_outcome": {
      "gas_burnt": 209824625000,
      "tokens_burnt": 20982462500000000000,
      "executor_account_id": "devhub.near",
      "status": true
    },
    "transaction_hash": "6GuAr3oMoVgAMVkRRH7x4B1VBTpoVFqHhdHHf75V9jW1",
    "included_in_block_hash": "E156RpVK4MhG7V55jgjVumZuzA8PdaHYnWbanxX4SiEK",
    "block_timestamp": "1697228235785827810",
    "block": {
      "block_height": 103303775
    },
    "receipt_conversion_tokens_burnt": "20982462500000000000",
    "actions": [
      {
        "action": "ADD_KEY",
        "method": null,
        "deposit": 0,
        "fee": 20982462500000000000,
        "args": null
      }
    ],
    "actions_agg": {
      "deposit": 0
    },
    "outcomes": {
      "status": true
    },
    "outcomes_agg": {
      "transaction_fee": 41964925000000000000
    }
  },
  {
    "id": "1320572278",
    "receipt_id": "Dw3CP3AGJJXDN7zraBznzzU6zgNarFg7vuKVJLcVe3a",
    "predecessor_account_id": "devhub.near",
    "receiver_account_id": "devhub.near",
    "receipt_kind": "ACTION",
    "receipt_block": {
      "block_hash": "5m38iSAVNwjBCMXnb1fUaVbCo9HrwSkQUjS8tKokTpDZ",
      "block_height": 104684025,
      "block_timestamp": 1698839060071600000
    },
    "receipt_outcome": {
      "gas_burnt": 209824625000,
      "tokens_burnt": 20982462500000000000,
      "executor_account_id": "devhub.near",
      "status": true
    },
    "transaction_hash": "6KjkkPdQP5nww9cJyDLqTTXCUG52z9WuPE6m5L5iNQsP",
    "included_in_block_hash": "5m38iSAVNwjBCMXnb1fUaVbCo9HrwSkQUjS8tKokTpDZ",
    "block_timestamp": "1698839060071600236",
    "block": {
      "block_height": 104684025
    },
    "receipt_conversion_tokens_burnt": "20982462500000000000",
    "actions": [
      {
        "action": "ADD_KEY",
        "method": null,
        "deposit": 0,
        "fee": 20982462500000000000,
        "args": null
      }
    ],
    "actions_agg": {
      "deposit": 0
    },
    "outcomes": {
      "status": true
    },
    "outcomes_agg": {
      "transaction_fee": 41964925000000000000
    }
  },
  {
    "id": "1320572525",
    "receipt_id": "5dWhBwYhjKeiSmSnM8haUtDM5Nc1gCPBiuWH95z3Gkc8",
    "predecessor_account_id": "devhub.near",
    "receiver_account_id": "devhub.near",
    "receipt_kind": "ACTION",
    "receipt_block": {
      "block_hash": "9CFYjn5Cgc6SNFwpJfXJG4eCJknkq6bkB8mZtC7VVx3E",
      "block_height": 104684039,
      "block_timestamp": 1698839074854506200
    },
    "receipt_outcome": {
      "gas_burnt": 209824625000,
      "tokens_burnt": 20982462500000000000,
      "executor_account_id": "devhub.near",
      "status": true
    },
    "transaction_hash": "6pXAvhb5CrvMU4LngXRYo267jT3FPfj96prwwCZ5MQN5",
    "included_in_block_hash": "9CFYjn5Cgc6SNFwpJfXJG4eCJknkq6bkB8mZtC7VVx3E",
    "block_timestamp": "1698839074854506253",
    "block": {
      "block_height": 104684039
    },
    "receipt_conversion_tokens_burnt": "20982462500000000000",
    "actions": [
      {
        "action": "ADD_KEY",
        "method": null,
        "deposit": 0,
        "fee": 20982462500000000000,
        "args": null
      }
    ],
    "actions_agg": {
      "deposit": 0
    },
    "outcomes": {
      "status": true
    },
    "outcomes_agg": {
      "transaction_fee": 41964925000000000000
    }
  },
  {
    "id": "1320573310",
    "receipt_id": "48f2mC1aJ9RuPSzeKgkWWUS62btYtq3snxrwUr9dgrYa",
    "predecessor_account_id": "devhub.near",
    "receiver_account_id": "devhub.near",
    "receipt_kind": "ACTION",
    "receipt_block": {
      "block_hash": "H1kLU4hgDU2oaDSGQ1rA51h1wuKeAzEroXh2CBkC4ZeM",
      "block_height": 104684073,
      "block_timestamp": 1698839111136185300
    },
    "receipt_outcome": {
      "gas_burnt": 209824625000,
      "tokens_burnt": 20982462500000000000,
      "executor_account_id": "devhub.near",
      "status": true
    },
    "transaction_hash": "3hMq4PLntWHUwHU63GXJ4keKdJsq4mUMubn9HrzTzokb",
    "included_in_block_hash": "H1kLU4hgDU2oaDSGQ1rA51h1wuKeAzEroXh2CBkC4ZeM",
    "block_timestamp": "1698839111136185305",
    "block": {
      "block_height": 104684073
    },
    "receipt_conversion_tokens_burnt": "20982462500000000000",
    "actions": [
      {
        "action": "ADD_KEY",
        "method": null,
        "deposit": 0,
        "fee": 20982462500000000000,
        "args": null
      }
    ],
    "actions_agg": {
      "deposit": 0
    },
    "outcomes": {
      "status": true
    },
    "outcomes_agg": {
      "transaction_fee": 41964925000000000000
    }
  },
  {
    "id": "1336504053",
    "receipt_id": "DjxzKnB3L6jW2LLFJ59yBLrqMLYtBLk1G1UWx2QcwsH6",
    "predecessor_account_id": "frol.near",
    "receiver_account_id": "devhub.near",
    "receipt_kind": "ACTION",
    "receipt_block": {
      "block_hash": "HUX2V9nJ8mmaiTbUhbkWngKKFukwjEqcCFDG6pwQsAL9",
      "block_height": 104856829,
      "block_timestamp": 1699034093810184200
    },
    "receipt_outcome": {
      "gas_burnt": 223182562500,
      "tokens_burnt": 22318256250000000000,
      "executor_account_id": "devhub.near",
      "status": true
    },
    "transaction_hash": "7tJHevQMwx8LdLRHqZ1ArKdhit4ecRvhT5nNBB7EMvg7",
    "included_in_block_hash": "EMz8TqNNx3Y7S1QAQfCMFwpVuDCyHUpKKHkDAE3H2ZtN",
    "block_timestamp": "1699034092810944393",
    "block": {
      "block_height": 104856828
    },
    "receipt_conversion_tokens_burnt": "22318256250000000000",
    "actions": [
      {
        "action": "TRANSFER",
        "method": null,
        "deposit": 1e+25,
        "fee": 22318256250000000000,
        "args": null
      }
    ],
    "actions_agg": {
      "deposit": 1e+25
    },
    "outcomes": {
      "status": true
    },
    "outcomes_agg": {
      "transaction_fee": 44636512500000000000
    }
  },
  {
    "id": "1336504980",
    "receipt_id": "2oDSdvgGmM7mNqvAQk5c6uACt5HzVsGcDfMSEKgmRc3F",
    "predecessor_account_id": "devhub.near",
    "receiver_account_id": "social.near",
    "receipt_kind": "ACTION",
    "receipt_block": {
      "block_hash": "CjL45AAgPRSBzEPLfwGohWtbMnjH4TweaSuYNRY9TnU4",
      "block_height": 104856872,
      "block_timestamp": 1699034140199704000
    },
    "receipt_outcome": {
      "gas_burnt": 143726516102509,
      "tokens_burnt": 1.43726516102509e+22,
      "executor_account_id": "social.near",
      "status": false
    },
    "transaction_hash": "qinMDszJQSswqZyBxH7MRSNoC5jmA5VPTsBuwwyQZ1r",
    "included_in_block_hash": "GsdpwcPUQYXLuWx9hjXEmM33pRXLyAaNSUb3jnJAFcRQ",
    "block_timestamp": "1699034139316013885",
    "block": {
      "block_height": 104856871
    },
    "receipt_conversion_tokens_burnt": "316944391582600000000",
    "actions": [
      {
        "action": "FUNCTION_CALL",
        "method": "set",
        "deposit": 3.5279e+24,
        "fee": 1.43726516102509e+22,
        "args": "{\"data\": {\"devhub.near\": {\"widget\": {\"app\": {\"\": \"/**\\\\\\\\n * This is the main entry point for the DevHub application.\\\\\\\\n * Page route gets passed in through params, along with all other page props.\\\\\\\\n */\\\\\\\\n\\\\\\\\nconst { page, ...passProps } = props;\\\\\\\\n\\\\\\\\n// Import our modules\\\\\\\\nconst { AppLayout } = VM.require(\\\\\\\\n  \\\\\\\\\\\\\\\"devhub.near/widget/devhub.components.templates.AppLayout\\\\\\\\\\\\\\\"\\\\\\\\n);\\\\\\\\n\\\\\\\\nif (!AppLayout) {\\\\\\\\n  return <p>Loading modules...</p>;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// CSS styles to be used across the app.\\\\\\\\n// Define fonts here, as well as any other global styles.\\\\\\\\nconst Theme = styled.div`\\\\\\\\n  a {\\\\\\\\n    color: inherit;\\\\\\\\n  }\\\\\\\\n\\\\\\\\n  .attractable {\\\\\\\\n    box-shadow: 0 0.125rem 0.25rem rgba(0, 0, 0, 0.075) !important;\\\\\\\\n    transition: box-shadow 0.6s;\\\\\\\\n\\\\\\\\n    &:hover {\\\\\\\\n      box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.15) !important;\\\\\\\\n    }\\\\\\\\n  }\\\\\\\\n`;\\\\\\\\n\\\\\\\\nif (!page) {\\\\\\\\n  // If no page is specified, we default to the feed page TEMP\\\\\\\\n  page = \\\\\\\\\\\\\\\"home\\\\\\\\\\\\\\\";\\\\\\\\n}\\\\\\\\n\\\\\\\\n// This is our navigation, rendering the page based on the page parameter\\\\\\\\nfunction Page() {\\\\\\\\n  const routes = page.split(\\\\\\\\\\\\\\\".\\\\\\\\\\\\\\\");\\\\\\\\n  switch (routes[0]) {\\\\\\\\n    case \\\\\\\\\\\\\\\"home\\\\\\\\\\\\\\\": {\\\\\\\\n      return (\\\\\\\\n        <Widget\\\\\\\\n          src=\\\\\\\\\\\\\\\"devhub.near/widget/devhub.page.home\\\\\\\\\\\\\\\"\\\\\\\\n          props={passProps}\\\\\\\\n        />\\\\\\\\n      );\\\\\\\\n    }\\\\\\\\n    // ?page=communities\\\\\\\\n    case \\\\\\\\\\\\\\\"communities\\\\\\\\\\\\\\\": {\\\\\\\\n      return (\\\\\\\\n        <Widget\\\\\\\\n          src={\\\\\\\\\\\\\\\"devhub.near/widget/devhub.page.communities\\\\\\\\\\\\\\\"}\\\\\\\\n          props={passProps}\\\\\\\\n        />\\\\\\\\n      );\\\\\\\\n    }\\\\\\\\n    // ?page=community\\\\\\\\n    case \\\\\\\\\\\\\\\"community\\\\\\\\\\\\\\\": {\\\\\\\\n      return (\\\\\\\\n        // Considering to consolsidate this into a single widget,\\\\\\\\n        // where each level handles its own routing.\\\\\\\\n        // Modularizing a page just like we do with addons\\\\\\\\n        <Widget\\\\\\\\n          src={\\\\\\\\\\\\\\\"devhub.near/widget/devhub.entity.community.Provider\\\\\\\\\\\\\\\"}\\\\\\\\n          props={{\\\\\\\\n            ...passProps,\\\\\\\\n            Children: (p) => {\\\\\\\\n              // passing props from the Provider into the Children\\\\\\\\n              switch (routes[1]) {\\\\\\\\n                // ?page=community.configuration\\\\\\\\n                case \\\\\\\\\\\\\\\"configuration\\\\\\\\\\\\\\\": {\\\\\\\\n                  return (\\\\\\\\n                    <Widget\\\\\\\\n                      src={\\\\\\\\n                        \\\\\\\\\\\\\\\"devhub.near/widget/devhub.page.community.configuration\\\\\\\\\\\\\\\"\\\\\\\\n                      }\\\\\\\\n                      props={{\\\\\\\\n                        ...passProps,\\\\\\\\n                        ...p,\\\\\\\\n                      }}\\\\\\\\n                    />\\\\\\\\n                  );\\\\\\\\n                }\\\\\\\\n                // ?page=community\\\\\\\\n                default: {\\\\\\\\n                  return (\\\\\\\\n                    <Widget\\\\\\\\n                      src={\\\\\\\\\\\\\\\"devhub.near/widget/devhub.page.community.index\\\\\\\\\\\\\\\"}\\\\\\\\n                      props={{\\\\\\\\n                        ...passProps,\\\\\\\\n                        ...p,\\\\\\\\n                      }}\\\\\\\\n                    />\\\\\\\\n                  );\\\\\\\\n                }\\\\\\\\n              }\\\\\\\\n            },\\\\\\\\n          }}\\\\\\\\n        />\\\\\\\\n      );\\\\\\\\n    }\\\\\\\\n    // ?page=feed\\\\\\\\n    case \\\\\\\\\\\\\\\"feed\\\\\\\\\\\\\\\": {\\\\\\\\n      return (\\\\\\\\n        <Widget\\\\\\\\n          src={\\\\\\\\\\\\\\\"devhub.near/widget/devhub.page.feed\\\\\\\\\\\\\\\"}\\\\\\\\n          props={passProps}\\\\\\\\n        />\\\\\\\\n      );\\\\\\\\n    }\\\\\\\\n    // ?page=create\\\\\\\\n    case \\\\\\\\\\\\\\\"create\\\\\\\\\\\\\\\": {\\\\\\\\n      return (\\\\\\\\n        <Widget\\\\\\\\n          src={\\\\\\\\\\\\\\\"devhub.near/widget/devhub.page.create\\\\\\\\\\\\\\\"}\\\\\\\\n          props={passProps}\\\\\\\\n        />\\\\\\\\n      );\\\\\\\\n    }\\\\\\\\n    // ?page=about\\\\\\\\n    case \\\\\\\\\\\\\\\"about\\\\\\\\\\\\\\\": {\\\\\\\\n      return (\\\\\\\\n        <Widget\\\\\\\\n          src={\\\\\\\\\\\\\\\"devhub.near/widget/devhub.page.about\\\\\\\\\\\\\\\"}\\\\\\\\n          props={passProps}\\\\\\\\n        />\\\\\\\\n      );\\\\\\\\n    }\\\\\\\\n    case \\\\\\\\\\\\\\\"contribute\\\\\\\\\\\\\\\": {\\\\\\\\n      return (\\\\\\\\n        <Widget\\\\\\\\n          src={\\\\\\\\\\\\\\\"devhub.near/widget/devhub.page.contribute\\\\\\\\\\\\\\\"}\\\\\\\\n          props={passProps}\\\\\\\\n        />\\\\\\\\n      );\\\\\\\\n    }\\\\\\\\n    case \\\\\\\\\\\\\\\"profile\\\\\\\\\\\\\\\": {\\\\\\\\n      return (\\\\\\\\n        <Widget\\\\\\\\n          src={\\\\\\\\\\\\\\\"devhub.near/widget/devhub.page.profile\\\\\\\\\\\\\\\"}\\\\\\\\n          props={passProps}\\\\\\\\n        />\\\\\\\\n      );\\\\\\\\n    }\\\\\\\\n    // ?page=blog\\\\\\\\n    case \\\\\\\\\\\\\\\"blog\\\\\\\\\\\\\\\": {\\\\\\\\n      return (\\\\\\\\n        <Widget\\\\\\\\n          src={\\\\\\\\\\\\\\\"devhub.near/widget/devhub.page.blog\\\\\\\\\\\\\\\"}\\\\\\\\n          props={passProps}\\\\\\\\n        />\\\\\\\\n      );\\\\\\\\n    }\\\\\\\\n    case \\\\\\\\\\\\\\\"post\\\\\\\\\\\\\\\": {\\\\\\\\n      return (\\\\\\\\n        <Widget\\\\\\\\n          src={\\\\\\\\\\\\\\\"devhub.near/widget/devhub.page.post\\\\\\\\\\\\\\\"}\\\\\\\\n          props={passProps}\\\\\\\\n        />\\\\\\\\n      );\\\\\\\\n    }\\\\\\\\n\\\\\\\\n    default: {\\\\\\\\n      // TODO: 404 page\\\\\\\\n      return <p>404</p>;\\\\\\\\n    }\\\\\\\\n  }\\\\\\\\n}\\\\\\\\n\\\\\\\\nreturn (\\\\\\\\n  <Theme>\\\\\\\\n    <AppLayout page={page}>\\\\\\\\n      <Page />\\\\\\\\n    </AppLayout>\\\\\\\\n  </Theme>\\\\\\\\n);\\\\\\\\n\"}, \"core.lib.url\": {\"\": \"/**\\\\\\\\n * Generates a URL to a widget.\\\\\\\\n *\\\\\\\\n * @param {Object} options - Configuration options for constructing the URL.\\\\\\\\n * @param {string} [options.gateway] - The gateway or server address where the widget source is hosted (optional).\\\\\\\\n * @param {string} options.widgetSrc - The source path of the widget (required).\\\\\\\\n * @param {Object} [options.params] - An object containing key-value pairs representing query parameters to be appended to the URL (optional).\\\\\\\\n * @returns {string} - The constructed URL.\\\\\\\\n */\\\\\\\\nfunction href({ gateway, widgetSrc, params }) {\\\\\\\\n  // Check if query parameters are provided and filter out null values\\\\\\\\n  if (params) {\\\\\\\\n    params = (Object.entries(params) || [])\\\\\\\\n      .filter(([_key, nullable]) => (nullable ?? null) !== null)\\\\\\\\n      .map(([key, value]) => {\\\\\\\\n        // Omit the parameter if the value is null or the array is empty\\\\\\\\n        if (value === null || (Array.isArray(value) && value.length === 0)) {\\\\\\\\n          return null;\\\\\\\\n        }\\\\\\\\n\\\\\\\\n        // Convert array values to a comma-separated string with no spaces\\\\\\\\n        if (Array.isArray(value)) {\\\\\\\\n          return `${key}=${value.join(\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\")}`;\\\\\\\\n        } else {\\\\\\\\n          return `${key}=${value}`;\\\\\\\\n        }\\\\\\\\n      })\\\\\\\\n      .join(\\\\\\\\\\\\\\\"&\\\\\\\\\\\\\\\");\\\\\\\\n  }\\\\\\\\n\\\\\\\\n  // Check if the gateway already includes \\\\\\\\\\\\\\\"https://\\\\\\\\\\\\\\\" and construct the final URL accordingly\\\\\\\\n  if (gateway) {\\\\\\\\n    if (/(^https:\\\\\\\\\\\\\\\\/\\\\\\\\\\\\\\\\/)|(^http:\\\\\\\\\\\\\\\\/\\\\\\\\\\\\\\\\/)/.test(gateway)) {\\\\\\\\n      return `/${gateway}/${widgetSrc}${params && `?${params}`}`;\\\\\\\\n    } else {\\\\\\\\n      return `https://${gateway}/${widgetSrc}${params && `?${params}`}`;\\\\\\\\n    }\\\\\\\\n  } else {\\\\\\\\n    return `/${widgetSrc}${params && `?${params}`}`;\\\\\\\\n  }\\\\\\\\n}\\\\\\\\n\\\\\\\\nreturn { href };\\\\\\\\n\"}, \"core.lib.struct\": {\"\": \"/**\\\\\\\\n * Deeply updates an object\\\\\\\\\\\\'s field based on the given path and transformation function.\\\\\\\\n *\\\\\\\\n * @param {Object} target - The target object to update.\\\\\\\\n * @param {Array} path - The path to the field to update.\\\\\\\\n * @param {Function} transform - The transformation function to apply.\\\\\\\\n * @returns {Object} - The updated object.\\\\\\\\n */\\\\\\\\nconst deepFieldUpdate = (target, path, transform) => {\\\\\\\\n  if (path.length === 0) {\\\\\\\\n    return transform(target);\\\\\\\\n  }\\\\\\\\n\\\\\\\\n  const [nextNodeKey, ...remainingPath] = path;\\\\\\\\n\\\\\\\\n  return {\\\\\\\\n    ...target,\\\\\\\\n    [nextNodeKey]: deepFieldUpdate(\\\\\\\\n      target[nextNodeKey] ?? {},\\\\\\\\n      remainingPath,\\\\\\\\n      transform\\\\\\\\n    ),\\\\\\\\n  };\\\\\\\\n};\\\\\\\\n\\\\\\\\n/**\\\\\\\\n * Checks if two inputs (objects or arrays) are deeply equal.\\\\\\\\n *\\\\\\\\n * @param {Object|Array} input1 - The first input.\\\\\\\\n * @param {Object|Array} input2 - The second input.\\\\\\\\n * @returns {boolean} - True if the inputs are deeply equal, false otherwise.\\\\\\\\n */\\\\\\\\nconst isEqual = (input1, input2) => {\\\\\\\\n  const input1Str = JSON.stringify(input1);\\\\\\\\n  const input2Str = JSON.stringify(input2);\\\\\\\\n  return input1Str === input2Str;\\\\\\\\n};\\\\\\\\n\\\\\\\\n/**\\\\\\\\n * Creates a new object with sorted keys based on the input object.\\\\\\\\n *\\\\\\\\n * @param {Object} input - The input object.\\\\\\\\n * @returns {Object} - A new object with sorted keys.\\\\\\\\n */\\\\\\\\nconst toOrdered = (input) => {\\\\\\\\n  if (typeof input !== \\\\\\\\\\\\\\\"object\\\\\\\\\\\\\\\" || input === null) {\\\\\\\\n    return {};\\\\\\\\n  }\\\\\\\\n\\\\\\\\n  return Object.keys(input)\\\\\\\\n    .sort()\\\\\\\\n    .reduce((output, key) => ({ ...output, [key]: input[key] }), {});\\\\\\\\n};\\\\\\\\n\\\\\\\\n/**\\\\\\\\n * Picks specified keys from an object and returns a new object with those keys.\\\\\\\\n *\\\\\\\\n * @param {Object} sourceObject - The source object to pick keys from.\\\\\\\\n * @param {Array} keysToPick - An array of keys to pick.\\\\\\\\n * @returns {Object} - A new object containing the selected keys.\\\\\\\\n */\\\\\\\\nconst pick = (sourceObject, keysToPick) => {\\\\\\\\n  if (typeof sourceObject !== \\\\\\\\\\\\\\\"object\\\\\\\\\\\\\\\" || sourceObject === null) {\\\\\\\\n    return {};\\\\\\\\n  }\\\\\\\\n\\\\\\\\n  return Object.fromEntries(\\\\\\\\n    Object.entries(sourceObject).filter(([key, _]) => keysToPick.includes(key))\\\\\\\\n  );\\\\\\\\n};\\\\\\\\n\\\\\\\\n/**\\\\\\\\n * Checks if the input matches the expected type.\\\\\\\\n *\\\\\\\\n * @param {Object} input - The input to check.\\\\\\\\n * @returns {boolean} - True if the input is an object and not an array or null, false otherwise.\\\\\\\\n */\\\\\\\\nconst typeMatch = (input) =>\\\\\\\\n  input !== null && typeof input === \\\\\\\\\\\\\\\"object\\\\\\\\\\\\\\\" && !Array.isArray(input);\\\\\\\\n\\\\\\\\nreturn { deepFieldUpdate, isEqual, pick, toOrdered, typeMatch };\\\\\\\\n\"}, \"devhub.page.blog\": {\"\": \"const { id } = props;\\\\\\\\n\\\\\\\\nconst { Page } =\\\\\\\\n  VM.require(\\\\\\\\\\\\\\\"devhub.near/widget/devhub.entity.addon.blog.Page\\\\\\\\\\\\\\\") ||\\\\\\\\n  (() => <></>);\\\\\\\\n\\\\\\\\nif (id) {\\\\\\\\n  return (\\\\\\\\n    <Widget\\\\\\\\n      src=\\\\\\\\\\\\\\\"devhub.near/widget/devhub.entity.post.Postv2\\\\\\\\\\\\\\\"\\\\\\\\n      props={{ postKey: id, template: (p) => <Page {...(p || {})} /> }}\\\\\\\\n    />\\\\\\\\n  );\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst HeaderContainer = styled.div`\\\\\\\\n  display: flex;\\\\\\\\n  width: 100%;\\\\\\\\n  height: 60px;\\\\\\\\n  padding: 1rem 3rem;\\\\\\\\n  align-items: center;\\\\\\\\n  flex-shrink: 0;\\\\\\\\n  background-color: #f4f4f4;\\\\\\\\n\\\\\\\\n  @media screen and (max-width: 768px) {\\\\\\\\n    padding: 1rem;\\\\\\\\n  }\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst Header = styled.h2`\\\\\\\\n  color: #04a46e;\\\\\\\\n  font-size: 24px;\\\\\\\\n  font-style: normal;\\\\\\\\n  font-weight: 400;\\\\\\\\n  line-height: 120%; /* 28.8px */\\\\\\\\n  letter-spacing: -0.24px;\\\\\\\\n  margin: 0;\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst BlogContainer = styled.div`\\\\\\\\n  padding: 1rem 3rem;\\\\\\\\n\\\\\\\\n  @media screen and (max-width: 768px) {\\\\\\\\n    padding: 1rem;\\\\\\\\n  }\\\\\\\\n`;\\\\\\\\n\\\\\\\\n// I like that this reduces duplicate code with the Viewer, but I don\\\\\\\\\\\\'t like\\\\\\\\n// that \\\\\\\\\\\\\\\"Latest Blog Posts\\\\\\\\\\\\\\\" carries over... // TOOD: create a common blog\\\\\\\\n// feed... I think the addon.blog.Feed naming is confusing, as this should be a\\\\\\\\n// generic feed component.\\\\\\\\nreturn (\\\\\\\\n  <div className=\\\\\\\\\\\\\\\"w-100\\\\\\\\\\\\\\\">\\\\\\\\n    <HeaderContainer>\\\\\\\\n      <Header>/blog</Header>\\\\\\\\n    </HeaderContainer>\\\\\\\\n    <BlogContainer>\\\\\\\\n      <Widget\\\\\\\\n        src={\\\\\\\\\\\\\\\"devhub.near/widget/devhub.entity.addon.blog.Viewer\\\\\\\\\\\\\\\"}\\\\\\\\n        props={{\\\\\\\\n          handle: \\\\\\\\\\\\\\\"developer-dao\\\\\\\\\\\\\\\",\\\\\\\\n          hideTitle: true,\\\\\\\\n        }}\\\\\\\\n      />\\\\\\\\n    </BlogContainer>\\\\\\\\n  </div>\\\\\\\\n);\\\\\\\\n\"}, \"devhub.page.feed\": {\"\": \"const { author, recency, tag } = props;\\\\\\\\n\\\\\\\\nconst { href } = VM.require(\\\\\\\\\\\\\\\"devhub.near/widget/core.lib.url\\\\\\\\\\\\\\\");\\\\\\\\n\\\\\\\\nif (!href) {\\\\\\\\n  return <p>Loading modules...</p>;\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst Gradient = styled.div`\\\\\\\\n  height: 250px;\\\\\\\\n  text-align: center;\\\\\\\\n  background: radial-gradient(\\\\\\\\n    circle,\\\\\\\\n    rgba(29, 55, 57, 1) 30%,\\\\\\\\n    rgba(24, 24, 24, 1) 80%\\\\\\\\n  );\\\\\\\\n\\\\\\\\n  font-family: Arial, sans-serif;\\\\\\\\n\\\\\\\\n  .text-primary-gradient {\\\\\\\\n    color: #53fdca;\\\\\\\\n    -webkit-text-fill-color: transparent;\\\\\\\\n    background-image: linear-gradient(#8e76ba, #1ed2f0);\\\\\\\\n    -webkit-background-clip: text;\\\\\\\\n    background-clip: text;\\\\\\\\n  }\\\\\\\\n\\\\\\\\n  .subtitle-above {\\\\\\\\n    font-size: 18px;\\\\\\\\n    letter-spacing: 1px;\\\\\\\\n    font-family: Courier, monospace;\\\\\\\\n  }\\\\\\\\n\\\\\\\\n  .subtitle-below {\\\\\\\\n    font-size: 16px;\\\\\\\\n  }\\\\\\\\n\\\\\\\\n  .slogan {\\\\\\\\n    font-weight: 600;\\\\\\\\n    font-size: 60px;\\\\\\\\n  }\\\\\\\\n`;\\\\\\\\n\\\\\\\\nfunction Banner() {\\\\\\\\n  return (\\\\\\\\n    <div className=\\\\\\\\\\\\\\\"d-flex flex-column\\\\\\\\\\\\\\\">\\\\\\\\n      <Widget\\\\\\\\n        src={`devhub.near/widget/devhub.components.island.banner`}\\\\\\\\n        props={{\\\\\\\\n          title: (\\\\\\\\n            <>\\\\\\\\n              Welcome to /dev/hub,\\\\\\\\n              <br />\\\\\\\\n              <span style={{ color: \\\\\\\\\\\\\\\"#151515\\\\\\\\\\\\\\\" }}>the home base</span>\\\\\\\\n              <br />\\\\\\\\n              for developers on NEAR\\\\\\\\n            </>\\\\\\\\n          ),\\\\\\\\n          imageLink:\\\\\\\\n            \\\\\\\\\\\\\\\"https://ipfs.near.social/ipfs/bafybeiap2mzwsly4apaldxguiunx4rjwqyadksj5yxuzwrww3kue3ao5qe\\\\\\\\\\\\\\\",\\\\\\\\n        }}\\\\\\\\n      />\\\\\\\\n    </div>\\\\\\\\n  );\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst FeedPage = ({ recency, tag }) => {\\\\\\\\n  return (\\\\\\\\n    <div className=\\\\\\\\\\\\\\\"w-100\\\\\\\\\\\\\\\">\\\\\\\\n      <Banner />\\\\\\\\n      <Widget\\\\\\\\n        src={\\\\\\\\\\\\\\\"devhub.near/widget/devhub.feature.post-search.panel\\\\\\\\\\\\\\\"}\\\\\\\\n        props={{\\\\\\\\n          hideHeader: false,\\\\\\\\n          children: (\\\\\\\\n            <Widget\\\\\\\\n              src={\\\\\\\\n                \\\\\\\\\\\\\\\"devhub.near/widget/devhub.components.molecule.PostControls\\\\\\\\\\\\\\\"\\\\\\\\n              }\\\\\\\\n              props={{\\\\\\\\n                title: \\\\\\\\\\\\\\\"Post\\\\\\\\\\\\\\\",\\\\\\\\n                href: href({\\\\\\\\n                  widgetSrc: \\\\\\\\\\\\\\\"devhub.near/widget/app\\\\\\\\\\\\\\\",\\\\\\\\n                  params: { page: \\\\\\\\\\\\\\\"create\\\\\\\\\\\\\\\" },\\\\\\\\n                }),\\\\\\\\n              }}\\\\\\\\n            />\\\\\\\\n          ),\\\\\\\\n          recency,\\\\\\\\n          tag,\\\\\\\\n          transactionHashes: props.transactionHashes,\\\\\\\\n        }}\\\\\\\\n      />\\\\\\\\n    </div>\\\\\\\\n  );\\\\\\\\n};\\\\\\\\n\\\\\\\\nreturn FeedPage(props);\\\\\\\\n\"}, \"devhub.page.home\": {\"\": \"const HomeSections = [\\\\\\\\\\\\\\\"hero\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"explore\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"connect\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"participate\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"support\\\\\\\\\\\\\\\"];\\\\\\\\n\\\\\\\\nreturn (\\\\\\\\n  <>\\\\\\\\n    {HomeSections.map((it) => (\\\\\\\\n      <Widget\\\\\\\\n        src={`devhub.near/widget/devhub.components.island.${it}`}\\\\\\\\n        props={{ ...props }}\\\\\\\\n      />\\\\\\\\n    ))}\\\\\\\\n  </>\\\\\\\\n);\\\\\\\\n\"}, \"devhub.page.post\": {\"\": \"const { id } = props;\\\\\\\\n\\\\\\\\nconst Container = styled.div`\\\\\\\\n  padding: 0 3rem 3rem 3rem;\\\\\\\\n\\\\\\\\n  @media screen and (max-width: 768px) {\\\\\\\\n    padding: 0 1rem 1rem 1rem;\\\\\\\\n  }\\\\\\\\n`;\\\\\\\\n\\\\\\\\nreturn (\\\\\\\\n  <Container>\\\\\\\\n    <Widget\\\\\\\\n      src={\\\\\\\\\\\\\\\"devhub.near/widget/devhub.entity.post.Post\\\\\\\\\\\\\\\"}\\\\\\\\n      props={{\\\\\\\\n        id,\\\\\\\\n      }}\\\\\\\\n    />\\\\\\\\n  </Container>\\\\\\\\n);\\\\\\\\n\"}, \"devhub.page.about\": {\"\": \"const PageHeader = styled.h2`\\\\\\\\n  color: #04a46e;\\\\\\\\n  font-size: 24px;\\\\\\\\n  font-style: normal;\\\\\\\\n  font-weight: 400;\\\\\\\\n  line-height: 120%; /* 28.8px */\\\\\\\\n  letter-spacing: -0.24px;\\\\\\\\n\\\\\\\\n  width: 100%;\\\\\\\\n  padding: 1rem 3.125rem;\\\\\\\\n  margin-left: auto;\\\\\\\\n  //background: #fff;\\\\\\\\n\\\\\\\\n  margin-top: 1.5rem;\\\\\\\\n  margin-bottom: 1.5rem;\\\\\\\\n\\\\\\\\n  @media screen and (max-width: 786px) {\\\\\\\\n    padding: 1rem;\\\\\\\\n  }\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst Section = styled.div`\\\\\\\\n  padding: 1.5rem 8rem;\\\\\\\\n  display: flex;\\\\\\\\n  flex-direction: column;\\\\\\\\n\\\\\\\\n  display: flex;\\\\\\\\n  flex-direction: column;\\\\\\\\n\\\\\\\\n  gap: 2rem;\\\\\\\\n\\\\\\\\n  @media screen and (max-width: 786px) {\\\\\\\\n    padding: 1rem;\\\\\\\\n  }\\\\\\\\n\\\\\\\\n  h2 {\\\\\\\\n    color: #151515;\\\\\\\\n    font-size: 2rem;\\\\\\\\n    font-style: normal;\\\\\\\\n    font-weight: 700;\\\\\\\\n    line-height: 2rem; /* 55.556% */\\\\\\\\n\\\\\\\\n    margin: 1rem;\\\\\\\\n    margin-left: 0;\\\\\\\\n  }\\\\\\\\n\\\\\\\\n  p {\\\\\\\\n    color: #151515;\\\\\\\\n    font-size: 1.25rem;\\\\\\\\n    font-style: normal;\\\\\\\\n    font-weight: 400;\\\\\\\\n    line-height: 120%; /* 28.8px */\\\\\\\\n    margin-bottom: 1rem;\\\\\\\\n  }\\\\\\\\n\\\\\\\\n  h3 {\\\\\\\\n    color: #151515;\\\\\\\\n    font-size: 1.5rem;\\\\\\\\n    font-style: normal;\\\\\\\\n    font-weight: 700;\\\\\\\\n    line-height: 120%;\\\\\\\\n\\\\\\\\n    margin-top: 1rem;\\\\\\\\n  }\\\\\\\\n`;\\\\\\\\n\\\\\\\\nreturn (\\\\\\\\n  <>\\\\\\\\n    <Widget\\\\\\\\n      src={`devhub.near/widget/devhub.components.island.banner`}\\\\\\\\n      props={{\\\\\\\\n        title: (\\\\\\\\n          <>\\\\\\\\n            We are building <br />\\\\\\\\n            <span style={{ color: \\\\\\\\\\\\\\\"#151515\\\\\\\\\\\\\\\" }}>\\\\\\\\n              a decentralized community\\\\\\\\n            </span>{\\\\\\\\\\\\\\\" \\\\\\\\\\\\\\\"}\\\\\\\\n            <br />\\\\\\\\n            for NEAR Developers.\\\\\\\\n          </>\\\\\\\\n        ),\\\\\\\\n        imageLink:\\\\\\\\n          \\\\\\\\\\\\\\\"https://ipfs.near.social/ipfs/bafkreigtpjmgt3aphd3plbcremtvazeo7qsjvguw44m74zthyxbhj4toqe\\\\\\\\\\\\\\\",\\\\\\\\n      }}\\\\\\\\n    />\\\\\\\\n    <PageHeader>About /dev/hub</PageHeader>\\\\\\\\n    <Section>\\\\\\\\n      <h2>\\\\\\\\n        What is <span style={{ color: \\\\\\\\\\\\\\\"#00EC97\\\\\\\\\\\\\\\" }}>near</span>/dev/hub?\\\\\\\\n      </h2>\\\\\\\\n\\\\\\\\n      <div>\\\\\\\\n        <p>\\\\\\\\n          DevHub brings together individuals, projects, and organizations to\\\\\\\\n          build a decentralized NEAR developer ecosystem. We provide social\\\\\\\\n          structure and tools to fuel innovation, collaboration, and community\\\\\\\\n          within the NEAR ecosystem. Whether you\\\\\\\\u{2019}re a blockchain developer or\\\\\\\\n          advocate for the open web, DevHub is your gateway to making a\\\\\\\\n          meaningful impact on NEAR and beyond.\\\\\\\\n        </p>\\\\\\\\n\\\\\\\\n        <h3>Mission</h3>\\\\\\\\n        <p>\\\\\\\\n          Build a self-sufficient developer community to enable a thriving NEAR\\\\\\\\n          ecosystem.\\\\\\\\n        </p>\\\\\\\\n\\\\\\\\n        <h3>Values</h3>\\\\\\\\n        <p>\\\\\\\\n          <ul>\\\\\\\\n            <li>\\\\\\\\n              <b>Decentralized</b>: We are building together.\\\\\\\\n            </li>\\\\\\\\n            <li>\\\\\\\\n              <b>Transparent</b>: All decision making and communication is open.\\\\\\\\n            </li>\\\\\\\\n            <li>\\\\\\\\n              <b>Self-sufficient</b>: We do not critically depend on any single\\\\\\\\n              entity.\\\\\\\\n            </li>\\\\\\\\n            <li>\\\\\\\\n              <b>Robust</b>: Any role or team can be duplicated or replaced.\\\\\\\\n            </li>\\\\\\\\n            <li>\\\\\\\\n              <b>High-velocity</b>: We need to move faster than classic OSS.\\\\\\\\n            </li>\\\\\\\\n          </ul>\\\\\\\\n        </p>\\\\\\\\n\\\\\\\\n        <h3>Scope</h3>\\\\\\\\n        <p>\\\\\\\\n          DevHub covers a wide range of areas to support the NEAR developer\\\\\\\\n          ecosystem, including:\\\\\\\\n        </p>\\\\\\\\n\\\\\\\\n        <h3>Visual Identity:</h3>\\\\\\\\n        <p>\\\\\\\\n          <ul>\\\\\\\\n            <li>\\\\\\\\n              <b>Developer Tooling</b>: Contributing code to the NEAR Platform\\\\\\\\n              (blockchain and devtools) and facilitating technical decisions\\\\\\\\n              with recognized experts based on the needs of the community and\\\\\\\\n              ecosystem.\\\\\\\\n            </li>\\\\\\\\n            <li>\\\\\\\\n              <b>Developer Relations</b>: Engaging with the community across\\\\\\\\n              various social channels, gathering feedback, and improving\\\\\\\\n              documentation.\\\\\\\\n            </li>\\\\\\\\n            <li>\\\\\\\\n              <b>Deep-Tech Awareness</b>: Working with marketing partners to\\\\\\\\n              create awareness on interesting projects and technology areas.\\\\\\\\n            </li>\\\\\\\\n            <li>\\\\\\\\n              <b>Events and Hackathons</b>: Organizing events and empowering\\\\\\\\n              community leaders with resources to grow their local communities.\\\\\\\\n            </li>\\\\\\\\n            <li>\\\\\\\\n              <b>Education</b>: Partnering with universities across the globe to\\\\\\\\n              support students and scholars in exploring Web3 technologies\\\\\\\\n            </li>\\\\\\\\n            <li>\\\\\\\\n              <b>Platform</b>: Developing DevHub platform as a product to enable\\\\\\\\n              communities to collaborate and support each other.\\\\\\\\n            </li>\\\\\\\\n          </ul>\\\\\\\\n        </p>\\\\\\\\n\\\\\\\\n        <h3>Our Contributors</h3>\\\\\\\\n        <p>\\\\\\\\n          DevHub operates through DevDAO, which provides social structures to\\\\\\\\n          support developers. Within DevDAO, we have a dedicated core team of\\\\\\\\n          moderators and community contributors who work across the key areas\\\\\\\\n          above. We welcome contributions from any community members who want to\\\\\\\\n          join us in building our ecosystem and their own skills!\\\\\\\\n        </p>\\\\\\\\n\\\\\\\\n        <h3>Our Platform</h3>\\\\\\\\n        <p>\\\\\\\\n          Our main tool for interfacing is the DevHub Platform, where you can\\\\\\\\n          connect with others, share ideas and solutions, and access resources\\\\\\\\n          and support. You can also find communities working on a variety of\\\\\\\\n          areas, from protocol development to tooling and documentation.\\\\\\\\n        </p>\\\\\\\\n\\\\\\\\n        <h3>Join Us in Shaping NEAR\\\\\\\\u{2019}s Future</h3>\\\\\\\\n        <p>\\\\\\\\n          Regardless of your background or where you are on your developer\\\\\\\\n          journey, we\\\\\\\\u{2019}re happy you\\\\\\\\u{2019}re here! We hope you\\\\\\\\u{2019}ll explore, find your\\\\\\\\n          people, and discover paths to contribute that are most gratifying for\\\\\\\\n          you.\\\\\\\\n          <br />\\\\\\\\n          Let\\\\\\\\u{2019}s build the open web together.\\\\\\\\n        </p>\\\\\\\\n      </div>\\\\\\\\n    </Section>\\\\\\\\n  </>\\\\\\\\n);\\\\\\\\n\"}, \"devhub.page.addon\": {\"\": \"const Container = styled.div`\\\\\\\\n  display: flex;\\\\\\\\n  flex-direction: column;\\\\\\\\n  height: 100%;\\\\\\\\n  width: 100%;\\\\\\\\n  position: relative;\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst Content = styled.div`\\\\\\\\n  flex: 1;\\\\\\\\n  padding: 20px;\\\\\\\\n  overflow: auto;\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst SettingsButton = styled.button`\\\\\\\\n  position: absolute;\\\\\\\\n  top: 10px;\\\\\\\\n  right: 10px;\\\\\\\\n\\\\\\\\n  background-color: #fff;\\\\\\\\n  display: flex;\\\\\\\\n  padding: 14px 16px;\\\\\\\\n  align-items: center;\\\\\\\\n  gap: 16px;\\\\\\\\n  width: 50px;\\\\\\\\n  height: 50px;\\\\\\\\n\\\\\\\\n  border-radius: 4px;\\\\\\\\n  border: 1px solid #00ec97;\\\\\\\\n\\\\\\\\n  z-index: 10;\\\\\\\\n\\\\\\\\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);\\\\\\\\n\\\\\\\\n  &:hover {\\\\\\\\n    transform: translateY(2px);\\\\\\\\n    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);\\\\\\\\n  }\\\\\\\\n\\\\\\\\n  &:active {\\\\\\\\n    transform: translateY(0);\\\\\\\\n    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);\\\\\\\\n  }\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst CenteredMessage = styled.div`\\\\\\\\n  display: flex;\\\\\\\\n  flex-direction: column;\\\\\\\\n  justify-content: center;\\\\\\\\n  align-items: center;\\\\\\\\n  width: 100%;\\\\\\\\n  height: ${(p) => p.height ?? \\\\\\\\\\\\\\\"100%\\\\\\\\\\\\\\\"};\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst { addon, permissions, handle } = props;\\\\\\\\n\\\\\\\\nconst { getAllAddons, setCommunityAddon } = VM.require(\\\\\\\\n  \\\\\\\\\\\\\\\"devhub.near/widget/core.adapter.devhub-contract\\\\\\\\\\\\\\\"\\\\\\\\n);\\\\\\\\n\\\\\\\\nif (!getAllAddons || !setCommunityAddon) {\\\\\\\\n  return <p>Loading modules...</p>;\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst availableAddons = getAllAddons();\\\\\\\\nconst addonMatch = availableAddons.find((it) => it.id === addon.addon_id);\\\\\\\\n\\\\\\\\nif (!addonMatch) {\\\\\\\\n  return (\\\\\\\\n    <CenteredMessage height={\\\\\\\\\\\\\\\"384px\\\\\\\\\\\\\\\"}>\\\\\\\\n      <h2>Addon with id: \\\\\\\\\\\\\\\"{addon.addon_id}\\\\\\\\\\\\\\\" not found.</h2>\\\\\\\\n    </CenteredMessage>\\\\\\\\n  );\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst config = JSON.parse(addon.parameters || \\\\\\\\\\\\\\\"null\\\\\\\\\\\\\\\");\\\\\\\\n\\\\\\\\nconst ButtonRow = styled.div`\\\\\\\\n  display: flex;\\\\\\\\n  justify-content: space-between;\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst [view, setView] = useState(props.view || \\\\\\\\\\\\\\\"viewer\\\\\\\\\\\\\\\");\\\\\\\\n\\\\\\\\nconst checkFullyRefactored = (addon_id) => {\\\\\\\\n  switch (addon_id) {\\\\\\\\n    case \\\\\\\\\\\\\\\"kanban\\\\\\\\\\\\\\\":\\\\\\\\n    case \\\\\\\\\\\\\\\"github\\\\\\\\\\\\\\\":\\\\\\\\n      return false;\\\\\\\\n    default:\\\\\\\\n      return true;\\\\\\\\n  }\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst isFullyRefactored = checkFullyRefactored(addon.addon_id);\\\\\\\\n\\\\\\\\nreturn (\\\\\\\\n  <Container>\\\\\\\\n    {isFullyRefactored && // Unfully refactored addons have the configurator built in.\\\\\\\\n      // So we hide the header\\\\\\\\n      permissions.can_configure && (\\\\\\\\n        <SettingsButton\\\\\\\\n          onClick={() => setView(view === \\\\\\\\\\\\\\\"configure\\\\\\\\\\\\\\\" ? \\\\\\\\\\\\\\\"view\\\\\\\\\\\\\\\" : \\\\\\\\\\\\\\\"configure\\\\\\\\\\\\\\\")}\\\\\\\\n        >\\\\\\\\n          {view === \\\\\\\\\\\\\\\"configure\\\\\\\\\\\\\\\" ? (\\\\\\\\n            <span className=\\\\\\\\\\\\\\\"bi bi-x\\\\\\\\\\\\\\\"></span>\\\\\\\\n          ) : (\\\\\\\\n            <span className=\\\\\\\\\\\\\\\"bi bi-gear\\\\\\\\\\\\\\\"></span>\\\\\\\\n          )}\\\\\\\\n        </SettingsButton>\\\\\\\\n      )}\\\\\\\\n    <Content>\\\\\\\\n      {/* We hide in order to prevent a reload when we switch between two views */}\\\\\\\\n      <div className={`${view !== \\\\\\\\\\\\\\\"configure\\\\\\\\\\\\\\\" ? \\\\\\\\\\\\\\\"d-none\\\\\\\\\\\\\\\" : \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\"}`}>\\\\\\\\n        <Widget\\\\\\\\n          src={addonMatch.configurator_widget}\\\\\\\\n          props={{\\\\\\\\n            data: config,\\\\\\\\n            onSubmit: (data) => {\\\\\\\\n              setCommunityAddon({\\\\\\\\n                handle,\\\\\\\\n                addon: {\\\\\\\\n                  ...addon,\\\\\\\\n                  parameters: JSON.stringify(data),\\\\\\\\n                },\\\\\\\\n              });\\\\\\\\n            },\\\\\\\\n\\\\\\\\n            handle, // this is temporary prop drilling until kanban and github are migrated\\\\\\\\n            permissions,\\\\\\\\n          }}\\\\\\\\n        />\\\\\\\\n      </div>\\\\\\\\n      <div className={`${view === \\\\\\\\\\\\\\\"configure\\\\\\\\\\\\\\\" ? \\\\\\\\\\\\\\\"d-none\\\\\\\\\\\\\\\" : \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\"}`}>\\\\\\\\n        <Widget\\\\\\\\n          src={addonMatch.view_widget}\\\\\\\\n          props={{\\\\\\\\n            ...config,\\\\\\\\n            // temporary prop drilling\\\\\\\\n            handle,\\\\\\\\n            permissions,\\\\\\\\n          }}\\\\\\\\n        />\\\\\\\\n      </div>\\\\\\\\n    </Content>\\\\\\\\n  </Container>\\\\\\\\n);\\\\\\\\n\"}, \"devhub.page.create\": {\"\": \"const { href } = VM.require(\\\\\\\\\\\\\\\"devhub.near/widget/core.lib.url\\\\\\\\\\\\\\\");\\\\\\\\n\\\\\\\\nif (!href) {\\\\\\\\n  return <p>Loading modules...</p>;\\\\\\\\n}\\\\\\\\n\\\\\\\\n/* INCLUDE: \\\\\\\\\\\\\\\"core/lib/autocomplete\\\\\\\\\\\\\\\" */\\\\\\\\nconst autocompleteEnabled = true;\\\\\\\\n\\\\\\\\nconst AutoComplete = styled.div`\\\\\\\\n  z-index: 5;\\\\\\\\n\\\\\\\\n  > div > div {\\\\\\\\n    padding: calc(var(--padding) / 2);\\\\\\\\n  }\\\\\\\\n`;\\\\\\\\n\\\\\\\\nfunction textareaInputHandler(value) {\\\\\\\\n  const showAccountAutocomplete = /@[\\\\\\\\\\\\\\\\w][^\\\\\\\\\\\\\\\\s]*$/.test(value);\\\\\\\\n  State.update((lastKnownState) => ({\\\\\\\\n    ...lastKnownState,\\\\\\\\n    text: value,\\\\\\\\n    showAccountAutocomplete,\\\\\\\\n  }));\\\\\\\\n}\\\\\\\\n\\\\\\\\nfunction autoCompleteAccountId(id) {\\\\\\\\n  let description = state.description.replace(/[\\\\\\\\\\\\\\\\s]{0,1}@[^\\\\\\\\\\\\\\\\s]*$/, \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\");\\\\\\\\n  description = `${description} @${id}`.trim() + \\\\\\\\\\\\\\\" \\\\\\\\\\\\\\\";\\\\\\\\n  State.update((lastKnownState) => ({\\\\\\\\n    ...lastKnownState,\\\\\\\\n    description,\\\\\\\\n    showAccountAutocomplete: false,\\\\\\\\n  }));\\\\\\\\n}\\\\\\\\n/* END_INCLUDE: \\\\\\\\\\\\\\\"core/lib/autocomplete\\\\\\\\\\\\\\\" */\\\\\\\\n\\\\\\\\nconst DRAFT_STATE_STORAGE_KEY = \\\\\\\\\\\\\\\"DRAFT_STATE\\\\\\\\\\\\\\\";\\\\\\\\nconst parentId = props.parentId ?? null;\\\\\\\\nconst postId = props.postId ?? null;\\\\\\\\nconst mode = props.mode ?? \\\\\\\\\\\\\\\"Create\\\\\\\\\\\\\\\";\\\\\\\\n\\\\\\\\nconst referralLabels = props.referral ? [`referral:${props.referral}`] : [];\\\\\\\\nconst labelStrings = (props.labels ? props.labels.split(\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\") : []).concat(\\\\\\\\n  referralLabels\\\\\\\\n);\\\\\\\\nconst labels = labelStrings.map((s) => {\\\\\\\\n  return { name: s };\\\\\\\\n});\\\\\\\\n\\\\\\\\nState.init({\\\\\\\\n  seekingFunding: false,\\\\\\\\n\\\\\\\\n  author_id: context.accountId,\\\\\\\\n  // Should be a list of objects with field \\\\\\\\\\\\\\\"name\\\\\\\\\\\\\\\".\\\\\\\\n  labels,\\\\\\\\n  // Should be a list of labels as strings.\\\\\\\\n  // Both of the label structures should be modified together.\\\\\\\\n  labelStrings,\\\\\\\\n  postType: \\\\\\\\\\\\\\\"Idea\\\\\\\\\\\\\\\",\\\\\\\\n  name: props.name ?? \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\",\\\\\\\\n  description: props.description ?? \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\",\\\\\\\\n  amount: props.amount ?? \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\",\\\\\\\\n  token: props.token ?? \\\\\\\\\\\\\\\"USDT\\\\\\\\\\\\\\\",\\\\\\\\n  supervisor: props.supervisor ?? \\\\\\\\\\\\\\\"neardevdao.near\\\\\\\\\\\\\\\",\\\\\\\\n  githubLink: props.githubLink ?? \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\",\\\\\\\\n  warning: \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\",\\\\\\\\n  waitForDraftStateRestore: true,\\\\\\\\n});\\\\\\\\n\\\\\\\\nif (state.waitForDraftStateRestore) {\\\\\\\\n  const draftstatestring = Storage.privateGet(DRAFT_STATE_STORAGE_KEY);\\\\\\\\n  if (draftstatestring != null) {\\\\\\\\n    if (props.transactionHashes) {\\\\\\\\n      State.update({ waitForDraftStateRestore: false });\\\\\\\\n      Storage.privateSet(DRAFT_STATE_STORAGE_KEY, undefined);\\\\\\\\n    } else {\\\\\\\\n      try {\\\\\\\\n        const draftstate = JSON.parse(draftstatestring);\\\\\\\\n        State.update(draftstate);\\\\\\\\n      } catch (e) {\\\\\\\\n        console.error(\\\\\\\\\\\\\\\"error restoring draft\\\\\\\\\\\\\\\", draftstatestring);\\\\\\\\n      }\\\\\\\\n    }\\\\\\\\n    State.update({ waitForDraftStateRestore: false });\\\\\\\\n  }\\\\\\\\n}\\\\\\\\n\\\\\\\\n// This must be outside onClick, because Near.view returns null at first, and when the view call finished, it returns true/false.\\\\\\\\n// If checking this inside onClick, it will give `null` and we cannot tell the result is true or false.\\\\\\\\nlet grantNotify = Near.view(\\\\\\\\\\\\\\\"social.near\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"is_write_permission_granted\\\\\\\\\\\\\\\", {\\\\\\\\n  predecessor_id: \\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\",\\\\\\\\n  key: context.accountId + \\\\\\\\\\\\\\\"/index/notify\\\\\\\\\\\\\\\",\\\\\\\\n});\\\\\\\\nif (grantNotify === null) {\\\\\\\\n  return;\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst onSubmit = () => {\\\\\\\\n  Storage.privateSet(DRAFT_STATE_STORAGE_KEY, JSON.stringify(state));\\\\\\\\n\\\\\\\\n  let labels = state.labelStrings;\\\\\\\\n\\\\\\\\n  let body = {\\\\\\\\n    name: state.name,\\\\\\\\n    description: generateDescription(\\\\\\\\n      state.description,\\\\\\\\n      state.amount,\\\\\\\\n      state.token,\\\\\\\\n      state.supervisor,\\\\\\\\n      state.seekingFunding\\\\\\\\n    ),\\\\\\\\n  };\\\\\\\\n\\\\\\\\n  if (state.postType === \\\\\\\\\\\\\\\"Solution\\\\\\\\\\\\\\\") {\\\\\\\\n    body = {\\\\\\\\n      ...body,\\\\\\\\n      post_type: \\\\\\\\\\\\\\\"Solution\\\\\\\\\\\\\\\",\\\\\\\\n      solution_version: \\\\\\\\\\\\\\\"V1\\\\\\\\\\\\\\\",\\\\\\\\n    };\\\\\\\\n  } else {\\\\\\\\n    // Idea\\\\\\\\n    body = {\\\\\\\\n      ...body,\\\\\\\\n      post_type: \\\\\\\\\\\\\\\"Idea\\\\\\\\\\\\\\\",\\\\\\\\n      idea_version: \\\\\\\\\\\\\\\"V1\\\\\\\\\\\\\\\",\\\\\\\\n    };\\\\\\\\n  }\\\\\\\\n\\\\\\\\n  if (!context.accountId) return;\\\\\\\\n\\\\\\\\n  let txn = [];\\\\\\\\n  if (mode == \\\\\\\\\\\\\\\"Create\\\\\\\\\\\\\\\") {\\\\\\\\n    txn.push({\\\\\\\\n      contractName: \\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\",\\\\\\\\n      methodName: \\\\\\\\\\\\\\\"add_post\\\\\\\\\\\\\\\",\\\\\\\\n      args: {\\\\\\\\n        parent_id: parentId,\\\\\\\\n        labels,\\\\\\\\n        body: body,\\\\\\\\n      },\\\\\\\\n      deposit: Big(10).pow(21).mul(3),\\\\\\\\n      gas: Big(10).pow(12).mul(100),\\\\\\\\n    });\\\\\\\\n  } else if (mode == \\\\\\\\\\\\\\\"Edit\\\\\\\\\\\\\\\") {\\\\\\\\n    txn.push({\\\\\\\\n      contractName: \\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\",\\\\\\\\n      methodName: \\\\\\\\\\\\\\\"edit_post\\\\\\\\\\\\\\\",\\\\\\\\n      args: {\\\\\\\\n        id: postId,\\\\\\\\n        labels,\\\\\\\\n        body: body,\\\\\\\\n      },\\\\\\\\n      deposit: Big(10).pow(21).mul(2),\\\\\\\\n      gas: Big(10).pow(12).mul(100),\\\\\\\\n    });\\\\\\\\n  }\\\\\\\\n  if (mode == \\\\\\\\\\\\\\\"Create\\\\\\\\\\\\\\\" || mode == \\\\\\\\\\\\\\\"Edit\\\\\\\\\\\\\\\") {\\\\\\\\n    if (grantNotify === false) {\\\\\\\\n      txn.unshift({\\\\\\\\n        contractName: \\\\\\\\\\\\\\\"social.near\\\\\\\\\\\\\\\",\\\\\\\\n        methodName: \\\\\\\\\\\\\\\"grant_write_permission\\\\\\\\\\\\\\\",\\\\\\\\n        args: {\\\\\\\\n          predecessor_id: \\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\",\\\\\\\\n          keys: [context.accountId + \\\\\\\\\\\\\\\"/index/notify\\\\\\\\\\\\\\\"],\\\\\\\\n        },\\\\\\\\n        deposit: Big(10).pow(23),\\\\\\\\n        gas: Big(10).pow(12).mul(30),\\\\\\\\n      });\\\\\\\\n    }\\\\\\\\n    Near.call(txn);\\\\\\\\n  }\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst onIdeaClick = () => {\\\\\\\\n  State.update({ postType: \\\\\\\\\\\\\\\"Idea\\\\\\\\\\\\\\\", seekingFunding: false });\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst onSolutionClick = () => {\\\\\\\\n  State.update({ postType: \\\\\\\\\\\\\\\"Solution\\\\\\\\\\\\\\\" });\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst normalizeLabel = (label) =>\\\\\\\\n  label\\\\\\\\n    .replaceAll(/[- \\\\\\\\\\\\\\\\.]/g, \\\\\\\\\\\\\\\"_\\\\\\\\\\\\\\\")\\\\\\\\n    .replaceAll(/[^\\\\\\\\\\\\\\\\w]+/g, \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\")\\\\\\\\n    .replaceAll(/_+/g, \\\\\\\\\\\\\\\"-\\\\\\\\\\\\\\\")\\\\\\\\n    .replace(/^-+/, \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\")\\\\\\\\n    .replace(/-+$/, \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\")\\\\\\\\n    .toLowerCase()\\\\\\\\n    .trim(\\\\\\\\\\\\\\\"-\\\\\\\\\\\\\\\");\\\\\\\\n\\\\\\\\nconst checkLabel = (label) => {\\\\\\\\n  Near.asyncView(\\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"is_allowed_to_use_labels\\\\\\\\\\\\\\\", {\\\\\\\\n    editor: context.accountId,\\\\\\\\n    labels: [label],\\\\\\\\n  }).then((allowed) => {\\\\\\\\n    if (allowed) {\\\\\\\\n      State.update({ warning: \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\" });\\\\\\\\n    } else {\\\\\\\\n      State.update({\\\\\\\\n        warning:\\\\\\\\n          \\\\\\\\\\\\'The label \\\\\\\\\\\\\\\"\\\\\\\\\\\\' +\\\\\\\\n          label +\\\\\\\\n          \\\\\\\\\\\\'\\\\\\\\\\\\\\\" is protected and can only be added by moderators\\\\\\\\\\\\',\\\\\\\\n      });\\\\\\\\n      return;\\\\\\\\n    }\\\\\\\\n  });\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst setLabels = (labels) => {\\\\\\\\n  labels = labels.map((o) => {\\\\\\\\n    o.name = normalizeLabel(o.name);\\\\\\\\n    return o;\\\\\\\\n  });\\\\\\\\n  if (labels.length < state.labels.length) {\\\\\\\\n    let oldLabels = new Set(state.labels.map((label) => label.name));\\\\\\\\n    for (let label of labels) {\\\\\\\\n      oldLabels.delete(label.name);\\\\\\\\n    }\\\\\\\\n    let removed = oldLabels.values().next().value;\\\\\\\\n    Near.asyncView(\\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"is_allowed_to_use_labels\\\\\\\\\\\\\\\", {\\\\\\\\n      editor: context.accountId,\\\\\\\\n      labels: [removed],\\\\\\\\n    }).then((allowed) => {\\\\\\\\n      if (allowed) {\\\\\\\\n        let labelStrings = labels.map(({ name }) => name);\\\\\\\\n        State.update({ labels, labelStrings });\\\\\\\\n      } else {\\\\\\\\n        State.update({\\\\\\\\n          warning:\\\\\\\\n            \\\\\\\\\\\\'The label \\\\\\\\\\\\\\\"\\\\\\\\\\\\' +\\\\\\\\n            removed +\\\\\\\\n            \\\\\\\\\\\\'\\\\\\\\\\\\\\\" is protected and can only be updated by moderators\\\\\\\\\\\\',\\\\\\\\n        });\\\\\\\\n        return;\\\\\\\\n      }\\\\\\\\n    });\\\\\\\\n  } else {\\\\\\\\n    let labelStrings = labels.map((o) => {\\\\\\\\n      return o.name;\\\\\\\\n    });\\\\\\\\n    State.update({ labels, labelStrings });\\\\\\\\n  }\\\\\\\\n};\\\\\\\\nconst existingLabelStrings =\\\\\\\\n  Near.view(\\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"get_all_allowed_labels\\\\\\\\\\\\\\\", {\\\\\\\\n    editor: context.accountId,\\\\\\\\n  }) ?? [];\\\\\\\\nconst existingLabelSet = new Set(existingLabelStrings);\\\\\\\\nconst existingLabels = existingLabelStrings.map((s) => {\\\\\\\\n  return { name: s };\\\\\\\\n});\\\\\\\\n\\\\\\\\nconst labelEditor = (\\\\\\\\n  <div className=\\\\\\\\\\\\\\\"col-lg-12 mb-2\\\\\\\\\\\\\\\">\\\\\\\\n    <p className=\\\\\\\\\\\\\\\"fs-6 fw-bold mb-1\\\\\\\\\\\\\\\">Labels</p>\\\\\\\\n    <Typeahead\\\\\\\\n      multiple\\\\\\\\n      labelKey=\\\\\\\\\\\\\\\"name\\\\\\\\\\\\\\\"\\\\\\\\n      onInputChange={checkLabel}\\\\\\\\n      onChange={setLabels}\\\\\\\\n      options={existingLabels}\\\\\\\\n      placeholder=\\\\\\\\\\\\\\\"near.social, widget, NEP, standard, protocol, tool\\\\\\\\\\\\\\\"\\\\\\\\n      selected={state.labels}\\\\\\\\n      positionFixed\\\\\\\\n      allowNew={(results, props) => {\\\\\\\\n        return (\\\\\\\\n          !existingLabelSet.has(props.text) &&\\\\\\\\n          props.selected.filter((selected) => selected.name === props.text)\\\\\\\\n            .length == 0 &&\\\\\\\\n          Near.view(\\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"is_allowed_to_use_labels\\\\\\\\\\\\\\\", {\\\\\\\\n            editor: context.accountId,\\\\\\\\n            labels: [props.text],\\\\\\\\n          })\\\\\\\\n        );\\\\\\\\n      }}\\\\\\\\n    />\\\\\\\\n  </div>\\\\\\\\n);\\\\\\\\n\\\\\\\\nconst nameDiv = (\\\\\\\\n  <div className=\\\\\\\\\\\\\\\"col-lg-6 mb-2\\\\\\\\\\\\\\\">\\\\\\\\n    <p className=\\\\\\\\\\\\\\\"fs-6 fw-bold mb-1\\\\\\\\\\\\\\\">Title</p>\\\\\\\\n    <input\\\\\\\\n      type=\\\\\\\\\\\\\\\"text\\\\\\\\\\\\\\\"\\\\\\\\n      value={state.name}\\\\\\\\n      onChange={(event) => State.update({ name: event.target.value })}\\\\\\\\n    />\\\\\\\\n  </div>\\\\\\\\n);\\\\\\\\n\\\\\\\\nconst descriptionDiv = (\\\\\\\\n  <div className=\\\\\\\\\\\\\\\"col-lg-12 mb-2\\\\\\\\\\\\\\\">\\\\\\\\n    <p className=\\\\\\\\\\\\\\\"fs-6 fw-bold mb-1\\\\\\\\\\\\\\\">Description</p>\\\\\\\\n    <Widget\\\\\\\\n      src=\\\\\\\\\\\\\\\"devhub.near/widget/devhub.components.molecule.MarkdownEditor\\\\\\\\\\\\\\\"\\\\\\\\n      props={{\\\\\\\\n        data: { handler: state.handler, content: state.description },\\\\\\\\n        onChange: (content) => {\\\\\\\\n          State.update({ description: content, handler: \\\\\\\\\\\\\\\"update\\\\\\\\\\\\\\\" });\\\\\\\\n          textareaInputHandler(content);\\\\\\\\n        },\\\\\\\\n      }}\\\\\\\\n    />\\\\\\\\n    {autocompleteEnabled && state.showAccountAutocomplete && (\\\\\\\\n      <AutoComplete>\\\\\\\\n        <Widget\\\\\\\\n          src=\\\\\\\\\\\\\\\"near/widget/AccountAutocomplete\\\\\\\\\\\\\\\"\\\\\\\\n          props={{\\\\\\\\n            term: state.text.split(\\\\\\\\\\\\\\\"@\\\\\\\\\\\\\\\").pop(),\\\\\\\\n            onSelect: autoCompleteAccountId,\\\\\\\\n            onClose: () => State.update({ showAccountAutocomplete: false }),\\\\\\\\n          }}\\\\\\\\n        />\\\\\\\\n      </AutoComplete>\\\\\\\\n    )}\\\\\\\\n  </div>\\\\\\\\n);\\\\\\\\n\\\\\\\\nconst isFundraisingDiv = (\\\\\\\\n  // This is jank with just btns and not radios. But the radios were glitchy af\\\\\\\\n  <>\\\\\\\\n    <div class=\\\\\\\\\\\\\\\"mb-2\\\\\\\\\\\\\\\">\\\\\\\\n      <p class=\\\\\\\\\\\\\\\"fs-6 fw-bold mb-1\\\\\\\\\\\\\\\">\\\\\\\\n        Are you seeking funding for your solution?\\\\\\\\n        <span class=\\\\\\\\\\\\\\\"text-muted fw-normal\\\\\\\\\\\\\\\">(Optional)</span>\\\\\\\\n      </p>\\\\\\\\n      <div class=\\\\\\\\\\\\\\\"form-check form-check-inline\\\\\\\\\\\\\\\">\\\\\\\\n        <label class=\\\\\\\\\\\\\\\"form-check-label\\\\\\\\\\\\\\\">\\\\\\\\n          <button\\\\\\\\n            className=\\\\\\\\\\\\\\\"btn btn-light p-0\\\\\\\\\\\\\\\"\\\\\\\\n            style={{\\\\\\\\n              backgroundColor: state.seekingFunding ? \\\\\\\\\\\\\\\"#0C7283\\\\\\\\\\\\\\\" : \\\\\\\\\\\\\\\"inherit\\\\\\\\\\\\\\\",\\\\\\\\n              color: \\\\\\\\\\\\\\\"#f3f3f3\\\\\\\\\\\\\\\",\\\\\\\\n              border: \\\\\\\\\\\\\\\"solid #D9D9D9\\\\\\\\\\\\\\\",\\\\\\\\n              borderRadius: \\\\\\\\\\\\\\\"100%\\\\\\\\\\\\\\\",\\\\\\\\n              height: \\\\\\\\\\\\\\\"20px\\\\\\\\\\\\\\\",\\\\\\\\n              width: \\\\\\\\\\\\\\\"20px\\\\\\\\\\\\\\\",\\\\\\\\n            }}\\\\\\\\n            onClick={() => State.update({ seekingFunding: true })}\\\\\\\\n          />\\\\\\\\n          Yes\\\\\\\\n        </label>\\\\\\\\n      </div>\\\\\\\\n      <div class=\\\\\\\\\\\\\\\"form-check form-check-inline\\\\\\\\\\\\\\\">\\\\\\\\n        <label class=\\\\\\\\\\\\\\\"form-check-label\\\\\\\\\\\\\\\">\\\\\\\\n          <button\\\\\\\\n            className=\\\\\\\\\\\\\\\"btn btn-light p-0\\\\\\\\\\\\\\\"\\\\\\\\n            style={{\\\\\\\\n              backgroundColor: !state.seekingFunding ? \\\\\\\\\\\\\\\"#0C7283\\\\\\\\\\\\\\\" : \\\\\\\\\\\\\\\"inherit\\\\\\\\\\\\\\\",\\\\\\\\n              color: \\\\\\\\\\\\\\\"#f3f3f3\\\\\\\\\\\\\\\",\\\\\\\\n              border: \\\\\\\\\\\\\\\"solid #D9D9D9\\\\\\\\\\\\\\\",\\\\\\\\n              borderRadius: \\\\\\\\\\\\\\\"100%\\\\\\\\\\\\\\\",\\\\\\\\n              height: \\\\\\\\\\\\\\\"20px\\\\\\\\\\\\\\\",\\\\\\\\n              width: \\\\\\\\\\\\\\\"20px\\\\\\\\\\\\\\\",\\\\\\\\n            }}\\\\\\\\n            onClick={() => State.update({ seekingFunding: false })}\\\\\\\\n          />\\\\\\\\n          No\\\\\\\\n        </label>\\\\\\\\n      </div>\\\\\\\\n    </div>\\\\\\\\n  </>\\\\\\\\n);\\\\\\\\n\\\\\\\\nconst fundraisingDiv = (\\\\\\\\n  <div class=\\\\\\\\\\\\\\\"d-flex flex-column mb-2\\\\\\\\\\\\\\\">\\\\\\\\n    <div className=\\\\\\\\\\\\\\\"col-lg-6  mb-2\\\\\\\\\\\\\\\">\\\\\\\\n      Currency\\\\\\\\n      <select\\\\\\\\n        onChange={(event) => State.update({ token: event.target.value })}\\\\\\\\n        class=\\\\\\\\\\\\\\\"form-select\\\\\\\\\\\\\\\"\\\\\\\\n        aria-label=\\\\\\\\\\\\\\\"Default select\\\\\\\\\\\\\\\"\\\\\\\\n      >\\\\\\\\n        <option selected value=\\\\\\\\\\\\\\\"USDT\\\\\\\\\\\\\\\">\\\\\\\\n          USDT\\\\\\\\n        </option>\\\\\\\\n        <option value=\\\\\\\\\\\\\\\"NEAR\\\\\\\\\\\\\\\">NEAR</option>\\\\\\\\n      </select>\\\\\\\\n    </div>\\\\\\\\n    <div className=\\\\\\\\\\\\\\\"col-lg-6 mb-2\\\\\\\\\\\\\\\">\\\\\\\\n      Requested amount <span class=\\\\\\\\\\\\\\\"text-muted fw-normal\\\\\\\\\\\\\\\">(Numbers Only)</span>\\\\\\\\n      <input\\\\\\\\n        type=\\\\\\\\\\\\\\\"number\\\\\\\\\\\\\\\"\\\\\\\\n        value={parseInt(state.amount) > 0 ? state.amount : \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\"}\\\\\\\\n        min={0}\\\\\\\\n        onChange={(event) =>\\\\\\\\n          State.update({\\\\\\\\n            amount: Number(\\\\\\\\n              event.target.value.toString().replace(/e/g, \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\")\\\\\\\\n            ).toString(),\\\\\\\\n          })\\\\\\\\n        }\\\\\\\\n      />\\\\\\\\n    </div>\\\\\\\\n    <div className=\\\\\\\\\\\\\\\"col-lg-6 mb-2\\\\\\\\\\\\\\\">\\\\\\\\n      <p class=\\\\\\\\\\\\\\\"mb-1\\\\\\\\\\\\\\\">\\\\\\\\n        Requested sponsor <span class=\\\\\\\\\\\\\\\"text-muted fw-normal\\\\\\\\\\\\\\\">(Optional)</span>\\\\\\\\n      </p>\\\\\\\\n      <p style={{ fontSize: \\\\\\\\\\\\\\\"13px\\\\\\\\\\\\\\\" }} class=\\\\\\\\\\\\\\\"m-0 text-muted fw-light\\\\\\\\\\\\\\\">\\\\\\\\n        If you are requesting funding from a specific sponsor, please enter\\\\\\\\n        their username.\\\\\\\\n      </p>\\\\\\\\n      <div class=\\\\\\\\\\\\\\\"input-group flex-nowrap\\\\\\\\\\\\\\\">\\\\\\\\n        <span class=\\\\\\\\\\\\\\\"input-group-text\\\\\\\\\\\\\\\" id=\\\\\\\\\\\\\\\"addon-wrapping\\\\\\\\\\\\\\\">\\\\\\\\n          @\\\\\\\\n        </span>\\\\\\\\n        <input\\\\\\\\n          type=\\\\\\\\\\\\\\\"text\\\\\\\\\\\\\\\"\\\\\\\\n          class=\\\\\\\\\\\\\\\"form-control\\\\\\\\\\\\\\\"\\\\\\\\n          placeholder=\\\\\\\\\\\\\\\"Enter username\\\\\\\\\\\\\\\"\\\\\\\\n          value={state.supervisor}\\\\\\\\n          onChange={(event) => State.update({ supervisor: event.target.value })}\\\\\\\\n        />\\\\\\\\n      </div>\\\\\\\\n    </div>\\\\\\\\n  </div>\\\\\\\\n);\\\\\\\\n\\\\\\\\nfunction generateDescription(text, amount, token, supervisor, seekingFunding) {\\\\\\\\n  const fundingText =\\\\\\\\n    amount > 0 && token ? `###### Requested amount: ${amount} ${token}\\\\\\\\\\\\\\\\n` : \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\";\\\\\\\\n  const supervisorText = supervisor\\\\\\\\n    ? `###### Requested sponsor: @${supervisor}\\\\\\\\\\\\\\\\n`\\\\\\\\n    : \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\";\\\\\\\\n  return seekingFunding ? `${fundingText}${supervisorText}${text}` : text;\\\\\\\\n}\\\\\\\\n\\\\\\\\nreturn (\\\\\\\\n  <div class=\\\\\\\\\\\\\\\"bg-light d-flex flex-column flex-grow-1 w-100\\\\\\\\\\\\\\\">\\\\\\\\n    <div class=\\\\\\\\\\\\\\\"mx-5 mb-5\\\\\\\\\\\\\\\">\\\\\\\\n      <div aria-label=\\\\\\\\\\\\\\\"breadcrumb\\\\\\\\\\\\\\\">\\\\\\\\n        <ol class=\\\\\\\\\\\\\\\"breadcrumb\\\\\\\\\\\\\\\">\\\\\\\\n          <li class=\\\\\\\\\\\\\\\"breadcrumb-item\\\\\\\\\\\\\\\">\\\\\\\\n            <Link\\\\\\\\n              style={{\\\\\\\\n                color: \\\\\\\\\\\\\\\"#3252A6\\\\\\\\\\\\\\\",\\\\\\\\n              }}\\\\\\\\n              className=\\\\\\\\\\\\\\\"fw-bold\\\\\\\\\\\\\\\"\\\\\\\\n              to={href({\\\\\\\\n                widgetSrc: \\\\\\\\\\\\\\\"devhub.near/widget/app\\\\\\\\\\\\\\\",\\\\\\\\n                params: { page: \\\\\\\\\\\\\\\"feed\\\\\\\\\\\\\\\" },\\\\\\\\n              })}\\\\\\\\n            >\\\\\\\\n              DevHub\\\\\\\\n            </Link>\\\\\\\\n          </li>\\\\\\\\n          <li class=\\\\\\\\\\\\\\\"breadcrumb-item active\\\\\\\\\\\\\\\" aria-current=\\\\\\\\\\\\\\\"page\\\\\\\\\\\\\\\">\\\\\\\\n            Create new\\\\\\\\n          </li>\\\\\\\\n        </ol>\\\\\\\\n      </div>\\\\\\\\n      {props.transactionHashes ? (\\\\\\\\n        <>\\\\\\\\n          Post created successfully. Back to{\\\\\\\\\\\\\\\" \\\\\\\\\\\\\\\"}\\\\\\\\n          <Link\\\\\\\\n            style={{\\\\\\\\n              color: \\\\\\\\\\\\\\\"#3252A6\\\\\\\\\\\\\\\",\\\\\\\\n            }}\\\\\\\\n            className=\\\\\\\\\\\\\\\"fw-bold\\\\\\\\\\\\\\\"\\\\\\\\n            to={href({\\\\\\\\n              widgetSrc: \\\\\\\\\\\\\\\"devhub.near/widget/app\\\\\\\\\\\\\\\",\\\\\\\\n              params: { page: \\\\\\\\\\\\\\\"feed\\\\\\\\\\\\\\\" },\\\\\\\\n            })}\\\\\\\\n          >\\\\\\\\n            feed\\\\\\\\n          </Link>\\\\\\\\n        </>\\\\\\\\n      ) : (\\\\\\\\n        <>\\\\\\\\n          <h4>Create a new post</h4>\\\\\\\\n          <p>{state.seekingFunding}</p>\\\\\\\\n          <div class=\\\\\\\\\\\\\\\"card border-light\\\\\\\\\\\\\\\">\\\\\\\\n            <div class=\\\\\\\\\\\\\\\"card-body\\\\\\\\\\\\\\\">\\\\\\\\n              <p class=\\\\\\\\\\\\\\\"card-title fw-bold fs-6\\\\\\\\\\\\\\\">What do you want to create?</p>\\\\\\\\n              <div class=\\\\\\\\\\\\\\\"d-flex flex-row gap-2\\\\\\\\\\\\\\\">\\\\\\\\n                <button\\\\\\\\n                  onClick={onIdeaClick}\\\\\\\\n                  type=\\\\\\\\\\\\\\\"button\\\\\\\\\\\\\\\"\\\\\\\\n                  class={`btn btn-outline-secondary`}\\\\\\\\n                  style={\\\\\\\\n                    state.postType === \\\\\\\\\\\\\\\"Idea\\\\\\\\\\\\\\\"\\\\\\\\n                      ? {\\\\\\\\n                          backgroundColor: \\\\\\\\\\\\\\\"#0C7283\\\\\\\\\\\\\\\",\\\\\\\\n                          color: \\\\\\\\\\\\\\\"#f3f3f3\\\\\\\\\\\\\\\",\\\\\\\\n                        }\\\\\\\\n                      : {}\\\\\\\\n                  }\\\\\\\\n                >\\\\\\\\n                  <i class=\\\\\\\\\\\\\\\"bi bi-lightbulb\\\\\\\\\\\\\\\"></i>\\\\\\\\n                  Idea\\\\\\\\n                </button>\\\\\\\\n                <button\\\\\\\\n                  onClick={onSolutionClick}\\\\\\\\n                  type=\\\\\\\\\\\\\\\"button\\\\\\\\\\\\\\\"\\\\\\\\n                  class={`btn btn-outline-secondary`}\\\\\\\\n                  style={\\\\\\\\n                    state.postType !== \\\\\\\\\\\\\\\"Idea\\\\\\\\\\\\\\\"\\\\\\\\n                      ? {\\\\\\\\n                          backgroundColor: \\\\\\\\\\\\\\\"#0C7283\\\\\\\\\\\\\\\",\\\\\\\\n                          color: \\\\\\\\\\\\\\\"#f3f3f3\\\\\\\\\\\\\\\",\\\\\\\\n                        }\\\\\\\\n                      : {}\\\\\\\\n                  }\\\\\\\\n                >\\\\\\\\n                  <i class=\\\\\\\\\\\\\\\"bi bi-rocket\\\\\\\\\\\\\\\"></i>\\\\\\\\n                  Solution\\\\\\\\n                </button>\\\\\\\\n              </div>\\\\\\\\n              <p class=\\\\\\\\\\\\\\\"text-muted w-75 my-1\\\\\\\\\\\\\\\">\\\\\\\\n                {state.postType === \\\\\\\\\\\\\\\"Idea\\\\\\\\\\\\\\\"\\\\\\\\n                  ? \\\\\\\\\\\\\\\"Get feedback from the community about a problem, opportunity, or need.\\\\\\\\\\\\\\\"\\\\\\\\n                  : \\\\\\\\\\\\\\\"Provide a specific proposal or implementation to an idea, optionally requesting funding. If your solution relates to an existing idea, please reply to the original post with a solution.\\\\\\\\\\\\\\\"}\\\\\\\\n              </p>\\\\\\\\n              {state.warning && (\\\\\\\\n                <div\\\\\\\\n                  class=\\\\\\\\\\\\\\\"alert alert-warning alert-dismissible fade show\\\\\\\\\\\\\\\"\\\\\\\\n                  role=\\\\\\\\\\\\\\\"alert\\\\\\\\\\\\\\\"\\\\\\\\n                >\\\\\\\\n                  {state.warning}\\\\\\\\n                  <button\\\\\\\\n                    type=\\\\\\\\\\\\\\\"button\\\\\\\\\\\\\\\"\\\\\\\\n                    class=\\\\\\\\\\\\\\\"btn-close\\\\\\\\\\\\\\\"\\\\\\\\n                    data-bs-dismiss=\\\\\\\\\\\\\\\"alert\\\\\\\\\\\\\\\"\\\\\\\\n                    aria-label=\\\\\\\\\\\\\\\"Close\\\\\\\\\\\\\\\"\\\\\\\\n                    onClick={() => State.update({ warning: \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\" })}\\\\\\\\n                  ></button>\\\\\\\\n                </div>\\\\\\\\n              )}\\\\\\\\n              <div className=\\\\\\\\\\\\\\\"row\\\\\\\\\\\\\\\">\\\\\\\\n                {nameDiv}\\\\\\\\n                {descriptionDiv}\\\\\\\\n                {labelEditor}\\\\\\\\n                {state.postType === \\\\\\\\\\\\\\\"Solution\\\\\\\\\\\\\\\" && isFundraisingDiv}\\\\\\\\n                {state.seekingFunding && fundraisingDiv}\\\\\\\\n              </div>\\\\\\\\n              <button\\\\\\\\n                style={{\\\\\\\\n                  width: \\\\\\\\\\\\\\\"7rem\\\\\\\\\\\\\\\",\\\\\\\\n                  backgroundColor: \\\\\\\\\\\\\\\"#0C7283\\\\\\\\\\\\\\\",\\\\\\\\n                  color: \\\\\\\\\\\\\\\"#f3f3f3\\\\\\\\\\\\\\\",\\\\\\\\n                }}\\\\\\\\n                disabled={\\\\\\\\n                  state.seekingFunding && (!state.amount || state.amount < 1)\\\\\\\\n                }\\\\\\\\n                className=\\\\\\\\\\\\\\\"btn btn-light mb-2 p-3\\\\\\\\\\\\\\\"\\\\\\\\n                onClick={onSubmit}\\\\\\\\n              >\\\\\\\\n                Submit\\\\\\\\n              </button>\\\\\\\\n            </div>\\\\\\\\n            <div class=\\\\\\\\\\\\\\\"bg-light d-flex flex-row p-1 border-bottom\\\\\\\\\\\\\\\"></div>\\\\\\\\n            <div class=\\\\\\\\\\\\\\\"card-body\\\\\\\\\\\\\\\">\\\\\\\\n              <p class=\\\\\\\\\\\\\\\"text-muted m-0\\\\\\\\\\\\\\\">Preview</p>\\\\\\\\n              <div>\\\\\\\\n                <Widget\\\\\\\\n                  src=\\\\\\\\\\\\\\\"devhub.near/widget/devhub.entity.post.Post\\\\\\\\\\\\\\\"\\\\\\\\n                  props={{\\\\\\\\n                    isPreview: true,\\\\\\\\n                    id: 0, // irrelevant\\\\\\\\n                    post: {\\\\\\\\n                      author_id: state.author_id,\\\\\\\\n                      likes: [],\\\\\\\\n                      snapshot: {\\\\\\\\n                        editor_id: state.editor_id,\\\\\\\\n                        labels: state.labelStrings,\\\\\\\\n                        post_type: state.postType,\\\\\\\\n                        name: state.name,\\\\\\\\n                        description: generateDescription(\\\\\\\\n                          state.description,\\\\\\\\n                          state.amount,\\\\\\\\n                          state.token,\\\\\\\\n                          state.supervisor,\\\\\\\\n                          state.seekingFunding\\\\\\\\n                        ),\\\\\\\\n                        github_link: state.githubLink,\\\\\\\\n                      },\\\\\\\\n                    },\\\\\\\\n                  }}\\\\\\\\n                />\\\\\\\\n              </div>\\\\\\\\n            </div>\\\\\\\\n          </div>\\\\\\\\n        </>\\\\\\\\n      )}\\\\\\\\n    </div>\\\\\\\\n  </div>\\\\\\\\n);\\\\\\\\n\"}, \"devhub.page.profile\": {\"\": \"const accountId = props.accountId || context.accountId;\\\\\\\\n\\\\\\\\nif (!accountId) {\\\\\\\\n  return \\\\\\\\\\\\\\\"No Account Logged In!\\\\\\\\\\\\\\\";\\\\\\\\n}\\\\\\\\n\\\\\\\\nreturn (\\\\\\\\n  <div className=\\\\\\\\\\\\\\\"w-100 bg-white overflow-hidden px-3\\\\\\\\\\\\\\\">\\\\\\\\n    <Widget src=\\\\\\\\\\\\\\\"mob.near/widget/ProfilePage\\\\\\\\\\\\\\\" props={{ accountId }} />\\\\\\\\n  </div>\\\\\\\\n);\\\\\\\\n\"}, \"devhub.page.contribute\": {\"\": \"const Header = styled.div`\\\\\\\\n  //background: white;\\\\\\\\n  padding: 1rem 3.125rem;\\\\\\\\n  width: 100%;\\\\\\\\n  margin: 24px;\\\\\\\\n\\\\\\\\n  @media screen and (max-width: 768px) {\\\\\\\\n    margin: 1rem 0;\\\\\\\\n    padding: 1rem;\\\\\\\\n  }\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst PageHeader = styled.h2`\\\\\\\\n  color: #00ec97;\\\\\\\\n  font-size: 1.5rem;\\\\\\\\n  font-style: normal;\\\\\\\\n  font-weight: 400;\\\\\\\\n  line-height: 120%; /* 28.8px */\\\\\\\\n  letter-spacing: -0.24px;\\\\\\\\n  margin: 0;\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst Lead = styled.h5`\\\\\\\\n  color: #151515;\\\\\\\\n  font-size: 2.5rem;\\\\\\\\n  font-style: normal;\\\\\\\\n  font-weight: 700;\\\\\\\\n  line-height: 120%; /* 48px */\\\\\\\\n  margin: 2.25rem 8rem;\\\\\\\\n  margin-top: 0;\\\\\\\\n\\\\\\\\n  @media screen and (max-width: 768px) {\\\\\\\\n    font-size: 1.75rem;\\\\\\\\n    margin: 1rem;\\\\\\\\n    margin-top: 0;\\\\\\\\n  }\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst Container = styled.div`\\\\\\\\n  padding: 2.25rem 8rem;\\\\\\\\n  width: 100%;\\\\\\\\n  //background-color: white;\\\\\\\\n\\\\\\\\n  @media screen and (max-width: 768px) {\\\\\\\\n    padding: 1rem;\\\\\\\\n  }\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst actions = [\\\\\\\\n  {\\\\\\\\n    title: \\\\\\\\\\\\\\\"Ideate on Devhub\\\\\\\\\\\\\\\",\\\\\\\\n    description:\\\\\\\\n      \\\\\\\\\\\\\\\"The first step in any NEAR ecosystem project is ideation. It is crucial to have a way to find people to share and explore ideas with, partly because it can save a lot of time based on prior discussions. But also because it can you gauge support from a diversity of stakeholders.\\\\\\\\\\\\\\\",\\\\\\\\n    ctaAction: \\\\\\\\\\\\\\\"Learn More \\\\\\\\u{2192}\\\\\\\\\\\\\\\",\\\\\\\\n    ctaLink: \\\\\\\\\\\\\\\"https://www.neardevgov.org/blog/how-to-ideate-on-dev-hub\\\\\\\\\\\\\\\",\\\\\\\\n  },\\\\\\\\n  {\\\\\\\\n    title: \\\\\\\\\\\\\\\"Post a Proposal\\\\\\\\\\\\\\\",\\\\\\\\n    description:\\\\\\\\n      \\\\\\\\\\\\\\\"If you have already nurtured and refined your idea, you\\\\\\\\\\\\'re ready to draft and post your funding proposal.This guide is here to help you craft a compelling, convincing, and concise proposal that will capture the interest of potential funders.\\\\\\\\\\\\\\\",\\\\\\\\n    ctaAction: \\\\\\\\\\\\\\\"Learn More \\\\\\\\u{2192}\\\\\\\\\\\\\\\",\\\\\\\\n    ctaLink: \\\\\\\\\\\\\\\"https://www.neardevgov.org/blog/how-to-post-proposals-on-devhub\\\\\\\\\\\\\\\",\\\\\\\\n  },\\\\\\\\n  {\\\\\\\\n    title: \\\\\\\\\\\\\\\"Host an Event\\\\\\\\\\\\\\\",\\\\\\\\n    description:\\\\\\\\n      \\\\\\\\\\\\\\\"We are always on the lookout for events that align with our mission and provide value to the NEAR ecosystem. If you are organizing such an event, we would love to hear from you! Below is a guide on how to submit a sponsorship proposal to us.\\\\\\\\\\\\\\\",\\\\\\\\n    ctaAction: \\\\\\\\\\\\\\\"Learn More \\\\\\\\u{2192}\\\\\\\\\\\\\\\",\\\\\\\\n    ctaLink:\\\\\\\\n      \\\\\\\\\\\\\\\"https://near.social/devgovgigs.near/widget/app?page=community&handle=hacks&tab=Wiki%202\\\\\\\\\\\\\\\",\\\\\\\\n  },\\\\\\\\n  {\\\\\\\\n    title: \\\\\\\\\\\\\\\"Improve NEAR Docs\\\\\\\\\\\\\\\",\\\\\\\\n    description:\\\\\\\\n      \\\\\\\\\\\\\\\"NEAR documentation is an open source repository that anyone can fork, extend and contribute to by creating pull requests. To get started, head over to our github repository and checkout how you can make your first contribution. \\\\\\\\\\\\\\\",\\\\\\\\n    ctaAction: \\\\\\\\\\\\\\\"Learn More \\\\\\\\u{2192}\\\\\\\\\\\\\\\",\\\\\\\\n    ctaLink: \\\\\\\\\\\\\\\"https://github.com/near/docs\\\\\\\\\\\\\\\",\\\\\\\\n  },\\\\\\\\n  {\\\\\\\\n    title: \\\\\\\\\\\\\\\"Join the Fellowship\\\\\\\\\\\\\\\",\\\\\\\\n    description:\\\\\\\\n      \\\\\\\\\\\\\\\"As the NEAR ecosystem grows rapidly, there is an increasing need to improve developer productivity. The DevDAO NEAR Platform Fellowship Program aims to solve this issue by providing guidance to new contributors from experienced developers.\\\\\\\\\\\\\\\",\\\\\\\\n    ctaAction: \\\\\\\\\\\\\\\"Learn More \\\\\\\\u{2192}\\\\\\\\\\\\\\\",\\\\\\\\n    ctaLink:\\\\\\\\n      \\\\\\\\\\\\\\\"https://near.social/devgovgigs.near/widget/app?page=community&handle=fellowship&tab=Wiki 1\\\\\\\\\\\\\\\",\\\\\\\\n  },\\\\\\\\n  {\\\\\\\\n    title: \\\\\\\\\\\\\\\"Join NEAR Campus\\\\\\\\\\\\\\\",\\\\\\\\n    description:\\\\\\\\n      \\\\\\\\\\\\\\\"DevHub\\\\\\\\u{2019}s NEAR Campus supports existing student clubs, researchers, and faculties in blockchain technologies, enhancing both curricular and extracurricular activities. We aim to merge blockchain education with mainstream academics.\\\\\\\\\\\\\\\",\\\\\\\\n    ctaAction: \\\\\\\\\\\\\\\"Learn More \\\\\\\\u{2192}\\\\\\\\\\\\\\\",\\\\\\\\n    ctaLink:\\\\\\\\n      \\\\\\\\\\\\\\\"https://near.social/devgovgigs.near/widget/app?page=community&handle=near-campus\\\\\\\\\\\\\\\",\\\\\\\\n  },\\\\\\\\n  {\\\\\\\\n    title: \\\\\\\\\\\\\\\"Dive into Hackbox\\\\\\\\\\\\\\\",\\\\\\\\n    description:\\\\\\\\n      \\\\\\\\\\\\\\\"Hackbox is a revolutionary plug-and-play solution designed to empower local leads and community stewards in hosting hackathons easily and efficiently.\\\\\\\\\\\\\\\",\\\\\\\\n    ctaAction: \\\\\\\\\\\\\\\"Learn More \\\\\\\\u{2192}\\\\\\\\\\\\\\\",\\\\\\\\n    ctaLink: \\\\\\\\\\\\\\\"https://near.social/hackbox.near/widget/home\\\\\\\\\\\\\\\",\\\\\\\\n  },\\\\\\\\n];\\\\\\\\n\\\\\\\\nconst Card = styled.div`\\\\\\\\n  display: flex;\\\\\\\\n  flex-direction: column;\\\\\\\\n  gap: 0.5rem;\\\\\\\\n\\\\\\\\n  h5 {\\\\\\\\n    color: #151515;\\\\\\\\n    font-size: 1.75rem;\\\\\\\\n    font-style: normal;\\\\\\\\n    font-weight: 400;\\\\\\\\n    line-height: 120%; /* 43.2px */\\\\\\\\n\\\\\\\\n    display: flex;\\\\\\\\n    align-items: center;\\\\\\\\n  }\\\\\\\\n\\\\\\\\n  p {\\\\\\\\n    color: #000;\\\\\\\\n    font-size: 1rem;\\\\\\\\n    font-style: normal;\\\\\\\\n    font-weight: 400;\\\\\\\\n    line-height: 120%; /* 28.8px */\\\\\\\\n  }\\\\\\\\n\\\\\\\\n  a {\\\\\\\\n    color: #f4f4f4;\\\\\\\\n    font-size: 1rem;\\\\\\\\n    font-style: normal;\\\\\\\\n    font-weight: 700;\\\\\\\\n    line-height: 120%; /* 28.8px */\\\\\\\\n    letter-spacing: -0.48px;\\\\\\\\n\\\\\\\\n    display: flex;\\\\\\\\n    padding: 0.5rem 1rem;\\\\\\\\n    align-items: center;\\\\\\\\n    gap: 8px;\\\\\\\\n\\\\\\\\n    border-radius: 0.5rem;\\\\\\\\n    background: #00ec97;\\\\\\\\n\\\\\\\\n    width: max-content;\\\\\\\\n  }\\\\\\\\n`;\\\\\\\\nconst ActionCard = ({ action, index }) => {\\\\\\\\n  return (\\\\\\\\n    <Card>\\\\\\\\n      <h5>\\\\\\\\n        <span\\\\\\\\n          style={{\\\\\\\\n            color: \\\\\\\\\\\\\\\"#151515\\\\\\\\\\\\\\\",\\\\\\\\n            border: \\\\\\\\\\\\\\\"2px #151515 solid\\\\\\\\\\\\\\\",\\\\\\\\n            fontSize: 12,\\\\\\\\n            padding: 4,\\\\\\\\n            width: 22,\\\\\\\\n            height: 22,\\\\\\\\n          }}\\\\\\\\n          className=\\\\\\\\\\\\\\\"rounded-circle d-flex align-items-center justify-content-center me-1\\\\\\\\\\\\\\\"\\\\\\\\n        >\\\\\\\\n          {index + 1}\\\\\\\\n        </span>\\\\\\\\n        {action.title}\\\\\\\\n      </h5>\\\\\\\\n      <p>{action.description}</p>\\\\\\\\n      <a href={action.ctaLink} target=\\\\\\\\\\\\\\\"no_blank\\\\\\\\\\\\\\\">\\\\\\\\n        {action.ctaAction}\\\\\\\\n      </a>\\\\\\\\n    </Card>\\\\\\\\n  );\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst ActionContainer = styled.div`\\\\\\\\n  display: grid;\\\\\\\\n  grid-template-columns: repeat(2, 1fr);\\\\\\\\n  justify-content: center;\\\\\\\\n  column-gap: 1rem;\\\\\\\\n  row-gap: 2rem;\\\\\\\\n\\\\\\\\n  width: 100%;\\\\\\\\n\\\\\\\\n  @media screen and (max-width: 768px) {\\\\\\\\n    display: flex;\\\\\\\\n    flex-direction: column;\\\\\\\\n  }\\\\\\\\n`;\\\\\\\\n\\\\\\\\nreturn (\\\\\\\\n  <>\\\\\\\\n    <Widget\\\\\\\\n      src={`devhub.near/widget/devhub.components.island.banner`}\\\\\\\\n      props={{\\\\\\\\n        title: (\\\\\\\\n          <>\\\\\\\\n            We are building <br />\\\\\\\\n            <span style={{ color: \\\\\\\\\\\\\\\"#151515\\\\\\\\\\\\\\\" }}>\\\\\\\\n              a decentralized community\\\\\\\\n            </span>{\\\\\\\\\\\\\\\" \\\\\\\\\\\\\\\"}\\\\\\\\n            <br />\\\\\\\\n            for NEAR Developers.\\\\\\\\n          </>\\\\\\\\n        ),\\\\\\\\n        imageLink:\\\\\\\\n          \\\\\\\\\\\\\\\"https://ipfs.near.social/ipfs/bafybeiap2mzwsly4apaldxguiunx4rjwqyadksj5yxuzwrww3kue3ao5qe\\\\\\\\\\\\\\\",\\\\\\\\n      }}\\\\\\\\n    />\\\\\\\\n    <Header>\\\\\\\\n      <PageHeader>/contribute</PageHeader>\\\\\\\\n    </Header>\\\\\\\\n    <Lead>\\\\\\\\n      There are many ways to start your contribution journey. You can:\\\\\\\\n    </Lead>\\\\\\\\n    <Container>\\\\\\\\n      <ActionContainer>\\\\\\\\n        {actions.map((action, index) => (\\\\\\\\n          <ActionCard action={action} index={index} />\\\\\\\\n        ))}\\\\\\\\n      </ActionContainer>\\\\\\\\n    </Container>\\\\\\\\n  </>\\\\\\\\n);\\\\\\\\n\"}, \"devhub.entity.post.List\": {\"\": \"// This component implementation was forked from [IndexFeed], but it does not fully implement lazy loading.\\\\\\\\n// While this component uses InfiniteScroll, it still loads the whole list of Post IDs in one view call.\\\\\\\\n// The contract will need to be extended with pagination support, yet, even in the current state the page loads much faster.\\\\\\\\n// [IndexFeed]: https://near.social/#/mob.near/widget/WidgetSource?src=mob.near/widget/IndexFeed\\\\\\\\n\\\\\\\\nconst { href } = VM.require(\\\\\\\\\\\\\\\"devhub.near/widget/core.lib.url\\\\\\\\\\\\\\\");\\\\\\\\n\\\\\\\\nhref || (href = () => {});\\\\\\\\n\\\\\\\\n/* INCLUDE: \\\\\\\\\\\\\\\"core/lib/draftstate\\\\\\\\\\\\\\\" */\\\\\\\\nconst DRAFT_STATE_STORAGE_KEY = \\\\\\\\\\\\\\\"POST_DRAFT_STATE\\\\\\\\\\\\\\\";\\\\\\\\nlet is_edit_or_add_post_transaction = false;\\\\\\\\nlet transaction_method_name;\\\\\\\\n\\\\\\\\nif (props.transactionHashes) {\\\\\\\\n  const transaction = fetch(\\\\\\\\\\\\\\\"https://rpc.mainnet.near.org\\\\\\\\\\\\\\\", {\\\\\\\\n    method: \\\\\\\\\\\\\\\"POST\\\\\\\\\\\\\\\",\\\\\\\\n    headers: {\\\\\\\\n      \\\\\\\\\\\\\\\"content-type\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"application/json\\\\\\\\\\\\\\\",\\\\\\\\n    },\\\\\\\\n    body: JSON.stringify({\\\\\\\\n      jsonrpc: \\\\\\\\\\\\\\\"2.0\\\\\\\\\\\\\\\",\\\\\\\\n      id: \\\\\\\\\\\\\\\"dontcare\\\\\\\\\\\\\\\",\\\\\\\\n      method: \\\\\\\\\\\\\\\"tx\\\\\\\\\\\\\\\",\\\\\\\\n      params: [props.transactionHashes, context.accountId],\\\\\\\\n    }),\\\\\\\\n  });\\\\\\\\n  transaction_method_name =\\\\\\\\n    transaction?.body?.result?.transaction?.actions[0].FunctionCall.method_name;\\\\\\\\n\\\\\\\\n  is_edit_or_add_post_transaction =\\\\\\\\n    transaction_method_name == \\\\\\\\\\\\\\\"add_post\\\\\\\\\\\\\\\" ||\\\\\\\\n    transaction_method_name == \\\\\\\\\\\\\\\"edit_post\\\\\\\\\\\\\\\";\\\\\\\\n\\\\\\\\n  if (is_edit_or_add_post_transaction) {\\\\\\\\n    Storage.privateSet(DRAFT_STATE_STORAGE_KEY, undefined);\\\\\\\\n  }\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst onDraftStateChange = (draftState) =>\\\\\\\\n  Storage.privateSet(DRAFT_STATE_STORAGE_KEY, JSON.stringify(draftState));\\\\\\\\nlet draftState;\\\\\\\\ntry {\\\\\\\\n  draftState = JSON.parse(Storage.privateGet(DRAFT_STATE_STORAGE_KEY));\\\\\\\\n} catch (e) {}\\\\\\\\n/* END_INCLUDE: \\\\\\\\\\\\\\\"core/lib/draftstate\\\\\\\\\\\\\\\" */\\\\\\\\n\\\\\\\\nconst QUERYAPI_ENDPOINT = `https://near-queryapi.api.pagoda.co/v1/graphql/`;\\\\\\\\n\\\\\\\\nconst queryName =\\\\\\\\n  props.queryName ?? `bo_near_devhub_v17_posts_with_latest_snapshot`;\\\\\\\\n\\\\\\\\nconst query = `query DevhubPostsQuery($limit: Int = 100, $offset: Int = 0, $where: ${queryName}_bool_exp = {}) {\\\\\\\\n    ${queryName}(\\\\\\\\n      limit: $limit\\\\\\\\n      offset: $offset\\\\\\\\n      order_by: {block_height: desc}\\\\\\\\n      where: $where\\\\\\\\n    ) {\\\\\\\\n      post_id\\\\\\\\n    }\\\\\\\\n  }\\\\\\\\n`;\\\\\\\\n\\\\\\\\nfunction fetchGraphQL(operationsDoc, operationName, variables) {\\\\\\\\n  return asyncFetch(QUERYAPI_ENDPOINT, {\\\\\\\\n    method: \\\\\\\\\\\\\\\"POST\\\\\\\\\\\\\\\",\\\\\\\\n    headers: { \\\\\\\\\\\\\\\"x-hasura-role\\\\\\\\\\\\\\\": `bo_near` },\\\\\\\\n    body: JSON.stringify({\\\\\\\\n      query: operationsDoc,\\\\\\\\n      variables: variables,\\\\\\\\n      operationName: operationName,\\\\\\\\n    }),\\\\\\\\n  });\\\\\\\\n}\\\\\\\\n\\\\\\\\nfunction searchConditionChanged() {\\\\\\\\n  return (\\\\\\\\n    props.author != state.author ||\\\\\\\\n    props.term != state.term ||\\\\\\\\n    props.tag != state.tag ||\\\\\\\\n    props.recency != state.recency\\\\\\\\n  );\\\\\\\\n}\\\\\\\\n\\\\\\\\nfunction updateSearchCondition() {\\\\\\\\n  State.update({\\\\\\\\n    author: props.author,\\\\\\\\n    term: props.term,\\\\\\\\n    tag: props.tag,\\\\\\\\n    recency: props.recency,\\\\\\\\n    loading: true,\\\\\\\\n  });\\\\\\\\n}\\\\\\\\n\\\\\\\\nfunction getPostIds() {\\\\\\\\n  if (searchConditionChanged()) {\\\\\\\\n    updateSearchCondition();\\\\\\\\n    return;\\\\\\\\n  }\\\\\\\\n  let where = {};\\\\\\\\n  let authorId = props.author;\\\\\\\\n  let label = props.tag;\\\\\\\\n  if (authorId) {\\\\\\\\n    where = { author_id: { _eq: authorId }, ...where };\\\\\\\\n  }\\\\\\\\n  if (props.term) {\\\\\\\\n    where = { description: { _ilike: `%${props.term}%` }, ...where };\\\\\\\\n  }\\\\\\\\n  if (label) {\\\\\\\\n    if (typeof label === \\\\\\\\\\\\\\\"string\\\\\\\\\\\\\\\") {\\\\\\\\n      // Handle a single label\\\\\\\\n      where = { labels: { _contains: label }, ...where };\\\\\\\\n    } else if (Array.isArray(label)) {\\\\\\\\n      // Handle an array of labels\\\\\\\\n      where = {\\\\\\\\n        labels: {\\\\\\\\n          _containsAny: label,\\\\\\\\n        },\\\\\\\\n        ...where,\\\\\\\\n      };\\\\\\\\n    }\\\\\\\\n  }\\\\\\\\n  if (!props.recency) {\\\\\\\\n    // show only top level posts\\\\\\\\n    where = { parent_id: { _is_null: true }, ...where };\\\\\\\\n  }\\\\\\\\n\\\\\\\\n  // Don\\\\\\\\\\\\'t show blog\\\\\\\\n  where = {\\\\\\\\n    _not: {\\\\\\\\n      labels: { _contains: \\\\\\\\\\\\\\\"blog\\\\\\\\\\\\\\\" },\\\\\\\\n      parent_id: { _is_null: true },\\\\\\\\n      post_type: { _eq: \\\\\\\\\\\\\\\"Comment\\\\\\\\\\\\\\\" },\\\\\\\\n    },\\\\\\\\n    ...where,\\\\\\\\n  };\\\\\\\\n\\\\\\\\n  console.log(\\\\\\\\\\\\\\\"searching for\\\\\\\\\\\\\\\", where);\\\\\\\\n  fetchGraphQL(query, \\\\\\\\\\\\\\\"DevhubPostsQuery\\\\\\\\\\\\\\\", {\\\\\\\\n    limit: 100,\\\\\\\\n    offset: 0,\\\\\\\\n    where,\\\\\\\\n  }).then((result) => {\\\\\\\\n    if (result.status === 200) {\\\\\\\\n      console.log(\\\\\\\\\\\\\\\"search success\\\\\\\\\\\\\\\");\\\\\\\\n      if (result.body.data) {\\\\\\\\n        const data = result.body.data[queryName];\\\\\\\\n        State.update({\\\\\\\\n          postIds: data.map((p) => p.post_id),\\\\\\\\n          loading: false,\\\\\\\\n        });\\\\\\\\n        console.log(\\\\\\\\\\\\\\\"found:\\\\\\\\\\\\\\\");\\\\\\\\n        console.log(data);\\\\\\\\n      }\\\\\\\\n    } else {\\\\\\\\n      console.error(\\\\\\\\\\\\\\\"error:\\\\\\\\\\\\\\\", result.body);\\\\\\\\n      State.update({ loading: false });\\\\\\\\n    }\\\\\\\\n  });\\\\\\\\n}\\\\\\\\n\\\\\\\\nState.init({\\\\\\\\n  period: \\\\\\\\\\\\\\\"week\\\\\\\\\\\\\\\",\\\\\\\\n});\\\\\\\\n\\\\\\\\ngetPostIds();\\\\\\\\n\\\\\\\\nfunction defaultRenderItem(postId, additionalProps) {\\\\\\\\n  if (!additionalProps) {\\\\\\\\n    additionalProps = {};\\\\\\\\n  }\\\\\\\\n  // It is important to have a non-zero-height element as otherwise InfiniteScroll loads too many items on initial load\\\\\\\\n  return (\\\\\\\\n    <div className=\\\\\\\\\\\\\\\"py-2\\\\\\\\\\\\\\\" style={{ minHeight: \\\\\\\\\\\\\\\"150px\\\\\\\\\\\\\\\" }}>\\\\\\\\n      <Widget\\\\\\\\n        src={\\\\\\\\\\\\\\\"devhub.near/widget/devhub.entity.post.Post\\\\\\\\\\\\\\\"}\\\\\\\\n        props={{\\\\\\\\n          id: postId,\\\\\\\\n          expandable: true,\\\\\\\\n          defaultExpanded: false,\\\\\\\\n          isInList: true,\\\\\\\\n          draftState,\\\\\\\\n          isPreview: false,\\\\\\\\n          onDraftStateChange,\\\\\\\\n          ...additionalProps,\\\\\\\\n          referral: postId,\\\\\\\\n        }}\\\\\\\\n      />\\\\\\\\n    </div>\\\\\\\\n  );\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst renderItem = props.renderItem ?? defaultRenderItem;\\\\\\\\n\\\\\\\\nconst cachedRenderItem = (item, i) => {\\\\\\\\n  if (props.term) {\\\\\\\\n    return renderItem(item, {\\\\\\\\n      searchKeywords: [props.term],\\\\\\\\n    });\\\\\\\\n  }\\\\\\\\n\\\\\\\\n  const key = JSON.stringify(item);\\\\\\\\n\\\\\\\\n  if (!(key in state.cachedItems)) {\\\\\\\\n    state.cachedItems[key] = renderItem(item);\\\\\\\\n    State.update();\\\\\\\\n  }\\\\\\\\n  return state.cachedItems[key];\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst initialRenderLimit = props.initialRenderLimit ?? 3;\\\\\\\\nconst addDisplayCount = props.nextLimit ?? initialRenderLimit;\\\\\\\\n\\\\\\\\nconst ONE_DAY = 60 * 60 * 24 * 1000;\\\\\\\\nconst ONE_WEEK = 60 * 60 * 24 * 1000 * 7;\\\\\\\\nconst ONE_MONTH = 60 * 60 * 24 * 1000 * 30;\\\\\\\\n\\\\\\\\nfunction getHotnessScore(post) {\\\\\\\\n  //post.id - shows the age of the post, should grow exponentially, since newer posts are more important\\\\\\\\n  //post.likes.length - linear value\\\\\\\\n  const age = Math.pow(post.id, 5);\\\\\\\\n  const comments = post.comments;\\\\\\\\n  const commentAge = comments.reduce((sum, age) => sum + Math.pow(age, 5), 0);\\\\\\\\n  const totalAge = age + commentAge;\\\\\\\\n  //use log functions to make likes score and exponentially big age score close to each other\\\\\\\\n  return Math.log10(post.likes.length) + Math.log(Math.log10(totalAge));\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst getPeriodText = (period) => {\\\\\\\\n  let text = \\\\\\\\\\\\\\\"Last 24 hours\\\\\\\\\\\\\\\";\\\\\\\\n  if (period === \\\\\\\\\\\\\\\"week\\\\\\\\\\\\\\\") {\\\\\\\\n    text = \\\\\\\\\\\\\\\"Last week\\\\\\\\\\\\\\\";\\\\\\\\n  }\\\\\\\\n  if (period === \\\\\\\\\\\\\\\"month\\\\\\\\\\\\\\\") {\\\\\\\\n    text = \\\\\\\\\\\\\\\"Last month\\\\\\\\\\\\\\\";\\\\\\\\n  }\\\\\\\\n  return text;\\\\\\\\n};\\\\\\\\n\\\\\\\\nlet postIds = state.postIds ?? null;\\\\\\\\n\\\\\\\\nconst loader = (\\\\\\\\n  <div className=\\\\\\\\\\\\\\\"loader\\\\\\\\\\\\\\\" key={\\\\\\\\\\\\\\\"loader\\\\\\\\\\\\\\\"}>\\\\\\\\n    <span\\\\\\\\n      className=\\\\\\\\\\\\\\\"spinner-grow spinner-grow-sm me-1\\\\\\\\\\\\\\\"\\\\\\\\n      role=\\\\\\\\\\\\\\\"status\\\\\\\\\\\\\\\"\\\\\\\\n      aria-hidden=\\\\\\\\\\\\\\\"true\\\\\\\\\\\\\\\"\\\\\\\\n    />\\\\\\\\n    Loading ...\\\\\\\\n  </div>\\\\\\\\n);\\\\\\\\n\\\\\\\\nif (postIds === null) {\\\\\\\\n  return loader;\\\\\\\\n}\\\\\\\\nconst initialItems = postIds;\\\\\\\\n//const initialItems = postIds.map(postId => ({ id: postId, ...Near.view(nearDevGovGigsContractAccountId, \\\\\\\\\\\\\\\"get_post\\\\\\\\\\\\\\\", { post_id: postId }) }));\\\\\\\\n\\\\\\\\n// const computeFetchFrom = (items, limit) => {\\\\\\\\n//   if (!items || items.length < limit) {\\\\\\\\n//     return false;\\\\\\\\n//   }\\\\\\\\n//   const blockHeight = items[items.length - 1].blockHeight;\\\\\\\\n//   return index.options.order === \\\\\\\\\\\\\\\"desc\\\\\\\\\\\\\\\" ? blockHeight - 1 : blockHeight + 1;\\\\\\\\n// };\\\\\\\\n\\\\\\\\n// const mergeItems = (newItems) => {\\\\\\\\n//   const items = [\\\\\\\\n//     ...new Set([...newItems, ...state.items].map((i) => JSON.stringify(i))),\\\\\\\\n//   ].map((i) => JSON.parse(i));\\\\\\\\n//   items.sort((a, b) => a.blockHeight - b.blockHeight);\\\\\\\\n//   if (index.options.order === \\\\\\\\\\\\\\\"desc\\\\\\\\\\\\\\\") {\\\\\\\\n//     items.reverse();\\\\\\\\n//   }\\\\\\\\n//   return items;\\\\\\\\n// };\\\\\\\\n\\\\\\\\nconst jInitialItems = JSON.stringify(initialItems);\\\\\\\\nif (state.jInitialItems !== jInitialItems) {\\\\\\\\n  // const jIndex = JSON.stringify(index);\\\\\\\\n  // if (jIndex !== state.jIndex) {\\\\\\\\n  State.update({\\\\\\\\n    jIndex,\\\\\\\\n    jInitialItems,\\\\\\\\n    items: initialItems,\\\\\\\\n    fetchFrom: false,\\\\\\\\n    //nextFetchFrom: computeFetchFrom(initialItems, index.options.limit),\\\\\\\\n    nextFetchFrom: false,\\\\\\\\n    displayCount: initialRenderLimit,\\\\\\\\n    cachedItems: {},\\\\\\\\n  });\\\\\\\\n  // } else {\\\\\\\\n  //   State.update({\\\\\\\\n  //     jInitialItems,\\\\\\\\n  //     items: mergeItems(initialItems),\\\\\\\\n  //   });\\\\\\\\n  // }\\\\\\\\n}\\\\\\\\n\\\\\\\\nif (state.fetchFrom) {\\\\\\\\n  // TODO: fetchFrom\\\\\\\\n  // const limit = addDisplayCount;\\\\\\\\n  // const newItems = Social.index(\\\\\\\\n  //   index.action,\\\\\\\\n  //   index.key,\\\\\\\\n  //   Object.assign({}, index.options, {\\\\\\\\n  //     from: state.fetchFrom,\\\\\\\\n  //     subscribe: undefined,\\\\\\\\n  //     limit,\\\\\\\\n  //   })\\\\\\\\n  // );\\\\\\\\n  // if (newItems !== null) {\\\\\\\\n  //   State.update({\\\\\\\\n  //     items: mergeItems(newItems),\\\\\\\\n  //     fetchFrom: false,\\\\\\\\n  //     nextFetchFrom: computeFetchFrom(newItems, limit),\\\\\\\\n  //   });\\\\\\\\n  // }\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst makeMoreItems = () => {\\\\\\\\n  State.update({\\\\\\\\n    displayCount: state.displayCount + addDisplayCount,\\\\\\\\n  });\\\\\\\\n  if (\\\\\\\\n    state.items.length - state.displayCount < addDisplayCount * 2 &&\\\\\\\\n    !state.fetchFrom &&\\\\\\\\n    state.nextFetchFrom &&\\\\\\\\n    state.nextFetchFrom !== state.fetchFrom\\\\\\\\n  ) {\\\\\\\\n    State.update({\\\\\\\\n      fetchFrom: state.nextFetchFrom,\\\\\\\\n    });\\\\\\\\n  }\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst fetchMore =\\\\\\\\n  props.manual &&\\\\\\\\n  (state.fetchFrom && state.items.length < state.displayCount\\\\\\\\n    ? loader\\\\\\\\n    : state.displayCount < state.items.length && (\\\\\\\\n        <div key={\\\\\\\\\\\\\\\"loader more\\\\\\\\\\\\\\\"}>\\\\\\\\n          <a href=\\\\\\\\\\\\\\\"javascript:void\\\\\\\\\\\\\\\" onClick={(e) => makeMoreItems()}>\\\\\\\\n            {props.loadMoreText ?? \\\\\\\\\\\\\\\"Load more...\\\\\\\\\\\\\\\"}\\\\\\\\n          </a>\\\\\\\\n        </div>\\\\\\\\n      ));\\\\\\\\n\\\\\\\\nconst items = state.items ? state.items.slice(0, state.displayCount) : [];\\\\\\\\n\\\\\\\\nconst renderedItems = items.map(cachedRenderItem);\\\\\\\\n\\\\\\\\nconst Head =\\\\\\\\n  props.recency == \\\\\\\\\\\\\\\"hot\\\\\\\\\\\\\\\" ? (\\\\\\\\n    <div class=\\\\\\\\\\\\\\\"row\\\\\\\\\\\\\\\">\\\\\\\\n      <div class=\\\\\\\\\\\\\\\"fs-5 col-6 align-self-center\\\\\\\\\\\\\\\">\\\\\\\\n        <i class=\\\\\\\\\\\\\\\"bi-fire\\\\\\\\\\\\\\\"></i>\\\\\\\\n        <span>Hottest Posts</span>\\\\\\\\n      </div>\\\\\\\\n      <div class=\\\\\\\\\\\\\\\"col-6 dropdown d-flex justify-content-end\\\\\\\\\\\\\\\">\\\\\\\\n        <a\\\\\\\\n          class=\\\\\\\\\\\\\\\"btn btn-secondary dropdown-toggle\\\\\\\\\\\\\\\"\\\\\\\\n          href=\\\\\\\\\\\\\\\"#\\\\\\\\\\\\\\\"\\\\\\\\n          role=\\\\\\\\\\\\\\\"button\\\\\\\\\\\\\\\"\\\\\\\\n          id=\\\\\\\\\\\\\\\"dropdownMenuLink\\\\\\\\\\\\\\\"\\\\\\\\n          data-bs-toggle=\\\\\\\\\\\\\\\"dropdown\\\\\\\\\\\\\\\"\\\\\\\\n          aria-expanded=\\\\\\\\\\\\\\\"false\\\\\\\\\\\\\\\"\\\\\\\\n        >\\\\\\\\n          {getPeriodText(state.period)}\\\\\\\\n        </a>\\\\\\\\n\\\\\\\\n        <ul class=\\\\\\\\\\\\\\\"dropdown-menu\\\\\\\\\\\\\\\" aria-labelledby=\\\\\\\\\\\\\\\"dropdownMenuLink\\\\\\\\\\\\\\\">\\\\\\\\n          <li>\\\\\\\\n            <button\\\\\\\\n              class=\\\\\\\\\\\\\\\"dropdown-item\\\\\\\\\\\\\\\"\\\\\\\\n              onClick={() => {\\\\\\\\n                State.update({ period: \\\\\\\\\\\\\\\"day\\\\\\\\\\\\\\\" });\\\\\\\\n              }}\\\\\\\\n            >\\\\\\\\n              {getPeriodText(\\\\\\\\\\\\\\\"day\\\\\\\\\\\\\\\")}\\\\\\\\n            </button>\\\\\\\\n          </li>\\\\\\\\n          <li>\\\\\\\\n            <button\\\\\\\\n              class=\\\\\\\\\\\\\\\"dropdown-item\\\\\\\\\\\\\\\"\\\\\\\\n              onClick={() => {\\\\\\\\n                State.update({ period: \\\\\\\\\\\\\\\"week\\\\\\\\\\\\\\\" });\\\\\\\\n              }}\\\\\\\\n            >\\\\\\\\n              {getPeriodText(\\\\\\\\\\\\\\\"week\\\\\\\\\\\\\\\")}\\\\\\\\n            </button>\\\\\\\\n          </li>\\\\\\\\n          <li>\\\\\\\\n            <button\\\\\\\\n              class=\\\\\\\\\\\\\\\"dropdown-item\\\\\\\\\\\\\\\"\\\\\\\\n              onClick={() => {\\\\\\\\n                State.update({ period: \\\\\\\\\\\\\\\"month\\\\\\\\\\\\\\\" });\\\\\\\\n              }}\\\\\\\\n            >\\\\\\\\n              {getPeriodText(\\\\\\\\\\\\\\\"month\\\\\\\\\\\\\\\")}\\\\\\\\n            </button>\\\\\\\\n          </li>\\\\\\\\n        </ul>\\\\\\\\n      </div>\\\\\\\\n    </div>\\\\\\\\n  ) : (\\\\\\\\n    <></>\\\\\\\\n  );\\\\\\\\n\\\\\\\\nreturn (\\\\\\\\n  <>\\\\\\\\n    {Head}\\\\\\\\n    {state.loading ? loader : null}\\\\\\\\n    {is_edit_or_add_post_transaction ? (\\\\\\\\n      <p class=\\\\\\\\\\\\\\\"text-secondary mt-4\\\\\\\\\\\\\\\">\\\\\\\\n        Post {transaction_method_name == \\\\\\\\\\\\\\\"edit_post\\\\\\\\\\\\\\\" ? \\\\\\\\\\\\\\\"edited\\\\\\\\\\\\\\\" : \\\\\\\\\\\\\\\"added\\\\\\\\\\\\\\\"}{\\\\\\\\\\\\\\\" \\\\\\\\\\\\\\\"}\\\\\\\\n        successfully. Back to{\\\\\\\\\\\\\\\" \\\\\\\\\\\\\\\"}\\\\\\\\n        <Link\\\\\\\\n          style={{\\\\\\\\n            color: \\\\\\\\\\\\\\\"#3252A6\\\\\\\\\\\\\\\",\\\\\\\\n          }}\\\\\\\\n          className=\\\\\\\\\\\\\\\"fw-bold\\\\\\\\\\\\\\\"\\\\\\\\n          to={href({\\\\\\\\n            widgetSrc: \\\\\\\\\\\\\\\"devhub.near/widget/app\\\\\\\\\\\\\\\",\\\\\\\\n            params: { page: \\\\\\\\\\\\\\\"feed\\\\\\\\\\\\\\\" },\\\\\\\\n          })}\\\\\\\\n        >\\\\\\\\n          feed\\\\\\\\n        </Link>\\\\\\\\n      </p>\\\\\\\\n    ) : state.items.length > 0 ? (\\\\\\\\n      <InfiniteScroll\\\\\\\\n        pageStart={0}\\\\\\\\n        loadMore={makeMoreItems}\\\\\\\\n        hasMore={state.displayCount < state.items.length}\\\\\\\\n        loader={loader}\\\\\\\\n      >\\\\\\\\n        {renderedItems}\\\\\\\\n      </InfiniteScroll>\\\\\\\\n    ) : (\\\\\\\\n      <p class=\\\\\\\\\\\\\\\"text-secondary\\\\\\\\\\\\\\\">\\\\\\\\n        No posts{\\\\\\\\\\\\\\\" \\\\\\\\\\\\\\\"}\\\\\\\\n        {props.term || props.tag || props.author ? \\\\\\\\\\\\\\\"matches search\\\\\\\\\\\\\\\" : \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\"}\\\\\\\\n        {props.recency === \\\\\\\\\\\\\\\"hot\\\\\\\\\\\\\\\"\\\\\\\\n          ? \\\\\\\\\\\\\\\" in \\\\\\\\\\\\\\\" + getPeriodText(state.period).toLowerCase()\\\\\\\\n          : \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\"}\\\\\\\\n      </p>\\\\\\\\n    )}\\\\\\\\n  </>\\\\\\\\n);\\\\\\\\n\"}, \"devhub.entity.post.Post\": {\"\": \"// Ideally, this would be a page\\\\\\\\n\\\\\\\\nconst { href } = VM.require(\\\\\\\\\\\\\\\"devhub.near/widget/core.lib.url\\\\\\\\\\\\\\\");\\\\\\\\n\\\\\\\\nhref || (href = () => {});\\\\\\\\n\\\\\\\\nconst ButtonWithHover = styled.button`\\\\\\\\n  background-color: #fff;\\\\\\\\n  &:hover {\\\\\\\\n    background-color: #e9ecef;\\\\\\\\n    color: #000;\\\\\\\\n  }\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst postId = props.post.id ?? (props.id ? parseInt(props.id) : 0);\\\\\\\\nconst post =\\\\\\\\n  props.post ??\\\\\\\\n  Near.view(\\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"get_post\\\\\\\\\\\\\\\", { post_id: postId });\\\\\\\\nif (!post) {\\\\\\\\n  return <div>Loading ...</div>;\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst referral = props.referral;\\\\\\\\nconst currentTimestamp = props.timestamp ?? post.snapshot.timestamp;\\\\\\\\nconst compareTimestamp = props.compareTimestamp ?? \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\";\\\\\\\\nconst swapTimestamps = currentTimestamp < compareTimestamp;\\\\\\\\n\\\\\\\\nconst snapshotHistory = post.snapshot_history;\\\\\\\\nconst snapshot =\\\\\\\\n  currentTimestamp === post.snapshot.timestamp\\\\\\\\n    ? post.snapshot\\\\\\\\n    : (snapshotHistory &&\\\\\\\\n        snapshotHistory.find((s) => s.timestamp === currentTimestamp)) ??\\\\\\\\n      null;\\\\\\\\nconst compareSnapshot =\\\\\\\\n  compareTimestamp === post.snapshot.timestamp\\\\\\\\n    ? post.snapshot\\\\\\\\n    : (snapshotHistory &&\\\\\\\\n        snapshotHistory.find((s) => s.timestamp === compareTimestamp)) ??\\\\\\\\n      null;\\\\\\\\n\\\\\\\\n// If this post is displayed under another post. Used to limit the size.\\\\\\\\nconst isUnderPost = props.isUnderPost ? true : false;\\\\\\\\nconst parentId = Near.view(\\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"get_parent_id\\\\\\\\\\\\\\\", {\\\\\\\\n  post_id: postId,\\\\\\\\n});\\\\\\\\n\\\\\\\\nconst childPostIdsUnordered =\\\\\\\\n  Near.view(\\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"get_children_ids\\\\\\\\\\\\\\\", {\\\\\\\\n    post_id: postId,\\\\\\\\n  }) ?? [];\\\\\\\\n\\\\\\\\nconst childPostIds = props.isPreview ? [] : childPostIdsUnordered.reverse();\\\\\\\\nconst expandable = props.isPreview ? false : props.expandable ?? false;\\\\\\\\nconst defaultExpanded = expandable ? props.defaultExpanded : true;\\\\\\\\n\\\\\\\\nconst draftState = props.draftState;\\\\\\\\n\\\\\\\\nfunction readableDate(timestamp) {\\\\\\\\n  var a = new Date(timestamp);\\\\\\\\n  return a.toDateString() + \\\\\\\\\\\\\\\" \\\\\\\\\\\\\\\" + a.toLocaleTimeString();\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst timestamp = readableDate(\\\\\\\\n  snapshot.timestamp ? snapshot.timestamp / 1000000 : Date.now()\\\\\\\\n);\\\\\\\\n\\\\\\\\nconst postSearchKeywords = props.searchKeywords ? (\\\\\\\\n  <div style={{ \\\\\\\\\\\\\\\"font-family\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"monospace\\\\\\\\\\\\\\\" }} key=\\\\\\\\\\\\\\\"post-search-keywords\\\\\\\\\\\\\\\">\\\\\\\\n    <span>Found keywords: </span>\\\\\\\\n    {props.searchKeywords.map((tag) => (\\\\\\\\n      <Widget\\\\\\\\n        src={\\\\\\\\\\\\\\\"devhub.near/widget/devhub.components.atom.Tag\\\\\\\\\\\\\\\"}\\\\\\\\n        props={{ linkTo: \\\\\\\\\\\\\\\"Feed\\\\\\\\\\\\\\\", tag }}\\\\\\\\n      />\\\\\\\\n    ))}\\\\\\\\n  </div>\\\\\\\\n) : (\\\\\\\\n  <div key=\\\\\\\\\\\\\\\"post-search-keywords\\\\\\\\\\\\\\\"></div>\\\\\\\\n);\\\\\\\\n\\\\\\\\nconst searchKeywords = props.searchKeywords ? (\\\\\\\\n  <div class=\\\\\\\\\\\\\\\"mb-4\\\\\\\\\\\\\\\" key=\\\\\\\\\\\\\\\"search-keywords\\\\\\\\\\\\\\\">\\\\\\\\n    <small class=\\\\\\\\\\\\\\\"text-muted\\\\\\\\\\\\\\\">{postSearchKeywords}</small>\\\\\\\\n  </div>\\\\\\\\n) : (\\\\\\\\n  <div key=\\\\\\\\\\\\\\\"search-keywords\\\\\\\\\\\\\\\"></div>\\\\\\\\n);\\\\\\\\n\\\\\\\\nconst allowedToEdit =\\\\\\\\n  !props.isPreview &&\\\\\\\\n  Near.view(\\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"is_allowed_to_edit\\\\\\\\\\\\\\\", {\\\\\\\\n    post_id: postId,\\\\\\\\n    editor: context.accountId,\\\\\\\\n  });\\\\\\\\n\\\\\\\\nconst btnEditorWidget = (postType, name) => {\\\\\\\\n  return (\\\\\\\\n    <li>\\\\\\\\n      <a\\\\\\\\n        class=\\\\\\\\\\\\\\\"dropdown-item\\\\\\\\\\\\\\\"\\\\\\\\n        role=\\\\\\\\\\\\\\\"button\\\\\\\\\\\\\\\"\\\\\\\\n        onClick={() =>\\\\\\\\n          State.update({ postType, editorType: \\\\\\\\\\\\\\\"EDIT\\\\\\\\\\\\\\\", showEditor: true })\\\\\\\\n        }\\\\\\\\n      >\\\\\\\\n        {name}\\\\\\\\n      </a>\\\\\\\\n    </li>\\\\\\\\n  );\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst editControl = allowedToEdit ? (\\\\\\\\n  <div class=\\\\\\\\\\\\\\\"btn-group\\\\\\\\\\\\\\\" role=\\\\\\\\\\\\\\\"group\\\\\\\\\\\\\\\">\\\\\\\\n    <a\\\\\\\\n      class=\\\\\\\\\\\\\\\"card-link px-2\\\\\\\\\\\\\\\"\\\\\\\\n      role=\\\\\\\\\\\\\\\"button\\\\\\\\\\\\\\\"\\\\\\\\n      title=\\\\\\\\\\\\\\\"Edit post\\\\\\\\\\\\\\\"\\\\\\\\n      data-bs-toggle=\\\\\\\\\\\\\\\"dropdown\\\\\\\\\\\\\\\"\\\\\\\\n      aria-expanded=\\\\\\\\\\\\\\\"false\\\\\\\\\\\\\\\"\\\\\\\\n      type=\\\\\\\\\\\\\\\"button\\\\\\\\\\\\\\\"\\\\\\\\n    >\\\\\\\\n      <div class=\\\\\\\\\\\\\\\"bi bi-pencil-square\\\\\\\\\\\\\\\"></div>\\\\\\\\n    </a>\\\\\\\\n    <ul class=\\\\\\\\\\\\\\\"dropdown-menu\\\\\\\\\\\\\\\">\\\\\\\\n      {btnEditorWidget(\\\\\\\\\\\\\\\"Idea\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"Edit as an idea\\\\\\\\\\\\\\\")}\\\\\\\\n      {btnEditorWidget(\\\\\\\\\\\\\\\"Solution\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"Edit as a solution\\\\\\\\\\\\\\\")}\\\\\\\\n      {btnEditorWidget(\\\\\\\\\\\\\\\"Attestation\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"Edit as an attestation\\\\\\\\\\\\\\\")}\\\\\\\\n      {btnEditorWidget(\\\\\\\\\\\\\\\"Sponsorship\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"Edit as a sponsorship\\\\\\\\\\\\\\\")}\\\\\\\\n      {btnEditorWidget(\\\\\\\\\\\\\\\"Comment\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"Edit as a comment\\\\\\\\\\\\\\\")}\\\\\\\\n    </ul>\\\\\\\\n  </div>\\\\\\\\n) : (\\\\\\\\n  <div></div>\\\\\\\\n);\\\\\\\\n\\\\\\\\nconst shareButton = props.isPreview ? (\\\\\\\\n  <div></div>\\\\\\\\n) : (\\\\\\\\n  <Link\\\\\\\\n    class=\\\\\\\\\\\\\\\"card-link text-dark\\\\\\\\\\\\\\\"\\\\\\\\n    to={href({\\\\\\\\n      gateway: \\\\\\\\\\\\\\\"near.org\\\\\\\\\\\\\\\",\\\\\\\\n      widgetSrc: \\\\\\\\\\\\\\\"devhub.near/widget/app\\\\\\\\\\\\\\\",\\\\\\\\n      params: { page: \\\\\\\\\\\\\\\"post\\\\\\\\\\\\\\\", id: postId },\\\\\\\\n    })}\\\\\\\\n    role=\\\\\\\\\\\\\\\"button\\\\\\\\\\\\\\\"\\\\\\\\n    target=\\\\\\\\\\\\\\\"_blank\\\\\\\\\\\\\\\"\\\\\\\\n    title=\\\\\\\\\\\\\\\"Open in new tab\\\\\\\\\\\\\\\"\\\\\\\\n  >\\\\\\\\n    <div class=\\\\\\\\\\\\\\\"bi bi-share\\\\\\\\\\\\\\\"></div>\\\\\\\\n  </Link>\\\\\\\\n);\\\\\\\\n\\\\\\\\nconst ProfileCardContainer = styled.div`\\\\\\\\n  @media screen and (max-width: 960px) {\\\\\\\\n    width: 100%;\\\\\\\\n  }\\\\\\\\n`;\\\\\\\\n\\\\\\\\n// card-header\\\\\\\\nconst header = (\\\\\\\\n  <div key=\\\\\\\\\\\\\\\"header\\\\\\\\\\\\\\\">\\\\\\\\n    <small class=\\\\\\\\\\\\\\\"text-muted\\\\\\\\\\\\\\\">\\\\\\\\n      <div class=\\\\\\\\\\\\\\\"row justify-content-between\\\\\\\\\\\\\\\">\\\\\\\\n        <div class=\\\\\\\\\\\\\\\"d-flex align-items-center flex-wrap\\\\\\\\\\\\\\\">\\\\\\\\n          <ProfileCardContainer>\\\\\\\\n            <Widget\\\\\\\\n              src={\\\\\\\\n                \\\\\\\\\\\\\\\"devhub.near/widget/devhub.components.molecule.ProfileCard\\\\\\\\\\\\\\\"\\\\\\\\n              }\\\\\\\\n              props={{\\\\\\\\n                accountId: post.author_id,\\\\\\\\n                nearDevGovGigsWidgetsAccountId: \\\\\\\\\\\\\\\"devhub.near\\\\\\\\\\\\\\\",\\\\\\\\n              }}\\\\\\\\n            />\\\\\\\\n          </ProfileCardContainer>\\\\\\\\n          <div class=\\\\\\\\\\\\\\\"d-flex ms-auto\\\\\\\\\\\\\\\">\\\\\\\\n            {editControl}\\\\\\\\n            {timestamp}\\\\\\\\n            <Widget\\\\\\\\n              src={\\\\\\\\\\\\\\\"devhub.near/widget/devhub.entity.post.History\\\\\\\\\\\\\\\"}\\\\\\\\n              props={{\\\\\\\\n                post,\\\\\\\\n                timestamp: currentTimestamp,\\\\\\\\n              }}\\\\\\\\n            />\\\\\\\\n            {shareButton}\\\\\\\\n          </div>\\\\\\\\n        </div>\\\\\\\\n      </div>\\\\\\\\n    </small>\\\\\\\\n  </div>\\\\\\\\n);\\\\\\\\n\\\\\\\\n// const emptyIcons = {\\\\\\\\n//   Idea: \\\\\\\\\\\\\\\"bi-lightbulb\\\\\\\\\\\\\\\",\\\\\\\\n//   Comment: \\\\\\\\\\\\\\\"bi-chat\\\\\\\\\\\\\\\",\\\\\\\\n//   Solution: \\\\\\\\\\\\\\\"bi-rocket\\\\\\\\\\\\\\\",\\\\\\\\n//   Attestation: \\\\\\\\\\\\\\\"bi-check-circle\\\\\\\\\\\\\\\",\\\\\\\\n//   Sponsorship: \\\\\\\\\\\\\\\"bi-cash-coin\\\\\\\\\\\\\\\",\\\\\\\\n//   Github: \\\\\\\\\\\\\\\"bi-github\\\\\\\\\\\\\\\",\\\\\\\\n//   Like: \\\\\\\\\\\\\\\"bi-heart\\\\\\\\\\\\\\\",\\\\\\\\n//   Reply: \\\\\\\\\\\\\\\"bi-reply\\\\\\\\\\\\\\\",\\\\\\\\n// };\\\\\\\\n\\\\\\\\nconst emptyIcons = {\\\\\\\\n  Idea: \\\\\\\\\\\\\\\"\\\\\\\\u{1f4a1}\\\\\\\\\\\\\\\",\\\\\\\\n  Comment: \\\\\\\\\\\\\\\"bi-chat\\\\\\\\\\\\\\\",\\\\\\\\n  Solution: \\\\\\\\\\\\\\\"\\\\\\\\u{1f680}\\\\\\\\\\\\\\\",\\\\\\\\n  Attestation: \\\\\\\\\\\\\\\"\\\\\\\\u{2705}\\\\\\\\\\\\\\\",\\\\\\\\n  Sponsorship: \\\\\\\\\\\\\\\"\\\\\\\\u{1fa99}\\\\\\\\\\\\\\\",\\\\\\\\n  Github: \\\\\\\\\\\\\\\"bi-github\\\\\\\\\\\\\\\",\\\\\\\\n  Like: \\\\\\\\\\\\\\\"bi-heart\\\\\\\\\\\\\\\",\\\\\\\\n  Reply: \\\\\\\\\\\\\\\"bi-reply\\\\\\\\\\\\\\\",\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst fillIcons = {\\\\\\\\n  Idea: \\\\\\\\\\\\\\\"\\\\\\\\u{1f4a1}\\\\\\\\\\\\\\\",\\\\\\\\n  Comment: \\\\\\\\\\\\\\\"bi-chat-fill\\\\\\\\\\\\\\\",\\\\\\\\n  Solution: \\\\\\\\\\\\\\\"\\\\\\\\u{1f680}\\\\\\\\\\\\\\\",\\\\\\\\n  Attestation: \\\\\\\\\\\\\\\"\\\\\\\\u{2705}\\\\\\\\\\\\\\\",\\\\\\\\n  Sponsorship: \\\\\\\\\\\\\\\"\\\\\\\\u{1fa99}\\\\\\\\\\\\\\\",\\\\\\\\n  Github: \\\\\\\\\\\\\\\"bi-github\\\\\\\\\\\\\\\",\\\\\\\\n  Like: \\\\\\\\\\\\\\\"bi-heart-fill\\\\\\\\\\\\\\\",\\\\\\\\n  Reply: \\\\\\\\\\\\\\\"bi-reply-fill\\\\\\\\\\\\\\\",\\\\\\\\n};\\\\\\\\n\\\\\\\\n// Trigger saving this widget.\\\\\\\\n\\\\\\\\nconst borders = {\\\\\\\\n  Idea: \\\\\\\\\\\\\\\"border-light\\\\\\\\\\\\\\\",\\\\\\\\n  Comment: \\\\\\\\\\\\\\\"border-light\\\\\\\\\\\\\\\",\\\\\\\\n  Solution: \\\\\\\\\\\\\\\"border-light\\\\\\\\\\\\\\\",\\\\\\\\n  Attestation: \\\\\\\\\\\\\\\"border-light\\\\\\\\\\\\\\\",\\\\\\\\n  Sponsorship: \\\\\\\\\\\\\\\"border-light\\\\\\\\\\\\\\\",\\\\\\\\n  Github: \\\\\\\\\\\\\\\"border-light\\\\\\\\\\\\\\\",\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst containsLike = props.isPreview\\\\\\\\n  ? false\\\\\\\\n  : post.likes.find((l) => l.author_id == context.accountId);\\\\\\\\nconst likeBtnClass = containsLike ? fillIcons.Like : emptyIcons.Like;\\\\\\\\n// This must be outside onLike, because Near.view returns null at first, and when the view call finished, it returns true/false.\\\\\\\\n// If checking this inside onLike, it will give `null` and we cannot tell the result is true or false.\\\\\\\\nlet grantNotify = Near.view(\\\\\\\\\\\\\\\"social.near\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"is_write_permission_granted\\\\\\\\\\\\\\\", {\\\\\\\\n  predecessor_id: \\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\",\\\\\\\\n  key: context.accountId + \\\\\\\\\\\\\\\"/index/notify\\\\\\\\\\\\\\\",\\\\\\\\n});\\\\\\\\nif (grantNotify === null) {\\\\\\\\n  return;\\\\\\\\n}\\\\\\\\nconst onLike = () => {\\\\\\\\n  if (!context.accountId) {\\\\\\\\n    return;\\\\\\\\n  }\\\\\\\\n  let likeTxn = [\\\\\\\\n    {\\\\\\\\n      contractName: \\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\",\\\\\\\\n      methodName: \\\\\\\\\\\\\\\"add_like\\\\\\\\\\\\\\\",\\\\\\\\n      args: {\\\\\\\\n        post_id: postId,\\\\\\\\n      },\\\\\\\\n      deposit: Big(10).pow(21).mul(2),\\\\\\\\n      gas: Big(10).pow(12).mul(100),\\\\\\\\n    },\\\\\\\\n  ];\\\\\\\\n\\\\\\\\n  if (grantNotify === false) {\\\\\\\\n    likeTxn.unshift({\\\\\\\\n      contractName: \\\\\\\\\\\\\\\"social.near\\\\\\\\\\\\\\\",\\\\\\\\n      methodName: \\\\\\\\\\\\\\\"grant_write_permission\\\\\\\\\\\\\\\",\\\\\\\\n      args: {\\\\\\\\n        predecessor_id: \\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\",\\\\\\\\n        keys: [context.accountId + \\\\\\\\\\\\\\\"/index/notify\\\\\\\\\\\\\\\"],\\\\\\\\n      },\\\\\\\\n      deposit: Big(10).pow(23),\\\\\\\\n      gas: Big(10).pow(12).mul(30),\\\\\\\\n    });\\\\\\\\n  }\\\\\\\\n  Near.call(likeTxn);\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst btnCreatorWidget = (postType, icon, name, desc) => {\\\\\\\\n  return (\\\\\\\\n    <li class=\\\\\\\\\\\\\\\"py-1\\\\\\\\\\\\\\\">\\\\\\\\n      <a\\\\\\\\n        class=\\\\\\\\\\\\\\\"dropdown-item text-decoration-none d-flex align-items-center lh-sm\\\\\\\\\\\\\\\"\\\\\\\\n        style={{ color: \\\\\\\\\\\\\\\"rgb(55,109,137)\\\\\\\\\\\\\\\" }}\\\\\\\\n        role=\\\\\\\\\\\\\\\"button\\\\\\\\\\\\\\\"\\\\\\\\n        onClick={() =>\\\\\\\\n          State.update({ postType, editorType: \\\\\\\\\\\\\\\"CREATE\\\\\\\\\\\\\\\", showEditor: true })\\\\\\\\n        }\\\\\\\\n      >\\\\\\\\n        <i class={`bi ${icon}`} style={{ fontSize: \\\\\\\\\\\\\\\"1.5rem\\\\\\\\\\\\\\\" }}>\\\\\\\\n          {\\\\\\\\\\\\\\\" \\\\\\\\\\\\\\\"}\\\\\\\\n        </i>\\\\\\\\n        <div class=\\\\\\\\\\\\\\\"ps-2 text-wrap\\\\\\\\\\\\\\\" style={{ width: \\\\\\\\\\\\\\\"18rem\\\\\\\\\\\\\\\" }}>\\\\\\\\n          <div>{name}</div>\\\\\\\\n          <small class=\\\\\\\\\\\\\\\"fw-light text-secondary\\\\\\\\\\\\\\\">{desc}</small>\\\\\\\\n        </div>\\\\\\\\n      </a>\\\\\\\\n    </li>\\\\\\\\n  );\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst FooterButtonsContianer = styled.div`\\\\\\\\n  width: 66.66666667%;\\\\\\\\n\\\\\\\\n  @media screen and (max-width: 960px) {\\\\\\\\n    width: 100%;\\\\\\\\n  }\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst buttonsFooter = props.isPreview ? null : (\\\\\\\\n  <div class=\\\\\\\\\\\\\\\"row\\\\\\\\\\\\\\\" key=\\\\\\\\\\\\\\\"buttons-footer\\\\\\\\\\\\\\\">\\\\\\\\n    <FooterButtonsContianer>\\\\\\\\n      <div class=\\\\\\\\\\\\\\\"btn-group\\\\\\\\\\\\\\\" role=\\\\\\\\\\\\\\\"group\\\\\\\\\\\\\\\" aria-label=\\\\\\\\\\\\\\\"Basic outlined example\\\\\\\\\\\\\\\">\\\\\\\\n        <ButtonWithHover\\\\\\\\n          type=\\\\\\\\\\\\\\\"button\\\\\\\\\\\\\\\"\\\\\\\\n          class=\\\\\\\\\\\\\\\"btn d-flex align-items-center\\\\\\\\\\\\\\\"\\\\\\\\n          style={{ border: \\\\\\\\\\\\\\\"0px\\\\\\\\\\\\\\\" }}\\\\\\\\n          onClick={onLike}\\\\\\\\n        >\\\\\\\\n          <i class={`bi ${likeBtnClass}`}> </i>\\\\\\\\n          {post.likes.length == 0 ? (\\\\\\\\n            \\\\\\\\\\\\\\\"Like\\\\\\\\\\\\\\\"\\\\\\\\n          ) : (\\\\\\\\n            <Widget\\\\\\\\n              // TODO: LEGACY.\\\\\\\\n              src=\\\\\\\\\\\\\\\"devhub.near/widget/gigs-board.components.layout.LikeButton.Faces\\\\\\\\\\\\\\\"\\\\\\\\n              props={{\\\\\\\\n                likesByUsers: Object.fromEntries(\\\\\\\\n                  post.likes.map(({ author_id }) => [author_id, \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\"])\\\\\\\\n                ),\\\\\\\\n              }}\\\\\\\\n            />\\\\\\\\n          )}\\\\\\\\n        </ButtonWithHover>\\\\\\\\n        <div class=\\\\\\\\\\\\\\\"btn-group\\\\\\\\\\\\\\\" role=\\\\\\\\\\\\\\\"group\\\\\\\\\\\\\\\">\\\\\\\\n          <ButtonWithHover\\\\\\\\n            type=\\\\\\\\\\\\\\\"button\\\\\\\\\\\\\\\"\\\\\\\\n            class=\\\\\\\\\\\\\\\"btn\\\\\\\\\\\\\\\"\\\\\\\\n            style={{ border: \\\\\\\\\\\\\\\"0px\\\\\\\\\\\\\\\" }}\\\\\\\\n            data-bs-toggle=\\\\\\\\\\\\\\\"dropdown\\\\\\\\\\\\\\\"\\\\\\\\n            aria-expanded=\\\\\\\\\\\\\\\"false\\\\\\\\\\\\\\\"\\\\\\\\n          >\\\\\\\\n            \\\\\\\\u{21aa} Reply\\\\\\\\n          </ButtonWithHover>\\\\\\\\n          <ul class=\\\\\\\\\\\\\\\"dropdown-menu\\\\\\\\\\\\\\\">\\\\\\\\n            {btnCreatorWidget(\\\\\\\\n              \\\\\\\\\\\\\\\"Idea\\\\\\\\\\\\\\\",\\\\\\\\n              emptyIcons.Idea,\\\\\\\\n              \\\\\\\\\\\\\\\"Idea\\\\\\\\\\\\\\\",\\\\\\\\n              \\\\\\\\\\\\\\\"Get feedback from the community about a problem, opportunity, or need.\\\\\\\\\\\\\\\"\\\\\\\\n            )}\\\\\\\\n            {btnCreatorWidget(\\\\\\\\n              \\\\\\\\\\\\\\\"Solution\\\\\\\\\\\\\\\",\\\\\\\\n              emptyIcons.Solution,\\\\\\\\n              \\\\\\\\\\\\\\\"Solution\\\\\\\\\\\\\\\",\\\\\\\\n              \\\\\\\\\\\\\\\"Provide a specific proposal or implementation to an idea, optionally requesting funding.\\\\\\\\\\\\\\\"\\\\\\\\n            )}\\\\\\\\n            {btnCreatorWidget(\\\\\\\\n              \\\\\\\\\\\\\\\"Attestation\\\\\\\\\\\\\\\",\\\\\\\\n              emptyIcons.Attestation,\\\\\\\\n              \\\\\\\\\\\\\\\"Attestation\\\\\\\\\\\\\\\",\\\\\\\\n              \\\\\\\\\\\\\\\"Formally review or validate a solution as a recognized expert.\\\\\\\\\\\\\\\"\\\\\\\\n            )}\\\\\\\\n            {btnCreatorWidget(\\\\\\\\n              \\\\\\\\\\\\\\\"Sponsorship\\\\\\\\\\\\\\\",\\\\\\\\n              emptyIcons.Sponsorship,\\\\\\\\n              \\\\\\\\\\\\\\\"Sponsorship\\\\\\\\\\\\\\\",\\\\\\\\n              \\\\\\\\\\\\\\\"Offer to fund projects, events, or proposals that match your needs.\\\\\\\\\\\\\\\"\\\\\\\\n            )}\\\\\\\\n            <li>\\\\\\\\n              <hr class=\\\\\\\\\\\\\\\"dropdown-divider\\\\\\\\\\\\\\\" />\\\\\\\\n            </li>\\\\\\\\n            {btnCreatorWidget(\\\\\\\\n              \\\\\\\\\\\\\\\"Comment\\\\\\\\\\\\\\\",\\\\\\\\n              emptyIcons.Comment,\\\\\\\\n              \\\\\\\\\\\\\\\"Comment\\\\\\\\\\\\\\\",\\\\\\\\n              \\\\\\\\\\\\\\\"Ask a question, provide information, or share a resource that is relevant to the thread.\\\\\\\\\\\\\\\"\\\\\\\\n            )}\\\\\\\\n          </ul>\\\\\\\\n        </div>\\\\\\\\n        <ButtonWithHover\\\\\\\\n          type=\\\\\\\\\\\\\\\"button\\\\\\\\\\\\\\\"\\\\\\\\n          class=\\\\\\\\\\\\\\\"btn\\\\\\\\\\\\\\\"\\\\\\\\n          style={{ border: \\\\\\\\\\\\\\\"0px\\\\\\\\\\\\\\\" }}\\\\\\\\n          data-bs-toggle=\\\\\\\\\\\\\\\"collapse\\\\\\\\\\\\\\\"\\\\\\\\n          href={`#collapseChildPosts${postId}`}\\\\\\\\n          aria-expanded={defaultExpanded}\\\\\\\\n          aria-controls={`collapseChildPosts${postId}`}\\\\\\\\n        >\\\\\\\\n          <i class=\\\\\\\\\\\\\\\"bi bi-chevron-down\\\\\\\\\\\\\\\"> </i>{\\\\\\\\\\\\\\\" \\\\\\\\\\\\\\\"}\\\\\\\\n          {`Expand Replies (${childPostIds.length})`}\\\\\\\\n        </ButtonWithHover>\\\\\\\\n\\\\\\\\n        {isUnderPost || !parentId ? (\\\\\\\\n          <div key=\\\\\\\\\\\\\\\"link-to-parent\\\\\\\\\\\\\\\"></div>\\\\\\\\n        ) : (\\\\\\\\n          <Link\\\\\\\\n            to={href({\\\\\\\\n              gateway: \\\\\\\\\\\\\\\"near.org\\\\\\\\\\\\\\\",\\\\\\\\n              widgetSrc: \\\\\\\\\\\\\\\"devhub.near/widget/app\\\\\\\\\\\\\\\",\\\\\\\\n              params: { page: \\\\\\\\\\\\\\\"post\\\\\\\\\\\\\\\", id: parentId },\\\\\\\\n            })}\\\\\\\\n          >\\\\\\\\n            <ButtonWithHover\\\\\\\\n              type=\\\\\\\\\\\\\\\"button\\\\\\\\\\\\\\\"\\\\\\\\n              style={{ border: \\\\\\\\\\\\\\\"0px\\\\\\\\\\\\\\\" }}\\\\\\\\n              className=\\\\\\\\\\\\\\\"btn\\\\\\\\\\\\\\\"\\\\\\\\n              key=\\\\\\\\\\\\\\\"link-to-parent\\\\\\\\\\\\\\\"\\\\\\\\n            >\\\\\\\\n              <i class=\\\\\\\\\\\\\\\"bi bi-arrow-90deg-up\\\\\\\\\\\\\\\"></i>Go to parent\\\\\\\\n            </ButtonWithHover>\\\\\\\\n          </Link>\\\\\\\\n        )}\\\\\\\\n      </div>\\\\\\\\n    </FooterButtonsContianer>\\\\\\\\n  </div>\\\\\\\\n);\\\\\\\\n\\\\\\\\nconst CreatorWidget = (postType) => {\\\\\\\\n  return (\\\\\\\\n    <div\\\\\\\\n      class={`collapse ${\\\\\\\\n        draftState?.parent_post_id == postId && draftState?.postType == postType\\\\\\\\n          ? \\\\\\\\\\\\\\\"show\\\\\\\\\\\\\\\"\\\\\\\\n          : \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\"\\\\\\\\n      }`}\\\\\\\\n      id={`collapse${postType}Creator${postId}`}\\\\\\\\n      data-bs-parent={`#accordion${postId}`}\\\\\\\\n    >\\\\\\\\n      <Widget\\\\\\\\n        src={\\\\\\\\\\\\\\\"devhub.near/widget/devhub.entity.post.PostEditor\\\\\\\\\\\\\\\"}\\\\\\\\n        props={{\\\\\\\\n          postType,\\\\\\\\n          onDraftStateChange: props.onDraftStateChange,\\\\\\\\n          draftState:\\\\\\\\n            draftState?.parent_post_id == postId ? draftState : undefined,\\\\\\\\n          parentId: postId,\\\\\\\\n          mode: \\\\\\\\\\\\\\\"Create\\\\\\\\\\\\\\\",\\\\\\\\n        }}\\\\\\\\n      />\\\\\\\\n    </div>\\\\\\\\n  );\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst tokenMapping = {\\\\\\\\n  NEAR: \\\\\\\\\\\\\\\"NEAR\\\\\\\\\\\\\\\",\\\\\\\\n  USDT: {\\\\\\\\n    NEP141: {\\\\\\\\n      address: \\\\\\\\\\\\\\\"usdt.tether-token.near\\\\\\\\\\\\\\\",\\\\\\\\n    },\\\\\\\\n  },\\\\\\\\n  USDC: {\\\\\\\\n    NEP141: {\\\\\\\\n      address:\\\\\\\\n        \\\\\\\\\\\\\\\"17208628f84f5d6ad33f0da3bbbeb27ffcb398eac501a31bd6ad2011e36133a1\\\\\\\\\\\\\\\",\\\\\\\\n    },\\\\\\\\n  },\\\\\\\\n  // Add more tokens here as needed\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst reverseTokenMapping = Object.keys(tokenMapping).reduce(\\\\\\\\n  (reverseMap, key) => {\\\\\\\\n    const value = tokenMapping[key];\\\\\\\\n    if (typeof value === \\\\\\\\\\\\\\\"object\\\\\\\\\\\\\\\") {\\\\\\\\n      reverseMap[JSON.stringify(value)] = key;\\\\\\\\n    }\\\\\\\\n    return reverseMap;\\\\\\\\n  },\\\\\\\\n  {}\\\\\\\\n);\\\\\\\\n\\\\\\\\nfunction tokenResolver(token) {\\\\\\\\n  if (typeof token === \\\\\\\\\\\\\\\"string\\\\\\\\\\\\\\\") {\\\\\\\\n    return token;\\\\\\\\n  } else if (typeof token === \\\\\\\\\\\\\\\"object\\\\\\\\\\\\\\\") {\\\\\\\\n    const tokenString = reverseTokenMapping[JSON.stringify(token)];\\\\\\\\n    return tokenString || null;\\\\\\\\n  } else {\\\\\\\\n    return null; // Invalid input\\\\\\\\n  }\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst EditorWidget = (postType) => {\\\\\\\\n  return (\\\\\\\\n    <div\\\\\\\\n      class={`collapse ${\\\\\\\\n        draftState?.edit_post_id == postId && draftState?.postType == postType\\\\\\\\n          ? \\\\\\\\\\\\\\\"show\\\\\\\\\\\\\\\"\\\\\\\\n          : \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\"\\\\\\\\n      }`}\\\\\\\\n      id={`collapse${postType}Editor${postId}`}\\\\\\\\n      data-bs-parent={`#accordion${postId}`}\\\\\\\\n    >\\\\\\\\n      <Widget\\\\\\\\n        src={\\\\\\\\\\\\\\\"devhub.near/widget/devhub.entity.post.PostEditor\\\\\\\\\\\\\\\"}\\\\\\\\n        props={{\\\\\\\\n          postType,\\\\\\\\n          postId,\\\\\\\\n          mode: \\\\\\\\\\\\\\\"Edit\\\\\\\\\\\\\\\",\\\\\\\\n          author_id: post.author_id,\\\\\\\\n          labels: post.snapshot.labels,\\\\\\\\n          name: post.snapshot.name,\\\\\\\\n          description: post.snapshot.description,\\\\\\\\n          amount: post.snapshot.amount,\\\\\\\\n          token: tokenResolver(post.snapshot.sponsorship_token),\\\\\\\\n          supervisor: post.snapshot.supervisor,\\\\\\\\n          githubLink: post.snapshot.github_link,\\\\\\\\n          onDraftStateChange: props.onDraftStateChange,\\\\\\\\n          draftState:\\\\\\\\n            draftState?.edit_post_id == postId ? draftState : undefined,\\\\\\\\n        }}\\\\\\\\n      />\\\\\\\\n    </div>\\\\\\\\n  );\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst isDraft =\\\\\\\\n  (draftState?.parent_post_id === postId &&\\\\\\\\n    draftState?.postType === state.postType) ||\\\\\\\\n  (draftState?.edit_post_id === postId &&\\\\\\\\n    draftState?.postType === state.postType);\\\\\\\\n\\\\\\\\nfunction Editor() {\\\\\\\\n  return (\\\\\\\\n    <div class=\\\\\\\\\\\\\\\"row\\\\\\\\\\\\\\\" id={`accordion${postId}`} key=\\\\\\\\\\\\\\\"editors-footer\\\\\\\\\\\\\\\">\\\\\\\\n      <div\\\\\\\\n        key={`${state.postType}${state.editorType}${postId}`}\\\\\\\\n        className={\\\\\\\\\\\\\\\"w-100\\\\\\\\\\\\\\\"}\\\\\\\\n      >\\\\\\\\n        {state.editorType === \\\\\\\\\\\\\\\"CREATE\\\\\\\\\\\\\\\" ? (\\\\\\\\n          <>\\\\\\\\n            <Widget\\\\\\\\n              src={\\\\\\\\\\\\\\\"devhub.near/widget/devhub.entity.post.PostEditor\\\\\\\\\\\\\\\"}\\\\\\\\n              props={{\\\\\\\\n                postType: state.postType,\\\\\\\\n                onDraftStateChange: props.onDraftStateChange,\\\\\\\\n                draftState:\\\\\\\\n                  draftState?.parent_post_id == postId ? draftState : undefined,\\\\\\\\n                parentId: postId,\\\\\\\\n                mode: \\\\\\\\\\\\\\\"Create\\\\\\\\\\\\\\\",\\\\\\\\n              }}\\\\\\\\n            />\\\\\\\\n          </>\\\\\\\\n        ) : (\\\\\\\\n          <>\\\\\\\\n            <Widget\\\\\\\\n              src={\\\\\\\\\\\\\\\"devhub.near/widget/devhub.entity.post.PostEditor\\\\\\\\\\\\\\\"}\\\\\\\\n              props={{\\\\\\\\n                postType: state.postType,\\\\\\\\n                postId,\\\\\\\\n                mode: \\\\\\\\\\\\\\\"Edit\\\\\\\\\\\\\\\",\\\\\\\\n                author_id: post.author_id,\\\\\\\\n                labels: post.snapshot.labels,\\\\\\\\n                name: post.snapshot.name,\\\\\\\\n                description: post.snapshot.description,\\\\\\\\n                amount: post.snapshot.amount,\\\\\\\\n                token: tokenResolver(post.snapshot.sponsorship_token),\\\\\\\\n                supervisor: post.snapshot.supervisor,\\\\\\\\n                githubLink: post.snapshot.github_link,\\\\\\\\n                onDraftStateChange: props.onDraftStateChange,\\\\\\\\n                draftState:\\\\\\\\n                  draftState?.edit_post_id == postId ? draftState : undefined,\\\\\\\\n              }}\\\\\\\\n            />\\\\\\\\n          </>\\\\\\\\n        )}\\\\\\\\n      </div>\\\\\\\\n    </div>\\\\\\\\n  );\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst renamedPostType =\\\\\\\\n  snapshot.post_type == \\\\\\\\\\\\\\\"Submission\\\\\\\\\\\\\\\" ? \\\\\\\\\\\\\\\"Solution\\\\\\\\\\\\\\\" : snapshot.post_type;\\\\\\\\n\\\\\\\\nconst tags = post.snapshot.labels ? (\\\\\\\\n  <div\\\\\\\\n    class=\\\\\\\\\\\\\\\"card-title d-flex flex-wrap align-items-center\\\\\\\\\\\\\\\"\\\\\\\\n    style={{ margin: \\\\\\\\\\\\\\\"20px 0\\\\\\\\\\\\\\\" }}\\\\\\\\n    key=\\\\\\\\\\\\\\\"post-labels\\\\\\\\\\\\\\\"\\\\\\\\n  >\\\\\\\\n    {post.snapshot.labels.map((tag, idx) => (\\\\\\\\n      <div className=\\\\\\\\\\\\\\\"d-flex align-items-center my-3 me-3\\\\\\\\\\\\\\\">\\\\\\\\n        <Link\\\\\\\\n          to={href({\\\\\\\\n            widgetSrc: \\\\\\\\\\\\\\\"devhub.near/widget/app\\\\\\\\\\\\\\\",\\\\\\\\n            params: { page: \\\\\\\\\\\\\\\"feed\\\\\\\\\\\\\\\", tag: tag },\\\\\\\\n          })}\\\\\\\\n        >\\\\\\\\n          <div\\\\\\\\n            className=\\\\\\\\\\\\\\\"d-flex gap-3 align-items-center\\\\\\\\\\\\\\\"\\\\\\\\n            style={{ cursor: \\\\\\\\\\\\\\\"pointer\\\\\\\\\\\\\\\", textDecoration: \\\\\\\\\\\\\\\"none\\\\\\\\\\\\\\\" }}\\\\\\\\n          >\\\\\\\\n            <Widget\\\\\\\\n              src={\\\\\\\\\\\\\\\"devhub.near/widget/devhub.components.atom.Tag\\\\\\\\\\\\\\\"}\\\\\\\\n              props={{\\\\\\\\n                tag,\\\\\\\\n                black: true,\\\\\\\\n              }}\\\\\\\\n            />\\\\\\\\n          </div>\\\\\\\\n        </Link>\\\\\\\\n        {idx !== post.snapshot.labels.length - 1 && (\\\\\\\\n          <span className=\\\\\\\\\\\\\\\"ms-3\\\\\\\\\\\\\\\">\\\\\\\\u{2022}</span>\\\\\\\\n        )}\\\\\\\\n      </div>\\\\\\\\n    ))}\\\\\\\\n  </div>\\\\\\\\n) : (\\\\\\\\n  <div key=\\\\\\\\\\\\\\\"post-labels\\\\\\\\\\\\\\\"></div>\\\\\\\\n);\\\\\\\\n\\\\\\\\nconst Title = styled.h5`\\\\\\\\n  margin: 1rem 0;\\\\\\\\n\\\\\\\\n  color: #151515;\\\\\\\\n  font-size: 1.15rem;\\\\\\\\n  font-style: normal;\\\\\\\\n  font-weight: 700;\\\\\\\\n  line-height: 1.625rem; /* 55.556% */\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst postTitle =\\\\\\\\n  snapshot.post_type == \\\\\\\\\\\\\\\"Comment\\\\\\\\\\\\\\\" ? (\\\\\\\\n    <div key=\\\\\\\\\\\\\\\"post-title\\\\\\\\\\\\\\\"></div>\\\\\\\\n  ) : (\\\\\\\\n    <Title key=\\\\\\\\\\\\\\\"post-title\\\\\\\\\\\\\\\">\\\\\\\\n      {emptyIcons[snapshot.post_type]} {renamedPostType}: {snapshot.name}\\\\\\\\n    </Title>\\\\\\\\n  );\\\\\\\\n\\\\\\\\nconst postExtra =\\\\\\\\n  snapshot.post_type == \\\\\\\\\\\\\\\"Sponsorship\\\\\\\\\\\\\\\" ? (\\\\\\\\n    <div key=\\\\\\\\\\\\\\\"post-extra\\\\\\\\\\\\\\\">\\\\\\\\n      <h6 class=\\\\\\\\\\\\\\\"card-subtitle mb-2 text-muted\\\\\\\\\\\\\\\">\\\\\\\\n        Maximum amount: {snapshot.amount}{\\\\\\\\\\\\\\\" \\\\\\\\\\\\\\\"}\\\\\\\\n        {tokenResolver(snapshot.sponsorship_token)}\\\\\\\\n      </h6>\\\\\\\\n      <h6 class=\\\\\\\\\\\\\\\"card-subtitle mb-2 text-muted\\\\\\\\\\\\\\\">\\\\\\\\n        Supervisor:{\\\\\\\\\\\\\\\" \\\\\\\\\\\\\\\"}\\\\\\\\n        <Widget\\\\\\\\n          src={\\\\\\\\\\\\\\\"neardevgov.near/widget/ProfileLine\\\\\\\\\\\\\\\"}\\\\\\\\n          props={{ accountId: snapshot.supervisor }}\\\\\\\\n        />\\\\\\\\n      </h6>\\\\\\\\n    </div>\\\\\\\\n  ) : (\\\\\\\\n    <div></div>\\\\\\\\n  );\\\\\\\\n\\\\\\\\nconst childPostHasDraft = childPostIds.find(\\\\\\\\n  (childId) =>\\\\\\\\n    childId == draftState?.edit_post_id || childId == draftState?.parent_post_id\\\\\\\\n);\\\\\\\\nif (\\\\\\\\n  (childPostHasDraft || state.childrenOfChildPostsHasDraft) &&\\\\\\\\n  props.expandParent\\\\\\\\n) {\\\\\\\\n  props.expandParent();\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst postsList =\\\\\\\\n  props.isPreview || childPostIds.length == 0 ? (\\\\\\\\n    <div key=\\\\\\\\\\\\\\\"posts-list\\\\\\\\\\\\\\\"></div>\\\\\\\\n  ) : (\\\\\\\\n    <div class=\\\\\\\\\\\\\\\"row\\\\\\\\\\\\\\\" key=\\\\\\\\\\\\\\\"posts-list\\\\\\\\\\\\\\\">\\\\\\\\n      <div\\\\\\\\n        class={`collapse mt-3 ${\\\\\\\\n          defaultExpanded ||\\\\\\\\n          childPostHasDraft ||\\\\\\\\n          state.childrenOfChildPostsHasDraft\\\\\\\\n            ? \\\\\\\\\\\\\\\"show\\\\\\\\\\\\\\\"\\\\\\\\n            : \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\"\\\\\\\\n        }`}\\\\\\\\n        id={`collapseChildPosts${postId}`}\\\\\\\\n      >\\\\\\\\n        {childPostIds.map((childId) => (\\\\\\\\n          <Widget\\\\\\\\n            src=\\\\\\\\\\\\\\\"devhub.near/widget/devhub.entity.post.Post\\\\\\\\\\\\\\\"\\\\\\\\n            props={{\\\\\\\\n              id: childId,\\\\\\\\n              isUnderPost: true,\\\\\\\\n              onDraftStateChange: props.onDraftStateChange,\\\\\\\\n              draftState,\\\\\\\\n              expandParent: () =>\\\\\\\\n                State.update({ childrenOfChildPostsHasDraft: true }),\\\\\\\\n              referral: `subpost${childId}of${postId}`,\\\\\\\\n            }}\\\\\\\\n          />\\\\\\\\n        ))}\\\\\\\\n      </div>\\\\\\\\n    </div>\\\\\\\\n  );\\\\\\\\n\\\\\\\\nconst LimitedMarkdown = styled.div`\\\\\\\\n  max-height: 20em;\\\\\\\\n`;\\\\\\\\n\\\\\\\\n// Determine if located in the post page.\\\\\\\\nconst isInList = props.isInList;\\\\\\\\nconst contentArray = snapshot.description.split(\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\");\\\\\\\\nconst needClamp = isInList && contentArray.length > 5;\\\\\\\\n\\\\\\\\ninitState({\\\\\\\\n  clamp: needClamp,\\\\\\\\n});\\\\\\\\n\\\\\\\\nconst clampedContent = needClamp\\\\\\\\n  ? contentArray.slice(0, 3).join(\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\")\\\\\\\\n  : snapshot.description;\\\\\\\\n\\\\\\\\n// Should make sure the posts under the currently top viewed post are limited in size.\\\\\\\\nconst descriptionArea = isUnderPost ? (\\\\\\\\n  <LimitedMarkdown className=\\\\\\\\\\\\\\\"overflow-auto\\\\\\\\\\\\\\\" key=\\\\\\\\\\\\\\\"description-area\\\\\\\\\\\\\\\">\\\\\\\\n    {/* {widget(\\\\\\\\\\\\\\\"components.molecule.markdown-viewer\\\\\\\\\\\\\\\", {\\\\\\\\n      text: snapshot.description,\\\\\\\\n    })} */}\\\\\\\\n    <Widget\\\\\\\\n      src={\\\\\\\\\\\\\\\"devhub.near/widget/devhub.components.molecule.MarkdownViewer\\\\\\\\\\\\\\\"}\\\\\\\\n      props={{\\\\\\\\n        text: snapshot.description,\\\\\\\\n      }}\\\\\\\\n    />\\\\\\\\n  </LimitedMarkdown>\\\\\\\\n) : (\\\\\\\\n  <div className=\\\\\\\\\\\\\\\"w-100 overflow-auto\\\\\\\\\\\\\\\">\\\\\\\\n    <div class={state.clamp ? \\\\\\\\\\\\\\\"clamp\\\\\\\\\\\\\\\" : \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\"}>\\\\\\\\n      {/* {widget(\\\\\\\\\\\\\\\"components.molecule.markdown-viewer\\\\\\\\\\\\\\\", {\\\\\\\\n        text: state.clamp ? clampedContent : snapshot.description,\\\\\\\\n      })} */}\\\\\\\\n      <Widget\\\\\\\\n        src={\\\\\\\\\\\\\\\"devhub.near/widget/devhub.components.molecule.MarkdownViewer\\\\\\\\\\\\\\\"}\\\\\\\\n        props={{\\\\\\\\n          text: state.clamp ? clampedContent : snapshot.description,\\\\\\\\n        }}\\\\\\\\n      />\\\\\\\\n    </div>\\\\\\\\n    {state.clamp ? (\\\\\\\\n      <div class=\\\\\\\\\\\\\\\"d-flex justify-content-start\\\\\\\\\\\\\\\">\\\\\\\\n        <a\\\\\\\\n          style={{ cursor: \\\\\\\\\\\\\\\"pointer\\\\\\\\\\\\\\\", color: \\\\\\\\\\\\\\\"#00ec97\\\\\\\\\\\\\\\" }}\\\\\\\\n          class=\\\\\\\\\\\\\\\"btn-link text-dark fw-bold text-decoration-none\\\\\\\\\\\\\\\"\\\\\\\\n          onClick={() => State.update({ clamp: false })}\\\\\\\\n        >\\\\\\\\n          See more\\\\\\\\n        </a>\\\\\\\\n      </div>\\\\\\\\n    ) : (\\\\\\\\n      <></>\\\\\\\\n    )}\\\\\\\\n  </div>\\\\\\\\n);\\\\\\\\n\\\\\\\\nconst timestampElement = (_snapshot) => {\\\\\\\\n  return (\\\\\\\\n    <Link\\\\\\\\n      class=\\\\\\\\\\\\\\\"text-muted\\\\\\\\\\\\\\\"\\\\\\\\n      href={href({\\\\\\\\n        gateway: \\\\\\\\\\\\\\\"near.org\\\\\\\\\\\\\\\",\\\\\\\\n        widgetSrc: \\\\\\\\\\\\\\\"devhub.near/widget/app\\\\\\\\\\\\\\\",\\\\\\\\n        params: {\\\\\\\\n          page: \\\\\\\\\\\\\\\"post\\\\\\\\\\\\\\\",\\\\\\\\n          id: postId,\\\\\\\\n          timestamp: _snapshot.timestamp,\\\\\\\\n          compareTimestamp: null,\\\\\\\\n          referral,\\\\\\\\n        },\\\\\\\\n      })}\\\\\\\\n    >\\\\\\\\n      {readableDate(_snapshot.timestamp / 1000000).substring(4)}\\\\\\\\n\\\\\\\\n      <Widget\\\\\\\\n        src=\\\\\\\\\\\\\\\"mob.near/widget/ProfileImage\\\\\\\\\\\\\\\"\\\\\\\\n        props={{\\\\\\\\n          accountId: _snapshot.editor_id,\\\\\\\\n          style: {\\\\\\\\n            width: \\\\\\\\\\\\\\\"1.25em\\\\\\\\\\\\\\\",\\\\\\\\n            height: \\\\\\\\\\\\\\\"1.25em\\\\\\\\\\\\\\\",\\\\\\\\n          },\\\\\\\\n          imageStyle: {\\\\\\\\n            transform: \\\\\\\\\\\\\\\"translateY(-12.5%)\\\\\\\\\\\\\\\",\\\\\\\\n          },\\\\\\\\n        }}\\\\\\\\n      />\\\\\\\\n      {_snapshot.editor_id.substring(0, 8)}\\\\\\\\n    </Link>\\\\\\\\n  );\\\\\\\\n};\\\\\\\\n\\\\\\\\nfunction combineText(_snapshot) {\\\\\\\\n  return (\\\\\\\\n    \\\\\\\\\\\\\\\"## \\\\\\\\\\\\\\\" +\\\\\\\\n    _snapshot.post_type +\\\\\\\\n    \\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\" +\\\\\\\\n    _snapshot.name +\\\\\\\\n    \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\" +\\\\\\\\n    _snapshot.description\\\\\\\\n  );\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst CardContainer = styled.div`\\\\\\\\n  padding: 1.5rem 3rem !important;\\\\\\\\n  border-radius: 16px !important;\\\\\\\\n  border: 1px solid rgba(129, 129, 129, 0.3) !important;\\\\\\\\n  background: #fffefe !important;\\\\\\\\n\\\\\\\\n  @media screen and (max-width: 960px) {\\\\\\\\n    padding: 1rem !important;\\\\\\\\n  }\\\\\\\\n`;\\\\\\\\n\\\\\\\\nreturn (\\\\\\\\n  <CardContainer className={`card ${borders[snapshot.post_type]} attractable`}>\\\\\\\\n    {header}\\\\\\\\n    <div className=\\\\\\\\\\\\\\\"card-body\\\\\\\\\\\\\\\" style={{ padding: 0 }}>\\\\\\\\n      {searchKeywords}\\\\\\\\n      {compareSnapshot ? (\\\\\\\\n        <div\\\\\\\\n          class=\\\\\\\\\\\\\\\"border rounded\\\\\\\\\\\\\\\"\\\\\\\\n          style={{ marginTop: \\\\\\\\\\\\\\\"16px\\\\\\\\\\\\\\\", marginBottom: \\\\\\\\\\\\\\\"16px\\\\\\\\\\\\\\\" }}\\\\\\\\n        >\\\\\\\\n          <div class=\\\\\\\\\\\\\\\"d-flex justify-content-end\\\\\\\\\\\\\\\" style={{ fontSize: \\\\\\\\\\\\\\\"12px\\\\\\\\\\\\\\\" }}>\\\\\\\\n            <div class=\\\\\\\\\\\\\\\"d-flex w-50 justify-content-end mt-1 me-2\\\\\\\\\\\\\\\">\\\\\\\\n              {timestampElement(snapshot)}\\\\\\\\n              {snapshot !== compareSnapshot && (\\\\\\\\n                <>\\\\\\\\n                  <div class=\\\\\\\\\\\\\\\"mx-1 align-self-center\\\\\\\\\\\\\\\">\\\\\\\\n                    <i class=\\\\\\\\\\\\\\\"bi bi-file-earmark-diff\\\\\\\\\\\\\\\" />\\\\\\\\n                  </div>\\\\\\\\n                  {timestampElement(compareSnapshot)}\\\\\\\\n                </>\\\\\\\\n              )}\\\\\\\\n            </div>\\\\\\\\n          </div>\\\\\\\\n          <div className=\\\\\\\\\\\\\\\"w-100 overflow-auto\\\\\\\\\\\\\\\">\\\\\\\\n            <Widget\\\\\\\\n              src=\\\\\\\\\\\\\\\"markeljan.near/widget/MarkdownDiff\\\\\\\\\\\\\\\"\\\\\\\\n              props={{\\\\\\\\n                post: post,\\\\\\\\n                currentCode: combineText(\\\\\\\\n                  swapTimestamps ? compareSnapshot : snapshot\\\\\\\\n                ),\\\\\\\\n                prevCode: combineText(\\\\\\\\n                  swapTimestamps ? snapshot : compareSnapshot\\\\\\\\n                ),\\\\\\\\n                showLineNumber: true,\\\\\\\\n              }}\\\\\\\\n            />\\\\\\\\n          </div>\\\\\\\\n        </div>\\\\\\\\n      ) : (\\\\\\\\n        <>\\\\\\\\n          {postTitle}\\\\\\\\n          {postExtra}\\\\\\\\n          {descriptionArea}\\\\\\\\n        </>\\\\\\\\n      )}\\\\\\\\n      {tags}\\\\\\\\n      {buttonsFooter}\\\\\\\\n      {!props.isPreview && (isDraft || state.showEditor) && <Editor />}\\\\\\\\n      {postsList}\\\\\\\\n    </div>\\\\\\\\n  </CardContainer>\\\\\\\\n);\\\\\\\\n\"}, \"devhub.page.communities\": {\"\": \"const { getAllCommunitiesMetadata, createCommunity } = VM.require(\\\\\\\\n  \\\\\\\\\\\\\\\"devhub.near/widget/core.adapter.devhub-contract\\\\\\\\\\\\\\\"\\\\\\\\n);\\\\\\\\n\\\\\\\\nif (!getAllCommunitiesMetadata || !createCommunity) {\\\\\\\\n  return <p>Loading modules...</p>;\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst onCommunitySubmit = (inputs) =>\\\\\\\\n  createCommunity({\\\\\\\\n    inputs: {\\\\\\\\n      ...inputs,\\\\\\\\n\\\\\\\\n      bio_markdown: [\\\\\\\\n        \\\\\\\\\\\\\\\"This is a sample text about your community.\\\\\\\\\\\\\\\",\\\\\\\\n        \\\\\\\\\\\\\\\"You can change it on the community configuration page.\\\\\\\\\\\\\\\",\\\\\\\\n      ].join(\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\"),\\\\\\\\n\\\\\\\\n      logo_url:\\\\\\\\n        \\\\\\\\\\\\\\\"https://ipfs.near.social/ipfs/bafkreibysr2mkwhb4j36h2t7mqwhynqdy4vzjfygfkfg65kuspd2bawauu\\\\\\\\\\\\\\\",\\\\\\\\n\\\\\\\\n      banner_url:\\\\\\\\n        \\\\\\\\\\\\\\\"https://ipfs.near.social/ipfs/bafkreic4xgorjt6ha5z4s5e3hscjqrowe5ahd7hlfc5p4hb6kdfp6prgy4\\\\\\\\\\\\\\\",\\\\\\\\n    },\\\\\\\\n  });\\\\\\\\n\\\\\\\\nconst [showSpawner, setShowSpawner] = useState(false);\\\\\\\\n\\\\\\\\nconst [searchKey, setSearchKey] = useState(\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\");\\\\\\\\nconst [sort, setSort] = useState(\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\");\\\\\\\\n\\\\\\\\nconst communitiesMetadata = getAllCommunitiesMetadata();\\\\\\\\n\\\\\\\\nif (!communitiesMetadata) {\\\\\\\\n  return <p>Loading...</p>;\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst SortedAndFiltered = (searchKey, sortBy) => {\\\\\\\\n  let communities = (communitiesMetadata ?? []).reverse();\\\\\\\\n\\\\\\\\n  let filtered = [...communities];\\\\\\\\n  if (searchKey !== \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\") {\\\\\\\\n    filtered = communities.filter((community) =>\\\\\\\\n      community.name.toLowerCase().includes(searchKey.toLowerCase())\\\\\\\\n    );\\\\\\\\n  }\\\\\\\\n\\\\\\\\n  let sortedCommunities = [...filtered];\\\\\\\\n  if (sortBy !== \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\") {\\\\\\\\n    sortedCommunities.sort((a, b) => {\\\\\\\\n      let nameA = a.name.toLowerCase();\\\\\\\\n      let nameB = b.name.toLowerCase();\\\\\\\\n\\\\\\\\n      if (nameA < nameB) {\\\\\\\\n        return -1;\\\\\\\\n      }\\\\\\\\n      if (nameA > nameB) {\\\\\\\\n        return 1;\\\\\\\\n      }\\\\\\\\n      return 0;\\\\\\\\n    });\\\\\\\\n\\\\\\\\n    if (sortBy === \\\\\\\\\\\\\\\"z-a\\\\\\\\\\\\\\\") {\\\\\\\\n      sortedCommunities.reverse();\\\\\\\\n    }\\\\\\\\n  }\\\\\\\\n\\\\\\\\n  return sortedCommunities;\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst CTA = styled.button`\\\\\\\\n  all: unset;\\\\\\\\n\\\\\\\\n  color: #f4f4f4;\\\\\\\\n\\\\\\\\n  font-size: 16px;\\\\\\\\n  font-style: normal;\\\\\\\\n  font-weight: 700;\\\\\\\\n  line-height: 20px; /* 125% */\\\\\\\\n\\\\\\\\n  border-radius: 4px;\\\\\\\\n  background: #00ec97;\\\\\\\\n\\\\\\\\n  display: flex;\\\\\\\\n  padding: 14px 16px;\\\\\\\\n  align-items: center;\\\\\\\\n  gap: 8px;\\\\\\\\n\\\\\\\\n  &:hover {\\\\\\\\n    background: #04a46e;\\\\\\\\n  }\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst CardGrid = styled.div`\\\\\\\\n  width: 100%;\\\\\\\\n  height: 100%;\\\\\\\\n\\\\\\\\n  display: grid;\\\\\\\\n  grid-template-columns: repeat(2, 1fr);\\\\\\\\n  gap: 3rem;\\\\\\\\n\\\\\\\\n  @media screen and (max-width: 1000px) {\\\\\\\\n    display: flex;\\\\\\\\n    flex-wrap: wrap;\\\\\\\\n    gap: 2rem;\\\\\\\\n  }\\\\\\\\n`;\\\\\\\\n\\\\\\\\nreturn (\\\\\\\\n  <div className=\\\\\\\\\\\\\\\"w-100\\\\\\\\\\\\\\\">\\\\\\\\n    <Widget\\\\\\\\n      src={`devhub.near/widget/devhub.components.island.banner`}\\\\\\\\n      props={{\\\\\\\\n        title: (\\\\\\\\n          <>\\\\\\\\n            We are building <br />\\\\\\\\n            <span style={{ color: \\\\\\\\\\\\\\\"#151515\\\\\\\\\\\\\\\" }}>\\\\\\\\n              a decentralized community\\\\\\\\n            </span>{\\\\\\\\\\\\\\\" \\\\\\\\\\\\\\\"}\\\\\\\\n            <br />\\\\\\\\n            for NEAR Developers.\\\\\\\\n          </>\\\\\\\\n        ),\\\\\\\\n        imageLink:\\\\\\\\n          \\\\\\\\\\\\\\\"https://ipfs.near.social/ipfs/bafkreigtpjmgt3aphd3plbcremtvazeo7qsjvguw44m74zthyxbhj4toqe\\\\\\\\\\\\\\\",\\\\\\\\n      }}\\\\\\\\n    />\\\\\\\\n    <div style={{ background: \\\\\\\\\\\\\\\"#f4f4f4\\\\\\\\\\\\\\\" }}>\\\\\\\\n      <div\\\\\\\\n        className=\\\\\\\\\\\\\\\"d-flex justify-content-between p-4\\\\\\\\\\\\\\\"\\\\\\\\n        style={{ backgroundColor: \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\" }}\\\\\\\\n      >\\\\\\\\n        <div className=\\\\\\\\\\\\\\\"d-flex flex-column gap-3 w-100\\\\\\\\\\\\\\\">\\\\\\\\n          <h1\\\\\\\\n            className=\\\\\\\\\\\\\\\"m-0 fs-4\\\\\\\\\\\\\\\"\\\\\\\\n            style={{ color: \\\\\\\\\\\\\\\"#04a46e\\\\\\\\\\\\\\\", fontSize: \\\\\\\\\\\\\\\"1.5rem\\\\\\\\\\\\\\\" }}\\\\\\\\n          >\\\\\\\\n            Communities\\\\\\\\n          </h1>\\\\\\\\n\\\\\\\\n          <div className=\\\\\\\\\\\\\\\"d-flex flex-column-reverse flex-lg-row gap-3 justify-content-between align-items-center\\\\\\\\\\\\\\\">\\\\\\\\n            <div className=\\\\\\\\\\\\\\\"d-flex flex-column flex-lg-row col-12 col-md-6 mt-3 mt-lg-0 align-items-center gap-4 col-lg-6\\\\\\\\\\\\\\\">\\\\\\\\n              <input\\\\\\\\n                type=\\\\\\\\\\\\\\\"text\\\\\\\\\\\\\\\"\\\\\\\\n                placeholder=\\\\\\\\\\\\\\\"\\\\\\\\u{1f50d} Search Communities\\\\\\\\\\\\\\\"\\\\\\\\n                className=\\\\\\\\\\\\\\\"form-control w-100\\\\\\\\\\\\\\\"\\\\\\\\n                value={searchKey}\\\\\\\\n                onChange={(e) => setSearchKey(e.target.value)}\\\\\\\\n              />\\\\\\\\n              <select\\\\\\\\n                class=\\\\\\\\\\\\\\\"form-select\\\\\\\\\\\\\\\"\\\\\\\\n                onChange={(e) => setSort(e.target.value)}\\\\\\\\n              >\\\\\\\\n                <option selected value=\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\">\\\\\\\\n                  Sort\\\\\\\\n                </option>\\\\\\\\n                <option value=\\\\\\\\\\\\\\\"a-z\\\\\\\\\\\\\\\">A-Z</option>\\\\\\\\n                <option value=\\\\\\\\\\\\\\\"z-a\\\\\\\\\\\\\\\">Z-A</option>\\\\\\\\n              </select>\\\\\\\\n            </div>\\\\\\\\n            {context.accountId && (\\\\\\\\n              <div className=\\\\\\\\\\\\\\\"d-flex flex-column justify-content-center\\\\\\\\\\\\\\\">\\\\\\\\n                <CTA onClick={() => setShowSpawner(!showSpawner)}>\\\\\\\\n                  <i className=\\\\\\\\\\\\\\\"bi bi-plus-circle-fill me-1\\\\\\\\\\\\\\\"></i> Create\\\\\\\\n                  Community\\\\\\\\n                </CTA>\\\\\\\\n              </div>\\\\\\\\n            )}\\\\\\\\n          </div>\\\\\\\\n        </div>\\\\\\\\n      </div>\\\\\\\\n      <div className=\\\\\\\\\\\\\\\"d-flex flex-wrap align-content-start gap-4 p-4 w-100 h-100\\\\\\\\\\\\\\\">\\\\\\\\n        {showSpawner && (\\\\\\\\n          <Widget\\\\\\\\n            src=\\\\\\\\\\\\\\\"devhub.near/widget/devhub.entity.community.Spawner\\\\\\\\\\\\\\\"\\\\\\\\n            props={{\\\\\\\\n              data: null,\\\\\\\\n              onSubmit: onCommunitySubmit,\\\\\\\\n              onCancel: () => setShowSpawner(false),\\\\\\\\n            }}\\\\\\\\n          />\\\\\\\\n        )}\\\\\\\\n        <CardGrid>\\\\\\\\n          {searchKey === \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\" && sort === \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\"\\\\\\\\n            ? (communitiesMetadata ?? []).reverse().map((communityMetadata) => (\\\\\\\\n                <Widget\\\\\\\\n                  src=\\\\\\\\\\\\\\\"devhub.near/widget/devhub.entity.community.Card\\\\\\\\\\\\\\\"\\\\\\\\n                  props={{\\\\\\\\n                    format: \\\\\\\\\\\\\\\"small\\\\\\\\\\\\\\\",\\\\\\\\n                    isBannerEnabled: false,\\\\\\\\n                    metadata: communityMetadata,\\\\\\\\n                  }}\\\\\\\\n                />\\\\\\\\n              ))\\\\\\\\n            : SortedAndFiltered(searchKey, sort).map((communityMetadata) => (\\\\\\\\n                <Widget\\\\\\\\n                  src=\\\\\\\\\\\\\\\"devhub.near/widget/devhub.entity.community.Card\\\\\\\\\\\\\\\"\\\\\\\\n                  props={{\\\\\\\\n                    format: \\\\\\\\\\\\\\\"small\\\\\\\\\\\\\\\",\\\\\\\\n                    isBannerEnabled: false,\\\\\\\\n                    metadata: communityMetadata,\\\\\\\\n                  }}\\\\\\\\n                />\\\\\\\\n              ))}\\\\\\\\n        </CardGrid>\\\\\\\\n      </div>\\\\\\\\n    </div>\\\\\\\\n  </div>\\\\\\\\n);\\\\\\\\n\"}, \"devhub.entity.post.Panel\": {\"\": \"//////////////////////////////////////////////////////////////////////\\\\\\\\n///STOPWORDS//////////////////////////////////////////////////////////\\\\\\\\nconst stopWords = [\\\\\\\\n  \\\\\\\\\\\\\\\"about\\\\\\\\\\\\\\\",\\\\\\\\n  \\\\\\\\\\\\\\\"above\\\\\\\\\\\\\\\",\\\\\\\\n  \\\\\\\\\\\\\\\"after\\\\\\\\\\\\\\\",\\\\\\\\n  \\\\\\\\\\\\\\\"again\\\\\\\\\\\\\\\",\\\\\\\\n  \\\\\\\\\\\\\\\"against\\\\\\\\\\\\\\\",\\\\\\\\n  \\\\\\\\\\\\\\\"all\\\\\\\\\\\\\\\",\\\\\\\\n  \\\\\\\\\\\\\\\"and\\\\\\\\\\\\\\\",\\\\\\\\n  \\\\\\\\\\\\\\\"any\\\\\\\\\\\\\\\",\\\\\\\\n  \\\\\\\\\\\\\\\"are\\\\\\\\\\\\\\\",\\\\\\\\n  \\\\\\\\\\\\\\\"because\\\\\\\\\\\\\\\",\\\\\\\\n  \\\\\\\\\\\\\\\"been\\\\\\\\\\\\\\\",\\\\\\\\n  \\\\\\\\\\\\\\\"before\\\\\\\\\\\\\\\",\\\\\\\\n  \\\\\\\\\\\\\\\"being\\\\\\\\\\\\\\\",\\\\\\\\n  \\\\\\\\\\\\\\\"below\\\\\\\\\\\\\\\",\\\\\\\\n  \\\\\\\\\\\\\\\"between\\\\\\\\\\\\\\\",\\\\\\\\n  \\\\\\\\\\\\\\\"both\\\\\\\\\\\\\\\",\\\\\\\\n  \\\\\\\\\\\\\\\"but\\\\\\\\\\\\\\\",\\\\\\\\n  \\\\\\\\\\\\\\\"can\\\\\\\\\\\\\\\",\\\\\\\\n  \\\\\\\\\\\\\\\"cannot\\\\\\\\\\\\\\\",\\\\\\\\n  \\\\\\\\\\\\\\\"could\\\\\\\\\\\\\\\",\\\\\\\\n  \\\\\\\\\\\\\\\"did\\\\\\\\\\\\\\\",\\\\\\\\n  \\\\\\\\\\\\\\\"does\\\\\\\\\\\\\\\",\\\\\\\\n  \\\\\\\\\\\\\\\"doing\\\\\\\\\\\\\\\",\\\\\\\\n  \\\\\\\\\\\\\\\"down\\\\\\\\\\\\\\\",\\\\\\\\n  \\\\\\\\\\\\\\\"during\\\\\\\\\\\\\\\",\\\\\\\\n  \\\\\\\\\\\\\\\"each\\\\\\\\\\\\\\\",\\\\\\\\n  \\\\\\\\\\\\\\\"etc\\\\\\\\\\\\\\\",\\\\\\\\n  \\\\\\\\\\\\\\\"few\\\\\\\\\\\\\\\",\\\\\\\\n  \\\\\\\\\\\\\\\"for\\\\\\\\\\\\\\\",\\\\\\\\n  \\\\\\\\\\\\\\\"from\\\\\\\\\\\\\\\",\\\\\\\\n  \\\\\\\\\\\\\\\"further\\\\\\\\\\\\\\\",\\\\\\\\n  \\\\\\\\\\\\\\\"had\\\\\\\\\\\\\\\",\\\\\\\\n  \\\\\\\\\\\\\\\"has\\\\\\\\\\\\\\\",\\\\\\\\n  \\\\\\\\\\\\\\\"have\\\\\\\\\\\\\\\",\\\\\\\\n  \\\\\\\\\\\\\\\"having\\\\\\\\\\\\\\\",\\\\\\\\n  \\\\\\\\\\\\\\\"her\\\\\\\\\\\\\\\",\\\\\\\\n  \\\\\\\\\\\\\\\"hers\\\\\\\\\\\\\\\",\\\\\\\\n  \\\\\\\\\\\\\\\"herself\\\\\\\\\\\\\\\",\\\\\\\\n  \\\\\\\\\\\\\\\"him\\\\\\\\\\\\\\\",\\\\\\\\n  \\\\\\\\\\\\\\\"himself\\\\\\\\\\\\\\\",\\\\\\\\n  \\\\\\\\\\\\\\\"his\\\\\\\\\\\\\\\",\\\\\\\\n  \\\\\\\\\\\\\\\"how\\\\\\\\\\\\\\\",\\\\\\\\n  \\\\\\\\\\\\\\\"into\\\\\\\\\\\\\\\",\\\\\\\\n  \\\\\\\\\\\\\\\"its\\\\\\\\\\\\\\\",\\\\\\\\n  \\\\\\\\\\\\\\\"itself\\\\\\\\\\\\\\\",\\\\\\\\n  \\\\\\\\\\\\\\\"just\\\\\\\\\\\\\\\",\\\\\\\\n  \\\\\\\\\\\\\\\"more\\\\\\\\\\\\\\\",\\\\\\\\n  \\\\\\\\\\\\\\\"most\\\\\\\\\\\\\\\",\\\\\\\\n  \\\\\\\\\\\\\\\"myself\\\\\\\\\\\\\\\",\\\\\\\\n  \\\\\\\\\\\\\\\"nor\\\\\\\\\\\\\\\",\\\\\\\\n  \\\\\\\\\\\\\\\"not\\\\\\\\\\\\\\\",\\\\\\\\n  \\\\\\\\\\\\\\\"now\\\\\\\\\\\\\\\",\\\\\\\\n  \\\\\\\\\\\\\\\"off\\\\\\\\\\\\\\\",\\\\\\\\n  \\\\\\\\\\\\\\\"once\\\\\\\\\\\\\\\",\\\\\\\\n  \\\\\\\\\\\\\\\"only\\\\\\\\\\\\\\\",\\\\\\\\n  \\\\\\\\\\\\\\\"other\\\\\\\\\\\\\\\",\\\\\\\\n  \\\\\\\\\\\\\\\"our\\\\\\\\\\\\\\\",\\\\\\\\n  \\\\\\\\\\\\\\\"ours\\\\\\\\\\\\\\\",\\\\\\\\n  \\\\\\\\\\\\\\\"ourselves\\\\\\\\\\\\\\\",\\\\\\\\n  \\\\\\\\\\\\\\\"out\\\\\\\\\\\\\\\",\\\\\\\\n  \\\\\\\\\\\\\\\"over\\\\\\\\\\\\\\\",\\\\\\\\n  \\\\\\\\\\\\\\\"own\\\\\\\\\\\\\\\",\\\\\\\\n  \\\\\\\\\\\\\\\"same\\\\\\\\\\\\\\\",\\\\\\\\n  \\\\\\\\\\\\\\\"she\\\\\\\\\\\\\\\",\\\\\\\\n  \\\\\\\\\\\\\\\"should\\\\\\\\\\\\\\\",\\\\\\\\n  \\\\\\\\\\\\\\\"some\\\\\\\\\\\\\\\",\\\\\\\\n  \\\\\\\\\\\\\\\"still\\\\\\\\\\\\\\\",\\\\\\\\n  \\\\\\\\\\\\\\\"such\\\\\\\\\\\\\\\",\\\\\\\\n  \\\\\\\\\\\\\\\"than\\\\\\\\\\\\\\\",\\\\\\\\n  \\\\\\\\\\\\\\\"that\\\\\\\\\\\\\\\",\\\\\\\\n  \\\\\\\\\\\\\\\"the\\\\\\\\\\\\\\\",\\\\\\\\n  \\\\\\\\\\\\\\\"their\\\\\\\\\\\\\\\",\\\\\\\\n  \\\\\\\\\\\\\\\"theirs\\\\\\\\\\\\\\\",\\\\\\\\n  \\\\\\\\\\\\\\\"them\\\\\\\\\\\\\\\",\\\\\\\\n  \\\\\\\\\\\\\\\"themselves\\\\\\\\\\\\\\\",\\\\\\\\n  \\\\\\\\\\\\\\\"then\\\\\\\\\\\\\\\",\\\\\\\\n  \\\\\\\\\\\\\\\"there\\\\\\\\\\\\\\\",\\\\\\\\n  \\\\\\\\\\\\\\\"these\\\\\\\\\\\\\\\",\\\\\\\\n  \\\\\\\\\\\\\\\"they\\\\\\\\\\\\\\\",\\\\\\\\n  \\\\\\\\\\\\\\\"this\\\\\\\\\\\\\\\",\\\\\\\\n  \\\\\\\\\\\\\\\"those\\\\\\\\\\\\\\\",\\\\\\\\n  \\\\\\\\\\\\\\\"through\\\\\\\\\\\\\\\",\\\\\\\\n  \\\\\\\\\\\\\\\"too\\\\\\\\\\\\\\\",\\\\\\\\n  \\\\\\\\\\\\\\\"under\\\\\\\\\\\\\\\",\\\\\\\\n  \\\\\\\\\\\\\\\"until\\\\\\\\\\\\\\\",\\\\\\\\n  \\\\\\\\\\\\\\\"very\\\\\\\\\\\\\\\",\\\\\\\\n  \\\\\\\\\\\\\\\"was\\\\\\\\\\\\\\\",\\\\\\\\n  \\\\\\\\\\\\\\\"were\\\\\\\\\\\\\\\",\\\\\\\\n  \\\\\\\\\\\\\\\"what\\\\\\\\\\\\\\\",\\\\\\\\n  \\\\\\\\\\\\\\\"when\\\\\\\\\\\\\\\",\\\\\\\\n  \\\\\\\\\\\\\\\"where\\\\\\\\\\\\\\\",\\\\\\\\n  \\\\\\\\\\\\\\\"which\\\\\\\\\\\\\\\",\\\\\\\\n  \\\\\\\\\\\\\\\"while\\\\\\\\\\\\\\\",\\\\\\\\n  \\\\\\\\\\\\\\\"who\\\\\\\\\\\\\\\",\\\\\\\\n  \\\\\\\\\\\\\\\"whom\\\\\\\\\\\\\\\",\\\\\\\\n  \\\\\\\\\\\\\\\"why\\\\\\\\\\\\\\\",\\\\\\\\n  \\\\\\\\\\\\\\\"will\\\\\\\\\\\\\\\",\\\\\\\\n  \\\\\\\\\\\\\\\"with\\\\\\\\\\\\\\\",\\\\\\\\n  \\\\\\\\\\\\\\\"you\\\\\\\\\\\\\\\",\\\\\\\\n  \\\\\\\\\\\\\\\"your\\\\\\\\\\\\\\\",\\\\\\\\n  \\\\\\\\\\\\\\\"yours\\\\\\\\\\\\\\\",\\\\\\\\n  \\\\\\\\\\\\\\\"yourself\\\\\\\\\\\\\\\",\\\\\\\\n  \\\\\\\\\\\\\\\"yourselves\\\\\\\\\\\\\\\",\\\\\\\\n  \\\\\\\\\\\\\\\"www\\\\\\\\\\\\\\\",\\\\\\\\n  \\\\\\\\\\\\\\\"http\\\\\\\\\\\\\\\",\\\\\\\\n  \\\\\\\\\\\\\\\"com\\\\\\\\\\\\\\\",\\\\\\\\n];\\\\\\\\n\\\\\\\\nconst stopWordsDictionary = {};\\\\\\\\nfor (let i = 0; i < stopWords.length; i++) {\\\\\\\\n  stopWordsDictionary[stopWords[i]] = true;\\\\\\\\n}\\\\\\\\n\\\\\\\\nfunction isStopWord(word) {\\\\\\\\n  return stopWordsDictionary.hasOwnProperty(word.toLowerCase());\\\\\\\\n}\\\\\\\\n//////////////////////////////////////////////////////////////////////\\\\\\\\n///SYNONYMS///////////////////////////////////////////////////////////\\\\\\\\nconst synonyms = {\\\\\\\\n  ether: \\\\\\\\\\\\\\\"ethereum\\\\\\\\\\\\\\\",\\\\\\\\n  eth: \\\\\\\\\\\\\\\"ethereum\\\\\\\\\\\\\\\",\\\\\\\\n  either: \\\\\\\\\\\\\\\"ethereum\\\\\\\\\\\\\\\",\\\\\\\\n  app: \\\\\\\\\\\\\\\"application\\\\\\\\\\\\\\\",\\\\\\\\n  cryptocyrrency: \\\\\\\\\\\\\\\"crypto\\\\\\\\\\\\\\\",\\\\\\\\n  developerdao: \\\\\\\\\\\\\\\"devdao\\\\\\\\\\\\\\\",\\\\\\\\n  dev: \\\\\\\\\\\\\\\"develop\\\\\\\\\\\\\\\",\\\\\\\\n  doc: \\\\\\\\\\\\\\\"document\\\\\\\\\\\\\\\",\\\\\\\\n  lib: \\\\\\\\\\\\\\\"librari\\\\\\\\\\\\\\\",\\\\\\\\n  saw: \\\\\\\\\\\\\\\"see\\\\\\\\\\\\\\\",\\\\\\\\n  seen: \\\\\\\\\\\\\\\"see\\\\\\\\\\\\\\\",\\\\\\\\n  tweet: \\\\\\\\\\\\\\\"twitter\\\\\\\\\\\\\\\",\\\\\\\\n  paid: \\\\\\\\\\\\\\\"pai\\\\\\\\\\\\\\\",\\\\\\\\n  src: \\\\\\\\\\\\\\\"sourc\\\\\\\\\\\\\\\",\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst applySynonym = (word) => {\\\\\\\\n  if (synonyms.hasOwnProperty(word.toLowerCase())) {\\\\\\\\n    return synonyms[word];\\\\\\\\n  }\\\\\\\\n  return word;\\\\\\\\n};\\\\\\\\n//////////////////////////////////////////////////////////////////////\\\\\\\\n///STEMMING///////////////////////////////////////////////////////////\\\\\\\\nconst step2list = {\\\\\\\\n  ational: \\\\\\\\\\\\\\\"ate\\\\\\\\\\\\\\\",\\\\\\\\n  tional: \\\\\\\\\\\\\\\"tion\\\\\\\\\\\\\\\",\\\\\\\\n  enci: \\\\\\\\\\\\\\\"ence\\\\\\\\\\\\\\\",\\\\\\\\n  anci: \\\\\\\\\\\\\\\"ance\\\\\\\\\\\\\\\",\\\\\\\\n  izer: \\\\\\\\\\\\\\\"ize\\\\\\\\\\\\\\\",\\\\\\\\n  bli: \\\\\\\\\\\\\\\"ble\\\\\\\\\\\\\\\",\\\\\\\\n  alli: \\\\\\\\\\\\\\\"al\\\\\\\\\\\\\\\",\\\\\\\\n  entli: \\\\\\\\\\\\\\\"ent\\\\\\\\\\\\\\\",\\\\\\\\n  eli: \\\\\\\\\\\\\\\"e\\\\\\\\\\\\\\\",\\\\\\\\n  ousli: \\\\\\\\\\\\\\\"ous\\\\\\\\\\\\\\\",\\\\\\\\n  ization: \\\\\\\\\\\\\\\"ize\\\\\\\\\\\\\\\",\\\\\\\\n  ation: \\\\\\\\\\\\\\\"ate\\\\\\\\\\\\\\\",\\\\\\\\n  ator: \\\\\\\\\\\\\\\"ate\\\\\\\\\\\\\\\",\\\\\\\\n  alism: \\\\\\\\\\\\\\\"al\\\\\\\\\\\\\\\",\\\\\\\\n  iveness: \\\\\\\\\\\\\\\"ive\\\\\\\\\\\\\\\",\\\\\\\\n  fulness: \\\\\\\\\\\\\\\"ful\\\\\\\\\\\\\\\",\\\\\\\\n  ousness: \\\\\\\\\\\\\\\"ous\\\\\\\\\\\\\\\",\\\\\\\\n  aliti: \\\\\\\\\\\\\\\"al\\\\\\\\\\\\\\\",\\\\\\\\n  iviti: \\\\\\\\\\\\\\\"ive\\\\\\\\\\\\\\\",\\\\\\\\n  biliti: \\\\\\\\\\\\\\\"ble\\\\\\\\\\\\\\\",\\\\\\\\n  logi: \\\\\\\\\\\\\\\"log\\\\\\\\\\\\\\\",\\\\\\\\n};\\\\\\\\n\\\\\\\\n/** @type {Record<string, string>} */\\\\\\\\nconst step3list = {\\\\\\\\n  icate: \\\\\\\\\\\\\\\"ic\\\\\\\\\\\\\\\",\\\\\\\\n  ative: \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\",\\\\\\\\n  alize: \\\\\\\\\\\\\\\"al\\\\\\\\\\\\\\\",\\\\\\\\n  iciti: \\\\\\\\\\\\\\\"ic\\\\\\\\\\\\\\\",\\\\\\\\n  ical: \\\\\\\\\\\\\\\"ic\\\\\\\\\\\\\\\",\\\\\\\\n  ful: \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\",\\\\\\\\n  ness: \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\",\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst gt0 = /^([^aeiou][^aeiouy]*)?([aeiouy][aeiou]*)([^aeiou][^aeiouy]*)/;\\\\\\\\nconst eq1 =\\\\\\\\n  /^([^aeiou][^aeiouy]*)?([aeiouy][aeiou]*)([^aeiou][^aeiouy]*)([aeiouy][aeiou]*)?$/;\\\\\\\\nconst gt1 =\\\\\\\\n  /^([^aeiou][^aeiouy]*)?(([aeiouy][aeiou]*)([^aeiou][^aeiouy]*)){2,}/;\\\\\\\\nconst vowelInStem = /^([^aeiou][^aeiouy]*)?[aeiouy]/;\\\\\\\\nconst consonantLike = /^([^aeiou][^aeiouy]*)[aeiouy][^aeiouwxy]$/;\\\\\\\\n\\\\\\\\n// Exception expressions.\\\\\\\\nconst sfxLl = /ll$/;\\\\\\\\nconst sfxE = /^(.+?)e$/;\\\\\\\\nconst sfxY = /^(.+?)y$/;\\\\\\\\nconst sfxIon = /^(.+?(s|t))(ion)$/;\\\\\\\\nconst sfxEdOrIng = /^(.+?)(ed|ing)$/;\\\\\\\\nconst sfxAtOrBlOrIz = /(at|bl|iz)$/;\\\\\\\\nconst sfxEED = /^(.+?)eed$/;\\\\\\\\nconst sfxS = /^.+?[^s]s$/;\\\\\\\\nconst sfxSsesOrIes = /^.+?(ss|i)es$/;\\\\\\\\nconst sfxMultiConsonantLike = /([^aeiouylsz])\\\\\\\\\\\\\\\\1$/;\\\\\\\\nconst step2 =\\\\\\\\n  /^(.+?)(ational|tional|enci|anci|izer|bli|alli|entli|eli|ousli|ization|ation|ator|alism|iveness|fulness|ousness|aliti|iviti|biliti|logi)$/;\\\\\\\\nconst step3 = /^(.+?)(icate|ative|alize|iciti|ical|ful|ness)$/;\\\\\\\\nconst step4 =\\\\\\\\n  /^(.+?)(al|ance|ence|er|ic|able|ible|ant|ement|ment|ent|ou|ism|ate|iti|ous|ive|ize)$/;\\\\\\\\n\\\\\\\\n/**\\\\\\\\n * Get the stem from a given value.\\\\\\\\n *\\\\\\\\n * @param {string} value\\\\\\\\n *   Value to stem.\\\\\\\\n * @returns {string}\\\\\\\\n *   Stem for `value`\\\\\\\\n */\\\\\\\\n// eslint-disable-next-line complexity\\\\\\\\nfunction stemmer(value) {\\\\\\\\n  let result = value.toLowerCase();\\\\\\\\n\\\\\\\\n  // Exit early.\\\\\\\\n  if (result.length < 3) {\\\\\\\\n    return result;\\\\\\\\n  }\\\\\\\\n\\\\\\\\n  /** @type {boolean} */\\\\\\\\n  let firstCharacterWasLowerCaseY = false;\\\\\\\\n\\\\\\\\n  // Detect initial `y`, make sure it never matches.\\\\\\\\n  if (\\\\\\\\n    result.codePointAt(0) === 121 // Lowercase Y\\\\\\\\n  ) {\\\\\\\\n    firstCharacterWasLowerCaseY = true;\\\\\\\\n    result = \\\\\\\\\\\\\\\"Y\\\\\\\\\\\\\\\" + result.slice(1);\\\\\\\\n  }\\\\\\\\n\\\\\\\\n  // Step 1a.\\\\\\\\n  if (sfxSsesOrIes.test(result)) {\\\\\\\\n    // Remove last two characters.\\\\\\\\n    result = result.slice(0, -2);\\\\\\\\n  } else if (sfxS.test(result)) {\\\\\\\\n    // Remove last character.\\\\\\\\n    result = result.slice(0, -1);\\\\\\\\n  }\\\\\\\\n\\\\\\\\n  /** @type {RegExpMatchArray|null} */\\\\\\\\n  let match;\\\\\\\\n\\\\\\\\n  // Step 1b.\\\\\\\\n  if ((match = sfxEED.exec(result))) {\\\\\\\\n    if (gt0.test(match[1])) {\\\\\\\\n      // Remove last character.\\\\\\\\n      result = result.slice(0, -1);\\\\\\\\n    }\\\\\\\\n  } else if ((match = sfxEdOrIng.exec(result)) && vowelInStem.test(match[1])) {\\\\\\\\n    result = match[1];\\\\\\\\n\\\\\\\\n    if (sfxAtOrBlOrIz.test(result)) {\\\\\\\\n      // Append `e`.\\\\\\\\n      result += \\\\\\\\\\\\\\\"e\\\\\\\\\\\\\\\";\\\\\\\\n    } else if (sfxMultiConsonantLike.test(result)) {\\\\\\\\n      // Remove last character.\\\\\\\\n      result = result.slice(0, -1);\\\\\\\\n    } else if (consonantLike.test(result)) {\\\\\\\\n      // Append `e`.\\\\\\\\n      result += \\\\\\\\\\\\\\\"e\\\\\\\\\\\\\\\";\\\\\\\\n    }\\\\\\\\n  }\\\\\\\\n\\\\\\\\n  // Step 1c.\\\\\\\\n  if ((match = sfxY.exec(result)) && vowelInStem.test(match[1])) {\\\\\\\\n    // Remove suffixing `y` and append `i`.\\\\\\\\n    result = match[1] + \\\\\\\\\\\\\\\"i\\\\\\\\\\\\\\\";\\\\\\\\n  }\\\\\\\\n\\\\\\\\n  // Step 2.\\\\\\\\n  if ((match = step2.exec(result)) && gt0.test(match[1])) {\\\\\\\\n    result = match[1] + step2list[match[2]];\\\\\\\\n  }\\\\\\\\n\\\\\\\\n  // Step 3.\\\\\\\\n  if ((match = step3.exec(result)) && gt0.test(match[1])) {\\\\\\\\n    result = match[1] + step3list[match[2]];\\\\\\\\n  }\\\\\\\\n\\\\\\\\n  // Step 4.\\\\\\\\n  if ((match = step4.exec(result))) {\\\\\\\\n    if (gt1.test(match[1])) {\\\\\\\\n      result = match[1];\\\\\\\\n    }\\\\\\\\n  } else if ((match = sfxIon.exec(result)) && gt1.test(match[1])) {\\\\\\\\n    result = match[1];\\\\\\\\n  }\\\\\\\\n\\\\\\\\n  // Step 5.\\\\\\\\n  if (\\\\\\\\n    (match = sfxE.exec(result)) &&\\\\\\\\n    (gt1.test(match[1]) ||\\\\\\\\n      (eq1.test(match[1]) && !consonantLike.test(match[1])))\\\\\\\\n  ) {\\\\\\\\n    result = match[1];\\\\\\\\n  }\\\\\\\\n\\\\\\\\n  if (sfxLl.test(result) && gt1.test(result)) {\\\\\\\\n    result = result.slice(0, -1);\\\\\\\\n  }\\\\\\\\n\\\\\\\\n  // Turn initial `Y` back to `y`.\\\\\\\\n  if (firstCharacterWasLowerCaseY) {\\\\\\\\n    result = \\\\\\\\\\\\\\\"y\\\\\\\\\\\\\\\" + result.slice(1);\\\\\\\\n  }\\\\\\\\n\\\\\\\\n  return result;\\\\\\\\n}\\\\\\\\n\\\\\\\\n//////////////////////////////////////////////////////////////////////\\\\\\\\n///SPELLCHECK/////////////////////////////////////////////////////////\\\\\\\\nfunction levenshteinDistance(s, t, threshold) {\\\\\\\\n  const BIG_NUMBER = 10000;\\\\\\\\n  if (s == null || t == null) {\\\\\\\\n    return BIG_NUMBER;\\\\\\\\n  }\\\\\\\\n  if (threshold < 0) {\\\\\\\\n    return BIG_NUMBER;\\\\\\\\n  }\\\\\\\\n  let n = s.length;\\\\\\\\n  let m = t.length;\\\\\\\\n  if (Math.abs(n - m) >= threshold) {\\\\\\\\n    return BIG_NUMBER;\\\\\\\\n  }\\\\\\\\n\\\\\\\\n  // if one string is empty, the edit distance is necessarily the length of the other\\\\\\\\n  if (n == 0) {\\\\\\\\n    return m <= threshold ? m : BIG_NUMBER;\\\\\\\\n  } else if (m == 0) {\\\\\\\\n    return n <= threshold ? n : BIG_NUMBER;\\\\\\\\n  }\\\\\\\\n\\\\\\\\n  if (n > m) {\\\\\\\\n    // swap the two strings to consume less memory\\\\\\\\n    let temp = s;\\\\\\\\n    s = t;\\\\\\\\n    t = temp;\\\\\\\\n    let tempSize = n;\\\\\\\\n    n = m;\\\\\\\\n    m = tempSize;\\\\\\\\n  }\\\\\\\\n\\\\\\\\n  let p = Array.from({ length: n + 1 }, () => 0); // \\\\\\\\\\\\'previous\\\\\\\\\\\\' cost array, horizontally\\\\\\\\n  let d = Array.from({ length: n + 1 }, () => 0); // cost array, horizontally\\\\\\\\n  let _d; // placeholder to assist in swapping p and d\\\\\\\\n\\\\\\\\n  // fill in starting table values\\\\\\\\n  const boundary = Math.min(n, threshold) + 1;\\\\\\\\n  for (let i = 0; i < boundary; i++) {\\\\\\\\n    p[i] = i;\\\\\\\\n  }\\\\\\\\n  // these fills ensure that the value above the rightmost entry of our\\\\\\\\n  // stripe will be ignored in following loop iterations\\\\\\\\n  for (let i = boundary; i < p.length; i++) {\\\\\\\\n    p[i] = BIG_NUMBER;\\\\\\\\n  }\\\\\\\\n  for (let i = 0; i < d.length; i++) {\\\\\\\\n    d[i] = BIG_NUMBER;\\\\\\\\n  }\\\\\\\\n\\\\\\\\n  // iterates through t\\\\\\\\n  for (let j = 1; j <= m; j++) {\\\\\\\\n    const t_j = t.charAt(j - 1); // jth character of t\\\\\\\\n    d[0] = j;\\\\\\\\n\\\\\\\\n    // compute stripe indices, constrain to array size\\\\\\\\n    const min = Math.max(1, j - threshold);\\\\\\\\n    const max = j > BIG_NUMBER - threshold ? n : Math.min(n, j + threshold);\\\\\\\\n\\\\\\\\n    // the stripe may lead off of the table if s and t are of different sizes\\\\\\\\n    if (min > max) {\\\\\\\\n      return BIG_NUMBER;\\\\\\\\n    }\\\\\\\\n\\\\\\\\n    // ignore entry left of leftmost\\\\\\\\n    if (min > 1) {\\\\\\\\n      d[min - 1] = BIG_NUMBER;\\\\\\\\n    }\\\\\\\\n\\\\\\\\n    // iterates through [min, max] in s\\\\\\\\n    for (let i = min; i <= max; i++) {\\\\\\\\n      if (s.charAt(i - 1) == t_j) {\\\\\\\\n        // diagonally left and up\\\\\\\\n        d[i] = p[i - 1];\\\\\\\\n      } else {\\\\\\\\n        // 1 + minimum of cell to the left, to the top, diagonally left and up\\\\\\\\n        d[i] = 1 + Math.min(Math.min(d[i - 1], p[i]), p[i - 1]);\\\\\\\\n      }\\\\\\\\n    }\\\\\\\\n\\\\\\\\n    // copy current distance counts to \\\\\\\\\\\\'previous row\\\\\\\\\\\\' distance counts\\\\\\\\n    _d = p;\\\\\\\\n    p = d;\\\\\\\\n    d = _d;\\\\\\\\n  }\\\\\\\\n  // we don\\\\\\\\\\\\'t need to check for threshold here because we did it inside the loop\\\\\\\\n  return p[n] <= threshold ? p[n] : BIG_NUMBER;\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst spellcheckQueryProcessing = (query, dictionary) => {\\\\\\\\n  // Split text document into words\\\\\\\\n  const words = stemAndFilterQuery(query);\\\\\\\\n  const dictionaryArray = Object.keys(dictionary);\\\\\\\\n  // Iterate over each word in the text\\\\\\\\n  for (let i = 0; i < words.length; i++) {\\\\\\\\n    let word = words[i].toLowerCase().replace(/[^a-z0-9]/g, \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\");\\\\\\\\n\\\\\\\\n    // If the word is not in the dictionary, find the closest match\\\\\\\\n    if (!dictionary.hasOwnProperty(word)) {\\\\\\\\n      let closestMatch = undefined;\\\\\\\\n      let closestDistance = word.length;\\\\\\\\n      let allowedDistance = Math.min(word.length - 1, 3);\\\\\\\\n      // Iterate over each word in the dictionary\\\\\\\\n      if (word.length > 1) {\\\\\\\\n        for (let j = 0; j < dictionaryArray.length; j++) {\\\\\\\\n          let dictWord = dictionaryArray[j];\\\\\\\\n          let distance = levenshteinDistance(word, dictWord, allowedDistance);\\\\\\\\n\\\\\\\\n          // If the distance is less than the closest distance, update the closest match\\\\\\\\n          if (distance <= allowedDistance && distance < closestDistance) {\\\\\\\\n            closestMatch = dictWord;\\\\\\\\n            closestDistance = distance;\\\\\\\\n          }\\\\\\\\n        }\\\\\\\\n      }\\\\\\\\n      // Replace the misspelled word with the closest match\\\\\\\\n      words[i] = closestMatch;\\\\\\\\n    }\\\\\\\\n  }\\\\\\\\n  return words.filter((word) => !!word);\\\\\\\\n};\\\\\\\\n\\\\\\\\n//////////////////////////////////////////////////////////////////////\\\\\\\\n///INDEXER&SEARCH/////////////////////////////////////////////////////\\\\\\\\nconst fillDictionaryWith = (dict, text, id) => {\\\\\\\\n  let word = \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\";\\\\\\\\n  for (let i = 0; i < text.length; i++) {\\\\\\\\n    const char = text.charAt(i);\\\\\\\\n    const nextChar = text.charAt(i + 1);\\\\\\\\n    if (/\\\\\\\\\\\\\\\\w/.test(char) || (char === \\\\\\\\\\\\\\\".\\\\\\\\\\\\\\\" && /\\\\\\\\\\\\\\\\w/.test(nextChar))) {\\\\\\\\n      word += char.toLowerCase();\\\\\\\\n    } else if (word.length > 0) {\\\\\\\\n      const processedWord = applySynonym(stemmer(word));\\\\\\\\n      if (processedWord.length > 1 && !isStopWord(processedWord)) {\\\\\\\\n        const oldValue = dict[processedWord] || [];\\\\\\\\n        dict[processedWord] = [...oldValue, id];\\\\\\\\n      }\\\\\\\\n      word = \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\";\\\\\\\\n    }\\\\\\\\n  }\\\\\\\\n  const processedWord = applySynonym(stemmer(word));\\\\\\\\n  if (processedWord.length > 1 && !isStopWord(processedWord)) {\\\\\\\\n    const oldValue = dict[stemmer(processedWord)] || [];\\\\\\\\n    dict[stemmer(processedWord)] = [...oldValue, id];\\\\\\\\n  }\\\\\\\\n  return dict;\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst buildIndex = (posts) => {\\\\\\\\n  let index = {};\\\\\\\\n\\\\\\\\n  posts.forEach((post) => {\\\\\\\\n    const title = post.snapshot.name;\\\\\\\\n    const labels = post.snapshot.labels.join(\\\\\\\\\\\\\\\" \\\\\\\\\\\\\\\");\\\\\\\\n    const text = post.snapshot.description;\\\\\\\\n    const postType = post.snapshot.post_type;\\\\\\\\n    const authorId = post.author_id;\\\\\\\\n    const postText = `${authorId} ${postType} ${title} ${labels} ${text}`;\\\\\\\\n    index = fillDictionaryWith(index, postText, post.id);\\\\\\\\n  });\\\\\\\\n  return index;\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst stemAndFilterQuery = (query) => {\\\\\\\\n  return Object.keys(fillDictionaryWith({}, query));\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst sortSearchResult = (searchResult) => {\\\\\\\\n  // create a map to count the frequency of each element\\\\\\\\n  const freq = new Map();\\\\\\\\n  for (const num of searchResult) {\\\\\\\\n    freq.set(num, (freq.get(num) || 0) + 1);\\\\\\\\n  }\\\\\\\\n\\\\\\\\n  // define a custom comparison function to sort the array\\\\\\\\n  function compare(a, b) {\\\\\\\\n    // compare the frequency of the two elements\\\\\\\\n    const freqDiff = freq.get(b) - freq.get(a);\\\\\\\\n    if (freqDiff !== 0) {\\\\\\\\n      return freqDiff; // if they have different frequency, sort by frequency\\\\\\\\n    } else {\\\\\\\\n      return 0; // if they have the same frequency, leave as it is. Will be sorted by search term, by date\\\\\\\\n    }\\\\\\\\n  }\\\\\\\\n\\\\\\\\n  // sort the array using the custom comparison function\\\\\\\\n  searchResult.sort(compare);\\\\\\\\n  return searchResult.filter(\\\\\\\\n    (elem, index) => searchResult.indexOf(elem) === index\\\\\\\\n  );\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst search = (processedQueryArray, index) => {\\\\\\\\n  return sortSearchResult(\\\\\\\\n    processedQueryArray.flatMap((queryWord) => {\\\\\\\\n      const termSearchRes = index[queryWord].reverse();\\\\\\\\n      const termSortedSearchRes = sortSearchResult(termSearchRes);\\\\\\\\n      return termSortedSearchRes;\\\\\\\\n    })\\\\\\\\n  );\\\\\\\\n};\\\\\\\\n\\\\\\\\n//////////////////////////////////////////////////////////////////////\\\\\\\\n///UI&UX//////////////////////////////////////////////////////////////\\\\\\\\n//Run search and spelling computation every time the search bar modified\\\\\\\\n//but no more frequent than 1 time per 1.5 seconds\\\\\\\\nconst amountOfResultsToShowFirst = 5;\\\\\\\\n\\\\\\\\nconst buildPostsIndex = () => {\\\\\\\\n  return Near.asyncView(\\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"get_posts\\\\\\\\\\\\\\\").then(\\\\\\\\n    (posts) => {\\\\\\\\n      const index = buildIndex(posts);\\\\\\\\n      const data = posts.reduce((acc, post) => {\\\\\\\\n        acc[post.id] = post;\\\\\\\\n        return acc;\\\\\\\\n      }, {});\\\\\\\\n      return { index, data };\\\\\\\\n    }\\\\\\\\n  );\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst getProcessedPostsCached = () => {\\\\\\\\n  return useCache(() => buildPostsIndex(), \\\\\\\\\\\\\\\"processedPostsCached\\\\\\\\\\\\\\\");\\\\\\\\n};\\\\\\\\n\\\\\\\\nif (!state.interval) {\\\\\\\\n  let termStorage = \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\";\\\\\\\\n  Storage.privateSet(\\\\\\\\\\\\\\\"term\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\");\\\\\\\\n  setInterval(() => {\\\\\\\\n    const currentInput = Storage.privateGet(\\\\\\\\\\\\\\\"term\\\\\\\\\\\\\\\");\\\\\\\\n    if (currentInput !== termStorage) {\\\\\\\\n      termStorage = currentInput;\\\\\\\\n      computeResults(termStorage);\\\\\\\\n    }\\\\\\\\n  }, 1500);\\\\\\\\n  State.update({\\\\\\\\n    interval: true,\\\\\\\\n  });\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst computeResults = (term) => {\\\\\\\\n  const start = new Date().getTime();\\\\\\\\n  const processedPostsCached = useCache(\\\\\\\\n    () =>\\\\\\\\n      buildPostsIndex().then((processedPosts) => {\\\\\\\\n        // Run query first time posts retrieved\\\\\\\\n        const query = term;\\\\\\\\n        const processedQuery = spellcheckQueryProcessing(\\\\\\\\n          query,\\\\\\\\n          processedPosts.index\\\\\\\\n        );\\\\\\\\n        const searchResult = search(processedQuery, processedPosts.index);\\\\\\\\n        console.log(processedQuery);\\\\\\\\n        console.log(searchResult);\\\\\\\\n        State.update({\\\\\\\\n          searchResult,\\\\\\\\n          shownSearchResults: searchResult.slice(0, amountOfResultsToShowFirst),\\\\\\\\n          processedQuery,\\\\\\\\n          loading: false,\\\\\\\\n        });\\\\\\\\n        return processedPosts;\\\\\\\\n      }),\\\\\\\\n    \\\\\\\\\\\\\\\"processedPostsCached\\\\\\\\\\\\\\\"\\\\\\\\n  );\\\\\\\\n  if (processedPostsCached) {\\\\\\\\n    // Run query every other time after data retrieved and cached\\\\\\\\n    const query = term;\\\\\\\\n    const processedQuery = spellcheckQueryProcessing(\\\\\\\\n      query,\\\\\\\\n      processedPostsCached.index\\\\\\\\n    );\\\\\\\\n    const searchResult = search(processedQuery, processedPostsCached.index);\\\\\\\\n    console.log(processedQuery);\\\\\\\\n    console.log(searchResult);\\\\\\\\n    State.update({\\\\\\\\n      searchResult,\\\\\\\\n      shownSearchResults: searchResult.slice(0, 10),\\\\\\\\n      processedQuery,\\\\\\\\n      loading: false,\\\\\\\\n    });\\\\\\\\n  }\\\\\\\\n  const end = new Date().getTime();\\\\\\\\n  console.log(\\\\\\\\\\\\\\\"search time: \\\\\\\\\\\\\\\", end - start);\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst updateInput = (term) => {\\\\\\\\n  Storage.privateSet(\\\\\\\\\\\\\\\"term\\\\\\\\\\\\\\\", term);\\\\\\\\n  State.update({\\\\\\\\n    term,\\\\\\\\n    loading: true,\\\\\\\\n  });\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst getSearchResultsKeywordsFor = (postId) => {\\\\\\\\n  const index = getProcessedPostsCached().index;\\\\\\\\n  return state.processedQuery.filter((queryWord) => {\\\\\\\\n    return index[queryWord].includes(postId);\\\\\\\\n  });\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst showMoreSearchResults = () => {\\\\\\\\n  const shownSearchResults = state.shownSearchResults || [];\\\\\\\\n  const newShownSearchResults = state.searchResult.slice(\\\\\\\\n    0,\\\\\\\\n    shownSearchResults.length + amountOfResultsToShowFirst\\\\\\\\n  );\\\\\\\\n  State.update({ shownSearchResults: newShownSearchResults });\\\\\\\\n};\\\\\\\\n\\\\\\\\nreturn (\\\\\\\\n  <>\\\\\\\\n    <div className=\\\\\\\\\\\\\\\"d-flex flex-row gap-4\\\\\\\\\\\\\\\">\\\\\\\\n      <div className=\\\\\\\\\\\\\\\"d-flex flex-row position-relative w-25\\\\\\\\\\\\\\\">\\\\\\\\n        <div className=\\\\\\\\\\\\\\\"position-absolute d-flex ps-3 flex-column h-100 justify-center\\\\\\\\\\\\\\\">\\\\\\\\n          {state.loading ? (\\\\\\\\n            <span\\\\\\\\n              className=\\\\\\\\\\\\\\\"spinner-grow spinner-grow-sm m-auto\\\\\\\\\\\\\\\"\\\\\\\\n              role=\\\\\\\\\\\\\\\"status\\\\\\\\\\\\\\\"\\\\\\\\n              aria-hidden=\\\\\\\\\\\\\\\"true\\\\\\\\\\\\\\\"\\\\\\\\n            />\\\\\\\\n          ) : (\\\\\\\\n            <i class=\\\\\\\\\\\\\\\"bi bi-search m-auto\\\\\\\\\\\\\\\"></i>\\\\\\\\n          )}\\\\\\\\n        </div>\\\\\\\\n        <input\\\\\\\\n          type=\\\\\\\\\\\\\\\"search\\\\\\\\\\\\\\\"\\\\\\\\n          className=\\\\\\\\\\\\\\\"ps-5 form-control border border-0 bg-light\\\\\\\\\\\\\\\"\\\\\\\\n          value={state.term ?? \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\"}\\\\\\\\n          onChange={(e) => updateInput(e.target.value)}\\\\\\\\n          placeholder={props.placeholder ?? `Search Posts`}\\\\\\\\n        />\\\\\\\\n      </div>\\\\\\\\n      <div class=\\\\\\\\\\\\\\\"dropdown\\\\\\\\\\\\\\\">\\\\\\\\n        <button\\\\\\\\n          class=\\\\\\\\\\\\\\\"btn btn-light dropdown-toggle\\\\\\\\\\\\\\\"\\\\\\\\n          type=\\\\\\\\\\\\\\\"button\\\\\\\\\\\\\\\"\\\\\\\\n          data-bs-toggle=\\\\\\\\\\\\\\\"dropdown\\\\\\\\\\\\\\\"\\\\\\\\n          aria-expanded=\\\\\\\\\\\\\\\"false\\\\\\\\\\\\\\\"\\\\\\\\n        >\\\\\\\\n          Sort\\\\\\\\n        </button>\\\\\\\\n        <ul class=\\\\\\\\\\\\\\\"dropdown-menu px-2 shadow\\\\\\\\\\\\\\\">\\\\\\\\n          <li>\\\\\\\\n            <a\\\\\\\\n              style={{ borderRadius: \\\\\\\\\\\\\\\"5px\\\\\\\\\\\\\\\" }}\\\\\\\\n              class=\\\\\\\\\\\\\\\"dropdown-item link-underline link-underline-opacity-0\\\\\\\\\\\\\\\"\\\\\\\\n            >\\\\\\\\n              Latest\\\\\\\\n            </a>\\\\\\\\n          </li>\\\\\\\\n          <li>\\\\\\\\n            <a\\\\\\\\n              style={{ borderRadius: \\\\\\\\\\\\\\\"5px\\\\\\\\\\\\\\\" }}\\\\\\\\n              class=\\\\\\\\\\\\\\\"dropdown-item link-underline link-underline-opacity-0\\\\\\\\\\\\\\\"\\\\\\\\n            >\\\\\\\\n              Hottest\\\\\\\\n            </a>\\\\\\\\n          </li>\\\\\\\\n          <li>\\\\\\\\n            <a\\\\\\\\n              style={{ borderRadius: \\\\\\\\\\\\\\\"5px\\\\\\\\\\\\\\\" }}\\\\\\\\n              class=\\\\\\\\\\\\\\\"dropdown-item link-underline link-underline-opacity-0\\\\\\\\\\\\\\\"\\\\\\\\n            >\\\\\\\\n              All replies\\\\\\\\n            </a>\\\\\\\\n          </li>\\\\\\\\n        </ul>\\\\\\\\n      </div>\\\\\\\\n      <div class=\\\\\\\\\\\\\\\"dropdown\\\\\\\\\\\\\\\">\\\\\\\\n        <Widget\\\\\\\\n          // TODO: LEGACY.\\\\\\\\n          src={\\\\\\\\\\\\\\\"devhub.near/widget/gigs-board.feature.post-search.by-author\\\\\\\\\\\\\\\"}\\\\\\\\n          props={{\\\\\\\\n            authorQuery: props.authorQuery,\\\\\\\\n            onAuthorSearch: props.onAuthorSearch,\\\\\\\\n            nearDevGovGigsWidgetsAccountId: nearDevGovGigsWidgetsAccountId,\\\\\\\\n            nearDevGovGigsContractAccountId: nearDevGovGigsContractAccountId,\\\\\\\\n          }}\\\\\\\\n        />\\\\\\\\n      </div>\\\\\\\\n      <div>\\\\\\\\n        <Widget\\\\\\\\n          // TODO: LEGACY.\\\\\\\\n          src={\\\\\\\\\\\\\\\"devhub.near/widget/gigs-board.feature.post-search.by-tag\\\\\\\\\\\\\\\"}\\\\\\\\n          props={{\\\\\\\\n            tagQuery: props.tagQuery,\\\\\\\\n            onTagSearch: props.onTagSearch,\\\\\\\\n            nearDevGovGigsWidgetsAccountId: nearDevGovGigsWidgetsAccountId,\\\\\\\\n            nearDevGovGigsContractAccountId: nearDevGovGigsContractAccountId,\\\\\\\\n          }}\\\\\\\\n        />\\\\\\\\n      </div>\\\\\\\\n      <div className=\\\\\\\\\\\\\\\"d-flex flex-row-reverse flex-grow-1\\\\\\\\\\\\\\\">\\\\\\\\n        {props.children}\\\\\\\\n      </div>\\\\\\\\n    </div>\\\\\\\\n    {state.processedQuery &&\\\\\\\\n      state.processedQuery.length > 0 &&\\\\\\\\n      state.term.toLowerCase().trim() !== state.processedQuery.join(\\\\\\\\\\\\\\\" \\\\\\\\\\\\\\\") && (\\\\\\\\n        <div class=\\\\\\\\\\\\\\\"mb-2\\\\\\\\\\\\\\\" style={{ \\\\\\\\\\\\\\\"font-family\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"monospace\\\\\\\\\\\\\\\" }}>\\\\\\\\n          Looking for\\\\\\\\n          <strong>{state.processedQuery.join(\\\\\\\\\\\\\\\" \\\\\\\\\\\\\\\")}</strong>:\\\\\\\\n        </div>\\\\\\\\n      )}\\\\\\\\n    {state.term && state.term.length > 1 && state.searchResult ? (\\\\\\\\n      <Widget\\\\\\\\n        src={\\\\\\\\\\\\\\\"devhub.near/widget/devhub.entity.post.List\\\\\\\\\\\\\\\"}\\\\\\\\n        props={{\\\\\\\\n          searchResult: {\\\\\\\\n            postIds: state.searchResult,\\\\\\\\n            keywords: Object.fromEntries(\\\\\\\\n              state.searchResult.map((postId) => {\\\\\\\\n                return [postId, getSearchResultsKeywordsFor(postId)];\\\\\\\\n              })\\\\\\\\n            ),\\\\\\\\n          },\\\\\\\\n          recency: props.recency,\\\\\\\\n          tag: props.tag,\\\\\\\\n          author: props.author,\\\\\\\\n        }}\\\\\\\\n        key={key}\\\\\\\\n      />\\\\\\\\n    ) : (\\\\\\\\n      <Widget\\\\\\\\n        src={\\\\\\\\\\\\\\\"devhub.near/widget/devhub.entity.post.List\\\\\\\\\\\\\\\"}\\\\\\\\n        props={{\\\\\\\\n          recency: props.recency,\\\\\\\\n          tag: props.tag,\\\\\\\\n          author: props.author,\\\\\\\\n          transactionHashes: props.transactionHashes,\\\\\\\\n        }}\\\\\\\\n        key={key}\\\\\\\\n      />\\\\\\\\n    )}\\\\\\\\n  </>\\\\\\\\n);\\\\\\\\n\"}, \"devhub.entity.post.Postv2\": {\"\": \"const { getPost } =\\\\\\\\n  VM.require(\\\\\\\\\\\\\\\"devhub.near/widget/core.adapter.devhub-contract\\\\\\\\\\\\\\\") ||\\\\\\\\n  (() => {});\\\\\\\\n\\\\\\\\nconst { postKey, template } = props;\\\\\\\\n\\\\\\\\nconst post = getPost({ post_id: parseInt(postKey) });\\\\\\\\n\\\\\\\\nif (!post) {\\\\\\\\n  return <div>Loading ...</div>;\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst Template = template || (() => <></>);\\\\\\\\n\\\\\\\\nreturn (\\\\\\\\n  <Template\\\\\\\\n    labels={post.snapshot.labels}\\\\\\\\n    data={JSON.parse(post.snapshot.description || \\\\\\\\\\\\\\\"null\\\\\\\\\\\\\\\") || {}}\\\\\\\\n  />\\\\\\\\n);\\\\\\\\n\"}, \"devhub.components.atom.Tag\": {\"\": \"const black = props.black;\\\\\\\\n\\\\\\\\nconst Span = styled.span`\\\\\\\\n  color: ${black ? \\\\\\\\\\\\\\\"#818181\\\\\\\\\\\\\\\" : \\\\\\\\\\\\\\\"#00ec97\\\\\\\\\\\\\\\"};\\\\\\\\n  font-size: 16px;\\\\\\\\n  font-style: normal;\\\\\\\\n  font-weight: 700;\\\\\\\\n  line-height: 20px; /* 125% */\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst Tag = ({ tag }) => <Span>{tag}</Span>;\\\\\\\\n\\\\\\\\nreturn Tag(props);\\\\\\\\n\"}, \"devhub.entity.post.History\": {\"\": \"/*\\\\\\\\n---props---\\\\\\\\nprops.post: {};\\\\\\\\nprops.id: number;\\\\\\\\nprops.newTab: boolean;\\\\\\\\nprops.timestamp: number;\\\\\\\\nprops.referral: any;\\\\\\\\n*/\\\\\\\\n\\\\\\\\n/* INCLUDE: \\\\\\\\\\\\\\\"common.jsx\\\\\\\\\\\\\\\" */\\\\\\\\nconst nearDevGovGigsContractAccountId =\\\\\\\\n  props.nearDevGovGigsContractAccountId ||\\\\\\\\n  (context.widgetSrc ?? \\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\").split(\\\\\\\\\\\\\\\"/\\\\\\\\\\\\\\\", 1)[0];\\\\\\\\n\\\\\\\\nconst nearDevGovGigsWidgetsAccountId =\\\\\\\\n  props.nearDevGovGigsWidgetsAccountId ||\\\\\\\\n  (context.widgetSrc ?? \\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\").split(\\\\\\\\\\\\\\\"/\\\\\\\\\\\\\\\", 1)[0];\\\\\\\\n\\\\\\\\nfunction widget(widgetName, widgetProps, key) {\\\\\\\\n  widgetProps = {\\\\\\\\n    ...widgetProps,\\\\\\\\n    nearDevGovGigsContractAccountId: props.nearDevGovGigsContractAccountId,\\\\\\\\n    nearDevGovGigsWidgetsAccountId: props.nearDevGovGigsWidgetsAccountId,\\\\\\\\n    referral: props.referral,\\\\\\\\n  };\\\\\\\\n\\\\\\\\n  return (\\\\\\\\n    <Widget\\\\\\\\n      src={`${nearDevGovGigsWidgetsAccountId}/widget/gigs-board.${widgetName}`}\\\\\\\\n      props={widgetProps}\\\\\\\\n      key={key}\\\\\\\\n    />\\\\\\\\n  );\\\\\\\\n}\\\\\\\\n\\\\\\\\nfunction href(widgetName, linkProps) {\\\\\\\\n  linkProps = { ...linkProps };\\\\\\\\n\\\\\\\\n  if (props.nearDevGovGigsContractAccountId) {\\\\\\\\n    linkProps.nearDevGovGigsContractAccountId =\\\\\\\\n      props.nearDevGovGigsContractAccountId;\\\\\\\\n  }\\\\\\\\n\\\\\\\\n  if (props.nearDevGovGigsWidgetsAccountId) {\\\\\\\\n    linkProps.nearDevGovGigsWidgetsAccountId =\\\\\\\\n      props.nearDevGovGigsWidgetsAccountId;\\\\\\\\n  }\\\\\\\\n\\\\\\\\n  if (props.referral) {\\\\\\\\n    linkProps.referral = props.referral;\\\\\\\\n  }\\\\\\\\n\\\\\\\\n  const linkPropsQuery = Object.entries(linkProps)\\\\\\\\n    .filter(([_key, nullable]) => (nullable ?? null) !== null)\\\\\\\\n    .map(([key, value]) => `${key}=${value}`)\\\\\\\\n    .join(\\\\\\\\\\\\\\\"&\\\\\\\\\\\\\\\");\\\\\\\\n\\\\\\\\n  return `/#/${nearDevGovGigsWidgetsAccountId}/widget/gigs-board.pages.${widgetName}${\\\\\\\\n    linkPropsQuery ? \\\\\\\\\\\\\\\"?\\\\\\\\\\\\\\\" : \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\"\\\\\\\\n  }${linkPropsQuery}`;\\\\\\\\n}\\\\\\\\n/* END_INCLUDE: \\\\\\\\\\\\\\\"common.jsx\\\\\\\\\\\\\\\" */\\\\\\\\n\\\\\\\\nconst postId = props.post.id ?? (props.id ? parseInt(props.id) : 0);\\\\\\\\nconst post =\\\\\\\\n  props.post ??\\\\\\\\n  Near.view(nearDevGovGigsContractAccountId, \\\\\\\\\\\\\\\"get_post\\\\\\\\\\\\\\\", {\\\\\\\\n    post_id: postId,\\\\\\\\n  });\\\\\\\\nif (!post || !post.snapshot_history) {\\\\\\\\n  return <div class=\\\\\\\\\\\\\\\"bi bi-clock-history px-2\\\\\\\\\\\\\\\"></div>;\\\\\\\\n}\\\\\\\\nconst referral = props.referral;\\\\\\\\n\\\\\\\\nfunction readableDate(timestamp) {\\\\\\\\n  var a = new Date(timestamp);\\\\\\\\n  return (\\\\\\\\n    a.toDateString() +\\\\\\\\n    \\\\\\\\\\\\\\\" \\\\\\\\\\\\\\\" +\\\\\\\\n    a.toLocaleTimeString([], { hour: \\\\\\\\\\\\\\\"2-digit\\\\\\\\\\\\\\\", minute: \\\\\\\\\\\\\\\"2-digit\\\\\\\\\\\\\\\" })\\\\\\\\n  ).substring(4);\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst currentTimestamp = props.timestamp ?? post.snapshot.timestamp;\\\\\\\\nconst snapshot = post.snapshot;\\\\\\\\nconst snapshotHistory = post.snapshot_history\\\\\\\\n  ? Array.from(post.snapshot_history)\\\\\\\\n  : [];\\\\\\\\n\\\\\\\\nsnapshotHistory.push(snapshot);\\\\\\\\nsnapshotHistory.reverse();\\\\\\\\n\\\\\\\\nconst history = (\\\\\\\\n  <div class=\\\\\\\\\\\\\\\"btn-group\\\\\\\\\\\\\\\" role=\\\\\\\\\\\\\\\"group\\\\\\\\\\\\\\\">\\\\\\\\n    <a\\\\\\\\n      class=\\\\\\\\\\\\\\\"card-link\\\\\\\\\\\\\\\"\\\\\\\\n      role=\\\\\\\\\\\\\\\"button\\\\\\\\\\\\\\\"\\\\\\\\n      title=\\\\\\\\\\\\\\\"Post History\\\\\\\\\\\\\\\"\\\\\\\\n      data-bs-toggle=\\\\\\\\\\\\\\\"dropdown\\\\\\\\\\\\\\\"\\\\\\\\n      aria-expanded=\\\\\\\\\\\\\\\"false\\\\\\\\\\\\\\\"\\\\\\\\n      type=\\\\\\\\\\\\\\\"button\\\\\\\\\\\\\\\"\\\\\\\\n    >\\\\\\\\n      <div class=\\\\\\\\\\\\\\\"bi bi-clock-history px-2\\\\\\\\\\\\\\\"></div>\\\\\\\\n    </a>\\\\\\\\n    <ul class=\\\\\\\\\\\\\\\"dropdown-menu\\\\\\\\\\\\\\\">\\\\\\\\n      <a\\\\\\\\n        class=\\\\\\\\\\\\\\\"d-flex text-muted\\\\\\\\\\\\\\\"\\\\\\\\n        style={{ fontSize: \\\\\\\\\\\\\\\"12px\\\\\\\\\\\\\\\", textDecoration: \\\\\\\\\\\\\\\"none\\\\\\\\\\\\\\\", cursor: \\\\\\\\\\\\\\\"default\\\\\\\\\\\\\\\" }}\\\\\\\\n      >\\\\\\\\n        <a\\\\\\\\n          style={{\\\\\\\\n            textAlign: \\\\\\\\\\\\\\\"center\\\\\\\\\\\\\\\",\\\\\\\\n            minWidth: \\\\\\\\\\\\\\\"290px\\\\\\\\\\\\\\\",\\\\\\\\n            maxWidth: \\\\\\\\\\\\\\\"290px\\\\\\\\\\\\\\\",\\\\\\\\n          }}\\\\\\\\n        >\\\\\\\\n          Edit History\\\\\\\\n        </a>\\\\\\\\n        <a style={{ marginRight: \\\\\\\\\\\\\\\"8px\\\\\\\\\\\\\\\" }}>Compare</a>\\\\\\\\n      </a>\\\\\\\\n      {snapshotHistory.map((item) => {\\\\\\\\n        if (item === undefined) return;\\\\\\\\n        return (\\\\\\\\n          <li style={{ display: \\\\\\\\\\\\\\\"flex\\\\\\\\\\\\\\\" }}>\\\\\\\\n            <div\\\\\\\\n              style={{\\\\\\\\n                minWidth: \\\\\\\\\\\\\\\"290px\\\\\\\\\\\\\\\",\\\\\\\\n                maxWidth: \\\\\\\\\\\\\\\"290px\\\\\\\\\\\\\\\",\\\\\\\\n              }}\\\\\\\\n            >\\\\\\\\n              <a\\\\\\\\n                class=\\\\\\\\\\\\\\\"dropdown-item\\\\\\\\\\\\\\\"\\\\\\\\n                href={href(\\\\\\\\\\\\\\\"Post\\\\\\\\\\\\\\\", {\\\\\\\\n                  id: postId,\\\\\\\\n                  timestamp: item.timestamp,\\\\\\\\n                  compareTimestamp: null,\\\\\\\\n                  referral,\\\\\\\\n                })}\\\\\\\\n                target={props.newTab ? \\\\\\\\\\\\\\\"_blank\\\\\\\\\\\\\\\" : undefined}\\\\\\\\n              >\\\\\\\\n                {readableDate(item.timestamp / 1000000)}\\\\\\\\n\\\\\\\\n                <Widget\\\\\\\\n                  src=\\\\\\\\\\\\\\\"mob.near/widget/ProfileImage\\\\\\\\\\\\\\\"\\\\\\\\n                  props={{\\\\\\\\n                    accountId: item.editor_id,\\\\\\\\n                    style: {\\\\\\\\n                      width: \\\\\\\\\\\\\\\"1.25em\\\\\\\\\\\\\\\",\\\\\\\\n                      height: \\\\\\\\\\\\\\\"1.25em\\\\\\\\\\\\\\\",\\\\\\\\n                    },\\\\\\\\n                    imageStyle: {\\\\\\\\n                      transform: \\\\\\\\\\\\\\\"translateY(-12.5%)\\\\\\\\\\\\\\\",\\\\\\\\n                    },\\\\\\\\n                  }}\\\\\\\\n                />\\\\\\\\n                {post.author_id.substring(0, 8)}\\\\\\\\n              </a>\\\\\\\\n            </div>\\\\\\\\n            <a\\\\\\\\n              class=\\\\\\\\\\\\\\\"dropdown-item\\\\\\\\\\\\\\\"\\\\\\\\n              href={href(\\\\\\\\\\\\\\\"Post\\\\\\\\\\\\\\\", {\\\\\\\\n                id: postId,\\\\\\\\n                timestamp: currentTimestamp,\\\\\\\\n                compareTimestamp: item.timestamp,\\\\\\\\n                referral,\\\\\\\\n              })}\\\\\\\\n            >\\\\\\\\n              <i class=\\\\\\\\\\\\\\\"bi bi-file-earmark-diff\\\\\\\\\\\\\\\" />\\\\\\\\n            </a>\\\\\\\\n          </li>\\\\\\\\n        );\\\\\\\\n      })}\\\\\\\\n    </ul>\\\\\\\\n  </div>\\\\\\\\n);\\\\\\\\n\\\\\\\\nreturn history;\\\\\\\\n\"}, \"devhub.components.atom.Icon\": {\"\": \"const svgIconsByVariant = {\\\\\\\\n  floppy_drive: (elementProps) => (\\\\\\\\n    <svg\\\\\\\\n      fill=\\\\\\\\\\\\\\\"#ffffff\\\\\\\\\\\\\\\"\\\\\\\\n      version=\\\\\\\\\\\\\\\"1.1\\\\\\\\\\\\\\\"\\\\\\\\n      xmlns=\\\\\\\\\\\\\\\"http://www.w3.org/2000/svg\\\\\\\\\\\\\\\"\\\\\\\\n      width=\\\\\\\\\\\\\\\"16px\\\\\\\\\\\\\\\"\\\\\\\\n      height=\\\\\\\\\\\\\\\"16px\\\\\\\\\\\\\\\"\\\\\\\\n      viewBox=\\\\\\\\\\\\\\\"0 0 353.073 353.073\\\\\\\\\\\\\\\"\\\\\\\\n      {...elementProps}\\\\\\\\n    >\\\\\\\\n      <g>\\\\\\\\n        <path\\\\\\\\n          d={[\\\\\\\\n            \\\\\\\\\\\\\\\"M340.969,0H12.105C5.423,0,0,5.423,0,12.105v328.863c0,6.68,5.423,12.105,12.105,12.105h328.864\\\\\\\\\\\\\\\",\\\\\\\\n            \\\\\\\\\\\\\\\"c6.679,0,12.104-5.426,12.104-12.105V12.105C353.073,5.423,347.647,0,340.969,0z\\\\\\\\\\\\\\\",\\\\\\\\n            \\\\\\\\\\\\\\\"M67.589,18.164h217.895v101.884H67.589V18.164z\\\\\\\\\\\\\\\",\\\\\\\\n            \\\\\\\\\\\\\\\"M296.082,327.35H57.003V176.537h239.079V327.35z\\\\\\\\\\\\\\\",\\\\\\\\n            \\\\\\\\\\\\\\\"M223.953,33.295h30.269v72.638h-30.269V33.295z\\\\\\\\\\\\\\\",\\\\\\\\n            \\\\\\\\\\\\\\\"M274.135,213.863H78.938v-12.105\\\\\\\\\\\\\\\",\\\\\\\\n            \\\\\\\\\\\\\\\"h195.197V213.863z\\\\\\\\\\\\\\\",\\\\\\\\n            \\\\\\\\\\\\\\\"M274.135,256.231H78.938v-12.105h195.197V256.231z\\\\\\\\\\\\\\\",\\\\\\\\n            \\\\\\\\\\\\\\\"M274.135,297.087H78.938v-12.105h195.197V297.087z\\\\\\\\\\\\\\\",\\\\\\\\n          ].join(\\\\\\\\\\\\\\\" \\\\\\\\\\\\\\\")}\\\\\\\\n        />\\\\\\\\n      </g>\\\\\\\\n    </svg>\\\\\\\\n  ),\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst iconsByType = {\\\\\\\\n  bootstrap_icon: ({ className, variant, ...otherProps }) => (\\\\\\\\n    <i className={`bi ${variant} ${className}`} {...otherProps} />\\\\\\\\n  ),\\\\\\\\n\\\\\\\\n  svg_icon: ({ variant, ...elementProps }) =>\\\\\\\\n    svgIconsByVariant[variant](elementProps),\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst Icon = ({ type, ...otherProps }) =>\\\\\\\\n  typeof iconsByType[type] === \\\\\\\\\\\\\\\"function\\\\\\\\\\\\\\\"\\\\\\\\n    ? iconsByType[type](otherProps)\\\\\\\\n    : null;\\\\\\\\n\\\\\\\\nreturn Icon(props);\\\\\\\\n\"}, \"devhub.page.community.index\": {\"\": \"const Button = styled.button`\\\\\\\\n  height: 40px;\\\\\\\\n  font-size: 14px;\\\\\\\\n  border-color: #e3e3e0;\\\\\\\\n  background-color: #ffffff;\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst Banner = styled.div`\\\\\\\\n  max-width: 100%;\\\\\\\\n  min-height: 240px;\\\\\\\\n  height: 240px;\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst CenteredMessage = styled.div`\\\\\\\\n  display: flex;\\\\\\\\n  flex-direction: column;\\\\\\\\n  justify-content: center;\\\\\\\\n  align-items: center;\\\\\\\\n  width: 100%;\\\\\\\\n  height: ${(p) => p.height ?? \\\\\\\\\\\\\\\"100%\\\\\\\\\\\\\\\"};\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst NavUnderline = styled.ul`\\\\\\\\n  cursor: pointer;\\\\\\\\n  a {\\\\\\\\n    color: #151515;\\\\\\\\n    text-decoration: none;\\\\\\\\n  }\\\\\\\\n\\\\\\\\n  a.active {\\\\\\\\n    font-weight: bold;\\\\\\\\n    border-bottom: 4px solid #00ec97;\\\\\\\\n  }\\\\\\\\n  border-bottom: 1px solid #cccccc;\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst { tab, permissions, community, view } = props;\\\\\\\\n\\\\\\\\nconst { href } = VM.require(\\\\\\\\\\\\\\\"devhub.near/widget/core.lib.url\\\\\\\\\\\\\\\");\\\\\\\\n\\\\\\\\nif (!href) {\\\\\\\\n  return <></>;\\\\\\\\n}\\\\\\\\n\\\\\\\\nif (!tab) {\\\\\\\\n  tab = \\\\\\\\\\\\\\\"Activity\\\\\\\\\\\\\\\";\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst [isLinkCopied, setLinkCopied] = useState(false);\\\\\\\\n\\\\\\\\nconst tabs = [\\\\\\\\n  {\\\\\\\\n    title: \\\\\\\\\\\\\\\"Activity\\\\\\\\\\\\\\\",\\\\\\\\n    view: \\\\\\\\\\\\\\\"devhub.near/widget/devhub.entity.community.Activity\\\\\\\\\\\\\\\",\\\\\\\\n    params: {\\\\\\\\n      handle: community.handle,\\\\\\\\n    },\\\\\\\\n  },\\\\\\\\n  {\\\\\\\\n    title: \\\\\\\\\\\\\\\"Teams\\\\\\\\\\\\\\\",\\\\\\\\n    view: \\\\\\\\\\\\\\\"devhub.near/widget/devhub.entity.community.Teams\\\\\\\\\\\\\\\",\\\\\\\\n    params: {\\\\\\\\n      handle: community.handle,\\\\\\\\n    },\\\\\\\\n  },\\\\\\\\n];\\\\\\\\n\\\\\\\\n(community.addons || []).map((addon) => {\\\\\\\\n  addon.enabled &&\\\\\\\\n    tabs.push({\\\\\\\\n      title: addon.display_name,\\\\\\\\n      view: \\\\\\\\\\\\\\\"devhub.near/widget/devhub.page.addon\\\\\\\\\\\\\\\",\\\\\\\\n      params: { addon },\\\\\\\\n    });\\\\\\\\n});\\\\\\\\n\\\\\\\\nconst onShareClick = () =>\\\\\\\\n  clipboard\\\\\\\\n    .writeText(\\\\\\\\n      href({\\\\\\\\n        gateway: \\\\\\\\\\\\\\\"near.org\\\\\\\\\\\\\\\",\\\\\\\\n        widgetSrc: \\\\\\\\\\\\\\\"devhub.near/widget/app\\\\\\\\\\\\\\\",\\\\\\\\n        params: { page: \\\\\\\\\\\\\\\"community\\\\\\\\\\\\\\\", handle: community.handle },\\\\\\\\n      })\\\\\\\\n    )\\\\\\\\n    .then(setLinkCopied(true));\\\\\\\\n\\\\\\\\nlet currentTab = tabs.find((it) => it.title === tab);\\\\\\\\n\\\\\\\\nconst CommunityName = styled.span`\\\\\\\\n  color: #151515;\\\\\\\\n  font-size: 2.25rem;\\\\\\\\n  font-style: normal;\\\\\\\\n  font-weight: 700;\\\\\\\\n  line-height: 100%; /* 48px */\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst CommunityDetails = styled.span`\\\\\\\\n  color: #818181;\\\\\\\\n  font-size: 1rem;\\\\\\\\n  font-style: normal;\\\\\\\\n  font-weight: 400;\\\\\\\\n  line-height: 120%; /* 28.8px */\\\\\\\\n`;\\\\\\\\n\\\\\\\\nfunction trimHttps(url) {\\\\\\\\n  if (url.startsWith(\\\\\\\\\\\\\\\"https://\\\\\\\\\\\\\\\")) {\\\\\\\\n    return url.substring(8);\\\\\\\\n  }\\\\\\\\n  return url;\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst socialLinks = [\\\\\\\\n  ...((community.website_url?.length ?? 0) > 0\\\\\\\\n    ? [\\\\\\\\n        {\\\\\\\\n          href: `https://${trimHttps(community.website_url)}`,\\\\\\\\n          iconClass: \\\\\\\\\\\\\\\"bi bi-globe\\\\\\\\\\\\\\\",\\\\\\\\n          name: trimHttps(community.website_url),\\\\\\\\n        },\\\\\\\\n      ]\\\\\\\\n    : []),\\\\\\\\n\\\\\\\\n  ...((community.github_handle?.length ?? 0) > 0\\\\\\\\n    ? [\\\\\\\\n        {\\\\\\\\n          href: `https://github.com/${community.github_handle}`,\\\\\\\\n          iconClass: \\\\\\\\\\\\\\\"bi bi-github\\\\\\\\\\\\\\\",\\\\\\\\n          name: community.github_handle,\\\\\\\\n        },\\\\\\\\n      ]\\\\\\\\n    : []),\\\\\\\\n\\\\\\\\n  ...((community.twitter_handle?.length ?? 0) > 0\\\\\\\\n    ? [\\\\\\\\n        {\\\\\\\\n          href: `https://twitter.com/${community.twitter_handle}`,\\\\\\\\n          iconClass: \\\\\\\\\\\\\\\"bi bi-twitter\\\\\\\\\\\\\\\",\\\\\\\\n          name: community.twitter_handle,\\\\\\\\n        },\\\\\\\\n      ]\\\\\\\\n    : []),\\\\\\\\n\\\\\\\\n  ...(community.telegram_handle.length > 0\\\\\\\\n    ? community.telegram_handle.map((telegram_handle) => ({\\\\\\\\n        href: `https://t.me/${telegram_handle}`,\\\\\\\\n        iconClass: \\\\\\\\\\\\\\\"bi bi-telegram\\\\\\\\\\\\\\\",\\\\\\\\n        name: telegram_handle,\\\\\\\\n      }))\\\\\\\\n    : []),\\\\\\\\n];\\\\\\\\n\\\\\\\\nconst NavlinksContainer = styled.div`\\\\\\\\n  //background: white;\\\\\\\\n  padding: 0 3rem;\\\\\\\\n\\\\\\\\n  @media screen and (max-width: 960px) {\\\\\\\\n    padding: 0 1rem;\\\\\\\\n  }\\\\\\\\n`;\\\\\\\\n\\\\\\\\nreturn (\\\\\\\\n  <div\\\\\\\\n    className=\\\\\\\\\\\\\\\"d-flex flex-column gap-3 w-100\\\\\\\\\\\\\\\"\\\\\\\\n    style={{ background: \\\\\\\\\\\\\\\"#F4F4F4\\\\\\\\\\\\\\\" }}\\\\\\\\n  >\\\\\\\\n    <Banner\\\\\\\\n      className=\\\\\\\\\\\\\\\"object-fit-cover\\\\\\\\\\\\\\\"\\\\\\\\n      style={{\\\\\\\\n        background: `center / cover no-repeat url(${community.banner_url})`,\\\\\\\\n      }}\\\\\\\\n    />\\\\\\\\n\\\\\\\\n    <div className=\\\\\\\\\\\\\\\"container d-flex flex-wrap justify-content-between align-items-center align-items-md-start gap-4\\\\\\\\\\\\\\\">\\\\\\\\n      <div className=\\\\\\\\\\\\\\\"d-flex flex-column ms-3\\\\\\\\\\\\\\\">\\\\\\\\n        <div className=\\\\\\\\\\\\\\\"position-relative\\\\\\\\\\\\\\\">\\\\\\\\n          <div style={{ width: 150, height: 45 }}>\\\\\\\\n            <img\\\\\\\\n              alt=\\\\\\\\\\\\\\\"Loading logo...\\\\\\\\\\\\\\\"\\\\\\\\n              className=\\\\\\\\\\\\\\\"rounded-circle position-absolute\\\\\\\\\\\\\\\"\\\\\\\\n              width=\\\\\\\\\\\\\\\"160\\\\\\\\\\\\\\\"\\\\\\\\n              height=\\\\\\\\\\\\\\\"160\\\\\\\\\\\\\\\"\\\\\\\\n              src={community.logo_url}\\\\\\\\n              style={{ top: -124 }}\\\\\\\\n            />\\\\\\\\n          </div>\\\\\\\\n        </div>\\\\\\\\n\\\\\\\\n        <div className=\\\\\\\\\\\\\\\"d-flex flex-column gap-3 ps-md-3 pt-md-3 pb-md-2\\\\\\\\\\\\\\\">\\\\\\\\n          <CommunityName className=\\\\\\\\\\\\\\\"text-nowrap\\\\\\\\\\\\\\\">\\\\\\\\n            {community.name}\\\\\\\\n          </CommunityName>\\\\\\\\n          <CommunityDetails>{community.description}</CommunityDetails>\\\\\\\\n        </div>\\\\\\\\n\\\\\\\\n        <div className=\\\\\\\\\\\\\\\"mt-3 ps-3 d-flex gap-3 align-items-center\\\\\\\\\\\\\\\">\\\\\\\\n          {socialLinks.map((link, index) => (\\\\\\\\n            <a\\\\\\\\n              href={link.href}\\\\\\\\n              style={{\\\\\\\\n                marginLeft: index !== 0 ? \\\\\\\\\\\\\\\"0px\\\\\\\\\\\\\\\" : \\\\\\\\\\\\\\\"0px\\\\\\\\\\\\\\\",\\\\\\\\n                color: \\\\\\\\\\\\\\\"#818181\\\\\\\\\\\\\\\",\\\\\\\\n              }}\\\\\\\\n              key={link.href}\\\\\\\\n              target=\\\\\\\\\\\\\\\"_blank\\\\\\\\\\\\\\\"\\\\\\\\n            >\\\\\\\\n              <i className={link.iconClass}></i>\\\\\\\\n            </a>\\\\\\\\n          ))}\\\\\\\\n        </div>\\\\\\\\n      </div>\\\\\\\\n\\\\\\\\n      <div className=\\\\\\\\\\\\\\\"d-flex align-items-end gap-3 ms-auto mb-md-5 me-4\\\\\\\\\\\\\\\">\\\\\\\\n        {permissions.can_configure && (\\\\\\\\n          <Link\\\\\\\\n            to={`/devhub.near/widget/app?page=community.configuration&handle=${community.handle}`}\\\\\\\\n          >\\\\\\\\n            <Widget\\\\\\\\n              src={\\\\\\\\\\\\\\\"devhub.near/widget/devhub.components.molecule.Button\\\\\\\\\\\\\\\"}\\\\\\\\n              props={{\\\\\\\\n                classNames: { root: \\\\\\\\\\\\\\\"btn-outline-light text-dark shadow-none\\\\\\\\\\\\\\\" },\\\\\\\\n                notRounded: true,\\\\\\\\n                style: {\\\\\\\\n                  display: \\\\\\\\\\\\\\\"flex\\\\\\\\\\\\\\\",\\\\\\\\n                  padding: \\\\\\\\\\\\\\\"0.75rem 1rem\\\\\\\\\\\\\\\",\\\\\\\\n                  alignItems: \\\\\\\\\\\\\\\"center\\\\\\\\\\\\\\\",\\\\\\\\n                  gap: \\\\\\\\\\\\\\\"16px\\\\\\\\\\\\\\\",\\\\\\\\n\\\\\\\\n                  borderRadius: \\\\\\\\\\\\\\\"4px\\\\\\\\\\\\\\\",\\\\\\\\n                  border: \\\\\\\\\\\\\\\"1px solid #00EC97\\\\\\\\\\\\\\\",\\\\\\\\n                  background: \\\\\\\\\\\\\\\"rgba(129, 129, 129, 0.00)\\\\\\\\\\\\\\\",\\\\\\\\n                },\\\\\\\\n                icon: {\\\\\\\\n                  type: \\\\\\\\\\\\\\\"bootstrap_icon\\\\\\\\\\\\\\\",\\\\\\\\n                  variant: \\\\\\\\\\\\\\\"bi-gear-wide-connected\\\\\\\\\\\\\\\",\\\\\\\\n                },\\\\\\\\n                label: \\\\\\\\\\\\\\\"Configure community\\\\\\\\\\\\\\\",\\\\\\\\n              }}\\\\\\\\n            />\\\\\\\\n          </Link>\\\\\\\\n        )}\\\\\\\\n        <Widget\\\\\\\\n          src={\\\\\\\\\\\\\\\"devhub.near/widget/devhub.components.molecule.Button\\\\\\\\\\\\\\\"}\\\\\\\\n          props={{\\\\\\\\n            classNames: { root: \\\\\\\\\\\\\\\"btn-outline-light text-dark shadow-none\\\\\\\\\\\\\\\" },\\\\\\\\n            notRounded: true,\\\\\\\\n            style: {\\\\\\\\n              display: \\\\\\\\\\\\\\\"flex\\\\\\\\\\\\\\\",\\\\\\\\n              padding: \\\\\\\\\\\\\\\"0.75rem 1rem\\\\\\\\\\\\\\\",\\\\\\\\n              alignItems: \\\\\\\\\\\\\\\"center\\\\\\\\\\\\\\\",\\\\\\\\n              gap: \\\\\\\\\\\\\\\"16px\\\\\\\\\\\\\\\",\\\\\\\\n\\\\\\\\n              borderRadius: \\\\\\\\\\\\\\\"4px\\\\\\\\\\\\\\\",\\\\\\\\n              border: \\\\\\\\\\\\\\\"1px solid #00EC97\\\\\\\\\\\\\\\",\\\\\\\\n              background: \\\\\\\\\\\\\\\"rgba(129, 129, 129, 0.00)\\\\\\\\\\\\\\\",\\\\\\\\n            },\\\\\\\\n            label: \\\\\\\\\\\\\\\"Share \\\\\\\\u{2197}\\\\\\\\\\\\\\\",\\\\\\\\n            onClick: onShareClick,\\\\\\\\n            onMouseLeave: () => setLinkCopied(false),\\\\\\\\n            title: \\\\\\\\\\\\\\\"Copy link to clipboard\\\\\\\\\\\\\\\",\\\\\\\\n          }}\\\\\\\\n        />\\\\\\\\n      </div>\\\\\\\\n    </div>\\\\\\\\n    <NavlinksContainer>\\\\\\\\n      <NavUnderline className=\\\\\\\\\\\\\\\"nav gap-4 my-4\\\\\\\\\\\\\\\">\\\\\\\\n        {tabs.map(\\\\\\\\n          ({ title }) =>\\\\\\\\n            title && (\\\\\\\\n              <li className=\\\\\\\\\\\\\\\"nav-item\\\\\\\\\\\\\\\" key={title}>\\\\\\\\n                <Link\\\\\\\\n                  to={href({\\\\\\\\n                    widgetSrc: \\\\\\\\\\\\\\\"devhub.near/widget/app\\\\\\\\\\\\\\\",\\\\\\\\n                    params: {\\\\\\\\n                      page: \\\\\\\\\\\\\\\"community\\\\\\\\\\\\\\\",\\\\\\\\n                      handle: community.handle,\\\\\\\\n                      tab: title,\\\\\\\\n                    },\\\\\\\\n                  })}\\\\\\\\n                  aria-current={tab === title && \\\\\\\\\\\\\\\"page\\\\\\\\\\\\\\\"}\\\\\\\\n                  className={[\\\\\\\\n                    \\\\\\\\\\\\\\\"d-inline-flex gap-2\\\\\\\\\\\\\\\",\\\\\\\\n                    tab === title ? \\\\\\\\\\\\\\\"nav-link active\\\\\\\\\\\\\\\" : \\\\\\\\\\\\\\\"nav-link\\\\\\\\\\\\\\\",\\\\\\\\n                  ].join(\\\\\\\\\\\\\\\" \\\\\\\\\\\\\\\")}\\\\\\\\n                >\\\\\\\\n                  <span>{title}</span>\\\\\\\\n                </Link>\\\\\\\\n              </li>\\\\\\\\n            )\\\\\\\\n        )}\\\\\\\\n      </NavUnderline>\\\\\\\\n      {currentTab.title === \\\\\\\\\\\\\\\"Activity\\\\\\\\\\\\\\\" && (\\\\\\\\n        <div\\\\\\\\n          className=\\\\\\\\\\\\\\\"my-4 d-flex align-items-center justify-content-between\\\\\\\\\\\\\\\"\\\\\\\\n          style={{ gap: \\\\\\\\\\\\\\\"2.5rem\\\\\\\\\\\\\\\" }}\\\\\\\\n        >\\\\\\\\n          <div class=\\\\\\\\\\\\\\\"d-flex align-items-center justify-content-between\\\\\\\\\\\\\\\">\\\\\\\\n            <small class=\\\\\\\\\\\\\\\"text-muted\\\\\\\\\\\\\\\">\\\\\\\\n              <span>Required tags:</span>\\\\\\\\n              <Link\\\\\\\\n                to={href({\\\\\\\\n                  widgetSrc: \\\\\\\\\\\\\\\"devhub.near/widget/app\\\\\\\\\\\\\\\",\\\\\\\\n                  params: { page: \\\\\\\\\\\\\\\"feed\\\\\\\\\\\\\\\", tag: community.tag },\\\\\\\\n                })}\\\\\\\\n              >\\\\\\\\n                <Widget\\\\\\\\n                  src={\\\\\\\\\\\\\\\"devhub.near/widget/devhub.components.atom.Tag\\\\\\\\\\\\\\\"}\\\\\\\\n                  props={{\\\\\\\\n                    tag: community.tag,\\\\\\\\n                  }}\\\\\\\\n                />\\\\\\\\n              </Link>\\\\\\\\n            </small>\\\\\\\\n          </div>\\\\\\\\n          {context.accountId && (\\\\\\\\n            <Widget\\\\\\\\n              src={\\\\\\\\n                \\\\\\\\\\\\\\\"devhub.near/widget/devhub.components.molecule.PostControls\\\\\\\\\\\\\\\"\\\\\\\\n              }\\\\\\\\n              props={{\\\\\\\\n                title: \\\\\\\\\\\\\\\"Post\\\\\\\\\\\\\\\",\\\\\\\\n                href: href({\\\\\\\\n                  widgetSrc: \\\\\\\\\\\\\\\"devhub.near/widget/app\\\\\\\\\\\\\\\",\\\\\\\\n                  params: {\\\\\\\\n                    page: \\\\\\\\\\\\\\\"create\\\\\\\\\\\\\\\",\\\\\\\\n                    labels: [community.tag],\\\\\\\\n                  },\\\\\\\\n                }),\\\\\\\\n              }}\\\\\\\\n            />\\\\\\\\n          )}\\\\\\\\n        </div>\\\\\\\\n      )}\\\\\\\\n    </NavlinksContainer>\\\\\\\\n    {currentTab && (\\\\\\\\n      <div className=\\\\\\\\\\\\\\\"d-flex w-100 h-100\\\\\\\\\\\\\\\" key={currentTab.title}>\\\\\\\\n        <Widget\\\\\\\\n          src={currentTab.view}\\\\\\\\n          props={{\\\\\\\\n            ...currentTab.params,\\\\\\\\n            view, // default view for an addon, can come as a prop from a community or from a direct link to page.addon\\\\\\\\n\\\\\\\\n            // below is temporary prop drilling until kanban and github are migrated\\\\\\\\n            permissions,\\\\\\\\n            handle: community.handle,\\\\\\\\n          }}\\\\\\\\n        />\\\\\\\\n      </div>\\\\\\\\n    )}\\\\\\\\n  </div>\\\\\\\\n);\\\\\\\\n\"}, \"core.adapter.devhub-contract\": {\"\": \"function getRootMembers() {\\\\\\\\n  return Near.view(\\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"get_root_members\\\\\\\\\\\\\\\") ?? null;\\\\\\\\n}\\\\\\\\n\\\\\\\\nfunction hasModerator({ account_id }) {\\\\\\\\n  return (\\\\\\\\n    Near.view(\\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"has_moderator\\\\\\\\\\\\\\\", { account_id }) ??\\\\\\\\n    null\\\\\\\\n  );\\\\\\\\n}\\\\\\\\n\\\\\\\\nfunction createCommunity({ inputs }) {\\\\\\\\n  return Near.call(\\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"create_community\\\\\\\\\\\\\\\", { inputs });\\\\\\\\n}\\\\\\\\n\\\\\\\\nfunction getCommunity({ handle }) {\\\\\\\\n  return (\\\\\\\\n    Near.view(\\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"get_community\\\\\\\\\\\\\\\", { handle }) ?? null\\\\\\\\n  );\\\\\\\\n}\\\\\\\\n\\\\\\\\nfunction getFeaturedCommunities() {\\\\\\\\n  return (\\\\\\\\n    Near.view(\\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"get_featured_communities\\\\\\\\\\\\\\\") ?? null\\\\\\\\n  );\\\\\\\\n}\\\\\\\\n\\\\\\\\nfunction getAccountCommunityPermissions({ account_id, community_handle }) {\\\\\\\\n  return (\\\\\\\\n    Near.view(\\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"get_account_community_permissions\\\\\\\\\\\\\\\", {\\\\\\\\n      account_id,\\\\\\\\n      community_handle,\\\\\\\\n    }) ?? null\\\\\\\\n  );\\\\\\\\n}\\\\\\\\n\\\\\\\\nfunction updateCommunity({ handle, community }) {\\\\\\\\n  return Near.call(\\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"update_community\\\\\\\\\\\\\\\", {\\\\\\\\n    handle,\\\\\\\\n    community,\\\\\\\\n  });\\\\\\\\n}\\\\\\\\n\\\\\\\\nfunction deleteCommunity({ handle }) {\\\\\\\\n  return Near.call(\\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"delete_community\\\\\\\\\\\\\\\", { handle });\\\\\\\\n}\\\\\\\\n\\\\\\\\nfunction updateCommunityBoard({ handle, board }) {\\\\\\\\n  return Near.call(\\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"update_community_board\\\\\\\\\\\\\\\", {\\\\\\\\n    handle,\\\\\\\\n    board,\\\\\\\\n  });\\\\\\\\n}\\\\\\\\n\\\\\\\\nfunction updateCommunityGithub({ handle, github }) {\\\\\\\\n  return Near.call(\\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"update_community_github\\\\\\\\\\\\\\\", {\\\\\\\\n    handle,\\\\\\\\n    github,\\\\\\\\n  });\\\\\\\\n}\\\\\\\\n\\\\\\\\n/**\\\\\\\\n * Sets all addons, for configurating tabs\\\\\\\\n */\\\\\\\\nfunction setCommunityAddons({ handle, addons }) {\\\\\\\\n  return Near.call(\\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"set_community_addons\\\\\\\\\\\\\\\", {\\\\\\\\n    handle,\\\\\\\\n    addons,\\\\\\\\n  });\\\\\\\\n}\\\\\\\\n\\\\\\\\n/**\\\\\\\\n * Sets specific addon, for configuring params\\\\\\\\n */\\\\\\\\nfunction setCommunityAddon({ handle, addon }) {\\\\\\\\n  return Near.call(\\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"set_community_addon\\\\\\\\\\\\\\\", {\\\\\\\\n    handle,\\\\\\\\n    community_addon: addon,\\\\\\\\n  });\\\\\\\\n}\\\\\\\\n\\\\\\\\n/**\\\\\\\\n * Gets all available addons, these are controlled by devhub moderators\\\\\\\\n */\\\\\\\\nfunction getAllAddons() {\\\\\\\\n  return Near.view(\\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"get_all_addons\\\\\\\\\\\\\\\") ?? null;\\\\\\\\n}\\\\\\\\n\\\\\\\\nfunction getAccessControlInfo() {\\\\\\\\n  return (\\\\\\\\n    Near.view(\\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"get_access_control_info\\\\\\\\\\\\\\\") ?? null\\\\\\\\n  );\\\\\\\\n}\\\\\\\\n\\\\\\\\nfunction getAllAuthors() {\\\\\\\\n  return Near.view(\\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"get_all_authors\\\\\\\\\\\\\\\") ?? null;\\\\\\\\n}\\\\\\\\n\\\\\\\\nfunction getAllCommunitiesMetadata() {\\\\\\\\n  return (\\\\\\\\n    Near.view(\\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"get_all_communities_metadata\\\\\\\\\\\\\\\") ?? null\\\\\\\\n  );\\\\\\\\n}\\\\\\\\n\\\\\\\\nfunction getAvailableAddons() {\\\\\\\\n  return [\\\\\\\\n    {\\\\\\\\n      id: \\\\\\\\\\\\\\\"wiki\\\\\\\\\\\\\\\",\\\\\\\\n      title: \\\\\\\\\\\\\\\"Wiki\\\\\\\\\\\\\\\",\\\\\\\\n      description: \\\\\\\\\\\\\\\"Create a wiki for your community\\\\\\\\\\\\\\\",\\\\\\\\n      view_widget: \\\\\\\\\\\\\\\"devhub.near/widget/devhub.entity.addon.wiki.Viewer\\\\\\\\\\\\\\\",\\\\\\\\n      configurator_widget:\\\\\\\\n        \\\\\\\\\\\\\\\"devhub.near/widget/devhub.entity.addon.wiki.Configurator\\\\\\\\\\\\\\\",\\\\\\\\n    },\\\\\\\\n    {\\\\\\\\n      id: \\\\\\\\\\\\\\\"telegram\\\\\\\\\\\\\\\",\\\\\\\\n      title: \\\\\\\\\\\\\\\"Telegram\\\\\\\\\\\\\\\",\\\\\\\\n      description: \\\\\\\\\\\\\\\"Connect your telegram\\\\\\\\\\\\\\\",\\\\\\\\n      view_widget: \\\\\\\\\\\\\\\"devhub.near/widget/devhub.entity.addon.telegram.Viewer\\\\\\\\\\\\\\\",\\\\\\\\n      configurator_widget:\\\\\\\\n        \\\\\\\\\\\\\\\"devhub.near/widget/devhub.entity.addon.telegram.Configurator\\\\\\\\\\\\\\\",\\\\\\\\n    },\\\\\\\\n    {\\\\\\\\n      id: \\\\\\\\\\\\\\\"github\\\\\\\\\\\\\\\",\\\\\\\\n      title: \\\\\\\\\\\\\\\"Github\\\\\\\\\\\\\\\",\\\\\\\\n      description: \\\\\\\\\\\\\\\"Connect your github\\\\\\\\\\\\\\\",\\\\\\\\n      view_widget: \\\\\\\\\\\\\\\"devhub.near/widget/devhub.entity.addon.github.Viewer\\\\\\\\\\\\\\\",\\\\\\\\n      configurator_widget:\\\\\\\\n        \\\\\\\\\\\\\\\"devhub.near/widget/devhub.entity.addon.github.Configurator\\\\\\\\\\\\\\\",\\\\\\\\n    },\\\\\\\\n    {\\\\\\\\n      id: \\\\\\\\\\\\\\\"kanban\\\\\\\\\\\\\\\",\\\\\\\\n      title: \\\\\\\\\\\\\\\"Kanban\\\\\\\\\\\\\\\",\\\\\\\\n      description: \\\\\\\\\\\\\\\"Connect your github kanban board\\\\\\\\\\\\\\\",\\\\\\\\n      view_widget: \\\\\\\\\\\\\\\"devhub.near/widget/devhub.entity.addon.kanban.Viewer\\\\\\\\\\\\\\\",\\\\\\\\n      configurator_widget:\\\\\\\\n        \\\\\\\\\\\\\\\"devhub.near/widget/devhub.entity.addon.kanban.Configurator\\\\\\\\\\\\\\\",\\\\\\\\n    },\\\\\\\\n    {\\\\\\\\n      id: \\\\\\\\\\\\\\\"blog\\\\\\\\\\\\\\\",\\\\\\\\n      title: \\\\\\\\\\\\\\\"Blog\\\\\\\\\\\\\\\",\\\\\\\\n      description: \\\\\\\\\\\\\\\"Create a blog for your community\\\\\\\\\\\\\\\",\\\\\\\\n      view_widget: \\\\\\\\\\\\\\\"devhub.near/widget/devhub.entity.addon.blog.Viewer\\\\\\\\\\\\\\\",\\\\\\\\n      configurator_widget:\\\\\\\\n        \\\\\\\\\\\\\\\"devhub.near/widget/devhub.entity.addon.blog.Configurator\\\\\\\\\\\\\\\",\\\\\\\\n    },\\\\\\\\n  ];\\\\\\\\n  // return Near.view(\\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"get_available_addons\\\\\\\\\\\\\\\") ?? null;\\\\\\\\n}\\\\\\\\n\\\\\\\\nfunction getCommunityAddons({ handle }) {\\\\\\\\n  return Near.view(\\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"get_community_addons\\\\\\\\\\\\\\\", {\\\\\\\\n    handle,\\\\\\\\n  });\\\\\\\\n}\\\\\\\\n\\\\\\\\nfunction getCommunityAddonConfigs({ handle }) {\\\\\\\\n  return Near.view(\\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"get_community_addon_configs\\\\\\\\\\\\\\\", {\\\\\\\\n    handle,\\\\\\\\n  });\\\\\\\\n}\\\\\\\\n\\\\\\\\nfunction getAllLabels() {\\\\\\\\n  return Near.view(\\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"get_all_labels\\\\\\\\\\\\\\\") ?? null;\\\\\\\\n}\\\\\\\\n\\\\\\\\nfunction getPost({ post_id }) {\\\\\\\\n  return Near.view(\\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"get_post\\\\\\\\\\\\\\\", { post_id }) ?? null;\\\\\\\\n}\\\\\\\\n\\\\\\\\nfunction getPostsByAuthor({ author }) {\\\\\\\\n  return (\\\\\\\\n    Near.view(\\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"get_posts_by_author\\\\\\\\\\\\\\\", { author }) ??\\\\\\\\n    null\\\\\\\\n  );\\\\\\\\n}\\\\\\\\n\\\\\\\\nfunction getPostsByLabel({ label }) {\\\\\\\\n  return (\\\\\\\\n    Near.view(\\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"get_posts_by_label\\\\\\\\\\\\\\\", {\\\\\\\\n      label,\\\\\\\\n    }) ?? null\\\\\\\\n  );\\\\\\\\n}\\\\\\\\n\\\\\\\\nfunction useQuery(name, params) {\\\\\\\\n  const initialState = { data: null, error: null, isLoading: true };\\\\\\\\n\\\\\\\\n  const cacheState = useCache(\\\\\\\\n    () =>\\\\\\\\n      Near.asyncView(\\\\\\\\n        \\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\",\\\\\\\\n        [\\\\\\\\\\\\\\\"get\\\\\\\\\\\\\\\", name].join(\\\\\\\\\\\\\\\"_\\\\\\\\\\\\\\\"),\\\\\\\\n        params ?? {}\\\\\\\\n      )\\\\\\\\n        .then((response) => ({\\\\\\\\n          ...initialState,\\\\\\\\n          data: response ?? null,\\\\\\\\n          isLoading: false,\\\\\\\\n        }))\\\\\\\\n        .catch((error) => ({\\\\\\\\n          ...initialState,\\\\\\\\n          error: props?.error ?? error,\\\\\\\\n          isLoading: false,\\\\\\\\n        })),\\\\\\\\n\\\\\\\\n    JSON.stringify({ name, params }),\\\\\\\\n    { subscribe: false } // NOTE: I\\\\\\\\\\\\'m turning off subscribe to stop the constant re-rendering\\\\\\\\n  );\\\\\\\\n\\\\\\\\n  return cacheState === null ? initialState : cacheState;\\\\\\\\n}\\\\\\\\n\\\\\\\\nreturn {\\\\\\\\n  getRootMembers,\\\\\\\\n  hasModerator,\\\\\\\\n  createCommunity,\\\\\\\\n  getCommunity,\\\\\\\\n  getFeaturedCommunities,\\\\\\\\n  getAccountCommunityPermissions,\\\\\\\\n  updateCommunity,\\\\\\\\n  deleteCommunity,\\\\\\\\n  updateCommunityBoard,\\\\\\\\n  updateCommunityGithub,\\\\\\\\n  setCommunityAddons,\\\\\\\\n  setCommunityAddon,\\\\\\\\n  getAccessControlInfo,\\\\\\\\n  getAllAuthors,\\\\\\\\n  getAllCommunitiesMetadata,\\\\\\\\n  getAllAddons,\\\\\\\\n  getCommunityAddons,\\\\\\\\n  getCommunityAddonConfigs,\\\\\\\\n  getAllLabels,\\\\\\\\n  getPost,\\\\\\\\n  getPostsByAuthor,\\\\\\\\n  getPostsByLabel,\\\\\\\\n  useQuery,\\\\\\\\n};\\\\\\\\n\"}, \"devhub.entity.community.Card\": {\"\": \"const { href } = VM.require(\\\\\\\\\\\\\\\"devhub.near/widget/core.lib.url\\\\\\\\\\\\\\\");\\\\\\\\n\\\\\\\\nif (!href) {\\\\\\\\n  return <></>;\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst CommunityCard = ({\\\\\\\\n  format,\\\\\\\\n  isBannerEnabled,\\\\\\\\n  metadata,\\\\\\\\n  ...otherProps\\\\\\\\n}) => {\\\\\\\\n  const renderFormat =\\\\\\\\n    format === \\\\\\\\\\\\\\\"small\\\\\\\\\\\\\\\" || format === \\\\\\\\\\\\\\\"medium\\\\\\\\\\\\\\\" ? format : \\\\\\\\\\\\\\\"small\\\\\\\\\\\\\\\";\\\\\\\\n\\\\\\\\n  const link = href({\\\\\\\\n    widgetSrc: \\\\\\\\\\\\\\\"devhub.near/widget/app\\\\\\\\\\\\\\\",\\\\\\\\n    params: { page: \\\\\\\\\\\\\\\"community\\\\\\\\\\\\\\\", handle: metadata.handle },\\\\\\\\n  });\\\\\\\\n\\\\\\\\n  const CommunityName = styled.h5`\\\\\\\\n    color: #151515;\\\\\\\\n    font-size: 2rem;\\\\\\\\n    font-style: normal;\\\\\\\\n    font-weight: 700;\\\\\\\\n    line-height: 30px; /* 41.667% */\\\\\\\\n  `;\\\\\\\\n\\\\\\\\n  const CommunityDescription = styled.p`\\\\\\\\n    color: #818181;\\\\\\\\n    font-size: 1rem;\\\\\\\\n    font-style: normal;\\\\\\\\n    font-weight: 400;\\\\\\\\n    line-height: 120%; /* 28.8px */\\\\\\\\n  `;\\\\\\\\n\\\\\\\\n  const Logo = styled.img`\\\\\\\\n    width: 8rem;\\\\\\\\n    height: 8rem;\\\\\\\\n    object-fit: cover;\\\\\\\\n\\\\\\\\n    @media screen and (max-width: 768px) {\\\\\\\\n      width: 4rem;\\\\\\\\n      height: 4rem;\\\\\\\\n    }\\\\\\\\n  `;\\\\\\\\n\\\\\\\\n  const formatSmall = (\\\\\\\\n    <Link\\\\\\\\n      {...otherProps}\\\\\\\\n      to={link}\\\\\\\\n      className={[\\\\\\\\n        \\\\\\\\\\\\\\\"d-flex p-0 p-lg-3\\\\\\\\\\\\\\\",\\\\\\\\n        \\\\\\\\\\\\\\\"rounded-2 border border-2\\\\\\\\\\\\\\\",\\\\\\\\n        \\\\\\\\\\\\\\\"text-black text-decoration-none attractable flex-grow-1\\\\\\\\\\\\\\\",\\\\\\\\n      ].join(\\\\\\\\\\\\\\\" \\\\\\\\\\\\\\\")}\\\\\\\\n      style={{\\\\\\\\n        background: isBannerEnabled\\\\\\\\n          ? `center / cover no-repeat url(${metadata.banner_url})`\\\\\\\\n          : \\\\\\\\\\\\\\\"#ffffff\\\\\\\\\\\\\\\",\\\\\\\\n      }}\\\\\\\\n    >\\\\\\\\n      <div\\\\\\\\n        className=\\\\\\\\\\\\\\\"d-flex align-items-center gap-3 rounded-4 w-100 h-100\\\\\\\\\\\\\\\"\\\\\\\\n        style={{\\\\\\\\n          background: \\\\\\\\\\\\\\\"rgba(255, 255, 255, 0.9)\\\\\\\\\\\\\\\",\\\\\\\\n          backdropFilter: \\\\\\\\\\\\\\\"blur(4px)\\\\\\\\\\\\\\\",\\\\\\\\n          padding: \\\\\\\\\\\\\\\"3rem 1rem\\\\\\\\\\\\\\\",\\\\\\\\n        }}\\\\\\\\n      >\\\\\\\\n        <Logo\\\\\\\\n          alt=\\\\\\\\\\\\\\\"Community logo\\\\\\\\\\\\\\\"\\\\\\\\n          className=\\\\\\\\\\\\\\\"flex-shrink-0 rounded-circle attractable\\\\\\\\\\\\\\\"\\\\\\\\n          src={metadata.logo_url}\\\\\\\\n        />\\\\\\\\n\\\\\\\\n        <div className=\\\\\\\\\\\\\\\"d-flex flex-column justify-content-center gap-1 w-100\\\\\\\\\\\\\\\">\\\\\\\\n          <CommunityName\\\\\\\\n            style={{ textOverflow: \\\\\\\\\\\\\\\"ellipsis\\\\\\\\\\\\\\\", wordWrap: \\\\\\\\\\\\\\\"break-word\\\\\\\\\\\\\\\" }}\\\\\\\\n          >\\\\\\\\n            {metadata.name}\\\\\\\\n          </CommunityName>\\\\\\\\n\\\\\\\\n          <CommunityDescription\\\\\\\\n            style={{ textOverflow: \\\\\\\\\\\\\\\"ellipsis\\\\\\\\\\\\\\\", wordWrap: \\\\\\\\\\\\\\\"break-word\\\\\\\\\\\\\\\" }}\\\\\\\\n          >\\\\\\\\n            {metadata.description}\\\\\\\\n          </CommunityDescription>\\\\\\\\n        </div>\\\\\\\\n      </div>\\\\\\\\n    </Link>\\\\\\\\n  );\\\\\\\\n\\\\\\\\n  const formatMedium = (\\\\\\\\n    <Link\\\\\\\\n      className=\\\\\\\\\\\\\\\"card d-flex flex-column flex-shrink-0 text-decoration-none text-reset attractable\\\\\\\\\\\\\\\"\\\\\\\\n      to={link}\\\\\\\\n      style={{ width: \\\\\\\\\\\\\\\"23%\\\\\\\\\\\\\\\", maxWidth: 304 }}\\\\\\\\n    >\\\\\\\\n      <div\\\\\\\\n        className=\\\\\\\\\\\\\\\"card-img-top w-100\\\\\\\\\\\\\\\"\\\\\\\\n        style={{\\\\\\\\n          background: `center / cover no-repeat url(${metadata.banner_url})`,\\\\\\\\n          height: 164,\\\\\\\\n        }}\\\\\\\\n      />\\\\\\\\n\\\\\\\\n      <div className=\\\\\\\\\\\\\\\"d-flex flex-column gap-2 p-3 card-text\\\\\\\\\\\\\\\">\\\\\\\\n        <h5 class=\\\\\\\\\\\\\\\"h5 m-0\\\\\\\\\\\\\\\">{metadata.name}</h5>\\\\\\\\n        <span class=\\\\\\\\\\\\\\\"text-secondary text-wrap\\\\\\\\\\\\\\\">{metadata.description}</span>\\\\\\\\n      </div>\\\\\\\\n    </Link>\\\\\\\\n  );\\\\\\\\n\\\\\\\\n  return {\\\\\\\\n    small: formatSmall,\\\\\\\\n    medium: formatMedium,\\\\\\\\n  }[renderFormat];\\\\\\\\n};\\\\\\\\n\\\\\\\\nreturn CommunityCard(props);\\\\\\\\n\"}, \"devhub.entity.community.Tile\": {\"\": \"/* INCLUDE: \\\\\\\\\\\\\\\"core/lib/gui/attractable\\\\\\\\\\\\\\\" */\\\\\\\\nconst AttractableDiv = styled.div`\\\\\\\\n  box-shadow: 0 0.125rem 0.25rem rgba(0, 0, 0, 0.075) !important;\\\\\\\\n  transition: box-shadow 0.6s;\\\\\\\\n\\\\\\\\n  &:hover {\\\\\\\\n    box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.15) !important;\\\\\\\\n  }\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst AttractableLink = styled.a`\\\\\\\\n  box-shadow: 0 0.125rem 0.25rem rgba(0, 0, 0, 0.075) !important;\\\\\\\\n  transition: box-shadow 0.6s;\\\\\\\\n\\\\\\\\n  &:hover {\\\\\\\\n    box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.15) !important;\\\\\\\\n  }\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst AttractableImage = styled.img`\\\\\\\\n  box-shadow: 0 0.125rem 0.25rem rgba(0, 0, 0, 0.075) !important;\\\\\\\\n  transition: box-shadow 0.6s;\\\\\\\\n\\\\\\\\n  &:hover {\\\\\\\\n    box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.15) !important;\\\\\\\\n  }\\\\\\\\n`;\\\\\\\\n/* END_INCLUDE: \\\\\\\\\\\\\\\"core/lib/gui/attractable\\\\\\\\\\\\\\\" */\\\\\\\\n\\\\\\\\nconst Tile = ({\\\\\\\\n  children,\\\\\\\\n  borderRadius,\\\\\\\\n  className,\\\\\\\\n  fullWidth,\\\\\\\\n  headerSlotRight,\\\\\\\\n  heading,\\\\\\\\n  headingAdornment,\\\\\\\\n  id,\\\\\\\\n  isHidden,\\\\\\\\n  noBorder,\\\\\\\\n  noFrame,\\\\\\\\n  minHeight,\\\\\\\\n  style,\\\\\\\\n}) => (\\\\\\\\n  <AttractableDiv\\\\\\\\n    className={[\\\\\\\\n      \\\\\\\\\\\\\\\"d-flex flex-column gap-3\\\\\\\\\\\\\\\",\\\\\\\\n      className,\\\\\\\\n      fullWidth ? \\\\\\\\\\\\\\\"w-100\\\\\\\\\\\\\\\" : \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\",\\\\\\\\n      !noFrame ? \\\\\\\\\\\\\\\"p-3\\\\\\\\\\\\\\\" : \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\",\\\\\\\\n      isHidden ? \\\\\\\\\\\\\\\"d-none\\\\\\\\\\\\\\\" : \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\",\\\\\\\\n    ].join(\\\\\\\\\\\\\\\" \\\\\\\\\\\\\\\")}\\\\\\\\n    style={{\\\\\\\\n      maxWidth: fullWidth ? \\\\\\\\\\\\\\\"100%\\\\\\\\\\\\\\\" : null,\\\\\\\\n      minHeight: minHeight ?? 180,\\\\\\\\n      height: \\\\\\\\\\\\\\\"fit-content\\\\\\\\\\\\\\\",\\\\\\\\n      overflowX: \\\\\\\\\\\\\\\"auto\\\\\\\\\\\\\\\",\\\\\\\\n      borderRadius: 16,\\\\\\\\n      border: \\\\\\\\\\\\\\\"1px solid rgba(129, 129, 129, 0.30)\\\\\\\\\\\\\\\",\\\\\\\\n      background: \\\\\\\\\\\\\\\"#FFFEFE\\\\\\\\\\\\\\\",\\\\\\\\n      marginBottom: \\\\\\\\\\\\\\\"1rem\\\\\\\\\\\\\\\",\\\\\\\\n      ...style,\\\\\\\\n    }}\\\\\\\\n    {...{ id }}\\\\\\\\n  >\\\\\\\\n    {\\\\\\\\n      <div\\\\\\\\n        className={[\\\\\\\\n          \\\\\\\\\\\\\\\"d-flex align-items-center justify-content-between gap-3\\\\\\\\\\\\\\\",\\\\\\\\n\\\\\\\\n          noFrame || (!heading && !headingAdornment && !headerSlotRight)\\\\\\\\n            ? \\\\\\\\\\\\\\\"d-none\\\\\\\\\\\\\\\"\\\\\\\\n            : \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\",\\\\\\\\n        ].join(\\\\\\\\\\\\\\\" \\\\\\\\\\\\\\\")}\\\\\\\\n        style={{ minHeight: 30 }}\\\\\\\\n      >\\\\\\\\n        <h5 className=\\\\\\\\\\\\\\\"h5 d-inline-flex gap-2 m-0\\\\\\\\\\\\\\\">\\\\\\\\n          {headingAdornment}\\\\\\\\n          <span>{heading}</span>\\\\\\\\n        </h5>\\\\\\\\n\\\\\\\\n        {headerSlotRight}\\\\\\\\n      </div>\\\\\\\\n    }\\\\\\\\n\\\\\\\\n    {children}\\\\\\\\n  </AttractableDiv>\\\\\\\\n);\\\\\\\\n\\\\\\\\nreturn Tile(props);\\\\\\\\n\"}, \"devhub.components.atom.Toggle\": {\"\": \"const ToggleRoot = styled.div`\\\\\\\\n  justify-content: space-between;\\\\\\\\n  width: fit-content;\\\\\\\\n  max-width: 100%;\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst ToggleSwitchRoot = styled(\\\\\\\\\\\\\\\"Switch.Root\\\\\\\\\\\\\\\")`\\\\\\\\n  all: unset;\\\\\\\\n  display: block;\\\\\\\\n  width: 42px;\\\\\\\\n  height: 25px;\\\\\\\\n  background-color: #d1d1d1;\\\\\\\\n  border-radius: 9999px;\\\\\\\\n  position: relative;\\\\\\\\n  box-shadow: 0 2px 10px var(--blackA7);\\\\\\\\n\\\\\\\\n  &[data-state=\\\\\\\\\\\\\\\"checked\\\\\\\\\\\\\\\"] {\\\\\\\\n    background-color: #00d084;\\\\\\\\n  }\\\\\\\\n\\\\\\\\n  &[data-disabled=\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\"] {\\\\\\\\n    opacity: 0.7;\\\\\\\\n  }\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst ToggleSwitchThumb = styled(\\\\\\\\\\\\\\\"Switch.Thumb\\\\\\\\\\\\\\\")`\\\\\\\\n  all: unset;\\\\\\\\n  display: block;\\\\\\\\n  width: 21px;\\\\\\\\n  height: 21px;\\\\\\\\n  border-radius: 9999px;\\\\\\\\n  transition: transform 100ms;\\\\\\\\n  transform: translateX(2px);\\\\\\\\n  will-change: transform;\\\\\\\\n\\\\\\\\n  &[data-state=\\\\\\\\\\\\\\\"checked\\\\\\\\\\\\\\\"] {\\\\\\\\n    transform: translateX(19px);\\\\\\\\n  }\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst ToggleLabel = styled.label`\\\\\\\\n  white-space: nowrap;\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst Toggle = ({\\\\\\\\n  className,\\\\\\\\n  direction,\\\\\\\\n  disabled,\\\\\\\\n  inputProps,\\\\\\\\n  key,\\\\\\\\n  label,\\\\\\\\n  onChange,\\\\\\\\n  value: checked,\\\\\\\\n  ...rest\\\\\\\\n}) => (\\\\\\\\n  <ToggleRoot\\\\\\\\n    className={[\\\\\\\\n      \\\\\\\\\\\\\\\"d-flex justify-content-between, align-items-center gap-3 p-2\\\\\\\\\\\\\\\",\\\\\\\\n      direction === \\\\\\\\\\\\\\\"rtl\\\\\\\\\\\\\\\" ? \\\\\\\\\\\\\\\"flex-row-reverse\\\\\\\\\\\\\\\" : \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\",\\\\\\\\n      className,\\\\\\\\n    ].join(\\\\\\\\\\\\\\\" \\\\\\\\\\\\\\\")}\\\\\\\\n    {...rest}\\\\\\\\n  >\\\\\\\\n    <ToggleLabel htmlFor={`toggle-${key}`}>{label}</ToggleLabel>\\\\\\\\n\\\\\\\\n    <ToggleSwitchRoot\\\\\\\\n      className=\\\\\\\\\\\\\\\"shadow-none\\\\\\\\\\\\\\\"\\\\\\\\n      id={`toggle-${key}`}\\\\\\\\n      onCheckedChange={disabled ? null : onChange}\\\\\\\\n      {...{ checked, disabled, ...inputProps }}\\\\\\\\n    >\\\\\\\\n      {!disabled && <ToggleSwitchThumb className=\\\\\\\\\\\\\\\"bg-light shadow\\\\\\\\\\\\\\\" />}\\\\\\\\n    </ToggleSwitchRoot>\\\\\\\\n  </ToggleRoot>\\\\\\\\n);\\\\\\\\n\\\\\\\\nreturn Toggle(props);\\\\\\\\n\"}, \"devhub.components.island.hero\": {\"\": \"const { href } = VM.require(\\\\\\\\\\\\\\\"devhub.near/widget/core.lib.url\\\\\\\\\\\\\\\");\\\\\\\\n\\\\\\\\nhref || (href = () => {});\\\\\\\\n\\\\\\\\nconst imageLink =\\\\\\\\n  \\\\\\\\\\\\\\\"https://ipfs.near.social/ipfs/bafybeiap2mzwsly4apaldxguiunx4rjwqyadksj5yxuzwrww3kue3ao5qe\\\\\\\\\\\\\\\";\\\\\\\\n\\\\\\\\nconst HeroSection = styled.div`\\\\\\\\n  position: relative;\\\\\\\\n  height: auto;\\\\\\\\n  z-index: 3;\\\\\\\\n  width: 70%;\\\\\\\\n  background: #00ec97;\\\\\\\\n  clip-path: polygon(0 0, 100% 0%, 75% 100%, 0% 100%);\\\\\\\\n\\\\\\\\n  padding-top: 2rem;\\\\\\\\n  padding-bottom: 2rem;\\\\\\\\n  padding-left: 3.375rem;\\\\\\\\n\\\\\\\\n  @media screen and (max-width: 768px) {\\\\\\\\n    width: 100%;\\\\\\\\n    padding: 1rem 1.5rem;\\\\\\\\n    clip-path: none;\\\\\\\\n  }\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst Title = styled.h1`\\\\\\\\n  color: #f4f4f4;\\\\\\\\n  font-size: 4rem;\\\\\\\\n  font-style: normal;\\\\\\\\n  font-weight: 700;\\\\\\\\n  line-height: 100%; /* 88px */\\\\\\\\n  letter-spacing: -1.76px;\\\\\\\\n\\\\\\\\n  @media screen and (max-width: 768px) {\\\\\\\\n    font-size: 2.25rem;\\\\\\\\n    letter-spacing: -0.72px;\\\\\\\\n    margin: 0;\\\\\\\\n  }\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst Lead = styled.p`\\\\\\\\n  color: #151515;\\\\\\\\n  font-size: 1.75rem;\\\\\\\\n  font-style: normal;\\\\\\\\n  font-weight: 400;\\\\\\\\n  line-height: 110%; /* 39.6px */\\\\\\\\n\\\\\\\\n  width: 70%;\\\\\\\\n\\\\\\\\n  @media screen and (max-width: 768px) {\\\\\\\\n    font-size: 1.5rem;\\\\\\\\n    width: 100%;\\\\\\\\n  }\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst CTA = styled.a`\\\\\\\\n  display: inline-flex;\\\\\\\\n  padding: 0.875rem 1rem;\\\\\\\\n  align-items: center;\\\\\\\\n  gap: 0.5rem;\\\\\\\\n\\\\\\\\n  border-radius: 1rem;\\\\\\\\n  border: 1px solid #151515;\\\\\\\\n\\\\\\\\n  color: #151515 !important;\\\\\\\\n  font-size: 1.25rem;\\\\\\\\n  font-style: normal;\\\\\\\\n  font-weight: 700;\\\\\\\\n  line-height: 120%; /* 28.8px */\\\\\\\\n  letter-spacing: -0.48px;\\\\\\\\n\\\\\\\\n  &:hover {\\\\\\\\n    background: #151515;\\\\\\\\n    color: #f4f4f4 !important;\\\\\\\\n    text-decoration: none; // Remove underline on hover\\\\\\\\n  }\\\\\\\\n\\\\\\\\n  @media screen and (max-width: 768px) {\\\\\\\\n    display: inline-flex;\\\\\\\\n    padding: 8px 16px;\\\\\\\\n    align-items: center;\\\\\\\\n    gap: 8px;\\\\\\\\n\\\\\\\\n    border-radius: 16px;\\\\\\\\n    background: #00ec97;\\\\\\\\n\\\\\\\\n    border: none;\\\\\\\\n\\\\\\\\n    color: #f4f4f4 !important;\\\\\\\\n    font-size: 16px;\\\\\\\\n    font-style: normal;\\\\\\\\n    font-weight: 700;\\\\\\\\n    line-height: 120%; /* 19.2px */\\\\\\\\n    letter-spacing: -0.32px;\\\\\\\\n\\\\\\\\n    &:hover {\\\\\\\\n      background: #151515;\\\\\\\\n      color: #f4f4f4;\\\\\\\\n      text-decoration: none; // Remove underline on hover\\\\\\\\n    }\\\\\\\\n  }\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst Container = styled.div`\\\\\\\\n  position: relative;\\\\\\\\n  width: 100%;\\\\\\\\n  height: max-content;\\\\\\\\n  overflow: hidden;\\\\\\\\n\\\\\\\\n  @media screen and (max-width: 768px) {\\\\\\\\n    background: #f4f4f4;\\\\\\\\n  }\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst ImageContainer = styled.div`\\\\\\\\n  width: 100%;\\\\\\\\n  height: 100%;\\\\\\\\n  position: absolute;\\\\\\\\n  top: 0;\\\\\\\\n  right: 0;\\\\\\\\n  z-index: 1;\\\\\\\\n  background: transparent;\\\\\\\\n\\\\\\\\n  @media screen and (max-width: 768px) {\\\\\\\\n    display: none;\\\\\\\\n  }\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst Image = styled.img`\\\\\\\\n  margin-left: 15.625rem;\\\\\\\\n  height: 100%;\\\\\\\\n  width: 100%;\\\\\\\\n  filter: grayscale(100%);\\\\\\\\n  object-fit: cover;\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst DesktopDescription = styled.div`\\\\\\\\n  @media screen and (max-width: 786px) {\\\\\\\\n    display: none;\\\\\\\\n  }\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst MobileImage = styled.img`\\\\\\\\n  display: none;\\\\\\\\n\\\\\\\\n  width: 100%;\\\\\\\\n  height: 196px;\\\\\\\\n\\\\\\\\n  width: 100%;\\\\\\\\n  object-fit: cover;\\\\\\\\n  filter: grayscale(1);\\\\\\\\n\\\\\\\\n  @media screen and (max-width: 768px) {\\\\\\\\n    display: block;\\\\\\\\n  }\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst MobileDescription = styled.div`\\\\\\\\n  display: none;\\\\\\\\n  padding: 24px 16px;\\\\\\\\n\\\\\\\\n  width: 100%;\\\\\\\\n\\\\\\\\n  @media screen and (max-width: 768px) {\\\\\\\\n    display: block;\\\\\\\\n  }\\\\\\\\n`;\\\\\\\\n\\\\\\\\nreturn (\\\\\\\\n  <Container>\\\\\\\\n    <HeroSection>\\\\\\\\n      <Title>\\\\\\\\n        The decentralized <br />\\\\\\\\n        <span style={{ color: \\\\\\\\\\\\\\\"#101820\\\\\\\\\\\\\\\" }}>home base</span> <br />\\\\\\\\n        for NEAR builders\\\\\\\\n      </Title>\\\\\\\\n      <DesktopDescription>\\\\\\\\n        <Lead>\\\\\\\\n          Join a vibrant community of innovators shaping the open web.\\\\\\\\n        </Lead>\\\\\\\\n        <Link\\\\\\\\n          to={href({\\\\\\\\n            widgetSrc: \\\\\\\\\\\\\\\"devhub.near/widget/app\\\\\\\\\\\\\\\",\\\\\\\\n            params: {\\\\\\\\n              page: \\\\\\\\\\\\\\\"about\\\\\\\\\\\\\\\",\\\\\\\\n            },\\\\\\\\n          })}\\\\\\\\n        >\\\\\\\\n          <CTA href=\\\\\\\\\\\\\\\"#\\\\\\\\\\\\\\\">Read more \\\\\\\\u{2192}</CTA>\\\\\\\\n        </Link>\\\\\\\\n      </DesktopDescription>\\\\\\\\n    </HeroSection>\\\\\\\\n    <MobileImage src={imageLink} />\\\\\\\\n    <ImageContainer>\\\\\\\\n      <Image src={imageLink} />\\\\\\\\n    </ImageContainer>\\\\\\\\n    <MobileDescription>\\\\\\\\n      <Lead>Join a vibrant community of innovators shaping the open web.</Lead>\\\\\\\\n      <Link\\\\\\\\n        to={href({\\\\\\\\n          widgetSrc: \\\\\\\\\\\\\\\"devhub.near/widget/app\\\\\\\\\\\\\\\",\\\\\\\\n          params: {\\\\\\\\n            page: \\\\\\\\\\\\\\\"about\\\\\\\\\\\\\\\",\\\\\\\\n          },\\\\\\\\n        })}\\\\\\\\n      >\\\\\\\\n        <CTA href=\\\\\\\\\\\\\\\"#\\\\\\\\\\\\\\\">Read more \\\\\\\\u{2192}</CTA>\\\\\\\\n      </Link>\\\\\\\\n    </MobileDescription>\\\\\\\\n  </Container>\\\\\\\\n);\\\\\\\\n\"}, \"devhub.entity.addon.blog.Card\": {\"\": \"function Card({ data }) {\\\\\\\\n  const { category, title, subtitle, date } = data;\\\\\\\\n\\\\\\\\n  const Container = styled.div`\\\\\\\\n    min-height: 12.5rem;\\\\\\\\n    display: flex;\\\\\\\\n    padding: 1rem;\\\\\\\\n    flex-direction: column;\\\\\\\\n    align-items: flex-start;\\\\\\\\n    gap: 1rem;\\\\\\\\n    flex-shrink: 0;\\\\\\\\n\\\\\\\\n    border-radius: 1rem;\\\\\\\\n    border: 1px solid rgba(129, 129, 129, 0.3);\\\\\\\\n    background: #fffefe;\\\\\\\\n\\\\\\\\n    h5 {\\\\\\\\n      margin: 0;\\\\\\\\n      color: #151515;\\\\\\\\n      font-size: 1.5rem;\\\\\\\\n      font-style: normal;\\\\\\\\n      font-weight: 700;\\\\\\\\n      line-height: 110%; /* 39.6px */\\\\\\\\n    }\\\\\\\\n\\\\\\\\n    ${category &&\\\\\\\\n    `\\\\\\\\n    span.category {\\\\\\\\n      color: ${\\\\\\\\n        category.toLowerCase() === \\\\\\\\\\\\\\\"news\\\\\\\\\\\\\\\"\\\\\\\\n          ? \\\\\\\\\\\\\\\"#F40303\\\\\\\\\\\\\\\"\\\\\\\\n          : category.toLowerCase() === \\\\\\\\\\\\\\\"guide\\\\\\\\\\\\\\\"\\\\\\\\n          ? \\\\\\\\\\\\\\\"#004BE1\\\\\\\\\\\\\\\"\\\\\\\\n          : category.toLowerCase() === \\\\\\\\\\\\\\\"reference\\\\\\\\\\\\\\\" && \\\\\\\\\\\\\\\"#FF7A00\\\\\\\\\\\\\\\"\\\\\\\\n      };\\\\\\\\n      font-size: 1rem;\\\\\\\\n      font-style: normal;\\\\\\\\n      font-weight: 700;\\\\\\\\n      line-height: 20px; /* 125% */\\\\\\\\n      text-transform: uppercase;\\\\\\\\n    }\\\\\\\\n    `}\\\\\\\\n\\\\\\\\n    span.date {\\\\\\\\n      color: #818181;\\\\\\\\n      font-size: 16px;\\\\\\\\n      font-style: normal;\\\\\\\\n      font-weight: 400;\\\\\\\\n      line-height: 20px; /* 125% */\\\\\\\\n    }\\\\\\\\n\\\\\\\\n    p {\\\\\\\\n      margin: 0;\\\\\\\\n      color: #151515;\\\\\\\\n      font-size: 1rem;\\\\\\\\n      font-style: normal;\\\\\\\\n      font-weight: 400;\\\\\\\\n      line-height: 120%; /* 28.8px */\\\\\\\\n    }\\\\\\\\n  `;\\\\\\\\n\\\\\\\\n  const options = { year: \\\\\\\\\\\\\\\"numeric\\\\\\\\\\\\\\\", month: \\\\\\\\\\\\\\\"short\\\\\\\\\\\\\\\", day: \\\\\\\\\\\\\\\"numeric\\\\\\\\\\\\\\\" };\\\\\\\\n  const formattedDate = new Date(date).toLocaleString(\\\\\\\\\\\\\\\"en-US\\\\\\\\\\\\\\\", options);\\\\\\\\n\\\\\\\\n  return (\\\\\\\\n    <Container id={`blog-card-${title}`}>\\\\\\\\n      {category && <span className=\\\\\\\\\\\\\\\"category\\\\\\\\\\\\\\\">{category}</span>}\\\\\\\\n      <h5>{title}</h5>\\\\\\\\n      <p>{subtitle}</p>\\\\\\\\n      <span className=\\\\\\\\\\\\\\\"date\\\\\\\\\\\\\\\">{formattedDate}</span>\\\\\\\\n    </Container>\\\\\\\\n  );\\\\\\\\n}\\\\\\\\n\\\\\\\\nreturn { Card };\\\\\\\\n\"}, \"devhub.entity.addon.blog.Feed\": {\"\": \"const { Item, Layout } = props;\\\\\\\\n\\\\\\\\nLayout = Layout || (() => <></>);\\\\\\\\n\\\\\\\\nconst Container = styled.div``;\\\\\\\\n\\\\\\\\nconst Loader = styled.div`\\\\\\\\n  text-align: center;\\\\\\\\n  padding: 20px;\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst QUERYAPI_ENDPOINT = `https://near-queryapi.api.pagoda.co/v1/graphql/`;\\\\\\\\nconst DISPLAY_COUNT = 10;\\\\\\\\n\\\\\\\\nconst fetchGraphQL = (operationsDoc, operationName, variables) => {\\\\\\\\n  return asyncFetch(QUERYAPI_ENDPOINT, {\\\\\\\\n    method: \\\\\\\\\\\\\\\"POST\\\\\\\\\\\\\\\",\\\\\\\\n    headers: { \\\\\\\\\\\\\\\"x-hasura-role\\\\\\\\\\\\\\\": `bo_near` },\\\\\\\\n    body: JSON.stringify({\\\\\\\\n      query: operationsDoc,\\\\\\\\n      variables: variables,\\\\\\\\n      operationName: operationName,\\\\\\\\n    }),\\\\\\\\n  });\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst queryName =\\\\\\\\n  props.queryName ?? `bo_near_devhub_v17_posts_with_latest_snapshot`;\\\\\\\\n\\\\\\\\nconst query = `query DevhubPostsQuery($limit: Int = 100, $offset: Int = 0, $where: ${queryName}_bool_exp = {}) {\\\\\\\\n    ${queryName}(\\\\\\\\n      limit: $limit\\\\\\\\n      offset: $offset\\\\\\\\n      order_by: {block_height: desc}\\\\\\\\n      where: $where\\\\\\\\n    ) {\\\\\\\\n      post_id\\\\\\\\n    }\\\\\\\\n  }\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst [postIds, setPostIds] = useState([]);\\\\\\\\nconst [loading, setLoading] = useState(false);\\\\\\\\nconst [cachedItems, setCachedItems] = useState({});\\\\\\\\nconst [hasNext, setHasNext] = useState(true);\\\\\\\\n\\\\\\\\nconst buildWhereClause = () => {\\\\\\\\n  let where = {};\\\\\\\\n  if (props.author) {\\\\\\\\n    where = { author_id: { _eq: props.author }, ...where };\\\\\\\\n  }\\\\\\\\n  if (props.term) {\\\\\\\\n    where = { description: { _ilike: `%${props.term}%` }, ...where };\\\\\\\\n  }\\\\\\\\n  if (props.includeLabels && Array.isArray(props.includeLabels)) {\\\\\\\\n    const labelConditions = props.includeLabels.map((label) => ({\\\\\\\\n      labels: { _contains: label },\\\\\\\\n    }));\\\\\\\\n\\\\\\\\n    where = { _and: [...labelConditions, where] };\\\\\\\\n  }\\\\\\\\n  if (props.excludeLabels && Array.isArray(props.excludeLabels)) {\\\\\\\\n    const labelConditions = props.excludeLabels.map((label) => ({\\\\\\\\n      labels: { _nin: label },\\\\\\\\n    }));\\\\\\\\n\\\\\\\\n    where = { _and: [...labelConditions, where] };\\\\\\\\n  }\\\\\\\\n  if (!props.recency) {\\\\\\\\n    where = { parent_id: { _is_null: true }, ...where };\\\\\\\\n  }\\\\\\\\n  return where;\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst fetchPostIds = (offset) => {\\\\\\\\n  if (!offset) {\\\\\\\\n    offset = 0;\\\\\\\\n  }\\\\\\\\n  if (loading) return;\\\\\\\\n  setLoading(true);\\\\\\\\n  const variables = { limit: DISPLAY_COUNT, offset, where: buildWhereClause() };\\\\\\\\n  fetchGraphQL(query, \\\\\\\\\\\\\\\"DevhubPostsQuery\\\\\\\\\\\\\\\", variables).then((result) => {\\\\\\\\n    if (result.status === 200) {\\\\\\\\n      if (result.body.data) {\\\\\\\\n        const data = result.body.data[queryName];\\\\\\\\n        const newPostIds = data.map((p) => p.post_id);\\\\\\\\n        setPostIds(offset === 0 ? newPostIds : [...postIds, ...newPostIds]);\\\\\\\\n        setHasNext(data.length >= variables.limit);\\\\\\\\n      } else {\\\\\\\\n        console.error(\\\\\\\\\\\\\\\"GraphQL Error:\\\\\\\\\\\\\\\", result.errors);\\\\\\\\n      }\\\\\\\\n      setLoading(false);\\\\\\\\n    }\\\\\\\\n  });\\\\\\\\n};\\\\\\\\n\\\\\\\\nuseEffect(() => {\\\\\\\\n  fetchPostIds();\\\\\\\\n}, [props.author, props.term, props.tag, props.recency]);\\\\\\\\n\\\\\\\\nconst handleLoadMore = () => {\\\\\\\\n  if (!hasNext) return;\\\\\\\\n  fetchPostIds(postIds.length);\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst renderLoader = () => <Loader>Loading...</Loader>;\\\\\\\\n\\\\\\\\nconst renderItem = (postId) => (\\\\\\\\n  <div key={postId}>\\\\\\\\n    {(props.renderItem && props.renderItem(postId)) || <div>Post {postId}</div>}\\\\\\\\n  </div>\\\\\\\\n);\\\\\\\\n\\\\\\\\nconst cachedRenderItem = (postId) => {\\\\\\\\n  if (!(postId in cachedItems)) {\\\\\\\\n    cachedItems[postId] = renderItem(postId);\\\\\\\\n    setCachedItems({ ...cachedItems });\\\\\\\\n  }\\\\\\\\n  return cachedItems[postId];\\\\\\\\n};\\\\\\\\n\\\\\\\\nreturn (\\\\\\\\n  <Container>\\\\\\\\n    {loading && renderLoader()}\\\\\\\\n    {postIds.length > 0 ? (\\\\\\\\n      <InfiniteScroll\\\\\\\\n        pageStart={0}\\\\\\\\n        dataLength={postIds.length}\\\\\\\\n        loadMore={handleLoadMore}\\\\\\\\n        hasMore={hasNext}\\\\\\\\n        loader={renderLoader()}\\\\\\\\n      >\\\\\\\\n        <Layout>\\\\\\\\n          {/* Layout */}\\\\\\\\n          {postIds.map(cachedRenderItem)}\\\\\\\\n        </Layout>\\\\\\\\n      </InfiniteScroll>\\\\\\\\n    ) : (\\\\\\\\n      <p class=\\\\\\\\\\\\\\\"text-secondary\\\\\\\\\\\\\\\">No posts</p>\\\\\\\\n    )}\\\\\\\\n  </Container>\\\\\\\\n);\\\\\\\\n\"}, \"devhub.entity.addon.blog.Page\": {\"\": \"const imagelink =\\\\\\\\n  \\\\\\\\\\\\\\\"https://ipfs.near.social/ipfs/bafkreiajzvmy7574k7mp3if6u53mdukfr3hoc2kjkhjadt6x56vqhd5swy\\\\\\\\\\\\\\\";\\\\\\\\n\\\\\\\\nfunction Page({ data }) {\\\\\\\\n  const { category, title, description, subtitle, date, content } = data;\\\\\\\\n  const Container = styled.div`\\\\\\\\n    display: flex;\\\\\\\\n    flex-direction: column;\\\\\\\\n    width: 100%;\\\\\\\\n\\\\\\\\n    padding: 0 3rem;\\\\\\\\n\\\\\\\\n    ${category &&\\\\\\\\n    `\\\\\\\\n    span.category {\\\\\\\\n      color: ${\\\\\\\\n        category.toLowerCase() === \\\\\\\\\\\\\\\"news\\\\\\\\\\\\\\\"\\\\\\\\n          ? \\\\\\\\\\\\\\\"#F40303\\\\\\\\\\\\\\\"\\\\\\\\n          : category.toLowerCase() === \\\\\\\\\\\\\\\"guide\\\\\\\\\\\\\\\"\\\\\\\\n          ? \\\\\\\\\\\\\\\"#004BE1\\\\\\\\\\\\\\\"\\\\\\\\n          : category.toLowerCase() === \\\\\\\\\\\\\\\"reference\\\\\\\\\\\\\\\" && \\\\\\\\\\\\\\\"#FF7A00\\\\\\\\\\\\\\\"\\\\\\\\n      };\\\\\\\\n      font-size: 1.5rem;\\\\\\\\n      font-style: normal;\\\\\\\\n      font-weight: 700;\\\\\\\\n      line-height: 20px; /* 125% */\\\\\\\\n      text-transform: uppercase;\\\\\\\\n    }\\\\\\\\n    `}\\\\\\\\n\\\\\\\\n    span.date {\\\\\\\\n      color: #818181;\\\\\\\\n      font-size: 1rem;\\\\\\\\n      font-style: normal;\\\\\\\\n      font-weight: 400;\\\\\\\\n      line-height: 20px; /* 125% */\\\\\\\\n      margin: 1.5rem 0;\\\\\\\\n    }\\\\\\\\n\\\\\\\\n    h1 {\\\\\\\\n      color: #151515;\\\\\\\\n      font-size: 3.5rem;\\\\\\\\n      font-style: normal;\\\\\\\\n      font-weight: 700;\\\\\\\\n      line-height: 100%; /* 88px */\\\\\\\\n      margin: 1rem 0;\\\\\\\\n    }\\\\\\\\n\\\\\\\\n    p.subtitle {\\\\\\\\n      color: #555;\\\\\\\\n      font-size: 1.5rem;\\\\\\\\n      font-style: normal;\\\\\\\\n      font-weight: 400;\\\\\\\\n      line-height: 110%; /* 35.2px */\\\\\\\\n      margin: 0;\\\\\\\\n    }\\\\\\\\n\\\\\\\\n    @media screen and (max-width: 768px) {\\\\\\\\n      padding: 0 1rem;\\\\\\\\n\\\\\\\\n      span.category {\\\\\\\\n        font-size: 0.75rem;\\\\\\\\n      }\\\\\\\\n\\\\\\\\n      h1 {\\\\\\\\n        font-size: 2rem;\\\\\\\\n      }\\\\\\\\n\\\\\\\\n      p.subtitle {\\\\\\\\n        font-size: 1rem;\\\\\\\\n      }\\\\\\\\n    }\\\\\\\\n  `;\\\\\\\\n\\\\\\\\n  const BackgroundImage = styled.img`\\\\\\\\n    width: 100%;\\\\\\\\n    height: auto;\\\\\\\\n    object-fit: cover;\\\\\\\\n    margin-bottom: 1rem;\\\\\\\\n  `;\\\\\\\\n\\\\\\\\n  const options = { year: \\\\\\\\\\\\\\\"numeric\\\\\\\\\\\\\\\", month: \\\\\\\\\\\\\\\"short\\\\\\\\\\\\\\\", day: \\\\\\\\\\\\\\\"numeric\\\\\\\\\\\\\\\" };\\\\\\\\n  const formattedDate = new Date(date).toLocaleString(\\\\\\\\\\\\\\\"en-US\\\\\\\\\\\\\\\", options);\\\\\\\\n\\\\\\\\n  return (\\\\\\\\n    <>\\\\\\\\n      <BackgroundImage src={imagelink} />\\\\\\\\n      <Container>\\\\\\\\n        {category && <span className=\\\\\\\\\\\\\\\"category\\\\\\\\\\\\\\\">{category}</span>}\\\\\\\\n        <h1>{title}</h1>\\\\\\\\n        <p className=\\\\\\\\\\\\\\\"subtitle\\\\\\\\\\\\\\\">{subtitle}</p>\\\\\\\\n        <span className=\\\\\\\\\\\\\\\"date\\\\\\\\\\\\\\\">{formattedDate}</span>\\\\\\\\n        <p>{description}</p>\\\\\\\\n        <Widget\\\\\\\\n          src={\\\\\\\\n            \\\\\\\\\\\\\\\"devhub.near/widget/devhub.components.molecule.MarkdownViewer\\\\\\\\\\\\\\\"\\\\\\\\n          }\\\\\\\\n          props={{ text: content }}\\\\\\\\n        />\\\\\\\\n      </Container>\\\\\\\\n    </>\\\\\\\\n  );\\\\\\\\n}\\\\\\\\n\\\\\\\\nreturn { Page };\\\\\\\\n\"}, \"devhub.entity.community.Teams\": {\"\": \"const { handle } = props;\\\\\\\\n\\\\\\\\nconst { Tile } =\\\\\\\\n  VM.require(\\\\\\\\\\\\\\\"devhub.near/widget/devhub.components.molecule.Tile\\\\\\\\\\\\\\\") ||\\\\\\\\n  (() => <></>);\\\\\\\\n\\\\\\\\nconst { getCommunity } = VM.require(\\\\\\\\n  \\\\\\\\\\\\\\\"devhub.near/widget/core.adapter.devhub-contract\\\\\\\\\\\\\\\"\\\\\\\\n);\\\\\\\\n\\\\\\\\nconst communityData = getCommunity({ handle });\\\\\\\\n\\\\\\\\nif (communityData === null) {\\\\\\\\n  return <div>Loading...</div>;\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst UserList = ({ name, users }) => (\\\\\\\\n  <div>\\\\\\\\n    {(users ?? []).map((user, i) => (\\\\\\\\n      <div className={`row ${i < users.length - 1 ? \\\\\\\\\\\\\\\"mb-3\\\\\\\\\\\\\\\" : \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\"}`}>\\\\\\\\n        <div class=\\\\\\\\\\\\\\\"col-3\\\\\\\\\\\\\\\">\\\\\\\\n          <b>{name + \\\\\\\\\\\\\\\" #\\\\\\\\\\\\\\\" + (i + 1)}</b>\\\\\\\\n        </div>\\\\\\\\n\\\\\\\\n        <div class=\\\\\\\\\\\\\\\"col-9\\\\\\\\\\\\\\\">\\\\\\\\n          <span\\\\\\\\n            key={user}\\\\\\\\n            className=\\\\\\\\\\\\\\\"d-inline-flex\\\\\\\\\\\\\\\"\\\\\\\\n            style={{ fontWeight: 500 }}\\\\\\\\n          >\\\\\\\\n            <Widget\\\\\\\\n              src=\\\\\\\\\\\\\\\"neardevgov.near/widget/ProfileLine\\\\\\\\\\\\\\\"\\\\\\\\n              props={{ accountId: user, hideAccountId: true, tooltip: true }}\\\\\\\\n            />\\\\\\\\n          </span>\\\\\\\\n        </div>\\\\\\\\n      </div>\\\\\\\\n    ))}\\\\\\\\n  </div>\\\\\\\\n);\\\\\\\\n\\\\\\\\nreturn (\\\\\\\\n  <div className=\\\\\\\\\\\\\\\"d-flex flex-column align-items-center gap-4 w-100\\\\\\\\\\\\\\\">\\\\\\\\n    <Tile className=\\\\\\\\\\\\\\\"p-3 w-100 bg-white mb-3\\\\\\\\\\\\\\\" style={{ maxWidth: 960 }}>\\\\\\\\n      <div>\\\\\\\\n        <div\\\\\\\\n          className=\\\\\\\\\\\\\\\"d-flex align-items-center justify-content-between w-100 pb-3\\\\\\\\\\\\\\\"\\\\\\\\n          style={{ minHeight: 30 }}\\\\\\\\n        >\\\\\\\\n          <h5 className=\\\\\\\\\\\\\\\"h5 d-inline-flex gap-2 m-0\\\\\\\\\\\\\\\">\\\\\\\\n            <span>Admins</span>\\\\\\\\n          </h5>\\\\\\\\n        </div>\\\\\\\\n        <UserList name=\\\\\\\\\\\\\\\"Admin\\\\\\\\\\\\\\\" users={communityData.admins} />\\\\\\\\n      </div>\\\\\\\\n    </Tile>\\\\\\\\n  </div>\\\\\\\\n);\\\\\\\\n\"}, \"devhub.entity.post.PostEditor\": {\"\": \"/* INCLUDE: \\\\\\\\\\\\\\\"core/lib/autocomplete\\\\\\\\\\\\\\\" */\\\\\\\\nconst autocompleteEnabled = true;\\\\\\\\n\\\\\\\\nconst AutoComplete = styled.div`\\\\\\\\n  z-index: 5;\\\\\\\\n\\\\\\\\n  > div > div {\\\\\\\\n    padding: calc(var(--padding) / 2);\\\\\\\\n  }\\\\\\\\n`;\\\\\\\\n\\\\\\\\nfunction textareaInputHandler(value) {\\\\\\\\n  const showAccountAutocomplete = /@[\\\\\\\\\\\\\\\\w][^\\\\\\\\\\\\\\\\s]*$/.test(value);\\\\\\\\n  State.update((lastKnownState) => ({\\\\\\\\n    ...lastKnownState,\\\\\\\\n    text: value,\\\\\\\\n    showAccountAutocomplete,\\\\\\\\n  }));\\\\\\\\n}\\\\\\\\n\\\\\\\\nfunction autoCompleteAccountId(id) {\\\\\\\\n  let description = state.description.replace(/[\\\\\\\\\\\\\\\\s]{0,1}@[^\\\\\\\\\\\\\\\\s]*$/, \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\");\\\\\\\\n  description = `${description} @${id}`.trim() + \\\\\\\\\\\\\\\" \\\\\\\\\\\\\\\";\\\\\\\\n  State.update((lastKnownState) => ({\\\\\\\\n    ...lastKnownState,\\\\\\\\n    description,\\\\\\\\n    showAccountAutocomplete: false,\\\\\\\\n  }));\\\\\\\\n}\\\\\\\\n/* END_INCLUDE: \\\\\\\\\\\\\\\"core/lib/autocomplete\\\\\\\\\\\\\\\" */\\\\\\\\n\\\\\\\\nconst postType = props.postType ?? \\\\\\\\\\\\\\\"Sponsorship\\\\\\\\\\\\\\\";\\\\\\\\nconst parentId = props.parentId ?? null;\\\\\\\\nconst postId = props.postId ?? null;\\\\\\\\nconst mode = props.mode ?? \\\\\\\\\\\\\\\"Create\\\\\\\\\\\\\\\";\\\\\\\\n\\\\\\\\nconst referralLabels = props.referral ? [`referral:${props.referral}`] : [];\\\\\\\\nconst labelStrings = (props.labels ?? []).concat(referralLabels);\\\\\\\\n\\\\\\\\nconst labels = labelStrings.map((s) => {\\\\\\\\n  return { name: s };\\\\\\\\n});\\\\\\\\n\\\\\\\\ninitState({\\\\\\\\n  seekingFunding: false,\\\\\\\\n  author_id: context.accountId,\\\\\\\\n  // Should be a list of objects with field \\\\\\\\\\\\\\\"name\\\\\\\\\\\\\\\".\\\\\\\\n  labels,\\\\\\\\n  // Should be a list of labels as strings.\\\\\\\\n  // Both of the label structures should be modified together.\\\\\\\\n  labelStrings,\\\\\\\\n  postType,\\\\\\\\n  name: props.name ?? \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\",\\\\\\\\n  description: props.description ?? \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\",\\\\\\\\n  amount: props.amount ?? \\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\n  token: props.token ?? \\\\\\\\\\\\\\\"USDT\\\\\\\\\\\\\\\",\\\\\\\\n  supervisor: props.supervisor ?? \\\\\\\\\\\\\\\"neardevdao.near\\\\\\\\\\\\\\\",\\\\\\\\n  githubLink: props.githubLink ?? \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\",\\\\\\\\n  warning: \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\",\\\\\\\\n  draftStateApplied: false,\\\\\\\\n});\\\\\\\\n\\\\\\\\nif (!state.draftStateApplied && props.draftState) {\\\\\\\\n  State.update({ ...props.draftState, draftStateApplied: true });\\\\\\\\n}\\\\\\\\n\\\\\\\\nlet fields = {\\\\\\\\n  Comment: [\\\\\\\\\\\\\\\"description\\\\\\\\\\\\\\\"],\\\\\\\\n  Idea: [\\\\\\\\\\\\\\\"name\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"description\\\\\\\\\\\\\\\"],\\\\\\\\n  Solution: [\\\\\\\\\\\\\\\"name\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"description\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"fund_raising\\\\\\\\\\\\\\\"],\\\\\\\\n  Attestation: [\\\\\\\\\\\\\\\"name\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"description\\\\\\\\\\\\\\\"],\\\\\\\\n  Sponsorship: [\\\\\\\\n    \\\\\\\\\\\\\\\"name\\\\\\\\\\\\\\\",\\\\\\\\n    \\\\\\\\\\\\\\\"description\\\\\\\\\\\\\\\",\\\\\\\\n    \\\\\\\\\\\\\\\"amount\\\\\\\\\\\\\\\",\\\\\\\\n    \\\\\\\\\\\\\\\"sponsorship_token\\\\\\\\\\\\\\\",\\\\\\\\n    \\\\\\\\\\\\\\\"supervisor\\\\\\\\\\\\\\\",\\\\\\\\n  ],\\\\\\\\n  Github: [\\\\\\\\\\\\\\\"githubLink\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"name\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"description\\\\\\\\\\\\\\\"],\\\\\\\\n}[postType];\\\\\\\\n\\\\\\\\n// This must be outside onClick, because Near.view returns null at first, and when the view call finished, it returns true/false.\\\\\\\\n// If checking this inside onClick, it will give `null` and we cannot tell the result is true or false.\\\\\\\\nlet grantNotify = Near.view(\\\\\\\\\\\\\\\"social.near\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"is_write_permission_granted\\\\\\\\\\\\\\\", {\\\\\\\\n  predecessor_id: \\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\",\\\\\\\\n  key: context.accountId + \\\\\\\\\\\\\\\"/index/notify\\\\\\\\\\\\\\\",\\\\\\\\n});\\\\\\\\nif (grantNotify === null) {\\\\\\\\n  return;\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst tokenMapping = {\\\\\\\\n  NEAR: \\\\\\\\\\\\\\\"NEAR\\\\\\\\\\\\\\\",\\\\\\\\n  USDT: {\\\\\\\\n    NEP141: {\\\\\\\\n      address: \\\\\\\\\\\\\\\"usdt.tether-token.near\\\\\\\\\\\\\\\",\\\\\\\\n    },\\\\\\\\n  },\\\\\\\\n  USDC: {\\\\\\\\n    NEP141: {\\\\\\\\n      address:\\\\\\\\n        \\\\\\\\\\\\\\\"17208628f84f5d6ad33f0da3bbbeb27ffcb398eac501a31bd6ad2011e36133a1\\\\\\\\\\\\\\\",\\\\\\\\n    },\\\\\\\\n  },\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst onSubmit = () => {\\\\\\\\n  let labels = state.labelStrings;\\\\\\\\n  var body = {\\\\\\\\n    Comment: { description: state.description, comment_version: \\\\\\\\\\\\\\\"V2\\\\\\\\\\\\\\\" },\\\\\\\\n    Idea: {\\\\\\\\n      name: state.name,\\\\\\\\n      description: state.description,\\\\\\\\n      idea_version: \\\\\\\\\\\\\\\"V1\\\\\\\\\\\\\\\",\\\\\\\\n    },\\\\\\\\n    Solution: {\\\\\\\\n      name: state.name,\\\\\\\\n      description: generateDescription(\\\\\\\\n        state.description,\\\\\\\\n        state.amount,\\\\\\\\n        state.token,\\\\\\\\n        state.supervisor,\\\\\\\\n        state.seekingFunding\\\\\\\\n      ),\\\\\\\\n      solution_version: \\\\\\\\\\\\\\\"V1\\\\\\\\\\\\\\\",\\\\\\\\n    },\\\\\\\\n    Attestation: {\\\\\\\\n      name: state.name,\\\\\\\\n      description: state.description,\\\\\\\\n      attestation_version: \\\\\\\\\\\\\\\"V1\\\\\\\\\\\\\\\",\\\\\\\\n    },\\\\\\\\n    Sponsorship: {\\\\\\\\n      name: state.name,\\\\\\\\n      description: state.description,\\\\\\\\n      amount: state.amount,\\\\\\\\n      sponsorship_token: tokenMapping[state.token],\\\\\\\\n      supervisor: state.supervisor,\\\\\\\\n      sponsorship_version: \\\\\\\\\\\\\\\"V1\\\\\\\\\\\\\\\",\\\\\\\\n    },\\\\\\\\n    Github: {\\\\\\\\n      name: state.name,\\\\\\\\n      description: state.description,\\\\\\\\n      github_version: \\\\\\\\\\\\\\\"V0\\\\\\\\\\\\\\\",\\\\\\\\n      github_link: state.githubLink,\\\\\\\\n    },\\\\\\\\n  }[postType];\\\\\\\\n  body[\\\\\\\\\\\\\\\"post_type\\\\\\\\\\\\\\\"] = postType;\\\\\\\\n  if (!context.accountId) {\\\\\\\\n    return;\\\\\\\\n  }\\\\\\\\n  let txn = [];\\\\\\\\n  if (mode == \\\\\\\\\\\\\\\"Create\\\\\\\\\\\\\\\") {\\\\\\\\n    props.onDraftStateChange(\\\\\\\\n      Object.assign({}, state, { parent_post_id: parentId })\\\\\\\\n    );\\\\\\\\n    txn.push({\\\\\\\\n      contractName: \\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\",\\\\\\\\n      methodName: \\\\\\\\\\\\\\\"add_post\\\\\\\\\\\\\\\",\\\\\\\\n      args: {\\\\\\\\n        parent_id: parentId,\\\\\\\\n        labels,\\\\\\\\n        body,\\\\\\\\n      },\\\\\\\\n      deposit: Big(10).pow(21).mul(2),\\\\\\\\n      gas: Big(10).pow(12).mul(100),\\\\\\\\n    });\\\\\\\\n  } else if (mode == \\\\\\\\\\\\\\\"Edit\\\\\\\\\\\\\\\") {\\\\\\\\n    props.onDraftStateChange(\\\\\\\\n      Object.assign({}, state, { edit_post_id: postId })\\\\\\\\n    );\\\\\\\\n    txn.push({\\\\\\\\n      contractName: \\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\",\\\\\\\\n      methodName: \\\\\\\\\\\\\\\"edit_post\\\\\\\\\\\\\\\",\\\\\\\\n      args: {\\\\\\\\n        id: postId,\\\\\\\\n        labels,\\\\\\\\n        body,\\\\\\\\n      },\\\\\\\\n      deposit: Big(10).pow(21).mul(2),\\\\\\\\n      gas: Big(10).pow(12).mul(100),\\\\\\\\n    });\\\\\\\\n  }\\\\\\\\n  if (mode == \\\\\\\\\\\\\\\"Create\\\\\\\\\\\\\\\" || mode == \\\\\\\\\\\\\\\"Edit\\\\\\\\\\\\\\\") {\\\\\\\\n    if (grantNotify === false) {\\\\\\\\n      txn.unshift({\\\\\\\\n        contractName: \\\\\\\\\\\\\\\"social.near\\\\\\\\\\\\\\\",\\\\\\\\n        methodName: \\\\\\\\\\\\\\\"grant_write_permission\\\\\\\\\\\\\\\",\\\\\\\\n        args: {\\\\\\\\n          predecessor_id: \\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\",\\\\\\\\n          keys: [context.accountId + \\\\\\\\\\\\\\\"/index/notify\\\\\\\\\\\\\\\"],\\\\\\\\n        },\\\\\\\\n        deposit: Big(10).pow(23),\\\\\\\\n        gas: Big(10).pow(12).mul(30),\\\\\\\\n      });\\\\\\\\n    }\\\\\\\\n    Near.call(txn);\\\\\\\\n  }\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst normalizeLabel = (label) =>\\\\\\\\n  label\\\\\\\\n    .replaceAll(/[- \\\\\\\\\\\\\\\\.]/g, \\\\\\\\\\\\\\\"_\\\\\\\\\\\\\\\")\\\\\\\\n    .replaceAll(/[^\\\\\\\\\\\\\\\\w]+/g, \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\")\\\\\\\\n    .replaceAll(/_+/g, \\\\\\\\\\\\\\\"-\\\\\\\\\\\\\\\")\\\\\\\\n    .replace(/^-+/, \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\")\\\\\\\\n    .replace(/-+$/, \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\")\\\\\\\\n    .toLowerCase()\\\\\\\\n    .trim(\\\\\\\\\\\\\\\"-\\\\\\\\\\\\\\\");\\\\\\\\n\\\\\\\\nconst checkLabel = (label) => {\\\\\\\\n  Near.asyncView(\\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"is_allowed_to_use_labels\\\\\\\\\\\\\\\", {\\\\\\\\n    editor: context.accountId,\\\\\\\\n    labels: [label],\\\\\\\\n  }).then((allowed) => {\\\\\\\\n    if (allowed) {\\\\\\\\n      State.update({ warning: \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\" });\\\\\\\\n    } else {\\\\\\\\n      State.update({\\\\\\\\n        warning:\\\\\\\\n          \\\\\\\\\\\\'The label \\\\\\\\\\\\\\\"\\\\\\\\\\\\' +\\\\\\\\n          label +\\\\\\\\n          \\\\\\\\\\\\'\\\\\\\\\\\\\\\" is protected and can only be added by moderators\\\\\\\\\\\\',\\\\\\\\n      });\\\\\\\\n      return;\\\\\\\\n    }\\\\\\\\n  });\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst setLabels = (labels) => {\\\\\\\\n  labels = labels.map((o) => {\\\\\\\\n    o.name = normalizeLabel(o.name);\\\\\\\\n    return o;\\\\\\\\n  });\\\\\\\\n  if (labels.length < state.labels.length) {\\\\\\\\n    let oldLabels = new Set(state.labels.map((label) => label.name));\\\\\\\\n    for (let label of labels) {\\\\\\\\n      oldLabels.delete(label.name);\\\\\\\\n    }\\\\\\\\n    let removed = oldLabels.values().next().value;\\\\\\\\n    Near.asyncView(\\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"is_allowed_to_use_labels\\\\\\\\\\\\\\\", {\\\\\\\\n      editor: context.accountId,\\\\\\\\n      labels: [removed],\\\\\\\\n    }).then((allowed) => {\\\\\\\\n      if (allowed) {\\\\\\\\n        let labelStrings = labels.map(({ name }) => name);\\\\\\\\n        State.update({ labels, labelStrings });\\\\\\\\n      } else {\\\\\\\\n        State.update({\\\\\\\\n          warning:\\\\\\\\n            \\\\\\\\\\\\'The label \\\\\\\\\\\\\\\"\\\\\\\\\\\\' +\\\\\\\\n            removed +\\\\\\\\n            \\\\\\\\\\\\'\\\\\\\\\\\\\\\" is protected and can only be updated by moderators\\\\\\\\\\\\',\\\\\\\\n        });\\\\\\\\n        return;\\\\\\\\n      }\\\\\\\\n    });\\\\\\\\n  } else {\\\\\\\\n    let labelStrings = labels.map((o) => {\\\\\\\\n      return o.name;\\\\\\\\n    });\\\\\\\\n    State.update({ labels, labelStrings });\\\\\\\\n  }\\\\\\\\n};\\\\\\\\nconst existingLabelStrings =\\\\\\\\n  Near.view(\\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"get_all_allowed_labels\\\\\\\\\\\\\\\", {\\\\\\\\n    editor: context.accountId,\\\\\\\\n  }) ?? [];\\\\\\\\nconst existingLabelSet = new Set(existingLabelStrings);\\\\\\\\nconst existingLabels = existingLabelStrings.map((s) => {\\\\\\\\n  return { name: s };\\\\\\\\n});\\\\\\\\n\\\\\\\\nconst labelEditor = (\\\\\\\\n  <div className=\\\\\\\\\\\\\\\"col-lg-12  mb-2\\\\\\\\\\\\\\\">\\\\\\\\n    Labels:\\\\\\\\n    <Typeahead\\\\\\\\n      multiple\\\\\\\\n      labelKey=\\\\\\\\\\\\\\\"name\\\\\\\\\\\\\\\"\\\\\\\\n      onInputChange={checkLabel}\\\\\\\\n      onChange={setLabels}\\\\\\\\n      options={existingLabels}\\\\\\\\n      placeholder=\\\\\\\\\\\\\\\"near.social, widget, NEP, standard, protocol, tool\\\\\\\\\\\\\\\"\\\\\\\\n      selected={state.labels}\\\\\\\\n      positionFixed\\\\\\\\n      allowNew={(results, props) => {\\\\\\\\n        return (\\\\\\\\n          !existingLabelSet.has(props.text) &&\\\\\\\\n          props.selected.filter((selected) => selected.name === props.text)\\\\\\\\n            .length == 0 &&\\\\\\\\n          Near.view(\\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"is_allowed_to_use_labels\\\\\\\\\\\\\\\", {\\\\\\\\n            editor: context.accountId,\\\\\\\\n            labels: [props.text],\\\\\\\\n          })\\\\\\\\n        );\\\\\\\\n      }}\\\\\\\\n    />\\\\\\\\n  </div>\\\\\\\\n);\\\\\\\\n\\\\\\\\nconst githubLinkDiv = (\\\\\\\\n  <div className=\\\\\\\\\\\\\\\"col-lg-12  mb-2\\\\\\\\\\\\\\\">\\\\\\\\n    Github Issue URL:\\\\\\\\n    <input\\\\\\\\n      type=\\\\\\\\\\\\\\\"text\\\\\\\\\\\\\\\"\\\\\\\\n      value={state.githubLink}\\\\\\\\n      onChange={(event) => State.update({ githubLink: event.target.value })}\\\\\\\\n    />\\\\\\\\n  </div>\\\\\\\\n);\\\\\\\\n\\\\\\\\nconst nameDiv = (\\\\\\\\n  <div className=\\\\\\\\\\\\\\\"col-lg-6  mb-2\\\\\\\\\\\\\\\">\\\\\\\\n    Title:\\\\\\\\n    <input\\\\\\\\n      type=\\\\\\\\\\\\\\\"text\\\\\\\\\\\\\\\"\\\\\\\\n      value={state.name}\\\\\\\\n      onChange={(event) => State.update({ name: event.target.value })}\\\\\\\\n    />\\\\\\\\n  </div>\\\\\\\\n);\\\\\\\\n\\\\\\\\nconst amountDiv = (\\\\\\\\n  <div className=\\\\\\\\\\\\\\\"col-lg-6  mb-2\\\\\\\\\\\\\\\">\\\\\\\\n    Amount:\\\\\\\\n    <input\\\\\\\\n      type=\\\\\\\\\\\\\\\"text\\\\\\\\\\\\\\\"\\\\\\\\n      value={state.amount}\\\\\\\\n      onChange={(event) => State.update({ amount: event.target.value })}\\\\\\\\n    />\\\\\\\\n  </div>\\\\\\\\n);\\\\\\\\n\\\\\\\\nconst tokenDiv = (\\\\\\\\n  <div className=\\\\\\\\\\\\\\\"col-lg-6 mb-2\\\\\\\\\\\\\\\">\\\\\\\\n    Currency\\\\\\\\n    <select\\\\\\\\n      onChange={(event) => State.update({ token: event.target.value })}\\\\\\\\n      class=\\\\\\\\\\\\\\\"form-select\\\\\\\\\\\\\\\"\\\\\\\\n      aria-label=\\\\\\\\\\\\\\\"Select currency\\\\\\\\\\\\\\\"\\\\\\\\n      value={state.token}\\\\\\\\n    >\\\\\\\\n      <option value=\\\\\\\\\\\\\\\"USDT\\\\\\\\\\\\\\\">USDT</option>\\\\\\\\n      <option value=\\\\\\\\\\\\\\\"NEAR\\\\\\\\\\\\\\\">NEAR</option>\\\\\\\\n      <option value=\\\\\\\\\\\\\\\"USDC\\\\\\\\\\\\\\\">USDC</option>\\\\\\\\n    </select>\\\\\\\\n  </div>\\\\\\\\n);\\\\\\\\n\\\\\\\\nconst supervisorDiv = (\\\\\\\\n  <div className=\\\\\\\\\\\\\\\"col-lg-6 mb-2\\\\\\\\\\\\\\\">\\\\\\\\n    Supervisor:\\\\\\\\n    <input\\\\\\\\n      type=\\\\\\\\\\\\\\\"text\\\\\\\\\\\\\\\"\\\\\\\\n      value={state.supervisor}\\\\\\\\n      onChange={(event) => State.update({ supervisor: event.target.value })}\\\\\\\\n    />\\\\\\\\n  </div>\\\\\\\\n);\\\\\\\\n\\\\\\\\nconst callDescriptionDiv = () => {\\\\\\\\n  return (\\\\\\\\n    <div className=\\\\\\\\\\\\\\\"col-lg-12  mb-2\\\\\\\\\\\\\\\">\\\\\\\\n      Description:\\\\\\\\n      <br />\\\\\\\\n      <Widget\\\\\\\\n        src={\\\\\\\\\\\\\\\"devhub.near/widget/devhub.components.molecule.MarkdownEditor\\\\\\\\\\\\\\\"}\\\\\\\\n        props={{\\\\\\\\n          data: { handler: state.handler, content: state.description },\\\\\\\\n          onChange: (content) => {\\\\\\\\n            State.update({ description: content, handler: \\\\\\\\\\\\\\\"update\\\\\\\\\\\\\\\" });\\\\\\\\n            textareaInputHandler(content);\\\\\\\\n          },\\\\\\\\n        }}\\\\\\\\n      />\\\\\\\\n      {autocompleteEnabled && state.showAccountAutocomplete && (\\\\\\\\n        <AutoComplete>\\\\\\\\n          <Widget\\\\\\\\n            src=\\\\\\\\\\\\\\\"near/widget/AccountAutocomplete\\\\\\\\\\\\\\\"\\\\\\\\n            props={{\\\\\\\\n              term: state.text.split(\\\\\\\\\\\\\\\"@\\\\\\\\\\\\\\\").pop(),\\\\\\\\n              onSelect: autoCompleteAccountId,\\\\\\\\n              onClose: () => State.update({ showAccountAutocomplete: false }),\\\\\\\\n            }}\\\\\\\\n          />\\\\\\\\n        </AutoComplete>\\\\\\\\n      )}\\\\\\\\n    </div>\\\\\\\\n  );\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst disclaimer = (\\\\\\\\n  <p>\\\\\\\\n    <i>\\\\\\\\n      * Note, all projects that were granted sponsorships are required to pass\\\\\\\\n      KYC to receive the funding.\\\\\\\\n    </i>\\\\\\\\n  </p>\\\\\\\\n);\\\\\\\\n\\\\\\\\nconst isFundraisingDiv = (\\\\\\\\n  // This is jank with just btns and not radios. But the radios were glitchy af\\\\\\\\n  <>\\\\\\\\n    <div class=\\\\\\\\\\\\\\\"mb-2\\\\\\\\\\\\\\\">\\\\\\\\n      <p class=\\\\\\\\\\\\\\\"fs-6 fw-bold mb-1\\\\\\\\\\\\\\\">\\\\\\\\n        Are you seeking funding for your solution?\\\\\\\\n        <span class=\\\\\\\\\\\\\\\"text-muted fw-normal\\\\\\\\\\\\\\\">(Optional)</span>\\\\\\\\n      </p>\\\\\\\\n      <div class=\\\\\\\\\\\\\\\"form-check form-check-inline\\\\\\\\\\\\\\\">\\\\\\\\n        <label class=\\\\\\\\\\\\\\\"form-check-label\\\\\\\\\\\\\\\">\\\\\\\\n          <button\\\\\\\\n            className=\\\\\\\\\\\\\\\"btn btn-light p-0\\\\\\\\\\\\\\\"\\\\\\\\n            style={{\\\\\\\\n              backgroundColor: state.seekingFunding ? \\\\\\\\\\\\\\\"#0C7283\\\\\\\\\\\\\\\" : \\\\\\\\\\\\\\\"inherit\\\\\\\\\\\\\\\",\\\\\\\\n              color: \\\\\\\\\\\\\\\"#f3f3f3\\\\\\\\\\\\\\\",\\\\\\\\n              border: \\\\\\\\\\\\\\\"solid #D9D9D9\\\\\\\\\\\\\\\",\\\\\\\\n              borderRadius: \\\\\\\\\\\\\\\"100%\\\\\\\\\\\\\\\",\\\\\\\\n              height: \\\\\\\\\\\\\\\"20px\\\\\\\\\\\\\\\",\\\\\\\\n              width: \\\\\\\\\\\\\\\"20px\\\\\\\\\\\\\\\",\\\\\\\\n            }}\\\\\\\\n            onClick={() => State.update({ seekingFunding: true })}\\\\\\\\n          />\\\\\\\\n          Yes\\\\\\\\n        </label>\\\\\\\\n      </div>\\\\\\\\n      <div class=\\\\\\\\\\\\\\\"form-check form-check-inline\\\\\\\\\\\\\\\">\\\\\\\\n        <label class=\\\\\\\\\\\\\\\"form-check-label\\\\\\\\\\\\\\\">\\\\\\\\n          <button\\\\\\\\n            className=\\\\\\\\\\\\\\\"btn btn-light p-0\\\\\\\\\\\\\\\"\\\\\\\\n            style={{\\\\\\\\n              backgroundColor: !state.seekingFunding ? \\\\\\\\\\\\\\\"#0C7283\\\\\\\\\\\\\\\" : \\\\\\\\\\\\\\\"inherit\\\\\\\\\\\\\\\",\\\\\\\\n              color: \\\\\\\\\\\\\\\"#f3f3f3\\\\\\\\\\\\\\\",\\\\\\\\n              border: \\\\\\\\\\\\\\\"solid #D9D9D9\\\\\\\\\\\\\\\",\\\\\\\\n              borderRadius: \\\\\\\\\\\\\\\"100%\\\\\\\\\\\\\\\",\\\\\\\\n              height: \\\\\\\\\\\\\\\"20px\\\\\\\\\\\\\\\",\\\\\\\\n              width: \\\\\\\\\\\\\\\"20px\\\\\\\\\\\\\\\",\\\\\\\\n            }}\\\\\\\\n            onClick={() => State.update({ seekingFunding: false })}\\\\\\\\n          />\\\\\\\\n          No\\\\\\\\n        </label>\\\\\\\\n      </div>\\\\\\\\n    </div>\\\\\\\\n  </>\\\\\\\\n);\\\\\\\\n\\\\\\\\nconst fundraisingDiv = (\\\\\\\\n  <div class=\\\\\\\\\\\\\\\"d-flex flex-column mb-2\\\\\\\\\\\\\\\">\\\\\\\\n    <div className=\\\\\\\\\\\\\\\"col-lg-6 mb-2\\\\\\\\\\\\\\\">\\\\\\\\n      Currency\\\\\\\\n      <select\\\\\\\\n        onChange={(event) => State.update({ token: event.target.value })}\\\\\\\\n        class=\\\\\\\\\\\\\\\"form-select\\\\\\\\\\\\\\\"\\\\\\\\n        aria-label=\\\\\\\\\\\\\\\"Default select example\\\\\\\\\\\\\\\"\\\\\\\\n        value={state.token}\\\\\\\\n      >\\\\\\\\n        <option value=\\\\\\\\\\\\\\\"USDT\\\\\\\\\\\\\\\">USDT</option>\\\\\\\\n        <option value=\\\\\\\\\\\\\\\"NEAR\\\\\\\\\\\\\\\">NEAR</option>\\\\\\\\n        <option value=\\\\\\\\\\\\\\\"USDC\\\\\\\\\\\\\\\">USDC</option>\\\\\\\\n      </select>\\\\\\\\n    </div>\\\\\\\\n    <div className=\\\\\\\\\\\\\\\"col-lg-6 mb-2\\\\\\\\\\\\\\\">\\\\\\\\n      Requested amount\\\\\\\\n      <span class=\\\\\\\\\\\\\\\"text-muted fw-normal\\\\\\\\\\\\\\\">(Numbers Only)</span>\\\\\\\\n      <input\\\\\\\\n        type=\\\\\\\\\\\\\\\"number\\\\\\\\\\\\\\\"\\\\\\\\n        value={parseInt(state.amount) > 0 ? state.amount : \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\"}\\\\\\\\n        min={0}\\\\\\\\n        onChange={(event) => {\\\\\\\\n          State.update({\\\\\\\\n            amount: Number(\\\\\\\\n              event.target.value.toString().replace(/e/g, \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\")\\\\\\\\n            ).toString(),\\\\\\\\n          });\\\\\\\\n        }}\\\\\\\\n      />\\\\\\\\n    </div>\\\\\\\\n    <div className=\\\\\\\\\\\\\\\"col-lg-6 mb-2\\\\\\\\\\\\\\\">\\\\\\\\n      <p class=\\\\\\\\\\\\\\\"mb-1\\\\\\\\\\\\\\\">\\\\\\\\n        Requested sponsor\\\\\\\\n        <span class=\\\\\\\\\\\\\\\"text-muted fw-normal\\\\\\\\\\\\\\\">(Optional)</span>\\\\\\\\n      </p>\\\\\\\\n      <p style={{ fontSize: \\\\\\\\\\\\\\\"13px\\\\\\\\\\\\\\\" }} class=\\\\\\\\\\\\\\\"m-0 text-muted fw-light\\\\\\\\\\\\\\\">\\\\\\\\n        If you are requesting funding from a specific sponsor, please enter\\\\\\\\n        their username.\\\\\\\\n      </p>\\\\\\\\n      <div class=\\\\\\\\\\\\\\\"input-group flex-nowrap\\\\\\\\\\\\\\\">\\\\\\\\n        <span class=\\\\\\\\\\\\\\\"input-group-text\\\\\\\\\\\\\\\" id=\\\\\\\\\\\\\\\"addon-wrapping\\\\\\\\\\\\\\\">\\\\\\\\n          @\\\\\\\\n        </span>\\\\\\\\n        <input\\\\\\\\n          type=\\\\\\\\\\\\\\\"text\\\\\\\\\\\\\\\"\\\\\\\\n          class=\\\\\\\\\\\\\\\"form-control\\\\\\\\\\\\\\\"\\\\\\\\n          placeholder=\\\\\\\\\\\\\\\"Enter username\\\\\\\\\\\\\\\"\\\\\\\\n          value={state.supervisor}\\\\\\\\n          onChange={(event) => State.update({ supervisor: event.target.value })}\\\\\\\\n        />\\\\\\\\n      </div>\\\\\\\\n    </div>\\\\\\\\n  </div>\\\\\\\\n);\\\\\\\\n\\\\\\\\nfunction generateDescription(text, amount, token, supervisor, seekingFunding) {\\\\\\\\n  const fundingText =\\\\\\\\n    amount > 0 && token ? `###### Requested amount: ${amount} ${token}\\\\\\\\\\\\\\\\n` : \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\";\\\\\\\\n  const supervisorText = supervisor\\\\\\\\n    ? `###### Requested sponsor: @${supervisor}\\\\\\\\\\\\\\\\n`\\\\\\\\n    : \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\";\\\\\\\\n  return seekingFunding ? `${fundingText}${supervisorText}${text}` : text;\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst renamedPostType = postType == \\\\\\\\\\\\\\\"Submission\\\\\\\\\\\\\\\" ? \\\\\\\\\\\\\\\"Solution\\\\\\\\\\\\\\\" : postType;\\\\\\\\n// Below there is a weird code with fields.includes(\\\\\\\\\\\\\\\"githubLink\\\\\\\\\\\\\\\") ternary operator.\\\\\\\\n// This is to hack around rendering bug of near.social.\\\\\\\\nreturn (\\\\\\\\n  <div className=\\\\\\\\\\\\\\\"card\\\\\\\\\\\\\\\">\\\\\\\\n    <div className=\\\\\\\\\\\\\\\"card-header\\\\\\\\\\\\\\\">\\\\\\\\n      {mode} {renamedPostType}\\\\\\\\n    </div>\\\\\\\\n\\\\\\\\n    <div class=\\\\\\\\\\\\\\\"card-body\\\\\\\\\\\\\\\">\\\\\\\\n      {state.warning && (\\\\\\\\n        <div\\\\\\\\n          class=\\\\\\\\\\\\\\\"alert alert-warning alert-dismissible fade show\\\\\\\\\\\\\\\"\\\\\\\\n          role=\\\\\\\\\\\\\\\"alert\\\\\\\\\\\\\\\"\\\\\\\\n        >\\\\\\\\n          {state.warning}\\\\\\\\n          <button\\\\\\\\n            type=\\\\\\\\\\\\\\\"button\\\\\\\\\\\\\\\"\\\\\\\\n            class=\\\\\\\\\\\\\\\"btn-close\\\\\\\\\\\\\\\"\\\\\\\\n            data-bs-dismiss=\\\\\\\\\\\\\\\"alert\\\\\\\\\\\\\\\"\\\\\\\\n            aria-label=\\\\\\\\\\\\\\\"Close\\\\\\\\\\\\\\\"\\\\\\\\n            onClick={() => State.update({ warning: \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\" })}\\\\\\\\n          ></button>\\\\\\\\n        </div>\\\\\\\\n      )}\\\\\\\\n      {/* This statement around the githubLinkDiv creates a weird render bug\\\\\\\\n      where the title renders extra on state change. */}\\\\\\\\n      {fields.includes(\\\\\\\\\\\\\\\"githubLink\\\\\\\\\\\\\\\") ? (\\\\\\\\n        <div className=\\\\\\\\\\\\\\\"row\\\\\\\\\\\\\\\">\\\\\\\\n          {fields.includes(\\\\\\\\\\\\\\\"githubLink\\\\\\\\\\\\\\\") && githubLinkDiv}\\\\\\\\n          {labelEditor}\\\\\\\\n          {fields.includes(\\\\\\\\\\\\\\\"name\\\\\\\\\\\\\\\") && nameDiv}\\\\\\\\n          {fields.includes(\\\\\\\\\\\\\\\"description\\\\\\\\\\\\\\\") && callDescriptionDiv()}\\\\\\\\n        </div>\\\\\\\\n      ) : (\\\\\\\\n        <div className=\\\\\\\\\\\\\\\"row\\\\\\\\\\\\\\\">\\\\\\\\n          {labelEditor}\\\\\\\\n          {fields.includes(\\\\\\\\\\\\\\\"name\\\\\\\\\\\\\\\") && nameDiv}\\\\\\\\n          {fields.includes(\\\\\\\\\\\\\\\"amount\\\\\\\\\\\\\\\") && amountDiv}\\\\\\\\n          {fields.includes(\\\\\\\\\\\\\\\"sponsorship_token\\\\\\\\\\\\\\\") && tokenDiv}\\\\\\\\n          {fields.includes(\\\\\\\\\\\\\\\"supervisor\\\\\\\\\\\\\\\") && supervisorDiv}\\\\\\\\n          {fields.includes(\\\\\\\\\\\\\\\"description\\\\\\\\\\\\\\\") && callDescriptionDiv()}\\\\\\\\n          {fields.includes(\\\\\\\\\\\\\\\"fund_raising\\\\\\\\\\\\\\\") && isFundraisingDiv}\\\\\\\\n          {state.seekingFunding &&\\\\\\\\n            fields.includes(\\\\\\\\\\\\\\\"fund_raising\\\\\\\\\\\\\\\") &&\\\\\\\\n            fundraisingDiv}\\\\\\\\n        </div>\\\\\\\\n      )}\\\\\\\\n      <button\\\\\\\\n        style={{\\\\\\\\n          width: \\\\\\\\\\\\\\\"7rem\\\\\\\\\\\\\\\",\\\\\\\\n          backgroundColor: \\\\\\\\\\\\\\\"#0C7283\\\\\\\\\\\\\\\",\\\\\\\\n          color: \\\\\\\\\\\\\\\"#f3f3f3\\\\\\\\\\\\\\\",\\\\\\\\n        }}\\\\\\\\n        disabled={state.seekingFunding && (!state.amount || state.amount < 1)}\\\\\\\\n        className=\\\\\\\\\\\\\\\"btn btn-light mb-2 p-3\\\\\\\\\\\\\\\"\\\\\\\\n        onClick={onSubmit}\\\\\\\\n      >\\\\\\\\n        Submit\\\\\\\\n      </button>\\\\\\\\n      {disclaimer}\\\\\\\\n    </div>\\\\\\\\n    <div class=\\\\\\\\\\\\\\\"card-footer\\\\\\\\\\\\\\\">\\\\\\\\n      Preview:\\\\\\\\n      <Widget\\\\\\\\n        src=\\\\\\\\\\\\\\\"devhub.near/widget/devhub.entity.post.Post\\\\\\\\\\\\\\\"\\\\\\\\n        props={{\\\\\\\\n          isPreview: true,\\\\\\\\n          id: 0, // irrelevant\\\\\\\\n          post: {\\\\\\\\n            author_id: state.author_id,\\\\\\\\n            likes: [],\\\\\\\\n            snapshot: {\\\\\\\\n              editor_id: state.editor_id,\\\\\\\\n              labels: state.labelStrings,\\\\\\\\n              post_type: postType,\\\\\\\\n              name: state.name,\\\\\\\\n              description:\\\\\\\\n                postType == \\\\\\\\\\\\\\\"Solution\\\\\\\\\\\\\\\"\\\\\\\\n                  ? generateDescription(\\\\\\\\n                      state.description,\\\\\\\\n                      state.amount,\\\\\\\\n                      state.token,\\\\\\\\n                      state.supervisor,\\\\\\\\n                      state.seekingFunding\\\\\\\\n                    )\\\\\\\\n                  : state.description,\\\\\\\\n              amount: state.amount,\\\\\\\\n              sponsorship_token: state.token,\\\\\\\\n              supervisor: state.supervisor,\\\\\\\\n              github_link: state.githubLink,\\\\\\\\n            },\\\\\\\\n          },\\\\\\\\n        }}\\\\\\\\n      />\\\\\\\\n    </div>\\\\\\\\n  </div>\\\\\\\\n);\\\\\\\\n\"}, \"devhub.components.island.banner\": {\"\": \"const imageLink = props.imageLink;\\\\\\\\nconst bannerTitle = props.title;\\\\\\\\n\\\\\\\\nconst HeroSection = styled.div`\\\\\\\\n  position: relative;\\\\\\\\n  height: auto;\\\\\\\\n  z-index: 3;\\\\\\\\n  width: 70%;\\\\\\\\n  background: #00ec97;\\\\\\\\n  clip-path: polygon(0 0, 100% 0%, 75% 100%, 0% 100%);\\\\\\\\n\\\\\\\\n  padding-top: 2rem;\\\\\\\\n  padding-bottom: 2rem;\\\\\\\\n  padding-left: 3.375rem;\\\\\\\\n\\\\\\\\n  @media screen and (max-width: 768px) {\\\\\\\\n    width: 100%;\\\\\\\\n    padding: 1rem 1.5rem;\\\\\\\\n\\\\\\\\n    clip-path: none;\\\\\\\\n  }\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst Title = styled.h1`\\\\\\\\n  color: #f4f4f4;\\\\\\\\n  font-size: 4rem;\\\\\\\\n  font-style: normal;\\\\\\\\n  font-weight: 700;\\\\\\\\n  line-height: 100%; /* 88px */\\\\\\\\n  letter-spacing: -1.76px;\\\\\\\\n  margin: 0;\\\\\\\\n\\\\\\\\n  width: 80%;\\\\\\\\n\\\\\\\\n  @media screen and (max-width: 768px) {\\\\\\\\n    width: 100%;\\\\\\\\n    font-size: 2.25rem;\\\\\\\\n    letter-spacing: -0.72px;\\\\\\\\n  }\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst Container = styled.div`\\\\\\\\n  position: relative;\\\\\\\\n  width: 100%;\\\\\\\\n  height: max-content;\\\\\\\\n  overflow: hidden;\\\\\\\\n\\\\\\\\n  @media screen and (max-width: 768px) {\\\\\\\\n    background: #f4f4f4;\\\\\\\\n  }\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst ImageContainer = styled.div`\\\\\\\\n  width: 100%;\\\\\\\\n  height: 100%;\\\\\\\\n  position: absolute;\\\\\\\\n  top: 0;\\\\\\\\n  right: 0;\\\\\\\\n  z-index: 1;\\\\\\\\n  background: transparent;\\\\\\\\n\\\\\\\\n  @media screen and (max-width: 768px) {\\\\\\\\n    display: none;\\\\\\\\n  }\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst Image = styled.img`\\\\\\\\n  margin-left: 15.625rem;\\\\\\\\n  height: 100%;\\\\\\\\n  width: 100%;\\\\\\\\n  filter: grayscale(100%);\\\\\\\\n  object-fit: cover;\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst MobileImage = styled.img`\\\\\\\\n  display: none;\\\\\\\\n\\\\\\\\n  width: 356.187px;\\\\\\\\n  height: 196px;\\\\\\\\n\\\\\\\\n  width: 100%;\\\\\\\\n  object-fit: cover;\\\\\\\\n  filter: grayscale(1);\\\\\\\\n\\\\\\\\n  @media screen and (max-width: 768px) {\\\\\\\\n    display: block;\\\\\\\\n  }\\\\\\\\n`;\\\\\\\\n\\\\\\\\nreturn (\\\\\\\\n  <Container>\\\\\\\\n    <HeroSection>\\\\\\\\n      <Title>{bannerTitle}</Title>\\\\\\\\n    </HeroSection>\\\\\\\\n    <ImageContainer>\\\\\\\\n      <Image src={imageLink} />\\\\\\\\n    </ImageContainer>\\\\\\\\n    <MobileImage src={imageLink} />\\\\\\\\n  </Container>\\\\\\\\n);\\\\\\\\n\"}, \"devhub.components.molecule.Tile\": {\"\": \"function Tile({ id, children, className, minHeight, style }) {\\\\\\\\n  return (\\\\\\\\n    <div\\\\\\\\n      id={id}\\\\\\\\n      className={[\\\\\\\\n        \\\\\\\\\\\\\\\"d-flex flex-column rounded-4 attractable w-100 border\\\\\\\\\\\\\\\",\\\\\\\\n        className,\\\\\\\\n      ].join(\\\\\\\\\\\\\\\" \\\\\\\\\\\\\\\")}\\\\\\\\n      style={{\\\\\\\\n        minHeight: minHeight ?? 180,\\\\\\\\n        height: \\\\\\\\\\\\\\\"fit-content\\\\\\\\\\\\\\\",\\\\\\\\n        ...style,\\\\\\\\n      }}\\\\\\\\n    >\\\\\\\\n      {children}\\\\\\\\n    </div>\\\\\\\\n  );\\\\\\\\n}\\\\\\\\n\\\\\\\\nreturn { Tile };\\\\\\\\n\"}, \"devhub.entity.addon.blog.Viewer\": {\"\": \"const { Card } =\\\\\\\\n  VM.require(\\\\\\\\\\\\\\\"devhub.near/widget/devhub.entity.addon.blog.Card\\\\\\\\\\\\\\\") ||\\\\\\\\n  (() => <></>);\\\\\\\\n\\\\\\\\nconst { href } = VM.require(\\\\\\\\\\\\\\\"devhub.near/widget/core.lib.url\\\\\\\\\\\\\\\") || (() => {});\\\\\\\\n\\\\\\\\nconst { includeLabels, excludeLabels, layout, handle, hideTitle } = props;\\\\\\\\n\\\\\\\\nconst Grid = styled.div`\\\\\\\\n  display: grid;\\\\\\\\n  grid-template-columns: repeat(3, minmax(0, 1fr));\\\\\\\\n  gap: 1rem;\\\\\\\\n\\\\\\\\n  @media screen and (max-width: 768px) {\\\\\\\\n    display: flex;\\\\\\\\n    flex-direction: column;\\\\\\\\n    gap: 1rem;\\\\\\\\n  }\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst Heading = styled.h3`\\\\\\\\n  color: #151515;\\\\\\\\n  font-size: 2rem;\\\\\\\\n  font-style: normal;\\\\\\\\n  font-weight: 700;\\\\\\\\n  line-height: 120%; /* 48px */\\\\\\\\n  margin-bottom: 2rem;\\\\\\\\n\\\\\\\\n  @media screen and (max-width: 768px) {\\\\\\\\n    font-size: 1.5rem;\\\\\\\\n  }\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst CardContainer = styled.div`\\\\\\\\n  transition: all 300ms;\\\\\\\\n  border-radius: 1rem;\\\\\\\\n\\\\\\\\n  &:hover {\\\\\\\\n    box-shadow: 0 10px 15px -3px rgb(0 0 0 / 0.1),\\\\\\\\n      0 4px 6px -4px rgb(0 0 0 / 0.1);\\\\\\\\n  }\\\\\\\\n`;\\\\\\\\n\\\\\\\\nfunction BlogCard(postId) {\\\\\\\\n  return (\\\\\\\\n    <Link\\\\\\\\n      style={{ textDecoration: \\\\\\\\\\\\\\\"none\\\\\\\\\\\\\\\" }}\\\\\\\\n      to={href({\\\\\\\\n        widgetSrc: \\\\\\\\\\\\\\\"devhub.near/widget/app\\\\\\\\\\\\\\\",\\\\\\\\n        params: { page: \\\\\\\\\\\\\\\"blog\\\\\\\\\\\\\\\", id: postId },\\\\\\\\n      })}\\\\\\\\n    >\\\\\\\\n      <CardContainer>\\\\\\\\n        <Widget // We need this so the individual posts can make the necessary call for more data\\\\\\\\n          src=\\\\\\\\\\\\\\\"devhub.near/widget/devhub.entity.post.Postv2\\\\\\\\\\\\\\\"\\\\\\\\n          props={{ postKey: postId, template: (p) => <Card {...(p || {})} /> }} // I wonder if this could take list of types, their templates, normalizer functions, etc... and have this all as a module\\\\\\\\n        />\\\\\\\\n        {/* // so then you could swap between devhub contract or social contract sources, it doesn\\\\\\\\\\\\'t matter. */}\\\\\\\\n      </CardContainer>\\\\\\\\n    </Link>\\\\\\\\n  );\\\\\\\\n}\\\\\\\\n\\\\\\\\nreturn (\\\\\\\\n  <div class=\\\\\\\\\\\\\\\"w-100\\\\\\\\\\\\\\\">\\\\\\\\n    {!hideTitle && <Heading>Latest Blog Posts</Heading>}\\\\\\\\n    <Widget\\\\\\\\n      src={\\\\\\\\\\\\\\\"devhub.near/widget/devhub.entity.addon.blog.Feed\\\\\\\\\\\\\\\"}\\\\\\\\n      // TODO: This needs to filter by more labels\\\\\\\\n      props={{\\\\\\\\n        includeLabels: [\\\\\\\\\\\\\\\"blog\\\\\\\\\\\\\\\", handle, ...(includeLabels || [])], // make sure this has the community handle\\\\\\\\n        excludeLabels: excludeLabels || [],\\\\\\\\n        renderItem: BlogCard,\\\\\\\\n        Layout: ({ children }) => <Grid>{children}</Grid>,\\\\\\\\n      }}\\\\\\\\n    />\\\\\\\\n  </div>\\\\\\\\n);\\\\\\\\n\"}, \"devhub.entity.addon.wiki.Viewer\": {\"\": \"const { content, title, subtitle, textAlign } = props;\\\\\\\\n\\\\\\\\nconst Container = styled.div`\\\\\\\\n  display: flex;\\\\\\\\n  flex-direction: column;\\\\\\\\n  width: 100%;\\\\\\\\n\\\\\\\\n  padding: 0 3rem;\\\\\\\\n\\\\\\\\n  margin: 0 auto;\\\\\\\\n  text-align: ${(p) => p.textAlign ?? \\\\\\\\\\\\\\\"left\\\\\\\\\\\\\\\"};\\\\\\\\n\\\\\\\\n  h1 {\\\\\\\\n    color: #151515;\\\\\\\\n    font-size: 3.5rem;\\\\\\\\n    font-style: normal;\\\\\\\\n    font-weight: 700;\\\\\\\\n    line-height: 100%; /* 88px */\\\\\\\\n    margin: 1rem 0;\\\\\\\\n  }\\\\\\\\n\\\\\\\\n  p.subtitle {\\\\\\\\n    color: #555;\\\\\\\\n    font-size: 1.5rem;\\\\\\\\n    font-style: normal;\\\\\\\\n    font-weight: 400;\\\\\\\\n    line-height: 110%; /* 35.2px */\\\\\\\\n    margin: 0;\\\\\\\\n  }\\\\\\\\n\\\\\\\\n  @media screen and (max-width: 768px) {\\\\\\\\n    padding: 0 1rem;\\\\\\\\n\\\\\\\\n    span.category {\\\\\\\\n      font-size: 0.75rem;\\\\\\\\n    }\\\\\\\\n\\\\\\\\n    h1 {\\\\\\\\n      font-size: 2rem;\\\\\\\\n    }\\\\\\\\n\\\\\\\\n    p.subtitle {\\\\\\\\n      font-size: 1rem;\\\\\\\\n    }\\\\\\\\n  }\\\\\\\\n\\\\\\\\n  a {\\\\\\\\n    color: #0000ee;\\\\\\\\n  }\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst Content = styled.div`\\\\\\\\n  margin: 20px 0;\\\\\\\\n  text-align: left;\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst Title = styled.h1`\\\\\\\\n  margin-bottom: 10px;\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst Subtitle = styled.p`\\\\\\\\n  margin-bottom: 20px;\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst CenteredMessage = styled.div`\\\\\\\\n  display: flex;\\\\\\\\n  flex-direction: column;\\\\\\\\n  justify-content: center;\\\\\\\\n  align-items: center;\\\\\\\\n  width: 100%;\\\\\\\\n  height: ${(p) => p.height ?? \\\\\\\\\\\\\\\"100%\\\\\\\\\\\\\\\"};\\\\\\\\n`;\\\\\\\\n\\\\\\\\nif (!content) {\\\\\\\\n  return (\\\\\\\\n    <CenteredMessage height={\\\\\\\\\\\\\\\"384px\\\\\\\\\\\\\\\"}>\\\\\\\\n      <h2>No Wiki Configured</h2>\\\\\\\\n    </CenteredMessage>\\\\\\\\n  );\\\\\\\\n} else {\\\\\\\\n  return (\\\\\\\\n    <Container textAlign={textAlign}>\\\\\\\\n      <h1>{title}</h1>\\\\\\\\n      <p className=\\\\\\\\\\\\\\\"subtitle\\\\\\\\\\\\\\\">{subtitle}</p>\\\\\\\\n      <Content>\\\\\\\\n        <Widget\\\\\\\\n          src={\\\\\\\\n            \\\\\\\\\\\\\\\"devhub.near/widget/devhub.components.molecule.MarkdownViewer\\\\\\\\\\\\\\\"\\\\\\\\n          }\\\\\\\\n          props={{ text: content }}\\\\\\\\n        />\\\\\\\\n      </Content>\\\\\\\\n    </Container>\\\\\\\\n  );\\\\\\\\n}\\\\\\\\n\"}, \"devhub.entity.community.Sidebar\": {\"\": \"const { href } = VM.require(\\\\\\\\\\\\\\\"devhub.near/widget/core.lib.url\\\\\\\\\\\\\\\");\\\\\\\\n\\\\\\\\nif (!href) {\\\\\\\\n  return <p>Loading modules...</p>;\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst { community } = props;\\\\\\\\n\\\\\\\\nconst CommunitySummary = () => {\\\\\\\\n  return (\\\\\\\\n    <>\\\\\\\\n      <Widget\\\\\\\\n        src={\\\\\\\\\\\\\\\"devhub.near/widget/devhub.components.molecule.MarkdownViewer\\\\\\\\\\\\\\\"}\\\\\\\\n        props={{\\\\\\\\n          text: community.bio_markdown,\\\\\\\\n        }}\\\\\\\\n      />\\\\\\\\n      <small class=\\\\\\\\\\\\\\\"text-muted mb-3\\\\\\\\\\\\\\\">\\\\\\\\n        <Link\\\\\\\\n          to={href({\\\\\\\\n            widgetSrc: \\\\\\\\\\\\\\\"devhub.near/widget/app\\\\\\\\\\\\\\\",\\\\\\\\n            params: { page: \\\\\\\\\\\\\\\"feed\\\\\\\\\\\\\\\", tag: community.tag },\\\\\\\\n          })}\\\\\\\\n        >\\\\\\\\n          <Widget\\\\\\\\n            src={\\\\\\\\\\\\\\\"devhub.near/widget/devhub.components.atom.Tag\\\\\\\\\\\\\\\"}\\\\\\\\n            props={{ tag: community.tag }}\\\\\\\\n          />\\\\\\\\n        </Link>\\\\\\\\n      </small>\\\\\\\\n    </>\\\\\\\\n  );\\\\\\\\n};\\\\\\\\n\\\\\\\\nreturn community === null ? (\\\\\\\\n  <div>Loading...</div>\\\\\\\\n) : (\\\\\\\\n  <div class=\\\\\\\\\\\\\\\"d-flex flex-column align-items-end\\\\\\\\\\\\\\\">\\\\\\\\n    <Widget\\\\\\\\n      src={\\\\\\\\\\\\\\\"devhub.near/widget/devhub.entity.community.Tile\\\\\\\\\\\\\\\"}\\\\\\\\n      props={{\\\\\\\\n        fullWidth: true,\\\\\\\\n        minHeight: 0,\\\\\\\\n        noBorder: true,\\\\\\\\n        children: <CommunitySummary />,\\\\\\\\n        style: { marginTop: \\\\\\\\\\\\\\\"0.5rem\\\\\\\\\\\\\\\" },\\\\\\\\n      }}\\\\\\\\n    />\\\\\\\\n\\\\\\\\n    <Widget\\\\\\\\n      // TODO: LEGACY.\\\\\\\\n      src={\\\\\\\\\\\\\\\"devhub.near/widget/devhub.entity.community.Tile\\\\\\\\\\\\\\\"}\\\\\\\\n      props={{\\\\\\\\n        heading: \\\\\\\\\\\\\\\"Admins\\\\\\\\\\\\\\\",\\\\\\\\n\\\\\\\\n        children: (community?.admins ?? []).map((accountId) => (\\\\\\\\n          <div key={accountId} className=\\\\\\\\\\\\\\\"d-flex\\\\\\\\\\\\\\\" style={{ fontWeight: 500 }}>\\\\\\\\n            <Widget\\\\\\\\n              // TODO: LEGACY.\\\\\\\\n              src={\\\\\\\\n                \\\\\\\\\\\\\\\"devhub.near/widget/gigs-board.components.molecule.profile-card\\\\\\\\\\\\\\\"\\\\\\\\n              }\\\\\\\\n              props={{ accountId }}\\\\\\\\n            />\\\\\\\\n          </div>\\\\\\\\n        )),\\\\\\\\n\\\\\\\\n        fullWidth: true,\\\\\\\\n        minHeight: 0,\\\\\\\\n        noBorder: true,\\\\\\\\n      }}\\\\\\\\n    />\\\\\\\\n  </div>\\\\\\\\n);\\\\\\\\n\"}, \"devhub.entity.community.Spawner\": {\"\": \"const { typeMatch } = VM.require(\\\\\\\\\\\\\\\"devhub.near/widget/core.lib.struct\\\\\\\\\\\\\\\");\\\\\\\\n\\\\\\\\nif (!typeMatch) {\\\\\\\\n  return <p>Loading modules...</p>;\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst { data, onSubmit, onCancel } = props;\\\\\\\\n\\\\\\\\nconst CommunityInputsPartialSchema = {\\\\\\\\n  handle: {\\\\\\\\n    inputProps: {\\\\\\\\n      min: 2,\\\\\\\\n      max: 40,\\\\\\\\n\\\\\\\\n      placeholder:\\\\\\\\n        \\\\\\\\\\\\\\\"Choose unique URL handle for your community. Example: zero-knowledge.\\\\\\\\\\\\\\\",\\\\\\\\n\\\\\\\\n      required: true,\\\\\\\\n    },\\\\\\\\n\\\\\\\\n    label: \\\\\\\\\\\\\\\"URL handle\\\\\\\\\\\\\\\",\\\\\\\\n    order: 3,\\\\\\\\n  },\\\\\\\\n\\\\\\\\n  name: {\\\\\\\\n    inputProps: {\\\\\\\\n      min: 2,\\\\\\\\n      max: 30,\\\\\\\\n      placeholder: \\\\\\\\\\\\\\\"Community name.\\\\\\\\\\\\\\\",\\\\\\\\n      required: true,\\\\\\\\n    },\\\\\\\\n\\\\\\\\n    label: \\\\\\\\\\\\\\\"Name\\\\\\\\\\\\\\\",\\\\\\\\n    order: 1,\\\\\\\\n  },\\\\\\\\n\\\\\\\\n  tag: {\\\\\\\\n    inputProps: {\\\\\\\\n      min: 2,\\\\\\\\n      max: 30,\\\\\\\\n\\\\\\\\n      placeholder:\\\\\\\\n        \\\\\\\\\\\\\\\"Any posts with this tag will show up in your community feed.\\\\\\\\\\\\\\\",\\\\\\\\n\\\\\\\\n      required: true,\\\\\\\\n    },\\\\\\\\n\\\\\\\\n    label: \\\\\\\\\\\\\\\"Tag\\\\\\\\\\\\\\\",\\\\\\\\n    order: 4,\\\\\\\\n  },\\\\\\\\n\\\\\\\\n  description: {\\\\\\\\n    inputProps: {\\\\\\\\n      min: 2,\\\\\\\\n      max: 60,\\\\\\\\n\\\\\\\\n      placeholder:\\\\\\\\n        \\\\\\\\\\\\\\\"Describe your community in one short sentence that will appear in the communities discovery page.\\\\\\\\\\\\\\\",\\\\\\\\n\\\\\\\\n      required: true,\\\\\\\\n    },\\\\\\\\n\\\\\\\\n    label: \\\\\\\\\\\\\\\"Description\\\\\\\\\\\\\\\",\\\\\\\\n    order: 2,\\\\\\\\n  },\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst communityInputsValidator = (formValues) =>\\\\\\\\n  typeMatch(formValues) &&\\\\\\\\n  Object.values(formValues).every(\\\\\\\\n    (value) => typeof value === \\\\\\\\\\\\\\\"string\\\\\\\\\\\\\\\" && value.length > 0\\\\\\\\n  );\\\\\\\\n\\\\\\\\nconst CommunityInputsDefaults = {\\\\\\\\n  handle: \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\",\\\\\\\\n  name: \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\",\\\\\\\\n  tag: \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\",\\\\\\\\n  description: \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\",\\\\\\\\n};\\\\\\\\n\\\\\\\\nreturn (\\\\\\\\n  <Widget\\\\\\\\n    src={\\\\\\\\\\\\\\\"devhub.near/widget/gigs-board.components.organism.configurator\\\\\\\\\\\\\\\"}\\\\\\\\n    props={{\\\\\\\\n      heading: \\\\\\\\\\\\\\\"Community information\\\\\\\\\\\\\\\",\\\\\\\\n      externalState: CommunityInputsDefaults,\\\\\\\\n      fullWidth: true,\\\\\\\\n      isActive: true,\\\\\\\\n      isUnlocked: true,\\\\\\\\n      isValid: communityInputsValidator,\\\\\\\\n      onSubmit: onSubmit,\\\\\\\\n      schema: CommunityInputsPartialSchema,\\\\\\\\n      submitIcon: {\\\\\\\\n        type: \\\\\\\\\\\\\\\"bootstrap_icon\\\\\\\\\\\\\\\",\\\\\\\\n        variant: \\\\\\\\\\\\\\\"bi-rocket-takeoff-fill\\\\\\\\\\\\\\\",\\\\\\\\n      },\\\\\\\\n      submitLabel: \\\\\\\\\\\\\\\"Launch\\\\\\\\\\\\\\\",\\\\\\\\n      onCancel: onCancel,\\\\\\\\n      nearDevGovGigsWidgetsAccountId: \\\\\\\\\\\\\\\"devhub.near\\\\\\\\\\\\\\\",\\\\\\\\n    }}\\\\\\\\n  />\\\\\\\\n);\\\\\\\\n\"}, \"devhub.components.island.connect\": {\"\": \"const [startIndex, setStartIndex] = useState(0);\\\\\\\\nconst [endIndex, setEndIndex] = useState(2);\\\\\\\\n\\\\\\\\nconst DescriptionHeader = styled.h2`\\\\\\\\n  color: #f4f4f4;\\\\\\\\n  font-size: 1.75rem;\\\\\\\\n  font-style: normal;\\\\\\\\n  font-weight: 700;\\\\\\\\n  line-height: 120%; /* 43.2px */\\\\\\\\n\\\\\\\\n  @media screen and (max-width: 786px) {\\\\\\\\n    font-size: 1.5rem;\\\\\\\\n  }\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst Description = styled.p`\\\\\\\\n  color: #f4f4f4;\\\\\\\\n  text-shadow: 0px 4px 4px rgba(0, 0, 0, 0.25);\\\\\\\\n  font-size: 1.25rem;\\\\\\\\n  font-style: normal;\\\\\\\\n  font-weight: 400;\\\\\\\\n  line-height: 120%; /* 28.8px */\\\\\\\\n\\\\\\\\n  @media screen and (max-width: 786px) {\\\\\\\\n    font-size: 1rem;\\\\\\\\n  }\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst imageSource =\\\\\\\\n  \\\\\\\\\\\\\\\"https://ipfs.near.social/ipfs/bafkreic7wxhocbnxoo63uh6n2ur3otykbzouymobt3ebgd2b4dmdiu3764\\\\\\\\\\\\\\\";\\\\\\\\n\\\\\\\\nconst CardBody = styled.div`\\\\\\\\n  border-radius: 1rem;\\\\\\\\n  border: 1px solid #00ec97;\\\\\\\\n  background: #3f4040;\\\\\\\\n\\\\\\\\n  display: flex;\\\\\\\\n  max-width: 31.5%;\\\\\\\\n  height: 12rem;\\\\\\\\n  padding: 1.5rem;\\\\\\\\n  flex-direction: column;\\\\\\\\n  justify-content: center;\\\\\\\\n  align-items: flex-start;\\\\\\\\n  gap: 0.5rem;\\\\\\\\n  flex-shrink: 0;\\\\\\\\n  align-self: stretch;\\\\\\\\n\\\\\\\\n  h3 {\\\\\\\\n    color: #00ec97;\\\\\\\\n    font-size: 1.5rem;\\\\\\\\n    font-style: normal;\\\\\\\\n    font-weight: 700;\\\\\\\\n    line-height: 100%; /* 40px */\\\\\\\\n  }\\\\\\\\n\\\\\\\\n  p {\\\\\\\\n    color: #818181;\\\\\\\\n    font-size: 1.125rem;\\\\\\\\n    font-style: normal;\\\\\\\\n    font-weight: 400;\\\\\\\\n    line-height: 120%; /* 28.8px */\\\\\\\\n  }\\\\\\\\n\\\\\\\\n  a {\\\\\\\\n    color: #00ec97;\\\\\\\\n    font-size: 1.25rem;\\\\\\\\n    font-style: normal;\\\\\\\\n    font-weight: 700;\\\\\\\\n    line-height: 120%; /* 28.8px */\\\\\\\\n\\\\\\\\n    &:hover {\\\\\\\\n      text-decoration: none;\\\\\\\\n    }\\\\\\\\n  }\\\\\\\\n\\\\\\\\n  @media screen and (max-width: 768px) {\\\\\\\\n    max-width: 80%;\\\\\\\\n  }\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst Card = ({ title, description, href }) => {\\\\\\\\n  return (\\\\\\\\n    <CardBody>\\\\\\\\n      <h3>{title}</h3>\\\\\\\\n      <p>{description}</p>\\\\\\\\n      <a href={href}>Learn more \\\\\\\\u{2192}</a>\\\\\\\\n    </CardBody>\\\\\\\\n  );\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst Cards = [\\\\\\\\n  {\\\\\\\\n    title: \\\\\\\\\\\\\\\"Devhub Hacks\\\\\\\\\\\\\\\",\\\\\\\\n    description: \\\\\\\\\\\\\\\"Host and support developer focused events around the globe.\\\\\\\\\\\\\\\",\\\\\\\\n    href: \\\\\\\\\\\\\\\"/devhub.near/widget/app?page=community&handle=hacks\\\\\\\\\\\\\\\",\\\\\\\\n  },\\\\\\\\n  {\\\\\\\\n    title: \\\\\\\\\\\\\\\"NEAR Platform Fellowship\\\\\\\\\\\\\\\",\\\\\\\\n    description: \\\\\\\\\\\\\\\"Improve the NEAR dev experience with guidance & funding.\\\\\\\\\\\\\\\",\\\\\\\\n    href: \\\\\\\\\\\\\\\"/devhub.near/widget/app?page=community&handle=fellowship\\\\\\\\\\\\\\\",\\\\\\\\n  },\\\\\\\\n  {\\\\\\\\n    title: \\\\\\\\\\\\\\\"Protocol\\\\\\\\\\\\\\\",\\\\\\\\n    description: \\\\\\\\\\\\\\\"Support the ongoing innovation of the NEAR protocol.\\\\\\\\\\\\\\\",\\\\\\\\n    href: \\\\\\\\\\\\\\\"/devhub.near/widget/app?page=community&handle=protocol\\\\\\\\\\\\\\\",\\\\\\\\n  },\\\\\\\\n  {\\\\\\\\n    title: \\\\\\\\\\\\\\\"Zero Knowledge\\\\\\\\\\\\\\\",\\\\\\\\n    description: \\\\\\\\\\\\\\\"Build a Zero Knowledge ecosystem on NEAR.\\\\\\\\\\\\\\\",\\\\\\\\n    href: \\\\\\\\\\\\\\\"/devhub.near/widget/app?page=community&handle=zero-knowledge\\\\\\\\\\\\\\\",\\\\\\\\n  },\\\\\\\\n  {\\\\\\\\n    title: \\\\\\\\\\\\\\\"Contract Standards\\\\\\\\\\\\\\\",\\\\\\\\n    description: \\\\\\\\\\\\\\\"Coordinate the contribution to the NEAR dapp standards.\\\\\\\\\\\\\\\",\\\\\\\\n    href: \\\\\\\\\\\\\\\"/devhub.near/widget/app?page=community&handle=contract-standards\\\\\\\\\\\\\\\",\\\\\\\\n  },\\\\\\\\n];\\\\\\\\n\\\\\\\\nconst ForwardButton = styled.button`\\\\\\\\n  all: unset;\\\\\\\\n  position: absolute;\\\\\\\\n  right: 0;\\\\\\\\n\\\\\\\\n  margin: 1rem;\\\\\\\\n\\\\\\\\n  &:hover,\\\\\\\\n  &:active {\\\\\\\\n    border: none;\\\\\\\\n    outline: none;\\\\\\\\n  }\\\\\\\\n\\\\\\\\n  ${endIndex >= Cards.length - 1 && \\\\\\\\\\\\\\\"svg {transform: rotate(180deg);}\\\\\\\\\\\\\\\"}\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst handleForward = () => {\\\\\\\\n  if (endIndex <= Cards.length - 1) {\\\\\\\\n    setStartIndex(endIndex + 1);\\\\\\\\n    setEndIndex(endIndex + 3);\\\\\\\\n  } else {\\\\\\\\n    setStartIndex(0);\\\\\\\\n    setEndIndex(2);\\\\\\\\n  }\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst CTA = styled.a`\\\\\\\\n  color: #00ec97 !important;\\\\\\\\n  font-size: 1.5rem;\\\\\\\\n  font-style: normal;\\\\\\\\n  font-weight: 700;\\\\\\\\n  line-height: 120%; /* 28.8px */\\\\\\\\n\\\\\\\\n  @media screen and (max-width: 768px) {\\\\\\\\n    font-size: 1.25rem;\\\\\\\\n  }\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst Subheading = styled.h3`\\\\\\\\n  color: #8a8e93;\\\\\\\\n  font-size: 2.25rem;\\\\\\\\n  font-style: normal;\\\\\\\\n  font-weight: 700;\\\\\\\\n  line-height: 120%; /* 43.2px */\\\\\\\\n\\\\\\\\n  padding: 3rem;\\\\\\\\n  padding-top: 0;\\\\\\\\n\\\\\\\\n  @media screen and (max-width: 786px) {\\\\\\\\n    padding: 1rem;\\\\\\\\n    padding-top: 0;\\\\\\\\n    font-size: 1.5rem;\\\\\\\\n  }\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst Container = styled.div`\\\\\\\\n  width: 100%;\\\\\\\\n  display: flex;\\\\\\\\n  position: relative;\\\\\\\\n  align-items: center;\\\\\\\\n\\\\\\\\n  @media screen and (max-width: 768px) {\\\\\\\\n    flex-direction: column;\\\\\\\\n  }\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst DescriptionContainer = styled.div`\\\\\\\\n  padding: 3rem;\\\\\\\\n  width: 55%;\\\\\\\\n\\\\\\\\n  @media screen and (max-width: 768px) {\\\\\\\\n    padding: 1rem;\\\\\\\\n    width: 100%;\\\\\\\\n  }\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst ImageContainer = styled.div`\\\\\\\\n  position: absolute;\\\\\\\\n  top: 25%;\\\\\\\\n  right: 0;\\\\\\\\n\\\\\\\\n  width: 50%;\\\\\\\\n  height: 65%;\\\\\\\\n\\\\\\\\n  @media screen and (max-width: 768px) {\\\\\\\\n    position: relative;\\\\\\\\n    padding: 0 1rem;\\\\\\\\n\\\\\\\\n    height: 225px;\\\\\\\\n    width: 100%;\\\\\\\\n  }\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst Image = styled.img`\\\\\\\\n  width: 100%;\\\\\\\\n  height: 90%;\\\\\\\\n  object-fit: cover;\\\\\\\\n  clip-path: polygon(15% 0, 100% 0%, 100% 100%, 0% 100%);\\\\\\\\n\\\\\\\\n  @media screen and (max-width: 768px) {\\\\\\\\n    clip-path: none;\\\\\\\\n  }\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst CardsContainer = styled.div`\\\\\\\\n  padding: 3rem;\\\\\\\\n  padding-top: 0;\\\\\\\\n\\\\\\\\n  position: relative;\\\\\\\\n  display: flex;\\\\\\\\n  flex-direction: row;\\\\\\\\n  gap: 1rem;\\\\\\\\n  width: 100%;\\\\\\\\n  align-items: center;\\\\\\\\n\\\\\\\\n  @media screen and (max-width: 768px) {\\\\\\\\n    display: none;\\\\\\\\n  }\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst ArrowIcon = () => {\\\\\\\\n  return (\\\\\\\\n    <svg\\\\\\\\n      xmlns=\\\\\\\\\\\\\\\"http://www.w3.org/2000/svg\\\\\\\\\\\\\\\"\\\\\\\\n      width=\\\\\\\\\\\\\\\"48\\\\\\\\\\\\\\\"\\\\\\\\n      height=\\\\\\\\\\\\\\\"49\\\\\\\\\\\\\\\"\\\\\\\\n      viewBox=\\\\\\\\\\\\\\\"0 0 48 49\\\\\\\\\\\\\\\"\\\\\\\\n      fill=\\\\\\\\\\\\\\\"none\\\\\\\\\\\\\\\"\\\\\\\\n    >\\\\\\\\n      <path\\\\\\\\n        fill-rule=\\\\\\\\\\\\\\\"evenodd\\\\\\\\\\\\\\\"\\\\\\\\n        clip-rule=\\\\\\\\\\\\\\\"evenodd\\\\\\\\\\\\\\\"\\\\\\\\n        d=\\\\\\\\\\\\\\\"M32.9999 24.5L17.9999 39.5L15.8999 37.4L28.7999 24.5L15.8999 11.6L17.9999 9.5L32.9999 24.5Z\\\\\\\\\\\\\\\"\\\\\\\\n        fill=\\\\\\\\\\\\\\\"#00EC97\\\\\\\\\\\\\\\"\\\\\\\\n      />\\\\\\\\n    </svg>\\\\\\\\n  );\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst CTAContainer = styled.div`\\\\\\\\n  padding: 3rem;\\\\\\\\n  padding-top: 0;\\\\\\\\n\\\\\\\\n  @media screen and (max-width: 786px) {\\\\\\\\n    padding: 1rem;\\\\\\\\n    padding-top: 0;\\\\\\\\n  }\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst MobileCards = styled.div`\\\\\\\\n  display: none;\\\\\\\\n\\\\\\\\n  @media screen and (max-width: 768px) {\\\\\\\\n    display: flex;\\\\\\\\n    padding: 1rem;\\\\\\\\n    flex-direction: row;\\\\\\\\n    overflow-x: auto;\\\\\\\\n    gap: 1rem;\\\\\\\\n  }\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst Content = (\\\\\\\\n  <>\\\\\\\\n    <Container>\\\\\\\\n      <DescriptionContainer>\\\\\\\\n        <DescriptionHeader>\\\\\\\\n          Communities are the lifeblood of /dev/hub\\\\\\\\n        </DescriptionHeader>\\\\\\\\n        <Description>\\\\\\\\n          We believe that communities are the foundation of a decentralized\\\\\\\\n          ecosystem. Explore and engage with our diverse range of communities\\\\\\\\n          today.\\\\\\\\n        </Description>\\\\\\\\n      </DescriptionContainer>\\\\\\\\n      <ImageContainer>\\\\\\\\n        <Image src={imageSource} />\\\\\\\\n      </ImageContainer>\\\\\\\\n    </Container>\\\\\\\\n    <Subheading>Featured Communities</Subheading>\\\\\\\\n    <CardsContainer>\\\\\\\\n      {Cards.slice(startIndex, endIndex + 1).map((card, idx) => (\\\\\\\\n        <Card\\\\\\\\n          title={card.title}\\\\\\\\n          description={card.description}\\\\\\\\n          href={card.href}\\\\\\\\n          key={`project-card-${idx}`}\\\\\\\\n        />\\\\\\\\n      ))}\\\\\\\\n      <ForwardButton onClick={handleForward}>\\\\\\\\n        <ArrowIcon />\\\\\\\\n      </ForwardButton>\\\\\\\\n    </CardsContainer>\\\\\\\\n    <MobileCards>\\\\\\\\n      {Cards.map((card, idx) => (\\\\\\\\n        <Card\\\\\\\\n          title={card.title}\\\\\\\\n          description={card.description}\\\\\\\\n          href={card.href}\\\\\\\\n          key={`mobile-card-${idx}`}\\\\\\\\n        />\\\\\\\\n      ))}\\\\\\\\n    </MobileCards>\\\\\\\\n    <CTAContainer>\\\\\\\\n      <CTA href=\\\\\\\\\\\\\\\"/devhub.near/widget/app?page=communities\\\\\\\\\\\\\\\">\\\\\\\\n        Explore all communities \\\\\\\\u{2192}\\\\\\\\n      </CTA>\\\\\\\\n    </CTAContainer>\\\\\\\\n  </>\\\\\\\\n);\\\\\\\\n\\\\\\\\nreturn (\\\\\\\\n  <Widget\\\\\\\\n    src=\\\\\\\\\\\\\\\"devhub.near/widget/devhub.components.island.home-section\\\\\\\\\\\\\\\"\\\\\\\\n    props={{\\\\\\\\n      title: \\\\\\\\\\\\\\\"/connect\\\\\\\\\\\\\\\",\\\\\\\\n      children: Content,\\\\\\\\n      background: true,\\\\\\\\n    }}\\\\\\\\n  />\\\\\\\\n);\\\\\\\\n\"}, \"devhub.components.island.explore\": {\"\": \"const Card = styled.div`\\\\\\\\n  display: flex;\\\\\\\\n  max-width: 20rem;\\\\\\\\n  max-height: 17.5rem;\\\\\\\\n  padding: 1.5rem;\\\\\\\\n  flex-direction: column;\\\\\\\\n  justify-content: space-between;\\\\\\\\n  align-items: center;\\\\\\\\n\\\\\\\\n  background: #fff;\\\\\\\\n  border-radius: 1rem;\\\\\\\\n\\\\\\\\n  h3 {\\\\\\\\n    color: #04a46e; //#00ec97;\\\\\\\\n    text-align: center;\\\\\\\\n    font-size: 1.5rem;\\\\\\\\n    font-style: normal;\\\\\\\\n    font-weight: 700;\\\\\\\\n    line-height: 120%; /* 28.8px */\\\\\\\\n  }\\\\\\\\n\\\\\\\\n  p {\\\\\\\\n    color: #555;\\\\\\\\n    text-align: center;\\\\\\\\n    font-size: 1rem;\\\\\\\\n    font-style: normal;\\\\\\\\n    font-weight: 400;\\\\\\\\n    line-height: 120%; /* 24px */\\\\\\\\n  }\\\\\\\\n\\\\\\\\n  a {\\\\\\\\n    color: #04a46e; //#00ec97;\\\\\\\\n    text-align: center;\\\\\\\\n    font-size: 1.25rem;\\\\\\\\n    font-style: normal;\\\\\\\\n    font-weight: 700;\\\\\\\\n    line-height: 120%; /* 24px */\\\\\\\\n  }\\\\\\\\n\\\\\\\\n  @media screen and (max-width: 768px) {\\\\\\\\n    h3 {\\\\\\\\n      font-size: 1.5rem;\\\\\\\\n    }\\\\\\\\n\\\\\\\\n    p,\\\\\\\\n    a {\\\\\\\\n      font-size: 1rem;\\\\\\\\n    }\\\\\\\\n\\\\\\\\n    padding: 1rem;\\\\\\\\n  }\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst SectionCard = ({ title, description, href }) => {\\\\\\\\n  return (\\\\\\\\n    <Card>\\\\\\\\n      <h3>{title}</h3>\\\\\\\\n      <p>{description}</p>\\\\\\\\n      <a href={href}>Learn more \\\\\\\\u{2192}</a>\\\\\\\\n    </Card>\\\\\\\\n  );\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst Cards = [\\\\\\\\n  {\\\\\\\\n    title: \\\\\\\\\\\\\\\"217 Validators\\\\\\\\\\\\\\\",\\\\\\\\n    description:\\\\\\\\n      \\\\\\\\\\\\\\\"to ensure security, liveness, and fault tolerance of the network\\\\\\\\\\\\\\\",\\\\\\\\n    href: \\\\\\\\\\\\\\\"https://nearscope.net/\\\\\\\\\\\\\\\",\\\\\\\\n  },\\\\\\\\n  {\\\\\\\\n    title: \\\\\\\\\\\\\\\"<1s, <1\\\\\\\\u{a2}\\\\\\\\\\\\\\\",\\\\\\\\n    description:\\\\\\\\n      \\\\\\\\\\\\\\\"Fast and cost-efficient transactions. 1s to update values with minimal fees\\\\\\\\\\\\\\\",\\\\\\\\n    href: \\\\\\\\\\\\\\\"https://nearblocks.io/\\\\\\\\\\\\\\\",\\\\\\\\n  },\\\\\\\\n  {\\\\\\\\n    title: \\\\\\\\\\\\\\\"Awesome DevEx\\\\\\\\\\\\\\\",\\\\\\\\n    description:\\\\\\\\n      \\\\\\\\\\\\\\\"NEAR lets developers innovate with familiar tools: TypeScript, Rust, Solidity\\\\\\\\\\\\\\\",\\\\\\\\n    href: \\\\\\\\\\\\\\\"https://docs.near.org/\\\\\\\\\\\\\\\",\\\\\\\\n  },\\\\\\\\n  {\\\\\\\\n    title: \\\\\\\\\\\\\\\"Horizontal Scaling\\\\\\\\\\\\\\\",\\\\\\\\n    description:\\\\\\\\n      \\\\\\\\\\\\\\\"Nightshade ensures maximum performance thanks to its sharded design\\\\\\\\\\\\\\\",\\\\\\\\n    href: \\\\\\\\\\\\\\\"https://docs.near.org/concepts/advanced/papers\\\\\\\\\\\\\\\",\\\\\\\\n  },\\\\\\\\n];\\\\\\\\n\\\\\\\\nconst CTA = styled.a`\\\\\\\\n  display: flex;\\\\\\\\n  padding: 0.875rem 1rem;\\\\\\\\n  align-items: center;\\\\\\\\n  gap: 0.5rem;\\\\\\\\n\\\\\\\\n  border-radius: 1rem;\\\\\\\\n  background: #00ec97;\\\\\\\\n\\\\\\\\n  color: #f4f4f4 !important;\\\\\\\\n  font-size: 1.5rem;\\\\\\\\n  font-style: normal;\\\\\\\\n  font-weight: 700;\\\\\\\\n  line-height: 120%; /* 28.8px */\\\\\\\\n  letter-spacing: -0.03rem;\\\\\\\\n\\\\\\\\n  width: max-content;\\\\\\\\n  text-decoration: none;\\\\\\\\n\\\\\\\\n  &:hover {\\\\\\\\n    text-decoration: none;\\\\\\\\n    background: #04a46e;\\\\\\\\n  }\\\\\\\\n\\\\\\\\n  @media screen and (max-width: 768px) {\\\\\\\\n    color: #f4f4f4 !important;\\\\\\\\n    font-size: 1.125rem;\\\\\\\\n    font-style: normal;\\\\\\\\n    font-weight: 700;\\\\\\\\n    line-height: 120%; /* 24px */\\\\\\\\n    letter-spacing: -0.4px;\\\\\\\\n\\\\\\\\n    margin-left: auto;\\\\\\\\n    margin-right: auto;\\\\\\\\n\\\\\\\\n    display: flex;\\\\\\\\n    padding: 14px 16px;\\\\\\\\n    flex-direction: column;\\\\\\\\n    justify-content: center;\\\\\\\\n    align-items: flex-start;\\\\\\\\n    gap: 8px;\\\\\\\\n\\\\\\\\n    border-radius: 16px;\\\\\\\\n    background: #00ec97;\\\\\\\\n  }\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst Container = styled.div`\\\\\\\\n  display: flex;\\\\\\\\n  flex-direction: column;\\\\\\\\n  gap: 3rem;\\\\\\\\n\\\\\\\\n  padding: 3rem;\\\\\\\\n  padding-top: 0;\\\\\\\\n\\\\\\\\n  @media screen and (max-width: 768px) {\\\\\\\\n    padding: 1.5rem;\\\\\\\\n    padding-top: 0;\\\\\\\\n  }\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst CardsContainer = styled.div`\\\\\\\\n  display: flex;\\\\\\\\n  justify-content: space-between;\\\\\\\\n  gap: 1.5rem;\\\\\\\\n\\\\\\\\n  @media screen and (max-width: 768px) {\\\\\\\\n    display: grid;\\\\\\\\n    grid-template-columns: 1fr 1fr;\\\\\\\\n    /* gap: 2.25rem; */\\\\\\\\n  }\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst Content = (\\\\\\\\n  <Container>\\\\\\\\n    <CardsContainer>\\\\\\\\n      {Cards.map((card) => (\\\\\\\\n        <SectionCard\\\\\\\\n          title={card.title}\\\\\\\\n          description={card.description}\\\\\\\\n          href={card.href}\\\\\\\\n          key={Math.random()}\\\\\\\\n        />\\\\\\\\n      ))}\\\\\\\\n    </CardsContainer>\\\\\\\\n    <CTA href=\\\\\\\\\\\\\\\"https://near.org/ecosystem\\\\\\\\\\\\\\\" target=\\\\\\\\\\\\\\\"_blank\\\\\\\\\\\\\\\">\\\\\\\\n      Explore the Open Web on NEAR \\\\\\\\u{2192}\\\\\\\\n    </CTA>\\\\\\\\n  </Container>\\\\\\\\n);\\\\\\\\n\\\\\\\\nreturn (\\\\\\\\n  <Widget\\\\\\\\n    src=\\\\\\\\\\\\\\\"devhub.near/widget/devhub.components.island.home-section\\\\\\\\\\\\\\\"\\\\\\\\n    props={{\\\\\\\\n      title: \\\\\\\\\\\\\\\"/explore\\\\\\\\\\\\\\\",\\\\\\\\n      titleColor: \\\\\\\\\\\\\\\"#04A46E\\\\\\\\\\\\\\\",\\\\\\\\n      description:\\\\\\\\n        \\\\\\\\\\\\\\\"NEAR Protocol is your fast, low-cost and reliable gateway to the Open Web\\\\\\\\\\\\\\\",\\\\\\\\n      children: Content,\\\\\\\\n    }}\\\\\\\\n  />\\\\\\\\n);\\\\\\\\n\"}, \"devhub.components.island.support\": {\"\": \"const Items = [\\\\\\\\n  {\\\\\\\\n    heading: (\\\\\\\\n      <>\\\\\\\\n        Developer\\\\\\\\n        <br />\\\\\\\\n        Resources\\\\\\\\n      </>\\\\\\\\n    ),\\\\\\\\n    description: \\\\\\\\\\\\\\\"Learn the fundamentals of NEAR and build with confidence\\\\\\\\\\\\\\\",\\\\\\\\n    cta: {\\\\\\\\n      href: \\\\\\\\\\\\\\\"https://docs.near.org\\\\\\\\\\\\\\\",\\\\\\\\n      title: \\\\\\\\\\\\\\\"Read \\\\\\\\u{2197}\\\\\\\\\\\\\\\",\\\\\\\\n    },\\\\\\\\n  },\\\\\\\\n  {\\\\\\\\n    heading: <>Office Hours</>,\\\\\\\\n    description: (\\\\\\\\n      <>\\\\\\\\n        Need some help?\\\\\\\\n        <br /> DevRel contributors are available to answer your technical\\\\\\\\n        questions\\\\\\\\n      </>\\\\\\\\n    ),\\\\\\\\n    cta: {\\\\\\\\n      href: \\\\\\\\\\\\\\\"https://bit.ly/DevHubOfficeHrs\\\\\\\\\\\\\\\",\\\\\\\\n      title: \\\\\\\\\\\\\\\"Book a meeting \\\\\\\\u{2197}\\\\\\\\\\\\\\\",\\\\\\\\n    },\\\\\\\\n  },\\\\\\\\n  {\\\\\\\\n    heading: <>Get Funding</>,\\\\\\\\n    description:\\\\\\\\n      \\\\\\\\\\\\\\\"Explore funding opportunities from DevHub to fuel your vision\\\\\\\\\\\\\\\",\\\\\\\\n    cta: {\\\\\\\\n      href: \\\\\\\\\\\\\\\"https://near.social/devgovgigs.near/widget/app?page=community&handle=developer-dao&tab=Funding\\\\\\\\\\\\\\\",\\\\\\\\n      title: \\\\\\\\\\\\\\\"Learn more \\\\\\\\u{2197}\\\\\\\\\\\\\\\",\\\\\\\\n    },\\\\\\\\n  },\\\\\\\\n];\\\\\\\\n\\\\\\\\nconst Circle = styled.div`\\\\\\\\n  display: flex;\\\\\\\\n  width: 18.75rem;\\\\\\\\n  height: 18.75rem;\\\\\\\\n  padding: 2.25rem;\\\\\\\\n  flex-direction: column;\\\\\\\\n  justify-content: center;\\\\\\\\n  align-items: center;\\\\\\\\n  gap: 1rem;\\\\\\\\n  flex-shrink: 0;\\\\\\\\n\\\\\\\\n  border-radius: 22.5rem;\\\\\\\\n  border: 1px solid #00ec97;\\\\\\\\n  background: #f4f4f4;\\\\\\\\n\\\\\\\\n  h3 {\\\\\\\\n    color: #101820;\\\\\\\\n    text-align: center;\\\\\\\\n    font-size: 1.75rem;\\\\\\\\n    font-style: normal;\\\\\\\\n    font-weight: 700;\\\\\\\\n    line-height: 100%; /* 36px */\\\\\\\\n  }\\\\\\\\n\\\\\\\\n  p {\\\\\\\\n    color: #101820;\\\\\\\\n    text-align: center;\\\\\\\\n    font-size: 1.125rem;\\\\\\\\n    font-style: normal;\\\\\\\\n    font-weight: 400;\\\\\\\\n    line-height: 120%; /* 28.8px */\\\\\\\\n    letter-spacing: -0.72px;\\\\\\\\n  }\\\\\\\\n\\\\\\\\n  a {\\\\\\\\n    color: #04a46e;\\\\\\\\n    font-size: 1.125rem;\\\\\\\\n    font-style: normal;\\\\\\\\n    font-weight: 700;\\\\\\\\n    line-height: 120%; /* 28.8px */\\\\\\\\n  }\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst Container = styled.div`\\\\\\\\n  padding: 3rem;\\\\\\\\n  padding-top: 0;\\\\\\\\n  margin-top: 1.5rem;\\\\\\\\n\\\\\\\\n  @media screen and (max-width: 786px) {\\\\\\\\n    padding: 1.5rem;\\\\\\\\n    padding-top: 0;\\\\\\\\n  }\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst ItemsContainer = styled.div`\\\\\\\\n  display: flex;\\\\\\\\n  flex-direction: row;\\\\\\\\n  justify-content: center;\\\\\\\\n  align-items: center;\\\\\\\\n  width: 100%;\\\\\\\\n\\\\\\\\n  flex-wrap: wrap;\\\\\\\\n  gap: 3rem;\\\\\\\\n\\\\\\\\n  @media screen and (max-width: 768px) {\\\\\\\\n    flex-direction: column;\\\\\\\\n    gap: 1rem;\\\\\\\\n  }\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst Content = (\\\\\\\\n  <Container>\\\\\\\\n    <ItemsContainer>\\\\\\\\n      {Items.map((it) => (\\\\\\\\n        <Circle key={Math.random()}>\\\\\\\\n          <h3>{it.heading}</h3>\\\\\\\\n          <p>{it.description}</p>\\\\\\\\n          <a href={it.cta.href}>{it.cta.title}</a>\\\\\\\\n        </Circle>\\\\\\\\n      ))}\\\\\\\\n    </ItemsContainer>\\\\\\\\n  </Container>\\\\\\\\n);\\\\\\\\n\\\\\\\\nreturn (\\\\\\\\n  <Widget\\\\\\\\n    src=\\\\\\\\\\\\\\\"devhub.near/widget/devhub.components.island.home-section\\\\\\\\\\\\\\\"\\\\\\\\n    props={{\\\\\\\\n      title: \\\\\\\\\\\\\\\"/get support\\\\\\\\\\\\\\\",\\\\\\\\n      children: Content,\\\\\\\\n      background: true,\\\\\\\\n    }}\\\\\\\\n  />\\\\\\\\n);\\\\\\\\n\"}, \"devhub.components.molecule.Input\": {\"\": \"const TextInput = ({\\\\\\\\n  className,\\\\\\\\n  format,\\\\\\\\n  inputProps: { className: inputClassName, ...inputProps },\\\\\\\\n  key,\\\\\\\\n  label,\\\\\\\\n  multiline,\\\\\\\\n  onChange,\\\\\\\\n  placeholder,\\\\\\\\n  type,\\\\\\\\n  value,\\\\\\\\n  skipPaddingGap,\\\\\\\\n  style,\\\\\\\\n  ...otherProps\\\\\\\\n}) => {\\\\\\\\n  const typeAttribute =\\\\\\\\n    type === \\\\\\\\\\\\\\\"text\\\\\\\\\\\\\\\" ||\\\\\\\\n    type === \\\\\\\\\\\\\\\"password\\\\\\\\\\\\\\\" ||\\\\\\\\n    type === \\\\\\\\\\\\\\\"number\\\\\\\\\\\\\\\" ||\\\\\\\\n    type === \\\\\\\\\\\\\\\"date\\\\\\\\\\\\\\\"\\\\\\\\n      ? type\\\\\\\\n      : \\\\\\\\\\\\\\\"text\\\\\\\\\\\\\\\";\\\\\\\\n\\\\\\\\n  const renderedLabels = [\\\\\\\\n    (label?.length ?? 0) > 0 ? (\\\\\\\\n      <span className=\\\\\\\\\\\\\\\"d-inline-flex gap-1 text-wrap\\\\\\\\\\\\\\\">\\\\\\\\n        <span>{label}</span>\\\\\\\\n\\\\\\\\n        {inputProps.required ? <span className=\\\\\\\\\\\\\\\"text-danger\\\\\\\\\\\\\\\">*</span> : null}\\\\\\\\n      </span>\\\\\\\\n    ) : null,\\\\\\\\n\\\\\\\\n    format === \\\\\\\\\\\\\\\"markdown\\\\\\\\\\\\\\\" ? (\\\\\\\\n      <i class=\\\\\\\\\\\\\\\"bi bi-markdown text-muted\\\\\\\\\\\\\\\" title=\\\\\\\\\\\\\\\"Markdown\\\\\\\\\\\\\\\" />\\\\\\\\n    ) : null,\\\\\\\\n\\\\\\\\n    format === \\\\\\\\\\\\\\\"comma-separated\\\\\\\\\\\\\\\" ? (\\\\\\\\n      <span\\\\\\\\n        className=\\\\\\\\\\\\\\\"d-inline-flex align-items-center text-muted\\\\\\\\\\\\\\\"\\\\\\\\n        style={{ fontSize: 12 }}\\\\\\\\n      >\\\\\\\\n        {format}\\\\\\\\n      </span>\\\\\\\\n    ) : null,\\\\\\\\n\\\\\\\\n    (inputProps.max ?? null) !== null ? (\\\\\\\\n      <span className=\\\\\\\\\\\\\\\"d-inline-flex text-muted\\\\\\\\\\\\\\\" style={{ fontSize: 12 }}>{`${\\\\\\\\n        value?.length ?? 0\\\\\\\\n      } / ${inputProps.max}`}</span>\\\\\\\\n    ) : null,\\\\\\\\n  ].filter((label) => label !== null);\\\\\\\\n\\\\\\\\n  return (\\\\\\\\n    <div\\\\\\\\n      className={[\\\\\\\\n        \\\\\\\\\\\\\\\"d-flex flex-column flex-1 align-items-start justify-content-evenly\\\\\\\\\\\\\\\",\\\\\\\\n        skipPaddingGap ? \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\" : \\\\\\\\\\\\\\\"gap-1 p-2\\\\\\\\\\\\\\\",\\\\\\\\n        className ?? \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\",\\\\\\\\n      ].join(\\\\\\\\\\\\\\\" \\\\\\\\\\\\\\\")}\\\\\\\\n      style={style}\\\\\\\\n      {...otherProps}\\\\\\\\n    >\\\\\\\\n      {renderedLabels.length > 0 ? (\\\\\\\\n        <span\\\\\\\\n          className=\\\\\\\\\\\\\\\"d-flex justify-content-between align-items-center gap-3 w-100\\\\\\\\\\\\\\\"\\\\\\\\n          id={key}\\\\\\\\n        >\\\\\\\\n          {renderedLabels.map((label) => label)}\\\\\\\\n        </span>\\\\\\\\n      ) : null}\\\\\\\\n\\\\\\\\n      {!multiline ? (\\\\\\\\n        <div className=\\\\\\\\\\\\\\\"input-group\\\\\\\\\\\\\\\">\\\\\\\\n          {inputProps.prefix && (\\\\\\\\n            <span className=\\\\\\\\\\\\\\\"input-group-text\\\\\\\\\\\\\\\">{inputProps.prefix}</span>\\\\\\\\n          )}\\\\\\\\n          <input\\\\\\\\n            aria-describedby={key}\\\\\\\\n            aria-label={label}\\\\\\\\n            className={[\\\\\\\\\\\\\\\"form-control border border-2\\\\\\\\\\\\\\\", inputClassName].join(\\\\\\\\n              \\\\\\\\\\\\\\\" \\\\\\\\\\\\\\\"\\\\\\\\n            )}\\\\\\\\n            type={typeAttribute}\\\\\\\\n            {...{ onChange, placeholder, value, ...inputProps }}\\\\\\\\n          />\\\\\\\\n        </div>\\\\\\\\n      ) : (\\\\\\\\n        <textarea\\\\\\\\n          aria-describedby={key}\\\\\\\\n          aria-label={label}\\\\\\\\n          className={[\\\\\\\\\\\\\\\"form-control border border-2\\\\\\\\\\\\\\\", inputClassName].join(\\\\\\\\\\\\\\\" \\\\\\\\\\\\\\\")}\\\\\\\\n          placeholder={\\\\\\\\n            placeholder + (inputProps.required ? \\\\\\\\\\\\\\\" ( required )\\\\\\\\\\\\\\\" : \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\")\\\\\\\\n          }\\\\\\\\n          style={{ resize: inputProps.resize ?? \\\\\\\\\\\\\\\"vertical\\\\\\\\\\\\\\\" }}\\\\\\\\n          type={typeAttribute}\\\\\\\\n          {...{ onChange, placeholder, value, ...inputProps }}\\\\\\\\n        />\\\\\\\\n      )}\\\\\\\\n    </div>\\\\\\\\n  );\\\\\\\\n};\\\\\\\\n\\\\\\\\nreturn TextInput(props);\\\\\\\\n\"}, \"devhub.entity.community.Activity\": {\"\": \"const { handle } = props;\\\\\\\\n\\\\\\\\nconst { getCommunity } = VM.require(\\\\\\\\n  \\\\\\\\\\\\\\\"devhub.near/widget/core.adapter.devhub-contract\\\\\\\\\\\\\\\"\\\\\\\\n);\\\\\\\\n\\\\\\\\nconst { href } = VM.require(\\\\\\\\\\\\\\\"devhub.near/widget/core.lib.url\\\\\\\\\\\\\\\");\\\\\\\\n\\\\\\\\nif (!getCommunity || !href) {\\\\\\\\n  return <p>Loading modules...</p>;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// TODO: Why do we need to get community data again? Isn\\\\\\\\\\\\'t the tag the handle...\\\\\\\\nconst communityData = getCommunity({ handle });\\\\\\\\n\\\\\\\\nif (communityData === null) {\\\\\\\\n  return <div>Loading...</div>;\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst MainContent = styled.div`\\\\\\\\n  flex-grow: 1;\\\\\\\\n\\\\\\\\n  @media screen and (max-width: 960px) {\\\\\\\\n    max-width: 100%;\\\\\\\\n  }\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst SidebarContainer = styled.div`\\\\\\\\n  max-width: 25%;\\\\\\\\n  margin-right: 1.5rem;\\\\\\\\n\\\\\\\\n  @media screen and (max-width: 960px) {\\\\\\\\n    display: none;\\\\\\\\n  }\\\\\\\\n`;\\\\\\\\n\\\\\\\\nreturn (\\\\\\\\n  <div style={{ maxWidth: \\\\\\\\\\\\\\\"100%\\\\\\\\\\\\\\\" }}>\\\\\\\\n    <div class=\\\\\\\\\\\\\\\"col\\\\\\\\\\\\\\\">\\\\\\\\n      <div class=\\\\\\\\\\\\\\\"d-flex w-100\\\\\\\\\\\\\\\">\\\\\\\\n        <MainContent>\\\\\\\\n          <Widget\\\\\\\\n            src={\\\\\\\\\\\\\\\"devhub.near/widget/devhub.feature.post-search.panel\\\\\\\\\\\\\\\"}\\\\\\\\n            props={{\\\\\\\\n              hideHeader: true,\\\\\\\\n              tag: communityData.tag,\\\\\\\\n              children: (\\\\\\\\n                <Widget\\\\\\\\n                  src={\\\\\\\\n                    \\\\\\\\\\\\\\\"devhub.near/widget/devhub.components.molecule.PostControls\\\\\\\\\\\\\\\"\\\\\\\\n                  }\\\\\\\\n                  props={{\\\\\\\\n                    title: \\\\\\\\\\\\\\\"Post\\\\\\\\\\\\\\\",\\\\\\\\n                    href: href({\\\\\\\\n                      widgetSrc: \\\\\\\\\\\\\\\"devhub.near/widget/app\\\\\\\\\\\\\\\",\\\\\\\\n                      params: {\\\\\\\\n                        page: \\\\\\\\\\\\\\\"create\\\\\\\\\\\\\\\",\\\\\\\\n                        labels: [communityData.tag],\\\\\\\\n                      },\\\\\\\\n                    }),\\\\\\\\n                  }}\\\\\\\\n                />\\\\\\\\n              ),\\\\\\\\n              recency,\\\\\\\\n              transactionHashes: props.transactionHashes,\\\\\\\\n            }}\\\\\\\\n          />\\\\\\\\n        </MainContent>\\\\\\\\n        <SidebarContainer>\\\\\\\\n          <Widget\\\\\\\\n            src={\\\\\\\\\\\\\\\"devhub.near/widget/devhub.entity.community.Sidebar\\\\\\\\\\\\\\\"}\\\\\\\\n            props={{ community: communityData }}\\\\\\\\n          />\\\\\\\\n        </SidebarContainer>\\\\\\\\n      </div>\\\\\\\\n    </div>\\\\\\\\n  </div>\\\\\\\\n);\\\\\\\\n\"}, \"devhub.entity.community.Provider\": {\"\": \"const { handle, Children } = props;\\\\\\\\n\\\\\\\\nconst {\\\\\\\\n  getAccountCommunityPermissions,\\\\\\\\n  createCommunity,\\\\\\\\n  updateCommunity,\\\\\\\\n  deleteCommunity,\\\\\\\\n  getCommunity,\\\\\\\\n  setCommunityAddons,\\\\\\\\n} = VM.require(\\\\\\\\\\\\\\\"devhub.near/widget/core.adapter.devhub-contract\\\\\\\\\\\\\\\");\\\\\\\\n\\\\\\\\nif (\\\\\\\\n  !getCommunity ||\\\\\\\\n  !getAccountCommunityPermissions ||\\\\\\\\n  !createCommunity ||\\\\\\\\n  !updateCommunity ||\\\\\\\\n  !deleteCommunity ||\\\\\\\\n  !setCommunityAddons\\\\\\\\n) {\\\\\\\\n  return <p>Loading modules...</p>;\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst CenteredMessage = styled.div`\\\\\\\\n  display: flex;\\\\\\\\n  flex-direction: column;\\\\\\\\n  justify-content: center;\\\\\\\\n  align-items: center;\\\\\\\\n  width: 100%;\\\\\\\\n  height: ${(p) => p.height ?? \\\\\\\\\\\\\\\"100%\\\\\\\\\\\\\\\"};\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst [isLoading, setIsLoading] = useState(false);\\\\\\\\nconst [error, setError] = useState(null);\\\\\\\\n\\\\\\\\nconst community = getCommunity({ handle });\\\\\\\\n\\\\\\\\nconst permissions = getAccountCommunityPermissions({\\\\\\\\n  account_id: context.accountId,\\\\\\\\n  community_handle: handle,\\\\\\\\n}) || {\\\\\\\\n  can_configure: false,\\\\\\\\n  can_delete: false,\\\\\\\\n};\\\\\\\\n\\\\\\\\nif (isLoading) {\\\\\\\\n  return (\\\\\\\\n    <CenteredMessage height={\\\\\\\\\\\\\\\"384px\\\\\\\\\\\\\\\"}>\\\\\\\\n      <h2>Loading...</h2>\\\\\\\\n    </CenteredMessage>\\\\\\\\n  );\\\\\\\\n} else if (!community) {\\\\\\\\n  return (\\\\\\\\n    <CenteredMessage height={\\\\\\\\\\\\\\\"384px\\\\\\\\\\\\\\\"}>\\\\\\\\n      <h2>{`Community with handle \\\\\\\\\\\\\\\"${handle}\\\\\\\\\\\\\\\" not found.`}</h2>\\\\\\\\n    </CenteredMessage>\\\\\\\\n  );\\\\\\\\n}\\\\\\\\n\\\\\\\\nfunction handleUpdateCommunity(v) {\\\\\\\\n  updateCommunity(v);\\\\\\\\n}\\\\\\\\n\\\\\\\\nreturn (\\\\\\\\n  <Children\\\\\\\\n    permissions={permissions}\\\\\\\\n    community={community}\\\\\\\\n    setCommunityAddons={setCommunityAddons}\\\\\\\\n    createCommunity={createCommunity}\\\\\\\\n    updateCommunity={handleUpdateCommunity}\\\\\\\\n    deleteCommunity={deleteCommunity}\\\\\\\\n  />\\\\\\\\n);\\\\\\\\n\"}, \"devhub.feature.post-search.panel\": {\"\": \"const { href } = VM.require(\\\\\\\\\\\\\\\"devhub.near/widget/core.lib.url\\\\\\\\\\\\\\\");\\\\\\\\n\\\\\\\\nhref || (href = () => {});\\\\\\\\n\\\\\\\\nState.init({\\\\\\\\n  tag: props.tag,\\\\\\\\n  term: \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\",\\\\\\\\n});\\\\\\\\n\\\\\\\\nconst updateInput = (term) => {\\\\\\\\n  State.update({\\\\\\\\n    term: term,\\\\\\\\n  });\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst buttonStyle = {\\\\\\\\n  backgroundColor: \\\\\\\\\\\\\\\"#0C7283\\\\\\\\\\\\\\\",\\\\\\\\n  color: \\\\\\\\\\\\\\\"#f3f3f3\\\\\\\\\\\\\\\",\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst PageTitle = styled.h5`\\\\\\\\n  color: #04a46e;\\\\\\\\n  font-size: 24px;\\\\\\\\n  font-style: normal;\\\\\\\\n  font-weight: 400;\\\\\\\\n  line-height: 120%; /* 28.8px */\\\\\\\\n  letter-spacing: -0.24px;\\\\\\\\n\\\\\\\\n  margin: 0;\\\\\\\\n  margin-bottom: 1rem;\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst Container = styled.div`\\\\\\\\n  padding: 24px;\\\\\\\\n  width: 100%;\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst PostContainer = styled.div`\\\\\\\\n  margin: 0 1rem;\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst InputContainer = styled.div`\\\\\\\\n  display: flex;\\\\\\\\n  flex-direction: row;\\\\\\\\n  position: relative;\\\\\\\\n  width: 25%;\\\\\\\\n\\\\\\\\n  @media screen and (max-width: 768px) {\\\\\\\\n    width: 100%;\\\\\\\\n  }\\\\\\\\n`;\\\\\\\\n\\\\\\\\nreturn (\\\\\\\\n  <>\\\\\\\\n    {!props.hideHeader && (\\\\\\\\n      <Container>\\\\\\\\n        <div className=\\\\\\\\\\\\\\\"w-100\\\\\\\\\\\\\\\">\\\\\\\\n          <PageTitle>Activity Feed</PageTitle>\\\\\\\\n          <div>\\\\\\\\n            <div className=\\\\\\\\\\\\\\\"d-flex flex-column flex-lg-row gap-4\\\\\\\\\\\\\\\">\\\\\\\\n              <InputContainer>\\\\\\\\n                <div className=\\\\\\\\\\\\\\\"position-absolute d-flex ps-3 flex-column h-100 justify-center\\\\\\\\\\\\\\\">\\\\\\\\n                  <i class=\\\\\\\\\\\\\\\"bi bi-search m-auto\\\\\\\\\\\\\\\"></i>\\\\\\\\n                </div>\\\\\\\\n                <input\\\\\\\\n                  type=\\\\\\\\\\\\\\\"search\\\\\\\\\\\\\\\"\\\\\\\\n                  className=\\\\\\\\\\\\\\\"ps-5 form-control border border-0\\\\\\\\\\\\\\\"\\\\\\\\n                  value={state.term ?? \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\"}\\\\\\\\n                  onChange={(e) => updateInput(e.target.value)}\\\\\\\\n                  onKeyDown={(e) => e.key == \\\\\\\\\\\\\\\"Enter\\\\\\\\\\\\\\\" && search()}\\\\\\\\n                  placeholder={props.placeholder ?? `Search by content`}\\\\\\\\n                />\\\\\\\\n              </InputContainer>\\\\\\\\n              <div class=\\\\\\\\\\\\\\\"dropdown\\\\\\\\\\\\\\\">\\\\\\\\n                <button\\\\\\\\n                  class=\\\\\\\\\\\\\\\"btn dropdown-toggle bg-white\\\\\\\\\\\\\\\"\\\\\\\\n                  type=\\\\\\\\\\\\\\\"button\\\\\\\\\\\\\\\"\\\\\\\\n                  data-bs-toggle=\\\\\\\\\\\\\\\"dropdown\\\\\\\\\\\\\\\"\\\\\\\\n                  aria-expanded=\\\\\\\\\\\\\\\"false\\\\\\\\\\\\\\\"\\\\\\\\n                >\\\\\\\\n                  Sort{props.recency === \\\\\\\\\\\\\\\"all\\\\\\\\\\\\\\\" ? \\\\\\\\\\\\\\\": All replies\\\\\\\\\\\\\\\" : \\\\\\\\\\\\\\\": Latest\\\\\\\\\\\\\\\"}\\\\\\\\n                </button>\\\\\\\\n                <ul class=\\\\\\\\\\\\\\\"dropdown-menu px-2 shadow\\\\\\\\\\\\\\\">\\\\\\\\n                  <li>\\\\\\\\n                    <a\\\\\\\\n                      style={{ borderRadius: \\\\\\\\\\\\\\\"5px\\\\\\\\\\\\\\\" }}\\\\\\\\n                      class=\\\\\\\\\\\\\\\"dropdown-item link-underline link-underline-opacity-0\\\\\\\\\\\\\\\"\\\\\\\\n                      href={href({\\\\\\\\n                        widgetSrc: \\\\\\\\\\\\\\\"devhub.near/widget/app\\\\\\\\\\\\\\\",\\\\\\\\n                        params: { page: \\\\\\\\\\\\\\\"feed\\\\\\\\\\\\\\\" },\\\\\\\\n                      })}\\\\\\\\n                    >\\\\\\\\n                      Latest\\\\\\\\n                    </a>\\\\\\\\n                  </li>\\\\\\\\n                  <li>\\\\\\\\n                    <a\\\\\\\\n                      style={{ borderRadius: \\\\\\\\\\\\\\\"5px\\\\\\\\\\\\\\\" }}\\\\\\\\n                      class=\\\\\\\\\\\\\\\"dropdown-item link-underline link-underline-opacity-0\\\\\\\\\\\\\\\"\\\\\\\\n                      href={href({\\\\\\\\n                        widgetSrc: \\\\\\\\\\\\\\\"devhub.near/widget/app\\\\\\\\\\\\\\\",\\\\\\\\n                        params: { page: \\\\\\\\\\\\\\\"feed\\\\\\\\\\\\\\\", recency: \\\\\\\\\\\\\\\"all\\\\\\\\\\\\\\\" },\\\\\\\\n                      })}\\\\\\\\n                    >\\\\\\\\n                      All replies\\\\\\\\n                    </a>\\\\\\\\n                  </li>\\\\\\\\n                </ul>\\\\\\\\n              </div>\\\\\\\\n              <div class=\\\\\\\\\\\\\\\"dropdown\\\\\\\\\\\\\\\">\\\\\\\\n                <Widget\\\\\\\\n                  src=\\\\\\\\\\\\\\\"devhub.near/widget/devhub.feature.post-search.by-author\\\\\\\\\\\\\\\"\\\\\\\\n                  props={{\\\\\\\\n                    author: state.author,\\\\\\\\n                    onAuthorSearch: (author) => {\\\\\\\\n                      State.update({ author });\\\\\\\\n                    },\\\\\\\\n                  }}\\\\\\\\n                />\\\\\\\\n              </div>\\\\\\\\n              <div>\\\\\\\\n                <Widget\\\\\\\\n                  src=\\\\\\\\\\\\\\\"devhub.near/widget/devhub.feature.post-search.by-tag\\\\\\\\\\\\\\\"\\\\\\\\n                  props={{\\\\\\\\n                    tag: state.tag,\\\\\\\\n                    onTagSearch: (tag) => {\\\\\\\\n                      State.update({ tag });\\\\\\\\n                    },\\\\\\\\n                  }}\\\\\\\\n                />\\\\\\\\n              </div>\\\\\\\\n              <div className=\\\\\\\\\\\\\\\"d-flex flex-row-reverse flex-grow-1\\\\\\\\\\\\\\\">\\\\\\\\n                {props.children}\\\\\\\\n              </div>\\\\\\\\n            </div>\\\\\\\\n          </div>\\\\\\\\n        </div>\\\\\\\\n      </Container>\\\\\\\\n    )}\\\\\\\\n    <PostContainer>\\\\\\\\n      <Widget\\\\\\\\n        src=\\\\\\\\\\\\\\\"devhub.near/widget/devhub.entity.post.List\\\\\\\\\\\\\\\"\\\\\\\\n        props={{\\\\\\\\n          author: state.author,\\\\\\\\n          tag: state.tag,\\\\\\\\n          term: state.term,\\\\\\\\n          recency: props.recency,\\\\\\\\n          transactionHashes: props.transactionHashes,\\\\\\\\n        }}\\\\\\\\n      />\\\\\\\\n    </PostContainer>\\\\\\\\n  </>\\\\\\\\n);\\\\\\\\n\"}, \"devhub.components.molecule.Button\": {\"\": \"const styles = `\\\\\\\\n  padding: 0.5rem 1.2rem !important;\\\\\\\\n  min-height: 36px;\\\\\\\\n  line-height: 1.5;\\\\\\\\n  text-decoration: none !important;\\\\\\\\n\\\\\\\\n  &:not(.shadow-none) {\\\\\\\\n    box-shadow: 0 0.125rem 0.25rem rgba(0, 0, 0, 0.075) !important;\\\\\\\\n    transition: box-shadow 0.6s;\\\\\\\\n  }\\\\\\\\n\\\\\\\\n  &.btn-sm {\\\\\\\\n    padding: 0.5rem 0.8rem !important;\\\\\\\\n    min-height: 32px;\\\\\\\\n    line-height: 1;\\\\\\\\n  }\\\\\\\\n\\\\\\\\n  &.btn-lg {\\\\\\\\n    padding: 1rem 1.5rem !important;\\\\\\\\n    min-height: 48px;\\\\\\\\n  }\\\\\\\\n\\\\\\\\n  &.btn-primary {\\\\\\\\n    border: none;\\\\\\\\n    --bs-btn-color: #ffffff;\\\\\\\\n    --bs-btn-bg: #087990;\\\\\\\\n    --bs-btn-border-color: #087990;\\\\\\\\n    --bs-btn-hover-color: #ffffff;\\\\\\\\n    --bs-btn-hover-bg: #055160;\\\\\\\\n    --bs-btn-hover-border-color: #055160;\\\\\\\\n    --bs-btn-focus-shadow-rgb: 49, 132, 253;\\\\\\\\n    --bs-btn-active-color: #ffffff;\\\\\\\\n    --bs-btn-active-bg: #055160;\\\\\\\\n    --bs-btn-active-border-color: #055160;\\\\\\\\n    --bs-btn-active-shadow: inset 0 3px 5px rgba(0, 0, 0, 0.125);\\\\\\\\n    --bs-btn-disabled-color: #ffffff;\\\\\\\\n    --bs-btn-disabled-bg: #0551604a;\\\\\\\\n  }\\\\\\\\n\\\\\\\\n\\\\\\\\t&.btn-outline-primary {\\\\\\\\n\\\\\\\\t\\\\\\\\t--bs-btn-color: #087990;\\\\\\\\n\\\\\\\\t\\\\\\\\t--bs-btn-border-color: #087990;\\\\\\\\n\\\\\\\\t\\\\\\\\t--bs-btn-hover-color: #ffffff;\\\\\\\\n\\\\\\\\t\\\\\\\\t--bs-btn-hover-bg: #087990;\\\\\\\\n\\\\\\\\t\\\\\\\\t--bs-btn-hover-border-color: #087990;\\\\\\\\n\\\\\\\\t\\\\\\\\t--bs-btn-focus-shadow-rgb: 49, 132, 253;\\\\\\\\n\\\\\\\\t\\\\\\\\t--bs-btn-active-color: #ffffff;\\\\\\\\n\\\\\\\\t\\\\\\\\t--bs-btn-active-bg: #087990;\\\\\\\\n\\\\\\\\t\\\\\\\\t--bs-btn-active-border-color: #087990;\\\\\\\\n\\\\\\\\t\\\\\\\\t--bs-btn-active-shadow: inset 0 3px 5px rgba(0, 0, 0, 0.125);\\\\\\\\n\\\\\\\\t\\\\\\\\t--bs-btn-disabled-border-color: #0551604a;\\\\\\\\n\\\\\\\\t}\\\\\\\\n\\\\\\\\n  &[class*=\\\\\\\\\\\\\\\"btn-outline-\\\\\\\\\\\\\\\"] {\\\\\\\\n    border-width: 2px;\\\\\\\\n  }\\\\\\\\n\\\\\\\\n  &.btn-outline-primary {\\\\\\\\n    --bs-btn-disabled-color: #6c757d8f;\\\\\\\\n  }\\\\\\\\n\\\\\\\\n  &.btn-secondary {\\\\\\\\n    border: none;\\\\\\\\n  }\\\\\\\\n\\\\\\\\n  &.btn-outline-secondary {\\\\\\\\n    --bs-btn-disabled-color: #6c757d8f;\\\\\\\\n  }\\\\\\\\n\\\\\\\\n  &.btn-success {\\\\\\\\n    border: none;\\\\\\\\n    --bs-btn-disabled-bg: #35482a4a;\\\\\\\\n  }\\\\\\\\n\\\\\\\\n  &.btn-outline-success {\\\\\\\\n    --bs-btn-disabled-color: #6c757d8f;\\\\\\\\n  }\\\\\\\\n\\\\\\\\n  &.btn-danger {\\\\\\\\n    border: none;\\\\\\\\n  }\\\\\\\\n\\\\\\\\n  &.btn-outline-danger {\\\\\\\\n    --bs-btn-disabled-color: #6c757d8f;\\\\\\\\n  }\\\\\\\\n\\\\\\\\n  &.btn-warning {\\\\\\\\n    border: none;\\\\\\\\n  }\\\\\\\\n\\\\\\\\n  &.btn-outline-warning {\\\\\\\\n    --bs-btn-disabled-color: #6c757d8f;\\\\\\\\n  }\\\\\\\\n\\\\\\\\n  &.btn-info {\\\\\\\\n    border: none;\\\\\\\\n  }\\\\\\\\n\\\\\\\\n  &.btn-outline-info {\\\\\\\\n    --bs-btn-disabled-color: #6c757d8f;\\\\\\\\n  }\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst rootElementByType = (type) =>\\\\\\\\n  type === \\\\\\\\\\\\\\\"link\\\\\\\\\\\\\\\"\\\\\\\\n    ? styled.a`\\\\\\\\n        ${styles}\\\\\\\\n      `\\\\\\\\n    : styled.button`\\\\\\\\n        ${styles}\\\\\\\\n      `;\\\\\\\\n\\\\\\\\nconst Button = ({\\\\\\\\n  classNames,\\\\\\\\n  icon: iconProps,\\\\\\\\n  label,\\\\\\\\n  type,\\\\\\\\n  notRounded,\\\\\\\\n  ...restProps\\\\\\\\n}) => {\\\\\\\\n  const ButtonRoot = rootElementByType(type);\\\\\\\\n\\\\\\\\n  return (\\\\\\\\n    <ButtonRoot\\\\\\\\n      className={[\\\\\\\\n        \\\\\\\\\\\\\\\"btn d-inline-flex align-items-center gap-2\\\\\\\\\\\\\\\",\\\\\\\\n        classNames?.root ?? \\\\\\\\\\\\\\\"btn-primary\\\\\\\\\\\\\\\",\\\\\\\\n        !notRounded ?? \\\\\\\\\\\\\\\"rounded-pill\\\\\\\\\\\\\\\",\\\\\\\\n      ].join(\\\\\\\\\\\\\\\" \\\\\\\\\\\\\\\")}\\\\\\\\n      style={{ width: \\\\\\\\\\\\\\\"fit-content\\\\\\\\\\\\\\\" }}\\\\\\\\n      {...restProps}\\\\\\\\n    >\\\\\\\\n      {iconProps !== null &&\\\\\\\\n        typeof iconProps === \\\\\\\\\\\\\\\"object\\\\\\\\\\\\\\\" &&\\\\\\\\n        !Array.isArray(iconProps) && (\\\\\\\\n          <Widget\\\\\\\\n            src={\\\\\\\\\\\\\\\"devhub.near/widget/devhub.components.atom.Icon\\\\\\\\\\\\\\\"}\\\\\\\\n            props={iconProps}\\\\\\\\n          />\\\\\\\\n        )}\\\\\\\\n      <span className={classNames?.label} style={{ lineHeight: \\\\\\\\\\\\\\\"inherit\\\\\\\\\\\\\\\" }}>\\\\\\\\n        {label}\\\\\\\\n      </span>\\\\\\\\n    </ButtonRoot>\\\\\\\\n  );\\\\\\\\n};\\\\\\\\n\\\\\\\\nreturn Button(props);\\\\\\\\n\"}, \"devhub.components.molecule.Select\": {\"\": \"const SelectInput = ({\\\\\\\\n  className,\\\\\\\\n  key,\\\\\\\\n  label,\\\\\\\\n  onChange,\\\\\\\\n  options,\\\\\\\\n  placeholder,\\\\\\\\n  value,\\\\\\\\n  style,\\\\\\\\n  ...otherProps\\\\\\\\n}) => {\\\\\\\\n  const renderedLabels =\\\\\\\\n    [(label?.length ?? 0) > 0 && <span>{label}</span>] || [];\\\\\\\\n\\\\\\\\n  return (\\\\\\\\n    <div\\\\\\\\n      className={[\\\\\\\\n        \\\\\\\\\\\\\\\"d-flex flex-column flex-1 align-items-start justify-content-evenly\\\\\\\\\\\\\\\",\\\\\\\\n        className,\\\\\\\\n      ].join(\\\\\\\\\\\\\\\" \\\\\\\\\\\\\\\")}\\\\\\\\n      style={style}\\\\\\\\n      {...otherProps}\\\\\\\\n    >\\\\\\\\n      {renderedLabels.length > 0 && (\\\\\\\\n        <span className=\\\\\\\\\\\\\\\"d-flex justify-content-between align-items-center gap-3 w-100\\\\\\\\\\\\\\\">\\\\\\\\n          {renderedLabels}\\\\\\\\n        </span>\\\\\\\\n      )}\\\\\\\\n\\\\\\\\n      <div className=\\\\\\\\\\\\\\\"input-group\\\\\\\\\\\\\\\">\\\\\\\\n        <select\\\\\\\\n          className=\\\\\\\\\\\\\\\"form-select border border-2\\\\\\\\\\\\\\\"\\\\\\\\n          value={value}\\\\\\\\n          onChange={onChange}\\\\\\\\n          aria-label={label}\\\\\\\\n        >\\\\\\\\n          <option value=\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\" disabled hidden>\\\\\\\\n            {placeholder}\\\\\\\\n          </option>\\\\\\\\n          {options.map((option) => (\\\\\\\\n            <option key={option.value} value={option.value}>\\\\\\\\n              {option.label}\\\\\\\\n            </option>\\\\\\\\n          ))}\\\\\\\\n        </select>\\\\\\\\n      </div>\\\\\\\\n    </div>\\\\\\\\n  );\\\\\\\\n};\\\\\\\\n\\\\\\\\nreturn SelectInput(props);\\\\\\\\n\"}, \"devhub.components.organism.Navbar\": {\"\": \"const page = props.page;\\\\\\\\n\\\\\\\\nconst [showMenu, setShowMenu] = useState(false);\\\\\\\\n\\\\\\\\nconst { href: linkHref } = VM.require(\\\\\\\\\\\\\\\"devhub.near/widget/core.lib.url\\\\\\\\\\\\\\\");\\\\\\\\n\\\\\\\\nlinkHref || (linkHref = () => {});\\\\\\\\n\\\\\\\\nconst Logo = () => {\\\\\\\\n  const Wrapper = styled.div`\\\\\\\\n    @media screen and (max-width: 768px) {\\\\\\\\n      svg {\\\\\\\\n        width: 90px;\\\\\\\\n        height: 12px;\\\\\\\\n        transform: scale(1.5);\\\\\\\\n        margin-left: 1rem;\\\\\\\\n      }\\\\\\\\n    }\\\\\\\\n  `;\\\\\\\\n\\\\\\\\n  return (\\\\\\\\n    <Wrapper>\\\\\\\\n      <Link\\\\\\\\n        to={linkHref({\\\\\\\\n          widgetSrc: \\\\\\\\\\\\\\\"devhub.near/widget/app\\\\\\\\\\\\\\\",\\\\\\\\n          params: { page: \\\\\\\\\\\\\\\"home\\\\\\\\\\\\\\\" },\\\\\\\\n        })}\\\\\\\\n      >\\\\\\\\n        <svg\\\\\\\\n          xmlns=\\\\\\\\\\\\\\\"http://www.w3.org/2000/svg\\\\\\\\\\\\\\\"\\\\\\\\n          width=\\\\\\\\\\\\\\\"180\\\\\\\\\\\\\\\"\\\\\\\\n          height=\\\\\\\\\\\\\\\"24\\\\\\\\\\\\\\\"\\\\\\\\n          viewBox=\\\\\\\\\\\\\\\"0 0 180 24\\\\\\\\\\\\\\\"\\\\\\\\n          fill=\\\\\\\\\\\\\\\"none\\\\\\\\\\\\\\\"\\\\\\\\n        >\\\\\\\\n          <g clip-path=\\\\\\\\\\\\\\\"url(#clip0_530_29)\\\\\\\\\\\\\\\">\\\\\\\\n            <path\\\\\\\\n              d=\\\\\\\\\\\\\\\"M8.62185 6.09766C11.8428 6.09766 14.5995 7.77588 14.5995 12.7821V20.8888H10.508V13.1803C10.508 10.7057 9.55041 9.39721 7.49016 9.39721C5.37187 9.39721 4.15313 10.8763 4.15313 13.4079V20.8888H0.0616455V6.26832H3.63081L4.00804 8.08877C4.96563 6.95099 6.32945 6.09766 8.62185 6.09766ZM23.911 21.0594C18.9489 21.0594 15.9601 18.1297 15.9601 13.607C15.9601 9.05588 19.007 6.09766 23.6208 6.09766C28.0895 6.09766 31.1073 8.82832 31.1654 13.1234C31.1654 13.5501 31.1364 14.0337 31.0493 14.4888H20.2257V14.6879C20.3128 16.7643 21.6766 18.0159 23.7369 18.0159C25.3909 18.0159 26.5516 17.3048 26.8998 15.9394H30.9332C30.4689 18.7839 27.8864 21.0594 23.911 21.0594ZM20.3128 11.8719H27.0449C26.7547 10.0799 25.5069 9.08432 23.6498 9.08432C21.8797 9.08432 20.5449 10.1368 20.3128 11.8719ZM47.0396 17.5039H47.5039V20.8888H45.4146C43.2963 20.8888 42.6289 19.8932 42.6579 18.4994C41.6133 20.1208 40.1044 21.0594 37.783 21.0594C34.562 21.0594 32.2406 19.5519 32.2406 16.7643C32.2406 13.6639 34.6201 11.9003 39.0888 11.9003H42.0486V11.1892C42.0486 9.88077 41.091 9.02743 39.3789 9.02743C37.783 9.02743 36.7093 9.73854 36.5352 10.8194H32.5888C32.879 7.97499 35.5486 6.09766 39.495 6.09766C43.6736 6.09766 46.082 7.9181 46.082 11.4168V16.5937C46.082 17.3617 46.4012 17.5039 47.0396 17.5039ZM42.0486 14.8585V14.5741H39.0598C37.3477 14.5741 36.3611 15.2568 36.3611 16.4799C36.3611 17.5039 37.2026 18.1581 38.5665 18.1581C40.7138 18.1581 42.0196 16.8497 42.0486 14.8585ZM56.8924 6.26832H57.5889V9.90921H55.9639C53.5264 9.90921 52.5978 11.5021 52.5978 13.7208V20.8888H48.5064V6.26832H52.2206L52.5978 8.45854C53.4103 7.1501 54.571 6.26832 56.8924 6.26832Z\\\\\\\\\\\\\\\"\\\\\\\\n              fill=\\\\\\\\\\\\\\\"#00EC97\\\\\\\\\\\\\\\"\\\\\\\\n            />\\\\\\\\n            <path\\\\\\\\n              d=\\\\\\\\\\\\\\\"M60.7221 23.961H59.2422L67.4542 0.124512H68.9341L60.7221 23.961ZM82.8081 8.08896V0.977843H86.8996V20.889H83.3304L82.9242 18.8694C81.9376 20.121 80.4867 21.0596 78.3394 21.0596C74.335 21.0596 71.4042 18.1867 71.4042 13.5503C71.4042 9.02762 74.335 6.09785 78.3104 6.09785C80.3706 6.09785 81.8505 6.89429 82.8081 8.08896ZM79.239 17.7885C81.4733 17.7885 82.8662 16.0818 82.8662 13.6072C82.8662 11.1041 81.4733 9.36896 79.239 9.36896C77.0046 9.36896 75.5827 11.0756 75.5827 13.5787C75.5827 16.0818 77.0046 17.7885 79.239 17.7885ZM96.2521 21.0596C91.2901 21.0596 88.3013 18.1298 88.3013 13.6072C88.3013 9.05607 91.3482 6.09785 95.962 6.09785C100.431 6.09785 103.449 8.82851 103.507 13.1236C103.507 13.5503 103.478 14.0338 103.39 14.489H92.5669V14.6881C92.6539 16.7645 94.0178 18.0161 96.078 18.0161C97.732 18.0161 98.8927 17.305 99.2409 15.9396H103.274C102.81 18.7841 100.228 21.0596 96.2521 21.0596ZM92.6539 11.8721H99.386C99.0959 10.0801 97.8481 9.08451 95.991 9.08451C94.2209 9.08451 92.8861 10.137 92.6539 11.8721ZM108.081 20.889L102.713 6.26851H107.094L110.692 16.793L114.233 6.26851H118.527L113.159 20.889H108.081ZM120.906 23.961H119.427L127.639 0.124512H129.118L120.906 23.961ZM140.671 6.09785C143.979 6.09785 146.707 7.83296 146.707 12.7823V20.889H142.615V13.1236C142.615 10.7343 141.629 9.3974 139.597 9.3974C137.508 9.3974 136.26 10.8765 136.26 13.3796V20.889H132.169V0.977843H136.26V8.06051C137.218 6.92273 138.553 6.09785 140.671 6.09785ZM158.367 13.5787V6.26851H162.459V20.889H158.832L158.454 19.1254C157.497 20.2632 156.191 21.0596 154.073 21.0596C150.997 21.0596 148.153 19.5521 148.153 14.3752V6.26851H152.245V13.8347C152.245 16.4516 153.115 17.7316 155.146 17.7316C157.178 17.7316 158.367 16.281 158.367 13.5787ZM173.022 6.09785C177.027 6.09785 179.928 8.91385 179.928 13.5503C179.928 18.073 177.027 21.0596 172.993 21.0596C170.846 21.0596 169.366 20.1494 168.408 18.8978L168.002 20.889H164.433V0.977843H168.524V8.1174C169.511 6.95118 170.962 6.09785 173.022 6.09785ZM172.094 17.7885C174.328 17.7885 175.779 16.0818 175.779 13.5787C175.779 11.0756 174.328 9.36896 172.094 9.36896C169.859 9.36896 168.466 11.0756 168.466 13.5503C168.466 16.0534 169.859 17.7885 172.094 17.7885Z\\\\\\\\\\\\\\\"\\\\\\\\n              fill=\\\\\\\\\\\\\\\"#151515\\\\\\\\\\\\\\\"\\\\\\\\n            />\\\\\\\\n          </g>\\\\\\\\n          <defs>\\\\\\\\n            <clipPath id=\\\\\\\\\\\\\\\"clip0_530_29\\\\\\\\\\\\\\\">\\\\\\\\n              <rect width=\\\\\\\\\\\\\\\"180\\\\\\\\\\\\\\\" height=\\\\\\\\\\\\\\\"24\\\\\\\\\\\\\\\" fill=\\\\\\\\\\\\\\\"white\\\\\\\\\\\\\\\" />\\\\\\\\n            </clipPath>\\\\\\\\n          </defs>\\\\\\\\n        </svg>\\\\\\\\n      </Link>\\\\\\\\n    </Wrapper>\\\\\\\\n  );\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst ProfileIcon = () => {\\\\\\\\n  const Wrapper = styled.svg`\\\\\\\\n    padding: 0.25rem;\\\\\\\\n    @media screen and (max-width: 768px) {\\\\\\\\n      display: none;\\\\\\\\n    }\\\\\\\\n  `;\\\\\\\\n  return (\\\\\\\\n    <Link\\\\\\\\n      to={linkHref({\\\\\\\\n        widgetSrc: \\\\\\\\\\\\\\\"devhub.near/widget/app\\\\\\\\\\\\\\\",\\\\\\\\n        params: { page: \\\\\\\\\\\\\\\"profile\\\\\\\\\\\\\\\", accountId: context.accountId },\\\\\\\\n      })}\\\\\\\\n    >\\\\\\\\n      <Widget\\\\\\\\n        src=\\\\\\\\\\\\\\\"devhub.near/widget/devhub.components.molecule.ProfileCard\\\\\\\\\\\\\\\"\\\\\\\\n        props={{ iconOnly: true, accountId: context.accountId || null }}\\\\\\\\n      />\\\\\\\\n    </Link>\\\\\\\\n  );\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst MenuIcon = () => (\\\\\\\\n  <svg\\\\\\\\n    xmlns=\\\\\\\\\\\\\\\"http://www.w3.org/2000/svg\\\\\\\\\\\\\\\"\\\\\\\\n    width=\\\\\\\\\\\\\\\"16\\\\\\\\\\\\\\\"\\\\\\\\n    height=\\\\\\\\\\\\\\\"16\\\\\\\\\\\\\\\"\\\\\\\\n    viewBox=\\\\\\\\\\\\\\\"0 0 16 16\\\\\\\\\\\\\\\"\\\\\\\\n    fill=\\\\\\\\\\\\\\\"none\\\\\\\\\\\\\\\"\\\\\\\\n    style={{ height: 20, width: 20 }}\\\\\\\\n  >\\\\\\\\n    <path\\\\\\\\n      fill-rule=\\\\\\\\\\\\\\\"evenodd\\\\\\\\\\\\\\\"\\\\\\\\n      clip-rule=\\\\\\\\\\\\\\\"evenodd\\\\\\\\\\\\\\\"\\\\\\\\n      d=\\\\\\\\\\\\\\\"M2 12.2986H14V13.3732H2V12.2986ZM2 9.07471H14V10.1493H2V9.07471ZM2 5.85083H14V6.92546H2V5.85083ZM2 2.62695H14V3.70158H2V2.62695Z\\\\\\\\\\\\\\\"\\\\\\\\n      fill=\\\\\\\\\\\\\\\"#818181\\\\\\\\\\\\\\\"\\\\\\\\n    />\\\\\\\\n  </svg>\\\\\\\\n);\\\\\\\\n\\\\\\\\nconst Navbar = styled.div`\\\\\\\\n  padding: 1.5rem 3rem;\\\\\\\\n\\\\\\\\n  display: flex;\\\\\\\\n  flex-direction: row;\\\\\\\\n  justify-content: space-between;\\\\\\\\n  align-items: center;\\\\\\\\n\\\\\\\\n  background: #f4f4f4;\\\\\\\\n\\\\\\\\n  @media screen and (max-width: 768px) {\\\\\\\\n    padding: 1.875rem 1.375rem;\\\\\\\\n  }\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst LinksContainer = styled.div`\\\\\\\\n  display: flex;\\\\\\\\n  flex-direction: row;\\\\\\\\n  align-items: center;\\\\\\\\n  gap: 1.5rem;\\\\\\\\n\\\\\\\\n  @media screen and (max-width: 768px) {\\\\\\\\n    display: none;\\\\\\\\n  }\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst MobileMenu = styled.button`\\\\\\\\n  all: unset;\\\\\\\\n  display: none;\\\\\\\\n\\\\\\\\n  @media screen and (max-width: 768px) {\\\\\\\\n    display: block;\\\\\\\\n  }\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst links = [\\\\\\\\n  {\\\\\\\\n    title: \\\\\\\\\\\\\\\"/communities\\\\\\\\\\\\\\\",\\\\\\\\n    href: \\\\\\\\\\\\\\\"communities\\\\\\\\\\\\\\\",\\\\\\\\n    links: [],\\\\\\\\n  },\\\\\\\\n  {\\\\\\\\n    title: \\\\\\\\\\\\\\\"/activity feed\\\\\\\\\\\\\\\",\\\\\\\\n    href: \\\\\\\\\\\\\\\"feed\\\\\\\\\\\\\\\",\\\\\\\\n    links: [],\\\\\\\\n  },\\\\\\\\n  {\\\\\\\\n    title: \\\\\\\\\\\\\\\"/about\\\\\\\\\\\\\\\",\\\\\\\\n    links: [\\\\\\\\n      { title: \\\\\\\\\\\\\\\"mission\\\\\\\\\\\\\\\", href: \\\\\\\\\\\\\\\"about\\\\\\\\\\\\\\\" },\\\\\\\\n      { title: \\\\\\\\\\\\\\\"blog\\\\\\\\\\\\\\\", href: \\\\\\\\\\\\\\\"blog\\\\\\\\\\\\\\\" },\\\\\\\\n      { title: \\\\\\\\\\\\\\\"newsletter\\\\\\\\\\\\\\\", href: \\\\\\\\\\\\\\\"https://newsletter.neardevhub.org\\\\\\\\\\\\\\\" },\\\\\\\\n      {\\\\\\\\n        title: \\\\\\\\\\\\\\\"calendar\\\\\\\\\\\\\\\",\\\\\\\\n        href: \\\\\\\\\\\\\\\"https://calendar.google.com/calendar/embed?height=600&wkst=2&bgcolor=%23ffffff&ctz=UTC&title&showNav=1&showDate=1&mode=AGENDA&showPrint=0&src=Y19mNTRlZDM3ZmQ5MjMyN2FjZGM3ZTQzNDNmZTQwNzIyYWU1Nzk3YjZjODI5MjliYTkzZTlmM2E4OWM2OTY1N2FiQGdyb3VwLmNhbGVuZGFyLmdvb2dsZS5jb20&color=%23616161\\\\\\\\\\\\\\\",\\\\\\\\n      },\\\\\\\\n      {\\\\\\\\n        title: \\\\\\\\\\\\\\\"brand kit\\\\\\\\\\\\\\\",\\\\\\\\n        href: \\\\\\\\\\\\\\\"https://drive.google.com/drive/folders/1C0GMmGq3MzbVPpxvf9807IU-7kpc2_v5?usp=sharing\\\\\\\\\\\\\\\",\\\\\\\\n      },\\\\\\\\n    ],\\\\\\\\n  },\\\\\\\\n];\\\\\\\\n\\\\\\\\nconst MobileNav = styled.div`\\\\\\\\n  display: none;\\\\\\\\n\\\\\\\\n  @media screen and (max-width: 768px) {\\\\\\\\n    display: flex;\\\\\\\\n  }\\\\\\\\n\\\\\\\\n  position: absolute;\\\\\\\\n  top: 0;\\\\\\\\n  right: 0;\\\\\\\\n\\\\\\\\n  width: 207px;\\\\\\\\n\\\\\\\\n  padding: 24px 36px 36px 16px;\\\\\\\\n  flex-direction: column;\\\\\\\\n  align-items: flex-end;\\\\\\\\n  gap: 2.5rem;\\\\\\\\n  flex-shrink: 0;\\\\\\\\n\\\\\\\\n  border-radius: 0px 0px 0px 16px;\\\\\\\\n  background: rgba(41, 41, 41, 0.6);\\\\\\\\n  backdrop-filter: blur(5px);\\\\\\\\n\\\\\\\\n  z-index: 50;\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst MobileLink = styled.a`\\\\\\\\n  color: #f4f4f4 !important;\\\\\\\\n  font-size: 20px;\\\\\\\\n  font-style: normal;\\\\\\\\n  font-weight: 400;\\\\\\\\n  line-height: 20px; /* 100% */\\\\\\\\n  margin-bottom: 1rem;\\\\\\\\n\\\\\\\\n  &.active {\\\\\\\\n    color: #04a46e !important;\\\\\\\\n  }\\\\\\\\n\\\\\\\\n  &:hover {\\\\\\\\n    text-decoration: none;\\\\\\\\n    color: #096d50 !important;\\\\\\\\n  }\\\\\\\\n`;\\\\\\\\n\\\\\\\\nreturn (\\\\\\\\n  <Navbar className=\\\\\\\\\\\\\\\"position-relative\\\\\\\\\\\\\\\">\\\\\\\\n    <Logo />\\\\\\\\n    <div className=\\\\\\\\\\\\\\\"d-flex gap-3 align-items-center\\\\\\\\\\\\\\\">\\\\\\\\n      <LinksContainer>\\\\\\\\n        {links.map((link) => (\\\\\\\\n          <Widget\\\\\\\\n            src=\\\\\\\\\\\\\\\"devhub.near/widget/devhub.components.molecule.NavbarDropdown\\\\\\\\\\\\\\\"\\\\\\\\n            props={{\\\\\\\\n              title: link.title,\\\\\\\\n              href: link.href,\\\\\\\\n              links: link.links,\\\\\\\\n              page: page,\\\\\\\\n            }}\\\\\\\\n          />\\\\\\\\n        ))}\\\\\\\\n      </LinksContainer>\\\\\\\\n      {context.accountId && <ProfileIcon />}\\\\\\\\n      <MobileMenu onClick={() => setShowMenu(!showMenu)}>\\\\\\\\n        <MenuIcon />\\\\\\\\n      </MobileMenu>\\\\\\\\n    </div>\\\\\\\\n    {showMenu && (\\\\\\\\n      <MobileNav>\\\\\\\\n        <div\\\\\\\\n          onClick={() => setShowMenu(!showMenu)}\\\\\\\\n          style={{ cursor: \\\\\\\\\\\\\\\"pointer\\\\\\\\\\\\\\\" }}\\\\\\\\n        >\\\\\\\\n          <i className=\\\\\\\\\\\\\\\"bi bi-x\\\\\\\\\\\\\\\" style={{ fontSize: 20, color: \\\\\\\\\\\\\\\"#F4F4F4\\\\\\\\\\\\\\\" }}></i>\\\\\\\\n        </div>\\\\\\\\n        <div className=\\\\\\\\\\\\\\\"d-flex flex-column gap-2\\\\\\\\\\\\\\\">\\\\\\\\n          {links.map((link, idx) =>\\\\\\\\n            link.href ? (\\\\\\\\n              <MobileLink\\\\\\\\n                key={`mobile-link-${idx}`}\\\\\\\\n                className={link.href === props.page && \\\\\\\\\\\\\\\"active\\\\\\\\\\\\\\\"}\\\\\\\\n                href={`/devhub.near/widget/app?page=${link.href}`}\\\\\\\\n              >\\\\\\\\n                {link.title}\\\\\\\\n              </MobileLink>\\\\\\\\n            ) : (\\\\\\\\n              link.links.map((it, idx) => (\\\\\\\\n                <MobileLink\\\\\\\\n                  key={`nested-link-${idx}`}\\\\\\\\n                  className={link.href === props.page && \\\\\\\\\\\\\\\"active\\\\\\\\\\\\\\\"}\\\\\\\\n                  href={`/devhub.near/widget/app?page=${it.href}`}\\\\\\\\n                >\\\\\\\\n                  {it.title}\\\\\\\\n                </MobileLink>\\\\\\\\n              ))\\\\\\\\n            )\\\\\\\\n          )}\\\\\\\\n        </div>\\\\\\\\n      </MobileNav>\\\\\\\\n    )}\\\\\\\\n  </Navbar>\\\\\\\\n);\\\\\\\\n\"}, \"devhub.entity.addon.github.Viewer\": {\"\": \"const { href } = VM.require(\\\\\\\\\\\\\\\"devhub.near/widget/core.lib.url\\\\\\\\\\\\\\\");\\\\\\\\n\\\\\\\\nhref || (href = () => {});\\\\\\\\n\\\\\\\\nconst { kanbanBoards, handle, permissions } = props;\\\\\\\\n// TODO: Convert this viewer to display the provided data via kanbanBoards\\\\\\\\n\\\\\\\\nreturn (\\\\\\\\n  <Widget\\\\\\\\n    // TODO: LEGACY.\\\\\\\\n    src=\\\\\\\\\\\\\\\"devhub.near/widget/gigs-board.entity.workspace.view.github.configurator\\\\\\\\\\\\\\\"\\\\\\\\n    props={{\\\\\\\\n      communityHandle: handle, // rather than fetching again via the handle\\\\\\\\n      link: href({\\\\\\\\n        // do we need a link?\\\\\\\\n        gateway: \\\\\\\\\\\\\\\"near.org\\\\\\\\\\\\\\\",\\\\\\\\n        widgetSrc: \\\\\\\\\\\\\\\"devhub.near/widget/app\\\\\\\\\\\\\\\",\\\\\\\\n        params: { page: \\\\\\\\\\\\\\\"community\\\\\\\\\\\\\\\", handle },\\\\\\\\n      }),\\\\\\\\n      permissions,\\\\\\\\n      // TODO: REMOVE AFTER MIGRATION.\\\\\\\\n      nearDevGovGigsWidgetsAccountId: \\\\\\\\\\\\\\\"devhub.near\\\\\\\\\\\\\\\",\\\\\\\\n      nearDevGovGigsWidgetsAccountId: \\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\",\\\\\\\\n    }}\\\\\\\\n  />\\\\\\\\n);\\\\\\\\n\"}, \"devhub.entity.addon.kanban.Viewer\": {\"\": \"const { href } = VM.require(\\\\\\\\\\\\\\\"devhub.near/widget/core.lib.url\\\\\\\\\\\\\\\");\\\\\\\\n\\\\\\\\nhref || (href = () => {});\\\\\\\\n\\\\\\\\nconst { metadata, payload, handle, permissions } = props;\\\\\\\\n// TODO: Convert this viewer to display the provided data via metadata, payload\\\\\\\\n\\\\\\\\nconst CommunityBoardPage = ({ handle, permissions }) => {\\\\\\\\n  return (\\\\\\\\n    <Widget\\\\\\\\n      // TODO: LEGACY.\\\\\\\\n      src=\\\\\\\\\\\\\\\"devhub.near/widget/gigs-board.entity.workspace.view.kanban.configurator\\\\\\\\\\\\\\\"\\\\\\\\n      props={{\\\\\\\\n        communityHandle: handle, // rather than fetching again via the handle\\\\\\\\n        link: href({\\\\\\\\n          // do we need a link?\\\\\\\\n          gateway: \\\\\\\\\\\\\\\"near.org\\\\\\\\\\\\\\\",\\\\\\\\n          widgetSrc: \\\\\\\\\\\\\\\"devhub.near/widget/app\\\\\\\\\\\\\\\",\\\\\\\\n          params: { page: \\\\\\\\\\\\\\\"community\\\\\\\\\\\\\\\", handle },\\\\\\\\n        }),\\\\\\\\n        permissions,\\\\\\\\n        // TODO: REMOVE AFTER MIGRATION.\\\\\\\\n        nearDevGovGigsWidgetsAccountId: \\\\\\\\\\\\\\\"devhub.near\\\\\\\\\\\\\\\",\\\\\\\\n        nearDevGovGigsWidgetsAccountId: \\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\",\\\\\\\\n      }}\\\\\\\\n    />\\\\\\\\n  );\\\\\\\\n};\\\\\\\\n\\\\\\\\nreturn CommunityBoardPage(props);\\\\\\\\n\"}, \"devhub.feature.post-search.by-tag\": {\"\": \"const { getAllLabels } = VM.require(\\\\\\\\n  \\\\\\\\\\\\\\\"devhub.near/widget/core.adapter.devhub-contract\\\\\\\\\\\\\\\"\\\\\\\\n);\\\\\\\\n\\\\\\\\nif (!getAllLabels) {\\\\\\\\n  return <p>Loading modules...</p>;\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst selectedTags = props.tag ? [{ name: props.tag }] : [];\\\\\\\\n\\\\\\\\nconst tags = getAllLabels();\\\\\\\\n\\\\\\\\nif (tags === null) {\\\\\\\\n  return <div>Loading ...</div>;\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst onChange = (selectedTags) => props.onTagSearch?.(selectedTags[0]?.name);\\\\\\\\n\\\\\\\\nreturn (\\\\\\\\n  <Typeahead\\\\\\\\n    clearButton\\\\\\\\n    id=\\\\\\\\\\\\\\\"basic-typeahead-single\\\\\\\\\\\\\\\"\\\\\\\\n    labelKey=\\\\\\\\\\\\\\\"name\\\\\\\\\\\\\\\"\\\\\\\\n    options={tags.map((tag) => ({ name: tag }))}\\\\\\\\n    placeholder=\\\\\\\\\\\\\\\"Search by tag\\\\\\\\\\\\\\\"\\\\\\\\n    selected={selectedTags}\\\\\\\\n    {...{ onChange }}\\\\\\\\n  />\\\\\\\\n);\\\\\\\\n\"}, \"devhub.entity.addon.telegram.Viewer\": {\"\": \"const { handles } = props;\\\\\\\\n\\\\\\\\nconst CenteredMessage = styled.div`\\\\\\\\n  display: flex;\\\\\\\\n  flex-direction: column;\\\\\\\\n  justify-content: center;\\\\\\\\n  align-items: center;\\\\\\\\n  width: 100%;\\\\\\\\n  height: ${(p) => p.height ?? \\\\\\\\\\\\\\\"100%\\\\\\\\\\\\\\\"};\\\\\\\\n`;\\\\\\\\n\\\\\\\\nif (!handles || handles.length === 0) {\\\\\\\\n  return (\\\\\\\\n    <CenteredMessage height={\\\\\\\\\\\\\\\"384px\\\\\\\\\\\\\\\"}>\\\\\\\\n      <h2>No Telegram Configured</h2>\\\\\\\\n    </CenteredMessage>\\\\\\\\n  );\\\\\\\\n} else {\\\\\\\\n  return (\\\\\\\\n    <div>\\\\\\\\n      {(handles || []).map((tg) => (\\\\\\\\n        <>\\\\\\\\n          <iframe\\\\\\\\n            iframeResizer\\\\\\\\n            src={\\\\\\\\n              \\\\\\\\\\\\\\\"https://j96g3uepe0.execute-api.us-east-1.amazonaws.com/groups-ui/\\\\\\\\\\\\\\\" +\\\\\\\\n              tg\\\\\\\\n            }\\\\\\\\n            frameborder=\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\"\\\\\\\\n            // width and minWidth required by iframeResizer\\\\\\\\n            style={{\\\\\\\\n              width: \\\\\\\\\\\\\\\"1px\\\\\\\\\\\\\\\",\\\\\\\\n              minWidth: \\\\\\\\\\\\\\\"100%\\\\\\\\\\\\\\\",\\\\\\\\n              marginTop: \\\\\\\\\\\\\\\"20px\\\\\\\\\\\\\\\",\\\\\\\\n            }}\\\\\\\\n          ></iframe>\\\\\\\\n\\\\\\\\n          <a href={\\\\\\\\\\\\\\\"https://t.me/\\\\\\\\\\\\\\\" + tg} target=\\\\\\\\\\\\\\\"_blank\\\\\\\\\\\\\\\">\\\\\\\\n            <Widget\\\\\\\\n              src={\\\\\\\\\\\\\\\"devhub.near/widget/devhub.components.molecule.Button\\\\\\\\\\\\\\\"}\\\\\\\\n              props={{\\\\\\\\n                classNames: { root: \\\\\\\\\\\\\\\"btn-primary\\\\\\\\\\\\\\\" },\\\\\\\\n                label: \\\\\\\\\\\\\\\"View More\\\\\\\\\\\\\\\",\\\\\\\\n              }}\\\\\\\\n            />\\\\\\\\n          </a>\\\\\\\\n        </>\\\\\\\\n      ))}\\\\\\\\n    </div>\\\\\\\\n  );\\\\\\\\n}\\\\\\\\n\"}, \"devhub.page.community.configuration\": {\"\": \"const { Tile } =\\\\\\\\n  VM.require(\\\\\\\\\\\\\\\"devhub.near/widget/devhub.components.molecule.Tile\\\\\\\\\\\\\\\") ||\\\\\\\\n  (() => <></>);\\\\\\\\n\\\\\\\\nconst {\\\\\\\\n  permissions,\\\\\\\\n  handle,\\\\\\\\n  community,\\\\\\\\n  setCommunityAddons,\\\\\\\\n  deleteCommunity,\\\\\\\\n  updateCommunity,\\\\\\\\n} = props;\\\\\\\\n\\\\\\\\nconst [communityData, setCommunityData] = useState(community || {});\\\\\\\\nconst [selectedAddon, setSelectedAddon] = useState(null);\\\\\\\\nconst [hasUnsavedChanges, setHasUnsavedChanges] = useState(false);\\\\\\\\n\\\\\\\\nconst sectionSubmit = (sectionData) => {\\\\\\\\n  const updatedCommunityData = {\\\\\\\\n    ...Object.entries(sectionData).reduce(\\\\\\\\n      (update, [propertyKey, propertyValue]) => ({\\\\\\\\n        ...update,\\\\\\\\n\\\\\\\\n        [propertyKey]:\\\\\\\\n          typeof propertyValue !== \\\\\\\\\\\\\\\"string\\\\\\\\\\\\\\\" || (propertyValue?.length ?? 0) > 0\\\\\\\\n            ? propertyValue ?? null\\\\\\\\n            : null,\\\\\\\\n      }),\\\\\\\\n\\\\\\\\n      communityData\\\\\\\\n    ),\\\\\\\\n  };\\\\\\\\n  setCommunityData(updatedCommunityData);\\\\\\\\n  setHasUnsavedChanges(true);\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst hasConfigurePermissions = permissions.can_configure;\\\\\\\\nconst hasDeletePermissions = permissions.can_delete;\\\\\\\\n\\\\\\\\nreturn (\\\\\\\\n  <div\\\\\\\\n    className=\\\\\\\\\\\\\\\"d-flex flex-column align-items-center gap-4 w-100 p-4\\\\\\\\\\\\\\\"\\\\\\\\n    style={{ maxWidth: 960, marginBottom: \\\\\\\\\\\\\\\"60px\\\\\\\\\\\\\\\" }}\\\\\\\\n  >\\\\\\\\n    <Tile className={\\\\\\\\\\\\\\\"bg-white\\\\\\\\\\\\\\\"}>\\\\\\\\n      <Widget\\\\\\\\n        src={\\\\\\\\n          \\\\\\\\\\\\\\\"devhub.near/widget/devhub.entity.community.configuration.BrandingConfigurator\\\\\\\\\\\\\\\"\\\\\\\\n        }\\\\\\\\n        props={{\\\\\\\\n          onSubmit: sectionSubmit,\\\\\\\\n          data: communityData,\\\\\\\\n          hasConfigurePermissions,\\\\\\\\n          link: `/devhub.near/widget/app?page=community&handle=${handle}`,\\\\\\\\n        }}\\\\\\\\n      />\\\\\\\\n    </Tile>\\\\\\\\n    <Tile className={\\\\\\\\\\\\\\\"p-3 bg-white\\\\\\\\\\\\\\\"}>\\\\\\\\n      <Widget\\\\\\\\n        src={\\\\\\\\n          \\\\\\\\\\\\\\\"devhub.near/widget/devhub.entity.community.configuration.ConfigurationSection\\\\\\\\\\\\\\\"\\\\\\\\n        }\\\\\\\\n        props={{\\\\\\\\n          title: \\\\\\\\\\\\\\\"Community Information\\\\\\\\\\\\\\\",\\\\\\\\n          hasConfigurePermissions,\\\\\\\\n          Configurator: (p) => (\\\\\\\\n            <Widget\\\\\\\\n              src={\\\\\\\\n                \\\\\\\\\\\\\\\"devhub.near/widget/devhub.entity.community.configuration.InformationConfigurator\\\\\\\\\\\\\\\"\\\\\\\\n              }\\\\\\\\n              props={{\\\\\\\\n                data: communityData,\\\\\\\\n                onSubmit: sectionSubmit,\\\\\\\\n                ...p,\\\\\\\\n              }}\\\\\\\\n            />\\\\\\\\n          ),\\\\\\\\n        }}\\\\\\\\n      />\\\\\\\\n    </Tile>\\\\\\\\n    <Tile className={\\\\\\\\\\\\\\\"p-3 bg-white\\\\\\\\\\\\\\\"}>\\\\\\\\n      <Widget\\\\\\\\n        src={\\\\\\\\n          \\\\\\\\\\\\\\\"devhub.near/widget/devhub.entity.community.configuration.ConfigurationSection\\\\\\\\\\\\\\\"\\\\\\\\n        }\\\\\\\\n        props={{\\\\\\\\n          title: \\\\\\\\\\\\\\\"About\\\\\\\\\\\\\\\",\\\\\\\\n          hasConfigurePermissions,\\\\\\\\n          Configurator: (p) => (\\\\\\\\n            <Widget\\\\\\\\n              src={\\\\\\\\n                \\\\\\\\\\\\\\\"devhub.near/widget/devhub.entity.community.configuration.AboutConfigurator\\\\\\\\\\\\\\\"\\\\\\\\n              }\\\\\\\\n              props={{\\\\\\\\n                data: communityData,\\\\\\\\n                onSubmit: sectionSubmit,\\\\\\\\n                ...p,\\\\\\\\n              }}\\\\\\\\n            />\\\\\\\\n          ),\\\\\\\\n        }}\\\\\\\\n      />\\\\\\\\n    </Tile>\\\\\\\\n    <Tile className={\\\\\\\\\\\\\\\"p-3 bg-white\\\\\\\\\\\\\\\"}>\\\\\\\\n      <Widget\\\\\\\\n        src={\\\\\\\\n          \\\\\\\\\\\\\\\"devhub.near/widget/devhub.entity.community.configuration.ConfigurationSection\\\\\\\\\\\\\\\"\\\\\\\\n        }\\\\\\\\n        props={{\\\\\\\\n          title: \\\\\\\\\\\\\\\"Access Control\\\\\\\\\\\\\\\",\\\\\\\\n          hasConfigurePermissions,\\\\\\\\n          Configurator: (p) => (\\\\\\\\n            <Widget\\\\\\\\n              src={\\\\\\\\n                \\\\\\\\\\\\\\\"devhub.near/widget/devhub.entity.community.configuration.AccessControlConfigurator\\\\\\\\\\\\\\\"\\\\\\\\n              }\\\\\\\\n              props={{\\\\\\\\n                data: communityData,\\\\\\\\n                onSubmit: sectionSubmit,\\\\\\\\n                ...p,\\\\\\\\n              }}\\\\\\\\n            />\\\\\\\\n          ),\\\\\\\\n        }}\\\\\\\\n      />\\\\\\\\n    </Tile>\\\\\\\\n    {hasConfigurePermissions && (\\\\\\\\n      <Tile className={\\\\\\\\\\\\\\\"p-3 bg-white\\\\\\\\\\\\\\\"}>\\\\\\\\n        <Widget\\\\\\\\n          src={\\\\\\\\n            \\\\\\\\\\\\\\\"devhub.near/widget/devhub.entity.community.configuration.ConfigurationSection\\\\\\\\\\\\\\\"\\\\\\\\n          }\\\\\\\\n          props={{\\\\\\\\n            title: \\\\\\\\\\\\\\\"Add-Ons\\\\\\\\\\\\\\\",\\\\\\\\n            hasConfigurePermissions,\\\\\\\\n            Configurator: (p) => (\\\\\\\\n              <Widget\\\\\\\\n                src={\\\\\\\\n                  \\\\\\\\\\\\\\\"devhub.near/widget/devhub.entity.community.configuration.AddonsConfigurator\\\\\\\\\\\\\\\"\\\\\\\\n                }\\\\\\\\n                props={{\\\\\\\\n                  data: communityData.addons || [],\\\\\\\\n                  onSubmit: (v) => setCommunityAddons({ handle, addons: v }),\\\\\\\\n                  ...p,\\\\\\\\n                }}\\\\\\\\n              />\\\\\\\\n            ),\\\\\\\\n          }}\\\\\\\\n        />\\\\\\\\n      </Tile>\\\\\\\\n    )}\\\\\\\\n    {hasDeletePermissions && (\\\\\\\\n      <div\\\\\\\\n        className=\\\\\\\\\\\\\\\"d-flex justify-content-center gap-4 p-4 w-100\\\\\\\\\\\\\\\"\\\\\\\\n        style={{ maxWidth: 896 }}\\\\\\\\n      >\\\\\\\\n        <Widget\\\\\\\\n          src={\\\\\\\\\\\\\\\"devhub.near/widget/devhub.components.molecule.Button\\\\\\\\\\\\\\\"}\\\\\\\\n          props={{\\\\\\\\n            classNames: { root: \\\\\\\\\\\\\\\"btn-lg btn-outline-danger border-none\\\\\\\\\\\\\\\" },\\\\\\\\n            label: \\\\\\\\\\\\\\\"Delete community\\\\\\\\\\\\\\\",\\\\\\\\n            onClick: () => deleteCommunity({ handle }),\\\\\\\\n          }}\\\\\\\\n        />\\\\\\\\n      </div>\\\\\\\\n    )}\\\\\\\\n    {hasConfigurePermissions && hasUnsavedChanges && (\\\\\\\\n      <div\\\\\\\\n        className=\\\\\\\\\\\\\\\"position-fixed end-0 bottom-0 bg-transparent pe-4 pb-4\\\\\\\\\\\\\\\"\\\\\\\\n        style={{ borderTopLeftRadius: \\\\\\\\\\\\\\\"100%\\\\\\\\\\\\\\\" }}\\\\\\\\n      >\\\\\\\\n        <Widget\\\\\\\\n          src={\\\\\\\\\\\\\\\"devhub.near/widget/devhub.components.molecule.Button\\\\\\\\\\\\\\\"}\\\\\\\\n          props={{\\\\\\\\n            classNames: { root: \\\\\\\\\\\\\\\"btn-lg btn-success\\\\\\\\\\\\\\\" },\\\\\\\\n            icon: { type: \\\\\\\\\\\\\\\"svg_icon\\\\\\\\\\\\\\\", variant: \\\\\\\\\\\\\\\"floppy_drive\\\\\\\\\\\\\\\" },\\\\\\\\n            label: \\\\\\\\\\\\\\\"Save\\\\\\\\\\\\\\\",\\\\\\\\n            onClick: () =>\\\\\\\\n              updateCommunity({ handle, community: communityData }), // TODO : Track changes in State\\\\\\\\n          }}\\\\\\\\n        />\\\\\\\\n      </div>\\\\\\\\n    )}\\\\\\\\n  </div>\\\\\\\\n);\\\\\\\\n\"}, \"devhub.components.island.participate\": {\"\": \"const { href } = VM.require(\\\\\\\\\\\\\\\"devhub.near/widget/core.lib.url\\\\\\\\\\\\\\\");\\\\\\\\n\\\\\\\\nhref || (href = () => {});\\\\\\\\n\\\\\\\\nconst Container = styled.div`\\\\\\\\n  margin-top: 2.25rem;\\\\\\\\n\\\\\\\\n  display: flex;\\\\\\\\n  flex-direction: row;\\\\\\\\n  justify-content: space-between;\\\\\\\\n  width: 100%;\\\\\\\\n\\\\\\\\n  @media screen and (max-width: 768px) {\\\\\\\\n    flex-direction: column;\\\\\\\\n    margin-top: 0;\\\\\\\\n  }\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst LinkItem = styled.a`\\\\\\\\n  color: #00ec97;\\\\\\\\n  font-size: 1.25rem;\\\\\\\\n  font-style: normal;\\\\\\\\n  font-weight: 400;\\\\\\\\n  line-height: 120%; /* 28.8px */\\\\\\\\n\\\\\\\\n  display: flex;\\\\\\\\n  align-items: center;\\\\\\\\n\\\\\\\\n  &:hover {\\\\\\\\n    text-decoration: none;\\\\\\\\n    color: #096d50;\\\\\\\\n  }\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst Links = [\\\\\\\\n  {\\\\\\\\n    links: [\\\\\\\\n      {\\\\\\\\n        title: \\\\\\\\\\\\\\\"Ideate on Devhub\\\\\\\\\\\\\\\",\\\\\\\\n        href: \\\\\\\\\\\\\\\"https://www.neardevgov.org/blog/how-to-ideate-on-dev-hub\\\\\\\\\\\\\\\",\\\\\\\\n        count: 1,\\\\\\\\n      },\\\\\\\\n      {\\\\\\\\n        title: \\\\\\\\\\\\\\\"Post a Proposal\\\\\\\\\\\\\\\",\\\\\\\\n        href: \\\\\\\\\\\\\\\"https://www.neardevgov.org/blog/how-to-post-proposals-on-devhub\\\\\\\\\\\\\\\",\\\\\\\\n        count: 4,\\\\\\\\n      },\\\\\\\\n      {\\\\\\\\n        title: \\\\\\\\\\\\\\\"Host an Event\\\\\\\\\\\\\\\",\\\\\\\\n        href: \\\\\\\\\\\\\\\"https://near.social/devgovgigs.near/widget/app?page=community&handle=hacks&tab=Wiki%202\\\\\\\\\\\\\\\",\\\\\\\\n        count: 7,\\\\\\\\n      },\\\\\\\\n    ],\\\\\\\\n  },\\\\\\\\n  {\\\\\\\\n    links: [\\\\\\\\n      {\\\\\\\\n        title: \\\\\\\\\\\\\\\"Improve NEAR Docs\\\\\\\\\\\\\\\",\\\\\\\\n        href: \\\\\\\\\\\\\\\"https://github.com/near/docs\\\\\\\\\\\\\\\",\\\\\\\\n        count: 2,\\\\\\\\n      },\\\\\\\\n      {\\\\\\\\n        title: \\\\\\\\\\\\\\\"Join the Fellowship\\\\\\\\\\\\\\\",\\\\\\\\n        href: \\\\\\\\\\\\\\\"https://near.social/devgovgigs.near/widget/app?page=community&handle=fellowship&tab=Wiki%201\\\\\\\\\\\\\\\",\\\\\\\\n        count: 5,\\\\\\\\n      },\\\\\\\\n    ],\\\\\\\\n  },\\\\\\\\n  {\\\\\\\\n    links: [\\\\\\\\n      {\\\\\\\\n        title: \\\\\\\\\\\\\\\"Join NEAR Campus\\\\\\\\\\\\\\\",\\\\\\\\n        href: \\\\\\\\\\\\\\\"https://near.social/devgovgigs.near/widget/app?page=community&handle=near-campus\\\\\\\\\\\\\\\",\\\\\\\\n        count: 3,\\\\\\\\n      },\\\\\\\\n      {\\\\\\\\n        title: \\\\\\\\\\\\\\\"Dive into Hackbox\\\\\\\\\\\\\\\",\\\\\\\\n        href: \\\\\\\\\\\\\\\"https://near.social/hackbox.near/widget/home\\\\\\\\\\\\\\\",\\\\\\\\n        count: 6,\\\\\\\\n      },\\\\\\\\n    ],\\\\\\\\n  },\\\\\\\\n];\\\\\\\\n\\\\\\\\nconst CTA = styled.a`\\\\\\\\n  display: flex;\\\\\\\\n  padding: 0.875rem 1rem;\\\\\\\\n  align-items: center;\\\\\\\\n  gap: 0.5rem;\\\\\\\\n\\\\\\\\n  border-radius: 1rem;\\\\\\\\n  background: #00ec97;\\\\\\\\n\\\\\\\\n  color: #f4f4f4 !important;\\\\\\\\n  font-size: 1.5rem;\\\\\\\\n  font-style: normal;\\\\\\\\n  font-weight: 700;\\\\\\\\n  line-height: 120%; /* 28.8px */\\\\\\\\n  letter-spacing: -0.03rem;\\\\\\\\n\\\\\\\\n  width: max-content;\\\\\\\\n  margin-top: 1.5rem;\\\\\\\\n\\\\\\\\n  &:hover {\\\\\\\\n    background: #04a46e;\\\\\\\\n    text-decoration: none !important;\\\\\\\\n  }\\\\\\\\n\\\\\\\\n  @media screen and (max-width: 768px) {\\\\\\\\n    color: #f4f4f4 !important;\\\\\\\\n    font-size: 20px;\\\\\\\\n    font-style: normal;\\\\\\\\n    font-weight: 700;\\\\\\\\n    line-height: 120%; /* 24px */\\\\\\\\n\\\\\\\\n    display: flex;\\\\\\\\n    padding: 14px 16px;\\\\\\\\n    align-items: center;\\\\\\\\n    gap: 8px;\\\\\\\\n\\\\\\\\n    border-radius: 16px;\\\\\\\\n    background: #04a46e;\\\\\\\\n\\\\\\\\n    &:hover {\\\\\\\\n      //background: #04A46E;\\\\\\\\n      text-decoration: none;\\\\\\\\n    }\\\\\\\\n  }\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst SectionPadding = styled.div`\\\\\\\\n  padding: 3rem;\\\\\\\\n  padding-top: 0;\\\\\\\\n\\\\\\\\n  display: flex;\\\\\\\\n  flex-direction: column;\\\\\\\\n\\\\\\\\n  @media screen and (max-width: 768px) {\\\\\\\\n    padding: 1rem;\\\\\\\\n    padding-top: 0;\\\\\\\\n  }\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst LinksContainer = styled.div`\\\\\\\\n  width: 30%;\\\\\\\\n\\\\\\\\n  @media screen and (max-width: 768px) {\\\\\\\\n    width: 100%;\\\\\\\\n    margin-bottom: 1rem;\\\\\\\\n  }\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst Content = (\\\\\\\\n  <SectionPadding>\\\\\\\\n    <Container>\\\\\\\\n      {Links.map((it) => (\\\\\\\\n        <LinksContainer key={Math.random()}>\\\\\\\\n          <div className=\\\\\\\\\\\\\\\"d-flex flex-column gap-3 gap-md-2\\\\\\\\\\\\\\\">\\\\\\\\n            {it.links.map((link) => (\\\\\\\\n              <div className=\\\\\\\\\\\\\\\"d-flex flex-row\\\\\\\\\\\\\\\">\\\\\\\\n                <span\\\\\\\\n                  style={{\\\\\\\\n                    color: \\\\\\\\\\\\\\\"#04A46E\\\\\\\\\\\\\\\",\\\\\\\\n                    border: \\\\\\\\\\\\\\\"2px #04A46E solid\\\\\\\\\\\\\\\",\\\\\\\\n                    fontSize: 12,\\\\\\\\n                    padding: 4,\\\\\\\\n                    width: 22,\\\\\\\\n                    height: 22,\\\\\\\\n                  }}\\\\\\\\n                  className=\\\\\\\\\\\\\\\"rounded-circle d-flex align-items-center justify-content-center me-1\\\\\\\\\\\\\\\"\\\\\\\\n                >\\\\\\\\n                  {link.count}\\\\\\\\n                </span>{\\\\\\\\\\\\\\\" \\\\\\\\\\\\\\\"}\\\\\\\\n                <LinkItem href={link.href} target=\\\\\\\\\\\\\\\"no_blank\\\\\\\\\\\\\\\">\\\\\\\\n                  {link.title}\\\\\\\\n                </LinkItem>\\\\\\\\n              </div>\\\\\\\\n            ))}\\\\\\\\n          </div>\\\\\\\\n        </LinksContainer>\\\\\\\\n      ))}\\\\\\\\n    </Container>\\\\\\\\n\\\\\\\\n    <Link\\\\\\\\n      to={href({\\\\\\\\n        widgetSrc: \\\\\\\\\\\\\\\"devhub.near/widget/app\\\\\\\\\\\\\\\",\\\\\\\\n        params: { page: \\\\\\\\\\\\\\\"contribute\\\\\\\\\\\\\\\" },\\\\\\\\n      })}\\\\\\\\n      style={{ textDecoration: \\\\\\\\\\\\\\\"none\\\\\\\\\\\\\\\" }}\\\\\\\\n    >\\\\\\\\n      <CTA>Learn more \\\\\\\\u{2192}</CTA>\\\\\\\\n    </Link>\\\\\\\\n  </SectionPadding>\\\\\\\\n);\\\\\\\\n\\\\\\\\nreturn (\\\\\\\\n  <Widget\\\\\\\\n    src=\\\\\\\\\\\\\\\"devhub.near/widget/devhub.components.island.home-section\\\\\\\\\\\\\\\"\\\\\\\\n    props={{\\\\\\\\n      title: \\\\\\\\\\\\\\\"/participate\\\\\\\\\\\\\\\",\\\\\\\\n      titleColor: \\\\\\\\\\\\\\\"#04A46E\\\\\\\\\\\\\\\",\\\\\\\\n      description:\\\\\\\\n        \\\\\\\\\\\\\\\"There are many ways to start your contribution journey. You can:\\\\\\\\\\\\\\\",\\\\\\\\n      children: Content,\\\\\\\\n    }}\\\\\\\\n  />\\\\\\\\n);\\\\\\\\n\"}, \"devhub.entity.addon.blog.editor.form\": {\"\": \"const FormContainer = styled.div`\\\\\\\\n  & > *:not(:last-child) {\\\\\\\\n    margin-bottom: 1rem;\\\\\\\\n  }\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst {\\\\\\\\n  title,\\\\\\\\n  setTitle,\\\\\\\\n  subtitle,\\\\\\\\n  setSubtitle,\\\\\\\\n  options,\\\\\\\\n  category,\\\\\\\\n  setCategory,\\\\\\\\n  description,\\\\\\\\n  setDescription,\\\\\\\\n  debouncedUpdateState,\\\\\\\\n  author,\\\\\\\\n  setAuthor,\\\\\\\\n  date,\\\\\\\\n  setDate,\\\\\\\\n  content,\\\\\\\\n  setContent,\\\\\\\\n} = props;\\\\\\\\n\\\\\\\\nconst TitleInput = ({ title, setTitle }) => {\\\\\\\\n  return (\\\\\\\\n    <div>\\\\\\\\n      <h5>Title</h5>\\\\\\\\n      <div className=\\\\\\\\\\\\\\\"flex-grow-1\\\\\\\\\\\\\\\">\\\\\\\\n        <Widget\\\\\\\\n          src=\\\\\\\\\\\\\\\"devhub.near/widget/devhub.components.molecule.Input\\\\\\\\\\\\\\\"\\\\\\\\n          props={{\\\\\\\\n            className: \\\\\\\\\\\\\\\"flex-grow-1\\\\\\\\\\\\\\\",\\\\\\\\n            onChange: (e) => setTitle(e.target.value),\\\\\\\\n            value: title,\\\\\\\\n            placeholder: \\\\\\\\\\\\\\\"Title\\\\\\\\\\\\\\\",\\\\\\\\n            inputProps: { name: \\\\\\\\\\\\\\\"title\\\\\\\\\\\\\\\" },\\\\\\\\n          }}\\\\\\\\n        />\\\\\\\\n      </div>\\\\\\\\n    </div>\\\\\\\\n  );\\\\\\\\n};\\\\\\\\nconst SubtitleInput = ({ subtitle, setSubtitle }) => {\\\\\\\\n  return (\\\\\\\\n    <div>\\\\\\\\n      <h5>Subtitle</h5>\\\\\\\\n      <div className=\\\\\\\\\\\\\\\"flex-grow-1\\\\\\\\\\\\\\\">\\\\\\\\n        <Widget\\\\\\\\n          src=\\\\\\\\\\\\\\\"devhub.near/widget/devhub.components.molecule.Input\\\\\\\\\\\\\\\"\\\\\\\\n          props={{\\\\\\\\n            className: \\\\\\\\\\\\\\\"flex-grow-1\\\\\\\\\\\\\\\",\\\\\\\\n            onChange: (e) => setSubtitle(e.target.value),\\\\\\\\n            value: subtitle,\\\\\\\\n            placeholder: \\\\\\\\\\\\\\\"Subtitle\\\\\\\\\\\\\\\",\\\\\\\\n            inputProps: { name: \\\\\\\\\\\\\\\"subtitle\\\\\\\\\\\\\\\" },\\\\\\\\n          }}\\\\\\\\n        />\\\\\\\\n      </div>\\\\\\\\n    </div>\\\\\\\\n  );\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst CategorySelect = ({ options, category, setCategory }) => {\\\\\\\\n  return (\\\\\\\\n    <div>\\\\\\\\n      <h5>Category</h5>\\\\\\\\n      <div className=\\\\\\\\\\\\\\\"flex-grow-1\\\\\\\\\\\\\\\">\\\\\\\\n        <Widget\\\\\\\\n          src={\\\\\\\\\\\\\\\"devhub.near/widget/devhub.components.molecule.Select\\\\\\\\\\\\\\\"}\\\\\\\\n          props={{\\\\\\\\n            className: \\\\\\\\\\\\\\\"flex-grow-1\\\\\\\\\\\\\\\",\\\\\\\\n            options,\\\\\\\\n            value: category,\\\\\\\\n            onChange: (e) => setCategory(e.target.value),\\\\\\\\n            placeholder: \\\\\\\\\\\\\\\"Select a category\\\\\\\\\\\\\\\",\\\\\\\\n          }}\\\\\\\\n        />\\\\\\\\n      </div>\\\\\\\\n    </div>\\\\\\\\n  );\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst DescriptionInput = ({ description, setDescription }) => {\\\\\\\\n  return (\\\\\\\\n    <div>\\\\\\\\n      <h5>Description</h5>\\\\\\\\n      <div className=\\\\\\\\\\\\\\\"flex-grow-1\\\\\\\\\\\\\\\">\\\\\\\\n        <Widget\\\\\\\\n          src=\\\\\\\\\\\\\\\"devhub.near/widget/devhub.components.molecule.Input\\\\\\\\\\\\\\\"\\\\\\\\n          props={{\\\\\\\\n            className: \\\\\\\\\\\\\\\"flex-grow-1\\\\\\\\\\\\\\\",\\\\\\\\n            onChange: (e) => setDescription(e.target.value),\\\\\\\\n            value: description,\\\\\\\\n            placeholder: \\\\\\\\\\\\\\\"Description\\\\\\\\\\\\\\\",\\\\\\\\n            inputProps: { name: \\\\\\\\\\\\\\\"description\\\\\\\\\\\\\\\" },\\\\\\\\n          }}\\\\\\\\n        />\\\\\\\\n      </div>\\\\\\\\n    </div>\\\\\\\\n  );\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst AuthorInput = ({ author, setAuthor }) => {\\\\\\\\n  return (\\\\\\\\n    <div>\\\\\\\\n      <h5>Author</h5>\\\\\\\\n      <div className=\\\\\\\\\\\\\\\"flex-grow-1\\\\\\\\\\\\\\\">\\\\\\\\n        <Widget\\\\\\\\n          src=\\\\\\\\\\\\\\\"devhub.near/widget/devhub.components.molecule.Input\\\\\\\\\\\\\\\"\\\\\\\\n          props={{\\\\\\\\n            className: \\\\\\\\\\\\\\\"flex-grow-1\\\\\\\\\\\\\\\",\\\\\\\\n            onChange: (e) => setAuthor(e.target.value),\\\\\\\\n            value: author,\\\\\\\\n            placeholder: \\\\\\\\\\\\\\\"Author\\\\\\\\\\\\\\\",\\\\\\\\n            inputProps: { name: \\\\\\\\\\\\\\\"author\\\\\\\\\\\\\\\" },\\\\\\\\n          }}\\\\\\\\n        />\\\\\\\\n      </div>\\\\\\\\n    </div>\\\\\\\\n  );\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst DateInput = ({ date, setDate }) => {\\\\\\\\n  return (\\\\\\\\n    <div>\\\\\\\\n      <h5>Date</h5>\\\\\\\\n      <input\\\\\\\\n        name=\\\\\\\\\\\\\\\"date\\\\\\\\\\\\\\\"\\\\\\\\n        type=\\\\\\\\\\\\\\\"date\\\\\\\\\\\\\\\"\\\\\\\\n        value={date}\\\\\\\\n        onChange={(e) => setDate(e.target.value)}\\\\\\\\n      />\\\\\\\\n    </div>\\\\\\\\n  );\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst ContentEditor = ({ content, setContent }) => {\\\\\\\\n  return (\\\\\\\\n    <div>\\\\\\\\n      <h5>Content</h5>\\\\\\\\n      <Widget\\\\\\\\n        src=\\\\\\\\\\\\\\\"devhub.near/widget/devhub.components.molecule.MarkdownEditor\\\\\\\\\\\\\\\"\\\\\\\\n        props={{ data: { content }, onChange: setContent }}\\\\\\\\n      />\\\\\\\\n    </div>\\\\\\\\n  );\\\\\\\\n};\\\\\\\\n\\\\\\\\nreturn (\\\\\\\\n  <FormContainer id=\\\\\\\\\\\\\\\"blog-editor-form\\\\\\\\\\\\\\\">\\\\\\\\n    <TitleInput title={title} setTitle={setTitle} />\\\\\\\\n    <SubtitleInput subtitle={subtitle} setSubtitle={setSubtitle} />\\\\\\\\n    <CategorySelect\\\\\\\\n      options={options}\\\\\\\\n      category={category}\\\\\\\\n      setCategory={setCategory}\\\\\\\\n    />\\\\\\\\n    <DescriptionInput\\\\\\\\n      description={description}\\\\\\\\n      setDescription={setDescription}\\\\\\\\n      debouncedUpdateState={debouncedUpdateState}\\\\\\\\n    />\\\\\\\\n    <AuthorInput author={author} setAuthor={setAuthor} />\\\\\\\\n    <DateInput date={date} setDate={setDate} />\\\\\\\\n    <ContentEditor content={content} setContent={setContent} />\\\\\\\\n  </FormContainer>\\\\\\\\n);\\\\\\\\n\"}, \"devhub.feature.post-search.by-author\": {\"\": \"const { getAllAuthors } = VM.require(\\\\\\\\n  \\\\\\\\\\\\\\\"devhub.near/widget/core.adapter.devhub-contract\\\\\\\\\\\\\\\"\\\\\\\\n);\\\\\\\\n\\\\\\\\nif (!getAllAuthors) {\\\\\\\\n  return <p>Loading modules...</p>;\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst selectedAuthors = props.author ? [{ name: props.author }] : [];\\\\\\\\n\\\\\\\\nconst authors = getAllAuthors();\\\\\\\\n\\\\\\\\nif (authors === null) {\\\\\\\\n  return <div>Loading ...</div>;\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst onChange = (selectedAuthors) =>\\\\\\\\n  props.onAuthorSearch(selectedAuthors[0]?.name);\\\\\\\\n\\\\\\\\nreturn (\\\\\\\\n  <Typeahead\\\\\\\\n    clearButton\\\\\\\\n    id=\\\\\\\\\\\\\\\"basic-typeahead-single\\\\\\\\\\\\\\\"\\\\\\\\n    labelKey=\\\\\\\\\\\\\\\"name\\\\\\\\\\\\\\\"\\\\\\\\n    options={authors.map((author) => ({ name: author }))}\\\\\\\\n    placeholder=\\\\\\\\\\\\\\\"Search by author\\\\\\\\\\\\\\\"\\\\\\\\n    selected={selectedAuthors}\\\\\\\\n    {...{ onChange }}\\\\\\\\n  />\\\\\\\\n);\\\\\\\\n\"}, \"devhub.components.island.home-section\": {\"\": \"const title = props.title;\\\\\\\\nconst titleColor = props.titleColor;\\\\\\\\nconst description = props.description;\\\\\\\\nconst children = props.children;\\\\\\\\nconst background = props.background;\\\\\\\\n\\\\\\\\nconst Section = styled.div`\\\\\\\\n  ${background && \\\\\\\\\\\\\\\"background: #292929;\\\\\\\\\\\\\\\"}\\\\\\\\n  ${background && \\\\\\\\\\\\\\\"color: #F4F4F4;\\\\\\\\\\\\\\\"}\\\\\\\\n  width: 100%;\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst SectionHeader = styled.h2`\\\\\\\\n  color: ${titleColor || \\\\\\\\\\\\\\\"#00ec97\\\\\\\\\\\\\\\"};\\\\\\\\n  font-size: 1.5rem;\\\\\\\\n  font-style: normal;\\\\\\\\n  font-weight: 400;\\\\\\\\n  line-height: 120%; /* 28.8px */\\\\\\\\n  letter-spacing: -0.24px;\\\\\\\\n\\\\\\\\n  @media screen and (max-width: 768px) {\\\\\\\\n    font-size: 1.25rem;\\\\\\\\n  }\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst SectionDescription = styled.h3`\\\\\\\\n  color: #151515;\\\\\\\\n  font-size: 2.25rem;\\\\\\\\n  font-style: normal;\\\\\\\\n  font-weight: 700;\\\\\\\\n  line-height: 110%; /* 39.6px */\\\\\\\\n  letter-spacing: -0.72px;\\\\\\\\n\\\\\\\\n  margin-bottom: 2.25rem;\\\\\\\\n  margin-top: 2.25rem;\\\\\\\\n\\\\\\\\n  max-width: 40rem;\\\\\\\\n\\\\\\\\n  @media screen and (max-width: 768px) {\\\\\\\\n    margin-bottom: 1.5rem;\\\\\\\\n    margin-top: 1.5rem;\\\\\\\\n    font-size: 1.5rem;\\\\\\\\n  }\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst Container = styled.div`\\\\\\\\n  padding: 3rem;\\\\\\\\n  padding-bottom: 0;\\\\\\\\n\\\\\\\\n  @media screen and (max-width: 768px) {\\\\\\\\n    padding: 1rem;\\\\\\\\n  }\\\\\\\\n`;\\\\\\\\n\\\\\\\\nreturn (\\\\\\\\n  <Section>\\\\\\\\n    <Container>\\\\\\\\n      <SectionHeader>{title}</SectionHeader>\\\\\\\\n      {description && <SectionDescription>{description}</SectionDescription>}\\\\\\\\n    </Container>\\\\\\\\n    {children}\\\\\\\\n  </Section>\\\\\\\\n);\\\\\\\\n\"}, \"devhub.components.molecule.BadgesList\": {\"\": \"const { href } = VM.require(\\\\\\\\\\\\\\\"devhub.near/widget/core.lib.url\\\\\\\\\\\\\\\") || (() => {});\\\\\\\\n\\\\\\\\nconst nearDevGovBadgesContractId = \\\\\\\\\\\\\\\"neardevgov.near\\\\\\\\\\\\\\\";\\\\\\\\n\\\\\\\\nlet badges = props.badges;\\\\\\\\nconst mode = props.mode || \\\\\\\\\\\\\\\"normal\\\\\\\\\\\\\\\";\\\\\\\\n\\\\\\\\nif (!badges) {\\\\\\\\n  const accountId = props.accountId || context.accountId;\\\\\\\\n  const ownedBadges = Near.view(\\\\\\\\n    nearDevGovBadgesContractId,\\\\\\\\n    \\\\\\\\\\\\\\\"nft_tokens_for_owner\\\\\\\\\\\\\\\",\\\\\\\\n    {\\\\\\\\n      account_id: accountId,\\\\\\\\n    }\\\\\\\\n  );\\\\\\\\n  if (!ownedBadges) {\\\\\\\\n    return <>{mode === \\\\\\\\\\\\\\\"compact\\\\\\\\\\\\\\\" ? \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\" : \\\\\\\\\\\\\\\"Loading...\\\\\\\\\\\\\\\"}</>;\\\\\\\\n  }\\\\\\\\n  badges = ownedBadges;\\\\\\\\n}\\\\\\\\n\\\\\\\\nlet style;\\\\\\\\nif (mode === \\\\\\\\\\\\\\\"normal\\\\\\\\\\\\\\\") {\\\\\\\\n  style = { width: \\\\\\\\\\\\\\\"3em\\\\\\\\\\\\\\\", height: \\\\\\\\\\\\\\\"3em\\\\\\\\\\\\\\\" };\\\\\\\\n} else if (mode === \\\\\\\\\\\\\\\"compact\\\\\\\\\\\\\\\") {\\\\\\\\n  style = { width: \\\\\\\\\\\\\\\"1.5em\\\\\\\\\\\\\\\", height: \\\\\\\\\\\\\\\"1.5em\\\\\\\\\\\\\\\" };\\\\\\\\n}\\\\\\\\nif (props.style) {\\\\\\\\n  style = props.style;\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst renderedBadgesList = badges.map(({ token_id: tokenId, metadata }) => (\\\\\\\\n  <Link\\\\\\\\n    to={`/neardevgov.near/widget/BadgeDetails?tokenId=${tokenId}`}\\\\\\\\n    title={`NEAR DevGov Badge - ${metadata.title}`}\\\\\\\\n  >\\\\\\\\n    <Widget\\\\\\\\n      src=\\\\\\\\\\\\\\\"mob.near/widget/NftImage\\\\\\\\\\\\\\\"\\\\\\\\n      props={{\\\\\\\\n        style,\\\\\\\\n        nft: {\\\\\\\\n          tokenMetadata: metadata,\\\\\\\\n          contractId: nearDevGovBadgesContractId,\\\\\\\\n        },\\\\\\\\n        alt: `NEAR DevGov Badge - ${metadata.title}`,\\\\\\\\n      }}\\\\\\\\n    />\\\\\\\\n    {mode === \\\\\\\\\\\\\\\"compact\\\\\\\\\\\\\\\" ? null : metadata.title}\\\\\\\\n  </Link>\\\\\\\\n));\\\\\\\\n\\\\\\\\nif (mode === \\\\\\\\\\\\\\\"compact\\\\\\\\\\\\\\\") {\\\\\\\\n  return <>{renderedBadgesList}</>;\\\\\\\\n} else {\\\\\\\\n  return (\\\\\\\\n    <ul>\\\\\\\\n      {renderedBadgesList.map((renderedBadge) => (\\\\\\\\n        <li style={{ listStyleType: \\\\\\\\\\\\\\\"none\\\\\\\\\\\\\\\" }}>{renderedBadge}</li>\\\\\\\\n      ))}\\\\\\\\n    </ul>\\\\\\\\n  );\\\\\\\\n}\\\\\\\\n\"}, \"devhub.components.organism.NewsLetter\": {\"\": \"const page = props.page;\\\\\\\\nconst imageLink =\\\\\\\\n  \\\\\\\\\\\\\\\"https://ipfs.near.social/ipfs/bafkreiatybj6g6i4b4azcu3zoutlcxobrzpg3k4taazhkyd7sk5tuwmb5q\\\\\\\\\\\\\\\";\\\\\\\\n\\\\\\\\nconst Footer = styled.div`\\\\\\\\n  width: 100%;\\\\\\\\n  background-color: #00ec97;\\\\\\\\n  padding: 1.5rem;\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst Title = styled.h5`\\\\\\\\n  color: #151515;\\\\\\\\n  text-align: center;\\\\\\\\n  font-size: 1.75rem;\\\\\\\\n  font-style: normal;\\\\\\\\n  font-weight: 700;\\\\\\\\n  line-height: 120%; /* 43.2px */\\\\\\\\n  margin: 0;\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst Description = styled.p`\\\\\\\\n  color: #151515;\\\\\\\\n  text-align: center;\\\\\\\\n  font-size: 1rem;\\\\\\\\n  font-style: normal;\\\\\\\\n  font-weight: 400;\\\\\\\\n  line-height: 120%; /* 28.8px */\\\\\\\\n  letter-spacing: -0.72px;\\\\\\\\n  margin: 0;\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst MidContainer = styled.div`\\\\\\\\n  width: 720px;\\\\\\\\n  display: flex;\\\\\\\\n  width: 100%;\\\\\\\\n  flex-direction: column;\\\\\\\\n  gap: 1rem;\\\\\\\\n  align-items: center;\\\\\\\\n  ${(page === \\\\\\\\\\\\\\\"community\\\\\\\\\\\\\\\" || page === \\\\\\\\\\\\\\\"communities\\\\\\\\\\\\\\\" || page === \\\\\\\\\\\\\\\"feed\\\\\\\\\\\\\\\") &&\\\\\\\\n  \\\\\\\\\\\\\\\"display: none;\\\\\\\\\\\\\\\"}\\\\\\\\n`;\\\\\\\\n\\\\\\\\n// const CTA = styled.a`\\\\\\\\n//   background: #151515;\\\\\\\\n//   padding: 0.75rem 0.75rem;\\\\\\\\n//   color: #00ec97 !important;\\\\\\\\n//   font-size: 1rem;\\\\\\\\n//   font-style: normal;\\\\\\\\n//   font-weight: 700;\\\\\\\\n//   line-height: 20px; /* 83.333% */\\\\\\\\n//   &:hover {\\\\\\\\n//     text-decoration: none;\\\\\\\\n//   }\\\\\\\\n// `;\\\\\\\\n\\\\\\\\nconst CTA = styled.a`\\\\\\\\n  display: inline-flex;\\\\\\\\n  padding: 0.875rem 1rem;\\\\\\\\n  align-items: center;\\\\\\\\n  gap: 0.5rem;\\\\\\\\n\\\\\\\\n  border-radius: 1rem;\\\\\\\\n  border: 1px solid #151515;\\\\\\\\n\\\\\\\\n  color: #151515 !important;\\\\\\\\n  font-size: 1.25rem;\\\\\\\\n  font-style: normal;\\\\\\\\n  font-weight: 700;\\\\\\\\n  line-height: 120%; /* 28.8px */\\\\\\\\n  letter-spacing: -0.48px;\\\\\\\\n\\\\\\\\n  &:hover {\\\\\\\\n    background: #151515;\\\\\\\\n    color: #f4f4f4 !important;\\\\\\\\n    text-decoration: none; // Remove underline on hover\\\\\\\\n  }\\\\\\\\n\\\\\\\\n  @media screen and (max-width: 768px) {\\\\\\\\n    display: inline-flex;\\\\\\\\n    padding: 8px 16px;\\\\\\\\n    align-items: center;\\\\\\\\n    gap: 8px;\\\\\\\\n\\\\\\\\n    border-radius: 16px;\\\\\\\\n    background: #151515;\\\\\\\\n\\\\\\\\n    border: none;\\\\\\\\n\\\\\\\\n    color: #f4f4f4 !important;\\\\\\\\n    font-size: 16px;\\\\\\\\n    font-style: normal;\\\\\\\\n    font-weight: 700;\\\\\\\\n    line-height: 120%; /* 19.2px */\\\\\\\\n    letter-spacing: -0.32px;\\\\\\\\n\\\\\\\\n    &:hover {\\\\\\\\n      background: #151515;\\\\\\\\n      color: #f4f4f4;\\\\\\\\n      text-decoration: none; // Remove underline on hover\\\\\\\\n    }\\\\\\\\n  }\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst SocialLinks = styled.div`\\\\\\\\n  display: flex;\\\\\\\\n  flex-direction: row;\\\\\\\\n  gap: 1rem;\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst XIcon = () => {\\\\\\\\n  return (\\\\\\\\n    <svg\\\\\\\\n      width=\\\\\\\\\\\\\\\"20\\\\\\\\\\\\\\\"\\\\\\\\n      height=\\\\\\\\\\\\\\\"16\\\\\\\\\\\\\\\"\\\\\\\\n      version=\\\\\\\\\\\\\\\"1.1\\\\\\\\\\\\\\\"\\\\\\\\n      xmlns=\\\\\\\\\\\\\\\"http://www.w3.org/2000/svg\\\\\\\\\\\\\\\"\\\\\\\\n      viewBox=\\\\\\\\\\\\\\\"0 0 300 300\\\\\\\\\\\\\\\"\\\\\\\\n    >\\\\\\\\n      <path d=\\\\\\\\\\\\\\\"M178.57 127.15 290.27 0h-26.46l-97.03 110.38L89.34 0H0l117.13 166.93L0 300.25h26.46l102.4-116.59 81.8 116.59h89.34M36.01 19.54H76.66l187.13 262.13h-40.66\\\\\\\\\\\\\\\" />\\\\\\\\n    </svg>\\\\\\\\n  );\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst TelegramIcon = () => {\\\\\\\\n  return (\\\\\\\\n    <svg\\\\\\\\n      xmlns=\\\\\\\\\\\\\\\"http://www.w3.org/2000/svg\\\\\\\\\\\\\\\"\\\\\\\\n      width=\\\\\\\\\\\\\\\"20\\\\\\\\\\\\\\\"\\\\\\\\n      height=\\\\\\\\\\\\\\\"16\\\\\\\\\\\\\\\"\\\\\\\\n      viewBox=\\\\\\\\\\\\\\\"0 0 20 16\\\\\\\\\\\\\\\"\\\\\\\\n      fill=\\\\\\\\\\\\\\\"none\\\\\\\\\\\\\\\"\\\\\\\\n    >\\\\\\\\n      <path\\\\\\\\n        d=\\\\\\\\\\\\\\\"M19.7398 1.45657L16.8608 15.0342C16.6436 15.9924 16.0771 16.2309 15.2721 15.7796L10.8854 12.5469L8.76879 14.5828C8.53463 14.817 8.33866 15.0129 7.8872 15.0129L8.20233 10.5452L16.3327 3.19847C16.6862 2.88334 16.256 2.70869 15.7833 3.02386L5.73217 9.35266L1.40507 7.99835C0.463838 7.70445 0.446834 7.05707 1.60095 6.60566L18.526 0.085202C19.3096 -0.208647 19.9954 0.25977 19.7398 1.45657Z\\\\\\\\\\\\\\\"\\\\\\\\n        fill=\\\\\\\\\\\\\\\"#151515\\\\\\\\\\\\\\\"\\\\\\\\n      />\\\\\\\\n    </svg>\\\\\\\\n  );\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst YoutubeIcon = () => {\\\\\\\\n  return (\\\\\\\\n    <svg\\\\\\\\n      xmlns=\\\\\\\\\\\\\\\"http://www.w3.org/2000/svg\\\\\\\\\\\\\\\"\\\\\\\\n      width=\\\\\\\\\\\\\\\"24\\\\\\\\\\\\\\\"\\\\\\\\n      height=\\\\\\\\\\\\\\\"16\\\\\\\\\\\\\\\"\\\\\\\\n      viewBox=\\\\\\\\\\\\\\\"0 0 24 16\\\\\\\\\\\\\\\"\\\\\\\\n      fill=\\\\\\\\\\\\\\\"none\\\\\\\\\\\\\\\"\\\\\\\\n    >\\\\\\\\n      <path\\\\\\\\n        d=\\\\\\\\\\\\\\\"M23.1744 2.49854C22.9115 1.51517 22.1369 0.740571 21.1535 0.477714C19.3712 -1.21102e-07 12.2235 0 12.2235 0C12.2235 0 5.07581 -1.21102e-07 3.29346 0.477714C2.3101 0.740571 1.53549 1.51517 1.27264 2.49854C0.794922 4.28089 0.794922 8 0.794922 8C0.794922 8 0.794922 11.7191 1.27264 13.5015C1.53549 14.4848 2.3101 15.2594 3.29346 15.5223C5.07581 16 12.2235 16 12.2235 16C12.2235 16 19.3712 16 21.1535 15.5223C22.1369 15.2594 22.9115 14.4848 23.1744 13.5015C23.6521 11.7191 23.6521 8 23.6521 8C23.6521 8 23.6521 4.28089 23.1744 2.49854ZM9.93778 11.4286V4.57143L15.8761 8L9.93778 11.4286Z\\\\\\\\\\\\\\\"\\\\\\\\n        fill=\\\\\\\\\\\\\\\"#151515\\\\\\\\\\\\\\\"\\\\\\\\n      />\\\\\\\\n    </svg>\\\\\\\\n  );\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst ImageContainer = styled.img`\\\\\\\\n  ${page !== \\\\\\\\\\\\\\\"home\\\\\\\\\\\\\\\" && \\\\\\\\\\\\\\\"display: none;\\\\\\\\\\\\\\\"}\\\\\\\\n  height: 280px;\\\\\\\\n  width: 100%;\\\\\\\\n  object-fit: cover;\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst MidContent = () => {\\\\\\\\n  return (\\\\\\\\n    <>\\\\\\\\n      <MidContainer>\\\\\\\\n        <Title>/dev/hub newsletter</Title>\\\\\\\\n        <Description>\\\\\\\\n          Stay in the loop. Get the latest updates, announcements,\\\\\\\\n          <br />\\\\\\\\n          opportunities, and insights from the ecosystem in your inbox.\\\\\\\\n        </Description>\\\\\\\\n        <CTA href=\\\\\\\\\\\\\\\"https://newsletter.neardevhub.org\\\\\\\\\\\\\\\" target=\\\\\\\\\\\\\\\"no_blank\\\\\\\\\\\\\\\">\\\\\\\\n          Subscribe\\\\\\\\n        </CTA>\\\\\\\\n        <SocialLinks>\\\\\\\\n          <a href=\\\\\\\\\\\\\\\"https://twitter.com/NEARDevHub\\\\\\\\\\\\\\\" target=\\\\\\\\\\\\\\\"_blank\\\\\\\\\\\\\\\">\\\\\\\\n            <XIcon />\\\\\\\\n          </a>\\\\\\\\n          <a href=\\\\\\\\\\\\\\\"https://t.me/NEARDevHub\\\\\\\\\\\\\\\" target=\\\\\\\\\\\\\\\"_blank\\\\\\\\\\\\\\\">\\\\\\\\n            <TelegramIcon />\\\\\\\\n          </a>\\\\\\\\n          <a href=\\\\\\\\\\\\\\\"https://www.youtube.com/@NEARDevHub\\\\\\\\\\\\\\\" target=\\\\\\\\\\\\\\\"_blank\\\\\\\\\\\\\\\">\\\\\\\\n            <YoutubeIcon />\\\\\\\\n          </a>\\\\\\\\n        </SocialLinks>\\\\\\\\n      </MidContainer>\\\\\\\\n    </>\\\\\\\\n  );\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst SmallContainer = styled.div`\\\\\\\\n  display: none;\\\\\\\\n  ${(page === \\\\\\\\\\\\\\\"communities\\\\\\\\\\\\\\\" || page === \\\\\\\\\\\\\\\"community\\\\\\\\\\\\\\\" || page === \\\\\\\\\\\\\\\"feed\\\\\\\\\\\\\\\") &&\\\\\\\\n  \\\\\\\\\\\\\\\"display: flex !important;\\\\\\\\\\\\\\\"}\\\\\\\\n  justify-content: space-between;\\\\\\\\n  align-items: center;\\\\\\\\n\\\\\\\\n  @media screen and (max-width: 768px) {\\\\\\\\n    flex-direction: column-reverse;\\\\\\\\n    justify-content: center;\\\\\\\\n    gap: 1rem;\\\\\\\\n    align-items: center;\\\\\\\\n  }\\\\\\\\n`;\\\\\\\\nconst SmallContent = () => {\\\\\\\\n  return (\\\\\\\\n    <SmallContainer>\\\\\\\\n      <SocialLinks>\\\\\\\\n        <a href=\\\\\\\\\\\\\\\"https://twitter.com/NEARDevHub\\\\\\\\\\\\\\\" target=\\\\\\\\\\\\\\\"_blank\\\\\\\\\\\\\\\">\\\\\\\\n          <XIcon />\\\\\\\\n        </a>\\\\\\\\n        <a href=\\\\\\\\\\\\\\\"https://t.me/NEARDevHub\\\\\\\\\\\\\\\" target=\\\\\\\\\\\\\\\"_blank\\\\\\\\\\\\\\\">\\\\\\\\n          <TelegramIcon />\\\\\\\\n        </a>\\\\\\\\n        <a href=\\\\\\\\\\\\\\\"https://www.youtube.com/@NEARDevHub\\\\\\\\\\\\\\\" target=\\\\\\\\\\\\\\\"_blank\\\\\\\\\\\\\\\">\\\\\\\\n          <YoutubeIcon />\\\\\\\\n        </a>\\\\\\\\n      </SocialLinks>\\\\\\\\n      <div className=\\\\\\\\\\\\\\\"d-flex align-items-center gap-3\\\\\\\\\\\\\\\">\\\\\\\\n        <h5 className=\\\\\\\\\\\\\\\"m-0\\\\\\\\\\\\\\\">Subscribe to our newsletter</h5>\\\\\\\\n        <CTA href=\\\\\\\\\\\\\\\"https://newsletter.neardevhub.org\\\\\\\\\\\\\\\" target=\\\\\\\\\\\\\\\"no_blank\\\\\\\\\\\\\\\">\\\\\\\\n          Subscribe\\\\\\\\n        </CTA>\\\\\\\\n      </div>\\\\\\\\n    </SmallContainer>\\\\\\\\n  );\\\\\\\\n};\\\\\\\\n\\\\\\\\nreturn (\\\\\\\\n  <>\\\\\\\\n    <ImageContainer src={imageLink} />\\\\\\\\n    <Footer>\\\\\\\\n      <MidContent />\\\\\\\\n      <SmallContent />\\\\\\\\n    </Footer>\\\\\\\\n  </>\\\\\\\\n);\\\\\\\\n\"}, \"devhub.components.templates.AppLayout\": {\"\": \"const Container = styled.div`\\\\\\\\n  display: flex;\\\\\\\\n  flex-direction: column;\\\\\\\\n  width: 100%;\\\\\\\\n  height: 100%;\\\\\\\\n  min-height: 100vh;\\\\\\\\n\\\\\\\\n  background: #f4f4f4;\\\\\\\\n\\\\\\\\n  margin-top: calc(-1 * var(--body-top-padding));\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst ContentContainer = styled.div`\\\\\\\\n  flex: 1;\\\\\\\\n  display: flex;\\\\\\\\n  flex-direction: column;\\\\\\\\n  align-items: center;\\\\\\\\n  width: 100%;\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst AppHeader = ({ page }) => (\\\\\\\\n  <Widget\\\\\\\\n    src=\\\\\\\\\\\\\\\"devhub.near/widget/devhub.components.organism.Navbar\\\\\\\\\\\\\\\"\\\\\\\\n    props={{\\\\\\\\n      page: page,\\\\\\\\n      ...props,\\\\\\\\n    }}\\\\\\\\n  />\\\\\\\\n);\\\\\\\\n\\\\\\\\nconst Footer = (props) => {\\\\\\\\n  return (\\\\\\\\n    <Widget\\\\\\\\n      src=\\\\\\\\\\\\\\\"devhub.near/widget/devhub.components.organism.NewsLetter\\\\\\\\\\\\\\\"\\\\\\\\n      props={{\\\\\\\\n        ...props,\\\\\\\\n      }}\\\\\\\\n    />\\\\\\\\n  );\\\\\\\\n};\\\\\\\\n\\\\\\\\nfunction AppLayout({ page, children }) {\\\\\\\\n  return (\\\\\\\\n    <>\\\\\\\\n      <Container>\\\\\\\\n        <AppHeader page={page} />\\\\\\\\n        <ContentContainer>{children}</ContentContainer>\\\\\\\\n        <Footer page={page} />\\\\\\\\n      </Container>\\\\\\\\n    </>\\\\\\\\n  );\\\\\\\\n}\\\\\\\\n\\\\\\\\nreturn { AppLayout };\\\\\\\\n\"}, \"devhub.entity.addon.blog.Configurator\": {\"\": \"const { data, handle, onSubmit } = props;\\\\\\\\n\\\\\\\\nconst { Tile } =\\\\\\\\n  VM.require(\\\\\\\\\\\\\\\"devhub.near/widget/devhub.components.molecule.Tile\\\\\\\\\\\\\\\") ||\\\\\\\\n  (() => <></>);\\\\\\\\n\\\\\\\\nconst Container = styled.div`\\\\\\\\n  display: flex;\\\\\\\\n  flex-direction: column;\\\\\\\\n  width: 100%;\\\\\\\\n  padding: 20px;\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst Item = styled.div`\\\\\\\\n  padding: 10px;\\\\\\\\n  margin: 5px;\\\\\\\\n  display: flex;\\\\\\\\n  align-items: center;\\\\\\\\n  flex-direction: row;\\\\\\\\n  gap: 10px;\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst EditableField = styled.input`\\\\\\\\n  flex: 1;\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst initialData = data;\\\\\\\\n\\\\\\\\nreturn (\\\\\\\\n  <Tile className=\\\\\\\\\\\\\\\"p-3 bg-white\\\\\\\\\\\\\\\">\\\\\\\\n    <Container>\\\\\\\\n      <Widget\\\\\\\\n        src={\\\\\\\\\\\\\\\"devhub.near/widget/devhub.entity.addon.blog.editor.index\\\\\\\\\\\\\\\"}\\\\\\\\n        props={{\\\\\\\\n          data,\\\\\\\\n          handle,\\\\\\\\n        }}\\\\\\\\n      />\\\\\\\\n    </Container>\\\\\\\\n  </Tile>\\\\\\\\n);\\\\\\\\n\"}, \"devhub.entity.addon.blog.editor.index\": {\"\": \"let theme = props.theme;\\\\\\\\nlet variables = props.variables;\\\\\\\\n\\\\\\\\nif (!variables) {\\\\\\\\n  variables = ``;\\\\\\\\n}\\\\\\\\n\\\\\\\\nif (!theme) {\\\\\\\\n  theme = ``;\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst Root = styled.div`\\\\\\\\n  ${variables}\\\\\\\\n  ${theme}\\\\\\\\n\\\\\\\\n  a {\\\\\\\\n    text-decoration: none;\\\\\\\\n    color: var(--base900);\\\\\\\\n  }\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst Container = styled.div`\\\\\\\\n  display: flex;\\\\\\\\n  justify-content: center;\\\\\\\\n  align-items: center;\\\\\\\\n  height: 100%;\\\\\\\\n  width: 100%;\\\\\\\\n`;\\\\\\\\n\\\\\\\\n// What would be the first steps?\\\\\\\\n// Create this container and an empty provider\\\\\\\\n// Provider has some items, onChange, onSubmit console logs\\\\\\\\n// Create a layout that takes in Editor\\\\\\\\n\\\\\\\\nreturn (\\\\\\\\n  <Root>\\\\\\\\n    {/* Get any layout */}\\\\\\\\n    <Container>\\\\\\\\n      <Widget\\\\\\\\n        src=\\\\\\\\\\\\\\\"devhub.near/widget/devhub.entity.addon.blog.editor.provider\\\\\\\\\\\\\\\"\\\\\\\\n        props={{\\\\\\\\n          handle: props.handle,\\\\\\\\n          Layout: (providerProps) => {\\\\\\\\n            const { data, onChange, onSubmit, onCancel, getData } =\\\\\\\\n              providerProps;\\\\\\\\n            return (\\\\\\\\n              <Widget\\\\\\\\n                src=\\\\\\\\\\\\\\\"devhub.near/widget/devhub.entity.addon.blog.editor.layout\\\\\\\\\\\\\\\"\\\\\\\\n                props={{\\\\\\\\n                  getData,\\\\\\\\n                  Sidebar: (p) => (\\\\\\\\n                    <Widget\\\\\\\\n                      src=\\\\\\\\\\\\\\\"devhub.near/widget/devhub.entity.addon.blog.editor.sidebar\\\\\\\\\\\\\\\"\\\\\\\\n                      props={{ items: data, ...p }}\\\\\\\\n                    />\\\\\\\\n                  ),\\\\\\\\n                  Content: (p) => (\\\\\\\\n                    <Widget\\\\\\\\n                      src=\\\\\\\\\\\\\\\"devhub.near/widget/devhub.entity.addon.blog.editor.content\\\\\\\\\\\\\\\"\\\\\\\\n                      props={{ onChange, onCancel, onSubmit, ...p }}\\\\\\\\n                    />\\\\\\\\n                  ),\\\\\\\\n                }}\\\\\\\\n              />\\\\\\\\n            );\\\\\\\\n          },\\\\\\\\n        }}\\\\\\\\n      />\\\\\\\\n    </Container>\\\\\\\\n  </Root>\\\\\\\\n);\\\\\\\\n\"}, \"devhub.entity.addon.wiki.Configurator\": {\"\": \"const { data, onSubmit } = props;\\\\\\\\n\\\\\\\\nconst initialData = data;\\\\\\\\nconst [content, setContent] = useState(data.content || \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\");\\\\\\\\nconst [title, setTitle] = useState(data.title || \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\");\\\\\\\\nconst [subtitle, setSubtitle] = useState(data.subtitle || \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\");\\\\\\\\n\\\\\\\\nconst [textAlign, setTextAlign] = useState(data.textAlign || \\\\\\\\\\\\\\\"left\\\\\\\\\\\\\\\");\\\\\\\\n\\\\\\\\nconst Container = styled.div`\\\\\\\\n  width: 100%;\\\\\\\\n  margin: 0 auto;\\\\\\\\n  padding: 20px;\\\\\\\\n  text-align: left;\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst FormContainer = styled.div`\\\\\\\\n  padding-top: 1rem;\\\\\\\\n\\\\\\\\n  & > *:not(:last-child) {\\\\\\\\n    margin-bottom: 1rem;\\\\\\\\n  }\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst hasDataChanged = () => {\\\\\\\\n  return (\\\\\\\\n    content !== initialData.content ||\\\\\\\\n    title !== initialData.title ||\\\\\\\\n    subtitle !== initialData.subtitle ||\\\\\\\\n    textAlign !== initialData.textAlign\\\\\\\\n  );\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst handleSubmit = () => {\\\\\\\\n  if (title) onSubmit({ title, subtitle, content, textAlign });\\\\\\\\n};\\\\\\\\n\\\\\\\\nreturn (\\\\\\\\n  <Container>\\\\\\\\n    <ul className=\\\\\\\\\\\\\\\"nav nav-tabs\\\\\\\\\\\\\\\" id=\\\\\\\\\\\\\\\"editPreviewTabs\\\\\\\\\\\\\\\" role=\\\\\\\\\\\\\\\"tablist\\\\\\\\\\\\\\\">\\\\\\\\n      <li className=\\\\\\\\\\\\\\\"nav-item\\\\\\\\\\\\\\\" role=\\\\\\\\\\\\\\\"presentation\\\\\\\\\\\\\\\">\\\\\\\\n        <button\\\\\\\\n          className=\\\\\\\\\\\\\\\"nav-link active\\\\\\\\\\\\\\\"\\\\\\\\n          id=\\\\\\\\\\\\\\\"edit-tab\\\\\\\\\\\\\\\"\\\\\\\\n          data-bs-toggle=\\\\\\\\\\\\\\\"tab\\\\\\\\\\\\\\\"\\\\\\\\n          data-bs-target=\\\\\\\\\\\\\\\"#edit\\\\\\\\\\\\\\\"\\\\\\\\n          type=\\\\\\\\\\\\\\\"button\\\\\\\\\\\\\\\"\\\\\\\\n          role=\\\\\\\\\\\\\\\"tab\\\\\\\\\\\\\\\"\\\\\\\\n          aria-controls=\\\\\\\\\\\\\\\"edit\\\\\\\\\\\\\\\"\\\\\\\\n          aria-selected=\\\\\\\\\\\\\\\"true\\\\\\\\\\\\\\\"\\\\\\\\n        >\\\\\\\\n          Edit\\\\\\\\n        </button>\\\\\\\\n      </li>\\\\\\\\n      <li className=\\\\\\\\\\\\\\\"nav-item\\\\\\\\\\\\\\\" role=\\\\\\\\\\\\\\\"presentation\\\\\\\\\\\\\\\">\\\\\\\\n        <button\\\\\\\\n          className=\\\\\\\\\\\\\\\"nav-link\\\\\\\\\\\\\\\"\\\\\\\\n          id=\\\\\\\\\\\\\\\"preview-tab\\\\\\\\\\\\\\\"\\\\\\\\n          data-bs-toggle=\\\\\\\\\\\\\\\"tab\\\\\\\\\\\\\\\"\\\\\\\\n          data-bs-target=\\\\\\\\\\\\\\\"#preview\\\\\\\\\\\\\\\"\\\\\\\\n          type=\\\\\\\\\\\\\\\"button\\\\\\\\\\\\\\\"\\\\\\\\n          role=\\\\\\\\\\\\\\\"tab\\\\\\\\\\\\\\\"\\\\\\\\n          aria-controls=\\\\\\\\\\\\\\\"preview\\\\\\\\\\\\\\\"\\\\\\\\n          aria-selected=\\\\\\\\\\\\\\\"false\\\\\\\\\\\\\\\"\\\\\\\\n        >\\\\\\\\n          Preview\\\\\\\\n        </button>\\\\\\\\n      </li>\\\\\\\\n    </ul>\\\\\\\\n    <div className=\\\\\\\\\\\\\\\"tab-content\\\\\\\\\\\\\\\" id=\\\\\\\\\\\\\\\"editPreviewTabsContent\\\\\\\\\\\\\\\">\\\\\\\\n      <div\\\\\\\\n        className=\\\\\\\\\\\\\\\"tab-pane show active p-4\\\\\\\\\\\\\\\"\\\\\\\\n        id=\\\\\\\\\\\\\\\"edit\\\\\\\\\\\\\\\"\\\\\\\\n        role=\\\\\\\\\\\\\\\"tabpanel\\\\\\\\\\\\\\\"\\\\\\\\n        aria-labelledby=\\\\\\\\\\\\\\\"edit-tab\\\\\\\\\\\\\\\"\\\\\\\\n        style={{ position: \\\\\\\\\\\\\\\"relative\\\\\\\\\\\\\\\" }}\\\\\\\\n      >\\\\\\\\n        <div style={{ position: \\\\\\\\\\\\\\\"absolute\\\\\\\\\\\\\\\", top: 10, right: 0 }}>\\\\\\\\n          <Widget\\\\\\\\n            // LEGACY\\\\\\\\n            src=\\\\\\\\\\\\\\\"devhub.near/widget/gigs-board.components.molecule.button-switch\\\\\\\\\\\\\\\"\\\\\\\\n            props={{\\\\\\\\n              currentValue: textAlign,\\\\\\\\n              key: \\\\\\\\\\\\\\\"textAlign\\\\\\\\\\\\\\\",\\\\\\\\n              onChange: (e) => setTextAlign(e.target.value),\\\\\\\\n              options: [\\\\\\\\n                { label: \\\\\\\\\\\\\\\"Left\\\\\\\\\\\\\\\", value: \\\\\\\\\\\\\\\"left\\\\\\\\\\\\\\\" },\\\\\\\\n                { label: \\\\\\\\\\\\\\\"Center\\\\\\\\\\\\\\\", value: \\\\\\\\\\\\\\\"center\\\\\\\\\\\\\\\" },\\\\\\\\n                { label: \\\\\\\\\\\\\\\"Right\\\\\\\\\\\\\\\", value: \\\\\\\\\\\\\\\"right\\\\\\\\\\\\\\\" },\\\\\\\\n              ],\\\\\\\\n            }}\\\\\\\\n          />\\\\\\\\n        </div>\\\\\\\\n        <FormContainer>\\\\\\\\n          <div className=\\\\\\\\\\\\\\\"flex-grow-1\\\\\\\\\\\\\\\">\\\\\\\\n            <Widget\\\\\\\\n              src=\\\\\\\\\\\\\\\"devhub.near/widget/devhub.components.molecule.Input\\\\\\\\\\\\\\\"\\\\\\\\n              props={{\\\\\\\\n                label: \\\\\\\\\\\\\\\"Title\\\\\\\\\\\\\\\",\\\\\\\\n                className: \\\\\\\\\\\\\\\"flex-grow-1\\\\\\\\\\\\\\\",\\\\\\\\n                onChange: (e) => setTitle(e.target.value),\\\\\\\\n                value: title,\\\\\\\\n                inputProps: {\\\\\\\\n                  min: 2,\\\\\\\\n                  max: 60,\\\\\\\\n                  required: true,\\\\\\\\n                },\\\\\\\\n              }}\\\\\\\\n            />\\\\\\\\n          </div>\\\\\\\\n          <div className=\\\\\\\\\\\\\\\"flex-grow-1\\\\\\\\\\\\\\\">\\\\\\\\n            <Widget\\\\\\\\n              src=\\\\\\\\\\\\\\\"devhub.near/widget/devhub.components.molecule.Input\\\\\\\\\\\\\\\"\\\\\\\\n              props={{\\\\\\\\n                label: \\\\\\\\\\\\\\\"Subtitle\\\\\\\\\\\\\\\",\\\\\\\\n                className: \\\\\\\\\\\\\\\"flex-grow-1\\\\\\\\\\\\\\\",\\\\\\\\n                onChange: (e) => setSubtitle(e.target.value),\\\\\\\\n                value: subtitle,\\\\\\\\n                inputProps: {\\\\\\\\n                  min: 2,\\\\\\\\n                  max: 250,\\\\\\\\n                },\\\\\\\\n              }}\\\\\\\\n            />\\\\\\\\n          </div>\\\\\\\\n          <Widget\\\\\\\\n            src=\\\\\\\\\\\\\\\"devhub.near/widget/devhub.components.molecule.MarkdownEditor\\\\\\\\\\\\\\\"\\\\\\\\n            props={{ data: { content }, onChange: setContent }}\\\\\\\\n          />\\\\\\\\n        </FormContainer>\\\\\\\\n        <div\\\\\\\\n          className={\\\\\\\\\\\\\\\"d-flex align-items-center justify-content-end gap-3 mt-4\\\\\\\\\\\\\\\"}\\\\\\\\n        >\\\\\\\\n          <Widget\\\\\\\\n            src={\\\\\\\\\\\\\\\"devhub.near/widget/devhub.components.molecule.Button\\\\\\\\\\\\\\\"}\\\\\\\\n            props={{\\\\\\\\n              classNames: { root: \\\\\\\\\\\\\\\"btn-success\\\\\\\\\\\\\\\" },\\\\\\\\n              disabled: !hasDataChanged() || !title || !content,\\\\\\\\n              icon: {\\\\\\\\n                type: \\\\\\\\\\\\\\\"bootstrap_icon\\\\\\\\\\\\\\\",\\\\\\\\n                variant: \\\\\\\\\\\\\\\"bi-check-circle-fill\\\\\\\\\\\\\\\",\\\\\\\\n              },\\\\\\\\n              label: \\\\\\\\\\\\\\\"Publish\\\\\\\\\\\\\\\",\\\\\\\\n              onClick: handleSubmit,\\\\\\\\n            }}\\\\\\\\n          />\\\\\\\\n        </div>\\\\\\\\n      </div>\\\\\\\\n      <div\\\\\\\\n        className=\\\\\\\\\\\\\\\"tab-pane\\\\\\\\\\\\\\\"\\\\\\\\n        id=\\\\\\\\\\\\\\\"preview\\\\\\\\\\\\\\\"\\\\\\\\n        role=\\\\\\\\\\\\\\\"tabpanel\\\\\\\\\\\\\\\"\\\\\\\\n        aria-labelledby=\\\\\\\\\\\\\\\"preview-tab\\\\\\\\\\\\\\\"\\\\\\\\n      >\\\\\\\\n        <div className=\\\\\\\\\\\\\\\"w-100 h-100 p-4\\\\\\\\\\\\\\\">\\\\\\\\n          <Widget\\\\\\\\n            src=\\\\\\\\\\\\\\\"devhub.near/widget/devhub.entity.addon.wiki.Viewer\\\\\\\\\\\\\\\"\\\\\\\\n            props={{ title, subtitle, content, textAlign }}\\\\\\\\n          />\\\\\\\\n        </div>\\\\\\\\n      </div>\\\\\\\\n    </div>\\\\\\\\n  </Container>\\\\\\\\n);\\\\\\\\n\"}, \"devhub.components.molecule.ProfileCard\": {\"\": \"const MutedText = styled.span`\\\\\\\\n  color: #818181;\\\\\\\\n\\\\\\\\n  font-size: 16px;\\\\\\\\n  font-style: normal;\\\\\\\\n  font-weight: 400;\\\\\\\\n  line-height: 20px; /* 125% */\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst AccountName = styled.span`\\\\\\\\n  color: #818181;\\\\\\\\n  font-size: 16px;\\\\\\\\n  font-style: normal;\\\\\\\\n  font-weight: 500;\\\\\\\\n  line-height: 20px;\\\\\\\\n\\\\\\\\n  max-width: 30ch;\\\\\\\\n  overflow: hidden;\\\\\\\\n  text-overflow: ellipsis;\\\\\\\\n  white-space: nowrap;\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst ProfileCard = (props) => {\\\\\\\\n  const accountId = props.accountId ?? context.accountId;\\\\\\\\n  const link = props.link ?? true;\\\\\\\\n  // const hideAccountId = props.hideAccountId;\\\\\\\\n  // const hideName = props.hideName;\\\\\\\\n  const hideImage = props.hideImage;\\\\\\\\n  const iconOnly = props.iconOnly;\\\\\\\\n\\\\\\\\n  const profile = props.profile ?? Social.getr(`${accountId}/profile`);\\\\\\\\n\\\\\\\\n  const name = profile.name ?? accountId;\\\\\\\\n  const title = props.title ?? `${name} @${accountId}`;\\\\\\\\n  const tooltip =\\\\\\\\n    props.tooltip && (props.tooltip === true ? title : props.tooltip);\\\\\\\\n\\\\\\\\n  let inner = (\\\\\\\\n    <div className=\\\\\\\\\\\\\\\"d-flex flex-row justify-content-center align-items-center\\\\\\\\\\\\\\\">\\\\\\\\n      {!hideImage && (\\\\\\\\n        <Widget\\\\\\\\n          key=\\\\\\\\\\\\\\\"image\\\\\\\\\\\\\\\"\\\\\\\\n          src=\\\\\\\\\\\\\\\"mob.near/widget/ProfileImage\\\\\\\\\\\\\\\"\\\\\\\\n          props={{\\\\\\\\n            style: { width: \\\\\\\\\\\\\\\"2.5em\\\\\\\\\\\\\\\", height: \\\\\\\\\\\\\\\"2.5em\\\\\\\\\\\\\\\", marginRight: \\\\\\\\\\\\\\\"0.3em\\\\\\\\\\\\\\\" },\\\\\\\\n            profile,\\\\\\\\n            accountId,\\\\\\\\n            className: \\\\\\\\\\\\\\\"d-inline-block flex-shrink-0\\\\\\\\\\\\\\\",\\\\\\\\n            imageClassName: \\\\\\\\\\\\\\\"rounded-circle w-100 h-100 align-top\\\\\\\\\\\\\\\",\\\\\\\\n          }}\\\\\\\\n        />\\\\\\\\n      )}\\\\\\\\n      {!iconOnly && (\\\\\\\\n        <div className=\\\\\\\\\\\\\\\"d-flex flex-column gap-1\\\\\\\\\\\\\\\">\\\\\\\\n          <AccountName key=\\\\\\\\\\\\\\\"accountName\\\\\\\\\\\\\\\">{name}</AccountName>\\\\\\\\n          <AccountName key=\\\\\\\\\\\\\\\"accountId\\\\\\\\\\\\\\\">@{accountId}</AccountName>\\\\\\\\n        </div>\\\\\\\\n      )}\\\\\\\\n    </div>\\\\\\\\n  );\\\\\\\\n\\\\\\\\n  inner = link ? (\\\\\\\\n    <a\\\\\\\\n      href={\\\\\\\\n        link !== true\\\\\\\\n          ? link\\\\\\\\n          : `devhub.near/widget/ProfilePage?accountId=${accountId}`\\\\\\\\n      }\\\\\\\\n      className=\\\\\\\\\\\\\\\"link-dark text-truncate d-inline-flex\\\\\\\\\\\\\\\"\\\\\\\\n    >\\\\\\\\n      {inner}\\\\\\\\n    </a>\\\\\\\\n  ) : (\\\\\\\\n    <span className=\\\\\\\\\\\\\\\"text-truncate d-inline-flex\\\\\\\\\\\\\\\">{inner}</span>\\\\\\\\n  );\\\\\\\\n\\\\\\\\n  if (props.tooltip === true) {\\\\\\\\n    return (\\\\\\\\n      <Widget\\\\\\\\n        src=\\\\\\\\\\\\\\\"mob.near/widget/Profile.OverlayTrigger\\\\\\\\\\\\\\\"\\\\\\\\n        props={{ accountId, children: inner }}\\\\\\\\n      />\\\\\\\\n    );\\\\\\\\n  }\\\\\\\\n  if (tooltip) {\\\\\\\\n    inner = (\\\\\\\\n      <OverlayTrigger placement=\\\\\\\\\\\\\\\"auto\\\\\\\\\\\\\\\" overlay={<Tooltip>{tooltip}</Tooltip>}>\\\\\\\\n        {inner}\\\\\\\\n      </OverlayTrigger>\\\\\\\\n    );\\\\\\\\n  }\\\\\\\\n  return (\\\\\\\\n    <div className=\\\\\\\\\\\\\\\"d-flex flex-row align-items-center\\\\\\\\\\\\\\\">\\\\\\\\n      {inner}\\\\\\\\n      <Widget\\\\\\\\n        src=\\\\\\\\\\\\\\\"neardevgov.near/widget/BadgesList\\\\\\\\\\\\\\\"\\\\\\\\n        props={{\\\\\\\\n          accountId,\\\\\\\\n          mode: \\\\\\\\\\\\\\\"compact\\\\\\\\\\\\\\\",\\\\\\\\n        }}\\\\\\\\n      />\\\\\\\\n    </div>\\\\\\\\n  );\\\\\\\\n};\\\\\\\\n\\\\\\\\nreturn ProfileCard(props);\\\\\\\\n\"}, \"devhub.entity.addon.blog.editor.layout\": {\"\": \"const { Sidebar, Content, getData } = props;\\\\\\\\n\\\\\\\\nconst [selectedItem, setSelectedItem] = useState(null);\\\\\\\\n\\\\\\\\nconst handleItemClick = (item) => {\\\\\\\\n  if (item) {\\\\\\\\n    const data = getData(item);\\\\\\\\n    setSelectedItem(data);\\\\\\\\n  } else {\\\\\\\\n    setSelectedItem(null);\\\\\\\\n  }\\\\\\\\n};\\\\\\\\n\\\\\\\\nreturn (\\\\\\\\n  <div\\\\\\\\n    className=\\\\\\\\\\\\\\\"template\\\\\\\\\\\\\\\"\\\\\\\\n    style={{ display: \\\\\\\\\\\\\\\"flex\\\\\\\\\\\\\\\", width: \\\\\\\\\\\\\\\"100%\\\\\\\\\\\\\\\", height: \\\\\\\\\\\\\\\"100%\\\\\\\\\\\\\\\" }}\\\\\\\\n  >\\\\\\\\n    <div\\\\\\\\n      className=\\\\\\\\\\\\\\\"left-panel\\\\\\\\\\\\\\\"\\\\\\\\n      style={{\\\\\\\\n        margin: \\\\\\\\\\\\\\\"20px 20px 80px 20px\\\\\\\\\\\\\\\",\\\\\\\\n      }}\\\\\\\\n    >\\\\\\\\n      <Sidebar selectedItem={selectedItem} handleItemClick={handleItemClick} />\\\\\\\\n    </div>\\\\\\\\n    <div\\\\\\\\n      className=\\\\\\\\\\\\\\\"right-panel\\\\\\\\\\\\\\\"\\\\\\\\n      style={{ flex: 1, width: 0, overflow: \\\\\\\\\\\\\\\"scroll\\\\\\\\\\\\\\\" }}\\\\\\\\n      key={selectedItem.id}\\\\\\\\n    >\\\\\\\\n      <Content data={selectedItem} />\\\\\\\\n    </div>\\\\\\\\n  </div>\\\\\\\\n);\\\\\\\\n\"}, \"devhub.components.molecule.PostControls\": {\"\": \"const { className, title, icon, href, onClick } = props;\\\\\\\\n\\\\\\\\nconst Button = styled.button`\\\\\\\\n  display: flex;\\\\\\\\n  align-items: center;\\\\\\\\n  gap: 8px;\\\\\\\\n\\\\\\\\n  border-radius: 4px;\\\\\\\\n  background: #00ec97;\\\\\\\\n\\\\\\\\n  color: #f4f4f4;\\\\\\\\n  font-size: 16px;\\\\\\\\n  font-style: normal;\\\\\\\\n  font-weight: 700;\\\\\\\\n  line-height: 20px; /* 125% */\\\\\\\\n\\\\\\\\n  padding: 0.5rem 1rem;\\\\\\\\n\\\\\\\\n  &:hover {\\\\\\\\n    background: #04a46e;\\\\\\\\n    text-decoration: none !important;\\\\\\\\n  }\\\\\\\\n\\\\\\\\n  outline: none;\\\\\\\\n  border: none;\\\\\\\\n`;\\\\\\\\n\\\\\\\\nreturn (\\\\\\\\n  <div className={`d-flex flex-row-reverse ${props.className}`}>\\\\\\\\n    {props.href ? (\\\\\\\\n      <Link to={props.href} style={{ textDecoration: \\\\\\\\\\\\\\\"none\\\\\\\\\\\\\\\" }}>\\\\\\\\n        <Button>\\\\\\\\n          <i className={props.icon ? props.icon : \\\\\\\\\\\\\\\"bi bi-plus-circle-fill\\\\\\\\\\\\\\\"}></i>\\\\\\\\n          {props.title}\\\\\\\\n        </Button>\\\\\\\\n      </Link>\\\\\\\\n    ) : (\\\\\\\\n      <Button onClick={props.onClick}>\\\\\\\\n        <i className={props.icon ? props.icon : \\\\\\\\\\\\\\\"bi bi-plus-circle-fill\\\\\\\\\\\\\\\"}></i>\\\\\\\\n        {props.title || \\\\\\\\\\\\\\\"Post\\\\\\\\\\\\\\\"}\\\\\\\\n      </Button>\\\\\\\\n    )}\\\\\\\\n  </div>\\\\\\\\n);\\\\\\\\n\"}, \"devhub.components.organism.Configurator\": {\"\": \"const Struct = VM.require(\\\\\\\\\\\\\\\"devhub.near/widget/core.lib.struct\\\\\\\\\\\\\\\");\\\\\\\\n\\\\\\\\nif (!Struct) {\\\\\\\\n  return <p>Loading modules...</p>;\\\\\\\\n}\\\\\\\\n/* INCLUDE: \\\\\\\\\\\\\\\"core/lib/gui/form\\\\\\\\\\\\\\\" */\\\\\\\\nconst defaultFieldUpdate = ({\\\\\\\\n  input,\\\\\\\\n  lastKnownValue,\\\\\\\\n  params: { arrayDelimiter },\\\\\\\\n}) => {\\\\\\\\n  switch (typeof input) {\\\\\\\\n    case \\\\\\\\\\\\\\\"boolean\\\\\\\\\\\\\\\":\\\\\\\\n      return input;\\\\\\\\n\\\\\\\\n    case \\\\\\\\\\\\\\\"object\\\\\\\\\\\\\\\": {\\\\\\\\n      if (Array.isArray(input) && typeof lastKnownValue === \\\\\\\\\\\\\\\"string\\\\\\\\\\\\\\\") {\\\\\\\\n        return input.join(arrayDelimiter ?? \\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\");\\\\\\\\n      } else {\\\\\\\\n        return Array.isArray(lastKnownValue)\\\\\\\\n          ? [...lastKnownValue, ...input]\\\\\\\\n          : { ...lastKnownValue, ...input };\\\\\\\\n      }\\\\\\\\n    }\\\\\\\\n\\\\\\\\n    case \\\\\\\\\\\\\\\"string\\\\\\\\\\\\\\\":\\\\\\\\n      return Array.isArray(lastKnownValue)\\\\\\\\n        ? input.split(arrayDelimiter ?? \\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\").map((string) => string.trim())\\\\\\\\n        : input;\\\\\\\\n\\\\\\\\n    default: {\\\\\\\\n      if ((input ?? null) === null) {\\\\\\\\n        switch (typeof lastKnownValue) {\\\\\\\\n          case \\\\\\\\\\\\\\\"boolean\\\\\\\\\\\\\\\":\\\\\\\\n            return !lastKnownValue;\\\\\\\\n\\\\\\\\n          default:\\\\\\\\n            return lastKnownValue;\\\\\\\\n        }\\\\\\\\n      } else return input;\\\\\\\\n    }\\\\\\\\n  }\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst useForm = ({ initialValues, onUpdate, stateKey, uninitialized }) => {\\\\\\\\n  const initialFormState = {\\\\\\\\n    hasUnsubmittedChanges: false,\\\\\\\\n    values: initialValues ?? {},\\\\\\\\n  };\\\\\\\\n\\\\\\\\n  const formState = state[stateKey] ?? null,\\\\\\\\n    isSynced = Struct.isEqual(formState?.values ?? {}, initialFormState.values);\\\\\\\\n\\\\\\\\n  const formReset = () =>\\\\\\\\n    State.update((lastKnownComponentState) => ({\\\\\\\\n      ...lastKnownComponentState,\\\\\\\\n      [stateKey]: initialFormState,\\\\\\\\n      hasUnsubmittedChanges: false,\\\\\\\\n    }));\\\\\\\\n\\\\\\\\n  const formUpdate =\\\\\\\\n    ({ path, via: customFieldUpdate, ...params }) =>\\\\\\\\n    (fieldInput) => {\\\\\\\\n      const updatedValues = Struct.deepFieldUpdate(\\\\\\\\n        formState?.values ?? {},\\\\\\\\n\\\\\\\\n        {\\\\\\\\n          input: fieldInput?.target?.value ?? fieldInput,\\\\\\\\n          params,\\\\\\\\n          path,\\\\\\\\n\\\\\\\\n          via:\\\\\\\\n            typeof customFieldUpdate === \\\\\\\\\\\\\\\"function\\\\\\\\\\\\\\\"\\\\\\\\n              ? customFieldUpdate\\\\\\\\n              : defaultFieldUpdate,\\\\\\\\n        }\\\\\\\\n      );\\\\\\\\n\\\\\\\\n      State.update((lastKnownComponentState) => ({\\\\\\\\n        ...lastKnownComponentState,\\\\\\\\n\\\\\\\\n        [stateKey]: {\\\\\\\\n          hasUnsubmittedChanges: !Struct.isEqual(\\\\\\\\n            updatedValues,\\\\\\\\n            initialFormState.values\\\\\\\\n          ),\\\\\\\\n\\\\\\\\n          values: updatedValues,\\\\\\\\n        },\\\\\\\\n      }));\\\\\\\\n\\\\\\\\n      if (\\\\\\\\n        typeof onUpdate === \\\\\\\\\\\\\\\"function\\\\\\\\\\\\\\\" &&\\\\\\\\n        !Struct.isEqual(updatedValues, initialFormState.values)\\\\\\\\n      ) {\\\\\\\\n        onUpdate(updatedValues);\\\\\\\\n      }\\\\\\\\n    };\\\\\\\\n\\\\\\\\n  if (\\\\\\\\n    !uninitialized &&\\\\\\\\n    (formState === null || (!formState.hasUnsubmittedChanges && !isSynced))\\\\\\\\n  ) {\\\\\\\\n    formReset();\\\\\\\\n  }\\\\\\\\n\\\\\\\\n  return {\\\\\\\\n    ...(formState ?? initialFormState),\\\\\\\\n    isSynced,\\\\\\\\n    reset: formReset,\\\\\\\\n    stateKey,\\\\\\\\n    update: formUpdate,\\\\\\\\n  };\\\\\\\\n};\\\\\\\\n/* END_INCLUDE: \\\\\\\\\\\\\\\"core/lib/gui/form\\\\\\\\\\\\\\\" */\\\\\\\\n\\\\\\\\nconst ValueView = styled.div`\\\\\\\\n  & > p {\\\\\\\\n    margin: 0;\\\\\\\\n  }\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst fieldParamsByType = {\\\\\\\\n  array: {\\\\\\\\n    name: \\\\\\\\\\\\\\\"components.molecule.text-input\\\\\\\\\\\\\\\",\\\\\\\\n    inputProps: { type: \\\\\\\\\\\\\\\"text\\\\\\\\\\\\\\\" },\\\\\\\\n  },\\\\\\\\n\\\\\\\\n  boolean: {\\\\\\\\n    name: \\\\\\\\\\\\\\\"components.atom.toggle\\\\\\\\\\\\\\\",\\\\\\\\n  },\\\\\\\\n\\\\\\\\n  string: {\\\\\\\\n    name: \\\\\\\\\\\\\\\"components.molecule.text-input\\\\\\\\\\\\\\\",\\\\\\\\n    inputProps: { type: \\\\\\\\\\\\\\\"text\\\\\\\\\\\\\\\" },\\\\\\\\n  },\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst defaultFieldsRender = ({ schema, form, isEditable }) => (\\\\\\\\n  <>\\\\\\\\n    {Object.entries(schema).map(\\\\\\\\n      (\\\\\\\\n        [key, { format, inputProps, noop, label, order, style, ...fieldProps }],\\\\\\\\n        idx\\\\\\\\n      ) => {\\\\\\\\n        const fieldKey = `${idx}-${key}`,\\\\\\\\n          fieldValue = form.values[key];\\\\\\\\n\\\\\\\\n        const fieldType = Array.isArray(fieldValue)\\\\\\\\n          ? \\\\\\\\\\\\\\\"array\\\\\\\\\\\\\\\"\\\\\\\\n          : typeof (fieldValue ?? \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\");\\\\\\\\n\\\\\\\\n        const isDisabled = noop ?? inputProps.disabled ?? false;\\\\\\\\n\\\\\\\\n        const viewClassName = [\\\\\\\\n          (fieldValue?.length ?? 0) > 0 ? \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\" : \\\\\\\\\\\\\\\"text-muted\\\\\\\\\\\\\\\",\\\\\\\\n          \\\\\\\\\\\\\\\"m-0\\\\\\\\\\\\\\\",\\\\\\\\n        ].join(\\\\\\\\\\\\\\\" \\\\\\\\\\\\\\\");\\\\\\\\n\\\\\\\\n        return (\\\\\\\\n          <>\\\\\\\\n            <div\\\\\\\\n              className={[\\\\\\\\n                \\\\\\\\\\\\\\\"d-flex gap-3\\\\\\\\\\\\\\\",\\\\\\\\n                isEditable || noop ? \\\\\\\\\\\\\\\"d-none\\\\\\\\\\\\\\\" : \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\",\\\\\\\\n              ].join(\\\\\\\\\\\\\\\" \\\\\\\\\\\\\\\")}\\\\\\\\n              key={fieldKey}\\\\\\\\n              style={{ order }}\\\\\\\\n            >\\\\\\\\n              <label className=\\\\\\\\\\\\\\\"fw-bold w-25\\\\\\\\\\\\\\\">{label}</label>\\\\\\\\n\\\\\\\\n              <ValueView className={[viewClassName, \\\\\\\\\\\\\\\"w-75\\\\\\\\\\\\\\\"].join(\\\\\\\\\\\\\\\" \\\\\\\\\\\\\\\")}>\\\\\\\\n                {format !== \\\\\\\\\\\\\\\"markdown\\\\\\\\\\\\\\\" ? (\\\\\\\\n                  <span>\\\\\\\\n                    {(fieldType === \\\\\\\\\\\\\\\"array\\\\\\\\\\\\\\\" && format === \\\\\\\\\\\\\\\"comma-separated\\\\\\\\\\\\\\\"\\\\\\\\n                      ? fieldValue\\\\\\\\n                          .filter((string) => string.length > 0)\\\\\\\\n                          .join(\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\")\\\\\\\\n                      : fieldValue\\\\\\\\n                    )?.toString?.() || \\\\\\\\\\\\\\\"none\\\\\\\\\\\\\\\"}\\\\\\\\n                  </span>\\\\\\\\n                ) : (fieldValue?.length ?? 0) > 0 ? (\\\\\\\\n                  <Widget\\\\\\\\n                    // TODO: LEGACY.\\\\\\\\n                    src={\\\\\\\\n                      \\\\\\\\\\\\\\\"devhub.near/widget/devhub.components.molecule.MarkdownViewer\\\\\\\\\\\\\\\"\\\\\\\\n                    }\\\\\\\\n                    props={{\\\\\\\\n                      text: fieldValue,\\\\\\\\n                    }}\\\\\\\\n                  />\\\\\\\\n                ) : (\\\\\\\\n                  <span>none</span>\\\\\\\\n                )}\\\\\\\\n              </ValueView>\\\\\\\\n            </div>\\\\\\\\n            <Widget\\\\\\\\n              // TODO: LEGACY.\\\\\\\\n              src={`devhub.near/widget/gigs-board.${fieldParamsByType[fieldType].name}`}\\\\\\\\n              props={{\\\\\\\\n                ...fieldProps,\\\\\\\\n\\\\\\\\n                className: [\\\\\\\\n                  \\\\\\\\\\\\\\\"w-100\\\\\\\\\\\\\\\",\\\\\\\\n                  fieldProps.className ?? \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\",\\\\\\\\n                  isEditable && !noop ? \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\" : \\\\\\\\\\\\\\\"d-none\\\\\\\\\\\\\\\",\\\\\\\\n                ].join(\\\\\\\\\\\\\\\" \\\\\\\\\\\\\\\"),\\\\\\\\n\\\\\\\\n                disabled: isDisabled,\\\\\\\\n                format,\\\\\\\\n                key: `${fieldKey}--editable`,\\\\\\\\n                label,\\\\\\\\n                onChange: form.update({ path: [key] }),\\\\\\\\n                style: { ...style, order },\\\\\\\\n\\\\\\\\n                value:\\\\\\\\n                  fieldType === \\\\\\\\\\\\\\\"array\\\\\\\\\\\\\\\" && format === \\\\\\\\\\\\\\\"comma-separated\\\\\\\\\\\\\\\"\\\\\\\\n                    ? fieldValue.join(\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\")\\\\\\\\n                    : fieldValue,\\\\\\\\n\\\\\\\\n                inputProps: {\\\\\\\\n                  ...(inputProps ?? {}),\\\\\\\\n                  disabled: isDisabled,\\\\\\\\n\\\\\\\\n                  title:\\\\\\\\n                    noop ?? false\\\\\\\\n                      ? \\\\\\\\\\\\\\\"Temporarily disabled due to technical reasons.\\\\\\\\\\\\\\\"\\\\\\\\n                      : inputProps.title,\\\\\\\\n\\\\\\\\n                  ...(fieldParamsByType[fieldType].inputProps ?? {}),\\\\\\\\n                  tabIndex: order,\\\\\\\\n                },\\\\\\\\n              }}\\\\\\\\n            />\\\\\\\\n          </>\\\\\\\\n        );\\\\\\\\n      }\\\\\\\\n    )}\\\\\\\\n  </>\\\\\\\\n);\\\\\\\\n\\\\\\\\nconst Configurator = ({\\\\\\\\n  actionsAdditional,\\\\\\\\n  cancelLabel,\\\\\\\\n  classNames,\\\\\\\\n  externalState,\\\\\\\\n  fieldsRender: customFieldsRender,\\\\\\\\n  formatter: toFormatted,\\\\\\\\n  isValid,\\\\\\\\n  isActive,\\\\\\\\n  onCancel,\\\\\\\\n  onChange,\\\\\\\\n  onSubmit,\\\\\\\\n  schema,\\\\\\\\n  submitIcon,\\\\\\\\n  submitLabel,\\\\\\\\n}) => {\\\\\\\\n  const fieldsRender = customFieldsRender || defaultFieldsRender;\\\\\\\\n\\\\\\\\n  const initialValues = Struct.typeMatch(schema)\\\\\\\\n    ? Struct.pick(externalState ?? {}, Object.keys(schema))\\\\\\\\n    : {};\\\\\\\\n\\\\\\\\n  const form = useForm({ initialValues, onUpdate: onChange, stateKey: \\\\\\\\\\\\\\\"form\\\\\\\\\\\\\\\" });\\\\\\\\n\\\\\\\\n  const formFormattedValues = toFormatted\\\\\\\\n    ? toFormatted(form.values)\\\\\\\\n    : form.values;\\\\\\\\n\\\\\\\\n  const isFormValid = isValid ? isValid(formFormattedValues) : true;\\\\\\\\n\\\\\\\\n  const onCancelClick = () => {\\\\\\\\n    form.reset();\\\\\\\\n    if (onCancel) onCancel();\\\\\\\\n  };\\\\\\\\n\\\\\\\\n  const onSubmitClick = () => {\\\\\\\\n    if (onSubmit && isFormValid) {\\\\\\\\n      onSubmit(formFormattedValues);\\\\\\\\n    }\\\\\\\\n  };\\\\\\\\n\\\\\\\\n  return (\\\\\\\\n    <div className=\\\\\\\\\\\\\\\"flex-grow-1 d-flex flex-column gap-4\\\\\\\\\\\\\\\">\\\\\\\\n      <div className={`d-flex flex-column gap-${isActive ? 1 : 4}`}>\\\\\\\\n        {fieldsRender({\\\\\\\\n          form,\\\\\\\\n          isEditable: isActive,\\\\\\\\n          schema,\\\\\\\\n        })}\\\\\\\\n      </div>\\\\\\\\n      {isActive && (\\\\\\\\n        <div className=\\\\\\\\\\\\\\\"d-flex align-items-center justify-content-end gap-3 mt-auto\\\\\\\\\\\\\\\">\\\\\\\\n          {actionsAdditional ? (\\\\\\\\n            <div className=\\\\\\\\\\\\\\\"me-auto\\\\\\\\\\\\\\\">{actionsAdditional}</div>\\\\\\\\n          ) : null}\\\\\\\\n\\\\\\\\n          <Widget\\\\\\\\n            src={\\\\\\\\\\\\\\\"devhub.near/widget/devhub.components.molecule.Button\\\\\\\\\\\\\\\"}\\\\\\\\n            props={{\\\\\\\\n              classNames: { root: \\\\\\\\\\\\\\\"btn-outline-danger shadow-none border-0\\\\\\\\\\\\\\\" },\\\\\\\\n              label: cancelLabel || \\\\\\\\\\\\\\\"Cancel\\\\\\\\\\\\\\\",\\\\\\\\n              onClick: onCancelClick,\\\\\\\\n            }}\\\\\\\\n          />\\\\\\\\n          <Widget\\\\\\\\n            src={\\\\\\\\\\\\\\\"devhub.near/widget/devhub.components.molecule.Button\\\\\\\\\\\\\\\"}\\\\\\\\n            props={{\\\\\\\\n              classNames: { root: classNames.submit || \\\\\\\\\\\\\\\"btn-success\\\\\\\\\\\\\\\" },\\\\\\\\n              disabled: !form.hasUnsubmittedChanges || !isFormValid,\\\\\\\\n              icon: submitIcon || {\\\\\\\\n                type: \\\\\\\\\\\\\\\"bootstrap_icon\\\\\\\\\\\\\\\",\\\\\\\\n                variant: \\\\\\\\\\\\\\\"bi-check-circle-fill\\\\\\\\\\\\\\\",\\\\\\\\n              },\\\\\\\\n              label: submitLabel || \\\\\\\\\\\\\\\"Submit\\\\\\\\\\\\\\\",\\\\\\\\n              onClick: onSubmitClick,\\\\\\\\n            }}\\\\\\\\n          />\\\\\\\\n        </div>\\\\\\\\n      )}\\\\\\\\n    </div>\\\\\\\\n  );\\\\\\\\n};\\\\\\\\n\\\\\\\\nreturn Configurator(props);\\\\\\\\n\"}, \"devhub.entity.addon.blog.editor.content\": {\"\": \"const { Card } =\\\\\\\\n  VM.require(\\\\\\\\\\\\\\\"devhub.near/widget/devhub.entity.addon.blog.Card\\\\\\\\\\\\\\\") ||\\\\\\\\n  (() => <></>);\\\\\\\\nconst { Page } =\\\\\\\\n  VM.require(\\\\\\\\\\\\\\\"devhub.near/widget/devhub.entity.addon.blog.Page\\\\\\\\\\\\\\\") ||\\\\\\\\n  (() => <></>);\\\\\\\\n\\\\\\\\nconst categories = [\\\\\\\\n  {\\\\\\\\n    label: \\\\\\\\\\\\\\\"Guide\\\\\\\\\\\\\\\",\\\\\\\\n    value: \\\\\\\\\\\\\\\"guide\\\\\\\\\\\\\\\",\\\\\\\\n  },\\\\\\\\n  {\\\\\\\\n    label: \\\\\\\\\\\\\\\"News\\\\\\\\\\\\\\\",\\\\\\\\n    value: \\\\\\\\\\\\\\\"news\\\\\\\\\\\\\\\",\\\\\\\\n  },\\\\\\\\n  {\\\\\\\\n    label: \\\\\\\\\\\\\\\"Reference\\\\\\\\\\\\\\\",\\\\\\\\n    value: \\\\\\\\\\\\\\\"reference\\\\\\\\\\\\\\\",\\\\\\\\n  },\\\\\\\\n];\\\\\\\\n\\\\\\\\nconst selectOptions = useMemo(\\\\\\\\n  () =>\\\\\\\\n    categories.map((it) => ({\\\\\\\\n      label: it.label,\\\\\\\\n      value: it.value,\\\\\\\\n    })),\\\\\\\\n  [categories]\\\\\\\\n);\\\\\\\\n\\\\\\\\nconst Banner = styled.div`\\\\\\\\n  border-radius: var(--bs-border-radius-xl) !important;\\\\\\\\n  height: 100%;\\\\\\\\n\\\\\\\\n  & > div :not(.btn) {\\\\\\\\n    position: absolute;\\\\\\\\n    display: none;\\\\\\\\n    margin: 0 !important;\\\\\\\\n    width: 0 !important;\\\\\\\\n    height: 0 !important;\\\\\\\\n  }\\\\\\\\n\\\\\\\\n  .btn {\\\\\\\\n    padding: 0.5rem 0.75rem !important;\\\\\\\\n    min-height: 32;\\\\\\\\n    line-height: 1;\\\\\\\\n\\\\\\\\n    border: none;\\\\\\\\n    border-radius: 50px;\\\\\\\\n    --bs-btn-color: #ffffff;\\\\\\\\n    --bs-btn-bg: #087990;\\\\\\\\n    --bs-btn-border-color: #087990;\\\\\\\\n    --bs-btn-hover-color: #ffffff;\\\\\\\\n    --bs-btn-hover-bg: #055160;\\\\\\\\n    --bs-btn-hover-border-color: #055160;\\\\\\\\n    --bs-btn-focus-shadow-rgb: 49, 132, 253;\\\\\\\\n    --bs-btn-active-color: #ffffff;\\\\\\\\n    --bs-btn-active-bg: #055160;\\\\\\\\n    --bs-btn-active-border-color: #055160;\\\\\\\\n    --bs-btn-active-shadow: inset 0 3px 5px rgba(0, 0, 0, 0.125);\\\\\\\\n    opacity: 0.8;\\\\\\\\n\\\\\\\\n    &:hover {\\\\\\\\n      opacity: 1;\\\\\\\\n    }\\\\\\\\n  }\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst { data, handle, onSubmit } = props;\\\\\\\\n\\\\\\\\nconst initialData = data;\\\\\\\\n\\\\\\\\nconst [content, setContent] = useState(initialData.content || \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\");\\\\\\\\nconst [title, setTitle] = useState(initialData.title || \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\");\\\\\\\\nconst [subtitle, setSubtitle] = useState(initialData.subtitle || \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\");\\\\\\\\nconst [description, setDescription] = useState(initialData.description || \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\");\\\\\\\\nconst [author, setAuthor] = useState(initialData.author || \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\");\\\\\\\\nconst [previewMode, setPreviewMode] = useState(\\\\\\\\\\\\\\\"card\\\\\\\\\\\\\\\"); // \\\\\\\\\\\\\\\"card\\\\\\\\\\\\\\\" or \\\\\\\\\\\\\\\"page\\\\\\\\\\\\\\\"\\\\\\\\nconst [date, setDate] = useState(initialData.date || new Date());\\\\\\\\nconst [category, setCategory] = useState(\\\\\\\\\\\\\\\"guide\\\\\\\\\\\\\\\");\\\\\\\\n\\\\\\\\nconst Container = styled.div`\\\\\\\\n  width: 100%;\\\\\\\\n  margin: 0 auto;\\\\\\\\n  padding: 20px;\\\\\\\\n  text-align: left;\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst hasDataChanged = () => {\\\\\\\\n  return (\\\\\\\\n    content !== initialData.content ||\\\\\\\\n    title !== initialData.title ||\\\\\\\\n    author !== initialData.author ||\\\\\\\\n    subtitle !== initialData.subtitle ||\\\\\\\\n    description !== initialData.description ||\\\\\\\\n    date !== initialData.date ||\\\\\\\\n    category !== initialData.category\\\\\\\\n  );\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst handlePublish = () => {\\\\\\\\n  onSubmit &&\\\\\\\\n    onSubmit(\\\\\\\\n      {\\\\\\\\n        id: data.id || undefined,\\\\\\\\n        title,\\\\\\\\n        subtitle,\\\\\\\\n        description,\\\\\\\\n        date,\\\\\\\\n        content,\\\\\\\\n        author,\\\\\\\\n        category,\\\\\\\\n        community: handle,\\\\\\\\n      },\\\\\\\\n      data.id !== undefined\\\\\\\\n    );\\\\\\\\n};\\\\\\\\n\\\\\\\\nfunction Preview() {\\\\\\\\n  switch (previewMode) {\\\\\\\\n    case \\\\\\\\\\\\\\\"card\\\\\\\\\\\\\\\": {\\\\\\\\n      return (\\\\\\\\n        <Card\\\\\\\\n          data={{\\\\\\\\n            title,\\\\\\\\n            subtitle,\\\\\\\\n            description,\\\\\\\\n            date,\\\\\\\\n            content,\\\\\\\\n            author,\\\\\\\\n            category,\\\\\\\\n            community: handle,\\\\\\\\n          }}\\\\\\\\n        />\\\\\\\\n      );\\\\\\\\n    }\\\\\\\\n    case \\\\\\\\\\\\\\\"page\\\\\\\\\\\\\\\": {\\\\\\\\n      return (\\\\\\\\n        <Page\\\\\\\\n          data={{\\\\\\\\n            title,\\\\\\\\n            subtitle,\\\\\\\\n            description,\\\\\\\\n            date,\\\\\\\\n            content,\\\\\\\\n            author,\\\\\\\\n            category,\\\\\\\\n            community: handle,\\\\\\\\n          }}\\\\\\\\n        />\\\\\\\\n      );\\\\\\\\n    }\\\\\\\\n  }\\\\\\\\n}\\\\\\\\n\\\\\\\\nreturn (\\\\\\\\n  <Container>\\\\\\\\n    <ul className=\\\\\\\\\\\\\\\"nav nav-tabs\\\\\\\\\\\\\\\" id=\\\\\\\\\\\\\\\"editPreviewTabs\\\\\\\\\\\\\\\" role=\\\\\\\\\\\\\\\"tablist\\\\\\\\\\\\\\\">\\\\\\\\n      <li className=\\\\\\\\\\\\\\\"nav-item\\\\\\\\\\\\\\\" role=\\\\\\\\\\\\\\\"presentation\\\\\\\\\\\\\\\">\\\\\\\\n        <button\\\\\\\\n          className=\\\\\\\\\\\\\\\"nav-link active\\\\\\\\\\\\\\\"\\\\\\\\n          id=\\\\\\\\\\\\\\\"edit-tab\\\\\\\\\\\\\\\"\\\\\\\\n          data-bs-toggle=\\\\\\\\\\\\\\\"tab\\\\\\\\\\\\\\\"\\\\\\\\n          data-bs-target=\\\\\\\\\\\\\\\"#edit\\\\\\\\\\\\\\\"\\\\\\\\n          type=\\\\\\\\\\\\\\\"button\\\\\\\\\\\\\\\"\\\\\\\\n          role=\\\\\\\\\\\\\\\"tab\\\\\\\\\\\\\\\"\\\\\\\\n          aria-controls=\\\\\\\\\\\\\\\"edit\\\\\\\\\\\\\\\"\\\\\\\\n          aria-selected=\\\\\\\\\\\\\\\"true\\\\\\\\\\\\\\\"\\\\\\\\n        >\\\\\\\\n          Edit\\\\\\\\n        </button>\\\\\\\\n      </li>\\\\\\\\n      <li className=\\\\\\\\\\\\\\\"nav-item\\\\\\\\\\\\\\\" role=\\\\\\\\\\\\\\\"presentation\\\\\\\\\\\\\\\">\\\\\\\\n        <button\\\\\\\\n          className=\\\\\\\\\\\\\\\"nav-link\\\\\\\\\\\\\\\"\\\\\\\\n          id=\\\\\\\\\\\\\\\"preview-tab\\\\\\\\\\\\\\\"\\\\\\\\n          data-bs-toggle=\\\\\\\\\\\\\\\"tab\\\\\\\\\\\\\\\"\\\\\\\\n          data-bs-target=\\\\\\\\\\\\\\\"#preview\\\\\\\\\\\\\\\"\\\\\\\\n          type=\\\\\\\\\\\\\\\"button\\\\\\\\\\\\\\\"\\\\\\\\n          role=\\\\\\\\\\\\\\\"tab\\\\\\\\\\\\\\\"\\\\\\\\n          aria-controls=\\\\\\\\\\\\\\\"preview\\\\\\\\\\\\\\\"\\\\\\\\n          aria-selected=\\\\\\\\\\\\\\\"false\\\\\\\\\\\\\\\"\\\\\\\\n        >\\\\\\\\n          Preview\\\\\\\\n        </button>\\\\\\\\n      </li>\\\\\\\\n    </ul>\\\\\\\\n    <div className=\\\\\\\\\\\\\\\"tab-content\\\\\\\\\\\\\\\" id=\\\\\\\\\\\\\\\"editPreviewTabsContent\\\\\\\\\\\\\\\">\\\\\\\\n      <div\\\\\\\\n        className=\\\\\\\\\\\\\\\"tab-pane show active p-4\\\\\\\\\\\\\\\"\\\\\\\\n        id=\\\\\\\\\\\\\\\"edit\\\\\\\\\\\\\\\"\\\\\\\\n        role=\\\\\\\\\\\\\\\"tabpanel\\\\\\\\\\\\\\\"\\\\\\\\n        aria-labelledby=\\\\\\\\\\\\\\\"edit-tab\\\\\\\\\\\\\\\"\\\\\\\\n      >\\\\\\\\n        <Widget\\\\\\\\n          src=\\\\\\\\\\\\\\\"devhub.near/widget/devhub.entity.addon.blog.editor.form\\\\\\\\\\\\\\\"\\\\\\\\n          props={{\\\\\\\\n            title,\\\\\\\\n            setTitle,\\\\\\\\n            subtitle,\\\\\\\\n            setSubtitle,\\\\\\\\n            options: selectOptions,\\\\\\\\n            category,\\\\\\\\n            setCategory,\\\\\\\\n            description,\\\\\\\\n            setDescription,\\\\\\\\n            author,\\\\\\\\n            setAuthor,\\\\\\\\n            date,\\\\\\\\n            setDate,\\\\\\\\n            content,\\\\\\\\n            setContent,\\\\\\\\n          }}\\\\\\\\n        />\\\\\\\\n        <div\\\\\\\\n          className={\\\\\\\\\\\\\\\"d-flex align-items-center justify-content-end gap-3 mt-4\\\\\\\\\\\\\\\"}\\\\\\\\n        >\\\\\\\\n          <Widget\\\\\\\\n            src={\\\\\\\\\\\\\\\"devhub.near/widget/devhub.components.molecule.Button\\\\\\\\\\\\\\\"}\\\\\\\\n            props={{\\\\\\\\n              classNames: { root: \\\\\\\\\\\\\\\"btn-success\\\\\\\\\\\\\\\" },\\\\\\\\n              disabled: !hasDataChanged(),\\\\\\\\n              icon: {\\\\\\\\n                type: \\\\\\\\\\\\\\\"bootstrap_icon\\\\\\\\\\\\\\\",\\\\\\\\n                variant: \\\\\\\\\\\\\\\"bi-check-circle-fill\\\\\\\\\\\\\\\",\\\\\\\\n              },\\\\\\\\n              label: \\\\\\\\\\\\\\\"Publish\\\\\\\\\\\\\\\",\\\\\\\\n              onClick: handlePublish,\\\\\\\\n            }}\\\\\\\\n          />\\\\\\\\n        </div>\\\\\\\\n      </div>\\\\\\\\n      <div\\\\\\\\n        className=\\\\\\\\\\\\\\\"tab-pane\\\\\\\\\\\\\\\"\\\\\\\\n        id=\\\\\\\\\\\\\\\"preview\\\\\\\\\\\\\\\"\\\\\\\\n        role=\\\\\\\\\\\\\\\"tabpanel\\\\\\\\\\\\\\\"\\\\\\\\n        aria-labelledby=\\\\\\\\\\\\\\\"preview-tab\\\\\\\\\\\\\\\"\\\\\\\\n        style={{ position: \\\\\\\\\\\\\\\"relative\\\\\\\\\\\\\\\" }}\\\\\\\\n      >\\\\\\\\n        <div style={{ position: \\\\\\\\\\\\\\\"absolute\\\\\\\\\\\\\\\", top: 10, right: 0 }}>\\\\\\\\n          <Widget\\\\\\\\n            // LEGACY\\\\\\\\n            src=\\\\\\\\\\\\\\\"devhub.near/widget/gigs-board.components.molecule.button-switch\\\\\\\\\\\\\\\"\\\\\\\\n            props={{\\\\\\\\n              currentValue: previewMode,\\\\\\\\n              key: \\\\\\\\\\\\\\\"previewMode\\\\\\\\\\\\\\\",\\\\\\\\n              onChange: (e) => setPreviewMode(e.target.value),\\\\\\\\n              options: [\\\\\\\\n                { label: \\\\\\\\\\\\\\\"Card\\\\\\\\\\\\\\\", value: \\\\\\\\\\\\\\\"card\\\\\\\\\\\\\\\" },\\\\\\\\n                { label: \\\\\\\\\\\\\\\"Page\\\\\\\\\\\\\\\", value: \\\\\\\\\\\\\\\"page\\\\\\\\\\\\\\\" },\\\\\\\\n              ],\\\\\\\\n\\\\\\\\n              title: \\\\\\\\\\\\\\\"Preview mode selection\\\\\\\\\\\\\\\",\\\\\\\\n            }}\\\\\\\\n          />\\\\\\\\n        </div>\\\\\\\\n        <div className=\\\\\\\\\\\\\\\"w-100 h-100 p-4\\\\\\\\\\\\\\\">\\\\\\\\n          <Preview />\\\\\\\\n        </div>\\\\\\\\n      </div>\\\\\\\\n    </div>\\\\\\\\n  </Container>\\\\\\\\n);\\\\\\\\n\"}, \"devhub.entity.addon.blog.editor.preview\": {\"\": \"return (\\\\\\\\n  <div>\\\\\\\\n    <h1>Preview</h1>\\\\\\\\n    <p>{JSON.stringify(props)}</p>\\\\\\\\n  </div>\\\\\\\\n);\\\\\\\\n\"}, \"devhub.entity.addon.blog.editor.sidebar\": {\"\": \"const { items, handleItemClick, selectedItem } = props;\\\\\\\\n\\\\\\\\nconst SidebarContainer = styled.div`\\\\\\\\n  background-color: #f0f0f0;\\\\\\\\n  padding: 16px;\\\\\\\\n  width: 200px;\\\\\\\\n  display: flex;\\\\\\\\n  flex-direction: column;\\\\\\\\n  align-items: center;\\\\\\\\n  height: 100%;\\\\\\\\n  gap: 4px;\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst SidebarButton = styled.button`\\\\\\\\n  display: flex;\\\\\\\\n  padding: 14px 16px;\\\\\\\\n  text-align: center;\\\\\\\\n  cursor: pointer;\\\\\\\\n  gap: 16px;\\\\\\\\n  width: 100%;\\\\\\\\n\\\\\\\\n  border-radius: 4px;\\\\\\\\n  border: 1px solid #00ec97;\\\\\\\\n\\\\\\\\n  background-color: ${({ selected }) => (selected ? \\\\\\\\\\\\\\\"#00ec97\\\\\\\\\\\\\\\" : \\\\\\\\\\\\\\\"white\\\\\\\\\\\\\\\")};\\\\\\\\n  color: ${({ selected }) => (selected ? \\\\\\\\\\\\\\\"white\\\\\\\\\\\\\\\" : \\\\\\\\\\\\\\\"black\\\\\\\\\\\\\\\")};\\\\\\\\n`;\\\\\\\\n\\\\\\\\nreturn (\\\\\\\\n  <SidebarContainer id=\\\\\\\\\\\\\\\"edit-blog-sidebar\\\\\\\\\\\\\\\">\\\\\\\\n    <p>Blog posts</p>\\\\\\\\n    <SidebarButton onClick={() => handleItemClick(null)} id=\\\\\\\\\\\\\\\"create-new-blog\\\\\\\\\\\\\\\">\\\\\\\\n      New\\\\\\\\n    </SidebarButton>\\\\\\\\n    {(items || []).map((it) => (\\\\\\\\n      <SidebarButton\\\\\\\\n        id={`edit-blog-selector-${it.post_id}`}\\\\\\\\n        key={it.post_id}\\\\\\\\n        selected={selectedItem.id === it.post_id}\\\\\\\\n        onClick={() => handleItemClick(it.post_id)}\\\\\\\\n      >\\\\\\\\n        {it.post_id}\\\\\\\\n      </SidebarButton>\\\\\\\\n    ))}\\\\\\\\n  </SidebarContainer>\\\\\\\\n);\\\\\\\\n\"}, \"devhub.entity.addon.github.Configurator\": {\"\": \"// THIS IS A WORK IN PROGRESS.\\\\\\\\n// The code for the configurator and viewer is very intertwined\\\\\\\\n// and there is constant \\\\\\\\\\\\\\\"negative affirmative\\\\\\\\\\\\\\\" prop drilling happening, making it hard to follow\\\\\\\\nconst { data, onSubmit, permissions } = props;\\\\\\\\n\\\\\\\\nconst Struct = VM.require(\\\\\\\\\\\\\\\"devhub.near/widget/core.lib.struct\\\\\\\\\\\\\\\");\\\\\\\\n\\\\\\\\nif (!Struct) {\\\\\\\\n  return <p>Loading modules...</p>;\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst defaultFieldUpdate = ({\\\\\\\\n  input,\\\\\\\\n  lastKnownValue,\\\\\\\\n  params: { arrayDelimiter },\\\\\\\\n}) => {\\\\\\\\n  switch (typeof input) {\\\\\\\\n    case \\\\\\\\\\\\\\\"boolean\\\\\\\\\\\\\\\":\\\\\\\\n      return input;\\\\\\\\n\\\\\\\\n    case \\\\\\\\\\\\\\\"object\\\\\\\\\\\\\\\": {\\\\\\\\n      if (Array.isArray(input) && typeof lastKnownValue === \\\\\\\\\\\\\\\"string\\\\\\\\\\\\\\\") {\\\\\\\\n        return input.join(arrayDelimiter ?? \\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\");\\\\\\\\n      } else {\\\\\\\\n        return Array.isArray(lastKnownValue)\\\\\\\\n          ? [...lastKnownValue, ...input]\\\\\\\\n          : { ...lastKnownValue, ...input };\\\\\\\\n      }\\\\\\\\n    }\\\\\\\\n\\\\\\\\n    case \\\\\\\\\\\\\\\"string\\\\\\\\\\\\\\\":\\\\\\\\n      return Array.isArray(lastKnownValue)\\\\\\\\n        ? input.split(arrayDelimiter ?? \\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\").map((string) => string.trim())\\\\\\\\n        : input;\\\\\\\\n\\\\\\\\n    default: {\\\\\\\\n      if ((input ?? null) === null) {\\\\\\\\n        switch (typeof lastKnownValue) {\\\\\\\\n          case \\\\\\\\\\\\\\\"boolean\\\\\\\\\\\\\\\":\\\\\\\\n            return !lastKnownValue;\\\\\\\\n\\\\\\\\n          default:\\\\\\\\n            return lastKnownValue;\\\\\\\\n        }\\\\\\\\n      } else return input;\\\\\\\\n    }\\\\\\\\n  }\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst useForm = ({ initialValues, onUpdate, stateKey, uninitialized }) => {\\\\\\\\n  const initialFormState = {\\\\\\\\n    hasUnsubmittedChanges: false,\\\\\\\\n    values: initialValues ?? {},\\\\\\\\n  };\\\\\\\\n\\\\\\\\n  const formState = state[stateKey] ?? null,\\\\\\\\n    isSynced = Struct.isEqual(formState?.values ?? {}, initialFormState.values);\\\\\\\\n\\\\\\\\n  const formReset = () =>\\\\\\\\n    State.update((lastKnownComponentState) => ({\\\\\\\\n      ...lastKnownComponentState,\\\\\\\\n      [stateKey]: initialFormState,\\\\\\\\n      hasUnsubmittedChanges: false,\\\\\\\\n    }));\\\\\\\\n\\\\\\\\n  const formUpdate =\\\\\\\\n    ({ path, via: customFieldUpdate, ...params }) =>\\\\\\\\n    (fieldInput) => {\\\\\\\\n      const updatedValues = Struct.deepFieldUpdate(\\\\\\\\n        formState?.values ?? {},\\\\\\\\n        path, // Pass the path directly\\\\\\\\n        (node) => {\\\\\\\\n          return {\\\\\\\\n            ...node,\\\\\\\\n            // Update the last key in the path\\\\\\\\n            [path[path.length - 1]]:\\\\\\\\n              typeof customFieldUpdate === \\\\\\\\\\\\\\\"function\\\\\\\\\\\\\\\"\\\\\\\\n                ? customFieldUpdate(\\\\\\\\n                    fieldInput?.target?.value ?? fieldInput,\\\\\\\\n                    node[path[path.length - 1]],\\\\\\\\n                    params\\\\\\\\n                  )\\\\\\\\n                : defaultFieldUpdate(\\\\\\\\n                    fieldInput?.target?.value ?? fieldInput,\\\\\\\\n                    node[path[path.length - 1]],\\\\\\\\n                    params\\\\\\\\n                  ),\\\\\\\\n          };\\\\\\\\n        }\\\\\\\\n      );\\\\\\\\n\\\\\\\\n      State.update((lastKnownComponentState) => ({\\\\\\\\n        ...lastKnownComponentState,\\\\\\\\n\\\\\\\\n        [stateKey]: {\\\\\\\\n          hasUnsubmittedChanges: !Struct.isEqual(\\\\\\\\n            updatedValues,\\\\\\\\n            initialFormState.values\\\\\\\\n          ),\\\\\\\\n\\\\\\\\n          values: updatedValues,\\\\\\\\n        },\\\\\\\\n      }));\\\\\\\\n\\\\\\\\n      if (\\\\\\\\n        typeof onUpdate === \\\\\\\\\\\\\\\"function\\\\\\\\\\\\\\\" &&\\\\\\\\n        !Struct.isEqual(updatedValues, initialFormState.values)\\\\\\\\n      ) {\\\\\\\\n        onUpdate(updatedValues);\\\\\\\\n      }\\\\\\\\n    };\\\\\\\\n\\\\\\\\n  if (\\\\\\\\n    !uninitialized &&\\\\\\\\n    (formState === null || (!formState.hasUnsubmittedChanges && !isSynced))\\\\\\\\n  ) {\\\\\\\\n    formReset();\\\\\\\\n  }\\\\\\\\n\\\\\\\\n  return {\\\\\\\\n    ...(formState ?? initialFormState),\\\\\\\\n    isSynced,\\\\\\\\n    reset: formReset,\\\\\\\\n    stateKey,\\\\\\\\n    update: formUpdate,\\\\\\\\n  };\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst uuid = () =>\\\\\\\\n  [Date.now().toString(16)]\\\\\\\\n    .concat(\\\\\\\\n      Array.from(\\\\\\\\n        { length: 4 },\\\\\\\\n        () => Math.floor(Math.random() * 0xffffffff) & 0xffffffff\\\\\\\\n      ).map((value) => value.toString(16))\\\\\\\\n    )\\\\\\\\n    .join(\\\\\\\\\\\\\\\"-\\\\\\\\\\\\\\\");\\\\\\\\n\\\\\\\\nconst withUUIDIndex = (data) => {\\\\\\\\n  const id = uuid();\\\\\\\\n\\\\\\\\n  return Object.fromEntries([[id, { ...data, id }]]);\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst settings = {\\\\\\\\n  maxColumnsNumber: 20,\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst GithubKanbanBoardTicketFeaturesSchema = {\\\\\\\\n  id: { label: \\\\\\\\\\\\\\\"GitHub ID\\\\\\\\\\\\\\\" },\\\\\\\\n  author: { label: \\\\\\\\\\\\\\\"Author\\\\\\\\\\\\\\\" },\\\\\\\\n  labels: { label: \\\\\\\\\\\\\\\"Labels\\\\\\\\\\\\\\\" },\\\\\\\\n  type: { label: \\\\\\\\\\\\\\\"Type\\\\\\\\\\\\\\\" },\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst GithubKanbanBoardTicketTypesSchema = {\\\\\\\\n  Issue: { label: \\\\\\\\\\\\\\\"Issue\\\\\\\\\\\\\\\" },\\\\\\\\n  PullRequest: { label: \\\\\\\\\\\\\\\"Pull Request\\\\\\\\\\\\\\\" },\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst GithubKanbanBoardDefaults = {\\\\\\\\n  columns: {},\\\\\\\\n  dataTypesIncluded: { Issue: false, PullRequest: true },\\\\\\\\n  description: \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\",\\\\\\\\n  repoURL: \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\",\\\\\\\\n  ticketState: \\\\\\\\\\\\\\\"all\\\\\\\\\\\\\\\",\\\\\\\\n  title: \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\",\\\\\\\\n\\\\\\\\n  metadata: {\\\\\\\\n    id: uuid(),\\\\\\\\n    type: \\\\\\\\\\\\\\\"github.kanban_board\\\\\\\\\\\\\\\",\\\\\\\\n\\\\\\\\n    ticket: {\\\\\\\\n      type: \\\\\\\\\\\\\\\"github.kanban_ticket\\\\\\\\\\\\\\\",\\\\\\\\n      features: { id: true, author: true, labels: true, type: true },\\\\\\\\n    },\\\\\\\\n  },\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst toMigrated = ({ metadata, id, ...restParams }) => ({\\\\\\\\n  metadata: {\\\\\\\\n    ...GithubKanbanBoardDefaults.metadata,\\\\\\\\n    ...metadata,\\\\\\\\n    id: id ?? metadata.id,\\\\\\\\n  },\\\\\\\\n\\\\\\\\n  ...restParams,\\\\\\\\n});\\\\\\\\n\\\\\\\\nconst [editingMode, setEditingMode] = useState(\\\\\\\\\\\\\\\"form\\\\\\\\\\\\\\\");\\\\\\\\n\\\\\\\\n// This is a workaround because of how the data was decided to be saved.\\\\\\\\nconst dynamicKey = Object.keys(data).find((key) => key !== \\\\\\\\\\\\\\\"metadata\\\\\\\\\\\\\\\");\\\\\\\\ndata = data[dynamicKey];\\\\\\\\n\\\\\\\\nconst form = useForm({\\\\\\\\n  initialValues: Struct.typeMatch(data) ? toMigrated(data) : {},\\\\\\\\n  stateKey: \\\\\\\\\\\\\\\"view\\\\\\\\\\\\\\\",\\\\\\\\n  uninitialized: !Struct.typeMatch(data),\\\\\\\\n});\\\\\\\\n\\\\\\\\nconst newViewInit = () =>\\\\\\\\n  State.update((lastKnownState) => ({\\\\\\\\n    ...lastKnownState,\\\\\\\\n\\\\\\\\n    board: {\\\\\\\\n      hasUnsubmittedChanges: false,\\\\\\\\n      values: GithubKanbanBoardDefaults,\\\\\\\\n    },\\\\\\\\n  }));\\\\\\\\n\\\\\\\\nconst columnsCreateNew = ({ lastKnownValue }) =>\\\\\\\\n  Object.keys(lastKnownValue || {}).length < settings.maxColumnsNumber\\\\\\\\n    ? {\\\\\\\\n        ...(lastKnownValue ?? {}),\\\\\\\\n\\\\\\\\n        ...withUUIDIndex({\\\\\\\\n          description: \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\",\\\\\\\\n          labelSearchTerms: [],\\\\\\\\n          title: \\\\\\\\\\\\\\\"New column\\\\\\\\\\\\\\\",\\\\\\\\n        }),\\\\\\\\n      }\\\\\\\\n    : lastKnownValue;\\\\\\\\n\\\\\\\\nconst columnsDeleteById =\\\\\\\\n  (id) =>\\\\\\\\n  ({ lastKnownValue }) =>\\\\\\\\n    Object.fromEntries(\\\\\\\\n      Object.entries(lastKnownValue).filter(([columnId]) => columnId !== id)\\\\\\\\n    );\\\\\\\\n\\\\\\\\nconst onCancel = () => {\\\\\\\\n  form.reset();\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst onSave = () =>\\\\\\\\n  onSubmit({\\\\\\\\n    kanbanBoards: { [form.values.metadata.id]: form.values },\\\\\\\\n  });\\\\\\\\n\\\\\\\\nfunction Form() {\\\\\\\\n  return (\\\\\\\\n    <>\\\\\\\\n      <div className=\\\\\\\\\\\\\\\"d-flex flex-column\\\\\\\\\\\\\\\">\\\\\\\\n        <div className=\\\\\\\\\\\\\\\"d-flex gap-1 flex-column flex-xl-row\\\\\\\\\\\\\\\">\\\\\\\\n          <Widget\\\\\\\\n            src=\\\\\\\\\\\\\\\"devhub.near/widget/gigs-board.components.molecule.text-input\\\\\\\\\\\\\\\"\\\\\\\\n            props={{\\\\\\\\n              className: \\\\\\\\\\\\\\\"w-100\\\\\\\\\\\\\\\",\\\\\\\\n              key: `${form.values.metadata.id}-repoURL`,\\\\\\\\n              label: \\\\\\\\\\\\\\\"Repository URL\\\\\\\\\\\\\\\",\\\\\\\\n              onChange: form.update({ path: [\\\\\\\\\\\\\\\"repoURL\\\\\\\\\\\\\\\"] }),\\\\\\\\n              placeholder: \\\\\\\\\\\\\\\"https://github.com/example-org/example-repo\\\\\\\\\\\\\\\",\\\\\\\\n              value: form.values.repoURL,\\\\\\\\n            }}\\\\\\\\n          />\\\\\\\\n          <Widget\\\\\\\\n            src=\\\\\\\\\\\\\\\"devhub.near/widget/gigs-board.components.molecule.text-input\\\\\\\\\\\\\\\"\\\\\\\\n            props={{\\\\\\\\n              className: \\\\\\\\\\\\\\\"w-100\\\\\\\\\\\\\\\",\\\\\\\\n              key: `${form.values.metadata.id}-title`,\\\\\\\\n              label: \\\\\\\\\\\\\\\"Title\\\\\\\\\\\\\\\",\\\\\\\\n              onChange: form.update({ path: [\\\\\\\\\\\\\\\"title\\\\\\\\\\\\\\\"] }),\\\\\\\\n              placeholder: \\\\\\\\\\\\\\\"NEAR Protocol NEPs\\\\\\\\\\\\\\\",\\\\\\\\n              value: form.values.title,\\\\\\\\n            }}\\\\\\\\n          />\\\\\\\\n        </div>\\\\\\\\n\\\\\\\\n        <Widget\\\\\\\\n          src=\\\\\\\\\\\\\\\"devhub.near/widget/gigs-board.components.molecule.text-input\\\\\\\\\\\\\\\"\\\\\\\\n          props={{\\\\\\\\n            className: \\\\\\\\\\\\\\\"w-100\\\\\\\\\\\\\\\",\\\\\\\\n            key: `${form.values.metadata.id}-description`,\\\\\\\\n            label: \\\\\\\\\\\\\\\"Description\\\\\\\\\\\\\\\",\\\\\\\\n            onChange: form.update({ path: [\\\\\\\\\\\\\\\"description\\\\\\\\\\\\\\\"] }),\\\\\\\\n            placeholder: \\\\\\\\\\\\\\\"Latest NEAR Enhancement Proposals by status.\\\\\\\\\\\\\\\",\\\\\\\\n            value: form.values.description,\\\\\\\\n          }}\\\\\\\\n        />\\\\\\\\n      </div>\\\\\\\\n\\\\\\\\n      <div className=\\\\\\\\\\\\\\\"d-flex gap-4 flex-row flex-wrap justify-content-between\\\\\\\\\\\\\\\">\\\\\\\\n        <Widget\\\\\\\\n          src=\\\\\\\\\\\\\\\"devhub.near/widget/gigs-board.components.molecule.text-input\\\\\\\\\\\\\\\"\\\\\\\\n          props={{\\\\\\\\n            heading: \\\\\\\\\\\\\\\"Ticket types\\\\\\\\\\\\\\\",\\\\\\\\n            classNames: { root: \\\\\\\\\\\\\\\"col-12 col-md-4 h-auto\\\\\\\\\\\\\\\" },\\\\\\\\n            externalState: form.values.dataTypesIncluded,\\\\\\\\n            isActive: true,\\\\\\\\n            isEmbedded: true,\\\\\\\\n            isUnlocked: permissions.can_configure,\\\\\\\\n            onChange: form.update({ path: [\\\\\\\\\\\\\\\"dataTypesIncluded\\\\\\\\\\\\\\\"] }),\\\\\\\\n            schema: GithubKanbanBoardTicketTypesSchema,\\\\\\\\n          }}\\\\\\\\n        />\\\\\\\\n\\\\\\\\n        <div\\\\\\\\n          className={[\\\\\\\\n            \\\\\\\\\\\\\\\"col-12 col-md-3\\\\\\\\\\\\\\\",\\\\\\\\n            \\\\\\\\\\\\\\\"d-flex gap-3 flex-column justify-content-center p-4\\\\\\\\\\\\\\\",\\\\\\\\n          ].join(\\\\\\\\\\\\\\\" \\\\\\\\\\\\\\\")}\\\\\\\\n        >\\\\\\\\n          <span\\\\\\\\n            className=\\\\\\\\\\\\\\\"d-inline-flex gap-2\\\\\\\\\\\\\\\"\\\\\\\\n            id={`${form.values.metadata.id}-ticketState`}\\\\\\\\n          >\\\\\\\\n            <i class=\\\\\\\\\\\\\\\"bi bi-cone-striped\\\\\\\\\\\\\\\" />\\\\\\\\n            <span>Ticket state</span>\\\\\\\\n          </span>\\\\\\\\n\\\\\\\\n          <Widget\\\\\\\\n            src=\\\\\\\\\\\\\\\"devhub.near/widget/gigs-board.components.molecule.button-switch\\\\\\\\\\\\\\\"\\\\\\\\n            props={{\\\\\\\\n              currentValue: form.values.ticketState,\\\\\\\\n              key: \\\\\\\\\\\\\\\"ticketState\\\\\\\\\\\\\\\",\\\\\\\\n              onChange: form.update({ path: [\\\\\\\\\\\\\\\"ticketState\\\\\\\\\\\\\\\"] }),\\\\\\\\n\\\\\\\\n              options: [\\\\\\\\n                { label: \\\\\\\\\\\\\\\"All\\\\\\\\\\\\\\\", value: \\\\\\\\\\\\\\\"all\\\\\\\\\\\\\\\" },\\\\\\\\n                { label: \\\\\\\\\\\\\\\"Open\\\\\\\\\\\\\\\", value: \\\\\\\\\\\\\\\"open\\\\\\\\\\\\\\\" },\\\\\\\\n                { label: \\\\\\\\\\\\\\\"Closed\\\\\\\\\\\\\\\", value: \\\\\\\\\\\\\\\"closed\\\\\\\\\\\\\\\" },\\\\\\\\n              ],\\\\\\\\n            }}\\\\\\\\n          />\\\\\\\\n        </div>\\\\\\\\n        <Widget\\\\\\\\n          src=\\\\\\\\\\\\\\\"devhub.near/widget/gigs-board.components.organism.configurator\\\\\\\\\\\\\\\"\\\\\\\\n          props={{\\\\\\\\n            heading: \\\\\\\\\\\\\\\"Card fields\\\\\\\\\\\\\\\",\\\\\\\\n            classNames: { root: \\\\\\\\\\\\\\\"col-12 col-md-4 h-auto\\\\\\\\\\\\\\\" },\\\\\\\\n            externalState: form.values.metadata.ticket.features,\\\\\\\\n            isActive: true,\\\\\\\\n            isEmbedded: true,\\\\\\\\n            isUnlocked: permissions.can_configure,\\\\\\\\n            onChange: form.update({ path: [\\\\\\\\\\\\\\\"metadata\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"ticket\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"features\\\\\\\\\\\\\\\"] }),\\\\\\\\n            schema: GithubKanbanBoardTicketFeaturesSchema,\\\\\\\\n            nearDevGovGigsWidgetsAccountId: \\\\\\\\\\\\\\\"devhub.near\\\\\\\\\\\\\\\",\\\\\\\\n            nearDevGovGigsContractAccountId: \\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\",\\\\\\\\n          }}\\\\\\\\n        />\\\\\\\\n      </div>\\\\\\\\n\\\\\\\\n      <div className=\\\\\\\\\\\\\\\"d-flex align-items-center justify-content-between\\\\\\\\\\\\\\\">\\\\\\\\n        <span className=\\\\\\\\\\\\\\\"d-inline-flex gap-2 m-0\\\\\\\\\\\\\\\">\\\\\\\\n          <i className=\\\\\\\\\\\\\\\"bi bi-list-task\\\\\\\\\\\\\\\" />\\\\\\\\n          <span>{`Columns ( max. ${settings.maxColumnsNumber} )`}</span>\\\\\\\\n        </span>\\\\\\\\n      </div>\\\\\\\\n\\\\\\\\n      <div className=\\\\\\\\\\\\\\\"d-flex flex-column align-items-center gap-3 w-100\\\\\\\\\\\\\\\">\\\\\\\\n        {Object.values(form.values.columns ?? {}).map(\\\\\\\\n          ({ id, description, labelSearchTerms, title }) => (\\\\\\\\n            <div\\\\\\\\n              className=\\\\\\\\\\\\\\\"d-flex gap-3 rounded-4 border p-3 w-100 attractable\\\\\\\\\\\\\\\"\\\\\\\\n              key={`column-${id}-configurator`}\\\\\\\\n            >\\\\\\\\n              <div className=\\\\\\\\\\\\\\\"d-flex flex-column gap-1 w-100\\\\\\\\\\\\\\\">\\\\\\\\n                <Widget\\\\\\\\n                  src=\\\\\\\\\\\\\\\"devhub.near/widget/gigs-board.components.molecule.text-input\\\\\\\\\\\\\\\"\\\\\\\\n                  props={{\\\\\\\\n                    className: \\\\\\\\\\\\\\\"flex-grow-1\\\\\\\\\\\\\\\",\\\\\\\\n                    key: `${form.values.metadata.id}-column-${id}-title`,\\\\\\\\n                    label: \\\\\\\\\\\\\\\"Title\\\\\\\\\\\\\\\",\\\\\\\\n                    onChange: form.update({ path: [\\\\\\\\\\\\\\\"columns\\\\\\\\\\\\\\\", id, \\\\\\\\\\\\\\\"title\\\\\\\\\\\\\\\"] }),\\\\\\\\n                    placeholder: \\\\\\\\\\\\\\\"\\\\\\\\u{1f440} Review\\\\\\\\\\\\\\\",\\\\\\\\n                    value: title,\\\\\\\\n                  }}\\\\\\\\n                />\\\\\\\\n                <Widget\\\\\\\\n                  src=\\\\\\\\\\\\\\\"devhub.near/widget/gigs-board.components.molecule.text-input\\\\\\\\\\\\\\\"\\\\\\\\n                  props={{\\\\\\\\n                    format: \\\\\\\\\\\\\\\"comma-separated\\\\\\\\\\\\\\\",\\\\\\\\n                    key: `${form.values.metadata.id}-column-${title}-labelSearchTerms`,\\\\\\\\n\\\\\\\\n                    label: `Search terms for all the labels\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\tMUST be presented in included tickets`,\\\\\\\\n\\\\\\\\n                    onChange: form.update({\\\\\\\\n                      path: [\\\\\\\\\\\\\\\"columns\\\\\\\\\\\\\\\", id, \\\\\\\\\\\\\\\"labelSearchTerms\\\\\\\\\\\\\\\"],\\\\\\\\n                    }),\\\\\\\\n\\\\\\\\n                    placeholder: \\\\\\\\\\\\\\\"WG-, draft, review, proposal, ...\\\\\\\\\\\\\\\",\\\\\\\\n                    value: labelSearchTerms.join(\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"),\\\\\\\\n                  }}\\\\\\\\n                />\\\\\\\\n                <Widget\\\\\\\\n                  src=\\\\\\\\\\\\\\\"devhub.near/widget/gigs-board.components.molecule.text-input\\\\\\\\\\\\\\\"\\\\\\\\n                  props={{\\\\\\\\n                    className: \\\\\\\\\\\\\\\"flex-grow-1\\\\\\\\\\\\\\\",\\\\\\\\n                    key: `${form.values.metadata.id}-column-${id}-description`,\\\\\\\\n                    label: \\\\\\\\\\\\\\\"Description\\\\\\\\\\\\\\\",\\\\\\\\n\\\\\\\\n                    onChange: form.update({\\\\\\\\n                      path: [\\\\\\\\\\\\\\\"columns\\\\\\\\\\\\\\\", id, \\\\\\\\\\\\\\\"description\\\\\\\\\\\\\\\"],\\\\\\\\n                    }),\\\\\\\\n\\\\\\\\n                    placeholder:\\\\\\\\n                      \\\\\\\\\\\\\\\"NEPs that need a review by Subject Matter Experts.\\\\\\\\\\\\\\\",\\\\\\\\n\\\\\\\\n                    value: description,\\\\\\\\n                  }}\\\\\\\\n                />\\\\\\\\n              </div>\\\\\\\\n\\\\\\\\n              <div\\\\\\\\n                className=\\\\\\\\\\\\\\\"d-flex flex-column gap-3 border-start p-3 pe-0\\\\\\\\\\\\\\\"\\\\\\\\n                style={{ marginTop: -16, marginBottom: -16 }}\\\\\\\\n              >\\\\\\\\n                <button\\\\\\\\n                  className=\\\\\\\\\\\\\\\"btn btn-outline-danger\\\\\\\\\\\\\\\"\\\\\\\\n                  onClick={form.update({\\\\\\\\n                    path: [\\\\\\\\\\\\\\\"columns\\\\\\\\\\\\\\\"],\\\\\\\\n                    via: columnsDeleteById(id),\\\\\\\\n                  })}\\\\\\\\n                  title=\\\\\\\\\\\\\\\"Delete column\\\\\\\\\\\\\\\"\\\\\\\\n                >\\\\\\\\n                  <i className=\\\\\\\\\\\\\\\"bi bi-trash-fill\\\\\\\\\\\\\\\" />\\\\\\\\n                </button>\\\\\\\\n              </div>\\\\\\\\n            </div>\\\\\\\\n          )\\\\\\\\n        )}\\\\\\\\n\\\\\\\\n        <div className=\\\\\\\\\\\\\\\"d-flex gap-3 justify-content-end w-100\\\\\\\\\\\\\\\">\\\\\\\\n          <Widget\\\\\\\\n            src=\\\\\\\\\\\\\\\"devhub.near/widget/gigs-board.components.molecule.button\\\\\\\\\\\\\\\"\\\\\\\\n            props={{\\\\\\\\n              classNames: {\\\\\\\\n                root: \\\\\\\\\\\\\\\"d-flex btn btn-outline-danger shadow-none border-0\\\\\\\\\\\\\\\",\\\\\\\\n              },\\\\\\\\n              label: \\\\\\\\\\\\\\\"Cancel\\\\\\\\\\\\\\\",\\\\\\\\n              onClick: onCancel,\\\\\\\\n              nearDevGovGigsWidgetsAccountId: \\\\\\\\\\\\\\\"devhub.near\\\\\\\\\\\\\\\",\\\\\\\\n            }}\\\\\\\\n          />\\\\\\\\n          <Widget\\\\\\\\n            src=\\\\\\\\\\\\\\\"devhub.near/widget/gigs-board.components.molecule.button\\\\\\\\\\\\\\\"\\\\\\\\n            props={{\\\\\\\\n              classNames: { root: \\\\\\\\\\\\\\\"btn btn-success\\\\\\\\\\\\\\\" },\\\\\\\\n              disabled: form.isSynced,\\\\\\\\n\\\\\\\\n              icon: {\\\\\\\\n                type: \\\\\\\\\\\\\\\"svg_icon\\\\\\\\\\\\\\\",\\\\\\\\n                variant: \\\\\\\\\\\\\\\"floppy_drive\\\\\\\\\\\\\\\",\\\\\\\\n                width: 14,\\\\\\\\n                height: 14,\\\\\\\\n              },\\\\\\\\n              label: \\\\\\\\\\\\\\\"Save\\\\\\\\\\\\\\\",\\\\\\\\n              onClick: onSave,\\\\\\\\n              nearDevGovGigsWidgetsAccountId: \\\\\\\\\\\\\\\"devhub.near\\\\\\\\\\\\\\\",\\\\\\\\n            }}\\\\\\\\n          />\\\\\\\\n        </div>\\\\\\\\n      </div>\\\\\\\\n    </>\\\\\\\\n  );\\\\\\\\n}\\\\\\\\n\\\\\\\\nreturn (\\\\\\\\n  <div\\\\\\\\n    className=\\\\\\\\\\\\\\\"d-flex flex-column gap-4 w-100\\\\\\\\\\\\\\\"\\\\\\\\n    style={{ maxWidth: \\\\\\\\\\\\\\\"100%\\\\\\\\\\\\\\\", marginTop: \\\\\\\\\\\\\\\"40px\\\\\\\\\\\\\\\" }}\\\\\\\\n  >\\\\\\\\n    <div className={\\\\\\\\\\\\\\\"d-flex flex-column gap-4 w-100\\\\\\\\\\\\\\\"}>\\\\\\\\n      <div className=\\\\\\\\\\\\\\\"d-flex align-items-center justify-content-between gap-3 w-100\\\\\\\\\\\\\\\">\\\\\\\\n        <h5 className=\\\\\\\\\\\\\\\"h5 d-inline-flex gap-2 m-0\\\\\\\\\\\\\\\">\\\\\\\\n          <i className=\\\\\\\\\\\\\\\"bi bi-gear-wide-connected\\\\\\\\\\\\\\\" />\\\\\\\\n          <span>GitHub board configuration</span>\\\\\\\\n        </h5>\\\\\\\\n        <Widget\\\\\\\\n          src=\\\\\\\\\\\\\\\"devhub.near/widget/gigs-board.components.molecule.button-switch\\\\\\\\\\\\\\\"\\\\\\\\n          props={{\\\\\\\\n            currentValue: editingMode,\\\\\\\\n            key: \\\\\\\\\\\\\\\"editingMode\\\\\\\\\\\\\\\",\\\\\\\\n            onChange: (e) => setEditingMode(e.target.value),\\\\\\\\n\\\\\\\\n            options: [\\\\\\\\n              { label: \\\\\\\\\\\\\\\"Form\\\\\\\\\\\\\\\", value: \\\\\\\\\\\\\\\"form\\\\\\\\\\\\\\\" },\\\\\\\\n              { label: \\\\\\\\\\\\\\\"JSON\\\\\\\\\\\\\\\", value: \\\\\\\\\\\\\\\"JSON\\\\\\\\\\\\\\\" },\\\\\\\\n            ],\\\\\\\\n\\\\\\\\n            title: \\\\\\\\\\\\\\\"Editing mode selection\\\\\\\\\\\\\\\",\\\\\\\\n          }}\\\\\\\\n        />\\\\\\\\n      </div>\\\\\\\\n      {editingMode === \\\\\\\\\\\\\\\"JSON\\\\\\\\\\\\\\\" ? (\\\\\\\\n        <div className=\\\\\\\\\\\\\\\"d-flex flex-column flex-grow-1 border-0 bg-transparent w-100\\\\\\\\\\\\\\\">\\\\\\\\n          <textarea\\\\\\\\n            className=\\\\\\\\\\\\\\\"form-control\\\\\\\\\\\\\\\"\\\\\\\\n            rows=\\\\\\\\\\\\\\\"12\\\\\\\\\\\\\\\"\\\\\\\\n            type=\\\\\\\\\\\\\\\"text\\\\\\\\\\\\\\\"\\\\\\\\n            value={JSON.stringify(form.values ?? {}, null, \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\")}\\\\\\\\n          />\\\\\\\\n        </div>\\\\\\\\n      ) : (\\\\\\\\n        <Form />\\\\\\\\n      )}\\\\\\\\n    </div>\\\\\\\\n    {form.values ? (\\\\\\\\n      <Widget\\\\\\\\n        src={`devhub.near/widget/gigs-board.entity.workspace.view.${form.values.metadata.type}`}\\\\\\\\n        props={{\\\\\\\\n          ...form.values,\\\\\\\\n\\\\\\\\n          configurationControls: [\\\\\\\\n            {\\\\\\\\n              label: \\\\\\\\\\\\\\\"New column\\\\\\\\\\\\\\\",\\\\\\\\n\\\\\\\\n              disabled:\\\\\\\\n                Object.keys(form.values.columns || {}).length >=\\\\\\\\n                settings.maxColumnsNumber,\\\\\\\\n\\\\\\\\n              icon: { type: \\\\\\\\\\\\\\\"bootstrap_icon\\\\\\\\\\\\\\\", variant: \\\\\\\\\\\\\\\"bi-plus-lg\\\\\\\\\\\\\\\" },\\\\\\\\n\\\\\\\\n              onClick: form.update({\\\\\\\\n                path: [\\\\\\\\\\\\\\\"columns\\\\\\\\\\\\\\\"],\\\\\\\\n                via: columnsCreateNew,\\\\\\\\n              }),\\\\\\\\n            },\\\\\\\\n          ],\\\\\\\\n\\\\\\\\n          isSynced: form.isSynced,\\\\\\\\n          link,\\\\\\\\n          permissions,\\\\\\\\n          nearDevGovGigsWidgetsAccountId: \\\\\\\\\\\\\\\"devhub.near\\\\\\\\\\\\\\\",\\\\\\\\n          nearDevGovGigsContractAccountId: \\\\\\\\\\\\\\\"${REPL_DEVHUB_CONTRACT\\\\\\\\\\\\\\\",\\\\\\\\n        }}\\\\\\\\n      />\\\\\\\\n    ) : (\\\\\\\\n      <div\\\\\\\\n        className=\\\\\\\\\\\\\\\"d-flex flex-column align-items-center justify-content-center gap-4\\\\\\\\\\\\\\\"\\\\\\\\n        style={{ height: 384 }}\\\\\\\\n      >\\\\\\\\n        <h5 className=\\\\\\\\\\\\\\\"h5 d-inline-flex gap-2 m-0\\\\\\\\\\\\\\\">\\\\\\\\n          This community doesn\\\\\\\\\\\\'t have a GitHub board\\\\\\\\n        </h5>\\\\\\\\n        <Widget\\\\\\\\n          src=\\\\\\\\\\\\\\\"devhub.near/widget/gigs-board.components.molecule.button\\\\\\\\\\\\\\\"\\\\\\\\n          props={{\\\\\\\\n            icon: { type: \\\\\\\\\\\\\\\"bootstrap_icon\\\\\\\\\\\\\\\", variant: \\\\\\\\\\\\\\\"bi-github\\\\\\\\\\\\\\\" },\\\\\\\\n            isHidden: !permissions.can_configure,\\\\\\\\n            label: \\\\\\\\\\\\\\\"Create GitHub board\\\\\\\\\\\\\\\",\\\\\\\\n            onClick: newViewInit,\\\\\\\\n            nearDevGovGigsWidgetsAccountId: \\\\\\\\\\\\\\\"devhub.near\\\\\\\\\\\\\\\",\\\\\\\\n          }}\\\\\\\\n        />\\\\\\\\n      </div>\\\\\\\\n    )}\\\\\\\\n  </div>\\\\\\\\n);\\\\\\\\n\"}, \"devhub.entity.addon.kanban.Configurator\": {\"\": \"// TODO: Kanban needs be converted to follow this pattern\\\\\\\\nconst { data, onSubmit } = props;\\\\\\\\n\\\\\\\\nreturn <></>;\\\\\\\\n\"}, \"devhub.entity.addon.blog.editor.provider\": {\"\": \"const { getPost } =\\\\\\\\n  VM.require(\\\\\\\\\\\\\\\"devhub.near/widget/core.adapter.devhub-contract\\\\\\\\\\\\\\\") ||\\\\\\\\n  (() => {});\\\\\\\\n\\\\\\\\nconst { Layout, handle } = props;\\\\\\\\n\\\\\\\\nconst QUERYAPI_ENDPOINT = `https://near-queryapi.api.pagoda.co/v1/graphql/`;\\\\\\\\n\\\\\\\\nconst fetchGraphQL = (operationsDoc, operationName, variables) => {\\\\\\\\n  return fetch(QUERYAPI_ENDPOINT, {\\\\\\\\n    method: \\\\\\\\\\\\\\\"POST\\\\\\\\\\\\\\\",\\\\\\\\n    headers: { \\\\\\\\\\\\\\\"x-hasura-role\\\\\\\\\\\\\\\": `bo_near` },\\\\\\\\n    body: JSON.stringify({\\\\\\\\n      query: operationsDoc,\\\\\\\\n      variables: variables,\\\\\\\\n      operationName: operationName,\\\\\\\\n    }),\\\\\\\\n  });\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst queryName =\\\\\\\\n  props.queryName ?? `bo_near_devhub_v17_posts_with_latest_snapshot`;\\\\\\\\n\\\\\\\\nconst query = `query DevhubPostsQuery($limit: Int = 100, $offset: Int = 0, $where: ${queryName}_bool_exp = {}) {\\\\\\\\n    ${queryName}(\\\\\\\\n      limit: $limit\\\\\\\\n      offset: $offset\\\\\\\\n      order_by: {block_height: desc}\\\\\\\\n      where: $where\\\\\\\\n    ) {\\\\\\\\n      post_id\\\\\\\\n    }\\\\\\\\n  }\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst includeLabels = [\\\\\\\\\\\\\\\"blog\\\\\\\\\\\\\\\", handle];\\\\\\\\n\\\\\\\\nconst buildWhereClause = () => {\\\\\\\\n  let where = {};\\\\\\\\n  if (props.author) {\\\\\\\\n    where = { author_id: { _eq: props.author }, ...where };\\\\\\\\n  }\\\\\\\\n  if (props.term) {\\\\\\\\n    where = { description: { _ilike: `%${props.term}%` }, ...where };\\\\\\\\n  }\\\\\\\\n  if (includeLabels && Array.isArray(includeLabels)) {\\\\\\\\n    const labelConditions = includeLabels.map((label) => ({\\\\\\\\n      labels: { _contains: label },\\\\\\\\n    }));\\\\\\\\n\\\\\\\\n    where = { _and: [...labelConditions, where] };\\\\\\\\n  }\\\\\\\\n  if (props.excludeLabels && Array.isArray(props.excludeLabels)) {\\\\\\\\n    const labelConditions = props.excludeLabels.map((label) => ({\\\\\\\\n      labels: { _nin: label },\\\\\\\\n    }));\\\\\\\\n\\\\\\\\n    where = { _and: [...labelConditions, where] };\\\\\\\\n  }\\\\\\\\n  if (!props.recency) {\\\\\\\\n    where = { parent_id: { _is_null: true }, ...where };\\\\\\\\n  }\\\\\\\\n  return where;\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst variables = { limit: DISPLAY_COUNT, offset, where: buildWhereClause() };\\\\\\\\n\\\\\\\\nconst posts = fetch(QUERYAPI_ENDPOINT, {\\\\\\\\n  method: \\\\\\\\\\\\\\\"POST\\\\\\\\\\\\\\\",\\\\\\\\n  headers: { \\\\\\\\\\\\\\\"x-hasura-role\\\\\\\\\\\\\\\": `bo_near` },\\\\\\\\n  body: JSON.stringify({\\\\\\\\n    query: query,\\\\\\\\n    variables: variables,\\\\\\\\n    operationName: \\\\\\\\\\\\\\\"DevhubPostsQuery\\\\\\\\\\\\\\\",\\\\\\\\n  }),\\\\\\\\n});\\\\\\\\n\\\\\\\\nconst handleOnChange = (v) => {\\\\\\\\n  console.log(\\\\\\\\\\\\\\\"onChange\\\\\\\\\\\\\\\", v);\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst handleGetData = (v) => {\\\\\\\\n  const postId = parseInt(v);\\\\\\\\n  const post = getPost({ post_id: postId });\\\\\\\\n  const description = JSON.parse(post.snapshot.description || \\\\\\\\\\\\\\\"null\\\\\\\\\\\\\\\") || {};\\\\\\\\n\\\\\\\\n  return {\\\\\\\\n    id: postId,\\\\\\\\n    ...description,\\\\\\\\n  };\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst handleOnSubmit = (v, isEdit) => {\\\\\\\\n  console.log(isEdit);\\\\\\\\n  if (isEdit) {\\\\\\\\n    Near.call({\\\\\\\\n      contractName: \\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\",\\\\\\\\n      methodName: \\\\\\\\\\\\\\\"edit_post\\\\\\\\\\\\\\\",\\\\\\\\n      args: {\\\\\\\\n        id: v.id,\\\\\\\\n        labels: [\\\\\\\\\\\\\\\"blog\\\\\\\\\\\\\\\", handle],\\\\\\\\n        body: {\\\\\\\\n          post_type: \\\\\\\\\\\\\\\"Comment\\\\\\\\\\\\\\\",\\\\\\\\n          description: JSON.stringify(v),\\\\\\\\n          comment_version: \\\\\\\\\\\\\\\"V2\\\\\\\\\\\\\\\",\\\\\\\\n        },\\\\\\\\n      },\\\\\\\\n      deposit: Big(10).pow(21).mul(2),\\\\\\\\n      gas: Big(10).pow(12).mul(100),\\\\\\\\n    });\\\\\\\\n  } else {\\\\\\\\n    Near.call({\\\\\\\\n      contractName: \\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\",\\\\\\\\n      methodName: \\\\\\\\\\\\\\\"add_post\\\\\\\\\\\\\\\",\\\\\\\\n      args: {\\\\\\\\n        labels: [\\\\\\\\\\\\\\\"blog\\\\\\\\\\\\\\\", handle],\\\\\\\\n        body: {\\\\\\\\n          post_type: \\\\\\\\\\\\\\\"Comment\\\\\\\\\\\\\\\",\\\\\\\\n          description: JSON.stringify(v),\\\\\\\\n          comment_version: \\\\\\\\\\\\\\\"V2\\\\\\\\\\\\\\\",\\\\\\\\n        },\\\\\\\\n      },\\\\\\\\n      deposit: Big(10).pow(21).mul(2),\\\\\\\\n      gas: Big(10).pow(12).mul(100),\\\\\\\\n    });\\\\\\\\n  }\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst handleOnCancel = (v) => {\\\\\\\\n  console.log(\\\\\\\\\\\\\\\"onCancel\\\\\\\\\\\\\\\", v);\\\\\\\\n};\\\\\\\\n\\\\\\\\nreturn (\\\\\\\\n  <Layout\\\\\\\\n    data={posts.body.data.bo_near_devhub_v17_posts_with_latest_snapshot || []}\\\\\\\\n    getData={handleGetData}\\\\\\\\n    onChange={handleOnChange}\\\\\\\\n    onSubmit={handleOnSubmit}\\\\\\\\n    onCancel={handleOnCancel}\\\\\\\\n  />\\\\\\\\n);\\\\\\\\n\"}, \"devhub.components.molecule.MarkdownEditor\": {\"\": \"const MarkdownEditor = ({ data, onChange }) => {\\\\\\\\n  return (\\\\\\\\n    <Widget\\\\\\\\n      src={\\\\\\\\\\\\\\\"efiz.near/widget/SimpleMDE\\\\\\\\\\\\\\\"}\\\\\\\\n      props={{\\\\\\\\n        data,\\\\\\\\n        onChange,\\\\\\\\n        toolbar: [\\\\\\\\n          \\\\\\\\\\\\\\\"heading\\\\\\\\\\\\\\\",\\\\\\\\n          \\\\\\\\\\\\\\\"bold\\\\\\\\\\\\\\\",\\\\\\\\n          \\\\\\\\\\\\\\\"italic\\\\\\\\\\\\\\\",\\\\\\\\n          \\\\\\\\\\\\\\\"quote\\\\\\\\\\\\\\\",\\\\\\\\n          \\\\\\\\\\\\\\\"code\\\\\\\\\\\\\\\",\\\\\\\\n          \\\\\\\\\\\\\\\"link\\\\\\\\\\\\\\\",\\\\\\\\n          \\\\\\\\\\\\\\\"unordered-list\\\\\\\\\\\\\\\",\\\\\\\\n          \\\\\\\\\\\\\\\"ordered-list\\\\\\\\\\\\\\\",\\\\\\\\n          \\\\\\\\\\\\\\\"checklist\\\\\\\\\\\\\\\",\\\\\\\\n          \\\\\\\\\\\\\\\"mention\\\\\\\\\\\\\\\",\\\\\\\\n        ],\\\\\\\\n        statusConfig: [],\\\\\\\\n        spellChecker: false,\\\\\\\\n      }}\\\\\\\\n    />\\\\\\\\n  );\\\\\\\\n};\\\\\\\\n\\\\\\\\nreturn MarkdownEditor(props);\\\\\\\\n\"}, \"devhub.components.molecule.MarkdownViewer\": {\"\": \"const Wrapper = styled.div`\\\\\\\\n  p {\\\\\\\\n    white-space: pre-line; // This ensures text breaks to new line\\\\\\\\n\\\\\\\\n    span {\\\\\\\\n      white-space: normal; // and this ensures profile links look normal\\\\\\\\n    }\\\\\\\\n  }\\\\\\\\n\\\\\\\\n  blockquote {\\\\\\\\n    margin: 1em 0;\\\\\\\\n    padding-left: 1.5em;\\\\\\\\n    border-left: 4px solid #ccc;\\\\\\\\n    color: #666;\\\\\\\\n    font-style: italic;\\\\\\\\n    font-size: inherit;\\\\\\\\n  }\\\\\\\\n\\\\\\\\n  pre {\\\\\\\\n    background-color: #f4f4f4;\\\\\\\\n    border: 1px solid #ddd;\\\\\\\\n    border-radius: 4px;\\\\\\\\n    padding: 1em;\\\\\\\\n    overflow-x: auto;\\\\\\\\n    font-family: \\\\\\\\\\\\\\\"Courier New\\\\\\\\\\\\\\\", Courier, monospace;\\\\\\\\n  }\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst Embedded = styled.span`\\\\\\\\n  white-space: normal;\\\\\\\\n\\\\\\\\n  p {\\\\\\\\n    white-space: normal;\\\\\\\\n  }\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst renderMention =\\\\\\\\n  props.renderMention ??\\\\\\\\n  ((accountId) => (\\\\\\\\n    <span key={accountId} className=\\\\\\\\\\\\\\\"d-inline-flex\\\\\\\\\\\\\\\" style={{ fontWeight: 500 }}>\\\\\\\\n      <Widget\\\\\\\\n        src=\\\\\\\\\\\\\\\"neardevgov.near/widget/ProfileLine\\\\\\\\\\\\\\\"\\\\\\\\n        props={{\\\\\\\\n          accountId: accountId.toLowerCase(),\\\\\\\\n          hideAccountId: true,\\\\\\\\n          tooltip: true,\\\\\\\\n        }}\\\\\\\\n      />\\\\\\\\n    </span>\\\\\\\\n  ));\\\\\\\\n\\\\\\\\nreturn (\\\\\\\\n  <Wrapper>\\\\\\\\n    <Markdown text={props.text} onMention={renderMention} />\\\\\\\\n  </Wrapper>\\\\\\\\n);\\\\\\\\n\"}, \"devhub.components.molecule.NavbarDropdown\": {\"\": \"const title = props.title;\\\\\\\\nconst links = props.links;\\\\\\\\nconst href = props.href;\\\\\\\\n\\\\\\\\nconst [showMenu, setShowMenu] = useState(false);\\\\\\\\n\\\\\\\\nconst { href: linkHref } = VM.require(\\\\\\\\\\\\\\\"devhub.near/widget/core.lib.url\\\\\\\\\\\\\\\");\\\\\\\\n\\\\\\\\nlinkHref || (linkHref = () => {});\\\\\\\\n\\\\\\\\nconst Dropdown = styled.div`\\\\\\\\n  position: relative;\\\\\\\\n  display: flex;\\\\\\\\n  flex-direction: column;\\\\\\\\n  align-items: center;\\\\\\\\n\\\\\\\\n  p {\\\\\\\\n    &.active {\\\\\\\\n      color: #fff;\\\\\\\\n\\\\\\\\n      &:hover {\\\\\\\\n        text-decoration: none;\\\\\\\\n        color: #096d50 !important;\\\\\\\\n      }\\\\\\\\n    }\\\\\\\\n  }\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst DropdownMenu = styled.div`\\\\\\\\n  z-index: 50;\\\\\\\\n  position: absolute;\\\\\\\\n  top: 2.25rem;\\\\\\\\n\\\\\\\\n  &.active {\\\\\\\\n    padding: 0.5rem 1rem;\\\\\\\\n    padding-top: 1rem;\\\\\\\\n    border-radius: 1rem;\\\\\\\\n    background: rgba(217, 217, 217, 0.7);\\\\\\\\n    backdrop-filter: blur(5px);\\\\\\\\n    width: max-content;\\\\\\\\n    animation: slide-down 300ms ease;\\\\\\\\n    transform-origin: top center;\\\\\\\\n  }\\\\\\\\n\\\\\\\\n  @keyframes slide-down {\\\\\\\\n    0% {\\\\\\\\n      transform: scaleY(0);\\\\\\\\n    }\\\\\\\\n    100% {\\\\\\\\n      transform: scaleY(1);\\\\\\\\n    }\\\\\\\\n  }\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst DropdownLink = styled.div`\\\\\\\\n  color: inherit;\\\\\\\\n  text-decoration: none;\\\\\\\\n\\\\\\\\n  &.active {\\\\\\\\n    color: #04a46e;\\\\\\\\n  }\\\\\\\\n\\\\\\\\n  &:hover {\\\\\\\\n    text-decoration: none;\\\\\\\\n    color: #096d50 !important;\\\\\\\\n  }\\\\\\\\n`;\\\\\\\\n\\\\\\\\nreturn (\\\\\\\\n  <Dropdown\\\\\\\\n    onMouseEnter={() => setShowMenu(true)}\\\\\\\\n    onMouseLeave={() => setShowMenu(false)}\\\\\\\\n  >\\\\\\\\n    {href ? (\\\\\\\\n      <DropdownLink className={href === props.page && \\\\\\\\\\\\\\\"active\\\\\\\\\\\\\\\"} href={href}>\\\\\\\\n        <Link\\\\\\\\n          style={{ textDecoration: \\\\\\\\\\\\\\\"none\\\\\\\\\\\\\\\" }}\\\\\\\\n          to={linkHref({\\\\\\\\n            widgetSrc: \\\\\\\\\\\\\\\"devhub.near/widget/app\\\\\\\\\\\\\\\",\\\\\\\\n            params: { page: href },\\\\\\\\n          })}\\\\\\\\n        >\\\\\\\\n          {title}\\\\\\\\n        </Link>\\\\\\\\n      </DropdownLink>\\\\\\\\n    ) : (\\\\\\\\n      <p className={`m-0 py-2 nav-dropdown`} style={{ cursor: \\\\\\\\\\\\\\\"default\\\\\\\\\\\\\\\" }}>\\\\\\\\n        {title} \\\\\\\\u{2193}\\\\\\\\n      </p>\\\\\\\\n    )}\\\\\\\\n    {showMenu && links.length !== 0 && (\\\\\\\\n      <DropdownMenu className={`${showMenu && \\\\\\\\\\\\\\\"active\\\\\\\\\\\\\\\"}`}>\\\\\\\\n        <div className=\\\\\\\\\\\\\\\"d-flex flex-column gap-3\\\\\\\\\\\\\\\">\\\\\\\\n          {links.map((link) => (\\\\\\\\n            // Check if the link is external\\\\\\\\n            <DropdownLink\\\\\\\\n              className={link.href === props.page && \\\\\\\\\\\\\\\"active\\\\\\\\\\\\\\\"}\\\\\\\\n              key={`${link.title}-${link.href}`}\\\\\\\\n            >\\\\\\\\n              {link.href.startsWith(\\\\\\\\\\\\\\\"http://\\\\\\\\\\\\\\\") ||\\\\\\\\n              link.href.startsWith(\\\\\\\\\\\\\\\"https://\\\\\\\\\\\\\\\") ? (\\\\\\\\n                // External link: Render an <a> tag\\\\\\\\n                <a\\\\\\\\n                  href={link.href}\\\\\\\\n                  style={{ textDecoration: \\\\\\\\\\\\\\\"none\\\\\\\\\\\\\\\" }}\\\\\\\\n                  target=\\\\\\\\\\\\\\\"_blank\\\\\\\\\\\\\\\"\\\\\\\\n                  rel=\\\\\\\\\\\\\\\"noopener noreferrer\\\\\\\\\\\\\\\"\\\\\\\\n                >\\\\\\\\n                  {link.title}\\\\\\\\n                </a>\\\\\\\\n              ) : (\\\\\\\\n                // Internal link: Render the <Link> component\\\\\\\\n                <Link\\\\\\\\n                  style={{ textDecoration: \\\\\\\\\\\\\\\"none\\\\\\\\\\\\\\\" }}\\\\\\\\n                  to={linkHref({\\\\\\\\n                    widgetSrc: \\\\\\\\\\\\\\\"devhub.near/widget/app\\\\\\\\\\\\\\\",\\\\\\\\n                    params: { page: link.href },\\\\\\\\n                  })}\\\\\\\\n                >\\\\\\\\n                  {link.title}\\\\\\\\n                </Link>\\\\\\\\n              )}\\\\\\\\n            </DropdownLink>\\\\\\\\n          ))}\\\\\\\\n        </div>\\\\\\\\n      </DropdownMenu>\\\\\\\\n    )}\\\\\\\\n  </Dropdown>\\\\\\\\n);\\\\\\\\n\"}, \"devhub.entity.addon.telegram.Configurator\": {\"\": \"const { Tile } =\\\\\\\\n  VM.require(\\\\\\\\\\\\\\\"devhub.near/widget/devhub.components.molecule.Tile\\\\\\\\\\\\\\\") ||\\\\\\\\n  (() => <></>);\\\\\\\\n\\\\\\\\nconst { data, onSubmit } = props;\\\\\\\\n\\\\\\\\nconst Container = styled.div`\\\\\\\\n  display: flex;\\\\\\\\n  flex-direction: column;\\\\\\\\n  width: 100%;\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst Item = styled.div`\\\\\\\\n  padding: 10px;\\\\\\\\n  margin: 5px;\\\\\\\\n  display: flex;\\\\\\\\n  align-items: center;\\\\\\\\n  flex-direction: row;\\\\\\\\n  gap: 10px;\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst EditableField = styled.input`\\\\\\\\n  flex: 1;\\\\\\\\n`;\\\\\\\\nconst initialData = data.handles;\\\\\\\\nconst [handles, setHandles] = useState(initialData || []);\\\\\\\\nconst [newItem, setNewItem] = useState(\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\");\\\\\\\\n\\\\\\\\nconst handleAddItem = () => {\\\\\\\\n  if (newItem) {\\\\\\\\n    setHandles([...handles, newItem]);\\\\\\\\n    setNewItem(\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\");\\\\\\\\n  }\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst handleDeleteItem = (index) => {\\\\\\\\n  const updatedData = [...handles];\\\\\\\\n  updatedData.splice(index, 1);\\\\\\\\n  setHandles(updatedData);\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst handleSubmit = () => {\\\\\\\\n  onSubmit({ handles: handles.map((handle) => handle.trim()) });\\\\\\\\n};\\\\\\\\n\\\\\\\\nreturn (\\\\\\\\n  <Tile className=\\\\\\\\\\\\\\\"p-3\\\\\\\\\\\\\\\">\\\\\\\\n    <Container>\\\\\\\\n      {handles.map((item, index) => (\\\\\\\\n        <Item key={index}>\\\\\\\\n          <div className=\\\\\\\\\\\\\\\"flex-grow-1\\\\\\\\\\\\\\\">\\\\\\\\n            <Widget\\\\\\\\n              // TODO: LEGACY.\\\\\\\\n              src=\\\\\\\\\\\\\\\"devhub.near/widget/gigs-board.components.molecule.text-input\\\\\\\\\\\\\\\"\\\\\\\\n              props={{\\\\\\\\n                className: \\\\\\\\\\\\\\\"flex-grow-1\\\\\\\\\\\\\\\",\\\\\\\\n                value: item,\\\\\\\\n                placeholder: \\\\\\\\\\\\\\\"Telegram Handle\\\\\\\\\\\\\\\",\\\\\\\\n                inputProps: {\\\\\\\\n                  prefix: \\\\\\\\\\\\\\\"https://t.me/\\\\\\\\\\\\\\\",\\\\\\\\n                  disabled: true,\\\\\\\\n                },\\\\\\\\n              }}\\\\\\\\n            />\\\\\\\\n          </div>\\\\\\\\n          <button\\\\\\\\n            className=\\\\\\\\\\\\\\\"btn btn-outline-danger\\\\\\\\\\\\\\\"\\\\\\\\n            onClick={() => handleDeleteItem(index)}\\\\\\\\n          >\\\\\\\\n            <i className=\\\\\\\\\\\\\\\"bi bi-trash-fill\\\\\\\\\\\\\\\" />\\\\\\\\n          </button>\\\\\\\\n        </Item>\\\\\\\\n      ))}\\\\\\\\n      <Item>\\\\\\\\n        <div className=\\\\\\\\\\\\\\\"flex-grow-1\\\\\\\\\\\\\\\">\\\\\\\\n          <Widget\\\\\\\\n            // TODO: LEGACY.\\\\\\\\n            src=\\\\\\\\\\\\\\\"devhub.near/widget/gigs-board.components.molecule.text-input\\\\\\\\\\\\\\\"\\\\\\\\n            props={{\\\\\\\\n              className: \\\\\\\\\\\\\\\"flex-grow-1\\\\\\\\\\\\\\\",\\\\\\\\n              onChange: (e) => setNewItem(e.target.value),\\\\\\\\n              value: newItem,\\\\\\\\n              placeholder: \\\\\\\\\\\\\\\"Telegram Handle\\\\\\\\\\\\\\\",\\\\\\\\n              inputProps: {\\\\\\\\n                prefix: \\\\\\\\\\\\\\\"https://t.me/\\\\\\\\\\\\\\\",\\\\\\\\n              },\\\\\\\\n            }}\\\\\\\\n          />\\\\\\\\n        </div>\\\\\\\\n        <button\\\\\\\\n          className=\\\\\\\\\\\\\\\"btn btn-success\\\\\\\\\\\\\\\"\\\\\\\\n          onClick={handleAddItem}\\\\\\\\n          disabled={newItem === \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\"}\\\\\\\\n        >\\\\\\\\n          <i className=\\\\\\\\\\\\\\\"bi bi-plus\\\\\\\\\\\\\\\" />\\\\\\\\n        </button>\\\\\\\\n      </Item>\\\\\\\\n      <div\\\\\\\\n        className={\\\\\\\\\\\\\\\"d-flex align-items-center justify-content-end gap-3 mt-4\\\\\\\\\\\\\\\"}\\\\\\\\n      >\\\\\\\\n        <Widget\\\\\\\\n          src={\\\\\\\\\\\\\\\"devhub.near/widget/devhub.components.molecule.Button\\\\\\\\\\\\\\\"}\\\\\\\\n          props={{\\\\\\\\n            classNames: { root: \\\\\\\\\\\\\\\"btn-success\\\\\\\\\\\\\\\" },\\\\\\\\n            disabled: initialData === handles,\\\\\\\\n            icon: {\\\\\\\\n              type: \\\\\\\\\\\\\\\"bootstrap_icon\\\\\\\\\\\\\\\",\\\\\\\\n              variant: \\\\\\\\\\\\\\\"bi-check-circle-fill\\\\\\\\\\\\\\\",\\\\\\\\n            },\\\\\\\\n            label: \\\\\\\\\\\\\\\"Submit\\\\\\\\\\\\\\\",\\\\\\\\n            onClick: handleSubmit,\\\\\\\\n          }}\\\\\\\\n        />\\\\\\\\n      </div>\\\\\\\\n    </Container>\\\\\\\\n  </Tile>\\\\\\\\n);\\\\\\\\n\"}, \"devhub.entity.community.configuration.AboutConfigurator\": {\"\": \"const CommunityAboutSchema = {\\\\\\\\n  bio_markdown: {\\\\\\\\n    format: \\\\\\\\\\\\\\\"markdown\\\\\\\\\\\\\\\",\\\\\\\\n\\\\\\\\n    inputProps: {\\\\\\\\n      min: 3,\\\\\\\\n      max: 200,\\\\\\\\n\\\\\\\\n      placeholder:\\\\\\\\n        \\\\\\\\\\\\\\\"Tell people about your community. This will appear on your community\\\\\\\\u{2019}s homepage.\\\\\\\\\\\\\\\",\\\\\\\\n\\\\\\\\n      resize: \\\\\\\\\\\\\\\"none\\\\\\\\\\\\\\\",\\\\\\\\n    },\\\\\\\\n\\\\\\\\n    label: \\\\\\\\\\\\\\\"Bio\\\\\\\\\\\\\\\",\\\\\\\\n    multiline: true,\\\\\\\\n    order: 1,\\\\\\\\n  },\\\\\\\\n\\\\\\\\n  twitter_handle: {\\\\\\\\n    inputProps: { prefix: \\\\\\\\\\\\\\\"https://twitter.com/\\\\\\\\\\\\\\\", min: 2, max: 60 },\\\\\\\\n    label: \\\\\\\\\\\\\\\"Twitter\\\\\\\\\\\\\\\",\\\\\\\\n    order: 2,\\\\\\\\n  },\\\\\\\\n\\\\\\\\n  github_handle: {\\\\\\\\n    inputProps: { prefix: \\\\\\\\\\\\\\\"https://github.com/\\\\\\\\\\\\\\\", min: 2, max: 60 },\\\\\\\\n    label: \\\\\\\\\\\\\\\"Github\\\\\\\\\\\\\\\",\\\\\\\\n    order: 3,\\\\\\\\n  },\\\\\\\\n\\\\\\\\n  telegram_handle: {\\\\\\\\n    inputProps: { prefix: \\\\\\\\\\\\\\\"https://t.me/\\\\\\\\\\\\\\\", min: 2, max: 60 },\\\\\\\\n    format: \\\\\\\\\\\\\\\"comma-separated\\\\\\\\\\\\\\\",\\\\\\\\n    label: \\\\\\\\\\\\\\\"Telegram\\\\\\\\\\\\\\\",\\\\\\\\n    order: 4,\\\\\\\\n  },\\\\\\\\n\\\\\\\\n  website_url: {\\\\\\\\n    inputProps: { prefix: \\\\\\\\\\\\\\\"https://\\\\\\\\\\\\\\\", min: 2, max: 60 },\\\\\\\\n    label: \\\\\\\\\\\\\\\"Website\\\\\\\\\\\\\\\",\\\\\\\\n    order: 5,\\\\\\\\n  },\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst { data, onSubmit, onCancel, setIsActive, isActive } = props;\\\\\\\\n\\\\\\\\nfunction handleOnSubmit(v) {\\\\\\\\n  onSubmit(v);\\\\\\\\n  setIsActive(false);\\\\\\\\n}\\\\\\\\n\\\\\\\\nreturn (\\\\\\\\n  <Widget\\\\\\\\n    src={\\\\\\\\\\\\\\\"devhub.near/widget/devhub.components.organism.Configurator\\\\\\\\\\\\\\\"}\\\\\\\\n    props={{\\\\\\\\n      externalState: data,\\\\\\\\n      schema: CommunityAboutSchema,\\\\\\\\n      onSubmit: handleOnSubmit,\\\\\\\\n      isActive,\\\\\\\\n      onCancel: onCancel,\\\\\\\\n    }}\\\\\\\\n  />\\\\\\\\n);\\\\\\\\n\"}, \"devhub.entity.community.configuration.AddonsConfigurator\": {\"\": \"const { getAllAddons } =\\\\\\\\n  VM.require(\\\\\\\\\\\\\\\"devhub.near/widget/core.adapter.devhub-contract\\\\\\\\\\\\\\\") ||\\\\\\\\n  (() => {});\\\\\\\\n\\\\\\\\nconst { href } = VM.require(\\\\\\\\\\\\\\\"devhub.near/widget/core.lib.url\\\\\\\\\\\\\\\") || (() => {});\\\\\\\\n\\\\\\\\nconst availableAddons = getAllAddons() || [];\\\\\\\\n\\\\\\\\nconst isActive = props.isActive;\\\\\\\\n\\\\\\\\nconst Container = styled.div`\\\\\\\\n  display: flex;\\\\\\\\n  flex-direction: column;\\\\\\\\n  width: 100%;\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst Item = styled.div`\\\\\\\\n  padding: 10px;\\\\\\\\n  margin: 5px;\\\\\\\\n  display: flex;\\\\\\\\n  align-items: center;\\\\\\\\n  gap: 10px;\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst Icon = styled.span`\\\\\\\\n  margin-right: 10px;\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst EditableField = styled.input`\\\\\\\\n  flex: 1;\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst ToggleButton = styled.input`\\\\\\\\n  margin-left: 10px;\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst Table = styled.table`\\\\\\\\n  width: 100%;\\\\\\\\n  border-collapse: collapse;\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst Header = styled.thead`\\\\\\\\n  background-color: #f0f0f0;\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst HeaderCell = styled.th`\\\\\\\\n  padding: 10px;\\\\\\\\n  text-align: left;\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst Row = styled.tr``;\\\\\\\\n\\\\\\\\nconst Cell = styled.td`\\\\\\\\n  padding: 10px;\\\\\\\\n`;\\\\\\\\n\\\\\\\\nfunction generateRandom6CharUUID() {\\\\\\\\n  const chars = \\\\\\\\\\\\\\\"0123456789abcdefghijklmnopqrstuvwxyz\\\\\\\\\\\\\\\";\\\\\\\\n  let result = \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\";\\\\\\\\n\\\\\\\\n  for (let i = 0; i < 6; i++) {\\\\\\\\n    const randomIndex = Math.floor(Math.random() * chars.length);\\\\\\\\n    result += chars[randomIndex];\\\\\\\\n  }\\\\\\\\n\\\\\\\\n  return result;\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst AddonItem = ({\\\\\\\\n  data,\\\\\\\\n  onUpdate,\\\\\\\\n  onMove,\\\\\\\\n  onRemove,\\\\\\\\n  index,\\\\\\\\n  isTop,\\\\\\\\n  isBottom,\\\\\\\\n}) => {\\\\\\\\n  const handleNameChange = (event) => {\\\\\\\\n    const newName = event.target.value;\\\\\\\\n    onUpdate({ ...data, display_name: newName });\\\\\\\\n  };\\\\\\\\n\\\\\\\\n  const handleEnableChange = () => {\\\\\\\\n    onUpdate({ ...data, enabled: !data.enabled });\\\\\\\\n  };\\\\\\\\n\\\\\\\\n  const moveItemUp = () => {\\\\\\\\n    if (!isTop) {\\\\\\\\n      onMove(index, index - 1);\\\\\\\\n    }\\\\\\\\n  };\\\\\\\\n\\\\\\\\n  const moveItemDown = () => {\\\\\\\\n    if (!isBottom) {\\\\\\\\n      onMove(index, index + 1);\\\\\\\\n    }\\\\\\\\n  };\\\\\\\\n\\\\\\\\n  const removeItem = () => {\\\\\\\\n    onRemove(data.id);\\\\\\\\n  };\\\\\\\\n\\\\\\\\n  const addonMatch =\\\\\\\\n    availableAddons.find((it) => it.id === data.addon_id) ?? null;\\\\\\\\n\\\\\\\\n  return (\\\\\\\\n    <Row>\\\\\\\\n      <Cell>\\\\\\\\n        <div style={{ display: \\\\\\\\\\\\\\\"flex\\\\\\\\\\\\\\\", flexDirection: \\\\\\\\\\\\\\\"column\\\\\\\\\\\\\\\", gap: \\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\" }}>\\\\\\\\n          <button\\\\\\\\n            className=\\\\\\\\\\\\\\\"btn btn-sm btn-secondary rounded-0\\\\\\\\\\\\\\\"\\\\\\\\n            onClick={moveItemUp}\\\\\\\\n            disabled={!isActive || isTop}\\\\\\\\n            style={{ visibility: isTop && !isBottom ? \\\\\\\\\\\\\\\"hidden\\\\\\\\\\\\\\\" : \\\\\\\\\\\\\\\"visible\\\\\\\\\\\\\\\" }}\\\\\\\\n          >\\\\\\\\n            <i className=\\\\\\\\\\\\\\\"bi bi-arrow-up\\\\\\\\\\\\\\\"></i>\\\\\\\\n          </button>\\\\\\\\n          <button\\\\\\\\n            className=\\\\\\\\\\\\\\\"btn btn-sm btn-secondary rounded-0\\\\\\\\\\\\\\\"\\\\\\\\n            onClick={moveItemDown}\\\\\\\\n            disabled={!isActive || isBottom}\\\\\\\\n            style={{ visibility: isBottom && !isTop ? \\\\\\\\\\\\\\\"hidden\\\\\\\\\\\\\\\" : \\\\\\\\\\\\\\\"visible\\\\\\\\\\\\\\\" }}\\\\\\\\n          >\\\\\\\\n            <i className=\\\\\\\\\\\\\\\"bi bi-arrow-down\\\\\\\\\\\\\\\"></i>\\\\\\\\n          </button>\\\\\\\\n        </div>\\\\\\\\n      </Cell>\\\\\\\\n      <Cell>\\\\\\\\n        <div>{addonMatch.title}</div>\\\\\\\\n      </Cell>\\\\\\\\n      <Cell>\\\\\\\\n        <Widget\\\\\\\\n          src=\\\\\\\\\\\\\\\"devhub.near/widget/devhub.components.molecule.Input\\\\\\\\\\\\\\\"\\\\\\\\n          props={{\\\\\\\\n            label: \\\\\\\\\\\\\\\" \\\\\\\\\\\\\\\",\\\\\\\\n            value: data.display_name,\\\\\\\\n            onChange: handleNameChange,\\\\\\\\n            inputProps: {\\\\\\\\n              min: 3,\\\\\\\\n              max: 30,\\\\\\\\n              disabled: !data.enabled || !isActive,\\\\\\\\n            },\\\\\\\\n          }}\\\\\\\\n        />\\\\\\\\n      </Cell>\\\\\\\\n      <Cell>\\\\\\\\n        <div\\\\\\\\n          className={\\\\\\\\n            \\\\\\\\\\\\\\\"d-flex flex-column flex-1 align-items-start justify-content-evenly\\\\\\\\\\\\\\\"\\\\\\\\n          }\\\\\\\\n        >\\\\\\\\n          <Widget\\\\\\\\n            src={\\\\\\\\\\\\\\\"devhub.near/widget/devhub.components.atom.Toggle\\\\\\\\\\\\\\\"}\\\\\\\\n            props={{\\\\\\\\n              value: data.enabled,\\\\\\\\n              onChange: handleEnableChange,\\\\\\\\n              disabled: !isActive,\\\\\\\\n            }}\\\\\\\\n          />\\\\\\\\n        </div>\\\\\\\\n      </Cell>\\\\\\\\n      <Cell>\\\\\\\\n        <div style={{ display: \\\\\\\\\\\\\\\"flex\\\\\\\\\\\\\\\", gap: \\\\\\\\\\\\\\\"2px\\\\\\\\\\\\\\\" }}>\\\\\\\\n          {isActive && (\\\\\\\\n            <button className=\\\\\\\\\\\\\\\"btn btn-outline-danger\\\\\\\\\\\\\\\" onClick={removeItem}>\\\\\\\\n              <i className=\\\\\\\\\\\\\\\"bi bi-trash-fill\\\\\\\\\\\\\\\" />\\\\\\\\n            </button>\\\\\\\\n          )}\\\\\\\\n        </div>\\\\\\\\n      </Cell>\\\\\\\\n    </Row>\\\\\\\\n  );\\\\\\\\n};\\\\\\\\n\\\\\\\\nfunction arraysAreEqual(arr1, arr2) {\\\\\\\\n  if (arr1.length !== arr2.length) {\\\\\\\\n    return false;\\\\\\\\n  }\\\\\\\\n  for (let i = 0; i < arr1.length; i++) {\\\\\\\\n    if (arr1[i] !== arr2[i]) {\\\\\\\\n      return false;\\\\\\\\n    }\\\\\\\\n  }\\\\\\\\n  return true;\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst AddonsConfigurator = ({ data, onSubmit }) => {\\\\\\\\n  const [originalList, setOriginalList] = useState(data);\\\\\\\\n  const [list, setList] = useState(data);\\\\\\\\n  const [changesMade, setChangesMade] = useState(false);\\\\\\\\n\\\\\\\\n  useEffect(() => {\\\\\\\\n    setOriginalList(data);\\\\\\\\n  }, [data]);\\\\\\\\n\\\\\\\\n  const updateItem = (updatedItem) => {\\\\\\\\n    const updatedList = list.map((item) =>\\\\\\\\n      item.id === updatedItem.id ? updatedItem : item\\\\\\\\n    );\\\\\\\\n    setList(updatedList);\\\\\\\\n    setChangesMade(!arraysAreEqual(originalList, updatedList));\\\\\\\\n  };\\\\\\\\n\\\\\\\\n  const moveItem = (fromIndex, toIndex) => {\\\\\\\\n    const updatedList = [...list];\\\\\\\\n    const [movedItem] = updatedList.splice(fromIndex, 1);\\\\\\\\n    updatedList.splice(toIndex, 0, movedItem);\\\\\\\\n    setList(updatedList);\\\\\\\\n    setChangesMade(!arraysAreEqual(originalList, updatedList));\\\\\\\\n  };\\\\\\\\n\\\\\\\\n  const [selectedAddon, setSelectedAddon] = useState(null);\\\\\\\\n\\\\\\\\n  const handleAddItem = () => {\\\\\\\\n    const newItem = {\\\\\\\\n      id: generateRandom6CharUUID(),\\\\\\\\n      addon_id: selectedAddon.id,\\\\\\\\n      display_name: selectedAddon.title,\\\\\\\\n      enabled: true,\\\\\\\\n      parameters: \\\\\\\\\\\\\\\"{}\\\\\\\\\\\\\\\",\\\\\\\\n    };\\\\\\\\n    const updatedList = [...list, newItem];\\\\\\\\n    setList(updatedList);\\\\\\\\n    setChangesMade(!arraysAreEqual(originalList, updatedList));\\\\\\\\n    setSelectedAddon(null);\\\\\\\\n  };\\\\\\\\n\\\\\\\\n  const removeItem = (id) => {\\\\\\\\n    const updatedList = list.filter((item) => item.id !== id);\\\\\\\\n    setList(updatedList);\\\\\\\\n    setChangesMade(!arraysAreEqual(originalList, updatedList));\\\\\\\\n  };\\\\\\\\n\\\\\\\\n  return (\\\\\\\\n    <Container>\\\\\\\\n      <p>\\\\\\\\n        Add or remove custom tabs, which will appear in your community\\\\\\\\\\\\'s\\\\\\\\n        navigation bar.\\\\\\\\n        <br />\\\\\\\\n        You can customize them on each page.\\\\\\\\n      </p>\\\\\\\\n      {list.length > 0 && (\\\\\\\\n        <Table>\\\\\\\\n          <Header>\\\\\\\\n            <Row>\\\\\\\\n              <HeaderCell style={{ width: \\\\\\\\\\\\\\\"30px\\\\\\\\\\\\\\\" }}>Order</HeaderCell>\\\\\\\\n              <HeaderCell>Tab Type</HeaderCell>\\\\\\\\n              <HeaderCell>Tab Name</HeaderCell>\\\\\\\\n              <HeaderCell style={{ width: \\\\\\\\\\\\\\\"45px\\\\\\\\\\\\\\\" }}>Enabled</HeaderCell>\\\\\\\\n              <HeaderCell style={{ width: \\\\\\\\\\\\\\\"40px\\\\\\\\\\\\\\\" }}>Actions</HeaderCell>\\\\\\\\n            </Row>\\\\\\\\n          </Header>\\\\\\\\n          <tbody>\\\\\\\\n            {list.map((item, index) => (\\\\\\\\n              <AddonItem\\\\\\\\n                key={item.id}\\\\\\\\n                data={item}\\\\\\\\n                onUpdate={updateItem}\\\\\\\\n                onMove={moveItem}\\\\\\\\n                onRemove={removeItem}\\\\\\\\n                index={index}\\\\\\\\n                isTop={index === 0}\\\\\\\\n                isBottom={index === list.length - 1}\\\\\\\\n              />\\\\\\\\n            ))}\\\\\\\\n          </tbody>\\\\\\\\n        </Table>\\\\\\\\n      )}\\\\\\\\n      {isActive && availableAddons && list.length < 7 && (\\\\\\\\n        <div className=\\\\\\\\\\\\\\\"d-flex justify-content-center pt-2\\\\\\\\\\\\\\\">\\\\\\\\n          <div className=\\\\\\\\\\\\\\\"d-flex gap-2 flex-grow-1 px-4\\\\\\\\\\\\\\\">\\\\\\\\n            <Widget\\\\\\\\n              src={\\\\\\\\\\\\\\\"devhub.near/widget/devhub.components.molecule.Select\\\\\\\\\\\\\\\"}\\\\\\\\n              props={{\\\\\\\\n                className: \\\\\\\\\\\\\\\"flex-grow-1\\\\\\\\\\\\\\\",\\\\\\\\n                options: availableAddons.map((addon) => ({\\\\\\\\n                  label: addon.title,\\\\\\\\n                  value: addon.id,\\\\\\\\n                })),\\\\\\\\n                value: selectedAddon.id ?? \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\",\\\\\\\\n                onChange: (e) =>\\\\\\\\n                  setSelectedAddon(\\\\\\\\n                    availableAddons.find((addon) => addon.id === e.target.value)\\\\\\\\n                  ),\\\\\\\\n                placeholder: \\\\\\\\\\\\\\\"Select an addon\\\\\\\\\\\\\\\",\\\\\\\\n              }}\\\\\\\\n            />\\\\\\\\n            <button\\\\\\\\n              className=\\\\\\\\\\\\\\\"btn btn-success\\\\\\\\\\\\\\\"\\\\\\\\n              onClick={handleAddItem}\\\\\\\\n              disabled={!selectedAddon}\\\\\\\\n            >\\\\\\\\n              <i className=\\\\\\\\\\\\\\\"bi bi-plus\\\\\\\\\\\\\\\" />\\\\\\\\n            </button>\\\\\\\\n          </div>\\\\\\\\n        </div>\\\\\\\\n      )}\\\\\\\\n      {isActive && (\\\\\\\\n        <div\\\\\\\\n          className={\\\\\\\\\\\\\\\"d-flex align-items-center justify-content-end gap-3 mt-4\\\\\\\\\\\\\\\"}\\\\\\\\n        >\\\\\\\\n          <Widget\\\\\\\\n            src={\\\\\\\\\\\\\\\"devhub.near/widget/devhub.components.molecule.Button\\\\\\\\\\\\\\\"}\\\\\\\\n            props={{\\\\\\\\n              classNames: { root: \\\\\\\\\\\\\\\"btn-success\\\\\\\\\\\\\\\" },\\\\\\\\n              disabled: !changesMade,\\\\\\\\n              icon: {\\\\\\\\n                type: \\\\\\\\\\\\\\\"bootstrap_icon\\\\\\\\\\\\\\\",\\\\\\\\n                variant: \\\\\\\\\\\\\\\"bi-check-circle-fill\\\\\\\\\\\\\\\",\\\\\\\\n              },\\\\\\\\n              label: \\\\\\\\\\\\\\\"Submit\\\\\\\\\\\\\\\",\\\\\\\\n              onClick: () => onSubmit(list),\\\\\\\\n            }}\\\\\\\\n          />\\\\\\\\n        </div>\\\\\\\\n      )}\\\\\\\\n    </Container>\\\\\\\\n  );\\\\\\\\n};\\\\\\\\n\\\\\\\\nreturn AddonsConfigurator(props);\\\\\\\\n\"}, \"devhub.entity.community.configuration.BrandingConfigurator\": {\"\": \"const Banner = styled.div`\\\\\\\\n  border-top-left-radius: var(--bs-border-radius-xl) !important;\\\\\\\\n  border-top-right-radius: var(--bs-border-radius-xl) !important;\\\\\\\\n  height: calc(100% - 100px);\\\\\\\\n\\\\\\\\n  & > div :not(.btn) {\\\\\\\\n    position: absolute;\\\\\\\\n    display: none;\\\\\\\\n    margin: 0 !important;\\\\\\\\n    width: 0 !important;\\\\\\\\n    height: 0 !important;\\\\\\\\n  }\\\\\\\\n\\\\\\\\n  .btn {\\\\\\\\n    padding: 0.5rem 0.75rem !important;\\\\\\\\n    min-height: 32;\\\\\\\\n    line-height: 1;\\\\\\\\n\\\\\\\\n    border: none;\\\\\\\\n    border-radius: 50px;\\\\\\\\n    --bs-btn-color: #ffffff;\\\\\\\\n    --bs-btn-bg: #087990;\\\\\\\\n    --bs-btn-border-color: #087990;\\\\\\\\n    --bs-btn-hover-color: #ffffff;\\\\\\\\n    --bs-btn-hover-bg: #055160;\\\\\\\\n    --bs-btn-hover-border-color: #055160;\\\\\\\\n    --bs-btn-focus-shadow-rgb: 49, 132, 253;\\\\\\\\n    --bs-btn-active-color: #ffffff;\\\\\\\\n    --bs-btn-active-bg: #055160;\\\\\\\\n    --bs-btn-active-border-color: #055160;\\\\\\\\n    --bs-btn-active-shadow: inset 0 3px 5px rgba(0, 0, 0, 0.125);\\\\\\\\n    opacity: 0.8;\\\\\\\\n\\\\\\\\n    &:hover {\\\\\\\\n      opacity: 1;\\\\\\\\n    }\\\\\\\\n  }\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst Logo = styled.div`\\\\\\\\n  & > div :not(.btn) {\\\\\\\\n    position: absolute;\\\\\\\\n    display: none;\\\\\\\\n    margin: 0 !important;\\\\\\\\n    width: 0 !important;\\\\\\\\n    height: 0 !important;\\\\\\\\n  }\\\\\\\\n\\\\\\\\n  .btn {\\\\\\\\n    padding: 0.5rem 0.75rem !important;\\\\\\\\n    min-height: 32;\\\\\\\\n    line-height: 1;\\\\\\\\n\\\\\\\\n    border: none;\\\\\\\\n    border-radius: 50px;\\\\\\\\n    --bs-btn-color: #ffffff;\\\\\\\\n    --bs-btn-bg: #087990;\\\\\\\\n    --bs-btn-border-color: #087990;\\\\\\\\n    --bs-btn-hover-color: #ffffff;\\\\\\\\n    --bs-btn-hover-bg: #055160;\\\\\\\\n    --bs-btn-hover-border-color: #055160;\\\\\\\\n    --bs-btn-focus-shadow-rgb: 49, 132, 253;\\\\\\\\n    --bs-btn-active-color: #ffffff;\\\\\\\\n    --bs-btn-active-bg: #055160;\\\\\\\\n    --bs-btn-active-border-color: #055160;\\\\\\\\n    --bs-btn-active-shadow: inset 0 3px 5px rgba(0, 0, 0, 0.125);\\\\\\\\n    opacity: 0.8;\\\\\\\\n\\\\\\\\n    &:hover {\\\\\\\\n      opacity: 1;\\\\\\\\n    }\\\\\\\\n  }\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst cidToURL = (cid) => `https://ipfs.near.social/ipfs/${cid}`;\\\\\\\\n\\\\\\\\nconst { data, onSubmit, hasConfigurePermissions, link } = props;\\\\\\\\n\\\\\\\\nconst initialInput = { banner: null, logo: null };\\\\\\\\n\\\\\\\\nconst initialValues = {\\\\\\\\n  banner: { cid: data.banner_url.split(\\\\\\\\\\\\\\\"/\\\\\\\\\\\\\\\").at(-1) },\\\\\\\\n  logo: { cid: data.logo_url.split(\\\\\\\\\\\\\\\"/\\\\\\\\\\\\\\\").at(-1) },\\\\\\\\n};\\\\\\\\n\\\\\\\\nState.init({\\\\\\\\n  input: initialInput,\\\\\\\\n});\\\\\\\\n\\\\\\\\nconst hasUnsubmittedChanges = Object.values(state.input).some(\\\\\\\\n  (value) => value !== null\\\\\\\\n);\\\\\\\\n\\\\\\\\nconst isSynced = state.input === initialValues;\\\\\\\\n\\\\\\\\nif (hasUnsubmittedChanges && !isSynced) {\\\\\\\\n  onSubmit({\\\\\\\\n    banner_url: cidToURL(state.input.banner?.cid ?? initialValues.banner.cid),\\\\\\\\n    logo_url: cidToURL(state.input.logo?.cid ?? initialValues.logo.cid),\\\\\\\\n  });\\\\\\\\n\\\\\\\\n  State.update((lastKnownState) => ({\\\\\\\\n    ...lastKnownState,\\\\\\\\n    input: initialInput,\\\\\\\\n  }));\\\\\\\\n}\\\\\\\\n\\\\\\\\nreturn (\\\\\\\\n  <div style={{ height: 280 }}>\\\\\\\\n    <Banner\\\\\\\\n      alt=\\\\\\\\\\\\\\\"Community banner preview\\\\\\\\\\\\\\\"\\\\\\\\n      className=\\\\\\\\\\\\\\\"card-img-top d-flex flex-column justify-content-end align-items-end p-4\\\\\\\\\\\\\\\"\\\\\\\\n      style={{\\\\\\\\n        background: `center / cover no-repeat url(${cidToURL(\\\\\\\\n          initialValues.banner.cid\\\\\\\\n        )})`,\\\\\\\\n      }}\\\\\\\\n    >\\\\\\\\n      {hasConfigurePermissions && (\\\\\\\\n        <IpfsImageUpload image={state.input.banner} />\\\\\\\\n      )}\\\\\\\\n    </Banner>\\\\\\\\n    <Logo\\\\\\\\n      alt=\\\\\\\\\\\\\\\"Community logo preview\\\\\\\\\\\\\\\"\\\\\\\\n      className={[\\\\\\\\n        \\\\\\\\\\\\\\\"d-flex flex-column justify-content-center align-items-center\\\\\\\\\\\\\\\",\\\\\\\\n        \\\\\\\\\\\\\\\"rounded-circle ms-5 border border-4 border-white\\\\\\\\\\\\\\\",\\\\\\\\n      ].join(\\\\\\\\\\\\\\\" \\\\\\\\\\\\\\\")}\\\\\\\\n      style={{\\\\\\\\n        marginTop: -64,\\\\\\\\n        width: 128,\\\\\\\\n        height: 128,\\\\\\\\n\\\\\\\\n        background: `center / cover no-repeat url(${cidToURL(\\\\\\\\n          initialValues.logo.cid\\\\\\\\n        )})`,\\\\\\\\n      }}\\\\\\\\n    >\\\\\\\\n      {hasConfigurePermissions && <IpfsImageUpload image={state.input.logo} />}\\\\\\\\n    </Logo>\\\\\\\\n\\\\\\\\n    <div\\\\\\\\n      className=\\\\\\\\\\\\\\\"card-body p-4\\\\\\\\\\\\\\\"\\\\\\\\n      style={{ marginTop: -64, marginLeft: 180, height: 84 }}\\\\\\\\n    >\\\\\\\\n      <h5\\\\\\\\n        className=\\\\\\\\\\\\\\\"h5 text-nowrap overflow-hidden\\\\\\\\\\\\\\\"\\\\\\\\n        style={{ textOverflow: \\\\\\\\\\\\\\\"ellipsis\\\\\\\\\\\\\\\" }}\\\\\\\\n      >\\\\\\\\n        {typeof link === \\\\\\\\\\\\\\\"string\\\\\\\\\\\\\\\" && link.length > 0 ? (\\\\\\\\n          <Link to={link}>{data.name}</Link>\\\\\\\\n        ) : (\\\\\\\\n          data.name\\\\\\\\n        )}\\\\\\\\n      </h5>\\\\\\\\n\\\\\\\\n      <p\\\\\\\\n        className=\\\\\\\\\\\\\\\"card-text text-nowrap overflow-hidden\\\\\\\\\\\\\\\"\\\\\\\\n        style={{ textOverflow: \\\\\\\\\\\\\\\"ellipsis\\\\\\\\\\\\\\\" }}\\\\\\\\n      >\\\\\\\\n        {data.description}\\\\\\\\n      </p>\\\\\\\\n    </div>\\\\\\\\n  </div>\\\\\\\\n);\\\\\\\\n\"}, \"devhub.entity.community.configuration.ConfigurationSection\": {\"\": \"const {\\\\\\\\n  title,\\\\\\\\n  hasConfigurePermissions,\\\\\\\\n  Configurator,\\\\\\\\n  Preview,\\\\\\\\n  headerRight,\\\\\\\\n  forceEditActive,\\\\\\\\n} = props;\\\\\\\\n\\\\\\\\nconst [isEditActive, setEditActive] = useState(forceEditActive || false);\\\\\\\\n\\\\\\\\nfunction SectionHeader() {\\\\\\\\n  return (\\\\\\\\n    <div\\\\\\\\n      className=\\\\\\\\\\\\\\\"d-flex align-items-center justify-content-between w-100 pb-3\\\\\\\\\\\\\\\"\\\\\\\\n      style={{ minHeight: 30 }}\\\\\\\\n    >\\\\\\\\n      <h5 className=\\\\\\\\\\\\\\\"h5 d-inline-flex gap-2 m-0\\\\\\\\\\\\\\\">\\\\\\\\n        <span>{title}</span>\\\\\\\\n      </h5>\\\\\\\\n      {headerRight ||\\\\\\\\n        (hasConfigurePermissions && (\\\\\\\\n          <Widget\\\\\\\\n            src={\\\\\\\\\\\\\\\"devhub.near/widget/devhub.components.molecule.Button\\\\\\\\\\\\\\\"}\\\\\\\\n            props={{\\\\\\\\n              classNames: { root: \\\\\\\\\\\\\\\"btn-sm btn-secondary\\\\\\\\\\\\\\\" },\\\\\\\\n              icon: {\\\\\\\\n                type: \\\\\\\\\\\\\\\"bootstrap_icon\\\\\\\\\\\\\\\",\\\\\\\\n                variant: isEditActive ? \\\\\\\\\\\\\\\"bi-x-circle\\\\\\\\\\\\\\\" : \\\\\\\\\\\\\\\"bi-pen-fill\\\\\\\\\\\\\\\",\\\\\\\\n              },\\\\\\\\n              label: isEditActive ? \\\\\\\\\\\\\\\"Cancel\\\\\\\\\\\\\\\" : \\\\\\\\\\\\\\\"Edit\\\\\\\\\\\\\\\",\\\\\\\\n              onClick: () => setEditActive(!isEditActive),\\\\\\\\n            }}\\\\\\\\n          />\\\\\\\\n        ))}\\\\\\\\n    </div>\\\\\\\\n  );\\\\\\\\n}\\\\\\\\n\\\\\\\\nreturn (\\\\\\\\n  <div>\\\\\\\\n    <SectionHeader />\\\\\\\\n    <Configurator\\\\\\\\n      isActive={isEditActive}\\\\\\\\n      setIsActive={setEditActive}\\\\\\\\n      onCancel={() => setEditActive(!isEditActive)}\\\\\\\\n    />\\\\\\\\n  </div>\\\\\\\\n);\\\\\\\\n\"}, \"devhub.entity.community.configuration.InformationConfigurator\": {\"\": \"const CommunityInformationSchema = {\\\\\\\\n  name: {\\\\\\\\n    inputProps: {\\\\\\\\n      min: 2,\\\\\\\\n      max: 30,\\\\\\\\n      placeholder: \\\\\\\\\\\\\\\"Community name.\\\\\\\\\\\\\\\",\\\\\\\\n      required: true,\\\\\\\\n    },\\\\\\\\n\\\\\\\\n    label: \\\\\\\\\\\\\\\"Name\\\\\\\\\\\\\\\",\\\\\\\\n    order: 1,\\\\\\\\n  },\\\\\\\\n\\\\\\\\n  description: {\\\\\\\\n    inputProps: {\\\\\\\\n      min: 2,\\\\\\\\n      max: 60,\\\\\\\\n\\\\\\\\n      placeholder:\\\\\\\\n        \\\\\\\\\\\\\\\"Describe your community in one short sentence that will appear in the communities discovery page.\\\\\\\\\\\\\\\",\\\\\\\\n\\\\\\\\n      required: true,\\\\\\\\n    },\\\\\\\\n\\\\\\\\n    label: \\\\\\\\\\\\\\\"Description\\\\\\\\\\\\\\\",\\\\\\\\n    order: 2,\\\\\\\\n  },\\\\\\\\n\\\\\\\\n  handle: {\\\\\\\\n    inputProps: {\\\\\\\\n      min: 2,\\\\\\\\n      max: 40,\\\\\\\\n\\\\\\\\n      placeholder:\\\\\\\\n        \\\\\\\\\\\\\\\"Choose unique URL handle for your community. Example: zero-knowledge.\\\\\\\\\\\\\\\",\\\\\\\\n\\\\\\\\n      required: true,\\\\\\\\n    },\\\\\\\\n\\\\\\\\n    label: \\\\\\\\\\\\\\\"URL handle\\\\\\\\\\\\\\\",\\\\\\\\n    order: 3,\\\\\\\\n  },\\\\\\\\n\\\\\\\\n  tag: {\\\\\\\\n    inputProps: {\\\\\\\\n      min: 2,\\\\\\\\n      max: 30,\\\\\\\\n\\\\\\\\n      placeholder:\\\\\\\\n        \\\\\\\\\\\\\\\"Any posts with this tag will show up in your community feed.\\\\\\\\\\\\\\\",\\\\\\\\n\\\\\\\\n      required: true,\\\\\\\\n    },\\\\\\\\n\\\\\\\\n    label: \\\\\\\\\\\\\\\"Tag\\\\\\\\\\\\\\\",\\\\\\\\n    order: 4,\\\\\\\\n  },\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst { data, onSubmit, onCancel, setIsActive, isActive } = props;\\\\\\\\n\\\\\\\\nfunction handleOnSubmit(v) {\\\\\\\\n  onSubmit(v);\\\\\\\\n  setIsActive(false);\\\\\\\\n}\\\\\\\\n\\\\\\\\nreturn (\\\\\\\\n  <Widget\\\\\\\\n    src={\\\\\\\\\\\\\\\"devhub.near/widget/devhub.components.organism.Configurator\\\\\\\\\\\\\\\"}\\\\\\\\n    props={{\\\\\\\\n      externalState: data,\\\\\\\\n      schema: CommunityInformationSchema,\\\\\\\\n      onSubmit: handleOnSubmit,\\\\\\\\n      isActive: isActive,\\\\\\\\n      onCancel: onCancel,\\\\\\\\n    }}\\\\\\\\n  />\\\\\\\\n);\\\\\\\\n\"}, \"devhub.entity.community.configuration.AccessControlConfigurator\": {\"\": \"const CommunityAccessControlSchema = {\\\\\\\\n  admins: {\\\\\\\\n    format: \\\\\\\\\\\\\\\"comma-separated\\\\\\\\\\\\\\\",\\\\\\\\n    inputProps: { required: true },\\\\\\\\n    label: \\\\\\\\\\\\\\\"Admins\\\\\\\\\\\\\\\",\\\\\\\\n    order: 1,\\\\\\\\n  },\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst { data, onSubmit, onCancel, setIsActive, isActive } = props;\\\\\\\\n\\\\\\\\nfunction handleOnSubmit(v) {\\\\\\\\n  if (v.admins) {\\\\\\\\n    v.admins = v.admins.split(\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\").map((admin) => admin.trim());\\\\\\\\n  }\\\\\\\\n  onSubmit(v);\\\\\\\\n  setIsActive(false);\\\\\\\\n}\\\\\\\\n\\\\\\\\nreturn (\\\\\\\\n  <Widget\\\\\\\\n    src={\\\\\\\\\\\\\\\"devhub.near/widget/devhub.components.organism.Configurator\\\\\\\\\\\\\\\"}\\\\\\\\n    props={{\\\\\\\\n      externalState: data,\\\\\\\\n      schema: CommunityAccessControlSchema,\\\\\\\\n      onSubmit: handleOnSubmit,\\\\\\\\n      isActive,\\\\\\\\n      onCancel: onCancel,\\\\\\\\n    }}\\\\\\\\n  />\\\\\\\\n);\\\\\\\\n\"}}}}}"
      }
    ],
    "actions_agg": {
      "deposit": 3.5279e+24
    },
    "outcomes": {
      "status": false
    },
    "outcomes_agg": {
      "transaction_fee": 1.46895960018335e+22
    }
  },
  {
    "id": "1336505013",
    "receipt_id": "6rTkNorjPhy4ZKtkaH7HW8YacHcZQUcoiyzADxF9mVt5",
    "predecessor_account_id": "system",
    "receiver_account_id": "devhub.near",
    "receipt_kind": "ACTION",
    "receipt_block": {
      "block_hash": "22u37vSdmQz7qkSwEd1zXpCQH62A4bPf7o2zzxxqfTf7",
      "block_height": 104856873,
      "block_timestamp": 1699034141209452800
    },
    "receipt_outcome": {
      "gas_burnt": 223182562500,
      "tokens_burnt": 0,
      "executor_account_id": "devhub.near",
      "status": true
    },
    "transaction_hash": "qinMDszJQSswqZyBxH7MRSNoC5jmA5VPTsBuwwyQZ1r",
    "included_in_block_hash": "GsdpwcPUQYXLuWx9hjXEmM33pRXLyAaNSUb3jnJAFcRQ",
    "block_timestamp": "1699034139316013885",
    "block": {
      "block_height": 104856871
    },
    "receipt_conversion_tokens_burnt": "316944391582600000000",
    "actions": [
      {
        "action": "TRANSFER",
        "method": null,
        "deposit": 3.5279e+24,
        "fee": 0,
        "args": null
      }
    ],
    "actions_agg": {
      "deposit": 3.5279e+24
    },
    "outcomes": {
      "status": false
    },
    "outcomes_agg": {
      "transaction_fee": 1.46895960018335e+22
    }
  },
  {
    "id": "1336505015",
    "receipt_id": "6zjCbJznsWnv1Zqi1qqPTie1prWAq4NKWFHdopx8giBg",
    "predecessor_account_id": "system",
    "receiver_account_id": "devhub.near",
    "receipt_kind": "ACTION",
    "receipt_block": {
      "block_hash": "22u37vSdmQz7qkSwEd1zXpCQH62A4bPf7o2zzxxqfTf7",
      "block_height": 104856873,
      "block_timestamp": 1699034141209452800
    },
    "receipt_outcome": {
      "gas_burnt": 223182562500,
      "tokens_burnt": 0,
      "executor_account_id": "devhub.near",
      "status": true
    },
    "transaction_hash": "qinMDszJQSswqZyBxH7MRSNoC5jmA5VPTsBuwwyQZ1r",
    "included_in_block_hash": "GsdpwcPUQYXLuWx9hjXEmM33pRXLyAaNSUb3jnJAFcRQ",
    "block_timestamp": "1699034139316013885",
    "block": {
      "block_height": 104856871
    },
    "receipt_conversion_tokens_burnt": "316944391582600000000",
    "actions": [
      {
        "action": "TRANSFER",
        "method": null,
        "deposit": 1.751204303663802e+23,
        "fee": 0,
        "args": null
      }
    ],
    "actions_agg": {
      "deposit": 3.5279e+24
    },
    "outcomes": {
      "status": false
    },
    "outcomes_agg": {
      "transaction_fee": 1.46895960018335e+22
    }
  },
  {
    "id": "1336506865",
    "receipt_id": "7jEUipUhVi75XbHpQ2swozcrseBuAszWkiaoaik7r9S6",
    "predecessor_account_id": "devhub.near",
    "receiver_account_id": "social.near",
    "receipt_kind": "ACTION",
    "receipt_block": {
      "block_hash": "HqMBGZeQ6c8BcLHcNr854htafRjSYuAhvuVPa2jEGYfC",
      "block_height": 104856927,
      "block_timestamp": 1699034199514822000
    },
    "receipt_outcome": {
      "gas_burnt": 4675079827615,
      "tokens_burnt": 467507982761500000000,
      "executor_account_id": "social.near",
      "status": true
    },
    "transaction_hash": "AX4uxNoWYSTq4V5iHmd1FC687BJd4WQKR2mWo6kyQBBF",
    "included_in_block_hash": "6BPGJGE9SyPxePgD3km9QbuAjApYUN9N4hcF7bZZ5kQe",
    "block_timestamp": "1699034198101659853",
    "block": {
      "block_height": 104856926
    },
    "receipt_conversion_tokens_burnt": "242801714516200000000",
    "actions": [
      {
        "action": "FUNCTION_CALL",
        "method": "storage_deposit",
        "deposit": 5e+24,
        "fee": 467507982761500000000,
        "args": "{\"account_id\": \"devhub.near\"}"
      }
    ],
    "actions_agg": {
      "deposit": 5e+24
    },
    "outcomes": {
      "status": true
    },
    "outcomes_agg": {
      "transaction_fee": 710309697277700000000
    }
  },
  {
    "id": "1336507309",
    "receipt_id": "7NFp9vbpFaE2ZN3nvjKGAfCD9kztyxY78qiN7CQogbVM",
    "predecessor_account_id": "system",
    "receiver_account_id": "devhub.near",
    "receipt_kind": "ACTION",
    "receipt_block": {
      "block_hash": "br32nYSkbAcjZsyHBj7knvWDxy51i7EK4kDeEwB9z4D",
      "block_height": 104856928,
      "block_timestamp": 1699034200372132400
    },
    "receipt_outcome": {
      "gas_burnt": 223182562500,
      "tokens_burnt": 0,
      "executor_account_id": "devhub.near",
      "status": true
    },
    "transaction_hash": "AX4uxNoWYSTq4V5iHmd1FC687BJd4WQKR2mWo6kyQBBF",
    "included_in_block_hash": "6BPGJGE9SyPxePgD3km9QbuAjApYUN9N4hcF7bZZ5kQe",
    "block_timestamp": "1699034198101659853",
    "block": {
      "block_height": 104856926
    },
    "receipt_conversion_tokens_burnt": "242801714516200000000",
    "actions": [
      {
        "action": "TRANSFER",
        "method": null,
        "deposit": 6.789755776593912e+21,
        "fee": 0,
        "args": null
      }
    ],
    "actions_agg": {
      "deposit": 5e+24
    },
    "outcomes": {
      "status": true
    },
    "outcomes_agg": {
      "transaction_fee": 710309697277700000000
    }
  },
  {
    "id": "1336508342",
    "receipt_id": "BKbL3QYv4HdBJkDxLKw8WHGPSdtp7NXapyU7K44PrRvL",
    "predecessor_account_id": "devhub.near",
    "receiver_account_id": "social.near",
    "receipt_kind": "ACTION",
    "receipt_block": {
      "block_hash": "AwMuz73yv7oJeti5LbniaCLisopq2hoFMTsjoPTa6py",
      "block_height": 104856942,
      "block_timestamp": 1699034215948330500
    },
    "receipt_outcome": {
      "gas_burnt": 142787328436258,
      "tokens_burnt": 1.42787328436258e+22,
      "executor_account_id": "social.near",
      "status": true
    },
    "transaction_hash": "A8UhKCGvUabhX9MTXRoYeYyvBuRV8Ax1QFTa6wxpbBP8",
    "included_in_block_hash": "2qPjKB8AmrAjoGocRfwW8LUJkw6hWyUWPjw3RCE6uavC",
    "block_timestamp": "1699034214755281551",
    "block": {
      "block_height": 104856941
    },
    "receipt_conversion_tokens_burnt": "316944391582600000000",
    "actions": [
      {
        "action": "FUNCTION_CALL",
        "method": "set",
        "deposit": 1,
        "fee": 1.42787328436258e+22,
        "args": "{\"data\": {\"devhub.near\": {\"widget\": {\"app\": {\"\": \"/**\\\\\\\\n * This is the main entry point for the DevHub application.\\\\\\\\n * Page route gets passed in through params, along with all other page props.\\\\\\\\n */\\\\\\\\n\\\\\\\\nconst { page, ...passProps } = props;\\\\\\\\n\\\\\\\\n// Import our modules\\\\\\\\nconst { AppLayout } = VM.require(\\\\\\\\n  \\\\\\\\\\\\\\\"devhub.near/widget/devhub.components.templates.AppLayout\\\\\\\\\\\\\\\"\\\\\\\\n);\\\\\\\\n\\\\\\\\nif (!AppLayout) {\\\\\\\\n  return <p>Loading modules...</p>;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// CSS styles to be used across the app.\\\\\\\\n// Define fonts here, as well as any other global styles.\\\\\\\\nconst Theme = styled.div`\\\\\\\\n  a {\\\\\\\\n    color: inherit;\\\\\\\\n  }\\\\\\\\n\\\\\\\\n  .attractable {\\\\\\\\n    box-shadow: 0 0.125rem 0.25rem rgba(0, 0, 0, 0.075) !important;\\\\\\\\n    transition: box-shadow 0.6s;\\\\\\\\n\\\\\\\\n    &:hover {\\\\\\\\n      box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.15) !important;\\\\\\\\n    }\\\\\\\\n  }\\\\\\\\n`;\\\\\\\\n\\\\\\\\nif (!page) {\\\\\\\\n  // If no page is specified, we default to the feed page TEMP\\\\\\\\n  page = \\\\\\\\\\\\\\\"home\\\\\\\\\\\\\\\";\\\\\\\\n}\\\\\\\\n\\\\\\\\n// This is our navigation, rendering the page based on the page parameter\\\\\\\\nfunction Page() {\\\\\\\\n  const routes = page.split(\\\\\\\\\\\\\\\".\\\\\\\\\\\\\\\");\\\\\\\\n  switch (routes[0]) {\\\\\\\\n    case \\\\\\\\\\\\\\\"home\\\\\\\\\\\\\\\": {\\\\\\\\n      return (\\\\\\\\n        <Widget\\\\\\\\n          src=\\\\\\\\\\\\\\\"devhub.near/widget/devhub.page.home\\\\\\\\\\\\\\\"\\\\\\\\n          props={passProps}\\\\\\\\n        />\\\\\\\\n      );\\\\\\\\n    }\\\\\\\\n    // ?page=communities\\\\\\\\n    case \\\\\\\\\\\\\\\"communities\\\\\\\\\\\\\\\": {\\\\\\\\n      return (\\\\\\\\n        <Widget\\\\\\\\n          src={\\\\\\\\\\\\\\\"devhub.near/widget/devhub.page.communities\\\\\\\\\\\\\\\"}\\\\\\\\n          props={passProps}\\\\\\\\n        />\\\\\\\\n      );\\\\\\\\n    }\\\\\\\\n    // ?page=community\\\\\\\\n    case \\\\\\\\\\\\\\\"community\\\\\\\\\\\\\\\": {\\\\\\\\n      return (\\\\\\\\n        // Considering to consolsidate this into a single widget,\\\\\\\\n        // where each level handles its own routing.\\\\\\\\n        // Modularizing a page just like we do with addons\\\\\\\\n        <Widget\\\\\\\\n          src={\\\\\\\\\\\\\\\"devhub.near/widget/devhub.entity.community.Provider\\\\\\\\\\\\\\\"}\\\\\\\\n          props={{\\\\\\\\n            ...passProps,\\\\\\\\n            Children: (p) => {\\\\\\\\n              // passing props from the Provider into the Children\\\\\\\\n              switch (routes[1]) {\\\\\\\\n                // ?page=community.configuration\\\\\\\\n                case \\\\\\\\\\\\\\\"configuration\\\\\\\\\\\\\\\": {\\\\\\\\n                  return (\\\\\\\\n                    <Widget\\\\\\\\n                      src={\\\\\\\\n                        \\\\\\\\\\\\\\\"devhub.near/widget/devhub.page.community.configuration\\\\\\\\\\\\\\\"\\\\\\\\n                      }\\\\\\\\n                      props={{\\\\\\\\n                        ...passProps,\\\\\\\\n                        ...p,\\\\\\\\n                      }}\\\\\\\\n                    />\\\\\\\\n                  );\\\\\\\\n                }\\\\\\\\n                // ?page=community\\\\\\\\n                default: {\\\\\\\\n                  return (\\\\\\\\n                    <Widget\\\\\\\\n                      src={\\\\\\\\\\\\\\\"devhub.near/widget/devhub.page.community.index\\\\\\\\\\\\\\\"}\\\\\\\\n                      props={{\\\\\\\\n                        ...passProps,\\\\\\\\n                        ...p,\\\\\\\\n                      }}\\\\\\\\n                    />\\\\\\\\n                  );\\\\\\\\n                }\\\\\\\\n              }\\\\\\\\n            },\\\\\\\\n          }}\\\\\\\\n        />\\\\\\\\n      );\\\\\\\\n    }\\\\\\\\n    // ?page=feed\\\\\\\\n    case \\\\\\\\\\\\\\\"feed\\\\\\\\\\\\\\\": {\\\\\\\\n      return (\\\\\\\\n        <Widget\\\\\\\\n          src={\\\\\\\\\\\\\\\"devhub.near/widget/devhub.page.feed\\\\\\\\\\\\\\\"}\\\\\\\\n          props={passProps}\\\\\\\\n        />\\\\\\\\n      );\\\\\\\\n    }\\\\\\\\n    // ?page=create\\\\\\\\n    case \\\\\\\\\\\\\\\"create\\\\\\\\\\\\\\\": {\\\\\\\\n      return (\\\\\\\\n        <Widget\\\\\\\\n          src={\\\\\\\\\\\\\\\"devhub.near/widget/devhub.page.create\\\\\\\\\\\\\\\"}\\\\\\\\n          props={passProps}\\\\\\\\n        />\\\\\\\\n      );\\\\\\\\n    }\\\\\\\\n    // ?page=about\\\\\\\\n    case \\\\\\\\\\\\\\\"about\\\\\\\\\\\\\\\": {\\\\\\\\n      return (\\\\\\\\n        <Widget\\\\\\\\n          src={\\\\\\\\\\\\\\\"devhub.near/widget/devhub.page.about\\\\\\\\\\\\\\\"}\\\\\\\\n          props={passProps}\\\\\\\\n        />\\\\\\\\n      );\\\\\\\\n    }\\\\\\\\n    case \\\\\\\\\\\\\\\"contribute\\\\\\\\\\\\\\\": {\\\\\\\\n      return (\\\\\\\\n        <Widget\\\\\\\\n          src={\\\\\\\\\\\\\\\"devhub.near/widget/devhub.page.contribute\\\\\\\\\\\\\\\"}\\\\\\\\n          props={passProps}\\\\\\\\n        />\\\\\\\\n      );\\\\\\\\n    }\\\\\\\\n    case \\\\\\\\\\\\\\\"profile\\\\\\\\\\\\\\\": {\\\\\\\\n      return (\\\\\\\\n        <Widget\\\\\\\\n          src={\\\\\\\\\\\\\\\"devhub.near/widget/devhub.page.profile\\\\\\\\\\\\\\\"}\\\\\\\\n          props={passProps}\\\\\\\\n        />\\\\\\\\n      );\\\\\\\\n    }\\\\\\\\n    // ?page=blog\\\\\\\\n    case \\\\\\\\\\\\\\\"blog\\\\\\\\\\\\\\\": {\\\\\\\\n      return (\\\\\\\\n        <Widget\\\\\\\\n          src={\\\\\\\\\\\\\\\"devhub.near/widget/devhub.page.blog\\\\\\\\\\\\\\\"}\\\\\\\\n          props={passProps}\\\\\\\\n        />\\\\\\\\n      );\\\\\\\\n    }\\\\\\\\n    case \\\\\\\\\\\\\\\"post\\\\\\\\\\\\\\\": {\\\\\\\\n      return (\\\\\\\\n        <Widget\\\\\\\\n          src={\\\\\\\\\\\\\\\"devhub.near/widget/devhub.page.post\\\\\\\\\\\\\\\"}\\\\\\\\n          props={passProps}\\\\\\\\n        />\\\\\\\\n      );\\\\\\\\n    }\\\\\\\\n\\\\\\\\n    default: {\\\\\\\\n      // TODO: 404 page\\\\\\\\n      return <p>404</p>;\\\\\\\\n    }\\\\\\\\n  }\\\\\\\\n}\\\\\\\\n\\\\\\\\nreturn (\\\\\\\\n  <Theme>\\\\\\\\n    <AppLayout page={page}>\\\\\\\\n      <Page />\\\\\\\\n    </AppLayout>\\\\\\\\n  </Theme>\\\\\\\\n);\\\\\\\\n\"}, \"core.lib.url\": {\"\": \"/**\\\\\\\\n * Generates a URL to a widget.\\\\\\\\n *\\\\\\\\n * @param {Object} options - Configuration options for constructing the URL.\\\\\\\\n * @param {string} [options.gateway] - The gateway or server address where the widget source is hosted (optional).\\\\\\\\n * @param {string} options.widgetSrc - The source path of the widget (required).\\\\\\\\n * @param {Object} [options.params] - An object containing key-value pairs representing query parameters to be appended to the URL (optional).\\\\\\\\n * @returns {string} - The constructed URL.\\\\\\\\n */\\\\\\\\nfunction href({ gateway, widgetSrc, params }) {\\\\\\\\n  // Check if query parameters are provided and filter out null values\\\\\\\\n  if (params) {\\\\\\\\n    params = (Object.entries(params) || [])\\\\\\\\n      .filter(([_key, nullable]) => (nullable ?? null) !== null)\\\\\\\\n      .map(([key, value]) => {\\\\\\\\n        // Omit the parameter if the value is null or the array is empty\\\\\\\\n        if (value === null || (Array.isArray(value) && value.length === 0)) {\\\\\\\\n          return null;\\\\\\\\n        }\\\\\\\\n\\\\\\\\n        // Convert array values to a comma-separated string with no spaces\\\\\\\\n        if (Array.isArray(value)) {\\\\\\\\n          return `${key}=${value.join(\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\")}`;\\\\\\\\n        } else {\\\\\\\\n          return `${key}=${value}`;\\\\\\\\n        }\\\\\\\\n      })\\\\\\\\n      .join(\\\\\\\\\\\\\\\"&\\\\\\\\\\\\\\\");\\\\\\\\n  }\\\\\\\\n\\\\\\\\n  // Check if the gateway already includes \\\\\\\\\\\\\\\"https://\\\\\\\\\\\\\\\" and construct the final URL accordingly\\\\\\\\n  if (gateway) {\\\\\\\\n    if (/(^https:\\\\\\\\\\\\\\\\/\\\\\\\\\\\\\\\\/)|(^http:\\\\\\\\\\\\\\\\/\\\\\\\\\\\\\\\\/)/.test(gateway)) {\\\\\\\\n      return `/${gateway}/${widgetSrc}${params && `?${params}`}`;\\\\\\\\n    } else {\\\\\\\\n      return `https://${gateway}/${widgetSrc}${params && `?${params}`}`;\\\\\\\\n    }\\\\\\\\n  } else {\\\\\\\\n    return `/${widgetSrc}${params && `?${params}`}`;\\\\\\\\n  }\\\\\\\\n}\\\\\\\\n\\\\\\\\nreturn { href };\\\\\\\\n\"}, \"core.lib.struct\": {\"\": \"/**\\\\\\\\n * Deeply updates an object\\\\\\\\\\\\'s field based on the given path and transformation function.\\\\\\\\n *\\\\\\\\n * @param {Object} target - The target object to update.\\\\\\\\n * @param {Array} path - The path to the field to update.\\\\\\\\n * @param {Function} transform - The transformation function to apply.\\\\\\\\n * @returns {Object} - The updated object.\\\\\\\\n */\\\\\\\\nconst deepFieldUpdate = (target, path, transform) => {\\\\\\\\n  if (path.length === 0) {\\\\\\\\n    return transform(target);\\\\\\\\n  }\\\\\\\\n\\\\\\\\n  const [nextNodeKey, ...remainingPath] = path;\\\\\\\\n\\\\\\\\n  return {\\\\\\\\n    ...target,\\\\\\\\n    [nextNodeKey]: deepFieldUpdate(\\\\\\\\n      target[nextNodeKey] ?? {},\\\\\\\\n      remainingPath,\\\\\\\\n      transform\\\\\\\\n    ),\\\\\\\\n  };\\\\\\\\n};\\\\\\\\n\\\\\\\\n/**\\\\\\\\n * Checks if two inputs (objects or arrays) are deeply equal.\\\\\\\\n *\\\\\\\\n * @param {Object|Array} input1 - The first input.\\\\\\\\n * @param {Object|Array} input2 - The second input.\\\\\\\\n * @returns {boolean} - True if the inputs are deeply equal, false otherwise.\\\\\\\\n */\\\\\\\\nconst isEqual = (input1, input2) => {\\\\\\\\n  const input1Str = JSON.stringify(input1);\\\\\\\\n  const input2Str = JSON.stringify(input2);\\\\\\\\n  return input1Str === input2Str;\\\\\\\\n};\\\\\\\\n\\\\\\\\n/**\\\\\\\\n * Creates a new object with sorted keys based on the input object.\\\\\\\\n *\\\\\\\\n * @param {Object} input - The input object.\\\\\\\\n * @returns {Object} - A new object with sorted keys.\\\\\\\\n */\\\\\\\\nconst toOrdered = (input) => {\\\\\\\\n  if (typeof input !== \\\\\\\\\\\\\\\"object\\\\\\\\\\\\\\\" || input === null) {\\\\\\\\n    return {};\\\\\\\\n  }\\\\\\\\n\\\\\\\\n  return Object.keys(input)\\\\\\\\n    .sort()\\\\\\\\n    .reduce((output, key) => ({ ...output, [key]: input[key] }), {});\\\\\\\\n};\\\\\\\\n\\\\\\\\n/**\\\\\\\\n * Picks specified keys from an object and returns a new object with those keys.\\\\\\\\n *\\\\\\\\n * @param {Object} sourceObject - The source object to pick keys from.\\\\\\\\n * @param {Array} keysToPick - An array of keys to pick.\\\\\\\\n * @returns {Object} - A new object containing the selected keys.\\\\\\\\n */\\\\\\\\nconst pick = (sourceObject, keysToPick) => {\\\\\\\\n  if (typeof sourceObject !== \\\\\\\\\\\\\\\"object\\\\\\\\\\\\\\\" || sourceObject === null) {\\\\\\\\n    return {};\\\\\\\\n  }\\\\\\\\n\\\\\\\\n  return Object.fromEntries(\\\\\\\\n    Object.entries(sourceObject).filter(([key, _]) => keysToPick.includes(key))\\\\\\\\n  );\\\\\\\\n};\\\\\\\\n\\\\\\\\n/**\\\\\\\\n * Checks if the input matches the expected type.\\\\\\\\n *\\\\\\\\n * @param {Object} input - The input to check.\\\\\\\\n * @returns {boolean} - True if the input is an object and not an array or null, false otherwise.\\\\\\\\n */\\\\\\\\nconst typeMatch = (input) =>\\\\\\\\n  input !== null && typeof input === \\\\\\\\\\\\\\\"object\\\\\\\\\\\\\\\" && !Array.isArray(input);\\\\\\\\n\\\\\\\\nreturn { deepFieldUpdate, isEqual, pick, toOrdered, typeMatch };\\\\\\\\n\"}, \"devhub.page.blog\": {\"\": \"const { id } = props;\\\\\\\\n\\\\\\\\nconst { Page } =\\\\\\\\n  VM.require(\\\\\\\\\\\\\\\"devhub.near/widget/devhub.entity.addon.blog.Page\\\\\\\\\\\\\\\") ||\\\\\\\\n  (() => <></>);\\\\\\\\n\\\\\\\\nif (id) {\\\\\\\\n  return (\\\\\\\\n    <Widget\\\\\\\\n      src=\\\\\\\\\\\\\\\"devhub.near/widget/devhub.entity.post.Postv2\\\\\\\\\\\\\\\"\\\\\\\\n      props={{ postKey: id, template: (p) => <Page {...(p || {})} /> }}\\\\\\\\n    />\\\\\\\\n  );\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst HeaderContainer = styled.div`\\\\\\\\n  display: flex;\\\\\\\\n  width: 100%;\\\\\\\\n  height: 60px;\\\\\\\\n  padding: 1rem 3rem;\\\\\\\\n  align-items: center;\\\\\\\\n  flex-shrink: 0;\\\\\\\\n  background-color: #f4f4f4;\\\\\\\\n\\\\\\\\n  @media screen and (max-width: 768px) {\\\\\\\\n    padding: 1rem;\\\\\\\\n  }\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst Header = styled.h2`\\\\\\\\n  color: #04a46e;\\\\\\\\n  font-size: 24px;\\\\\\\\n  font-style: normal;\\\\\\\\n  font-weight: 400;\\\\\\\\n  line-height: 120%; /* 28.8px */\\\\\\\\n  letter-spacing: -0.24px;\\\\\\\\n  margin: 0;\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst BlogContainer = styled.div`\\\\\\\\n  padding: 1rem 3rem;\\\\\\\\n\\\\\\\\n  @media screen and (max-width: 768px) {\\\\\\\\n    padding: 1rem;\\\\\\\\n  }\\\\\\\\n`;\\\\\\\\n\\\\\\\\n// I like that this reduces duplicate code with the Viewer, but I don\\\\\\\\\\\\'t like\\\\\\\\n// that \\\\\\\\\\\\\\\"Latest Blog Posts\\\\\\\\\\\\\\\" carries over... // TOOD: create a common blog\\\\\\\\n// feed... I think the addon.blog.Feed naming is confusing, as this should be a\\\\\\\\n// generic feed component.\\\\\\\\nreturn (\\\\\\\\n  <div className=\\\\\\\\\\\\\\\"w-100\\\\\\\\\\\\\\\">\\\\\\\\n    <HeaderContainer>\\\\\\\\n      <Header>/blog</Header>\\\\\\\\n    </HeaderContainer>\\\\\\\\n    <BlogContainer>\\\\\\\\n      <Widget\\\\\\\\n        src={\\\\\\\\\\\\\\\"devhub.near/widget/devhub.entity.addon.blog.Viewer\\\\\\\\\\\\\\\"}\\\\\\\\n        props={{\\\\\\\\n          handle: \\\\\\\\\\\\\\\"developer-dao\\\\\\\\\\\\\\\",\\\\\\\\n          hideTitle: true,\\\\\\\\n        }}\\\\\\\\n      />\\\\\\\\n    </BlogContainer>\\\\\\\\n  </div>\\\\\\\\n);\\\\\\\\n\"}, \"devhub.page.feed\": {\"\": \"const { author, recency, tag } = props;\\\\\\\\n\\\\\\\\nconst { href } = VM.require(\\\\\\\\\\\\\\\"devhub.near/widget/core.lib.url\\\\\\\\\\\\\\\");\\\\\\\\n\\\\\\\\nif (!href) {\\\\\\\\n  return <p>Loading modules...</p>;\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst Gradient = styled.div`\\\\\\\\n  height: 250px;\\\\\\\\n  text-align: center;\\\\\\\\n  background: radial-gradient(\\\\\\\\n    circle,\\\\\\\\n    rgba(29, 55, 57, 1) 30%,\\\\\\\\n    rgba(24, 24, 24, 1) 80%\\\\\\\\n  );\\\\\\\\n\\\\\\\\n  font-family: Arial, sans-serif;\\\\\\\\n\\\\\\\\n  .text-primary-gradient {\\\\\\\\n    color: #53fdca;\\\\\\\\n    -webkit-text-fill-color: transparent;\\\\\\\\n    background-image: linear-gradient(#8e76ba, #1ed2f0);\\\\\\\\n    -webkit-background-clip: text;\\\\\\\\n    background-clip: text;\\\\\\\\n  }\\\\\\\\n\\\\\\\\n  .subtitle-above {\\\\\\\\n    font-size: 18px;\\\\\\\\n    letter-spacing: 1px;\\\\\\\\n    font-family: Courier, monospace;\\\\\\\\n  }\\\\\\\\n\\\\\\\\n  .subtitle-below {\\\\\\\\n    font-size: 16px;\\\\\\\\n  }\\\\\\\\n\\\\\\\\n  .slogan {\\\\\\\\n    font-weight: 600;\\\\\\\\n    font-size: 60px;\\\\\\\\n  }\\\\\\\\n`;\\\\\\\\n\\\\\\\\nfunction Banner() {\\\\\\\\n  return (\\\\\\\\n    <div className=\\\\\\\\\\\\\\\"d-flex flex-column\\\\\\\\\\\\\\\">\\\\\\\\n      <Widget\\\\\\\\n        src={`devhub.near/widget/devhub.components.island.banner`}\\\\\\\\n        props={{\\\\\\\\n          title: (\\\\\\\\n            <>\\\\\\\\n              Welcome to /dev/hub,\\\\\\\\n              <br />\\\\\\\\n              <span style={{ color: \\\\\\\\\\\\\\\"#151515\\\\\\\\\\\\\\\" }}>the home base</span>\\\\\\\\n              <br />\\\\\\\\n              for developers on NEAR\\\\\\\\n            </>\\\\\\\\n          ),\\\\\\\\n          imageLink:\\\\\\\\n            \\\\\\\\\\\\\\\"https://ipfs.near.social/ipfs/bafybeiap2mzwsly4apaldxguiunx4rjwqyadksj5yxuzwrww3kue3ao5qe\\\\\\\\\\\\\\\",\\\\\\\\n        }}\\\\\\\\n      />\\\\\\\\n    </div>\\\\\\\\n  );\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst FeedPage = ({ recency, tag }) => {\\\\\\\\n  return (\\\\\\\\n    <div className=\\\\\\\\\\\\\\\"w-100\\\\\\\\\\\\\\\">\\\\\\\\n      <Banner />\\\\\\\\n      <Widget\\\\\\\\n        src={\\\\\\\\\\\\\\\"devhub.near/widget/devhub.feature.post-search.panel\\\\\\\\\\\\\\\"}\\\\\\\\n        props={{\\\\\\\\n          hideHeader: false,\\\\\\\\n          children: (\\\\\\\\n            <Widget\\\\\\\\n              src={\\\\\\\\n                \\\\\\\\\\\\\\\"devhub.near/widget/devhub.components.molecule.PostControls\\\\\\\\\\\\\\\"\\\\\\\\n              }\\\\\\\\n              props={{\\\\\\\\n                title: \\\\\\\\\\\\\\\"Post\\\\\\\\\\\\\\\",\\\\\\\\n                href: href({\\\\\\\\n                  widgetSrc: \\\\\\\\\\\\\\\"devhub.near/widget/app\\\\\\\\\\\\\\\",\\\\\\\\n                  params: { page: \\\\\\\\\\\\\\\"create\\\\\\\\\\\\\\\" },\\\\\\\\n                }),\\\\\\\\n              }}\\\\\\\\n            />\\\\\\\\n          ),\\\\\\\\n          recency,\\\\\\\\n          tag,\\\\\\\\n          transactionHashes: props.transactionHashes,\\\\\\\\n        }}\\\\\\\\n      />\\\\\\\\n    </div>\\\\\\\\n  );\\\\\\\\n};\\\\\\\\n\\\\\\\\nreturn FeedPage(props);\\\\\\\\n\"}, \"devhub.page.home\": {\"\": \"const HomeSections = [\\\\\\\\\\\\\\\"hero\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"explore\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"connect\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"participate\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"support\\\\\\\\\\\\\\\"];\\\\\\\\n\\\\\\\\nreturn (\\\\\\\\n  <>\\\\\\\\n    {HomeSections.map((it) => (\\\\\\\\n      <Widget\\\\\\\\n        src={`devhub.near/widget/devhub.components.island.${it}`}\\\\\\\\n        props={{ ...props }}\\\\\\\\n      />\\\\\\\\n    ))}\\\\\\\\n  </>\\\\\\\\n);\\\\\\\\n\"}, \"devhub.page.post\": {\"\": \"const { id } = props;\\\\\\\\n\\\\\\\\nconst Container = styled.div`\\\\\\\\n  padding: 0 3rem 3rem 3rem;\\\\\\\\n\\\\\\\\n  @media screen and (max-width: 768px) {\\\\\\\\n    padding: 0 1rem 1rem 1rem;\\\\\\\\n  }\\\\\\\\n`;\\\\\\\\n\\\\\\\\nreturn (\\\\\\\\n  <Container>\\\\\\\\n    <Widget\\\\\\\\n      src={\\\\\\\\\\\\\\\"devhub.near/widget/devhub.entity.post.Post\\\\\\\\\\\\\\\"}\\\\\\\\n      props={{\\\\\\\\n        id,\\\\\\\\n      }}\\\\\\\\n    />\\\\\\\\n  </Container>\\\\\\\\n);\\\\\\\\n\"}, \"devhub.page.about\": {\"\": \"const PageHeader = styled.h2`\\\\\\\\n  color: #04a46e;\\\\\\\\n  font-size: 24px;\\\\\\\\n  font-style: normal;\\\\\\\\n  font-weight: 400;\\\\\\\\n  line-height: 120%; /* 28.8px */\\\\\\\\n  letter-spacing: -0.24px;\\\\\\\\n\\\\\\\\n  width: 100%;\\\\\\\\n  padding: 1rem 3.125rem;\\\\\\\\n  margin-left: auto;\\\\\\\\n  //background: #fff;\\\\\\\\n\\\\\\\\n  margin-top: 1.5rem;\\\\\\\\n  margin-bottom: 1.5rem;\\\\\\\\n\\\\\\\\n  @media screen and (max-width: 786px) {\\\\\\\\n    padding: 1rem;\\\\\\\\n  }\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst Section = styled.div`\\\\\\\\n  padding: 1.5rem 8rem;\\\\\\\\n  display: flex;\\\\\\\\n  flex-direction: column;\\\\\\\\n\\\\\\\\n  display: flex;\\\\\\\\n  flex-direction: column;\\\\\\\\n\\\\\\\\n  gap: 2rem;\\\\\\\\n\\\\\\\\n  @media screen and (max-width: 786px) {\\\\\\\\n    padding: 1rem;\\\\\\\\n  }\\\\\\\\n\\\\\\\\n  h2 {\\\\\\\\n    color: #151515;\\\\\\\\n    font-size: 2rem;\\\\\\\\n    font-style: normal;\\\\\\\\n    font-weight: 700;\\\\\\\\n    line-height: 2rem; /* 55.556% */\\\\\\\\n\\\\\\\\n    margin: 1rem;\\\\\\\\n    margin-left: 0;\\\\\\\\n  }\\\\\\\\n\\\\\\\\n  p {\\\\\\\\n    color: #151515;\\\\\\\\n    font-size: 1.25rem;\\\\\\\\n    font-style: normal;\\\\\\\\n    font-weight: 400;\\\\\\\\n    line-height: 120%; /* 28.8px */\\\\\\\\n    margin-bottom: 1rem;\\\\\\\\n  }\\\\\\\\n\\\\\\\\n  h3 {\\\\\\\\n    color: #151515;\\\\\\\\n    font-size: 1.5rem;\\\\\\\\n    font-style: normal;\\\\\\\\n    font-weight: 700;\\\\\\\\n    line-height: 120%;\\\\\\\\n\\\\\\\\n    margin-top: 1rem;\\\\\\\\n  }\\\\\\\\n`;\\\\\\\\n\\\\\\\\nreturn (\\\\\\\\n  <>\\\\\\\\n    <Widget\\\\\\\\n      src={`devhub.near/widget/devhub.components.island.banner`}\\\\\\\\n      props={{\\\\\\\\n        title: (\\\\\\\\n          <>\\\\\\\\n            We are building <br />\\\\\\\\n            <span style={{ color: \\\\\\\\\\\\\\\"#151515\\\\\\\\\\\\\\\" }}>\\\\\\\\n              a decentralized community\\\\\\\\n            </span>{\\\\\\\\\\\\\\\" \\\\\\\\\\\\\\\"}\\\\\\\\n            <br />\\\\\\\\n            for NEAR Developers.\\\\\\\\n          </>\\\\\\\\n        ),\\\\\\\\n        imageLink:\\\\\\\\n          \\\\\\\\\\\\\\\"https://ipfs.near.social/ipfs/bafkreigtpjmgt3aphd3plbcremtvazeo7qsjvguw44m74zthyxbhj4toqe\\\\\\\\\\\\\\\",\\\\\\\\n      }}\\\\\\\\n    />\\\\\\\\n    <PageHeader>About /dev/hub</PageHeader>\\\\\\\\n    <Section>\\\\\\\\n      <h2>\\\\\\\\n        What is <span style={{ color: \\\\\\\\\\\\\\\"#00EC97\\\\\\\\\\\\\\\" }}>near</span>/dev/hub?\\\\\\\\n      </h2>\\\\\\\\n\\\\\\\\n      <div>\\\\\\\\n        <p>\\\\\\\\n          DevHub brings together individuals, projects, and organizations to\\\\\\\\n          build a decentralized NEAR developer ecosystem. We provide social\\\\\\\\n          structure and tools to fuel innovation, collaboration, and community\\\\\\\\n          within the NEAR ecosystem. Whether you\\\\\\\\u{2019}re a blockchain developer or\\\\\\\\n          advocate for the open web, DevHub is your gateway to making a\\\\\\\\n          meaningful impact on NEAR and beyond.\\\\\\\\n        </p>\\\\\\\\n\\\\\\\\n        <h3>Mission</h3>\\\\\\\\n        <p>\\\\\\\\n          Build a self-sufficient developer community to enable a thriving NEAR\\\\\\\\n          ecosystem.\\\\\\\\n        </p>\\\\\\\\n\\\\\\\\n        <h3>Values</h3>\\\\\\\\n        <p>\\\\\\\\n          <ul>\\\\\\\\n            <li>\\\\\\\\n              <b>Decentralized</b>: We are building together.\\\\\\\\n            </li>\\\\\\\\n            <li>\\\\\\\\n              <b>Transparent</b>: All decision making and communication is open.\\\\\\\\n            </li>\\\\\\\\n            <li>\\\\\\\\n              <b>Self-sufficient</b>: We do not critically depend on any single\\\\\\\\n              entity.\\\\\\\\n            </li>\\\\\\\\n            <li>\\\\\\\\n              <b>Robust</b>: Any role or team can be duplicated or replaced.\\\\\\\\n            </li>\\\\\\\\n            <li>\\\\\\\\n              <b>High-velocity</b>: We need to move faster than classic OSS.\\\\\\\\n            </li>\\\\\\\\n          </ul>\\\\\\\\n        </p>\\\\\\\\n\\\\\\\\n        <h3>Scope</h3>\\\\\\\\n        <p>\\\\\\\\n          DevHub covers a wide range of areas to support the NEAR developer\\\\\\\\n          ecosystem, including:\\\\\\\\n        </p>\\\\\\\\n\\\\\\\\n        <h3>Visual Identity:</h3>\\\\\\\\n        <p>\\\\\\\\n          <ul>\\\\\\\\n            <li>\\\\\\\\n              <b>Developer Tooling</b>: Contributing code to the NEAR Platform\\\\\\\\n              (blockchain and devtools) and facilitating technical decisions\\\\\\\\n              with recognized experts based on the needs of the community and\\\\\\\\n              ecosystem.\\\\\\\\n            </li>\\\\\\\\n            <li>\\\\\\\\n              <b>Developer Relations</b>: Engaging with the community across\\\\\\\\n              various social channels, gathering feedback, and improving\\\\\\\\n              documentation.\\\\\\\\n            </li>\\\\\\\\n            <li>\\\\\\\\n              <b>Deep-Tech Awareness</b>: Working with marketing partners to\\\\\\\\n              create awareness on interesting projects and technology areas.\\\\\\\\n            </li>\\\\\\\\n            <li>\\\\\\\\n              <b>Events and Hackathons</b>: Organizing events and empowering\\\\\\\\n              community leaders with resources to grow their local communities.\\\\\\\\n            </li>\\\\\\\\n            <li>\\\\\\\\n              <b>Education</b>: Partnering with universities across the globe to\\\\\\\\n              support students and scholars in exploring Web3 technologies\\\\\\\\n            </li>\\\\\\\\n            <li>\\\\\\\\n              <b>Platform</b>: Developing DevHub platform as a product to enable\\\\\\\\n              communities to collaborate and support each other.\\\\\\\\n            </li>\\\\\\\\n          </ul>\\\\\\\\n        </p>\\\\\\\\n\\\\\\\\n        <h3>Our Contributors</h3>\\\\\\\\n        <p>\\\\\\\\n          DevHub operates through DevDAO, which provides social structures to\\\\\\\\n          support developers. Within DevDAO, we have a dedicated core team of\\\\\\\\n          moderators and community contributors who work across the key areas\\\\\\\\n          above. We welcome contributions from any community members who want to\\\\\\\\n          join us in building our ecosystem and their own skills!\\\\\\\\n        </p>\\\\\\\\n\\\\\\\\n        <h3>Our Platform</h3>\\\\\\\\n        <p>\\\\\\\\n          Our main tool for interfacing is the DevHub Platform, where you can\\\\\\\\n          connect with others, share ideas and solutions, and access resources\\\\\\\\n          and support. You can also find communities working on a variety of\\\\\\\\n          areas, from protocol development to tooling and documentation.\\\\\\\\n        </p>\\\\\\\\n\\\\\\\\n        <h3>Join Us in Shaping NEAR\\\\\\\\u{2019}s Future</h3>\\\\\\\\n        <p>\\\\\\\\n          Regardless of your background or where you are on your developer\\\\\\\\n          journey, we\\\\\\\\u{2019}re happy you\\\\\\\\u{2019}re here! We hope you\\\\\\\\u{2019}ll explore, find your\\\\\\\\n          people, and discover paths to contribute that are most gratifying for\\\\\\\\n          you.\\\\\\\\n          <br />\\\\\\\\n          Let\\\\\\\\u{2019}s build the open web together.\\\\\\\\n        </p>\\\\\\\\n      </div>\\\\\\\\n    </Section>\\\\\\\\n  </>\\\\\\\\n);\\\\\\\\n\"}, \"devhub.page.addon\": {\"\": \"const Container = styled.div`\\\\\\\\n  display: flex;\\\\\\\\n  flex-direction: column;\\\\\\\\n  height: 100%;\\\\\\\\n  width: 100%;\\\\\\\\n  position: relative;\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst Content = styled.div`\\\\\\\\n  flex: 1;\\\\\\\\n  padding: 20px;\\\\\\\\n  overflow: auto;\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst SettingsButton = styled.button`\\\\\\\\n  position: absolute;\\\\\\\\n  top: 10px;\\\\\\\\n  right: 10px;\\\\\\\\n\\\\\\\\n  background-color: #fff;\\\\\\\\n  display: flex;\\\\\\\\n  padding: 14px 16px;\\\\\\\\n  align-items: center;\\\\\\\\n  gap: 16px;\\\\\\\\n  width: 50px;\\\\\\\\n  height: 50px;\\\\\\\\n\\\\\\\\n  border-radius: 4px;\\\\\\\\n  border: 1px solid #00ec97;\\\\\\\\n\\\\\\\\n  z-index: 10;\\\\\\\\n\\\\\\\\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);\\\\\\\\n\\\\\\\\n  &:hover {\\\\\\\\n    transform: translateY(2px);\\\\\\\\n    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);\\\\\\\\n  }\\\\\\\\n\\\\\\\\n  &:active {\\\\\\\\n    transform: translateY(0);\\\\\\\\n    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);\\\\\\\\n  }\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst CenteredMessage = styled.div`\\\\\\\\n  display: flex;\\\\\\\\n  flex-direction: column;\\\\\\\\n  justify-content: center;\\\\\\\\n  align-items: center;\\\\\\\\n  width: 100%;\\\\\\\\n  height: ${(p) => p.height ?? \\\\\\\\\\\\\\\"100%\\\\\\\\\\\\\\\"};\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst { addon, permissions, handle } = props;\\\\\\\\n\\\\\\\\nconst { getAllAddons, setCommunityAddon } = VM.require(\\\\\\\\n  \\\\\\\\\\\\\\\"devhub.near/widget/core.adapter.devhub-contract\\\\\\\\\\\\\\\"\\\\\\\\n);\\\\\\\\n\\\\\\\\nif (!getAllAddons || !setCommunityAddon) {\\\\\\\\n  return <p>Loading modules...</p>;\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst availableAddons = getAllAddons();\\\\\\\\nconst addonMatch = availableAddons.find((it) => it.id === addon.addon_id);\\\\\\\\n\\\\\\\\nif (!addonMatch) {\\\\\\\\n  return (\\\\\\\\n    <CenteredMessage height={\\\\\\\\\\\\\\\"384px\\\\\\\\\\\\\\\"}>\\\\\\\\n      <h2>Addon with id: \\\\\\\\\\\\\\\"{addon.addon_id}\\\\\\\\\\\\\\\" not found.</h2>\\\\\\\\n    </CenteredMessage>\\\\\\\\n  );\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst config = JSON.parse(addon.parameters || \\\\\\\\\\\\\\\"null\\\\\\\\\\\\\\\");\\\\\\\\n\\\\\\\\nconst ButtonRow = styled.div`\\\\\\\\n  display: flex;\\\\\\\\n  justify-content: space-between;\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst [view, setView] = useState(props.view || \\\\\\\\\\\\\\\"viewer\\\\\\\\\\\\\\\");\\\\\\\\n\\\\\\\\nconst checkFullyRefactored = (addon_id) => {\\\\\\\\n  switch (addon_id) {\\\\\\\\n    case \\\\\\\\\\\\\\\"kanban\\\\\\\\\\\\\\\":\\\\\\\\n    case \\\\\\\\\\\\\\\"github\\\\\\\\\\\\\\\":\\\\\\\\n      return false;\\\\\\\\n    default:\\\\\\\\n      return true;\\\\\\\\n  }\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst isFullyRefactored = checkFullyRefactored(addon.addon_id);\\\\\\\\n\\\\\\\\nreturn (\\\\\\\\n  <Container>\\\\\\\\n    {isFullyRefactored && // Unfully refactored addons have the configurator built in.\\\\\\\\n      // So we hide the header\\\\\\\\n      permissions.can_configure && (\\\\\\\\n        <SettingsButton\\\\\\\\n          onClick={() => setView(view === \\\\\\\\\\\\\\\"configure\\\\\\\\\\\\\\\" ? \\\\\\\\\\\\\\\"view\\\\\\\\\\\\\\\" : \\\\\\\\\\\\\\\"configure\\\\\\\\\\\\\\\")}\\\\\\\\n        >\\\\\\\\n          {view === \\\\\\\\\\\\\\\"configure\\\\\\\\\\\\\\\" ? (\\\\\\\\n            <span className=\\\\\\\\\\\\\\\"bi bi-x\\\\\\\\\\\\\\\"></span>\\\\\\\\n          ) : (\\\\\\\\n            <span className=\\\\\\\\\\\\\\\"bi bi-gear\\\\\\\\\\\\\\\"></span>\\\\\\\\n          )}\\\\\\\\n        </SettingsButton>\\\\\\\\n      )}\\\\\\\\n    <Content>\\\\\\\\n      {/* We hide in order to prevent a reload when we switch between two views */}\\\\\\\\n      <div className={`${view !== \\\\\\\\\\\\\\\"configure\\\\\\\\\\\\\\\" ? \\\\\\\\\\\\\\\"d-none\\\\\\\\\\\\\\\" : \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\"}`}>\\\\\\\\n        <Widget\\\\\\\\n          src={addonMatch.configurator_widget}\\\\\\\\n          props={{\\\\\\\\n            data: config,\\\\\\\\n            onSubmit: (data) => {\\\\\\\\n              setCommunityAddon({\\\\\\\\n                handle,\\\\\\\\n                addon: {\\\\\\\\n                  ...addon,\\\\\\\\n                  parameters: JSON.stringify(data),\\\\\\\\n                },\\\\\\\\n              });\\\\\\\\n            },\\\\\\\\n\\\\\\\\n            handle, // this is temporary prop drilling until kanban and github are migrated\\\\\\\\n            permissions,\\\\\\\\n          }}\\\\\\\\n        />\\\\\\\\n      </div>\\\\\\\\n      <div className={`${view === \\\\\\\\\\\\\\\"configure\\\\\\\\\\\\\\\" ? \\\\\\\\\\\\\\\"d-none\\\\\\\\\\\\\\\" : \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\"}`}>\\\\\\\\n        <Widget\\\\\\\\n          src={addonMatch.view_widget}\\\\\\\\n          props={{\\\\\\\\n            ...config,\\\\\\\\n            // temporary prop drilling\\\\\\\\n            handle,\\\\\\\\n            permissions,\\\\\\\\n          }}\\\\\\\\n        />\\\\\\\\n      </div>\\\\\\\\n    </Content>\\\\\\\\n  </Container>\\\\\\\\n);\\\\\\\\n\"}, \"devhub.page.create\": {\"\": \"const { href } = VM.require(\\\\\\\\\\\\\\\"devhub.near/widget/core.lib.url\\\\\\\\\\\\\\\");\\\\\\\\n\\\\\\\\nif (!href) {\\\\\\\\n  return <p>Loading modules...</p>;\\\\\\\\n}\\\\\\\\n\\\\\\\\n/* INCLUDE: \\\\\\\\\\\\\\\"core/lib/autocomplete\\\\\\\\\\\\\\\" */\\\\\\\\nconst autocompleteEnabled = true;\\\\\\\\n\\\\\\\\nconst AutoComplete = styled.div`\\\\\\\\n  z-index: 5;\\\\\\\\n\\\\\\\\n  > div > div {\\\\\\\\n    padding: calc(var(--padding) / 2);\\\\\\\\n  }\\\\\\\\n`;\\\\\\\\n\\\\\\\\nfunction textareaInputHandler(value) {\\\\\\\\n  const showAccountAutocomplete = /@[\\\\\\\\\\\\\\\\w][^\\\\\\\\\\\\\\\\s]*$/.test(value);\\\\\\\\n  State.update((lastKnownState) => ({\\\\\\\\n    ...lastKnownState,\\\\\\\\n    text: value,\\\\\\\\n    showAccountAutocomplete,\\\\\\\\n  }));\\\\\\\\n}\\\\\\\\n\\\\\\\\nfunction autoCompleteAccountId(id) {\\\\\\\\n  let description = state.description.replace(/[\\\\\\\\\\\\\\\\s]{0,1}@[^\\\\\\\\\\\\\\\\s]*$/, \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\");\\\\\\\\n  description = `${description} @${id}`.trim() + \\\\\\\\\\\\\\\" \\\\\\\\\\\\\\\";\\\\\\\\n  State.update((lastKnownState) => ({\\\\\\\\n    ...lastKnownState,\\\\\\\\n    description,\\\\\\\\n    showAccountAutocomplete: false,\\\\\\\\n  }));\\\\\\\\n}\\\\\\\\n/* END_INCLUDE: \\\\\\\\\\\\\\\"core/lib/autocomplete\\\\\\\\\\\\\\\" */\\\\\\\\n\\\\\\\\nconst DRAFT_STATE_STORAGE_KEY = \\\\\\\\\\\\\\\"DRAFT_STATE\\\\\\\\\\\\\\\";\\\\\\\\nconst parentId = props.parentId ?? null;\\\\\\\\nconst postId = props.postId ?? null;\\\\\\\\nconst mode = props.mode ?? \\\\\\\\\\\\\\\"Create\\\\\\\\\\\\\\\";\\\\\\\\n\\\\\\\\nconst referralLabels = props.referral ? [`referral:${props.referral}`] : [];\\\\\\\\nconst labelStrings = (props.labels ? props.labels.split(\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\") : []).concat(\\\\\\\\n  referralLabels\\\\\\\\n);\\\\\\\\nconst labels = labelStrings.map((s) => {\\\\\\\\n  return { name: s };\\\\\\\\n});\\\\\\\\n\\\\\\\\nState.init({\\\\\\\\n  seekingFunding: false,\\\\\\\\n\\\\\\\\n  author_id: context.accountId,\\\\\\\\n  // Should be a list of objects with field \\\\\\\\\\\\\\\"name\\\\\\\\\\\\\\\".\\\\\\\\n  labels,\\\\\\\\n  // Should be a list of labels as strings.\\\\\\\\n  // Both of the label structures should be modified together.\\\\\\\\n  labelStrings,\\\\\\\\n  postType: \\\\\\\\\\\\\\\"Idea\\\\\\\\\\\\\\\",\\\\\\\\n  name: props.name ?? \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\",\\\\\\\\n  description: props.description ?? \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\",\\\\\\\\n  amount: props.amount ?? \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\",\\\\\\\\n  token: props.token ?? \\\\\\\\\\\\\\\"USDT\\\\\\\\\\\\\\\",\\\\\\\\n  supervisor: props.supervisor ?? \\\\\\\\\\\\\\\"neardevdao.near\\\\\\\\\\\\\\\",\\\\\\\\n  githubLink: props.githubLink ?? \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\",\\\\\\\\n  warning: \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\",\\\\\\\\n  waitForDraftStateRestore: true,\\\\\\\\n});\\\\\\\\n\\\\\\\\nif (state.waitForDraftStateRestore) {\\\\\\\\n  const draftstatestring = Storage.privateGet(DRAFT_STATE_STORAGE_KEY);\\\\\\\\n  if (draftstatestring != null) {\\\\\\\\n    if (props.transactionHashes) {\\\\\\\\n      State.update({ waitForDraftStateRestore: false });\\\\\\\\n      Storage.privateSet(DRAFT_STATE_STORAGE_KEY, undefined);\\\\\\\\n    } else {\\\\\\\\n      try {\\\\\\\\n        const draftstate = JSON.parse(draftstatestring);\\\\\\\\n        State.update(draftstate);\\\\\\\\n      } catch (e) {\\\\\\\\n        console.error(\\\\\\\\\\\\\\\"error restoring draft\\\\\\\\\\\\\\\", draftstatestring);\\\\\\\\n      }\\\\\\\\n    }\\\\\\\\n    State.update({ waitForDraftStateRestore: false });\\\\\\\\n  }\\\\\\\\n}\\\\\\\\n\\\\\\\\n// This must be outside onClick, because Near.view returns null at first, and when the view call finished, it returns true/false.\\\\\\\\n// If checking this inside onClick, it will give `null` and we cannot tell the result is true or false.\\\\\\\\nlet grantNotify = Near.view(\\\\\\\\\\\\\\\"social.near\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"is_write_permission_granted\\\\\\\\\\\\\\\", {\\\\\\\\n  predecessor_id: \\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\",\\\\\\\\n  key: context.accountId + \\\\\\\\\\\\\\\"/index/notify\\\\\\\\\\\\\\\",\\\\\\\\n});\\\\\\\\nif (grantNotify === null) {\\\\\\\\n  return;\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst onSubmit = () => {\\\\\\\\n  Storage.privateSet(DRAFT_STATE_STORAGE_KEY, JSON.stringify(state));\\\\\\\\n\\\\\\\\n  let labels = state.labelStrings;\\\\\\\\n\\\\\\\\n  let body = {\\\\\\\\n    name: state.name,\\\\\\\\n    description: generateDescription(\\\\\\\\n      state.description,\\\\\\\\n      state.amount,\\\\\\\\n      state.token,\\\\\\\\n      state.supervisor,\\\\\\\\n      state.seekingFunding\\\\\\\\n    ),\\\\\\\\n  };\\\\\\\\n\\\\\\\\n  if (state.postType === \\\\\\\\\\\\\\\"Solution\\\\\\\\\\\\\\\") {\\\\\\\\n    body = {\\\\\\\\n      ...body,\\\\\\\\n      post_type: \\\\\\\\\\\\\\\"Solution\\\\\\\\\\\\\\\",\\\\\\\\n      solution_version: \\\\\\\\\\\\\\\"V1\\\\\\\\\\\\\\\",\\\\\\\\n    };\\\\\\\\n  } else {\\\\\\\\n    // Idea\\\\\\\\n    body = {\\\\\\\\n      ...body,\\\\\\\\n      post_type: \\\\\\\\\\\\\\\"Idea\\\\\\\\\\\\\\\",\\\\\\\\n      idea_version: \\\\\\\\\\\\\\\"V1\\\\\\\\\\\\\\\",\\\\\\\\n    };\\\\\\\\n  }\\\\\\\\n\\\\\\\\n  if (!context.accountId) return;\\\\\\\\n\\\\\\\\n  let txn = [];\\\\\\\\n  if (mode == \\\\\\\\\\\\\\\"Create\\\\\\\\\\\\\\\") {\\\\\\\\n    txn.push({\\\\\\\\n      contractName: \\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\",\\\\\\\\n      methodName: \\\\\\\\\\\\\\\"add_post\\\\\\\\\\\\\\\",\\\\\\\\n      args: {\\\\\\\\n        parent_id: parentId,\\\\\\\\n        labels,\\\\\\\\n        body: body,\\\\\\\\n      },\\\\\\\\n      deposit: Big(10).pow(21).mul(3),\\\\\\\\n      gas: Big(10).pow(12).mul(100),\\\\\\\\n    });\\\\\\\\n  } else if (mode == \\\\\\\\\\\\\\\"Edit\\\\\\\\\\\\\\\") {\\\\\\\\n    txn.push({\\\\\\\\n      contractName: \\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\",\\\\\\\\n      methodName: \\\\\\\\\\\\\\\"edit_post\\\\\\\\\\\\\\\",\\\\\\\\n      args: {\\\\\\\\n        id: postId,\\\\\\\\n        labels,\\\\\\\\n        body: body,\\\\\\\\n      },\\\\\\\\n      deposit: Big(10).pow(21).mul(2),\\\\\\\\n      gas: Big(10).pow(12).mul(100),\\\\\\\\n    });\\\\\\\\n  }\\\\\\\\n  if (mode == \\\\\\\\\\\\\\\"Create\\\\\\\\\\\\\\\" || mode == \\\\\\\\\\\\\\\"Edit\\\\\\\\\\\\\\\") {\\\\\\\\n    if (grantNotify === false) {\\\\\\\\n      txn.unshift({\\\\\\\\n        contractName: \\\\\\\\\\\\\\\"social.near\\\\\\\\\\\\\\\",\\\\\\\\n        methodName: \\\\\\\\\\\\\\\"grant_write_permission\\\\\\\\\\\\\\\",\\\\\\\\n        args: {\\\\\\\\n          predecessor_id: \\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\",\\\\\\\\n          keys: [context.accountId + \\\\\\\\\\\\\\\"/index/notify\\\\\\\\\\\\\\\"],\\\\\\\\n        },\\\\\\\\n        deposit: Big(10).pow(23),\\\\\\\\n        gas: Big(10).pow(12).mul(30),\\\\\\\\n      });\\\\\\\\n    }\\\\\\\\n    Near.call(txn);\\\\\\\\n  }\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst onIdeaClick = () => {\\\\\\\\n  State.update({ postType: \\\\\\\\\\\\\\\"Idea\\\\\\\\\\\\\\\", seekingFunding: false });\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst onSolutionClick = () => {\\\\\\\\n  State.update({ postType: \\\\\\\\\\\\\\\"Solution\\\\\\\\\\\\\\\" });\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst normalizeLabel = (label) =>\\\\\\\\n  label\\\\\\\\n    .replaceAll(/[- \\\\\\\\\\\\\\\\.]/g, \\\\\\\\\\\\\\\"_\\\\\\\\\\\\\\\")\\\\\\\\n    .replaceAll(/[^\\\\\\\\\\\\\\\\w]+/g, \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\")\\\\\\\\n    .replaceAll(/_+/g, \\\\\\\\\\\\\\\"-\\\\\\\\\\\\\\\")\\\\\\\\n    .replace(/^-+/, \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\")\\\\\\\\n    .replace(/-+$/, \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\")\\\\\\\\n    .toLowerCase()\\\\\\\\n    .trim(\\\\\\\\\\\\\\\"-\\\\\\\\\\\\\\\");\\\\\\\\n\\\\\\\\nconst checkLabel = (label) => {\\\\\\\\n  Near.asyncView(\\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"is_allowed_to_use_labels\\\\\\\\\\\\\\\", {\\\\\\\\n    editor: context.accountId,\\\\\\\\n    labels: [label],\\\\\\\\n  }).then((allowed) => {\\\\\\\\n    if (allowed) {\\\\\\\\n      State.update({ warning: \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\" });\\\\\\\\n    } else {\\\\\\\\n      State.update({\\\\\\\\n        warning:\\\\\\\\n          \\\\\\\\\\\\'The label \\\\\\\\\\\\\\\"\\\\\\\\\\\\' +\\\\\\\\n          label +\\\\\\\\n          \\\\\\\\\\\\'\\\\\\\\\\\\\\\" is protected and can only be added by moderators\\\\\\\\\\\\',\\\\\\\\n      });\\\\\\\\n      return;\\\\\\\\n    }\\\\\\\\n  });\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst setLabels = (labels) => {\\\\\\\\n  labels = labels.map((o) => {\\\\\\\\n    o.name = normalizeLabel(o.name);\\\\\\\\n    return o;\\\\\\\\n  });\\\\\\\\n  if (labels.length < state.labels.length) {\\\\\\\\n    let oldLabels = new Set(state.labels.map((label) => label.name));\\\\\\\\n    for (let label of labels) {\\\\\\\\n      oldLabels.delete(label.name);\\\\\\\\n    }\\\\\\\\n    let removed = oldLabels.values().next().value;\\\\\\\\n    Near.asyncView(\\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"is_allowed_to_use_labels\\\\\\\\\\\\\\\", {\\\\\\\\n      editor: context.accountId,\\\\\\\\n      labels: [removed],\\\\\\\\n    }).then((allowed) => {\\\\\\\\n      if (allowed) {\\\\\\\\n        let labelStrings = labels.map(({ name }) => name);\\\\\\\\n        State.update({ labels, labelStrings });\\\\\\\\n      } else {\\\\\\\\n        State.update({\\\\\\\\n          warning:\\\\\\\\n            \\\\\\\\\\\\'The label \\\\\\\\\\\\\\\"\\\\\\\\\\\\' +\\\\\\\\n            removed +\\\\\\\\n            \\\\\\\\\\\\'\\\\\\\\\\\\\\\" is protected and can only be updated by moderators\\\\\\\\\\\\',\\\\\\\\n        });\\\\\\\\n        return;\\\\\\\\n      }\\\\\\\\n    });\\\\\\\\n  } else {\\\\\\\\n    let labelStrings = labels.map((o) => {\\\\\\\\n      return o.name;\\\\\\\\n    });\\\\\\\\n    State.update({ labels, labelStrings });\\\\\\\\n  }\\\\\\\\n};\\\\\\\\nconst existingLabelStrings =\\\\\\\\n  Near.view(\\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"get_all_allowed_labels\\\\\\\\\\\\\\\", {\\\\\\\\n    editor: context.accountId,\\\\\\\\n  }) ?? [];\\\\\\\\nconst existingLabelSet = new Set(existingLabelStrings);\\\\\\\\nconst existingLabels = existingLabelStrings.map((s) => {\\\\\\\\n  return { name: s };\\\\\\\\n});\\\\\\\\n\\\\\\\\nconst labelEditor = (\\\\\\\\n  <div className=\\\\\\\\\\\\\\\"col-lg-12 mb-2\\\\\\\\\\\\\\\">\\\\\\\\n    <p className=\\\\\\\\\\\\\\\"fs-6 fw-bold mb-1\\\\\\\\\\\\\\\">Labels</p>\\\\\\\\n    <Typeahead\\\\\\\\n      multiple\\\\\\\\n      labelKey=\\\\\\\\\\\\\\\"name\\\\\\\\\\\\\\\"\\\\\\\\n      onInputChange={checkLabel}\\\\\\\\n      onChange={setLabels}\\\\\\\\n      options={existingLabels}\\\\\\\\n      placeholder=\\\\\\\\\\\\\\\"near.social, widget, NEP, standard, protocol, tool\\\\\\\\\\\\\\\"\\\\\\\\n      selected={state.labels}\\\\\\\\n      positionFixed\\\\\\\\n      allowNew={(results, props) => {\\\\\\\\n        return (\\\\\\\\n          !existingLabelSet.has(props.text) &&\\\\\\\\n          props.selected.filter((selected) => selected.name === props.text)\\\\\\\\n            .length == 0 &&\\\\\\\\n          Near.view(\\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"is_allowed_to_use_labels\\\\\\\\\\\\\\\", {\\\\\\\\n            editor: context.accountId,\\\\\\\\n            labels: [props.text],\\\\\\\\n          })\\\\\\\\n        );\\\\\\\\n      }}\\\\\\\\n    />\\\\\\\\n  </div>\\\\\\\\n);\\\\\\\\n\\\\\\\\nconst nameDiv = (\\\\\\\\n  <div className=\\\\\\\\\\\\\\\"col-lg-6 mb-2\\\\\\\\\\\\\\\">\\\\\\\\n    <p className=\\\\\\\\\\\\\\\"fs-6 fw-bold mb-1\\\\\\\\\\\\\\\">Title</p>\\\\\\\\n    <input\\\\\\\\n      type=\\\\\\\\\\\\\\\"text\\\\\\\\\\\\\\\"\\\\\\\\n      value={state.name}\\\\\\\\n      onChange={(event) => State.update({ name: event.target.value })}\\\\\\\\n    />\\\\\\\\n  </div>\\\\\\\\n);\\\\\\\\n\\\\\\\\nconst descriptionDiv = (\\\\\\\\n  <div className=\\\\\\\\\\\\\\\"col-lg-12 mb-2\\\\\\\\\\\\\\\">\\\\\\\\n    <p className=\\\\\\\\\\\\\\\"fs-6 fw-bold mb-1\\\\\\\\\\\\\\\">Description</p>\\\\\\\\n    <Widget\\\\\\\\n      src=\\\\\\\\\\\\\\\"devhub.near/widget/devhub.components.molecule.MarkdownEditor\\\\\\\\\\\\\\\"\\\\\\\\n      props={{\\\\\\\\n        data: { handler: state.handler, content: state.description },\\\\\\\\n        onChange: (content) => {\\\\\\\\n          State.update({ description: content, handler: \\\\\\\\\\\\\\\"update\\\\\\\\\\\\\\\" });\\\\\\\\n          textareaInputHandler(content);\\\\\\\\n        },\\\\\\\\n      }}\\\\\\\\n    />\\\\\\\\n    {autocompleteEnabled && state.showAccountAutocomplete && (\\\\\\\\n      <AutoComplete>\\\\\\\\n        <Widget\\\\\\\\n          src=\\\\\\\\\\\\\\\"near/widget/AccountAutocomplete\\\\\\\\\\\\\\\"\\\\\\\\n          props={{\\\\\\\\n            term: state.text.split(\\\\\\\\\\\\\\\"@\\\\\\\\\\\\\\\").pop(),\\\\\\\\n            onSelect: autoCompleteAccountId,\\\\\\\\n            onClose: () => State.update({ showAccountAutocomplete: false }),\\\\\\\\n          }}\\\\\\\\n        />\\\\\\\\n      </AutoComplete>\\\\\\\\n    )}\\\\\\\\n  </div>\\\\\\\\n);\\\\\\\\n\\\\\\\\nconst isFundraisingDiv = (\\\\\\\\n  // This is jank with just btns and not radios. But the radios were glitchy af\\\\\\\\n  <>\\\\\\\\n    <div class=\\\\\\\\\\\\\\\"mb-2\\\\\\\\\\\\\\\">\\\\\\\\n      <p class=\\\\\\\\\\\\\\\"fs-6 fw-bold mb-1\\\\\\\\\\\\\\\">\\\\\\\\n        Are you seeking funding for your solution?\\\\\\\\n        <span class=\\\\\\\\\\\\\\\"text-muted fw-normal\\\\\\\\\\\\\\\">(Optional)</span>\\\\\\\\n      </p>\\\\\\\\n      <div class=\\\\\\\\\\\\\\\"form-check form-check-inline\\\\\\\\\\\\\\\">\\\\\\\\n        <label class=\\\\\\\\\\\\\\\"form-check-label\\\\\\\\\\\\\\\">\\\\\\\\n          <button\\\\\\\\n            className=\\\\\\\\\\\\\\\"btn btn-light p-0\\\\\\\\\\\\\\\"\\\\\\\\n            style={{\\\\\\\\n              backgroundColor: state.seekingFunding ? \\\\\\\\\\\\\\\"#0C7283\\\\\\\\\\\\\\\" : \\\\\\\\\\\\\\\"inherit\\\\\\\\\\\\\\\",\\\\\\\\n              color: \\\\\\\\\\\\\\\"#f3f3f3\\\\\\\\\\\\\\\",\\\\\\\\n              border: \\\\\\\\\\\\\\\"solid #D9D9D9\\\\\\\\\\\\\\\",\\\\\\\\n              borderRadius: \\\\\\\\\\\\\\\"100%\\\\\\\\\\\\\\\",\\\\\\\\n              height: \\\\\\\\\\\\\\\"20px\\\\\\\\\\\\\\\",\\\\\\\\n              width: \\\\\\\\\\\\\\\"20px\\\\\\\\\\\\\\\",\\\\\\\\n            }}\\\\\\\\n            onClick={() => State.update({ seekingFunding: true })}\\\\\\\\n          />\\\\\\\\n          Yes\\\\\\\\n        </label>\\\\\\\\n      </div>\\\\\\\\n      <div class=\\\\\\\\\\\\\\\"form-check form-check-inline\\\\\\\\\\\\\\\">\\\\\\\\n        <label class=\\\\\\\\\\\\\\\"form-check-label\\\\\\\\\\\\\\\">\\\\\\\\n          <button\\\\\\\\n            className=\\\\\\\\\\\\\\\"btn btn-light p-0\\\\\\\\\\\\\\\"\\\\\\\\n            style={{\\\\\\\\n              backgroundColor: !state.seekingFunding ? \\\\\\\\\\\\\\\"#0C7283\\\\\\\\\\\\\\\" : \\\\\\\\\\\\\\\"inherit\\\\\\\\\\\\\\\",\\\\\\\\n              color: \\\\\\\\\\\\\\\"#f3f3f3\\\\\\\\\\\\\\\",\\\\\\\\n              border: \\\\\\\\\\\\\\\"solid #D9D9D9\\\\\\\\\\\\\\\",\\\\\\\\n              borderRadius: \\\\\\\\\\\\\\\"100%\\\\\\\\\\\\\\\",\\\\\\\\n              height: \\\\\\\\\\\\\\\"20px\\\\\\\\\\\\\\\",\\\\\\\\n              width: \\\\\\\\\\\\\\\"20px\\\\\\\\\\\\\\\",\\\\\\\\n            }}\\\\\\\\n            onClick={() => State.update({ seekingFunding: false })}\\\\\\\\n          />\\\\\\\\n          No\\\\\\\\n        </label>\\\\\\\\n      </div>\\\\\\\\n    </div>\\\\\\\\n  </>\\\\\\\\n);\\\\\\\\n\\\\\\\\nconst fundraisingDiv = (\\\\\\\\n  <div class=\\\\\\\\\\\\\\\"d-flex flex-column mb-2\\\\\\\\\\\\\\\">\\\\\\\\n    <div className=\\\\\\\\\\\\\\\"col-lg-6  mb-2\\\\\\\\\\\\\\\">\\\\\\\\n      Currency\\\\\\\\n      <select\\\\\\\\n        onChange={(event) => State.update({ token: event.target.value })}\\\\\\\\n        class=\\\\\\\\\\\\\\\"form-select\\\\\\\\\\\\\\\"\\\\\\\\n        aria-label=\\\\\\\\\\\\\\\"Default select\\\\\\\\\\\\\\\"\\\\\\\\n      >\\\\\\\\n        <option selected value=\\\\\\\\\\\\\\\"USDT\\\\\\\\\\\\\\\">\\\\\\\\n          USDT\\\\\\\\n        </option>\\\\\\\\n        <option value=\\\\\\\\\\\\\\\"NEAR\\\\\\\\\\\\\\\">NEAR</option>\\\\\\\\n      </select>\\\\\\\\n    </div>\\\\\\\\n    <div className=\\\\\\\\\\\\\\\"col-lg-6 mb-2\\\\\\\\\\\\\\\">\\\\\\\\n      Requested amount <span class=\\\\\\\\\\\\\\\"text-muted fw-normal\\\\\\\\\\\\\\\">(Numbers Only)</span>\\\\\\\\n      <input\\\\\\\\n        type=\\\\\\\\\\\\\\\"number\\\\\\\\\\\\\\\"\\\\\\\\n        value={parseInt(state.amount) > 0 ? state.amount : \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\"}\\\\\\\\n        min={0}\\\\\\\\n        onChange={(event) =>\\\\\\\\n          State.update({\\\\\\\\n            amount: Number(\\\\\\\\n              event.target.value.toString().replace(/e/g, \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\")\\\\\\\\n            ).toString(),\\\\\\\\n          })\\\\\\\\n        }\\\\\\\\n      />\\\\\\\\n    </div>\\\\\\\\n    <div className=\\\\\\\\\\\\\\\"col-lg-6 mb-2\\\\\\\\\\\\\\\">\\\\\\\\n      <p class=\\\\\\\\\\\\\\\"mb-1\\\\\\\\\\\\\\\">\\\\\\\\n        Requested sponsor <span class=\\\\\\\\\\\\\\\"text-muted fw-normal\\\\\\\\\\\\\\\">(Optional)</span>\\\\\\\\n      </p>\\\\\\\\n      <p style={{ fontSize: \\\\\\\\\\\\\\\"13px\\\\\\\\\\\\\\\" }} class=\\\\\\\\\\\\\\\"m-0 text-muted fw-light\\\\\\\\\\\\\\\">\\\\\\\\n        If you are requesting funding from a specific sponsor, please enter\\\\\\\\n        their username.\\\\\\\\n      </p>\\\\\\\\n      <div class=\\\\\\\\\\\\\\\"input-group flex-nowrap\\\\\\\\\\\\\\\">\\\\\\\\n        <span class=\\\\\\\\\\\\\\\"input-group-text\\\\\\\\\\\\\\\" id=\\\\\\\\\\\\\\\"addon-wrapping\\\\\\\\\\\\\\\">\\\\\\\\n          @\\\\\\\\n        </span>\\\\\\\\n        <input\\\\\\\\n          type=\\\\\\\\\\\\\\\"text\\\\\\\\\\\\\\\"\\\\\\\\n          class=\\\\\\\\\\\\\\\"form-control\\\\\\\\\\\\\\\"\\\\\\\\n          placeholder=\\\\\\\\\\\\\\\"Enter username\\\\\\\\\\\\\\\"\\\\\\\\n          value={state.supervisor}\\\\\\\\n          onChange={(event) => State.update({ supervisor: event.target.value })}\\\\\\\\n        />\\\\\\\\n      </div>\\\\\\\\n    </div>\\\\\\\\n  </div>\\\\\\\\n);\\\\\\\\n\\\\\\\\nfunction generateDescription(text, amount, token, supervisor, seekingFunding) {\\\\\\\\n  const fundingText =\\\\\\\\n    amount > 0 && token ? `###### Requested amount: ${amount} ${token}\\\\\\\\\\\\\\\\n` : \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\";\\\\\\\\n  const supervisorText = supervisor\\\\\\\\n    ? `###### Requested sponsor: @${supervisor}\\\\\\\\\\\\\\\\n`\\\\\\\\n    : \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\";\\\\\\\\n  return seekingFunding ? `${fundingText}${supervisorText}${text}` : text;\\\\\\\\n}\\\\\\\\n\\\\\\\\nreturn (\\\\\\\\n  <div class=\\\\\\\\\\\\\\\"bg-light d-flex flex-column flex-grow-1 w-100\\\\\\\\\\\\\\\">\\\\\\\\n    <div class=\\\\\\\\\\\\\\\"mx-5 mb-5\\\\\\\\\\\\\\\">\\\\\\\\n      <div aria-label=\\\\\\\\\\\\\\\"breadcrumb\\\\\\\\\\\\\\\">\\\\\\\\n        <ol class=\\\\\\\\\\\\\\\"breadcrumb\\\\\\\\\\\\\\\">\\\\\\\\n          <li class=\\\\\\\\\\\\\\\"breadcrumb-item\\\\\\\\\\\\\\\">\\\\\\\\n            <Link\\\\\\\\n              style={{\\\\\\\\n                color: \\\\\\\\\\\\\\\"#3252A6\\\\\\\\\\\\\\\",\\\\\\\\n              }}\\\\\\\\n              className=\\\\\\\\\\\\\\\"fw-bold\\\\\\\\\\\\\\\"\\\\\\\\n              to={href({\\\\\\\\n                widgetSrc: \\\\\\\\\\\\\\\"devhub.near/widget/app\\\\\\\\\\\\\\\",\\\\\\\\n                params: { page: \\\\\\\\\\\\\\\"feed\\\\\\\\\\\\\\\" },\\\\\\\\n              })}\\\\\\\\n            >\\\\\\\\n              DevHub\\\\\\\\n            </Link>\\\\\\\\n          </li>\\\\\\\\n          <li class=\\\\\\\\\\\\\\\"breadcrumb-item active\\\\\\\\\\\\\\\" aria-current=\\\\\\\\\\\\\\\"page\\\\\\\\\\\\\\\">\\\\\\\\n            Create new\\\\\\\\n          </li>\\\\\\\\n        </ol>\\\\\\\\n      </div>\\\\\\\\n      {props.transactionHashes ? (\\\\\\\\n        <>\\\\\\\\n          Post created successfully. Back to{\\\\\\\\\\\\\\\" \\\\\\\\\\\\\\\"}\\\\\\\\n          <Link\\\\\\\\n            style={{\\\\\\\\n              color: \\\\\\\\\\\\\\\"#3252A6\\\\\\\\\\\\\\\",\\\\\\\\n            }}\\\\\\\\n            className=\\\\\\\\\\\\\\\"fw-bold\\\\\\\\\\\\\\\"\\\\\\\\n            to={href({\\\\\\\\n              widgetSrc: \\\\\\\\\\\\\\\"devhub.near/widget/app\\\\\\\\\\\\\\\",\\\\\\\\n              params: { page: \\\\\\\\\\\\\\\"feed\\\\\\\\\\\\\\\" },\\\\\\\\n            })}\\\\\\\\n          >\\\\\\\\n            feed\\\\\\\\n          </Link>\\\\\\\\n        </>\\\\\\\\n      ) : (\\\\\\\\n        <>\\\\\\\\n          <h4>Create a new post</h4>\\\\\\\\n          <p>{state.seekingFunding}</p>\\\\\\\\n          <div class=\\\\\\\\\\\\\\\"card border-light\\\\\\\\\\\\\\\">\\\\\\\\n            <div class=\\\\\\\\\\\\\\\"card-body\\\\\\\\\\\\\\\">\\\\\\\\n              <p class=\\\\\\\\\\\\\\\"card-title fw-bold fs-6\\\\\\\\\\\\\\\">What do you want to create?</p>\\\\\\\\n              <div class=\\\\\\\\\\\\\\\"d-flex flex-row gap-2\\\\\\\\\\\\\\\">\\\\\\\\n                <button\\\\\\\\n                  onClick={onIdeaClick}\\\\\\\\n                  type=\\\\\\\\\\\\\\\"button\\\\\\\\\\\\\\\"\\\\\\\\n                  class={`btn btn-outline-secondary`}\\\\\\\\n                  style={\\\\\\\\n                    state.postType === \\\\\\\\\\\\\\\"Idea\\\\\\\\\\\\\\\"\\\\\\\\n                      ? {\\\\\\\\n                          backgroundColor: \\\\\\\\\\\\\\\"#0C7283\\\\\\\\\\\\\\\",\\\\\\\\n                          color: \\\\\\\\\\\\\\\"#f3f3f3\\\\\\\\\\\\\\\",\\\\\\\\n                        }\\\\\\\\n                      : {}\\\\\\\\n                  }\\\\\\\\n                >\\\\\\\\n                  <i class=\\\\\\\\\\\\\\\"bi bi-lightbulb\\\\\\\\\\\\\\\"></i>\\\\\\\\n                  Idea\\\\\\\\n                </button>\\\\\\\\n                <button\\\\\\\\n                  onClick={onSolutionClick}\\\\\\\\n                  type=\\\\\\\\\\\\\\\"button\\\\\\\\\\\\\\\"\\\\\\\\n                  class={`btn btn-outline-secondary`}\\\\\\\\n                  style={\\\\\\\\n                    state.postType !== \\\\\\\\\\\\\\\"Idea\\\\\\\\\\\\\\\"\\\\\\\\n                      ? {\\\\\\\\n                          backgroundColor: \\\\\\\\\\\\\\\"#0C7283\\\\\\\\\\\\\\\",\\\\\\\\n                          color: \\\\\\\\\\\\\\\"#f3f3f3\\\\\\\\\\\\\\\",\\\\\\\\n                        }\\\\\\\\n                      : {}\\\\\\\\n                  }\\\\\\\\n                >\\\\\\\\n                  <i class=\\\\\\\\\\\\\\\"bi bi-rocket\\\\\\\\\\\\\\\"></i>\\\\\\\\n                  Solution\\\\\\\\n                </button>\\\\\\\\n              </div>\\\\\\\\n              <p class=\\\\\\\\\\\\\\\"text-muted w-75 my-1\\\\\\\\\\\\\\\">\\\\\\\\n                {state.postType === \\\\\\\\\\\\\\\"Idea\\\\\\\\\\\\\\\"\\\\\\\\n                  ? \\\\\\\\\\\\\\\"Get feedback from the community about a problem, opportunity, or need.\\\\\\\\\\\\\\\"\\\\\\\\n                  : \\\\\\\\\\\\\\\"Provide a specific proposal or implementation to an idea, optionally requesting funding. If your solution relates to an existing idea, please reply to the original post with a solution.\\\\\\\\\\\\\\\"}\\\\\\\\n              </p>\\\\\\\\n              {state.warning && (\\\\\\\\n                <div\\\\\\\\n                  class=\\\\\\\\\\\\\\\"alert alert-warning alert-dismissible fade show\\\\\\\\\\\\\\\"\\\\\\\\n                  role=\\\\\\\\\\\\\\\"alert\\\\\\\\\\\\\\\"\\\\\\\\n                >\\\\\\\\n                  {state.warning}\\\\\\\\n                  <button\\\\\\\\n                    type=\\\\\\\\\\\\\\\"button\\\\\\\\\\\\\\\"\\\\\\\\n                    class=\\\\\\\\\\\\\\\"btn-close\\\\\\\\\\\\\\\"\\\\\\\\n                    data-bs-dismiss=\\\\\\\\\\\\\\\"alert\\\\\\\\\\\\\\\"\\\\\\\\n                    aria-label=\\\\\\\\\\\\\\\"Close\\\\\\\\\\\\\\\"\\\\\\\\n                    onClick={() => State.update({ warning: \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\" })}\\\\\\\\n                  ></button>\\\\\\\\n                </div>\\\\\\\\n              )}\\\\\\\\n              <div className=\\\\\\\\\\\\\\\"row\\\\\\\\\\\\\\\">\\\\\\\\n                {nameDiv}\\\\\\\\n                {descriptionDiv}\\\\\\\\n                {labelEditor}\\\\\\\\n                {state.postType === \\\\\\\\\\\\\\\"Solution\\\\\\\\\\\\\\\" && isFundraisingDiv}\\\\\\\\n                {state.seekingFunding && fundraisingDiv}\\\\\\\\n              </div>\\\\\\\\n              <button\\\\\\\\n                style={{\\\\\\\\n                  width: \\\\\\\\\\\\\\\"7rem\\\\\\\\\\\\\\\",\\\\\\\\n                  backgroundColor: \\\\\\\\\\\\\\\"#0C7283\\\\\\\\\\\\\\\",\\\\\\\\n                  color: \\\\\\\\\\\\\\\"#f3f3f3\\\\\\\\\\\\\\\",\\\\\\\\n                }}\\\\\\\\n                disabled={\\\\\\\\n                  state.seekingFunding && (!state.amount || state.amount < 1)\\\\\\\\n                }\\\\\\\\n                className=\\\\\\\\\\\\\\\"btn btn-light mb-2 p-3\\\\\\\\\\\\\\\"\\\\\\\\n                onClick={onSubmit}\\\\\\\\n              >\\\\\\\\n                Submit\\\\\\\\n              </button>\\\\\\\\n            </div>\\\\\\\\n            <div class=\\\\\\\\\\\\\\\"bg-light d-flex flex-row p-1 border-bottom\\\\\\\\\\\\\\\"></div>\\\\\\\\n            <div class=\\\\\\\\\\\\\\\"card-body\\\\\\\\\\\\\\\">\\\\\\\\n              <p class=\\\\\\\\\\\\\\\"text-muted m-0\\\\\\\\\\\\\\\">Preview</p>\\\\\\\\n              <div>\\\\\\\\n                <Widget\\\\\\\\n                  src=\\\\\\\\\\\\\\\"devhub.near/widget/devhub.entity.post.Post\\\\\\\\\\\\\\\"\\\\\\\\n                  props={{\\\\\\\\n                    isPreview: true,\\\\\\\\n                    id: 0, // irrelevant\\\\\\\\n                    post: {\\\\\\\\n                      author_id: state.author_id,\\\\\\\\n                      likes: [],\\\\\\\\n                      snapshot: {\\\\\\\\n                        editor_id: state.editor_id,\\\\\\\\n                        labels: state.labelStrings,\\\\\\\\n                        post_type: state.postType,\\\\\\\\n                        name: state.name,\\\\\\\\n                        description: generateDescription(\\\\\\\\n                          state.description,\\\\\\\\n                          state.amount,\\\\\\\\n                          state.token,\\\\\\\\n                          state.supervisor,\\\\\\\\n                          state.seekingFunding\\\\\\\\n                        ),\\\\\\\\n                        github_link: state.githubLink,\\\\\\\\n                      },\\\\\\\\n                    },\\\\\\\\n                  }}\\\\\\\\n                />\\\\\\\\n              </div>\\\\\\\\n            </div>\\\\\\\\n          </div>\\\\\\\\n        </>\\\\\\\\n      )}\\\\\\\\n    </div>\\\\\\\\n  </div>\\\\\\\\n);\\\\\\\\n\"}, \"devhub.page.profile\": {\"\": \"const accountId = props.accountId || context.accountId;\\\\\\\\n\\\\\\\\nif (!accountId) {\\\\\\\\n  return \\\\\\\\\\\\\\\"No Account Logged In!\\\\\\\\\\\\\\\";\\\\\\\\n}\\\\\\\\n\\\\\\\\nreturn (\\\\\\\\n  <div className=\\\\\\\\\\\\\\\"w-100 bg-white overflow-hidden px-3\\\\\\\\\\\\\\\">\\\\\\\\n    <Widget src=\\\\\\\\\\\\\\\"mob.near/widget/ProfilePage\\\\\\\\\\\\\\\" props={{ accountId }} />\\\\\\\\n  </div>\\\\\\\\n);\\\\\\\\n\"}, \"devhub.page.contribute\": {\"\": \"const Header = styled.div`\\\\\\\\n  //background: white;\\\\\\\\n  padding: 1rem 3.125rem;\\\\\\\\n  width: 100%;\\\\\\\\n  margin: 24px;\\\\\\\\n\\\\\\\\n  @media screen and (max-width: 768px) {\\\\\\\\n    margin: 1rem 0;\\\\\\\\n    padding: 1rem;\\\\\\\\n  }\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst PageHeader = styled.h2`\\\\\\\\n  color: #00ec97;\\\\\\\\n  font-size: 1.5rem;\\\\\\\\n  font-style: normal;\\\\\\\\n  font-weight: 400;\\\\\\\\n  line-height: 120%; /* 28.8px */\\\\\\\\n  letter-spacing: -0.24px;\\\\\\\\n  margin: 0;\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst Lead = styled.h5`\\\\\\\\n  color: #151515;\\\\\\\\n  font-size: 2.5rem;\\\\\\\\n  font-style: normal;\\\\\\\\n  font-weight: 700;\\\\\\\\n  line-height: 120%; /* 48px */\\\\\\\\n  margin: 2.25rem 8rem;\\\\\\\\n  margin-top: 0;\\\\\\\\n\\\\\\\\n  @media screen and (max-width: 768px) {\\\\\\\\n    font-size: 1.75rem;\\\\\\\\n    margin: 1rem;\\\\\\\\n    margin-top: 0;\\\\\\\\n  }\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst Container = styled.div`\\\\\\\\n  padding: 2.25rem 8rem;\\\\\\\\n  width: 100%;\\\\\\\\n  //background-color: white;\\\\\\\\n\\\\\\\\n  @media screen and (max-width: 768px) {\\\\\\\\n    padding: 1rem;\\\\\\\\n  }\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst actions = [\\\\\\\\n  {\\\\\\\\n    title: \\\\\\\\\\\\\\\"Ideate on Devhub\\\\\\\\\\\\\\\",\\\\\\\\n    description:\\\\\\\\n      \\\\\\\\\\\\\\\"The first step in any NEAR ecosystem project is ideation. It is crucial to have a way to find people to share and explore ideas with, partly because it can save a lot of time based on prior discussions. But also because it can you gauge support from a diversity of stakeholders.\\\\\\\\\\\\\\\",\\\\\\\\n    ctaAction: \\\\\\\\\\\\\\\"Learn More \\\\\\\\u{2192}\\\\\\\\\\\\\\\",\\\\\\\\n    ctaLink: \\\\\\\\\\\\\\\"https://www.neardevgov.org/blog/how-to-ideate-on-dev-hub\\\\\\\\\\\\\\\",\\\\\\\\n  },\\\\\\\\n  {\\\\\\\\n    title: \\\\\\\\\\\\\\\"Post a Proposal\\\\\\\\\\\\\\\",\\\\\\\\n    description:\\\\\\\\n      \\\\\\\\\\\\\\\"If you have already nurtured and refined your idea, you\\\\\\\\\\\\'re ready to draft and post your funding proposal.This guide is here to help you craft a compelling, convincing, and concise proposal that will capture the interest of potential funders.\\\\\\\\\\\\\\\",\\\\\\\\n    ctaAction: \\\\\\\\\\\\\\\"Learn More \\\\\\\\u{2192}\\\\\\\\\\\\\\\",\\\\\\\\n    ctaLink: \\\\\\\\\\\\\\\"https://www.neardevgov.org/blog/how-to-post-proposals-on-devhub\\\\\\\\\\\\\\\",\\\\\\\\n  },\\\\\\\\n  {\\\\\\\\n    title: \\\\\\\\\\\\\\\"Host an Event\\\\\\\\\\\\\\\",\\\\\\\\n    description:\\\\\\\\n      \\\\\\\\\\\\\\\"We are always on the lookout for events that align with our mission and provide value to the NEAR ecosystem. If you are organizing such an event, we would love to hear from you! Below is a guide on how to submit a sponsorship proposal to us.\\\\\\\\\\\\\\\",\\\\\\\\n    ctaAction: \\\\\\\\\\\\\\\"Learn More \\\\\\\\u{2192}\\\\\\\\\\\\\\\",\\\\\\\\n    ctaLink:\\\\\\\\n      \\\\\\\\\\\\\\\"https://near.social/devgovgigs.near/widget/app?page=community&handle=hacks&tab=Wiki%202\\\\\\\\\\\\\\\",\\\\\\\\n  },\\\\\\\\n  {\\\\\\\\n    title: \\\\\\\\\\\\\\\"Improve NEAR Docs\\\\\\\\\\\\\\\",\\\\\\\\n    description:\\\\\\\\n      \\\\\\\\\\\\\\\"NEAR documentation is an open source repository that anyone can fork, extend and contribute to by creating pull requests. To get started, head over to our github repository and checkout how you can make your first contribution. \\\\\\\\\\\\\\\",\\\\\\\\n    ctaAction: \\\\\\\\\\\\\\\"Learn More \\\\\\\\u{2192}\\\\\\\\\\\\\\\",\\\\\\\\n    ctaLink: \\\\\\\\\\\\\\\"https://github.com/near/docs\\\\\\\\\\\\\\\",\\\\\\\\n  },\\\\\\\\n  {\\\\\\\\n    title: \\\\\\\\\\\\\\\"Join the Fellowship\\\\\\\\\\\\\\\",\\\\\\\\n    description:\\\\\\\\n      \\\\\\\\\\\\\\\"As the NEAR ecosystem grows rapidly, there is an increasing need to improve developer productivity. The DevDAO NEAR Platform Fellowship Program aims to solve this issue by providing guidance to new contributors from experienced developers.\\\\\\\\\\\\\\\",\\\\\\\\n    ctaAction: \\\\\\\\\\\\\\\"Learn More \\\\\\\\u{2192}\\\\\\\\\\\\\\\",\\\\\\\\n    ctaLink:\\\\\\\\n      \\\\\\\\\\\\\\\"https://near.social/devgovgigs.near/widget/app?page=community&handle=fellowship&tab=Wiki 1\\\\\\\\\\\\\\\",\\\\\\\\n  },\\\\\\\\n  {\\\\\\\\n    title: \\\\\\\\\\\\\\\"Join NEAR Campus\\\\\\\\\\\\\\\",\\\\\\\\n    description:\\\\\\\\n      \\\\\\\\\\\\\\\"DevHub\\\\\\\\u{2019}s NEAR Campus supports existing student clubs, researchers, and faculties in blockchain technologies, enhancing both curricular and extracurricular activities. We aim to merge blockchain education with mainstream academics.\\\\\\\\\\\\\\\",\\\\\\\\n    ctaAction: \\\\\\\\\\\\\\\"Learn More \\\\\\\\u{2192}\\\\\\\\\\\\\\\",\\\\\\\\n    ctaLink:\\\\\\\\n      \\\\\\\\\\\\\\\"https://near.social/devgovgigs.near/widget/app?page=community&handle=near-campus\\\\\\\\\\\\\\\",\\\\\\\\n  },\\\\\\\\n  {\\\\\\\\n    title: \\\\\\\\\\\\\\\"Dive into Hackbox\\\\\\\\\\\\\\\",\\\\\\\\n    description:\\\\\\\\n      \\\\\\\\\\\\\\\"Hackbox is a revolutionary plug-and-play solution designed to empower local leads and community stewards in hosting hackathons easily and efficiently.\\\\\\\\\\\\\\\",\\\\\\\\n    ctaAction: \\\\\\\\\\\\\\\"Learn More \\\\\\\\u{2192}\\\\\\\\\\\\\\\",\\\\\\\\n    ctaLink: \\\\\\\\\\\\\\\"https://near.social/hackbox.near/widget/home\\\\\\\\\\\\\\\",\\\\\\\\n  },\\\\\\\\n];\\\\\\\\n\\\\\\\\nconst Card = styled.div`\\\\\\\\n  display: flex;\\\\\\\\n  flex-direction: column;\\\\\\\\n  gap: 0.5rem;\\\\\\\\n\\\\\\\\n  h5 {\\\\\\\\n    color: #151515;\\\\\\\\n    font-size: 1.75rem;\\\\\\\\n    font-style: normal;\\\\\\\\n    font-weight: 400;\\\\\\\\n    line-height: 120%; /* 43.2px */\\\\\\\\n\\\\\\\\n    display: flex;\\\\\\\\n    align-items: center;\\\\\\\\n  }\\\\\\\\n\\\\\\\\n  p {\\\\\\\\n    color: #000;\\\\\\\\n    font-size: 1rem;\\\\\\\\n    font-style: normal;\\\\\\\\n    font-weight: 400;\\\\\\\\n    line-height: 120%; /* 28.8px */\\\\\\\\n  }\\\\\\\\n\\\\\\\\n  a {\\\\\\\\n    color: #f4f4f4;\\\\\\\\n    font-size: 1rem;\\\\\\\\n    font-style: normal;\\\\\\\\n    font-weight: 700;\\\\\\\\n    line-height: 120%; /* 28.8px */\\\\\\\\n    letter-spacing: -0.48px;\\\\\\\\n\\\\\\\\n    display: flex;\\\\\\\\n    padding: 0.5rem 1rem;\\\\\\\\n    align-items: center;\\\\\\\\n    gap: 8px;\\\\\\\\n\\\\\\\\n    border-radius: 0.5rem;\\\\\\\\n    background: #00ec97;\\\\\\\\n\\\\\\\\n    width: max-content;\\\\\\\\n  }\\\\\\\\n`;\\\\\\\\nconst ActionCard = ({ action, index }) => {\\\\\\\\n  return (\\\\\\\\n    <Card>\\\\\\\\n      <h5>\\\\\\\\n        <span\\\\\\\\n          style={{\\\\\\\\n            color: \\\\\\\\\\\\\\\"#151515\\\\\\\\\\\\\\\",\\\\\\\\n            border: \\\\\\\\\\\\\\\"2px #151515 solid\\\\\\\\\\\\\\\",\\\\\\\\n            fontSize: 12,\\\\\\\\n            padding: 4,\\\\\\\\n            width: 22,\\\\\\\\n            height: 22,\\\\\\\\n          }}\\\\\\\\n          className=\\\\\\\\\\\\\\\"rounded-circle d-flex align-items-center justify-content-center me-1\\\\\\\\\\\\\\\"\\\\\\\\n        >\\\\\\\\n          {index + 1}\\\\\\\\n        </span>\\\\\\\\n        {action.title}\\\\\\\\n      </h5>\\\\\\\\n      <p>{action.description}</p>\\\\\\\\n      <a href={action.ctaLink} target=\\\\\\\\\\\\\\\"no_blank\\\\\\\\\\\\\\\">\\\\\\\\n        {action.ctaAction}\\\\\\\\n      </a>\\\\\\\\n    </Card>\\\\\\\\n  );\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst ActionContainer = styled.div`\\\\\\\\n  display: grid;\\\\\\\\n  grid-template-columns: repeat(2, 1fr);\\\\\\\\n  justify-content: center;\\\\\\\\n  column-gap: 1rem;\\\\\\\\n  row-gap: 2rem;\\\\\\\\n\\\\\\\\n  width: 100%;\\\\\\\\n\\\\\\\\n  @media screen and (max-width: 768px) {\\\\\\\\n    display: flex;\\\\\\\\n    flex-direction: column;\\\\\\\\n  }\\\\\\\\n`;\\\\\\\\n\\\\\\\\nreturn (\\\\\\\\n  <>\\\\\\\\n    <Widget\\\\\\\\n      src={`devhub.near/widget/devhub.components.island.banner`}\\\\\\\\n      props={{\\\\\\\\n        title: (\\\\\\\\n          <>\\\\\\\\n            We are building <br />\\\\\\\\n            <span style={{ color: \\\\\\\\\\\\\\\"#151515\\\\\\\\\\\\\\\" }}>\\\\\\\\n              a decentralized community\\\\\\\\n            </span>{\\\\\\\\\\\\\\\" \\\\\\\\\\\\\\\"}\\\\\\\\n            <br />\\\\\\\\n            for NEAR Developers.\\\\\\\\n          </>\\\\\\\\n        ),\\\\\\\\n        imageLink:\\\\\\\\n          \\\\\\\\\\\\\\\"https://ipfs.near.social/ipfs/bafybeiap2mzwsly4apaldxguiunx4rjwqyadksj5yxuzwrww3kue3ao5qe\\\\\\\\\\\\\\\",\\\\\\\\n      }}\\\\\\\\n    />\\\\\\\\n    <Header>\\\\\\\\n      <PageHeader>/contribute</PageHeader>\\\\\\\\n    </Header>\\\\\\\\n    <Lead>\\\\\\\\n      There are many ways to start your contribution journey. You can:\\\\\\\\n    </Lead>\\\\\\\\n    <Container>\\\\\\\\n      <ActionContainer>\\\\\\\\n        {actions.map((action, index) => (\\\\\\\\n          <ActionCard action={action} index={index} />\\\\\\\\n        ))}\\\\\\\\n      </ActionContainer>\\\\\\\\n    </Container>\\\\\\\\n  </>\\\\\\\\n);\\\\\\\\n\"}, \"devhub.entity.post.List\": {\"\": \"// This component implementation was forked from [IndexFeed], but it does not fully implement lazy loading.\\\\\\\\n// While this component uses InfiniteScroll, it still loads the whole list of Post IDs in one view call.\\\\\\\\n// The contract will need to be extended with pagination support, yet, even in the current state the page loads much faster.\\\\\\\\n// [IndexFeed]: https://near.social/#/mob.near/widget/WidgetSource?src=mob.near/widget/IndexFeed\\\\\\\\n\\\\\\\\nconst { href } = VM.require(\\\\\\\\\\\\\\\"devhub.near/widget/core.lib.url\\\\\\\\\\\\\\\");\\\\\\\\n\\\\\\\\nhref || (href = () => {});\\\\\\\\n\\\\\\\\n/* INCLUDE: \\\\\\\\\\\\\\\"core/lib/draftstate\\\\\\\\\\\\\\\" */\\\\\\\\nconst DRAFT_STATE_STORAGE_KEY = \\\\\\\\\\\\\\\"POST_DRAFT_STATE\\\\\\\\\\\\\\\";\\\\\\\\nlet is_edit_or_add_post_transaction = false;\\\\\\\\nlet transaction_method_name;\\\\\\\\n\\\\\\\\nif (props.transactionHashes) {\\\\\\\\n  const transaction = fetch(\\\\\\\\\\\\\\\"https://rpc.mainnet.near.org\\\\\\\\\\\\\\\", {\\\\\\\\n    method: \\\\\\\\\\\\\\\"POST\\\\\\\\\\\\\\\",\\\\\\\\n    headers: {\\\\\\\\n      \\\\\\\\\\\\\\\"content-type\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"application/json\\\\\\\\\\\\\\\",\\\\\\\\n    },\\\\\\\\n    body: JSON.stringify({\\\\\\\\n      jsonrpc: \\\\\\\\\\\\\\\"2.0\\\\\\\\\\\\\\\",\\\\\\\\n      id: \\\\\\\\\\\\\\\"dontcare\\\\\\\\\\\\\\\",\\\\\\\\n      method: \\\\\\\\\\\\\\\"tx\\\\\\\\\\\\\\\",\\\\\\\\n      params: [props.transactionHashes, context.accountId],\\\\\\\\n    }),\\\\\\\\n  });\\\\\\\\n  transaction_method_name =\\\\\\\\n    transaction?.body?.result?.transaction?.actions[0].FunctionCall.method_name;\\\\\\\\n\\\\\\\\n  is_edit_or_add_post_transaction =\\\\\\\\n    transaction_method_name == \\\\\\\\\\\\\\\"add_post\\\\\\\\\\\\\\\" ||\\\\\\\\n    transaction_method_name == \\\\\\\\\\\\\\\"edit_post\\\\\\\\\\\\\\\";\\\\\\\\n\\\\\\\\n  if (is_edit_or_add_post_transaction) {\\\\\\\\n    Storage.privateSet(DRAFT_STATE_STORAGE_KEY, undefined);\\\\\\\\n  }\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst onDraftStateChange = (draftState) =>\\\\\\\\n  Storage.privateSet(DRAFT_STATE_STORAGE_KEY, JSON.stringify(draftState));\\\\\\\\nlet draftState;\\\\\\\\ntry {\\\\\\\\n  draftState = JSON.parse(Storage.privateGet(DRAFT_STATE_STORAGE_KEY));\\\\\\\\n} catch (e) {}\\\\\\\\n/* END_INCLUDE: \\\\\\\\\\\\\\\"core/lib/draftstate\\\\\\\\\\\\\\\" */\\\\\\\\n\\\\\\\\nconst QUERYAPI_ENDPOINT = `https://near-queryapi.api.pagoda.co/v1/graphql/`;\\\\\\\\n\\\\\\\\nconst queryName =\\\\\\\\n  props.queryName ?? `bo_near_devhub_v17_posts_with_latest_snapshot`;\\\\\\\\n\\\\\\\\nconst query = `query DevhubPostsQuery($limit: Int = 100, $offset: Int = 0, $where: ${queryName}_bool_exp = {}) {\\\\\\\\n    ${queryName}(\\\\\\\\n      limit: $limit\\\\\\\\n      offset: $offset\\\\\\\\n      order_by: {block_height: desc}\\\\\\\\n      where: $where\\\\\\\\n    ) {\\\\\\\\n      post_id\\\\\\\\n    }\\\\\\\\n  }\\\\\\\\n`;\\\\\\\\n\\\\\\\\nfunction fetchGraphQL(operationsDoc, operationName, variables) {\\\\\\\\n  return asyncFetch(QUERYAPI_ENDPOINT, {\\\\\\\\n    method: \\\\\\\\\\\\\\\"POST\\\\\\\\\\\\\\\",\\\\\\\\n    headers: { \\\\\\\\\\\\\\\"x-hasura-role\\\\\\\\\\\\\\\": `bo_near` },\\\\\\\\n    body: JSON.stringify({\\\\\\\\n      query: operationsDoc,\\\\\\\\n      variables: variables,\\\\\\\\n      operationName: operationName,\\\\\\\\n    }),\\\\\\\\n  });\\\\\\\\n}\\\\\\\\n\\\\\\\\nfunction searchConditionChanged() {\\\\\\\\n  return (\\\\\\\\n    props.author != state.author ||\\\\\\\\n    props.term != state.term ||\\\\\\\\n    props.tag != state.tag ||\\\\\\\\n    props.recency != state.recency\\\\\\\\n  );\\\\\\\\n}\\\\\\\\n\\\\\\\\nfunction updateSearchCondition() {\\\\\\\\n  State.update({\\\\\\\\n    author: props.author,\\\\\\\\n    term: props.term,\\\\\\\\n    tag: props.tag,\\\\\\\\n    recency: props.recency,\\\\\\\\n    loading: true,\\\\\\\\n  });\\\\\\\\n}\\\\\\\\n\\\\\\\\nfunction getPostIds() {\\\\\\\\n  if (searchConditionChanged()) {\\\\\\\\n    updateSearchCondition();\\\\\\\\n    return;\\\\\\\\n  }\\\\\\\\n  let where = {};\\\\\\\\n  let authorId = props.author;\\\\\\\\n  let label = props.tag;\\\\\\\\n  if (authorId) {\\\\\\\\n    where = { author_id: { _eq: authorId }, ...where };\\\\\\\\n  }\\\\\\\\n  if (props.term) {\\\\\\\\n    where = { description: { _ilike: `%${props.term}%` }, ...where };\\\\\\\\n  }\\\\\\\\n  if (label) {\\\\\\\\n    if (typeof label === \\\\\\\\\\\\\\\"string\\\\\\\\\\\\\\\") {\\\\\\\\n      // Handle a single label\\\\\\\\n      where = { labels: { _contains: label }, ...where };\\\\\\\\n    } else if (Array.isArray(label)) {\\\\\\\\n      // Handle an array of labels\\\\\\\\n      where = {\\\\\\\\n        labels: {\\\\\\\\n          _containsAny: label,\\\\\\\\n        },\\\\\\\\n        ...where,\\\\\\\\n      };\\\\\\\\n    }\\\\\\\\n  }\\\\\\\\n  if (!props.recency) {\\\\\\\\n    // show only top level posts\\\\\\\\n    where = { parent_id: { _is_null: true }, ...where };\\\\\\\\n  }\\\\\\\\n\\\\\\\\n  // Don\\\\\\\\\\\\'t show blog\\\\\\\\n  where = {\\\\\\\\n    _not: {\\\\\\\\n      labels: { _contains: \\\\\\\\\\\\\\\"blog\\\\\\\\\\\\\\\" },\\\\\\\\n      parent_id: { _is_null: true },\\\\\\\\n      post_type: { _eq: \\\\\\\\\\\\\\\"Comment\\\\\\\\\\\\\\\" },\\\\\\\\n    },\\\\\\\\n    ...where,\\\\\\\\n  };\\\\\\\\n\\\\\\\\n  console.log(\\\\\\\\\\\\\\\"searching for\\\\\\\\\\\\\\\", where);\\\\\\\\n  fetchGraphQL(query, \\\\\\\\\\\\\\\"DevhubPostsQuery\\\\\\\\\\\\\\\", {\\\\\\\\n    limit: 100,\\\\\\\\n    offset: 0,\\\\\\\\n    where,\\\\\\\\n  }).then((result) => {\\\\\\\\n    if (result.status === 200) {\\\\\\\\n      console.log(\\\\\\\\\\\\\\\"search success\\\\\\\\\\\\\\\");\\\\\\\\n      if (result.body.data) {\\\\\\\\n        const data = result.body.data[queryName];\\\\\\\\n        State.update({\\\\\\\\n          postIds: data.map((p) => p.post_id),\\\\\\\\n          loading: false,\\\\\\\\n        });\\\\\\\\n        console.log(\\\\\\\\\\\\\\\"found:\\\\\\\\\\\\\\\");\\\\\\\\n        console.log(data);\\\\\\\\n      }\\\\\\\\n    } else {\\\\\\\\n      console.error(\\\\\\\\\\\\\\\"error:\\\\\\\\\\\\\\\", result.body);\\\\\\\\n      State.update({ loading: false });\\\\\\\\n    }\\\\\\\\n  });\\\\\\\\n}\\\\\\\\n\\\\\\\\nState.init({\\\\\\\\n  period: \\\\\\\\\\\\\\\"week\\\\\\\\\\\\\\\",\\\\\\\\n});\\\\\\\\n\\\\\\\\ngetPostIds();\\\\\\\\n\\\\\\\\nfunction defaultRenderItem(postId, additionalProps) {\\\\\\\\n  if (!additionalProps) {\\\\\\\\n    additionalProps = {};\\\\\\\\n  }\\\\\\\\n  // It is important to have a non-zero-height element as otherwise InfiniteScroll loads too many items on initial load\\\\\\\\n  return (\\\\\\\\n    <div className=\\\\\\\\\\\\\\\"py-2\\\\\\\\\\\\\\\" style={{ minHeight: \\\\\\\\\\\\\\\"150px\\\\\\\\\\\\\\\" }}>\\\\\\\\n      <Widget\\\\\\\\n        src={\\\\\\\\\\\\\\\"devhub.near/widget/devhub.entity.post.Post\\\\\\\\\\\\\\\"}\\\\\\\\n        props={{\\\\\\\\n          id: postId,\\\\\\\\n          expandable: true,\\\\\\\\n          defaultExpanded: false,\\\\\\\\n          isInList: true,\\\\\\\\n          draftState,\\\\\\\\n          isPreview: false,\\\\\\\\n          onDraftStateChange,\\\\\\\\n          ...additionalProps,\\\\\\\\n          referral: postId,\\\\\\\\n        }}\\\\\\\\n      />\\\\\\\\n    </div>\\\\\\\\n  );\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst renderItem = props.renderItem ?? defaultRenderItem;\\\\\\\\n\\\\\\\\nconst cachedRenderItem = (item, i) => {\\\\\\\\n  if (props.term) {\\\\\\\\n    return renderItem(item, {\\\\\\\\n      searchKeywords: [props.term],\\\\\\\\n    });\\\\\\\\n  }\\\\\\\\n\\\\\\\\n  const key = JSON.stringify(item);\\\\\\\\n\\\\\\\\n  if (!(key in state.cachedItems)) {\\\\\\\\n    state.cachedItems[key] = renderItem(item);\\\\\\\\n    State.update();\\\\\\\\n  }\\\\\\\\n  return state.cachedItems[key];\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst initialRenderLimit = props.initialRenderLimit ?? 3;\\\\\\\\nconst addDisplayCount = props.nextLimit ?? initialRenderLimit;\\\\\\\\n\\\\\\\\nconst ONE_DAY = 60 * 60 * 24 * 1000;\\\\\\\\nconst ONE_WEEK = 60 * 60 * 24 * 1000 * 7;\\\\\\\\nconst ONE_MONTH = 60 * 60 * 24 * 1000 * 30;\\\\\\\\n\\\\\\\\nfunction getHotnessScore(post) {\\\\\\\\n  //post.id - shows the age of the post, should grow exponentially, since newer posts are more important\\\\\\\\n  //post.likes.length - linear value\\\\\\\\n  const age = Math.pow(post.id, 5);\\\\\\\\n  const comments = post.comments;\\\\\\\\n  const commentAge = comments.reduce((sum, age) => sum + Math.pow(age, 5), 0);\\\\\\\\n  const totalAge = age + commentAge;\\\\\\\\n  //use log functions to make likes score and exponentially big age score close to each other\\\\\\\\n  return Math.log10(post.likes.length) + Math.log(Math.log10(totalAge));\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst getPeriodText = (period) => {\\\\\\\\n  let text = \\\\\\\\\\\\\\\"Last 24 hours\\\\\\\\\\\\\\\";\\\\\\\\n  if (period === \\\\\\\\\\\\\\\"week\\\\\\\\\\\\\\\") {\\\\\\\\n    text = \\\\\\\\\\\\\\\"Last week\\\\\\\\\\\\\\\";\\\\\\\\n  }\\\\\\\\n  if (period === \\\\\\\\\\\\\\\"month\\\\\\\\\\\\\\\") {\\\\\\\\n    text = \\\\\\\\\\\\\\\"Last month\\\\\\\\\\\\\\\";\\\\\\\\n  }\\\\\\\\n  return text;\\\\\\\\n};\\\\\\\\n\\\\\\\\nlet postIds = state.postIds ?? null;\\\\\\\\n\\\\\\\\nconst loader = (\\\\\\\\n  <div className=\\\\\\\\\\\\\\\"loader\\\\\\\\\\\\\\\" key={\\\\\\\\\\\\\\\"loader\\\\\\\\\\\\\\\"}>\\\\\\\\n    <span\\\\\\\\n      className=\\\\\\\\\\\\\\\"spinner-grow spinner-grow-sm me-1\\\\\\\\\\\\\\\"\\\\\\\\n      role=\\\\\\\\\\\\\\\"status\\\\\\\\\\\\\\\"\\\\\\\\n      aria-hidden=\\\\\\\\\\\\\\\"true\\\\\\\\\\\\\\\"\\\\\\\\n    />\\\\\\\\n    Loading ...\\\\\\\\n  </div>\\\\\\\\n);\\\\\\\\n\\\\\\\\nif (postIds === null) {\\\\\\\\n  return loader;\\\\\\\\n}\\\\\\\\nconst initialItems = postIds;\\\\\\\\n//const initialItems = postIds.map(postId => ({ id: postId, ...Near.view(nearDevGovGigsContractAccountId, \\\\\\\\\\\\\\\"get_post\\\\\\\\\\\\\\\", { post_id: postId }) }));\\\\\\\\n\\\\\\\\n// const computeFetchFrom = (items, limit) => {\\\\\\\\n//   if (!items || items.length < limit) {\\\\\\\\n//     return false;\\\\\\\\n//   }\\\\\\\\n//   const blockHeight = items[items.length - 1].blockHeight;\\\\\\\\n//   return index.options.order === \\\\\\\\\\\\\\\"desc\\\\\\\\\\\\\\\" ? blockHeight - 1 : blockHeight + 1;\\\\\\\\n// };\\\\\\\\n\\\\\\\\n// const mergeItems = (newItems) => {\\\\\\\\n//   const items = [\\\\\\\\n//     ...new Set([...newItems, ...state.items].map((i) => JSON.stringify(i))),\\\\\\\\n//   ].map((i) => JSON.parse(i));\\\\\\\\n//   items.sort((a, b) => a.blockHeight - b.blockHeight);\\\\\\\\n//   if (index.options.order === \\\\\\\\\\\\\\\"desc\\\\\\\\\\\\\\\") {\\\\\\\\n//     items.reverse();\\\\\\\\n//   }\\\\\\\\n//   return items;\\\\\\\\n// };\\\\\\\\n\\\\\\\\nconst jInitialItems = JSON.stringify(initialItems);\\\\\\\\nif (state.jInitialItems !== jInitialItems) {\\\\\\\\n  // const jIndex = JSON.stringify(index);\\\\\\\\n  // if (jIndex !== state.jIndex) {\\\\\\\\n  State.update({\\\\\\\\n    jIndex,\\\\\\\\n    jInitialItems,\\\\\\\\n    items: initialItems,\\\\\\\\n    fetchFrom: false,\\\\\\\\n    //nextFetchFrom: computeFetchFrom(initialItems, index.options.limit),\\\\\\\\n    nextFetchFrom: false,\\\\\\\\n    displayCount: initialRenderLimit,\\\\\\\\n    cachedItems: {},\\\\\\\\n  });\\\\\\\\n  // } else {\\\\\\\\n  //   State.update({\\\\\\\\n  //     jInitialItems,\\\\\\\\n  //     items: mergeItems(initialItems),\\\\\\\\n  //   });\\\\\\\\n  // }\\\\\\\\n}\\\\\\\\n\\\\\\\\nif (state.fetchFrom) {\\\\\\\\n  // TODO: fetchFrom\\\\\\\\n  // const limit = addDisplayCount;\\\\\\\\n  // const newItems = Social.index(\\\\\\\\n  //   index.action,\\\\\\\\n  //   index.key,\\\\\\\\n  //   Object.assign({}, index.options, {\\\\\\\\n  //     from: state.fetchFrom,\\\\\\\\n  //     subscribe: undefined,\\\\\\\\n  //     limit,\\\\\\\\n  //   })\\\\\\\\n  // );\\\\\\\\n  // if (newItems !== null) {\\\\\\\\n  //   State.update({\\\\\\\\n  //     items: mergeItems(newItems),\\\\\\\\n  //     fetchFrom: false,\\\\\\\\n  //     nextFetchFrom: computeFetchFrom(newItems, limit),\\\\\\\\n  //   });\\\\\\\\n  // }\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst makeMoreItems = () => {\\\\\\\\n  State.update({\\\\\\\\n    displayCount: state.displayCount + addDisplayCount,\\\\\\\\n  });\\\\\\\\n  if (\\\\\\\\n    state.items.length - state.displayCount < addDisplayCount * 2 &&\\\\\\\\n    !state.fetchFrom &&\\\\\\\\n    state.nextFetchFrom &&\\\\\\\\n    state.nextFetchFrom !== state.fetchFrom\\\\\\\\n  ) {\\\\\\\\n    State.update({\\\\\\\\n      fetchFrom: state.nextFetchFrom,\\\\\\\\n    });\\\\\\\\n  }\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst fetchMore =\\\\\\\\n  props.manual &&\\\\\\\\n  (state.fetchFrom && state.items.length < state.displayCount\\\\\\\\n    ? loader\\\\\\\\n    : state.displayCount < state.items.length && (\\\\\\\\n        <div key={\\\\\\\\\\\\\\\"loader more\\\\\\\\\\\\\\\"}>\\\\\\\\n          <a href=\\\\\\\\\\\\\\\"javascript:void\\\\\\\\\\\\\\\" onClick={(e) => makeMoreItems()}>\\\\\\\\n            {props.loadMoreText ?? \\\\\\\\\\\\\\\"Load more...\\\\\\\\\\\\\\\"}\\\\\\\\n          </a>\\\\\\\\n        </div>\\\\\\\\n      ));\\\\\\\\n\\\\\\\\nconst items = state.items ? state.items.slice(0, state.displayCount) : [];\\\\\\\\n\\\\\\\\nconst renderedItems = items.map(cachedRenderItem);\\\\\\\\n\\\\\\\\nconst Head =\\\\\\\\n  props.recency == \\\\\\\\\\\\\\\"hot\\\\\\\\\\\\\\\" ? (\\\\\\\\n    <div class=\\\\\\\\\\\\\\\"row\\\\\\\\\\\\\\\">\\\\\\\\n      <div class=\\\\\\\\\\\\\\\"fs-5 col-6 align-self-center\\\\\\\\\\\\\\\">\\\\\\\\n        <i class=\\\\\\\\\\\\\\\"bi-fire\\\\\\\\\\\\\\\"></i>\\\\\\\\n        <span>Hottest Posts</span>\\\\\\\\n      </div>\\\\\\\\n      <div class=\\\\\\\\\\\\\\\"col-6 dropdown d-flex justify-content-end\\\\\\\\\\\\\\\">\\\\\\\\n        <a\\\\\\\\n          class=\\\\\\\\\\\\\\\"btn btn-secondary dropdown-toggle\\\\\\\\\\\\\\\"\\\\\\\\n          href=\\\\\\\\\\\\\\\"#\\\\\\\\\\\\\\\"\\\\\\\\n          role=\\\\\\\\\\\\\\\"button\\\\\\\\\\\\\\\"\\\\\\\\n          id=\\\\\\\\\\\\\\\"dropdownMenuLink\\\\\\\\\\\\\\\"\\\\\\\\n          data-bs-toggle=\\\\\\\\\\\\\\\"dropdown\\\\\\\\\\\\\\\"\\\\\\\\n          aria-expanded=\\\\\\\\\\\\\\\"false\\\\\\\\\\\\\\\"\\\\\\\\n        >\\\\\\\\n          {getPeriodText(state.period)}\\\\\\\\n        </a>\\\\\\\\n\\\\\\\\n        <ul class=\\\\\\\\\\\\\\\"dropdown-menu\\\\\\\\\\\\\\\" aria-labelledby=\\\\\\\\\\\\\\\"dropdownMenuLink\\\\\\\\\\\\\\\">\\\\\\\\n          <li>\\\\\\\\n            <button\\\\\\\\n              class=\\\\\\\\\\\\\\\"dropdown-item\\\\\\\\\\\\\\\"\\\\\\\\n              onClick={() => {\\\\\\\\n                State.update({ period: \\\\\\\\\\\\\\\"day\\\\\\\\\\\\\\\" });\\\\\\\\n              }}\\\\\\\\n            >\\\\\\\\n              {getPeriodText(\\\\\\\\\\\\\\\"day\\\\\\\\\\\\\\\")}\\\\\\\\n            </button>\\\\\\\\n          </li>\\\\\\\\n          <li>\\\\\\\\n            <button\\\\\\\\n              class=\\\\\\\\\\\\\\\"dropdown-item\\\\\\\\\\\\\\\"\\\\\\\\n              onClick={() => {\\\\\\\\n                State.update({ period: \\\\\\\\\\\\\\\"week\\\\\\\\\\\\\\\" });\\\\\\\\n              }}\\\\\\\\n            >\\\\\\\\n              {getPeriodText(\\\\\\\\\\\\\\\"week\\\\\\\\\\\\\\\")}\\\\\\\\n            </button>\\\\\\\\n          </li>\\\\\\\\n          <li>\\\\\\\\n            <button\\\\\\\\n              class=\\\\\\\\\\\\\\\"dropdown-item\\\\\\\\\\\\\\\"\\\\\\\\n              onClick={() => {\\\\\\\\n                State.update({ period: \\\\\\\\\\\\\\\"month\\\\\\\\\\\\\\\" });\\\\\\\\n              }}\\\\\\\\n            >\\\\\\\\n              {getPeriodText(\\\\\\\\\\\\\\\"month\\\\\\\\\\\\\\\")}\\\\\\\\n            </button>\\\\\\\\n          </li>\\\\\\\\n        </ul>\\\\\\\\n      </div>\\\\\\\\n    </div>\\\\\\\\n  ) : (\\\\\\\\n    <></>\\\\\\\\n  );\\\\\\\\n\\\\\\\\nreturn (\\\\\\\\n  <>\\\\\\\\n    {Head}\\\\\\\\n    {state.loading ? loader : null}\\\\\\\\n    {is_edit_or_add_post_transaction ? (\\\\\\\\n      <p class=\\\\\\\\\\\\\\\"text-secondary mt-4\\\\\\\\\\\\\\\">\\\\\\\\n        Post {transaction_method_name == \\\\\\\\\\\\\\\"edit_post\\\\\\\\\\\\\\\" ? \\\\\\\\\\\\\\\"edited\\\\\\\\\\\\\\\" : \\\\\\\\\\\\\\\"added\\\\\\\\\\\\\\\"}{\\\\\\\\\\\\\\\" \\\\\\\\\\\\\\\"}\\\\\\\\n        successfully. Back to{\\\\\\\\\\\\\\\" \\\\\\\\\\\\\\\"}\\\\\\\\n        <Link\\\\\\\\n          style={{\\\\\\\\n            color: \\\\\\\\\\\\\\\"#3252A6\\\\\\\\\\\\\\\",\\\\\\\\n          }}\\\\\\\\n          className=\\\\\\\\\\\\\\\"fw-bold\\\\\\\\\\\\\\\"\\\\\\\\n          to={href({\\\\\\\\n            widgetSrc: \\\\\\\\\\\\\\\"devhub.near/widget/app\\\\\\\\\\\\\\\",\\\\\\\\n            params: { page: \\\\\\\\\\\\\\\"feed\\\\\\\\\\\\\\\" },\\\\\\\\n          })}\\\\\\\\n        >\\\\\\\\n          feed\\\\\\\\n        </Link>\\\\\\\\n      </p>\\\\\\\\n    ) : state.items.length > 0 ? (\\\\\\\\n      <InfiniteScroll\\\\\\\\n        pageStart={0}\\\\\\\\n        loadMore={makeMoreItems}\\\\\\\\n        hasMore={state.displayCount < state.items.length}\\\\\\\\n        loader={loader}\\\\\\\\n      >\\\\\\\\n        {renderedItems}\\\\\\\\n      </InfiniteScroll>\\\\\\\\n    ) : (\\\\\\\\n      <p class=\\\\\\\\\\\\\\\"text-secondary\\\\\\\\\\\\\\\">\\\\\\\\n        No posts{\\\\\\\\\\\\\\\" \\\\\\\\\\\\\\\"}\\\\\\\\n        {props.term || props.tag || props.author ? \\\\\\\\\\\\\\\"matches search\\\\\\\\\\\\\\\" : \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\"}\\\\\\\\n        {props.recency === \\\\\\\\\\\\\\\"hot\\\\\\\\\\\\\\\"\\\\\\\\n          ? \\\\\\\\\\\\\\\" in \\\\\\\\\\\\\\\" + getPeriodText(state.period).toLowerCase()\\\\\\\\n          : \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\"}\\\\\\\\n      </p>\\\\\\\\n    )}\\\\\\\\n  </>\\\\\\\\n);\\\\\\\\n\"}, \"devhub.entity.post.Post\": {\"\": \"// Ideally, this would be a page\\\\\\\\n\\\\\\\\nconst { href } = VM.require(\\\\\\\\\\\\\\\"devhub.near/widget/core.lib.url\\\\\\\\\\\\\\\");\\\\\\\\n\\\\\\\\nhref || (href = () => {});\\\\\\\\n\\\\\\\\nconst ButtonWithHover = styled.button`\\\\\\\\n  background-color: #fff;\\\\\\\\n  &:hover {\\\\\\\\n    background-color: #e9ecef;\\\\\\\\n    color: #000;\\\\\\\\n  }\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst postId = props.post.id ?? (props.id ? parseInt(props.id) : 0);\\\\\\\\nconst post =\\\\\\\\n  props.post ??\\\\\\\\n  Near.view(\\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"get_post\\\\\\\\\\\\\\\", { post_id: postId });\\\\\\\\nif (!post) {\\\\\\\\n  return <div>Loading ...</div>;\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst referral = props.referral;\\\\\\\\nconst currentTimestamp = props.timestamp ?? post.snapshot.timestamp;\\\\\\\\nconst compareTimestamp = props.compareTimestamp ?? \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\";\\\\\\\\nconst swapTimestamps = currentTimestamp < compareTimestamp;\\\\\\\\n\\\\\\\\nconst snapshotHistory = post.snapshot_history;\\\\\\\\nconst snapshot =\\\\\\\\n  currentTimestamp === post.snapshot.timestamp\\\\\\\\n    ? post.snapshot\\\\\\\\n    : (snapshotHistory &&\\\\\\\\n        snapshotHistory.find((s) => s.timestamp === currentTimestamp)) ??\\\\\\\\n      null;\\\\\\\\nconst compareSnapshot =\\\\\\\\n  compareTimestamp === post.snapshot.timestamp\\\\\\\\n    ? post.snapshot\\\\\\\\n    : (snapshotHistory &&\\\\\\\\n        snapshotHistory.find((s) => s.timestamp === compareTimestamp)) ??\\\\\\\\n      null;\\\\\\\\n\\\\\\\\n// If this post is displayed under another post. Used to limit the size.\\\\\\\\nconst isUnderPost = props.isUnderPost ? true : false;\\\\\\\\nconst parentId = Near.view(\\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"get_parent_id\\\\\\\\\\\\\\\", {\\\\\\\\n  post_id: postId,\\\\\\\\n});\\\\\\\\n\\\\\\\\nconst childPostIdsUnordered =\\\\\\\\n  Near.view(\\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"get_children_ids\\\\\\\\\\\\\\\", {\\\\\\\\n    post_id: postId,\\\\\\\\n  }) ?? [];\\\\\\\\n\\\\\\\\nconst childPostIds = props.isPreview ? [] : childPostIdsUnordered.reverse();\\\\\\\\nconst expandable = props.isPreview ? false : props.expandable ?? false;\\\\\\\\nconst defaultExpanded = expandable ? props.defaultExpanded : true;\\\\\\\\n\\\\\\\\nconst draftState = props.draftState;\\\\\\\\n\\\\\\\\nfunction readableDate(timestamp) {\\\\\\\\n  var a = new Date(timestamp);\\\\\\\\n  return a.toDateString() + \\\\\\\\\\\\\\\" \\\\\\\\\\\\\\\" + a.toLocaleTimeString();\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst timestamp = readableDate(\\\\\\\\n  snapshot.timestamp ? snapshot.timestamp / 1000000 : Date.now()\\\\\\\\n);\\\\\\\\n\\\\\\\\nconst postSearchKeywords = props.searchKeywords ? (\\\\\\\\n  <div style={{ \\\\\\\\\\\\\\\"font-family\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"monospace\\\\\\\\\\\\\\\" }} key=\\\\\\\\\\\\\\\"post-search-keywords\\\\\\\\\\\\\\\">\\\\\\\\n    <span>Found keywords: </span>\\\\\\\\n    {props.searchKeywords.map((tag) => (\\\\\\\\n      <Widget\\\\\\\\n        src={\\\\\\\\\\\\\\\"devhub.near/widget/devhub.components.atom.Tag\\\\\\\\\\\\\\\"}\\\\\\\\n        props={{ linkTo: \\\\\\\\\\\\\\\"Feed\\\\\\\\\\\\\\\", tag }}\\\\\\\\n      />\\\\\\\\n    ))}\\\\\\\\n  </div>\\\\\\\\n) : (\\\\\\\\n  <div key=\\\\\\\\\\\\\\\"post-search-keywords\\\\\\\\\\\\\\\"></div>\\\\\\\\n);\\\\\\\\n\\\\\\\\nconst searchKeywords = props.searchKeywords ? (\\\\\\\\n  <div class=\\\\\\\\\\\\\\\"mb-4\\\\\\\\\\\\\\\" key=\\\\\\\\\\\\\\\"search-keywords\\\\\\\\\\\\\\\">\\\\\\\\n    <small class=\\\\\\\\\\\\\\\"text-muted\\\\\\\\\\\\\\\">{postSearchKeywords}</small>\\\\\\\\n  </div>\\\\\\\\n) : (\\\\\\\\n  <div key=\\\\\\\\\\\\\\\"search-keywords\\\\\\\\\\\\\\\"></div>\\\\\\\\n);\\\\\\\\n\\\\\\\\nconst allowedToEdit =\\\\\\\\n  !props.isPreview &&\\\\\\\\n  Near.view(\\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"is_allowed_to_edit\\\\\\\\\\\\\\\", {\\\\\\\\n    post_id: postId,\\\\\\\\n    editor: context.accountId,\\\\\\\\n  });\\\\\\\\n\\\\\\\\nconst btnEditorWidget = (postType, name) => {\\\\\\\\n  return (\\\\\\\\n    <li>\\\\\\\\n      <a\\\\\\\\n        class=\\\\\\\\\\\\\\\"dropdown-item\\\\\\\\\\\\\\\"\\\\\\\\n        role=\\\\\\\\\\\\\\\"button\\\\\\\\\\\\\\\"\\\\\\\\n        onClick={() =>\\\\\\\\n          State.update({ postType, editorType: \\\\\\\\\\\\\\\"EDIT\\\\\\\\\\\\\\\", showEditor: true })\\\\\\\\n        }\\\\\\\\n      >\\\\\\\\n        {name}\\\\\\\\n      </a>\\\\\\\\n    </li>\\\\\\\\n  );\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst editControl = allowedToEdit ? (\\\\\\\\n  <div class=\\\\\\\\\\\\\\\"btn-group\\\\\\\\\\\\\\\" role=\\\\\\\\\\\\\\\"group\\\\\\\\\\\\\\\">\\\\\\\\n    <a\\\\\\\\n      class=\\\\\\\\\\\\\\\"card-link px-2\\\\\\\\\\\\\\\"\\\\\\\\n      role=\\\\\\\\\\\\\\\"button\\\\\\\\\\\\\\\"\\\\\\\\n      title=\\\\\\\\\\\\\\\"Edit post\\\\\\\\\\\\\\\"\\\\\\\\n      data-bs-toggle=\\\\\\\\\\\\\\\"dropdown\\\\\\\\\\\\\\\"\\\\\\\\n      aria-expanded=\\\\\\\\\\\\\\\"false\\\\\\\\\\\\\\\"\\\\\\\\n      type=\\\\\\\\\\\\\\\"button\\\\\\\\\\\\\\\"\\\\\\\\n    >\\\\\\\\n      <div class=\\\\\\\\\\\\\\\"bi bi-pencil-square\\\\\\\\\\\\\\\"></div>\\\\\\\\n    </a>\\\\\\\\n    <ul class=\\\\\\\\\\\\\\\"dropdown-menu\\\\\\\\\\\\\\\">\\\\\\\\n      {btnEditorWidget(\\\\\\\\\\\\\\\"Idea\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"Edit as an idea\\\\\\\\\\\\\\\")}\\\\\\\\n      {btnEditorWidget(\\\\\\\\\\\\\\\"Solution\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"Edit as a solution\\\\\\\\\\\\\\\")}\\\\\\\\n      {btnEditorWidget(\\\\\\\\\\\\\\\"Attestation\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"Edit as an attestation\\\\\\\\\\\\\\\")}\\\\\\\\n      {btnEditorWidget(\\\\\\\\\\\\\\\"Sponsorship\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"Edit as a sponsorship\\\\\\\\\\\\\\\")}\\\\\\\\n      {btnEditorWidget(\\\\\\\\\\\\\\\"Comment\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"Edit as a comment\\\\\\\\\\\\\\\")}\\\\\\\\n    </ul>\\\\\\\\n  </div>\\\\\\\\n) : (\\\\\\\\n  <div></div>\\\\\\\\n);\\\\\\\\n\\\\\\\\nconst shareButton = props.isPreview ? (\\\\\\\\n  <div></div>\\\\\\\\n) : (\\\\\\\\n  <Link\\\\\\\\n    class=\\\\\\\\\\\\\\\"card-link text-dark\\\\\\\\\\\\\\\"\\\\\\\\n    to={href({\\\\\\\\n      gateway: \\\\\\\\\\\\\\\"near.org\\\\\\\\\\\\\\\",\\\\\\\\n      widgetSrc: \\\\\\\\\\\\\\\"devhub.near/widget/app\\\\\\\\\\\\\\\",\\\\\\\\n      params: { page: \\\\\\\\\\\\\\\"post\\\\\\\\\\\\\\\", id: postId },\\\\\\\\n    })}\\\\\\\\n    role=\\\\\\\\\\\\\\\"button\\\\\\\\\\\\\\\"\\\\\\\\n    target=\\\\\\\\\\\\\\\"_blank\\\\\\\\\\\\\\\"\\\\\\\\n    title=\\\\\\\\\\\\\\\"Open in new tab\\\\\\\\\\\\\\\"\\\\\\\\n  >\\\\\\\\n    <div class=\\\\\\\\\\\\\\\"bi bi-share\\\\\\\\\\\\\\\"></div>\\\\\\\\n  </Link>\\\\\\\\n);\\\\\\\\n\\\\\\\\nconst ProfileCardContainer = styled.div`\\\\\\\\n  @media screen and (max-width: 960px) {\\\\\\\\n    width: 100%;\\\\\\\\n  }\\\\\\\\n`;\\\\\\\\n\\\\\\\\n// card-header\\\\\\\\nconst header = (\\\\\\\\n  <div key=\\\\\\\\\\\\\\\"header\\\\\\\\\\\\\\\">\\\\\\\\n    <small class=\\\\\\\\\\\\\\\"text-muted\\\\\\\\\\\\\\\">\\\\\\\\n      <div class=\\\\\\\\\\\\\\\"row justify-content-between\\\\\\\\\\\\\\\">\\\\\\\\n        <div class=\\\\\\\\\\\\\\\"d-flex align-items-center flex-wrap\\\\\\\\\\\\\\\">\\\\\\\\n          <ProfileCardContainer>\\\\\\\\n            <Widget\\\\\\\\n              src={\\\\\\\\n                \\\\\\\\\\\\\\\"devhub.near/widget/devhub.components.molecule.ProfileCard\\\\\\\\\\\\\\\"\\\\\\\\n              }\\\\\\\\n              props={{\\\\\\\\n                accountId: post.author_id,\\\\\\\\n                nearDevGovGigsWidgetsAccountId: \\\\\\\\\\\\\\\"devhub.near\\\\\\\\\\\\\\\",\\\\\\\\n              }}\\\\\\\\n            />\\\\\\\\n          </ProfileCardContainer>\\\\\\\\n          <div class=\\\\\\\\\\\\\\\"d-flex ms-auto\\\\\\\\\\\\\\\">\\\\\\\\n            {editControl}\\\\\\\\n            {timestamp}\\\\\\\\n            <Widget\\\\\\\\n              src={\\\\\\\\\\\\\\\"devhub.near/widget/devhub.entity.post.History\\\\\\\\\\\\\\\"}\\\\\\\\n              props={{\\\\\\\\n                post,\\\\\\\\n                timestamp: currentTimestamp,\\\\\\\\n              }}\\\\\\\\n            />\\\\\\\\n            {shareButton}\\\\\\\\n          </div>\\\\\\\\n        </div>\\\\\\\\n      </div>\\\\\\\\n    </small>\\\\\\\\n  </div>\\\\\\\\n);\\\\\\\\n\\\\\\\\n// const emptyIcons = {\\\\\\\\n//   Idea: \\\\\\\\\\\\\\\"bi-lightbulb\\\\\\\\\\\\\\\",\\\\\\\\n//   Comment: \\\\\\\\\\\\\\\"bi-chat\\\\\\\\\\\\\\\",\\\\\\\\n//   Solution: \\\\\\\\\\\\\\\"bi-rocket\\\\\\\\\\\\\\\",\\\\\\\\n//   Attestation: \\\\\\\\\\\\\\\"bi-check-circle\\\\\\\\\\\\\\\",\\\\\\\\n//   Sponsorship: \\\\\\\\\\\\\\\"bi-cash-coin\\\\\\\\\\\\\\\",\\\\\\\\n//   Github: \\\\\\\\\\\\\\\"bi-github\\\\\\\\\\\\\\\",\\\\\\\\n//   Like: \\\\\\\\\\\\\\\"bi-heart\\\\\\\\\\\\\\\",\\\\\\\\n//   Reply: \\\\\\\\\\\\\\\"bi-reply\\\\\\\\\\\\\\\",\\\\\\\\n// };\\\\\\\\n\\\\\\\\nconst emptyIcons = {\\\\\\\\n  Idea: \\\\\\\\\\\\\\\"\\\\\\\\u{1f4a1}\\\\\\\\\\\\\\\",\\\\\\\\n  Comment: \\\\\\\\\\\\\\\"bi-chat\\\\\\\\\\\\\\\",\\\\\\\\n  Solution: \\\\\\\\\\\\\\\"\\\\\\\\u{1f680}\\\\\\\\\\\\\\\",\\\\\\\\n  Attestation: \\\\\\\\\\\\\\\"\\\\\\\\u{2705}\\\\\\\\\\\\\\\",\\\\\\\\n  Sponsorship: \\\\\\\\\\\\\\\"\\\\\\\\u{1fa99}\\\\\\\\\\\\\\\",\\\\\\\\n  Github: \\\\\\\\\\\\\\\"bi-github\\\\\\\\\\\\\\\",\\\\\\\\n  Like: \\\\\\\\\\\\\\\"bi-heart\\\\\\\\\\\\\\\",\\\\\\\\n  Reply: \\\\\\\\\\\\\\\"bi-reply\\\\\\\\\\\\\\\",\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst fillIcons = {\\\\\\\\n  Idea: \\\\\\\\\\\\\\\"\\\\\\\\u{1f4a1}\\\\\\\\\\\\\\\",\\\\\\\\n  Comment: \\\\\\\\\\\\\\\"bi-chat-fill\\\\\\\\\\\\\\\",\\\\\\\\n  Solution: \\\\\\\\\\\\\\\"\\\\\\\\u{1f680}\\\\\\\\\\\\\\\",\\\\\\\\n  Attestation: \\\\\\\\\\\\\\\"\\\\\\\\u{2705}\\\\\\\\\\\\\\\",\\\\\\\\n  Sponsorship: \\\\\\\\\\\\\\\"\\\\\\\\u{1fa99}\\\\\\\\\\\\\\\",\\\\\\\\n  Github: \\\\\\\\\\\\\\\"bi-github\\\\\\\\\\\\\\\",\\\\\\\\n  Like: \\\\\\\\\\\\\\\"bi-heart-fill\\\\\\\\\\\\\\\",\\\\\\\\n  Reply: \\\\\\\\\\\\\\\"bi-reply-fill\\\\\\\\\\\\\\\",\\\\\\\\n};\\\\\\\\n\\\\\\\\n// Trigger saving this widget.\\\\\\\\n\\\\\\\\nconst borders = {\\\\\\\\n  Idea: \\\\\\\\\\\\\\\"border-light\\\\\\\\\\\\\\\",\\\\\\\\n  Comment: \\\\\\\\\\\\\\\"border-light\\\\\\\\\\\\\\\",\\\\\\\\n  Solution: \\\\\\\\\\\\\\\"border-light\\\\\\\\\\\\\\\",\\\\\\\\n  Attestation: \\\\\\\\\\\\\\\"border-light\\\\\\\\\\\\\\\",\\\\\\\\n  Sponsorship: \\\\\\\\\\\\\\\"border-light\\\\\\\\\\\\\\\",\\\\\\\\n  Github: \\\\\\\\\\\\\\\"border-light\\\\\\\\\\\\\\\",\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst containsLike = props.isPreview\\\\\\\\n  ? false\\\\\\\\n  : post.likes.find((l) => l.author_id == context.accountId);\\\\\\\\nconst likeBtnClass = containsLike ? fillIcons.Like : emptyIcons.Like;\\\\\\\\n// This must be outside onLike, because Near.view returns null at first, and when the view call finished, it returns true/false.\\\\\\\\n// If checking this inside onLike, it will give `null` and we cannot tell the result is true or false.\\\\\\\\nlet grantNotify = Near.view(\\\\\\\\\\\\\\\"social.near\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"is_write_permission_granted\\\\\\\\\\\\\\\", {\\\\\\\\n  predecessor_id: \\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\",\\\\\\\\n  key: context.accountId + \\\\\\\\\\\\\\\"/index/notify\\\\\\\\\\\\\\\",\\\\\\\\n});\\\\\\\\nif (grantNotify === null) {\\\\\\\\n  return;\\\\\\\\n}\\\\\\\\nconst onLike = () => {\\\\\\\\n  if (!context.accountId) {\\\\\\\\n    return;\\\\\\\\n  }\\\\\\\\n  let likeTxn = [\\\\\\\\n    {\\\\\\\\n      contractName: \\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\",\\\\\\\\n      methodName: \\\\\\\\\\\\\\\"add_like\\\\\\\\\\\\\\\",\\\\\\\\n      args: {\\\\\\\\n        post_id: postId,\\\\\\\\n      },\\\\\\\\n      deposit: Big(10).pow(21).mul(2),\\\\\\\\n      gas: Big(10).pow(12).mul(100),\\\\\\\\n    },\\\\\\\\n  ];\\\\\\\\n\\\\\\\\n  if (grantNotify === false) {\\\\\\\\n    likeTxn.unshift({\\\\\\\\n      contractName: \\\\\\\\\\\\\\\"social.near\\\\\\\\\\\\\\\",\\\\\\\\n      methodName: \\\\\\\\\\\\\\\"grant_write_permission\\\\\\\\\\\\\\\",\\\\\\\\n      args: {\\\\\\\\n        predecessor_id: \\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\",\\\\\\\\n        keys: [context.accountId + \\\\\\\\\\\\\\\"/index/notify\\\\\\\\\\\\\\\"],\\\\\\\\n      },\\\\\\\\n      deposit: Big(10).pow(23),\\\\\\\\n      gas: Big(10).pow(12).mul(30),\\\\\\\\n    });\\\\\\\\n  }\\\\\\\\n  Near.call(likeTxn);\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst btnCreatorWidget = (postType, icon, name, desc) => {\\\\\\\\n  return (\\\\\\\\n    <li class=\\\\\\\\\\\\\\\"py-1\\\\\\\\\\\\\\\">\\\\\\\\n      <a\\\\\\\\n        class=\\\\\\\\\\\\\\\"dropdown-item text-decoration-none d-flex align-items-center lh-sm\\\\\\\\\\\\\\\"\\\\\\\\n        style={{ color: \\\\\\\\\\\\\\\"rgb(55,109,137)\\\\\\\\\\\\\\\" }}\\\\\\\\n        role=\\\\\\\\\\\\\\\"button\\\\\\\\\\\\\\\"\\\\\\\\n        onClick={() =>\\\\\\\\n          State.update({ postType, editorType: \\\\\\\\\\\\\\\"CREATE\\\\\\\\\\\\\\\", showEditor: true })\\\\\\\\n        }\\\\\\\\n      >\\\\\\\\n        <i class={`bi ${icon}`} style={{ fontSize: \\\\\\\\\\\\\\\"1.5rem\\\\\\\\\\\\\\\" }}>\\\\\\\\n          {\\\\\\\\\\\\\\\" \\\\\\\\\\\\\\\"}\\\\\\\\n        </i>\\\\\\\\n        <div class=\\\\\\\\\\\\\\\"ps-2 text-wrap\\\\\\\\\\\\\\\" style={{ width: \\\\\\\\\\\\\\\"18rem\\\\\\\\\\\\\\\" }}>\\\\\\\\n          <div>{name}</div>\\\\\\\\n          <small class=\\\\\\\\\\\\\\\"fw-light text-secondary\\\\\\\\\\\\\\\">{desc}</small>\\\\\\\\n        </div>\\\\\\\\n      </a>\\\\\\\\n    </li>\\\\\\\\n  );\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst FooterButtonsContianer = styled.div`\\\\\\\\n  width: 66.66666667%;\\\\\\\\n\\\\\\\\n  @media screen and (max-width: 960px) {\\\\\\\\n    width: 100%;\\\\\\\\n  }\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst buttonsFooter = props.isPreview ? null : (\\\\\\\\n  <div class=\\\\\\\\\\\\\\\"row\\\\\\\\\\\\\\\" key=\\\\\\\\\\\\\\\"buttons-footer\\\\\\\\\\\\\\\">\\\\\\\\n    <FooterButtonsContianer>\\\\\\\\n      <div class=\\\\\\\\\\\\\\\"btn-group\\\\\\\\\\\\\\\" role=\\\\\\\\\\\\\\\"group\\\\\\\\\\\\\\\" aria-label=\\\\\\\\\\\\\\\"Basic outlined example\\\\\\\\\\\\\\\">\\\\\\\\n        <ButtonWithHover\\\\\\\\n          type=\\\\\\\\\\\\\\\"button\\\\\\\\\\\\\\\"\\\\\\\\n          class=\\\\\\\\\\\\\\\"btn d-flex align-items-center\\\\\\\\\\\\\\\"\\\\\\\\n          style={{ border: \\\\\\\\\\\\\\\"0px\\\\\\\\\\\\\\\" }}\\\\\\\\n          onClick={onLike}\\\\\\\\n        >\\\\\\\\n          <i class={`bi ${likeBtnClass}`}> </i>\\\\\\\\n          {post.likes.length == 0 ? (\\\\\\\\n            \\\\\\\\\\\\\\\"Like\\\\\\\\\\\\\\\"\\\\\\\\n          ) : (\\\\\\\\n            <Widget\\\\\\\\n              // TODO: LEGACY.\\\\\\\\n              src=\\\\\\\\\\\\\\\"devhub.near/widget/gigs-board.components.layout.LikeButton.Faces\\\\\\\\\\\\\\\"\\\\\\\\n              props={{\\\\\\\\n                likesByUsers: Object.fromEntries(\\\\\\\\n                  post.likes.map(({ author_id }) => [author_id, \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\"])\\\\\\\\n                ),\\\\\\\\n              }}\\\\\\\\n            />\\\\\\\\n          )}\\\\\\\\n        </ButtonWithHover>\\\\\\\\n        <div class=\\\\\\\\\\\\\\\"btn-group\\\\\\\\\\\\\\\" role=\\\\\\\\\\\\\\\"group\\\\\\\\\\\\\\\">\\\\\\\\n          <ButtonWithHover\\\\\\\\n            type=\\\\\\\\\\\\\\\"button\\\\\\\\\\\\\\\"\\\\\\\\n            class=\\\\\\\\\\\\\\\"btn\\\\\\\\\\\\\\\"\\\\\\\\n            style={{ border: \\\\\\\\\\\\\\\"0px\\\\\\\\\\\\\\\" }}\\\\\\\\n            data-bs-toggle=\\\\\\\\\\\\\\\"dropdown\\\\\\\\\\\\\\\"\\\\\\\\n            aria-expanded=\\\\\\\\\\\\\\\"false\\\\\\\\\\\\\\\"\\\\\\\\n          >\\\\\\\\n            \\\\\\\\u{21aa} Reply\\\\\\\\n          </ButtonWithHover>\\\\\\\\n          <ul class=\\\\\\\\\\\\\\\"dropdown-menu\\\\\\\\\\\\\\\">\\\\\\\\n            {btnCreatorWidget(\\\\\\\\n              \\\\\\\\\\\\\\\"Idea\\\\\\\\\\\\\\\",\\\\\\\\n              emptyIcons.Idea,\\\\\\\\n              \\\\\\\\\\\\\\\"Idea\\\\\\\\\\\\\\\",\\\\\\\\n              \\\\\\\\\\\\\\\"Get feedback from the community about a problem, opportunity, or need.\\\\\\\\\\\\\\\"\\\\\\\\n            )}\\\\\\\\n            {btnCreatorWidget(\\\\\\\\n              \\\\\\\\\\\\\\\"Solution\\\\\\\\\\\\\\\",\\\\\\\\n              emptyIcons.Solution,\\\\\\\\n              \\\\\\\\\\\\\\\"Solution\\\\\\\\\\\\\\\",\\\\\\\\n              \\\\\\\\\\\\\\\"Provide a specific proposal or implementation to an idea, optionally requesting funding.\\\\\\\\\\\\\\\"\\\\\\\\n            )}\\\\\\\\n            {btnCreatorWidget(\\\\\\\\n              \\\\\\\\\\\\\\\"Attestation\\\\\\\\\\\\\\\",\\\\\\\\n              emptyIcons.Attestation,\\\\\\\\n              \\\\\\\\\\\\\\\"Attestation\\\\\\\\\\\\\\\",\\\\\\\\n              \\\\\\\\\\\\\\\"Formally review or validate a solution as a recognized expert.\\\\\\\\\\\\\\\"\\\\\\\\n            )}\\\\\\\\n            {btnCreatorWidget(\\\\\\\\n              \\\\\\\\\\\\\\\"Sponsorship\\\\\\\\\\\\\\\",\\\\\\\\n              emptyIcons.Sponsorship,\\\\\\\\n              \\\\\\\\\\\\\\\"Sponsorship\\\\\\\\\\\\\\\",\\\\\\\\n              \\\\\\\\\\\\\\\"Offer to fund projects, events, or proposals that match your needs.\\\\\\\\\\\\\\\"\\\\\\\\n            )}\\\\\\\\n            <li>\\\\\\\\n              <hr class=\\\\\\\\\\\\\\\"dropdown-divider\\\\\\\\\\\\\\\" />\\\\\\\\n            </li>\\\\\\\\n            {btnCreatorWidget(\\\\\\\\n              \\\\\\\\\\\\\\\"Comment\\\\\\\\\\\\\\\",\\\\\\\\n              emptyIcons.Comment,\\\\\\\\n              \\\\\\\\\\\\\\\"Comment\\\\\\\\\\\\\\\",\\\\\\\\n              \\\\\\\\\\\\\\\"Ask a question, provide information, or share a resource that is relevant to the thread.\\\\\\\\\\\\\\\"\\\\\\\\n            )}\\\\\\\\n          </ul>\\\\\\\\n        </div>\\\\\\\\n        <ButtonWithHover\\\\\\\\n          type=\\\\\\\\\\\\\\\"button\\\\\\\\\\\\\\\"\\\\\\\\n          class=\\\\\\\\\\\\\\\"btn\\\\\\\\\\\\\\\"\\\\\\\\n          style={{ border: \\\\\\\\\\\\\\\"0px\\\\\\\\\\\\\\\" }}\\\\\\\\n          data-bs-toggle=\\\\\\\\\\\\\\\"collapse\\\\\\\\\\\\\\\"\\\\\\\\n          href={`#collapseChildPosts${postId}`}\\\\\\\\n          aria-expanded={defaultExpanded}\\\\\\\\n          aria-controls={`collapseChildPosts${postId}`}\\\\\\\\n        >\\\\\\\\n          <i class=\\\\\\\\\\\\\\\"bi bi-chevron-down\\\\\\\\\\\\\\\"> </i>{\\\\\\\\\\\\\\\" \\\\\\\\\\\\\\\"}\\\\\\\\n          {`Expand Replies (${childPostIds.length})`}\\\\\\\\n        </ButtonWithHover>\\\\\\\\n\\\\\\\\n        {isUnderPost || !parentId ? (\\\\\\\\n          <div key=\\\\\\\\\\\\\\\"link-to-parent\\\\\\\\\\\\\\\"></div>\\\\\\\\n        ) : (\\\\\\\\n          <Link\\\\\\\\n            to={href({\\\\\\\\n              gateway: \\\\\\\\\\\\\\\"near.org\\\\\\\\\\\\\\\",\\\\\\\\n              widgetSrc: \\\\\\\\\\\\\\\"devhub.near/widget/app\\\\\\\\\\\\\\\",\\\\\\\\n              params: { page: \\\\\\\\\\\\\\\"post\\\\\\\\\\\\\\\", id: parentId },\\\\\\\\n            })}\\\\\\\\n          >\\\\\\\\n            <ButtonWithHover\\\\\\\\n              type=\\\\\\\\\\\\\\\"button\\\\\\\\\\\\\\\"\\\\\\\\n              style={{ border: \\\\\\\\\\\\\\\"0px\\\\\\\\\\\\\\\" }}\\\\\\\\n              className=\\\\\\\\\\\\\\\"btn\\\\\\\\\\\\\\\"\\\\\\\\n              key=\\\\\\\\\\\\\\\"link-to-parent\\\\\\\\\\\\\\\"\\\\\\\\n            >\\\\\\\\n              <i class=\\\\\\\\\\\\\\\"bi bi-arrow-90deg-up\\\\\\\\\\\\\\\"></i>Go to parent\\\\\\\\n            </ButtonWithHover>\\\\\\\\n          </Link>\\\\\\\\n        )}\\\\\\\\n      </div>\\\\\\\\n    </FooterButtonsContianer>\\\\\\\\n  </div>\\\\\\\\n);\\\\\\\\n\\\\\\\\nconst CreatorWidget = (postType) => {\\\\\\\\n  return (\\\\\\\\n    <div\\\\\\\\n      class={`collapse ${\\\\\\\\n        draftState?.parent_post_id == postId && draftState?.postType == postType\\\\\\\\n          ? \\\\\\\\\\\\\\\"show\\\\\\\\\\\\\\\"\\\\\\\\n          : \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\"\\\\\\\\n      }`}\\\\\\\\n      id={`collapse${postType}Creator${postId}`}\\\\\\\\n      data-bs-parent={`#accordion${postId}`}\\\\\\\\n    >\\\\\\\\n      <Widget\\\\\\\\n        src={\\\\\\\\\\\\\\\"devhub.near/widget/devhub.entity.post.PostEditor\\\\\\\\\\\\\\\"}\\\\\\\\n        props={{\\\\\\\\n          postType,\\\\\\\\n          onDraftStateChange: props.onDraftStateChange,\\\\\\\\n          draftState:\\\\\\\\n            draftState?.parent_post_id == postId ? draftState : undefined,\\\\\\\\n          parentId: postId,\\\\\\\\n          mode: \\\\\\\\\\\\\\\"Create\\\\\\\\\\\\\\\",\\\\\\\\n        }}\\\\\\\\n      />\\\\\\\\n    </div>\\\\\\\\n  );\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst tokenMapping = {\\\\\\\\n  NEAR: \\\\\\\\\\\\\\\"NEAR\\\\\\\\\\\\\\\",\\\\\\\\n  USDT: {\\\\\\\\n    NEP141: {\\\\\\\\n      address: \\\\\\\\\\\\\\\"usdt.tether-token.near\\\\\\\\\\\\\\\",\\\\\\\\n    },\\\\\\\\n  },\\\\\\\\n  USDC: {\\\\\\\\n    NEP141: {\\\\\\\\n      address:\\\\\\\\n        \\\\\\\\\\\\\\\"17208628f84f5d6ad33f0da3bbbeb27ffcb398eac501a31bd6ad2011e36133a1\\\\\\\\\\\\\\\",\\\\\\\\n    },\\\\\\\\n  },\\\\\\\\n  // Add more tokens here as needed\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst reverseTokenMapping = Object.keys(tokenMapping).reduce(\\\\\\\\n  (reverseMap, key) => {\\\\\\\\n    const value = tokenMapping[key];\\\\\\\\n    if (typeof value === \\\\\\\\\\\\\\\"object\\\\\\\\\\\\\\\") {\\\\\\\\n      reverseMap[JSON.stringify(value)] = key;\\\\\\\\n    }\\\\\\\\n    return reverseMap;\\\\\\\\n  },\\\\\\\\n  {}\\\\\\\\n);\\\\\\\\n\\\\\\\\nfunction tokenResolver(token) {\\\\\\\\n  if (typeof token === \\\\\\\\\\\\\\\"string\\\\\\\\\\\\\\\") {\\\\\\\\n    return token;\\\\\\\\n  } else if (typeof token === \\\\\\\\\\\\\\\"object\\\\\\\\\\\\\\\") {\\\\\\\\n    const tokenString = reverseTokenMapping[JSON.stringify(token)];\\\\\\\\n    return tokenString || null;\\\\\\\\n  } else {\\\\\\\\n    return null; // Invalid input\\\\\\\\n  }\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst EditorWidget = (postType) => {\\\\\\\\n  return (\\\\\\\\n    <div\\\\\\\\n      class={`collapse ${\\\\\\\\n        draftState?.edit_post_id == postId && draftState?.postType == postType\\\\\\\\n          ? \\\\\\\\\\\\\\\"show\\\\\\\\\\\\\\\"\\\\\\\\n          : \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\"\\\\\\\\n      }`}\\\\\\\\n      id={`collapse${postType}Editor${postId}`}\\\\\\\\n      data-bs-parent={`#accordion${postId}`}\\\\\\\\n    >\\\\\\\\n      <Widget\\\\\\\\n        src={\\\\\\\\\\\\\\\"devhub.near/widget/devhub.entity.post.PostEditor\\\\\\\\\\\\\\\"}\\\\\\\\n        props={{\\\\\\\\n          postType,\\\\\\\\n          postId,\\\\\\\\n          mode: \\\\\\\\\\\\\\\"Edit\\\\\\\\\\\\\\\",\\\\\\\\n          author_id: post.author_id,\\\\\\\\n          labels: post.snapshot.labels,\\\\\\\\n          name: post.snapshot.name,\\\\\\\\n          description: post.snapshot.description,\\\\\\\\n          amount: post.snapshot.amount,\\\\\\\\n          token: tokenResolver(post.snapshot.sponsorship_token),\\\\\\\\n          supervisor: post.snapshot.supervisor,\\\\\\\\n          githubLink: post.snapshot.github_link,\\\\\\\\n          onDraftStateChange: props.onDraftStateChange,\\\\\\\\n          draftState:\\\\\\\\n            draftState?.edit_post_id == postId ? draftState : undefined,\\\\\\\\n        }}\\\\\\\\n      />\\\\\\\\n    </div>\\\\\\\\n  );\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst isDraft =\\\\\\\\n  (draftState?.parent_post_id === postId &&\\\\\\\\n    draftState?.postType === state.postType) ||\\\\\\\\n  (draftState?.edit_post_id === postId &&\\\\\\\\n    draftState?.postType === state.postType);\\\\\\\\n\\\\\\\\nfunction Editor() {\\\\\\\\n  return (\\\\\\\\n    <div class=\\\\\\\\\\\\\\\"row\\\\\\\\\\\\\\\" id={`accordion${postId}`} key=\\\\\\\\\\\\\\\"editors-footer\\\\\\\\\\\\\\\">\\\\\\\\n      <div\\\\\\\\n        key={`${state.postType}${state.editorType}${postId}`}\\\\\\\\n        className={\\\\\\\\\\\\\\\"w-100\\\\\\\\\\\\\\\"}\\\\\\\\n      >\\\\\\\\n        {state.editorType === \\\\\\\\\\\\\\\"CREATE\\\\\\\\\\\\\\\" ? (\\\\\\\\n          <>\\\\\\\\n            <Widget\\\\\\\\n              src={\\\\\\\\\\\\\\\"devhub.near/widget/devhub.entity.post.PostEditor\\\\\\\\\\\\\\\"}\\\\\\\\n              props={{\\\\\\\\n                postType: state.postType,\\\\\\\\n                onDraftStateChange: props.onDraftStateChange,\\\\\\\\n                draftState:\\\\\\\\n                  draftState?.parent_post_id == postId ? draftState : undefined,\\\\\\\\n                parentId: postId,\\\\\\\\n                mode: \\\\\\\\\\\\\\\"Create\\\\\\\\\\\\\\\",\\\\\\\\n              }}\\\\\\\\n            />\\\\\\\\n          </>\\\\\\\\n        ) : (\\\\\\\\n          <>\\\\\\\\n            <Widget\\\\\\\\n              src={\\\\\\\\\\\\\\\"devhub.near/widget/devhub.entity.post.PostEditor\\\\\\\\\\\\\\\"}\\\\\\\\n              props={{\\\\\\\\n                postType: state.postType,\\\\\\\\n                postId,\\\\\\\\n                mode: \\\\\\\\\\\\\\\"Edit\\\\\\\\\\\\\\\",\\\\\\\\n                author_id: post.author_id,\\\\\\\\n                labels: post.snapshot.labels,\\\\\\\\n                name: post.snapshot.name,\\\\\\\\n                description: post.snapshot.description,\\\\\\\\n                amount: post.snapshot.amount,\\\\\\\\n                token: tokenResolver(post.snapshot.sponsorship_token),\\\\\\\\n                supervisor: post.snapshot.supervisor,\\\\\\\\n                githubLink: post.snapshot.github_link,\\\\\\\\n                onDraftStateChange: props.onDraftStateChange,\\\\\\\\n                draftState:\\\\\\\\n                  draftState?.edit_post_id == postId ? draftState : undefined,\\\\\\\\n              }}\\\\\\\\n            />\\\\\\\\n          </>\\\\\\\\n        )}\\\\\\\\n      </div>\\\\\\\\n    </div>\\\\\\\\n  );\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst renamedPostType =\\\\\\\\n  snapshot.post_type == \\\\\\\\\\\\\\\"Submission\\\\\\\\\\\\\\\" ? \\\\\\\\\\\\\\\"Solution\\\\\\\\\\\\\\\" : snapshot.post_type;\\\\\\\\n\\\\\\\\nconst tags = post.snapshot.labels ? (\\\\\\\\n  <div\\\\\\\\n    class=\\\\\\\\\\\\\\\"card-title d-flex flex-wrap align-items-center\\\\\\\\\\\\\\\"\\\\\\\\n    style={{ margin: \\\\\\\\\\\\\\\"20px 0\\\\\\\\\\\\\\\" }}\\\\\\\\n    key=\\\\\\\\\\\\\\\"post-labels\\\\\\\\\\\\\\\"\\\\\\\\n  >\\\\\\\\n    {post.snapshot.labels.map((tag, idx) => (\\\\\\\\n      <div className=\\\\\\\\\\\\\\\"d-flex align-items-center my-3 me-3\\\\\\\\\\\\\\\">\\\\\\\\n        <Link\\\\\\\\n          to={href({\\\\\\\\n            widgetSrc: \\\\\\\\\\\\\\\"devhub.near/widget/app\\\\\\\\\\\\\\\",\\\\\\\\n            params: { page: \\\\\\\\\\\\\\\"feed\\\\\\\\\\\\\\\", tag: tag },\\\\\\\\n          })}\\\\\\\\n        >\\\\\\\\n          <div\\\\\\\\n            className=\\\\\\\\\\\\\\\"d-flex gap-3 align-items-center\\\\\\\\\\\\\\\"\\\\\\\\n            style={{ cursor: \\\\\\\\\\\\\\\"pointer\\\\\\\\\\\\\\\", textDecoration: \\\\\\\\\\\\\\\"none\\\\\\\\\\\\\\\" }}\\\\\\\\n          >\\\\\\\\n            <Widget\\\\\\\\n              src={\\\\\\\\\\\\\\\"devhub.near/widget/devhub.components.atom.Tag\\\\\\\\\\\\\\\"}\\\\\\\\n              props={{\\\\\\\\n                tag,\\\\\\\\n                black: true,\\\\\\\\n              }}\\\\\\\\n            />\\\\\\\\n          </div>\\\\\\\\n        </Link>\\\\\\\\n        {idx !== post.snapshot.labels.length - 1 && (\\\\\\\\n          <span className=\\\\\\\\\\\\\\\"ms-3\\\\\\\\\\\\\\\">\\\\\\\\u{2022}</span>\\\\\\\\n        )}\\\\\\\\n      </div>\\\\\\\\n    ))}\\\\\\\\n  </div>\\\\\\\\n) : (\\\\\\\\n  <div key=\\\\\\\\\\\\\\\"post-labels\\\\\\\\\\\\\\\"></div>\\\\\\\\n);\\\\\\\\n\\\\\\\\nconst Title = styled.h5`\\\\\\\\n  margin: 1rem 0;\\\\\\\\n\\\\\\\\n  color: #151515;\\\\\\\\n  font-size: 1.15rem;\\\\\\\\n  font-style: normal;\\\\\\\\n  font-weight: 700;\\\\\\\\n  line-height: 1.625rem; /* 55.556% */\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst postTitle =\\\\\\\\n  snapshot.post_type == \\\\\\\\\\\\\\\"Comment\\\\\\\\\\\\\\\" ? (\\\\\\\\n    <div key=\\\\\\\\\\\\\\\"post-title\\\\\\\\\\\\\\\"></div>\\\\\\\\n  ) : (\\\\\\\\n    <Title key=\\\\\\\\\\\\\\\"post-title\\\\\\\\\\\\\\\">\\\\\\\\n      {emptyIcons[snapshot.post_type]} {renamedPostType}: {snapshot.name}\\\\\\\\n    </Title>\\\\\\\\n  );\\\\\\\\n\\\\\\\\nconst postExtra =\\\\\\\\n  snapshot.post_type == \\\\\\\\\\\\\\\"Sponsorship\\\\\\\\\\\\\\\" ? (\\\\\\\\n    <div key=\\\\\\\\\\\\\\\"post-extra\\\\\\\\\\\\\\\">\\\\\\\\n      <h6 class=\\\\\\\\\\\\\\\"card-subtitle mb-2 text-muted\\\\\\\\\\\\\\\">\\\\\\\\n        Maximum amount: {snapshot.amount}{\\\\\\\\\\\\\\\" \\\\\\\\\\\\\\\"}\\\\\\\\n        {tokenResolver(snapshot.sponsorship_token)}\\\\\\\\n      </h6>\\\\\\\\n      <h6 class=\\\\\\\\\\\\\\\"card-subtitle mb-2 text-muted\\\\\\\\\\\\\\\">\\\\\\\\n        Supervisor:{\\\\\\\\\\\\\\\" \\\\\\\\\\\\\\\"}\\\\\\\\n        <Widget\\\\\\\\n          src={\\\\\\\\\\\\\\\"neardevgov.near/widget/ProfileLine\\\\\\\\\\\\\\\"}\\\\\\\\n          props={{ accountId: snapshot.supervisor }}\\\\\\\\n        />\\\\\\\\n      </h6>\\\\\\\\n    </div>\\\\\\\\n  ) : (\\\\\\\\n    <div></div>\\\\\\\\n  );\\\\\\\\n\\\\\\\\nconst childPostHasDraft = childPostIds.find(\\\\\\\\n  (childId) =>\\\\\\\\n    childId == draftState?.edit_post_id || childId == draftState?.parent_post_id\\\\\\\\n);\\\\\\\\nif (\\\\\\\\n  (childPostHasDraft || state.childrenOfChildPostsHasDraft) &&\\\\\\\\n  props.expandParent\\\\\\\\n) {\\\\\\\\n  props.expandParent();\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst postsList =\\\\\\\\n  props.isPreview || childPostIds.length == 0 ? (\\\\\\\\n    <div key=\\\\\\\\\\\\\\\"posts-list\\\\\\\\\\\\\\\"></div>\\\\\\\\n  ) : (\\\\\\\\n    <div class=\\\\\\\\\\\\\\\"row\\\\\\\\\\\\\\\" key=\\\\\\\\\\\\\\\"posts-list\\\\\\\\\\\\\\\">\\\\\\\\n      <div\\\\\\\\n        class={`collapse mt-3 ${\\\\\\\\n          defaultExpanded ||\\\\\\\\n          childPostHasDraft ||\\\\\\\\n          state.childrenOfChildPostsHasDraft\\\\\\\\n            ? \\\\\\\\\\\\\\\"show\\\\\\\\\\\\\\\"\\\\\\\\n            : \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\"\\\\\\\\n        }`}\\\\\\\\n        id={`collapseChildPosts${postId}`}\\\\\\\\n      >\\\\\\\\n        {childPostIds.map((childId) => (\\\\\\\\n          <Widget\\\\\\\\n            src=\\\\\\\\\\\\\\\"devhub.near/widget/devhub.entity.post.Post\\\\\\\\\\\\\\\"\\\\\\\\n            props={{\\\\\\\\n              id: childId,\\\\\\\\n              isUnderPost: true,\\\\\\\\n              onDraftStateChange: props.onDraftStateChange,\\\\\\\\n              draftState,\\\\\\\\n              expandParent: () =>\\\\\\\\n                State.update({ childrenOfChildPostsHasDraft: true }),\\\\\\\\n              referral: `subpost${childId}of${postId}`,\\\\\\\\n            }}\\\\\\\\n          />\\\\\\\\n        ))}\\\\\\\\n      </div>\\\\\\\\n    </div>\\\\\\\\n  );\\\\\\\\n\\\\\\\\nconst LimitedMarkdown = styled.div`\\\\\\\\n  max-height: 20em;\\\\\\\\n`;\\\\\\\\n\\\\\\\\n// Determine if located in the post page.\\\\\\\\nconst isInList = props.isInList;\\\\\\\\nconst contentArray = snapshot.description.split(\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\");\\\\\\\\nconst needClamp = isInList && contentArray.length > 5;\\\\\\\\n\\\\\\\\ninitState({\\\\\\\\n  clamp: needClamp,\\\\\\\\n});\\\\\\\\n\\\\\\\\nconst clampedContent = needClamp\\\\\\\\n  ? contentArray.slice(0, 3).join(\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\")\\\\\\\\n  : snapshot.description;\\\\\\\\n\\\\\\\\n// Should make sure the posts under the currently top viewed post are limited in size.\\\\\\\\nconst descriptionArea = isUnderPost ? (\\\\\\\\n  <LimitedMarkdown className=\\\\\\\\\\\\\\\"overflow-auto\\\\\\\\\\\\\\\" key=\\\\\\\\\\\\\\\"description-area\\\\\\\\\\\\\\\">\\\\\\\\n    {/* {widget(\\\\\\\\\\\\\\\"components.molecule.markdown-viewer\\\\\\\\\\\\\\\", {\\\\\\\\n      text: snapshot.description,\\\\\\\\n    })} */}\\\\\\\\n    <Widget\\\\\\\\n      src={\\\\\\\\\\\\\\\"devhub.near/widget/devhub.components.molecule.MarkdownViewer\\\\\\\\\\\\\\\"}\\\\\\\\n      props={{\\\\\\\\n        text: snapshot.description,\\\\\\\\n      }}\\\\\\\\n    />\\\\\\\\n  </LimitedMarkdown>\\\\\\\\n) : (\\\\\\\\n  <div className=\\\\\\\\\\\\\\\"w-100 overflow-auto\\\\\\\\\\\\\\\">\\\\\\\\n    <div class={state.clamp ? \\\\\\\\\\\\\\\"clamp\\\\\\\\\\\\\\\" : \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\"}>\\\\\\\\n      {/* {widget(\\\\\\\\\\\\\\\"components.molecule.markdown-viewer\\\\\\\\\\\\\\\", {\\\\\\\\n        text: state.clamp ? clampedContent : snapshot.description,\\\\\\\\n      })} */}\\\\\\\\n      <Widget\\\\\\\\n        src={\\\\\\\\\\\\\\\"devhub.near/widget/devhub.components.molecule.MarkdownViewer\\\\\\\\\\\\\\\"}\\\\\\\\n        props={{\\\\\\\\n          text: state.clamp ? clampedContent : snapshot.description,\\\\\\\\n        }}\\\\\\\\n      />\\\\\\\\n    </div>\\\\\\\\n    {state.clamp ? (\\\\\\\\n      <div class=\\\\\\\\\\\\\\\"d-flex justify-content-start\\\\\\\\\\\\\\\">\\\\\\\\n        <a\\\\\\\\n          style={{ cursor: \\\\\\\\\\\\\\\"pointer\\\\\\\\\\\\\\\", color: \\\\\\\\\\\\\\\"#00ec97\\\\\\\\\\\\\\\" }}\\\\\\\\n          class=\\\\\\\\\\\\\\\"btn-link text-dark fw-bold text-decoration-none\\\\\\\\\\\\\\\"\\\\\\\\n          onClick={() => State.update({ clamp: false })}\\\\\\\\n        >\\\\\\\\n          See more\\\\\\\\n        </a>\\\\\\\\n      </div>\\\\\\\\n    ) : (\\\\\\\\n      <></>\\\\\\\\n    )}\\\\\\\\n  </div>\\\\\\\\n);\\\\\\\\n\\\\\\\\nconst timestampElement = (_snapshot) => {\\\\\\\\n  return (\\\\\\\\n    <Link\\\\\\\\n      class=\\\\\\\\\\\\\\\"text-muted\\\\\\\\\\\\\\\"\\\\\\\\n      href={href({\\\\\\\\n        gateway: \\\\\\\\\\\\\\\"near.org\\\\\\\\\\\\\\\",\\\\\\\\n        widgetSrc: \\\\\\\\\\\\\\\"devhub.near/widget/app\\\\\\\\\\\\\\\",\\\\\\\\n        params: {\\\\\\\\n          page: \\\\\\\\\\\\\\\"post\\\\\\\\\\\\\\\",\\\\\\\\n          id: postId,\\\\\\\\n          timestamp: _snapshot.timestamp,\\\\\\\\n          compareTimestamp: null,\\\\\\\\n          referral,\\\\\\\\n        },\\\\\\\\n      })}\\\\\\\\n    >\\\\\\\\n      {readableDate(_snapshot.timestamp / 1000000).substring(4)}\\\\\\\\n\\\\\\\\n      <Widget\\\\\\\\n        src=\\\\\\\\\\\\\\\"mob.near/widget/ProfileImage\\\\\\\\\\\\\\\"\\\\\\\\n        props={{\\\\\\\\n          accountId: _snapshot.editor_id,\\\\\\\\n          style: {\\\\\\\\n            width: \\\\\\\\\\\\\\\"1.25em\\\\\\\\\\\\\\\",\\\\\\\\n            height: \\\\\\\\\\\\\\\"1.25em\\\\\\\\\\\\\\\",\\\\\\\\n          },\\\\\\\\n          imageStyle: {\\\\\\\\n            transform: \\\\\\\\\\\\\\\"translateY(-12.5%)\\\\\\\\\\\\\\\",\\\\\\\\n          },\\\\\\\\n        }}\\\\\\\\n      />\\\\\\\\n      {_snapshot.editor_id.substring(0, 8)}\\\\\\\\n    </Link>\\\\\\\\n  );\\\\\\\\n};\\\\\\\\n\\\\\\\\nfunction combineText(_snapshot) {\\\\\\\\n  return (\\\\\\\\n    \\\\\\\\\\\\\\\"## \\\\\\\\\\\\\\\" +\\\\\\\\n    _snapshot.post_type +\\\\\\\\n    \\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\" +\\\\\\\\n    _snapshot.name +\\\\\\\\n    \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\" +\\\\\\\\n    _snapshot.description\\\\\\\\n  );\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst CardContainer = styled.div`\\\\\\\\n  padding: 1.5rem 3rem !important;\\\\\\\\n  border-radius: 16px !important;\\\\\\\\n  border: 1px solid rgba(129, 129, 129, 0.3) !important;\\\\\\\\n  background: #fffefe !important;\\\\\\\\n\\\\\\\\n  @media screen and (max-width: 960px) {\\\\\\\\n    padding: 1rem !important;\\\\\\\\n  }\\\\\\\\n`;\\\\\\\\n\\\\\\\\nreturn (\\\\\\\\n  <CardContainer className={`card ${borders[snapshot.post_type]} attractable`}>\\\\\\\\n    {header}\\\\\\\\n    <div className=\\\\\\\\\\\\\\\"card-body\\\\\\\\\\\\\\\" style={{ padding: 0 }}>\\\\\\\\n      {searchKeywords}\\\\\\\\n      {compareSnapshot ? (\\\\\\\\n        <div\\\\\\\\n          class=\\\\\\\\\\\\\\\"border rounded\\\\\\\\\\\\\\\"\\\\\\\\n          style={{ marginTop: \\\\\\\\\\\\\\\"16px\\\\\\\\\\\\\\\", marginBottom: \\\\\\\\\\\\\\\"16px\\\\\\\\\\\\\\\" }}\\\\\\\\n        >\\\\\\\\n          <div class=\\\\\\\\\\\\\\\"d-flex justify-content-end\\\\\\\\\\\\\\\" style={{ fontSize: \\\\\\\\\\\\\\\"12px\\\\\\\\\\\\\\\" }}>\\\\\\\\n            <div class=\\\\\\\\\\\\\\\"d-flex w-50 justify-content-end mt-1 me-2\\\\\\\\\\\\\\\">\\\\\\\\n              {timestampElement(snapshot)}\\\\\\\\n              {snapshot !== compareSnapshot && (\\\\\\\\n                <>\\\\\\\\n                  <div class=\\\\\\\\\\\\\\\"mx-1 align-self-center\\\\\\\\\\\\\\\">\\\\\\\\n                    <i class=\\\\\\\\\\\\\\\"bi bi-file-earmark-diff\\\\\\\\\\\\\\\" />\\\\\\\\n                  </div>\\\\\\\\n                  {timestampElement(compareSnapshot)}\\\\\\\\n                </>\\\\\\\\n              )}\\\\\\\\n            </div>\\\\\\\\n          </div>\\\\\\\\n          <div className=\\\\\\\\\\\\\\\"w-100 overflow-auto\\\\\\\\\\\\\\\">\\\\\\\\n            <Widget\\\\\\\\n              src=\\\\\\\\\\\\\\\"markeljan.near/widget/MarkdownDiff\\\\\\\\\\\\\\\"\\\\\\\\n              props={{\\\\\\\\n                post: post,\\\\\\\\n                currentCode: combineText(\\\\\\\\n                  swapTimestamps ? compareSnapshot : snapshot\\\\\\\\n                ),\\\\\\\\n                prevCode: combineText(\\\\\\\\n                  swapTimestamps ? snapshot : compareSnapshot\\\\\\\\n                ),\\\\\\\\n                showLineNumber: true,\\\\\\\\n              }}\\\\\\\\n            />\\\\\\\\n          </div>\\\\\\\\n        </div>\\\\\\\\n      ) : (\\\\\\\\n        <>\\\\\\\\n          {postTitle}\\\\\\\\n          {postExtra}\\\\\\\\n          {descriptionArea}\\\\\\\\n        </>\\\\\\\\n      )}\\\\\\\\n      {tags}\\\\\\\\n      {buttonsFooter}\\\\\\\\n      {!props.isPreview && (isDraft || state.showEditor) && <Editor />}\\\\\\\\n      {postsList}\\\\\\\\n    </div>\\\\\\\\n  </CardContainer>\\\\\\\\n);\\\\\\\\n\"}, \"devhub.page.communities\": {\"\": \"const { getAllCommunitiesMetadata, createCommunity } = VM.require(\\\\\\\\n  \\\\\\\\\\\\\\\"devhub.near/widget/core.adapter.devhub-contract\\\\\\\\\\\\\\\"\\\\\\\\n);\\\\\\\\n\\\\\\\\nif (!getAllCommunitiesMetadata || !createCommunity) {\\\\\\\\n  return <p>Loading modules...</p>;\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst onCommunitySubmit = (inputs) =>\\\\\\\\n  createCommunity({\\\\\\\\n    inputs: {\\\\\\\\n      ...inputs,\\\\\\\\n\\\\\\\\n      bio_markdown: [\\\\\\\\n        \\\\\\\\\\\\\\\"This is a sample text about your community.\\\\\\\\\\\\\\\",\\\\\\\\n        \\\\\\\\\\\\\\\"You can change it on the community configuration page.\\\\\\\\\\\\\\\",\\\\\\\\n      ].join(\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\"),\\\\\\\\n\\\\\\\\n      logo_url:\\\\\\\\n        \\\\\\\\\\\\\\\"https://ipfs.near.social/ipfs/bafkreibysr2mkwhb4j36h2t7mqwhynqdy4vzjfygfkfg65kuspd2bawauu\\\\\\\\\\\\\\\",\\\\\\\\n\\\\\\\\n      banner_url:\\\\\\\\n        \\\\\\\\\\\\\\\"https://ipfs.near.social/ipfs/bafkreic4xgorjt6ha5z4s5e3hscjqrowe5ahd7hlfc5p4hb6kdfp6prgy4\\\\\\\\\\\\\\\",\\\\\\\\n    },\\\\\\\\n  });\\\\\\\\n\\\\\\\\nconst [showSpawner, setShowSpawner] = useState(false);\\\\\\\\n\\\\\\\\nconst [searchKey, setSearchKey] = useState(\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\");\\\\\\\\nconst [sort, setSort] = useState(\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\");\\\\\\\\n\\\\\\\\nconst communitiesMetadata = getAllCommunitiesMetadata();\\\\\\\\n\\\\\\\\nif (!communitiesMetadata) {\\\\\\\\n  return <p>Loading...</p>;\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst SortedAndFiltered = (searchKey, sortBy) => {\\\\\\\\n  let communities = (communitiesMetadata ?? []).reverse();\\\\\\\\n\\\\\\\\n  let filtered = [...communities];\\\\\\\\n  if (searchKey !== \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\") {\\\\\\\\n    filtered = communities.filter((community) =>\\\\\\\\n      community.name.toLowerCase().includes(searchKey.toLowerCase())\\\\\\\\n    );\\\\\\\\n  }\\\\\\\\n\\\\\\\\n  let sortedCommunities = [...filtered];\\\\\\\\n  if (sortBy !== \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\") {\\\\\\\\n    sortedCommunities.sort((a, b) => {\\\\\\\\n      let nameA = a.name.toLowerCase();\\\\\\\\n      let nameB = b.name.toLowerCase();\\\\\\\\n\\\\\\\\n      if (nameA < nameB) {\\\\\\\\n        return -1;\\\\\\\\n      }\\\\\\\\n      if (nameA > nameB) {\\\\\\\\n        return 1;\\\\\\\\n      }\\\\\\\\n      return 0;\\\\\\\\n    });\\\\\\\\n\\\\\\\\n    if (sortBy === \\\\\\\\\\\\\\\"z-a\\\\\\\\\\\\\\\") {\\\\\\\\n      sortedCommunities.reverse();\\\\\\\\n    }\\\\\\\\n  }\\\\\\\\n\\\\\\\\n  return sortedCommunities;\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst CTA = styled.button`\\\\\\\\n  all: unset;\\\\\\\\n\\\\\\\\n  color: #f4f4f4;\\\\\\\\n\\\\\\\\n  font-size: 16px;\\\\\\\\n  font-style: normal;\\\\\\\\n  font-weight: 700;\\\\\\\\n  line-height: 20px; /* 125% */\\\\\\\\n\\\\\\\\n  border-radius: 4px;\\\\\\\\n  background: #00ec97;\\\\\\\\n\\\\\\\\n  display: flex;\\\\\\\\n  padding: 14px 16px;\\\\\\\\n  align-items: center;\\\\\\\\n  gap: 8px;\\\\\\\\n\\\\\\\\n  &:hover {\\\\\\\\n    background: #04a46e;\\\\\\\\n  }\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst CardGrid = styled.div`\\\\\\\\n  width: 100%;\\\\\\\\n  height: 100%;\\\\\\\\n\\\\\\\\n  display: grid;\\\\\\\\n  grid-template-columns: repeat(2, 1fr);\\\\\\\\n  gap: 3rem;\\\\\\\\n\\\\\\\\n  @media screen and (max-width: 1000px) {\\\\\\\\n    display: flex;\\\\\\\\n    flex-wrap: wrap;\\\\\\\\n    gap: 2rem;\\\\\\\\n  }\\\\\\\\n`;\\\\\\\\n\\\\\\\\nreturn (\\\\\\\\n  <div className=\\\\\\\\\\\\\\\"w-100\\\\\\\\\\\\\\\">\\\\\\\\n    <Widget\\\\\\\\n      src={`devhub.near/widget/devhub.components.island.banner`}\\\\\\\\n      props={{\\\\\\\\n        title: (\\\\\\\\n          <>\\\\\\\\n            We are building <br />\\\\\\\\n            <span style={{ color: \\\\\\\\\\\\\\\"#151515\\\\\\\\\\\\\\\" }}>\\\\\\\\n              a decentralized community\\\\\\\\n            </span>{\\\\\\\\\\\\\\\" \\\\\\\\\\\\\\\"}\\\\\\\\n            <br />\\\\\\\\n            for NEAR Developers.\\\\\\\\n          </>\\\\\\\\n        ),\\\\\\\\n        imageLink:\\\\\\\\n          \\\\\\\\\\\\\\\"https://ipfs.near.social/ipfs/bafkreigtpjmgt3aphd3plbcremtvazeo7qsjvguw44m74zthyxbhj4toqe\\\\\\\\\\\\\\\",\\\\\\\\n      }}\\\\\\\\n    />\\\\\\\\n    <div style={{ background: \\\\\\\\\\\\\\\"#f4f4f4\\\\\\\\\\\\\\\" }}>\\\\\\\\n      <div\\\\\\\\n        className=\\\\\\\\\\\\\\\"d-flex justify-content-between p-4\\\\\\\\\\\\\\\"\\\\\\\\n        style={{ backgroundColor: \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\" }}\\\\\\\\n      >\\\\\\\\n        <div className=\\\\\\\\\\\\\\\"d-flex flex-column gap-3 w-100\\\\\\\\\\\\\\\">\\\\\\\\n          <h1\\\\\\\\n            className=\\\\\\\\\\\\\\\"m-0 fs-4\\\\\\\\\\\\\\\"\\\\\\\\n            style={{ color: \\\\\\\\\\\\\\\"#04a46e\\\\\\\\\\\\\\\", fontSize: \\\\\\\\\\\\\\\"1.5rem\\\\\\\\\\\\\\\" }}\\\\\\\\n          >\\\\\\\\n            Communities\\\\\\\\n          </h1>\\\\\\\\n\\\\\\\\n          <div className=\\\\\\\\\\\\\\\"d-flex flex-column-reverse flex-lg-row gap-3 justify-content-between align-items-center\\\\\\\\\\\\\\\">\\\\\\\\n            <div className=\\\\\\\\\\\\\\\"d-flex flex-column flex-lg-row col-12 col-md-6 mt-3 mt-lg-0 align-items-center gap-4 col-lg-6\\\\\\\\\\\\\\\">\\\\\\\\n              <input\\\\\\\\n                type=\\\\\\\\\\\\\\\"text\\\\\\\\\\\\\\\"\\\\\\\\n                placeholder=\\\\\\\\\\\\\\\"\\\\\\\\u{1f50d} Search Communities\\\\\\\\\\\\\\\"\\\\\\\\n                className=\\\\\\\\\\\\\\\"form-control w-100\\\\\\\\\\\\\\\"\\\\\\\\n                value={searchKey}\\\\\\\\n                onChange={(e) => setSearchKey(e.target.value)}\\\\\\\\n              />\\\\\\\\n              <select\\\\\\\\n                class=\\\\\\\\\\\\\\\"form-select\\\\\\\\\\\\\\\"\\\\\\\\n                onChange={(e) => setSort(e.target.value)}\\\\\\\\n              >\\\\\\\\n                <option selected value=\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\">\\\\\\\\n                  Sort\\\\\\\\n                </option>\\\\\\\\n                <option value=\\\\\\\\\\\\\\\"a-z\\\\\\\\\\\\\\\">A-Z</option>\\\\\\\\n                <option value=\\\\\\\\\\\\\\\"z-a\\\\\\\\\\\\\\\">Z-A</option>\\\\\\\\n              </select>\\\\\\\\n            </div>\\\\\\\\n            {context.accountId && (\\\\\\\\n              <div className=\\\\\\\\\\\\\\\"d-flex flex-column justify-content-center\\\\\\\\\\\\\\\">\\\\\\\\n                <CTA onClick={() => setShowSpawner(!showSpawner)}>\\\\\\\\n                  <i className=\\\\\\\\\\\\\\\"bi bi-plus-circle-fill me-1\\\\\\\\\\\\\\\"></i> Create\\\\\\\\n                  Community\\\\\\\\n                </CTA>\\\\\\\\n              </div>\\\\\\\\n            )}\\\\\\\\n          </div>\\\\\\\\n        </div>\\\\\\\\n      </div>\\\\\\\\n      <div className=\\\\\\\\\\\\\\\"d-flex flex-wrap align-content-start gap-4 p-4 w-100 h-100\\\\\\\\\\\\\\\">\\\\\\\\n        {showSpawner && (\\\\\\\\n          <Widget\\\\\\\\n            src=\\\\\\\\\\\\\\\"devhub.near/widget/devhub.entity.community.Spawner\\\\\\\\\\\\\\\"\\\\\\\\n            props={{\\\\\\\\n              data: null,\\\\\\\\n              onSubmit: onCommunitySubmit,\\\\\\\\n              onCancel: () => setShowSpawner(false),\\\\\\\\n            }}\\\\\\\\n          />\\\\\\\\n        )}\\\\\\\\n        <CardGrid>\\\\\\\\n          {searchKey === \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\" && sort === \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\"\\\\\\\\n            ? (communitiesMetadata ?? []).reverse().map((communityMetadata) => (\\\\\\\\n                <Widget\\\\\\\\n                  src=\\\\\\\\\\\\\\\"devhub.near/widget/devhub.entity.community.Card\\\\\\\\\\\\\\\"\\\\\\\\n                  props={{\\\\\\\\n                    format: \\\\\\\\\\\\\\\"small\\\\\\\\\\\\\\\",\\\\\\\\n                    isBannerEnabled: false,\\\\\\\\n                    metadata: communityMetadata,\\\\\\\\n                  }}\\\\\\\\n                />\\\\\\\\n              ))\\\\\\\\n            : SortedAndFiltered(searchKey, sort).map((communityMetadata) => (\\\\\\\\n                <Widget\\\\\\\\n                  src=\\\\\\\\\\\\\\\"devhub.near/widget/devhub.entity.community.Card\\\\\\\\\\\\\\\"\\\\\\\\n                  props={{\\\\\\\\n                    format: \\\\\\\\\\\\\\\"small\\\\\\\\\\\\\\\",\\\\\\\\n                    isBannerEnabled: false,\\\\\\\\n                    metadata: communityMetadata,\\\\\\\\n                  }}\\\\\\\\n                />\\\\\\\\n              ))}\\\\\\\\n        </CardGrid>\\\\\\\\n      </div>\\\\\\\\n    </div>\\\\\\\\n  </div>\\\\\\\\n);\\\\\\\\n\"}, \"devhub.entity.post.Panel\": {\"\": \"//////////////////////////////////////////////////////////////////////\\\\\\\\n///STOPWORDS//////////////////////////////////////////////////////////\\\\\\\\nconst stopWords = [\\\\\\\\n  \\\\\\\\\\\\\\\"about\\\\\\\\\\\\\\\",\\\\\\\\n  \\\\\\\\\\\\\\\"above\\\\\\\\\\\\\\\",\\\\\\\\n  \\\\\\\\\\\\\\\"after\\\\\\\\\\\\\\\",\\\\\\\\n  \\\\\\\\\\\\\\\"again\\\\\\\\\\\\\\\",\\\\\\\\n  \\\\\\\\\\\\\\\"against\\\\\\\\\\\\\\\",\\\\\\\\n  \\\\\\\\\\\\\\\"all\\\\\\\\\\\\\\\",\\\\\\\\n  \\\\\\\\\\\\\\\"and\\\\\\\\\\\\\\\",\\\\\\\\n  \\\\\\\\\\\\\\\"any\\\\\\\\\\\\\\\",\\\\\\\\n  \\\\\\\\\\\\\\\"are\\\\\\\\\\\\\\\",\\\\\\\\n  \\\\\\\\\\\\\\\"because\\\\\\\\\\\\\\\",\\\\\\\\n  \\\\\\\\\\\\\\\"been\\\\\\\\\\\\\\\",\\\\\\\\n  \\\\\\\\\\\\\\\"before\\\\\\\\\\\\\\\",\\\\\\\\n  \\\\\\\\\\\\\\\"being\\\\\\\\\\\\\\\",\\\\\\\\n  \\\\\\\\\\\\\\\"below\\\\\\\\\\\\\\\",\\\\\\\\n  \\\\\\\\\\\\\\\"between\\\\\\\\\\\\\\\",\\\\\\\\n  \\\\\\\\\\\\\\\"both\\\\\\\\\\\\\\\",\\\\\\\\n  \\\\\\\\\\\\\\\"but\\\\\\\\\\\\\\\",\\\\\\\\n  \\\\\\\\\\\\\\\"can\\\\\\\\\\\\\\\",\\\\\\\\n  \\\\\\\\\\\\\\\"cannot\\\\\\\\\\\\\\\",\\\\\\\\n  \\\\\\\\\\\\\\\"could\\\\\\\\\\\\\\\",\\\\\\\\n  \\\\\\\\\\\\\\\"did\\\\\\\\\\\\\\\",\\\\\\\\n  \\\\\\\\\\\\\\\"does\\\\\\\\\\\\\\\",\\\\\\\\n  \\\\\\\\\\\\\\\"doing\\\\\\\\\\\\\\\",\\\\\\\\n  \\\\\\\\\\\\\\\"down\\\\\\\\\\\\\\\",\\\\\\\\n  \\\\\\\\\\\\\\\"during\\\\\\\\\\\\\\\",\\\\\\\\n  \\\\\\\\\\\\\\\"each\\\\\\\\\\\\\\\",\\\\\\\\n  \\\\\\\\\\\\\\\"etc\\\\\\\\\\\\\\\",\\\\\\\\n  \\\\\\\\\\\\\\\"few\\\\\\\\\\\\\\\",\\\\\\\\n  \\\\\\\\\\\\\\\"for\\\\\\\\\\\\\\\",\\\\\\\\n  \\\\\\\\\\\\\\\"from\\\\\\\\\\\\\\\",\\\\\\\\n  \\\\\\\\\\\\\\\"further\\\\\\\\\\\\\\\",\\\\\\\\n  \\\\\\\\\\\\\\\"had\\\\\\\\\\\\\\\",\\\\\\\\n  \\\\\\\\\\\\\\\"has\\\\\\\\\\\\\\\",\\\\\\\\n  \\\\\\\\\\\\\\\"have\\\\\\\\\\\\\\\",\\\\\\\\n  \\\\\\\\\\\\\\\"having\\\\\\\\\\\\\\\",\\\\\\\\n  \\\\\\\\\\\\\\\"her\\\\\\\\\\\\\\\",\\\\\\\\n  \\\\\\\\\\\\\\\"hers\\\\\\\\\\\\\\\",\\\\\\\\n  \\\\\\\\\\\\\\\"herself\\\\\\\\\\\\\\\",\\\\\\\\n  \\\\\\\\\\\\\\\"him\\\\\\\\\\\\\\\",\\\\\\\\n  \\\\\\\\\\\\\\\"himself\\\\\\\\\\\\\\\",\\\\\\\\n  \\\\\\\\\\\\\\\"his\\\\\\\\\\\\\\\",\\\\\\\\n  \\\\\\\\\\\\\\\"how\\\\\\\\\\\\\\\",\\\\\\\\n  \\\\\\\\\\\\\\\"into\\\\\\\\\\\\\\\",\\\\\\\\n  \\\\\\\\\\\\\\\"its\\\\\\\\\\\\\\\",\\\\\\\\n  \\\\\\\\\\\\\\\"itself\\\\\\\\\\\\\\\",\\\\\\\\n  \\\\\\\\\\\\\\\"just\\\\\\\\\\\\\\\",\\\\\\\\n  \\\\\\\\\\\\\\\"more\\\\\\\\\\\\\\\",\\\\\\\\n  \\\\\\\\\\\\\\\"most\\\\\\\\\\\\\\\",\\\\\\\\n  \\\\\\\\\\\\\\\"myself\\\\\\\\\\\\\\\",\\\\\\\\n  \\\\\\\\\\\\\\\"nor\\\\\\\\\\\\\\\",\\\\\\\\n  \\\\\\\\\\\\\\\"not\\\\\\\\\\\\\\\",\\\\\\\\n  \\\\\\\\\\\\\\\"now\\\\\\\\\\\\\\\",\\\\\\\\n  \\\\\\\\\\\\\\\"off\\\\\\\\\\\\\\\",\\\\\\\\n  \\\\\\\\\\\\\\\"once\\\\\\\\\\\\\\\",\\\\\\\\n  \\\\\\\\\\\\\\\"only\\\\\\\\\\\\\\\",\\\\\\\\n  \\\\\\\\\\\\\\\"other\\\\\\\\\\\\\\\",\\\\\\\\n  \\\\\\\\\\\\\\\"our\\\\\\\\\\\\\\\",\\\\\\\\n  \\\\\\\\\\\\\\\"ours\\\\\\\\\\\\\\\",\\\\\\\\n  \\\\\\\\\\\\\\\"ourselves\\\\\\\\\\\\\\\",\\\\\\\\n  \\\\\\\\\\\\\\\"out\\\\\\\\\\\\\\\",\\\\\\\\n  \\\\\\\\\\\\\\\"over\\\\\\\\\\\\\\\",\\\\\\\\n  \\\\\\\\\\\\\\\"own\\\\\\\\\\\\\\\",\\\\\\\\n  \\\\\\\\\\\\\\\"same\\\\\\\\\\\\\\\",\\\\\\\\n  \\\\\\\\\\\\\\\"she\\\\\\\\\\\\\\\",\\\\\\\\n  \\\\\\\\\\\\\\\"should\\\\\\\\\\\\\\\",\\\\\\\\n  \\\\\\\\\\\\\\\"some\\\\\\\\\\\\\\\",\\\\\\\\n  \\\\\\\\\\\\\\\"still\\\\\\\\\\\\\\\",\\\\\\\\n  \\\\\\\\\\\\\\\"such\\\\\\\\\\\\\\\",\\\\\\\\n  \\\\\\\\\\\\\\\"than\\\\\\\\\\\\\\\",\\\\\\\\n  \\\\\\\\\\\\\\\"that\\\\\\\\\\\\\\\",\\\\\\\\n  \\\\\\\\\\\\\\\"the\\\\\\\\\\\\\\\",\\\\\\\\n  \\\\\\\\\\\\\\\"their\\\\\\\\\\\\\\\",\\\\\\\\n  \\\\\\\\\\\\\\\"theirs\\\\\\\\\\\\\\\",\\\\\\\\n  \\\\\\\\\\\\\\\"them\\\\\\\\\\\\\\\",\\\\\\\\n  \\\\\\\\\\\\\\\"themselves\\\\\\\\\\\\\\\",\\\\\\\\n  \\\\\\\\\\\\\\\"then\\\\\\\\\\\\\\\",\\\\\\\\n  \\\\\\\\\\\\\\\"there\\\\\\\\\\\\\\\",\\\\\\\\n  \\\\\\\\\\\\\\\"these\\\\\\\\\\\\\\\",\\\\\\\\n  \\\\\\\\\\\\\\\"they\\\\\\\\\\\\\\\",\\\\\\\\n  \\\\\\\\\\\\\\\"this\\\\\\\\\\\\\\\",\\\\\\\\n  \\\\\\\\\\\\\\\"those\\\\\\\\\\\\\\\",\\\\\\\\n  \\\\\\\\\\\\\\\"through\\\\\\\\\\\\\\\",\\\\\\\\n  \\\\\\\\\\\\\\\"too\\\\\\\\\\\\\\\",\\\\\\\\n  \\\\\\\\\\\\\\\"under\\\\\\\\\\\\\\\",\\\\\\\\n  \\\\\\\\\\\\\\\"until\\\\\\\\\\\\\\\",\\\\\\\\n  \\\\\\\\\\\\\\\"very\\\\\\\\\\\\\\\",\\\\\\\\n  \\\\\\\\\\\\\\\"was\\\\\\\\\\\\\\\",\\\\\\\\n  \\\\\\\\\\\\\\\"were\\\\\\\\\\\\\\\",\\\\\\\\n  \\\\\\\\\\\\\\\"what\\\\\\\\\\\\\\\",\\\\\\\\n  \\\\\\\\\\\\\\\"when\\\\\\\\\\\\\\\",\\\\\\\\n  \\\\\\\\\\\\\\\"where\\\\\\\\\\\\\\\",\\\\\\\\n  \\\\\\\\\\\\\\\"which\\\\\\\\\\\\\\\",\\\\\\\\n  \\\\\\\\\\\\\\\"while\\\\\\\\\\\\\\\",\\\\\\\\n  \\\\\\\\\\\\\\\"who\\\\\\\\\\\\\\\",\\\\\\\\n  \\\\\\\\\\\\\\\"whom\\\\\\\\\\\\\\\",\\\\\\\\n  \\\\\\\\\\\\\\\"why\\\\\\\\\\\\\\\",\\\\\\\\n  \\\\\\\\\\\\\\\"will\\\\\\\\\\\\\\\",\\\\\\\\n  \\\\\\\\\\\\\\\"with\\\\\\\\\\\\\\\",\\\\\\\\n  \\\\\\\\\\\\\\\"you\\\\\\\\\\\\\\\",\\\\\\\\n  \\\\\\\\\\\\\\\"your\\\\\\\\\\\\\\\",\\\\\\\\n  \\\\\\\\\\\\\\\"yours\\\\\\\\\\\\\\\",\\\\\\\\n  \\\\\\\\\\\\\\\"yourself\\\\\\\\\\\\\\\",\\\\\\\\n  \\\\\\\\\\\\\\\"yourselves\\\\\\\\\\\\\\\",\\\\\\\\n  \\\\\\\\\\\\\\\"www\\\\\\\\\\\\\\\",\\\\\\\\n  \\\\\\\\\\\\\\\"http\\\\\\\\\\\\\\\",\\\\\\\\n  \\\\\\\\\\\\\\\"com\\\\\\\\\\\\\\\",\\\\\\\\n];\\\\\\\\n\\\\\\\\nconst stopWordsDictionary = {};\\\\\\\\nfor (let i = 0; i < stopWords.length; i++) {\\\\\\\\n  stopWordsDictionary[stopWords[i]] = true;\\\\\\\\n}\\\\\\\\n\\\\\\\\nfunction isStopWord(word) {\\\\\\\\n  return stopWordsDictionary.hasOwnProperty(word.toLowerCase());\\\\\\\\n}\\\\\\\\n//////////////////////////////////////////////////////////////////////\\\\\\\\n///SYNONYMS///////////////////////////////////////////////////////////\\\\\\\\nconst synonyms = {\\\\\\\\n  ether: \\\\\\\\\\\\\\\"ethereum\\\\\\\\\\\\\\\",\\\\\\\\n  eth: \\\\\\\\\\\\\\\"ethereum\\\\\\\\\\\\\\\",\\\\\\\\n  either: \\\\\\\\\\\\\\\"ethereum\\\\\\\\\\\\\\\",\\\\\\\\n  app: \\\\\\\\\\\\\\\"application\\\\\\\\\\\\\\\",\\\\\\\\n  cryptocyrrency: \\\\\\\\\\\\\\\"crypto\\\\\\\\\\\\\\\",\\\\\\\\n  developerdao: \\\\\\\\\\\\\\\"devdao\\\\\\\\\\\\\\\",\\\\\\\\n  dev: \\\\\\\\\\\\\\\"develop\\\\\\\\\\\\\\\",\\\\\\\\n  doc: \\\\\\\\\\\\\\\"document\\\\\\\\\\\\\\\",\\\\\\\\n  lib: \\\\\\\\\\\\\\\"librari\\\\\\\\\\\\\\\",\\\\\\\\n  saw: \\\\\\\\\\\\\\\"see\\\\\\\\\\\\\\\",\\\\\\\\n  seen: \\\\\\\\\\\\\\\"see\\\\\\\\\\\\\\\",\\\\\\\\n  tweet: \\\\\\\\\\\\\\\"twitter\\\\\\\\\\\\\\\",\\\\\\\\n  paid: \\\\\\\\\\\\\\\"pai\\\\\\\\\\\\\\\",\\\\\\\\n  src: \\\\\\\\\\\\\\\"sourc\\\\\\\\\\\\\\\",\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst applySynonym = (word) => {\\\\\\\\n  if (synonyms.hasOwnProperty(word.toLowerCase())) {\\\\\\\\n    return synonyms[word];\\\\\\\\n  }\\\\\\\\n  return word;\\\\\\\\n};\\\\\\\\n//////////////////////////////////////////////////////////////////////\\\\\\\\n///STEMMING///////////////////////////////////////////////////////////\\\\\\\\nconst step2list = {\\\\\\\\n  ational: \\\\\\\\\\\\\\\"ate\\\\\\\\\\\\\\\",\\\\\\\\n  tional: \\\\\\\\\\\\\\\"tion\\\\\\\\\\\\\\\",\\\\\\\\n  enci: \\\\\\\\\\\\\\\"ence\\\\\\\\\\\\\\\",\\\\\\\\n  anci: \\\\\\\\\\\\\\\"ance\\\\\\\\\\\\\\\",\\\\\\\\n  izer: \\\\\\\\\\\\\\\"ize\\\\\\\\\\\\\\\",\\\\\\\\n  bli: \\\\\\\\\\\\\\\"ble\\\\\\\\\\\\\\\",\\\\\\\\n  alli: \\\\\\\\\\\\\\\"al\\\\\\\\\\\\\\\",\\\\\\\\n  entli: \\\\\\\\\\\\\\\"ent\\\\\\\\\\\\\\\",\\\\\\\\n  eli: \\\\\\\\\\\\\\\"e\\\\\\\\\\\\\\\",\\\\\\\\n  ousli: \\\\\\\\\\\\\\\"ous\\\\\\\\\\\\\\\",\\\\\\\\n  ization: \\\\\\\\\\\\\\\"ize\\\\\\\\\\\\\\\",\\\\\\\\n  ation: \\\\\\\\\\\\\\\"ate\\\\\\\\\\\\\\\",\\\\\\\\n  ator: \\\\\\\\\\\\\\\"ate\\\\\\\\\\\\\\\",\\\\\\\\n  alism: \\\\\\\\\\\\\\\"al\\\\\\\\\\\\\\\",\\\\\\\\n  iveness: \\\\\\\\\\\\\\\"ive\\\\\\\\\\\\\\\",\\\\\\\\n  fulness: \\\\\\\\\\\\\\\"ful\\\\\\\\\\\\\\\",\\\\\\\\n  ousness: \\\\\\\\\\\\\\\"ous\\\\\\\\\\\\\\\",\\\\\\\\n  aliti: \\\\\\\\\\\\\\\"al\\\\\\\\\\\\\\\",\\\\\\\\n  iviti: \\\\\\\\\\\\\\\"ive\\\\\\\\\\\\\\\",\\\\\\\\n  biliti: \\\\\\\\\\\\\\\"ble\\\\\\\\\\\\\\\",\\\\\\\\n  logi: \\\\\\\\\\\\\\\"log\\\\\\\\\\\\\\\",\\\\\\\\n};\\\\\\\\n\\\\\\\\n/** @type {Record<string, string>} */\\\\\\\\nconst step3list = {\\\\\\\\n  icate: \\\\\\\\\\\\\\\"ic\\\\\\\\\\\\\\\",\\\\\\\\n  ative: \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\",\\\\\\\\n  alize: \\\\\\\\\\\\\\\"al\\\\\\\\\\\\\\\",\\\\\\\\n  iciti: \\\\\\\\\\\\\\\"ic\\\\\\\\\\\\\\\",\\\\\\\\n  ical: \\\\\\\\\\\\\\\"ic\\\\\\\\\\\\\\\",\\\\\\\\n  ful: \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\",\\\\\\\\n  ness: \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\",\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst gt0 = /^([^aeiou][^aeiouy]*)?([aeiouy][aeiou]*)([^aeiou][^aeiouy]*)/;\\\\\\\\nconst eq1 =\\\\\\\\n  /^([^aeiou][^aeiouy]*)?([aeiouy][aeiou]*)([^aeiou][^aeiouy]*)([aeiouy][aeiou]*)?$/;\\\\\\\\nconst gt1 =\\\\\\\\n  /^([^aeiou][^aeiouy]*)?(([aeiouy][aeiou]*)([^aeiou][^aeiouy]*)){2,}/;\\\\\\\\nconst vowelInStem = /^([^aeiou][^aeiouy]*)?[aeiouy]/;\\\\\\\\nconst consonantLike = /^([^aeiou][^aeiouy]*)[aeiouy][^aeiouwxy]$/;\\\\\\\\n\\\\\\\\n// Exception expressions.\\\\\\\\nconst sfxLl = /ll$/;\\\\\\\\nconst sfxE = /^(.+?)e$/;\\\\\\\\nconst sfxY = /^(.+?)y$/;\\\\\\\\nconst sfxIon = /^(.+?(s|t))(ion)$/;\\\\\\\\nconst sfxEdOrIng = /^(.+?)(ed|ing)$/;\\\\\\\\nconst sfxAtOrBlOrIz = /(at|bl|iz)$/;\\\\\\\\nconst sfxEED = /^(.+?)eed$/;\\\\\\\\nconst sfxS = /^.+?[^s]s$/;\\\\\\\\nconst sfxSsesOrIes = /^.+?(ss|i)es$/;\\\\\\\\nconst sfxMultiConsonantLike = /([^aeiouylsz])\\\\\\\\\\\\\\\\1$/;\\\\\\\\nconst step2 =\\\\\\\\n  /^(.+?)(ational|tional|enci|anci|izer|bli|alli|entli|eli|ousli|ization|ation|ator|alism|iveness|fulness|ousness|aliti|iviti|biliti|logi)$/;\\\\\\\\nconst step3 = /^(.+?)(icate|ative|alize|iciti|ical|ful|ness)$/;\\\\\\\\nconst step4 =\\\\\\\\n  /^(.+?)(al|ance|ence|er|ic|able|ible|ant|ement|ment|ent|ou|ism|ate|iti|ous|ive|ize)$/;\\\\\\\\n\\\\\\\\n/**\\\\\\\\n * Get the stem from a given value.\\\\\\\\n *\\\\\\\\n * @param {string} value\\\\\\\\n *   Value to stem.\\\\\\\\n * @returns {string}\\\\\\\\n *   Stem for `value`\\\\\\\\n */\\\\\\\\n// eslint-disable-next-line complexity\\\\\\\\nfunction stemmer(value) {\\\\\\\\n  let result = value.toLowerCase();\\\\\\\\n\\\\\\\\n  // Exit early.\\\\\\\\n  if (result.length < 3) {\\\\\\\\n    return result;\\\\\\\\n  }\\\\\\\\n\\\\\\\\n  /** @type {boolean} */\\\\\\\\n  let firstCharacterWasLowerCaseY = false;\\\\\\\\n\\\\\\\\n  // Detect initial `y`, make sure it never matches.\\\\\\\\n  if (\\\\\\\\n    result.codePointAt(0) === 121 // Lowercase Y\\\\\\\\n  ) {\\\\\\\\n    firstCharacterWasLowerCaseY = true;\\\\\\\\n    result = \\\\\\\\\\\\\\\"Y\\\\\\\\\\\\\\\" + result.slice(1);\\\\\\\\n  }\\\\\\\\n\\\\\\\\n  // Step 1a.\\\\\\\\n  if (sfxSsesOrIes.test(result)) {\\\\\\\\n    // Remove last two characters.\\\\\\\\n    result = result.slice(0, -2);\\\\\\\\n  } else if (sfxS.test(result)) {\\\\\\\\n    // Remove last character.\\\\\\\\n    result = result.slice(0, -1);\\\\\\\\n  }\\\\\\\\n\\\\\\\\n  /** @type {RegExpMatchArray|null} */\\\\\\\\n  let match;\\\\\\\\n\\\\\\\\n  // Step 1b.\\\\\\\\n  if ((match = sfxEED.exec(result))) {\\\\\\\\n    if (gt0.test(match[1])) {\\\\\\\\n      // Remove last character.\\\\\\\\n      result = result.slice(0, -1);\\\\\\\\n    }\\\\\\\\n  } else if ((match = sfxEdOrIng.exec(result)) && vowelInStem.test(match[1])) {\\\\\\\\n    result = match[1];\\\\\\\\n\\\\\\\\n    if (sfxAtOrBlOrIz.test(result)) {\\\\\\\\n      // Append `e`.\\\\\\\\n      result += \\\\\\\\\\\\\\\"e\\\\\\\\\\\\\\\";\\\\\\\\n    } else if (sfxMultiConsonantLike.test(result)) {\\\\\\\\n      // Remove last character.\\\\\\\\n      result = result.slice(0, -1);\\\\\\\\n    } else if (consonantLike.test(result)) {\\\\\\\\n      // Append `e`.\\\\\\\\n      result += \\\\\\\\\\\\\\\"e\\\\\\\\\\\\\\\";\\\\\\\\n    }\\\\\\\\n  }\\\\\\\\n\\\\\\\\n  // Step 1c.\\\\\\\\n  if ((match = sfxY.exec(result)) && vowelInStem.test(match[1])) {\\\\\\\\n    // Remove suffixing `y` and append `i`.\\\\\\\\n    result = match[1] + \\\\\\\\\\\\\\\"i\\\\\\\\\\\\\\\";\\\\\\\\n  }\\\\\\\\n\\\\\\\\n  // Step 2.\\\\\\\\n  if ((match = step2.exec(result)) && gt0.test(match[1])) {\\\\\\\\n    result = match[1] + step2list[match[2]];\\\\\\\\n  }\\\\\\\\n\\\\\\\\n  // Step 3.\\\\\\\\n  if ((match = step3.exec(result)) && gt0.test(match[1])) {\\\\\\\\n    result = match[1] + step3list[match[2]];\\\\\\\\n  }\\\\\\\\n\\\\\\\\n  // Step 4.\\\\\\\\n  if ((match = step4.exec(result))) {\\\\\\\\n    if (gt1.test(match[1])) {\\\\\\\\n      result = match[1];\\\\\\\\n    }\\\\\\\\n  } else if ((match = sfxIon.exec(result)) && gt1.test(match[1])) {\\\\\\\\n    result = match[1];\\\\\\\\n  }\\\\\\\\n\\\\\\\\n  // Step 5.\\\\\\\\n  if (\\\\\\\\n    (match = sfxE.exec(result)) &&\\\\\\\\n    (gt1.test(match[1]) ||\\\\\\\\n      (eq1.test(match[1]) && !consonantLike.test(match[1])))\\\\\\\\n  ) {\\\\\\\\n    result = match[1];\\\\\\\\n  }\\\\\\\\n\\\\\\\\n  if (sfxLl.test(result) && gt1.test(result)) {\\\\\\\\n    result = result.slice(0, -1);\\\\\\\\n  }\\\\\\\\n\\\\\\\\n  // Turn initial `Y` back to `y`.\\\\\\\\n  if (firstCharacterWasLowerCaseY) {\\\\\\\\n    result = \\\\\\\\\\\\\\\"y\\\\\\\\\\\\\\\" + result.slice(1);\\\\\\\\n  }\\\\\\\\n\\\\\\\\n  return result;\\\\\\\\n}\\\\\\\\n\\\\\\\\n//////////////////////////////////////////////////////////////////////\\\\\\\\n///SPELLCHECK/////////////////////////////////////////////////////////\\\\\\\\nfunction levenshteinDistance(s, t, threshold) {\\\\\\\\n  const BIG_NUMBER = 10000;\\\\\\\\n  if (s == null || t == null) {\\\\\\\\n    return BIG_NUMBER;\\\\\\\\n  }\\\\\\\\n  if (threshold < 0) {\\\\\\\\n    return BIG_NUMBER;\\\\\\\\n  }\\\\\\\\n  let n = s.length;\\\\\\\\n  let m = t.length;\\\\\\\\n  if (Math.abs(n - m) >= threshold) {\\\\\\\\n    return BIG_NUMBER;\\\\\\\\n  }\\\\\\\\n\\\\\\\\n  // if one string is empty, the edit distance is necessarily the length of the other\\\\\\\\n  if (n == 0) {\\\\\\\\n    return m <= threshold ? m : BIG_NUMBER;\\\\\\\\n  } else if (m == 0) {\\\\\\\\n    return n <= threshold ? n : BIG_NUMBER;\\\\\\\\n  }\\\\\\\\n\\\\\\\\n  if (n > m) {\\\\\\\\n    // swap the two strings to consume less memory\\\\\\\\n    let temp = s;\\\\\\\\n    s = t;\\\\\\\\n    t = temp;\\\\\\\\n    let tempSize = n;\\\\\\\\n    n = m;\\\\\\\\n    m = tempSize;\\\\\\\\n  }\\\\\\\\n\\\\\\\\n  let p = Array.from({ length: n + 1 }, () => 0); // \\\\\\\\\\\\'previous\\\\\\\\\\\\' cost array, horizontally\\\\\\\\n  let d = Array.from({ length: n + 1 }, () => 0); // cost array, horizontally\\\\\\\\n  let _d; // placeholder to assist in swapping p and d\\\\\\\\n\\\\\\\\n  // fill in starting table values\\\\\\\\n  const boundary = Math.min(n, threshold) + 1;\\\\\\\\n  for (let i = 0; i < boundary; i++) {\\\\\\\\n    p[i] = i;\\\\\\\\n  }\\\\\\\\n  // these fills ensure that the value above the rightmost entry of our\\\\\\\\n  // stripe will be ignored in following loop iterations\\\\\\\\n  for (let i = boundary; i < p.length; i++) {\\\\\\\\n    p[i] = BIG_NUMBER;\\\\\\\\n  }\\\\\\\\n  for (let i = 0; i < d.length; i++) {\\\\\\\\n    d[i] = BIG_NUMBER;\\\\\\\\n  }\\\\\\\\n\\\\\\\\n  // iterates through t\\\\\\\\n  for (let j = 1; j <= m; j++) {\\\\\\\\n    const t_j = t.charAt(j - 1); // jth character of t\\\\\\\\n    d[0] = j;\\\\\\\\n\\\\\\\\n    // compute stripe indices, constrain to array size\\\\\\\\n    const min = Math.max(1, j - threshold);\\\\\\\\n    const max = j > BIG_NUMBER - threshold ? n : Math.min(n, j + threshold);\\\\\\\\n\\\\\\\\n    // the stripe may lead off of the table if s and t are of different sizes\\\\\\\\n    if (min > max) {\\\\\\\\n      return BIG_NUMBER;\\\\\\\\n    }\\\\\\\\n\\\\\\\\n    // ignore entry left of leftmost\\\\\\\\n    if (min > 1) {\\\\\\\\n      d[min - 1] = BIG_NUMBER;\\\\\\\\n    }\\\\\\\\n\\\\\\\\n    // iterates through [min, max] in s\\\\\\\\n    for (let i = min; i <= max; i++) {\\\\\\\\n      if (s.charAt(i - 1) == t_j) {\\\\\\\\n        // diagonally left and up\\\\\\\\n        d[i] = p[i - 1];\\\\\\\\n      } else {\\\\\\\\n        // 1 + minimum of cell to the left, to the top, diagonally left and up\\\\\\\\n        d[i] = 1 + Math.min(Math.min(d[i - 1], p[i]), p[i - 1]);\\\\\\\\n      }\\\\\\\\n    }\\\\\\\\n\\\\\\\\n    // copy current distance counts to \\\\\\\\\\\\'previous row\\\\\\\\\\\\' distance counts\\\\\\\\n    _d = p;\\\\\\\\n    p = d;\\\\\\\\n    d = _d;\\\\\\\\n  }\\\\\\\\n  // we don\\\\\\\\\\\\'t need to check for threshold here because we did it inside the loop\\\\\\\\n  return p[n] <= threshold ? p[n] : BIG_NUMBER;\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst spellcheckQueryProcessing = (query, dictionary) => {\\\\\\\\n  // Split text document into words\\\\\\\\n  const words = stemAndFilterQuery(query);\\\\\\\\n  const dictionaryArray = Object.keys(dictionary);\\\\\\\\n  // Iterate over each word in the text\\\\\\\\n  for (let i = 0; i < words.length; i++) {\\\\\\\\n    let word = words[i].toLowerCase().replace(/[^a-z0-9]/g, \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\");\\\\\\\\n\\\\\\\\n    // If the word is not in the dictionary, find the closest match\\\\\\\\n    if (!dictionary.hasOwnProperty(word)) {\\\\\\\\n      let closestMatch = undefined;\\\\\\\\n      let closestDistance = word.length;\\\\\\\\n      let allowedDistance = Math.min(word.length - 1, 3);\\\\\\\\n      // Iterate over each word in the dictionary\\\\\\\\n      if (word.length > 1) {\\\\\\\\n        for (let j = 0; j < dictionaryArray.length; j++) {\\\\\\\\n          let dictWord = dictionaryArray[j];\\\\\\\\n          let distance = levenshteinDistance(word, dictWord, allowedDistance);\\\\\\\\n\\\\\\\\n          // If the distance is less than the closest distance, update the closest match\\\\\\\\n          if (distance <= allowedDistance && distance < closestDistance) {\\\\\\\\n            closestMatch = dictWord;\\\\\\\\n            closestDistance = distance;\\\\\\\\n          }\\\\\\\\n        }\\\\\\\\n      }\\\\\\\\n      // Replace the misspelled word with the closest match\\\\\\\\n      words[i] = closestMatch;\\\\\\\\n    }\\\\\\\\n  }\\\\\\\\n  return words.filter((word) => !!word);\\\\\\\\n};\\\\\\\\n\\\\\\\\n//////////////////////////////////////////////////////////////////////\\\\\\\\n///INDEXER&SEARCH/////////////////////////////////////////////////////\\\\\\\\nconst fillDictionaryWith = (dict, text, id) => {\\\\\\\\n  let word = \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\";\\\\\\\\n  for (let i = 0; i < text.length; i++) {\\\\\\\\n    const char = text.charAt(i);\\\\\\\\n    const nextChar = text.charAt(i + 1);\\\\\\\\n    if (/\\\\\\\\\\\\\\\\w/.test(char) || (char === \\\\\\\\\\\\\\\".\\\\\\\\\\\\\\\" && /\\\\\\\\\\\\\\\\w/.test(nextChar))) {\\\\\\\\n      word += char.toLowerCase();\\\\\\\\n    } else if (word.length > 0) {\\\\\\\\n      const processedWord = applySynonym(stemmer(word));\\\\\\\\n      if (processedWord.length > 1 && !isStopWord(processedWord)) {\\\\\\\\n        const oldValue = dict[processedWord] || [];\\\\\\\\n        dict[processedWord] = [...oldValue, id];\\\\\\\\n      }\\\\\\\\n      word = \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\";\\\\\\\\n    }\\\\\\\\n  }\\\\\\\\n  const processedWord = applySynonym(stemmer(word));\\\\\\\\n  if (processedWord.length > 1 && !isStopWord(processedWord)) {\\\\\\\\n    const oldValue = dict[stemmer(processedWord)] || [];\\\\\\\\n    dict[stemmer(processedWord)] = [...oldValue, id];\\\\\\\\n  }\\\\\\\\n  return dict;\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst buildIndex = (posts) => {\\\\\\\\n  let index = {};\\\\\\\\n\\\\\\\\n  posts.forEach((post) => {\\\\\\\\n    const title = post.snapshot.name;\\\\\\\\n    const labels = post.snapshot.labels.join(\\\\\\\\\\\\\\\" \\\\\\\\\\\\\\\");\\\\\\\\n    const text = post.snapshot.description;\\\\\\\\n    const postType = post.snapshot.post_type;\\\\\\\\n    const authorId = post.author_id;\\\\\\\\n    const postText = `${authorId} ${postType} ${title} ${labels} ${text}`;\\\\\\\\n    index = fillDictionaryWith(index, postText, post.id);\\\\\\\\n  });\\\\\\\\n  return index;\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst stemAndFilterQuery = (query) => {\\\\\\\\n  return Object.keys(fillDictionaryWith({}, query));\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst sortSearchResult = (searchResult) => {\\\\\\\\n  // create a map to count the frequency of each element\\\\\\\\n  const freq = new Map();\\\\\\\\n  for (const num of searchResult) {\\\\\\\\n    freq.set(num, (freq.get(num) || 0) + 1);\\\\\\\\n  }\\\\\\\\n\\\\\\\\n  // define a custom comparison function to sort the array\\\\\\\\n  function compare(a, b) {\\\\\\\\n    // compare the frequency of the two elements\\\\\\\\n    const freqDiff = freq.get(b) - freq.get(a);\\\\\\\\n    if (freqDiff !== 0) {\\\\\\\\n      return freqDiff; // if they have different frequency, sort by frequency\\\\\\\\n    } else {\\\\\\\\n      return 0; // if they have the same frequency, leave as it is. Will be sorted by search term, by date\\\\\\\\n    }\\\\\\\\n  }\\\\\\\\n\\\\\\\\n  // sort the array using the custom comparison function\\\\\\\\n  searchResult.sort(compare);\\\\\\\\n  return searchResult.filter(\\\\\\\\n    (elem, index) => searchResult.indexOf(elem) === index\\\\\\\\n  );\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst search = (processedQueryArray, index) => {\\\\\\\\n  return sortSearchResult(\\\\\\\\n    processedQueryArray.flatMap((queryWord) => {\\\\\\\\n      const termSearchRes = index[queryWord].reverse();\\\\\\\\n      const termSortedSearchRes = sortSearchResult(termSearchRes);\\\\\\\\n      return termSortedSearchRes;\\\\\\\\n    })\\\\\\\\n  );\\\\\\\\n};\\\\\\\\n\\\\\\\\n//////////////////////////////////////////////////////////////////////\\\\\\\\n///UI&UX//////////////////////////////////////////////////////////////\\\\\\\\n//Run search and spelling computation every time the search bar modified\\\\\\\\n//but no more frequent than 1 time per 1.5 seconds\\\\\\\\nconst amountOfResultsToShowFirst = 5;\\\\\\\\n\\\\\\\\nconst buildPostsIndex = () => {\\\\\\\\n  return Near.asyncView(\\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"get_posts\\\\\\\\\\\\\\\").then(\\\\\\\\n    (posts) => {\\\\\\\\n      const index = buildIndex(posts);\\\\\\\\n      const data = posts.reduce((acc, post) => {\\\\\\\\n        acc[post.id] = post;\\\\\\\\n        return acc;\\\\\\\\n      }, {});\\\\\\\\n      return { index, data };\\\\\\\\n    }\\\\\\\\n  );\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst getProcessedPostsCached = () => {\\\\\\\\n  return useCache(() => buildPostsIndex(), \\\\\\\\\\\\\\\"processedPostsCached\\\\\\\\\\\\\\\");\\\\\\\\n};\\\\\\\\n\\\\\\\\nif (!state.interval) {\\\\\\\\n  let termStorage = \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\";\\\\\\\\n  Storage.privateSet(\\\\\\\\\\\\\\\"term\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\");\\\\\\\\n  setInterval(() => {\\\\\\\\n    const currentInput = Storage.privateGet(\\\\\\\\\\\\\\\"term\\\\\\\\\\\\\\\");\\\\\\\\n    if (currentInput !== termStorage) {\\\\\\\\n      termStorage = currentInput;\\\\\\\\n      computeResults(termStorage);\\\\\\\\n    }\\\\\\\\n  }, 1500);\\\\\\\\n  State.update({\\\\\\\\n    interval: true,\\\\\\\\n  });\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst computeResults = (term) => {\\\\\\\\n  const start = new Date().getTime();\\\\\\\\n  const processedPostsCached = useCache(\\\\\\\\n    () =>\\\\\\\\n      buildPostsIndex().then((processedPosts) => {\\\\\\\\n        // Run query first time posts retrieved\\\\\\\\n        const query = term;\\\\\\\\n        const processedQuery = spellcheckQueryProcessing(\\\\\\\\n          query,\\\\\\\\n          processedPosts.index\\\\\\\\n        );\\\\\\\\n        const searchResult = search(processedQuery, processedPosts.index);\\\\\\\\n        console.log(processedQuery);\\\\\\\\n        console.log(searchResult);\\\\\\\\n        State.update({\\\\\\\\n          searchResult,\\\\\\\\n          shownSearchResults: searchResult.slice(0, amountOfResultsToShowFirst),\\\\\\\\n          processedQuery,\\\\\\\\n          loading: false,\\\\\\\\n        });\\\\\\\\n        return processedPosts;\\\\\\\\n      }),\\\\\\\\n    \\\\\\\\\\\\\\\"processedPostsCached\\\\\\\\\\\\\\\"\\\\\\\\n  );\\\\\\\\n  if (processedPostsCached) {\\\\\\\\n    // Run query every other time after data retrieved and cached\\\\\\\\n    const query = term;\\\\\\\\n    const processedQuery = spellcheckQueryProcessing(\\\\\\\\n      query,\\\\\\\\n      processedPostsCached.index\\\\\\\\n    );\\\\\\\\n    const searchResult = search(processedQuery, processedPostsCached.index);\\\\\\\\n    console.log(processedQuery);\\\\\\\\n    console.log(searchResult);\\\\\\\\n    State.update({\\\\\\\\n      searchResult,\\\\\\\\n      shownSearchResults: searchResult.slice(0, 10),\\\\\\\\n      processedQuery,\\\\\\\\n      loading: false,\\\\\\\\n    });\\\\\\\\n  }\\\\\\\\n  const end = new Date().getTime();\\\\\\\\n  console.log(\\\\\\\\\\\\\\\"search time: \\\\\\\\\\\\\\\", end - start);\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst updateInput = (term) => {\\\\\\\\n  Storage.privateSet(\\\\\\\\\\\\\\\"term\\\\\\\\\\\\\\\", term);\\\\\\\\n  State.update({\\\\\\\\n    term,\\\\\\\\n    loading: true,\\\\\\\\n  });\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst getSearchResultsKeywordsFor = (postId) => {\\\\\\\\n  const index = getProcessedPostsCached().index;\\\\\\\\n  return state.processedQuery.filter((queryWord) => {\\\\\\\\n    return index[queryWord].includes(postId);\\\\\\\\n  });\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst showMoreSearchResults = () => {\\\\\\\\n  const shownSearchResults = state.shownSearchResults || [];\\\\\\\\n  const newShownSearchResults = state.searchResult.slice(\\\\\\\\n    0,\\\\\\\\n    shownSearchResults.length + amountOfResultsToShowFirst\\\\\\\\n  );\\\\\\\\n  State.update({ shownSearchResults: newShownSearchResults });\\\\\\\\n};\\\\\\\\n\\\\\\\\nreturn (\\\\\\\\n  <>\\\\\\\\n    <div className=\\\\\\\\\\\\\\\"d-flex flex-row gap-4\\\\\\\\\\\\\\\">\\\\\\\\n      <div className=\\\\\\\\\\\\\\\"d-flex flex-row position-relative w-25\\\\\\\\\\\\\\\">\\\\\\\\n        <div className=\\\\\\\\\\\\\\\"position-absolute d-flex ps-3 flex-column h-100 justify-center\\\\\\\\\\\\\\\">\\\\\\\\n          {state.loading ? (\\\\\\\\n            <span\\\\\\\\n              className=\\\\\\\\\\\\\\\"spinner-grow spinner-grow-sm m-auto\\\\\\\\\\\\\\\"\\\\\\\\n              role=\\\\\\\\\\\\\\\"status\\\\\\\\\\\\\\\"\\\\\\\\n              aria-hidden=\\\\\\\\\\\\\\\"true\\\\\\\\\\\\\\\"\\\\\\\\n            />\\\\\\\\n          ) : (\\\\\\\\n            <i class=\\\\\\\\\\\\\\\"bi bi-search m-auto\\\\\\\\\\\\\\\"></i>\\\\\\\\n          )}\\\\\\\\n        </div>\\\\\\\\n        <input\\\\\\\\n          type=\\\\\\\\\\\\\\\"search\\\\\\\\\\\\\\\"\\\\\\\\n          className=\\\\\\\\\\\\\\\"ps-5 form-control border border-0 bg-light\\\\\\\\\\\\\\\"\\\\\\\\n          value={state.term ?? \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\"}\\\\\\\\n          onChange={(e) => updateInput(e.target.value)}\\\\\\\\n          placeholder={props.placeholder ?? `Search Posts`}\\\\\\\\n        />\\\\\\\\n      </div>\\\\\\\\n      <div class=\\\\\\\\\\\\\\\"dropdown\\\\\\\\\\\\\\\">\\\\\\\\n        <button\\\\\\\\n          class=\\\\\\\\\\\\\\\"btn btn-light dropdown-toggle\\\\\\\\\\\\\\\"\\\\\\\\n          type=\\\\\\\\\\\\\\\"button\\\\\\\\\\\\\\\"\\\\\\\\n          data-bs-toggle=\\\\\\\\\\\\\\\"dropdown\\\\\\\\\\\\\\\"\\\\\\\\n          aria-expanded=\\\\\\\\\\\\\\\"false\\\\\\\\\\\\\\\"\\\\\\\\n        >\\\\\\\\n          Sort\\\\\\\\n        </button>\\\\\\\\n        <ul class=\\\\\\\\\\\\\\\"dropdown-menu px-2 shadow\\\\\\\\\\\\\\\">\\\\\\\\n          <li>\\\\\\\\n            <a\\\\\\\\n              style={{ borderRadius: \\\\\\\\\\\\\\\"5px\\\\\\\\\\\\\\\" }}\\\\\\\\n              class=\\\\\\\\\\\\\\\"dropdown-item link-underline link-underline-opacity-0\\\\\\\\\\\\\\\"\\\\\\\\n            >\\\\\\\\n              Latest\\\\\\\\n            </a>\\\\\\\\n          </li>\\\\\\\\n          <li>\\\\\\\\n            <a\\\\\\\\n              style={{ borderRadius: \\\\\\\\\\\\\\\"5px\\\\\\\\\\\\\\\" }}\\\\\\\\n              class=\\\\\\\\\\\\\\\"dropdown-item link-underline link-underline-opacity-0\\\\\\\\\\\\\\\"\\\\\\\\n            >\\\\\\\\n              Hottest\\\\\\\\n            </a>\\\\\\\\n          </li>\\\\\\\\n          <li>\\\\\\\\n            <a\\\\\\\\n              style={{ borderRadius: \\\\\\\\\\\\\\\"5px\\\\\\\\\\\\\\\" }}\\\\\\\\n              class=\\\\\\\\\\\\\\\"dropdown-item link-underline link-underline-opacity-0\\\\\\\\\\\\\\\"\\\\\\\\n            >\\\\\\\\n              All replies\\\\\\\\n            </a>\\\\\\\\n          </li>\\\\\\\\n        </ul>\\\\\\\\n      </div>\\\\\\\\n      <div class=\\\\\\\\\\\\\\\"dropdown\\\\\\\\\\\\\\\">\\\\\\\\n        <Widget\\\\\\\\n          // TODO: LEGACY.\\\\\\\\n          src={\\\\\\\\\\\\\\\"devhub.near/widget/gigs-board.feature.post-search.by-author\\\\\\\\\\\\\\\"}\\\\\\\\n          props={{\\\\\\\\n            authorQuery: props.authorQuery,\\\\\\\\n            onAuthorSearch: props.onAuthorSearch,\\\\\\\\n            nearDevGovGigsWidgetsAccountId: nearDevGovGigsWidgetsAccountId,\\\\\\\\n            nearDevGovGigsContractAccountId: nearDevGovGigsContractAccountId,\\\\\\\\n          }}\\\\\\\\n        />\\\\\\\\n      </div>\\\\\\\\n      <div>\\\\\\\\n        <Widget\\\\\\\\n          // TODO: LEGACY.\\\\\\\\n          src={\\\\\\\\\\\\\\\"devhub.near/widget/gigs-board.feature.post-search.by-tag\\\\\\\\\\\\\\\"}\\\\\\\\n          props={{\\\\\\\\n            tagQuery: props.tagQuery,\\\\\\\\n            onTagSearch: props.onTagSearch,\\\\\\\\n            nearDevGovGigsWidgetsAccountId: nearDevGovGigsWidgetsAccountId,\\\\\\\\n            nearDevGovGigsContractAccountId: nearDevGovGigsContractAccountId,\\\\\\\\n          }}\\\\\\\\n        />\\\\\\\\n      </div>\\\\\\\\n      <div className=\\\\\\\\\\\\\\\"d-flex flex-row-reverse flex-grow-1\\\\\\\\\\\\\\\">\\\\\\\\n        {props.children}\\\\\\\\n      </div>\\\\\\\\n    </div>\\\\\\\\n    {state.processedQuery &&\\\\\\\\n      state.processedQuery.length > 0 &&\\\\\\\\n      state.term.toLowerCase().trim() !== state.processedQuery.join(\\\\\\\\\\\\\\\" \\\\\\\\\\\\\\\") && (\\\\\\\\n        <div class=\\\\\\\\\\\\\\\"mb-2\\\\\\\\\\\\\\\" style={{ \\\\\\\\\\\\\\\"font-family\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"monospace\\\\\\\\\\\\\\\" }}>\\\\\\\\n          Looking for\\\\\\\\n          <strong>{state.processedQuery.join(\\\\\\\\\\\\\\\" \\\\\\\\\\\\\\\")}</strong>:\\\\\\\\n        </div>\\\\\\\\n      )}\\\\\\\\n    {state.term && state.term.length > 1 && state.searchResult ? (\\\\\\\\n      <Widget\\\\\\\\n        src={\\\\\\\\\\\\\\\"devhub.near/widget/devhub.entity.post.List\\\\\\\\\\\\\\\"}\\\\\\\\n        props={{\\\\\\\\n          searchResult: {\\\\\\\\n            postIds: state.searchResult,\\\\\\\\n            keywords: Object.fromEntries(\\\\\\\\n              state.searchResult.map((postId) => {\\\\\\\\n                return [postId, getSearchResultsKeywordsFor(postId)];\\\\\\\\n              })\\\\\\\\n            ),\\\\\\\\n          },\\\\\\\\n          recency: props.recency,\\\\\\\\n          tag: props.tag,\\\\\\\\n          author: props.author,\\\\\\\\n        }}\\\\\\\\n        key={key}\\\\\\\\n      />\\\\\\\\n    ) : (\\\\\\\\n      <Widget\\\\\\\\n        src={\\\\\\\\\\\\\\\"devhub.near/widget/devhub.entity.post.List\\\\\\\\\\\\\\\"}\\\\\\\\n        props={{\\\\\\\\n          recency: props.recency,\\\\\\\\n          tag: props.tag,\\\\\\\\n          author: props.author,\\\\\\\\n          transactionHashes: props.transactionHashes,\\\\\\\\n        }}\\\\\\\\n        key={key}\\\\\\\\n      />\\\\\\\\n    )}\\\\\\\\n  </>\\\\\\\\n);\\\\\\\\n\"}, \"devhub.entity.post.Postv2\": {\"\": \"const { getPost } =\\\\\\\\n  VM.require(\\\\\\\\\\\\\\\"devhub.near/widget/core.adapter.devhub-contract\\\\\\\\\\\\\\\") ||\\\\\\\\n  (() => {});\\\\\\\\n\\\\\\\\nconst { postKey, template } = props;\\\\\\\\n\\\\\\\\nconst post = getPost({ post_id: parseInt(postKey) });\\\\\\\\n\\\\\\\\nif (!post) {\\\\\\\\n  return <div>Loading ...</div>;\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst Template = template || (() => <></>);\\\\\\\\n\\\\\\\\nreturn (\\\\\\\\n  <Template\\\\\\\\n    labels={post.snapshot.labels}\\\\\\\\n    data={JSON.parse(post.snapshot.description || \\\\\\\\\\\\\\\"null\\\\\\\\\\\\\\\") || {}}\\\\\\\\n  />\\\\\\\\n);\\\\\\\\n\"}, \"devhub.components.atom.Tag\": {\"\": \"const black = props.black;\\\\\\\\n\\\\\\\\nconst Span = styled.span`\\\\\\\\n  color: ${black ? \\\\\\\\\\\\\\\"#818181\\\\\\\\\\\\\\\" : \\\\\\\\\\\\\\\"#00ec97\\\\\\\\\\\\\\\"};\\\\\\\\n  font-size: 16px;\\\\\\\\n  font-style: normal;\\\\\\\\n  font-weight: 700;\\\\\\\\n  line-height: 20px; /* 125% */\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst Tag = ({ tag }) => <Span>{tag}</Span>;\\\\\\\\n\\\\\\\\nreturn Tag(props);\\\\\\\\n\"}, \"devhub.entity.post.History\": {\"\": \"/*\\\\\\\\n---props---\\\\\\\\nprops.post: {};\\\\\\\\nprops.id: number;\\\\\\\\nprops.newTab: boolean;\\\\\\\\nprops.timestamp: number;\\\\\\\\nprops.referral: any;\\\\\\\\n*/\\\\\\\\n\\\\\\\\n/* INCLUDE: \\\\\\\\\\\\\\\"common.jsx\\\\\\\\\\\\\\\" */\\\\\\\\nconst nearDevGovGigsContractAccountId =\\\\\\\\n  props.nearDevGovGigsContractAccountId ||\\\\\\\\n  (context.widgetSrc ?? \\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\").split(\\\\\\\\\\\\\\\"/\\\\\\\\\\\\\\\", 1)[0];\\\\\\\\n\\\\\\\\nconst nearDevGovGigsWidgetsAccountId =\\\\\\\\n  props.nearDevGovGigsWidgetsAccountId ||\\\\\\\\n  (context.widgetSrc ?? \\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\").split(\\\\\\\\\\\\\\\"/\\\\\\\\\\\\\\\", 1)[0];\\\\\\\\n\\\\\\\\nfunction widget(widgetName, widgetProps, key) {\\\\\\\\n  widgetProps = {\\\\\\\\n    ...widgetProps,\\\\\\\\n    nearDevGovGigsContractAccountId: props.nearDevGovGigsContractAccountId,\\\\\\\\n    nearDevGovGigsWidgetsAccountId: props.nearDevGovGigsWidgetsAccountId,\\\\\\\\n    referral: props.referral,\\\\\\\\n  };\\\\\\\\n\\\\\\\\n  return (\\\\\\\\n    <Widget\\\\\\\\n      src={`${nearDevGovGigsWidgetsAccountId}/widget/gigs-board.${widgetName}`}\\\\\\\\n      props={widgetProps}\\\\\\\\n      key={key}\\\\\\\\n    />\\\\\\\\n  );\\\\\\\\n}\\\\\\\\n\\\\\\\\nfunction href(widgetName, linkProps) {\\\\\\\\n  linkProps = { ...linkProps };\\\\\\\\n\\\\\\\\n  if (props.nearDevGovGigsContractAccountId) {\\\\\\\\n    linkProps.nearDevGovGigsContractAccountId =\\\\\\\\n      props.nearDevGovGigsContractAccountId;\\\\\\\\n  }\\\\\\\\n\\\\\\\\n  if (props.nearDevGovGigsWidgetsAccountId) {\\\\\\\\n    linkProps.nearDevGovGigsWidgetsAccountId =\\\\\\\\n      props.nearDevGovGigsWidgetsAccountId;\\\\\\\\n  }\\\\\\\\n\\\\\\\\n  if (props.referral) {\\\\\\\\n    linkProps.referral = props.referral;\\\\\\\\n  }\\\\\\\\n\\\\\\\\n  const linkPropsQuery = Object.entries(linkProps)\\\\\\\\n    .filter(([_key, nullable]) => (nullable ?? null) !== null)\\\\\\\\n    .map(([key, value]) => `${key}=${value}`)\\\\\\\\n    .join(\\\\\\\\\\\\\\\"&\\\\\\\\\\\\\\\");\\\\\\\\n\\\\\\\\n  return `/#/${nearDevGovGigsWidgetsAccountId}/widget/gigs-board.pages.${widgetName}${\\\\\\\\n    linkPropsQuery ? \\\\\\\\\\\\\\\"?\\\\\\\\\\\\\\\" : \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\"\\\\\\\\n  }${linkPropsQuery}`;\\\\\\\\n}\\\\\\\\n/* END_INCLUDE: \\\\\\\\\\\\\\\"common.jsx\\\\\\\\\\\\\\\" */\\\\\\\\n\\\\\\\\nconst postId = props.post.id ?? (props.id ? parseInt(props.id) : 0);\\\\\\\\nconst post =\\\\\\\\n  props.post ??\\\\\\\\n  Near.view(nearDevGovGigsContractAccountId, \\\\\\\\\\\\\\\"get_post\\\\\\\\\\\\\\\", {\\\\\\\\n    post_id: postId,\\\\\\\\n  });\\\\\\\\nif (!post || !post.snapshot_history) {\\\\\\\\n  return <div class=\\\\\\\\\\\\\\\"bi bi-clock-history px-2\\\\\\\\\\\\\\\"></div>;\\\\\\\\n}\\\\\\\\nconst referral = props.referral;\\\\\\\\n\\\\\\\\nfunction readableDate(timestamp) {\\\\\\\\n  var a = new Date(timestamp);\\\\\\\\n  return (\\\\\\\\n    a.toDateString() +\\\\\\\\n    \\\\\\\\\\\\\\\" \\\\\\\\\\\\\\\" +\\\\\\\\n    a.toLocaleTimeString([], { hour: \\\\\\\\\\\\\\\"2-digit\\\\\\\\\\\\\\\", minute: \\\\\\\\\\\\\\\"2-digit\\\\\\\\\\\\\\\" })\\\\\\\\n  ).substring(4);\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst currentTimestamp = props.timestamp ?? post.snapshot.timestamp;\\\\\\\\nconst snapshot = post.snapshot;\\\\\\\\nconst snapshotHistory = post.snapshot_history\\\\\\\\n  ? Array.from(post.snapshot_history)\\\\\\\\n  : [];\\\\\\\\n\\\\\\\\nsnapshotHistory.push(snapshot);\\\\\\\\nsnapshotHistory.reverse();\\\\\\\\n\\\\\\\\nconst history = (\\\\\\\\n  <div class=\\\\\\\\\\\\\\\"btn-group\\\\\\\\\\\\\\\" role=\\\\\\\\\\\\\\\"group\\\\\\\\\\\\\\\">\\\\\\\\n    <a\\\\\\\\n      class=\\\\\\\\\\\\\\\"card-link\\\\\\\\\\\\\\\"\\\\\\\\n      role=\\\\\\\\\\\\\\\"button\\\\\\\\\\\\\\\"\\\\\\\\n      title=\\\\\\\\\\\\\\\"Post History\\\\\\\\\\\\\\\"\\\\\\\\n      data-bs-toggle=\\\\\\\\\\\\\\\"dropdown\\\\\\\\\\\\\\\"\\\\\\\\n      aria-expanded=\\\\\\\\\\\\\\\"false\\\\\\\\\\\\\\\"\\\\\\\\n      type=\\\\\\\\\\\\\\\"button\\\\\\\\\\\\\\\"\\\\\\\\n    >\\\\\\\\n      <div class=\\\\\\\\\\\\\\\"bi bi-clock-history px-2\\\\\\\\\\\\\\\"></div>\\\\\\\\n    </a>\\\\\\\\n    <ul class=\\\\\\\\\\\\\\\"dropdown-menu\\\\\\\\\\\\\\\">\\\\\\\\n      <a\\\\\\\\n        class=\\\\\\\\\\\\\\\"d-flex text-muted\\\\\\\\\\\\\\\"\\\\\\\\n        style={{ fontSize: \\\\\\\\\\\\\\\"12px\\\\\\\\\\\\\\\", textDecoration: \\\\\\\\\\\\\\\"none\\\\\\\\\\\\\\\", cursor: \\\\\\\\\\\\\\\"default\\\\\\\\\\\\\\\" }}\\\\\\\\n      >\\\\\\\\n        <a\\\\\\\\n          style={{\\\\\\\\n            textAlign: \\\\\\\\\\\\\\\"center\\\\\\\\\\\\\\\",\\\\\\\\n            minWidth: \\\\\\\\\\\\\\\"290px\\\\\\\\\\\\\\\",\\\\\\\\n            maxWidth: \\\\\\\\\\\\\\\"290px\\\\\\\\\\\\\\\",\\\\\\\\n          }}\\\\\\\\n        >\\\\\\\\n          Edit History\\\\\\\\n        </a>\\\\\\\\n        <a style={{ marginRight: \\\\\\\\\\\\\\\"8px\\\\\\\\\\\\\\\" }}>Compare</a>\\\\\\\\n      </a>\\\\\\\\n      {snapshotHistory.map((item) => {\\\\\\\\n        if (item === undefined) return;\\\\\\\\n        return (\\\\\\\\n          <li style={{ display: \\\\\\\\\\\\\\\"flex\\\\\\\\\\\\\\\" }}>\\\\\\\\n            <div\\\\\\\\n              style={{\\\\\\\\n                minWidth: \\\\\\\\\\\\\\\"290px\\\\\\\\\\\\\\\",\\\\\\\\n                maxWidth: \\\\\\\\\\\\\\\"290px\\\\\\\\\\\\\\\",\\\\\\\\n              }}\\\\\\\\n            >\\\\\\\\n              <a\\\\\\\\n                class=\\\\\\\\\\\\\\\"dropdown-item\\\\\\\\\\\\\\\"\\\\\\\\n                href={href(\\\\\\\\\\\\\\\"Post\\\\\\\\\\\\\\\", {\\\\\\\\n                  id: postId,\\\\\\\\n                  timestamp: item.timestamp,\\\\\\\\n                  compareTimestamp: null,\\\\\\\\n                  referral,\\\\\\\\n                })}\\\\\\\\n                target={props.newTab ? \\\\\\\\\\\\\\\"_blank\\\\\\\\\\\\\\\" : undefined}\\\\\\\\n              >\\\\\\\\n                {readableDate(item.timestamp / 1000000)}\\\\\\\\n\\\\\\\\n                <Widget\\\\\\\\n                  src=\\\\\\\\\\\\\\\"mob.near/widget/ProfileImage\\\\\\\\\\\\\\\"\\\\\\\\n                  props={{\\\\\\\\n                    accountId: item.editor_id,\\\\\\\\n                    style: {\\\\\\\\n                      width: \\\\\\\\\\\\\\\"1.25em\\\\\\\\\\\\\\\",\\\\\\\\n                      height: \\\\\\\\\\\\\\\"1.25em\\\\\\\\\\\\\\\",\\\\\\\\n                    },\\\\\\\\n                    imageStyle: {\\\\\\\\n                      transform: \\\\\\\\\\\\\\\"translateY(-12.5%)\\\\\\\\\\\\\\\",\\\\\\\\n                    },\\\\\\\\n                  }}\\\\\\\\n                />\\\\\\\\n                {post.author_id.substring(0, 8)}\\\\\\\\n              </a>\\\\\\\\n            </div>\\\\\\\\n            <a\\\\\\\\n              class=\\\\\\\\\\\\\\\"dropdown-item\\\\\\\\\\\\\\\"\\\\\\\\n              href={href(\\\\\\\\\\\\\\\"Post\\\\\\\\\\\\\\\", {\\\\\\\\n                id: postId,\\\\\\\\n                timestamp: currentTimestamp,\\\\\\\\n                compareTimestamp: item.timestamp,\\\\\\\\n                referral,\\\\\\\\n              })}\\\\\\\\n            >\\\\\\\\n              <i class=\\\\\\\\\\\\\\\"bi bi-file-earmark-diff\\\\\\\\\\\\\\\" />\\\\\\\\n            </a>\\\\\\\\n          </li>\\\\\\\\n        );\\\\\\\\n      })}\\\\\\\\n    </ul>\\\\\\\\n  </div>\\\\\\\\n);\\\\\\\\n\\\\\\\\nreturn history;\\\\\\\\n\"}, \"devhub.components.atom.Icon\": {\"\": \"const svgIconsByVariant = {\\\\\\\\n  floppy_drive: (elementProps) => (\\\\\\\\n    <svg\\\\\\\\n      fill=\\\\\\\\\\\\\\\"#ffffff\\\\\\\\\\\\\\\"\\\\\\\\n      version=\\\\\\\\\\\\\\\"1.1\\\\\\\\\\\\\\\"\\\\\\\\n      xmlns=\\\\\\\\\\\\\\\"http://www.w3.org/2000/svg\\\\\\\\\\\\\\\"\\\\\\\\n      width=\\\\\\\\\\\\\\\"16px\\\\\\\\\\\\\\\"\\\\\\\\n      height=\\\\\\\\\\\\\\\"16px\\\\\\\\\\\\\\\"\\\\\\\\n      viewBox=\\\\\\\\\\\\\\\"0 0 353.073 353.073\\\\\\\\\\\\\\\"\\\\\\\\n      {...elementProps}\\\\\\\\n    >\\\\\\\\n      <g>\\\\\\\\n        <path\\\\\\\\n          d={[\\\\\\\\n            \\\\\\\\\\\\\\\"M340.969,0H12.105C5.423,0,0,5.423,0,12.105v328.863c0,6.68,5.423,12.105,12.105,12.105h328.864\\\\\\\\\\\\\\\",\\\\\\\\n            \\\\\\\\\\\\\\\"c6.679,0,12.104-5.426,12.104-12.105V12.105C353.073,5.423,347.647,0,340.969,0z\\\\\\\\\\\\\\\",\\\\\\\\n            \\\\\\\\\\\\\\\"M67.589,18.164h217.895v101.884H67.589V18.164z\\\\\\\\\\\\\\\",\\\\\\\\n            \\\\\\\\\\\\\\\"M296.082,327.35H57.003V176.537h239.079V327.35z\\\\\\\\\\\\\\\",\\\\\\\\n            \\\\\\\\\\\\\\\"M223.953,33.295h30.269v72.638h-30.269V33.295z\\\\\\\\\\\\\\\",\\\\\\\\n            \\\\\\\\\\\\\\\"M274.135,213.863H78.938v-12.105\\\\\\\\\\\\\\\",\\\\\\\\n            \\\\\\\\\\\\\\\"h195.197V213.863z\\\\\\\\\\\\\\\",\\\\\\\\n            \\\\\\\\\\\\\\\"M274.135,256.231H78.938v-12.105h195.197V256.231z\\\\\\\\\\\\\\\",\\\\\\\\n            \\\\\\\\\\\\\\\"M274.135,297.087H78.938v-12.105h195.197V297.087z\\\\\\\\\\\\\\\",\\\\\\\\n          ].join(\\\\\\\\\\\\\\\" \\\\\\\\\\\\\\\")}\\\\\\\\n        />\\\\\\\\n      </g>\\\\\\\\n    </svg>\\\\\\\\n  ),\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst iconsByType = {\\\\\\\\n  bootstrap_icon: ({ className, variant, ...otherProps }) => (\\\\\\\\n    <i className={`bi ${variant} ${className}`} {...otherProps} />\\\\\\\\n  ),\\\\\\\\n\\\\\\\\n  svg_icon: ({ variant, ...elementProps }) =>\\\\\\\\n    svgIconsByVariant[variant](elementProps),\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst Icon = ({ type, ...otherProps }) =>\\\\\\\\n  typeof iconsByType[type] === \\\\\\\\\\\\\\\"function\\\\\\\\\\\\\\\"\\\\\\\\n    ? iconsByType[type](otherProps)\\\\\\\\n    : null;\\\\\\\\n\\\\\\\\nreturn Icon(props);\\\\\\\\n\"}, \"devhub.page.community.index\": {\"\": \"const Button = styled.button`\\\\\\\\n  height: 40px;\\\\\\\\n  font-size: 14px;\\\\\\\\n  border-color: #e3e3e0;\\\\\\\\n  background-color: #ffffff;\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst Banner = styled.div`\\\\\\\\n  max-width: 100%;\\\\\\\\n  min-height: 240px;\\\\\\\\n  height: 240px;\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst CenteredMessage = styled.div`\\\\\\\\n  display: flex;\\\\\\\\n  flex-direction: column;\\\\\\\\n  justify-content: center;\\\\\\\\n  align-items: center;\\\\\\\\n  width: 100%;\\\\\\\\n  height: ${(p) => p.height ?? \\\\\\\\\\\\\\\"100%\\\\\\\\\\\\\\\"};\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst NavUnderline = styled.ul`\\\\\\\\n  cursor: pointer;\\\\\\\\n  a {\\\\\\\\n    color: #151515;\\\\\\\\n    text-decoration: none;\\\\\\\\n  }\\\\\\\\n\\\\\\\\n  a.active {\\\\\\\\n    font-weight: bold;\\\\\\\\n    border-bottom: 4px solid #00ec97;\\\\\\\\n  }\\\\\\\\n  border-bottom: 1px solid #cccccc;\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst { tab, permissions, community, view } = props;\\\\\\\\n\\\\\\\\nconst { href } = VM.require(\\\\\\\\\\\\\\\"devhub.near/widget/core.lib.url\\\\\\\\\\\\\\\");\\\\\\\\n\\\\\\\\nif (!href) {\\\\\\\\n  return <></>;\\\\\\\\n}\\\\\\\\n\\\\\\\\nif (!tab) {\\\\\\\\n  tab = \\\\\\\\\\\\\\\"Activity\\\\\\\\\\\\\\\";\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst [isLinkCopied, setLinkCopied] = useState(false);\\\\\\\\n\\\\\\\\nconst tabs = [\\\\\\\\n  {\\\\\\\\n    title: \\\\\\\\\\\\\\\"Activity\\\\\\\\\\\\\\\",\\\\\\\\n    view: \\\\\\\\\\\\\\\"devhub.near/widget/devhub.entity.community.Activity\\\\\\\\\\\\\\\",\\\\\\\\n    params: {\\\\\\\\n      handle: community.handle,\\\\\\\\n    },\\\\\\\\n  },\\\\\\\\n  {\\\\\\\\n    title: \\\\\\\\\\\\\\\"Teams\\\\\\\\\\\\\\\",\\\\\\\\n    view: \\\\\\\\\\\\\\\"devhub.near/widget/devhub.entity.community.Teams\\\\\\\\\\\\\\\",\\\\\\\\n    params: {\\\\\\\\n      handle: community.handle,\\\\\\\\n    },\\\\\\\\n  },\\\\\\\\n];\\\\\\\\n\\\\\\\\n(community.addons || []).map((addon) => {\\\\\\\\n  addon.enabled &&\\\\\\\\n    tabs.push({\\\\\\\\n      title: addon.display_name,\\\\\\\\n      view: \\\\\\\\\\\\\\\"devhub.near/widget/devhub.page.addon\\\\\\\\\\\\\\\",\\\\\\\\n      params: { addon },\\\\\\\\n    });\\\\\\\\n});\\\\\\\\n\\\\\\\\nconst onShareClick = () =>\\\\\\\\n  clipboard\\\\\\\\n    .writeText(\\\\\\\\n      href({\\\\\\\\n        gateway: \\\\\\\\\\\\\\\"near.org\\\\\\\\\\\\\\\",\\\\\\\\n        widgetSrc: \\\\\\\\\\\\\\\"devhub.near/widget/app\\\\\\\\\\\\\\\",\\\\\\\\n        params: { page: \\\\\\\\\\\\\\\"community\\\\\\\\\\\\\\\", handle: community.handle },\\\\\\\\n      })\\\\\\\\n    )\\\\\\\\n    .then(setLinkCopied(true));\\\\\\\\n\\\\\\\\nlet currentTab = tabs.find((it) => it.title === tab);\\\\\\\\n\\\\\\\\nconst CommunityName = styled.span`\\\\\\\\n  color: #151515;\\\\\\\\n  font-size: 2.25rem;\\\\\\\\n  font-style: normal;\\\\\\\\n  font-weight: 700;\\\\\\\\n  line-height: 100%; /* 48px */\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst CommunityDetails = styled.span`\\\\\\\\n  color: #818181;\\\\\\\\n  font-size: 1rem;\\\\\\\\n  font-style: normal;\\\\\\\\n  font-weight: 400;\\\\\\\\n  line-height: 120%; /* 28.8px */\\\\\\\\n`;\\\\\\\\n\\\\\\\\nfunction trimHttps(url) {\\\\\\\\n  if (url.startsWith(\\\\\\\\\\\\\\\"https://\\\\\\\\\\\\\\\")) {\\\\\\\\n    return url.substring(8);\\\\\\\\n  }\\\\\\\\n  return url;\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst socialLinks = [\\\\\\\\n  ...((community.website_url?.length ?? 0) > 0\\\\\\\\n    ? [\\\\\\\\n        {\\\\\\\\n          href: `https://${trimHttps(community.website_url)}`,\\\\\\\\n          iconClass: \\\\\\\\\\\\\\\"bi bi-globe\\\\\\\\\\\\\\\",\\\\\\\\n          name: trimHttps(community.website_url),\\\\\\\\n        },\\\\\\\\n      ]\\\\\\\\n    : []),\\\\\\\\n\\\\\\\\n  ...((community.github_handle?.length ?? 0) > 0\\\\\\\\n    ? [\\\\\\\\n        {\\\\\\\\n          href: `https://github.com/${community.github_handle}`,\\\\\\\\n          iconClass: \\\\\\\\\\\\\\\"bi bi-github\\\\\\\\\\\\\\\",\\\\\\\\n          name: community.github_handle,\\\\\\\\n        },\\\\\\\\n      ]\\\\\\\\n    : []),\\\\\\\\n\\\\\\\\n  ...((community.twitter_handle?.length ?? 0) > 0\\\\\\\\n    ? [\\\\\\\\n        {\\\\\\\\n          href: `https://twitter.com/${community.twitter_handle}`,\\\\\\\\n          iconClass: \\\\\\\\\\\\\\\"bi bi-twitter\\\\\\\\\\\\\\\",\\\\\\\\n          name: community.twitter_handle,\\\\\\\\n        },\\\\\\\\n      ]\\\\\\\\n    : []),\\\\\\\\n\\\\\\\\n  ...(community.telegram_handle.length > 0\\\\\\\\n    ? community.telegram_handle.map((telegram_handle) => ({\\\\\\\\n        href: `https://t.me/${telegram_handle}`,\\\\\\\\n        iconClass: \\\\\\\\\\\\\\\"bi bi-telegram\\\\\\\\\\\\\\\",\\\\\\\\n        name: telegram_handle,\\\\\\\\n      }))\\\\\\\\n    : []),\\\\\\\\n];\\\\\\\\n\\\\\\\\nconst NavlinksContainer = styled.div`\\\\\\\\n  //background: white;\\\\\\\\n  padding: 0 3rem;\\\\\\\\n\\\\\\\\n  @media screen and (max-width: 960px) {\\\\\\\\n    padding: 0 1rem;\\\\\\\\n  }\\\\\\\\n`;\\\\\\\\n\\\\\\\\nreturn (\\\\\\\\n  <div\\\\\\\\n    className=\\\\\\\\\\\\\\\"d-flex flex-column gap-3 w-100\\\\\\\\\\\\\\\"\\\\\\\\n    style={{ background: \\\\\\\\\\\\\\\"#F4F4F4\\\\\\\\\\\\\\\" }}\\\\\\\\n  >\\\\\\\\n    <Banner\\\\\\\\n      className=\\\\\\\\\\\\\\\"object-fit-cover\\\\\\\\\\\\\\\"\\\\\\\\n      style={{\\\\\\\\n        background: `center / cover no-repeat url(${community.banner_url})`,\\\\\\\\n      }}\\\\\\\\n    />\\\\\\\\n\\\\\\\\n    <div className=\\\\\\\\\\\\\\\"container d-flex flex-wrap justify-content-between align-items-center align-items-md-start gap-4\\\\\\\\\\\\\\\">\\\\\\\\n      <div className=\\\\\\\\\\\\\\\"d-flex flex-column ms-3\\\\\\\\\\\\\\\">\\\\\\\\n        <div className=\\\\\\\\\\\\\\\"position-relative\\\\\\\\\\\\\\\">\\\\\\\\n          <div style={{ width: 150, height: 45 }}>\\\\\\\\n            <img\\\\\\\\n              alt=\\\\\\\\\\\\\\\"Loading logo...\\\\\\\\\\\\\\\"\\\\\\\\n              className=\\\\\\\\\\\\\\\"rounded-circle position-absolute\\\\\\\\\\\\\\\"\\\\\\\\n              width=\\\\\\\\\\\\\\\"160\\\\\\\\\\\\\\\"\\\\\\\\n              height=\\\\\\\\\\\\\\\"160\\\\\\\\\\\\\\\"\\\\\\\\n              src={community.logo_url}\\\\\\\\n              style={{ top: -124 }}\\\\\\\\n            />\\\\\\\\n          </div>\\\\\\\\n        </div>\\\\\\\\n\\\\\\\\n        <div className=\\\\\\\\\\\\\\\"d-flex flex-column gap-3 ps-md-3 pt-md-3 pb-md-2\\\\\\\\\\\\\\\">\\\\\\\\n          <CommunityName className=\\\\\\\\\\\\\\\"text-nowrap\\\\\\\\\\\\\\\">\\\\\\\\n            {community.name}\\\\\\\\n          </CommunityName>\\\\\\\\n          <CommunityDetails>{community.description}</CommunityDetails>\\\\\\\\n        </div>\\\\\\\\n\\\\\\\\n        <div className=\\\\\\\\\\\\\\\"mt-3 ps-3 d-flex gap-3 align-items-center\\\\\\\\\\\\\\\">\\\\\\\\n          {socialLinks.map((link, index) => (\\\\\\\\n            <a\\\\\\\\n              href={link.href}\\\\\\\\n              style={{\\\\\\\\n                marginLeft: index !== 0 ? \\\\\\\\\\\\\\\"0px\\\\\\\\\\\\\\\" : \\\\\\\\\\\\\\\"0px\\\\\\\\\\\\\\\",\\\\\\\\n                color: \\\\\\\\\\\\\\\"#818181\\\\\\\\\\\\\\\",\\\\\\\\n              }}\\\\\\\\n              key={link.href}\\\\\\\\n              target=\\\\\\\\\\\\\\\"_blank\\\\\\\\\\\\\\\"\\\\\\\\n            >\\\\\\\\n              <i className={link.iconClass}></i>\\\\\\\\n            </a>\\\\\\\\n          ))}\\\\\\\\n        </div>\\\\\\\\n      </div>\\\\\\\\n\\\\\\\\n      <div className=\\\\\\\\\\\\\\\"d-flex align-items-end gap-3 ms-auto mb-md-5 me-4\\\\\\\\\\\\\\\">\\\\\\\\n        {permissions.can_configure && (\\\\\\\\n          <Link\\\\\\\\n            to={`/devhub.near/widget/app?page=community.configuration&handle=${community.handle}`}\\\\\\\\n          >\\\\\\\\n            <Widget\\\\\\\\n              src={\\\\\\\\\\\\\\\"devhub.near/widget/devhub.components.molecule.Button\\\\\\\\\\\\\\\"}\\\\\\\\n              props={{\\\\\\\\n                classNames: { root: \\\\\\\\\\\\\\\"btn-outline-light text-dark shadow-none\\\\\\\\\\\\\\\" },\\\\\\\\n                notRounded: true,\\\\\\\\n                style: {\\\\\\\\n                  display: \\\\\\\\\\\\\\\"flex\\\\\\\\\\\\\\\",\\\\\\\\n                  padding: \\\\\\\\\\\\\\\"0.75rem 1rem\\\\\\\\\\\\\\\",\\\\\\\\n                  alignItems: \\\\\\\\\\\\\\\"center\\\\\\\\\\\\\\\",\\\\\\\\n                  gap: \\\\\\\\\\\\\\\"16px\\\\\\\\\\\\\\\",\\\\\\\\n\\\\\\\\n                  borderRadius: \\\\\\\\\\\\\\\"4px\\\\\\\\\\\\\\\",\\\\\\\\n                  border: \\\\\\\\\\\\\\\"1px solid #00EC97\\\\\\\\\\\\\\\",\\\\\\\\n                  background: \\\\\\\\\\\\\\\"rgba(129, 129, 129, 0.00)\\\\\\\\\\\\\\\",\\\\\\\\n                },\\\\\\\\n                icon: {\\\\\\\\n                  type: \\\\\\\\\\\\\\\"bootstrap_icon\\\\\\\\\\\\\\\",\\\\\\\\n                  variant: \\\\\\\\\\\\\\\"bi-gear-wide-connected\\\\\\\\\\\\\\\",\\\\\\\\n                },\\\\\\\\n                label: \\\\\\\\\\\\\\\"Configure community\\\\\\\\\\\\\\\",\\\\\\\\n              }}\\\\\\\\n            />\\\\\\\\n          </Link>\\\\\\\\n        )}\\\\\\\\n        <Widget\\\\\\\\n          src={\\\\\\\\\\\\\\\"devhub.near/widget/devhub.components.molecule.Button\\\\\\\\\\\\\\\"}\\\\\\\\n          props={{\\\\\\\\n            classNames: { root: \\\\\\\\\\\\\\\"btn-outline-light text-dark shadow-none\\\\\\\\\\\\\\\" },\\\\\\\\n            notRounded: true,\\\\\\\\n            style: {\\\\\\\\n              display: \\\\\\\\\\\\\\\"flex\\\\\\\\\\\\\\\",\\\\\\\\n              padding: \\\\\\\\\\\\\\\"0.75rem 1rem\\\\\\\\\\\\\\\",\\\\\\\\n              alignItems: \\\\\\\\\\\\\\\"center\\\\\\\\\\\\\\\",\\\\\\\\n              gap: \\\\\\\\\\\\\\\"16px\\\\\\\\\\\\\\\",\\\\\\\\n\\\\\\\\n              borderRadius: \\\\\\\\\\\\\\\"4px\\\\\\\\\\\\\\\",\\\\\\\\n              border: \\\\\\\\\\\\\\\"1px solid #00EC97\\\\\\\\\\\\\\\",\\\\\\\\n              background: \\\\\\\\\\\\\\\"rgba(129, 129, 129, 0.00)\\\\\\\\\\\\\\\",\\\\\\\\n            },\\\\\\\\n            label: \\\\\\\\\\\\\\\"Share \\\\\\\\u{2197}\\\\\\\\\\\\\\\",\\\\\\\\n            onClick: onShareClick,\\\\\\\\n            onMouseLeave: () => setLinkCopied(false),\\\\\\\\n            title: \\\\\\\\\\\\\\\"Copy link to clipboard\\\\\\\\\\\\\\\",\\\\\\\\n          }}\\\\\\\\n        />\\\\\\\\n      </div>\\\\\\\\n    </div>\\\\\\\\n    <NavlinksContainer>\\\\\\\\n      <NavUnderline className=\\\\\\\\\\\\\\\"nav gap-4 my-4\\\\\\\\\\\\\\\">\\\\\\\\n        {tabs.map(\\\\\\\\n          ({ title }) =>\\\\\\\\n            title && (\\\\\\\\n              <li className=\\\\\\\\\\\\\\\"nav-item\\\\\\\\\\\\\\\" key={title}>\\\\\\\\n                <Link\\\\\\\\n                  to={href({\\\\\\\\n                    widgetSrc: \\\\\\\\\\\\\\\"devhub.near/widget/app\\\\\\\\\\\\\\\",\\\\\\\\n                    params: {\\\\\\\\n                      page: \\\\\\\\\\\\\\\"community\\\\\\\\\\\\\\\",\\\\\\\\n                      handle: community.handle,\\\\\\\\n                      tab: title,\\\\\\\\n                    },\\\\\\\\n                  })}\\\\\\\\n                  aria-current={tab === title && \\\\\\\\\\\\\\\"page\\\\\\\\\\\\\\\"}\\\\\\\\n                  className={[\\\\\\\\n                    \\\\\\\\\\\\\\\"d-inline-flex gap-2\\\\\\\\\\\\\\\",\\\\\\\\n                    tab === title ? \\\\\\\\\\\\\\\"nav-link active\\\\\\\\\\\\\\\" : \\\\\\\\\\\\\\\"nav-link\\\\\\\\\\\\\\\",\\\\\\\\n                  ].join(\\\\\\\\\\\\\\\" \\\\\\\\\\\\\\\")}\\\\\\\\n                >\\\\\\\\n                  <span>{title}</span>\\\\\\\\n                </Link>\\\\\\\\n              </li>\\\\\\\\n            )\\\\\\\\n        )}\\\\\\\\n      </NavUnderline>\\\\\\\\n      {currentTab.title === \\\\\\\\\\\\\\\"Activity\\\\\\\\\\\\\\\" && (\\\\\\\\n        <div\\\\\\\\n          className=\\\\\\\\\\\\\\\"my-4 d-flex align-items-center justify-content-between\\\\\\\\\\\\\\\"\\\\\\\\n          style={{ gap: \\\\\\\\\\\\\\\"2.5rem\\\\\\\\\\\\\\\" }}\\\\\\\\n        >\\\\\\\\n          <div class=\\\\\\\\\\\\\\\"d-flex align-items-center justify-content-between\\\\\\\\\\\\\\\">\\\\\\\\n            <small class=\\\\\\\\\\\\\\\"text-muted\\\\\\\\\\\\\\\">\\\\\\\\n              <span>Required tags:</span>\\\\\\\\n              <Link\\\\\\\\n                to={href({\\\\\\\\n                  widgetSrc: \\\\\\\\\\\\\\\"devhub.near/widget/app\\\\\\\\\\\\\\\",\\\\\\\\n                  params: { page: \\\\\\\\\\\\\\\"feed\\\\\\\\\\\\\\\", tag: community.tag },\\\\\\\\n                })}\\\\\\\\n              >\\\\\\\\n                <Widget\\\\\\\\n                  src={\\\\\\\\\\\\\\\"devhub.near/widget/devhub.components.atom.Tag\\\\\\\\\\\\\\\"}\\\\\\\\n                  props={{\\\\\\\\n                    tag: community.tag,\\\\\\\\n                  }}\\\\\\\\n                />\\\\\\\\n              </Link>\\\\\\\\n            </small>\\\\\\\\n          </div>\\\\\\\\n          {context.accountId && (\\\\\\\\n            <Widget\\\\\\\\n              src={\\\\\\\\n                \\\\\\\\\\\\\\\"devhub.near/widget/devhub.components.molecule.PostControls\\\\\\\\\\\\\\\"\\\\\\\\n              }\\\\\\\\n              props={{\\\\\\\\n                title: \\\\\\\\\\\\\\\"Post\\\\\\\\\\\\\\\",\\\\\\\\n                href: href({\\\\\\\\n                  widgetSrc: \\\\\\\\\\\\\\\"devhub.near/widget/app\\\\\\\\\\\\\\\",\\\\\\\\n                  params: {\\\\\\\\n                    page: \\\\\\\\\\\\\\\"create\\\\\\\\\\\\\\\",\\\\\\\\n                    labels: [community.tag],\\\\\\\\n                  },\\\\\\\\n                }),\\\\\\\\n              }}\\\\\\\\n            />\\\\\\\\n          )}\\\\\\\\n        </div>\\\\\\\\n      )}\\\\\\\\n    </NavlinksContainer>\\\\\\\\n    {currentTab && (\\\\\\\\n      <div className=\\\\\\\\\\\\\\\"d-flex w-100 h-100\\\\\\\\\\\\\\\" key={currentTab.title}>\\\\\\\\n        <Widget\\\\\\\\n          src={currentTab.view}\\\\\\\\n          props={{\\\\\\\\n            ...currentTab.params,\\\\\\\\n            view, // default view for an addon, can come as a prop from a community or from a direct link to page.addon\\\\\\\\n\\\\\\\\n            // below is temporary prop drilling until kanban and github are migrated\\\\\\\\n            permissions,\\\\\\\\n            handle: community.handle,\\\\\\\\n          }}\\\\\\\\n        />\\\\\\\\n      </div>\\\\\\\\n    )}\\\\\\\\n  </div>\\\\\\\\n);\\\\\\\\n\"}, \"core.adapter.devhub-contract\": {\"\": \"function getRootMembers() {\\\\\\\\n  return Near.view(\\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"get_root_members\\\\\\\\\\\\\\\") ?? null;\\\\\\\\n}\\\\\\\\n\\\\\\\\nfunction hasModerator({ account_id }) {\\\\\\\\n  return (\\\\\\\\n    Near.view(\\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"has_moderator\\\\\\\\\\\\\\\", { account_id }) ??\\\\\\\\n    null\\\\\\\\n  );\\\\\\\\n}\\\\\\\\n\\\\\\\\nfunction createCommunity({ inputs }) {\\\\\\\\n  return Near.call(\\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"create_community\\\\\\\\\\\\\\\", { inputs });\\\\\\\\n}\\\\\\\\n\\\\\\\\nfunction getCommunity({ handle }) {\\\\\\\\n  return (\\\\\\\\n    Near.view(\\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"get_community\\\\\\\\\\\\\\\", { handle }) ?? null\\\\\\\\n  );\\\\\\\\n}\\\\\\\\n\\\\\\\\nfunction getFeaturedCommunities() {\\\\\\\\n  return (\\\\\\\\n    Near.view(\\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"get_featured_communities\\\\\\\\\\\\\\\") ?? null\\\\\\\\n  );\\\\\\\\n}\\\\\\\\n\\\\\\\\nfunction getAccountCommunityPermissions({ account_id, community_handle }) {\\\\\\\\n  return (\\\\\\\\n    Near.view(\\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"get_account_community_permissions\\\\\\\\\\\\\\\", {\\\\\\\\n      account_id,\\\\\\\\n      community_handle,\\\\\\\\n    }) ?? null\\\\\\\\n  );\\\\\\\\n}\\\\\\\\n\\\\\\\\nfunction updateCommunity({ handle, community }) {\\\\\\\\n  return Near.call(\\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"update_community\\\\\\\\\\\\\\\", {\\\\\\\\n    handle,\\\\\\\\n    community,\\\\\\\\n  });\\\\\\\\n}\\\\\\\\n\\\\\\\\nfunction deleteCommunity({ handle }) {\\\\\\\\n  return Near.call(\\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"delete_community\\\\\\\\\\\\\\\", { handle });\\\\\\\\n}\\\\\\\\n\\\\\\\\nfunction updateCommunityBoard({ handle, board }) {\\\\\\\\n  return Near.call(\\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"update_community_board\\\\\\\\\\\\\\\", {\\\\\\\\n    handle,\\\\\\\\n    board,\\\\\\\\n  });\\\\\\\\n}\\\\\\\\n\\\\\\\\nfunction updateCommunityGithub({ handle, github }) {\\\\\\\\n  return Near.call(\\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"update_community_github\\\\\\\\\\\\\\\", {\\\\\\\\n    handle,\\\\\\\\n    github,\\\\\\\\n  });\\\\\\\\n}\\\\\\\\n\\\\\\\\n/**\\\\\\\\n * Sets all addons, for configurating tabs\\\\\\\\n */\\\\\\\\nfunction setCommunityAddons({ handle, addons }) {\\\\\\\\n  return Near.call(\\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"set_community_addons\\\\\\\\\\\\\\\", {\\\\\\\\n    handle,\\\\\\\\n    addons,\\\\\\\\n  });\\\\\\\\n}\\\\\\\\n\\\\\\\\n/**\\\\\\\\n * Sets specific addon, for configuring params\\\\\\\\n */\\\\\\\\nfunction setCommunityAddon({ handle, addon }) {\\\\\\\\n  return Near.call(\\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"set_community_addon\\\\\\\\\\\\\\\", {\\\\\\\\n    handle,\\\\\\\\n    community_addon: addon,\\\\\\\\n  });\\\\\\\\n}\\\\\\\\n\\\\\\\\n/**\\\\\\\\n * Gets all available addons, these are controlled by devhub moderators\\\\\\\\n */\\\\\\\\nfunction getAllAddons() {\\\\\\\\n  return Near.view(\\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"get_all_addons\\\\\\\\\\\\\\\") ?? null;\\\\\\\\n}\\\\\\\\n\\\\\\\\nfunction getAccessControlInfo() {\\\\\\\\n  return (\\\\\\\\n    Near.view(\\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"get_access_control_info\\\\\\\\\\\\\\\") ?? null\\\\\\\\n  );\\\\\\\\n}\\\\\\\\n\\\\\\\\nfunction getAllAuthors() {\\\\\\\\n  return Near.view(\\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"get_all_authors\\\\\\\\\\\\\\\") ?? null;\\\\\\\\n}\\\\\\\\n\\\\\\\\nfunction getAllCommunitiesMetadata() {\\\\\\\\n  return (\\\\\\\\n    Near.view(\\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"get_all_communities_metadata\\\\\\\\\\\\\\\") ?? null\\\\\\\\n  );\\\\\\\\n}\\\\\\\\n\\\\\\\\nfunction getAvailableAddons() {\\\\\\\\n  return [\\\\\\\\n    {\\\\\\\\n      id: \\\\\\\\\\\\\\\"wiki\\\\\\\\\\\\\\\",\\\\\\\\n      title: \\\\\\\\\\\\\\\"Wiki\\\\\\\\\\\\\\\",\\\\\\\\n      description: \\\\\\\\\\\\\\\"Create a wiki for your community\\\\\\\\\\\\\\\",\\\\\\\\n      view_widget: \\\\\\\\\\\\\\\"devhub.near/widget/devhub.entity.addon.wiki.Viewer\\\\\\\\\\\\\\\",\\\\\\\\n      configurator_widget:\\\\\\\\n        \\\\\\\\\\\\\\\"devhub.near/widget/devhub.entity.addon.wiki.Configurator\\\\\\\\\\\\\\\",\\\\\\\\n    },\\\\\\\\n    {\\\\\\\\n      id: \\\\\\\\\\\\\\\"telegram\\\\\\\\\\\\\\\",\\\\\\\\n      title: \\\\\\\\\\\\\\\"Telegram\\\\\\\\\\\\\\\",\\\\\\\\n      description: \\\\\\\\\\\\\\\"Connect your telegram\\\\\\\\\\\\\\\",\\\\\\\\n      view_widget: \\\\\\\\\\\\\\\"devhub.near/widget/devhub.entity.addon.telegram.Viewer\\\\\\\\\\\\\\\",\\\\\\\\n      configurator_widget:\\\\\\\\n        \\\\\\\\\\\\\\\"devhub.near/widget/devhub.entity.addon.telegram.Configurator\\\\\\\\\\\\\\\",\\\\\\\\n    },\\\\\\\\n    {\\\\\\\\n      id: \\\\\\\\\\\\\\\"github\\\\\\\\\\\\\\\",\\\\\\\\n      title: \\\\\\\\\\\\\\\"Github\\\\\\\\\\\\\\\",\\\\\\\\n      description: \\\\\\\\\\\\\\\"Connect your github\\\\\\\\\\\\\\\",\\\\\\\\n      view_widget: \\\\\\\\\\\\\\\"devhub.near/widget/devhub.entity.addon.github.Viewer\\\\\\\\\\\\\\\",\\\\\\\\n      configurator_widget:\\\\\\\\n        \\\\\\\\\\\\\\\"devhub.near/widget/devhub.entity.addon.github.Configurator\\\\\\\\\\\\\\\",\\\\\\\\n    },\\\\\\\\n    {\\\\\\\\n      id: \\\\\\\\\\\\\\\"kanban\\\\\\\\\\\\\\\",\\\\\\\\n      title: \\\\\\\\\\\\\\\"Kanban\\\\\\\\\\\\\\\",\\\\\\\\n      description: \\\\\\\\\\\\\\\"Connect your github kanban board\\\\\\\\\\\\\\\",\\\\\\\\n      view_widget: \\\\\\\\\\\\\\\"devhub.near/widget/devhub.entity.addon.kanban.Viewer\\\\\\\\\\\\\\\",\\\\\\\\n      configurator_widget:\\\\\\\\n        \\\\\\\\\\\\\\\"devhub.near/widget/devhub.entity.addon.kanban.Configurator\\\\\\\\\\\\\\\",\\\\\\\\n    },\\\\\\\\n    {\\\\\\\\n      id: \\\\\\\\\\\\\\\"blog\\\\\\\\\\\\\\\",\\\\\\\\n      title: \\\\\\\\\\\\\\\"Blog\\\\\\\\\\\\\\\",\\\\\\\\n      description: \\\\\\\\\\\\\\\"Create a blog for your community\\\\\\\\\\\\\\\",\\\\\\\\n      view_widget: \\\\\\\\\\\\\\\"devhub.near/widget/devhub.entity.addon.blog.Viewer\\\\\\\\\\\\\\\",\\\\\\\\n      configurator_widget:\\\\\\\\n        \\\\\\\\\\\\\\\"devhub.near/widget/devhub.entity.addon.blog.Configurator\\\\\\\\\\\\\\\",\\\\\\\\n    },\\\\\\\\n  ];\\\\\\\\n  // return Near.view(\\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"get_available_addons\\\\\\\\\\\\\\\") ?? null;\\\\\\\\n}\\\\\\\\n\\\\\\\\nfunction getCommunityAddons({ handle }) {\\\\\\\\n  return Near.view(\\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"get_community_addons\\\\\\\\\\\\\\\", {\\\\\\\\n    handle,\\\\\\\\n  });\\\\\\\\n}\\\\\\\\n\\\\\\\\nfunction getCommunityAddonConfigs({ handle }) {\\\\\\\\n  return Near.view(\\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"get_community_addon_configs\\\\\\\\\\\\\\\", {\\\\\\\\n    handle,\\\\\\\\n  });\\\\\\\\n}\\\\\\\\n\\\\\\\\nfunction getAllLabels() {\\\\\\\\n  return Near.view(\\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"get_all_labels\\\\\\\\\\\\\\\") ?? null;\\\\\\\\n}\\\\\\\\n\\\\\\\\nfunction getPost({ post_id }) {\\\\\\\\n  return Near.view(\\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"get_post\\\\\\\\\\\\\\\", { post_id }) ?? null;\\\\\\\\n}\\\\\\\\n\\\\\\\\nfunction getPostsByAuthor({ author }) {\\\\\\\\n  return (\\\\\\\\n    Near.view(\\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"get_posts_by_author\\\\\\\\\\\\\\\", { author }) ??\\\\\\\\n    null\\\\\\\\n  );\\\\\\\\n}\\\\\\\\n\\\\\\\\nfunction getPostsByLabel({ label }) {\\\\\\\\n  return (\\\\\\\\n    Near.view(\\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"get_posts_by_label\\\\\\\\\\\\\\\", {\\\\\\\\n      label,\\\\\\\\n    }) ?? null\\\\\\\\n  );\\\\\\\\n}\\\\\\\\n\\\\\\\\nfunction useQuery(name, params) {\\\\\\\\n  const initialState = { data: null, error: null, isLoading: true };\\\\\\\\n\\\\\\\\n  const cacheState = useCache(\\\\\\\\n    () =>\\\\\\\\n      Near.asyncView(\\\\\\\\n        \\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\",\\\\\\\\n        [\\\\\\\\\\\\\\\"get\\\\\\\\\\\\\\\", name].join(\\\\\\\\\\\\\\\"_\\\\\\\\\\\\\\\"),\\\\\\\\n        params ?? {}\\\\\\\\n      )\\\\\\\\n        .then((response) => ({\\\\\\\\n          ...initialState,\\\\\\\\n          data: response ?? null,\\\\\\\\n          isLoading: false,\\\\\\\\n        }))\\\\\\\\n        .catch((error) => ({\\\\\\\\n          ...initialState,\\\\\\\\n          error: props?.error ?? error,\\\\\\\\n          isLoading: false,\\\\\\\\n        })),\\\\\\\\n\\\\\\\\n    JSON.stringify({ name, params }),\\\\\\\\n    { subscribe: false } // NOTE: I\\\\\\\\\\\\'m turning off subscribe to stop the constant re-rendering\\\\\\\\n  );\\\\\\\\n\\\\\\\\n  return cacheState === null ? initialState : cacheState;\\\\\\\\n}\\\\\\\\n\\\\\\\\nreturn {\\\\\\\\n  getRootMembers,\\\\\\\\n  hasModerator,\\\\\\\\n  createCommunity,\\\\\\\\n  getCommunity,\\\\\\\\n  getFeaturedCommunities,\\\\\\\\n  getAccountCommunityPermissions,\\\\\\\\n  updateCommunity,\\\\\\\\n  deleteCommunity,\\\\\\\\n  updateCommunityBoard,\\\\\\\\n  updateCommunityGithub,\\\\\\\\n  setCommunityAddons,\\\\\\\\n  setCommunityAddon,\\\\\\\\n  getAccessControlInfo,\\\\\\\\n  getAllAuthors,\\\\\\\\n  getAllCommunitiesMetadata,\\\\\\\\n  getAllAddons,\\\\\\\\n  getCommunityAddons,\\\\\\\\n  getCommunityAddonConfigs,\\\\\\\\n  getAllLabels,\\\\\\\\n  getPost,\\\\\\\\n  getPostsByAuthor,\\\\\\\\n  getPostsByLabel,\\\\\\\\n  useQuery,\\\\\\\\n};\\\\\\\\n\"}, \"devhub.entity.community.Card\": {\"\": \"const { href } = VM.require(\\\\\\\\\\\\\\\"devhub.near/widget/core.lib.url\\\\\\\\\\\\\\\");\\\\\\\\n\\\\\\\\nif (!href) {\\\\\\\\n  return <></>;\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst CommunityCard = ({\\\\\\\\n  format,\\\\\\\\n  isBannerEnabled,\\\\\\\\n  metadata,\\\\\\\\n  ...otherProps\\\\\\\\n}) => {\\\\\\\\n  const renderFormat =\\\\\\\\n    format === \\\\\\\\\\\\\\\"small\\\\\\\\\\\\\\\" || format === \\\\\\\\\\\\\\\"medium\\\\\\\\\\\\\\\" ? format : \\\\\\\\\\\\\\\"small\\\\\\\\\\\\\\\";\\\\\\\\n\\\\\\\\n  const link = href({\\\\\\\\n    widgetSrc: \\\\\\\\\\\\\\\"devhub.near/widget/app\\\\\\\\\\\\\\\",\\\\\\\\n    params: { page: \\\\\\\\\\\\\\\"community\\\\\\\\\\\\\\\", handle: metadata.handle },\\\\\\\\n  });\\\\\\\\n\\\\\\\\n  const CommunityName = styled.h5`\\\\\\\\n    color: #151515;\\\\\\\\n    font-size: 2rem;\\\\\\\\n    font-style: normal;\\\\\\\\n    font-weight: 700;\\\\\\\\n    line-height: 30px; /* 41.667% */\\\\\\\\n  `;\\\\\\\\n\\\\\\\\n  const CommunityDescription = styled.p`\\\\\\\\n    color: #818181;\\\\\\\\n    font-size: 1rem;\\\\\\\\n    font-style: normal;\\\\\\\\n    font-weight: 400;\\\\\\\\n    line-height: 120%; /* 28.8px */\\\\\\\\n  `;\\\\\\\\n\\\\\\\\n  const Logo = styled.img`\\\\\\\\n    width: 8rem;\\\\\\\\n    height: 8rem;\\\\\\\\n    object-fit: cover;\\\\\\\\n\\\\\\\\n    @media screen and (max-width: 768px) {\\\\\\\\n      width: 4rem;\\\\\\\\n      height: 4rem;\\\\\\\\n    }\\\\\\\\n  `;\\\\\\\\n\\\\\\\\n  const formatSmall = (\\\\\\\\n    <Link\\\\\\\\n      {...otherProps}\\\\\\\\n      to={link}\\\\\\\\n      className={[\\\\\\\\n        \\\\\\\\\\\\\\\"d-flex p-0 p-lg-3\\\\\\\\\\\\\\\",\\\\\\\\n        \\\\\\\\\\\\\\\"rounded-2 border border-2\\\\\\\\\\\\\\\",\\\\\\\\n        \\\\\\\\\\\\\\\"text-black text-decoration-none attractable flex-grow-1\\\\\\\\\\\\\\\",\\\\\\\\n      ].join(\\\\\\\\\\\\\\\" \\\\\\\\\\\\\\\")}\\\\\\\\n      style={{\\\\\\\\n        background: isBannerEnabled\\\\\\\\n          ? `center / cover no-repeat url(${metadata.banner_url})`\\\\\\\\n          : \\\\\\\\\\\\\\\"#ffffff\\\\\\\\\\\\\\\",\\\\\\\\n      }}\\\\\\\\n    >\\\\\\\\n      <div\\\\\\\\n        className=\\\\\\\\\\\\\\\"d-flex align-items-center gap-3 rounded-4 w-100 h-100\\\\\\\\\\\\\\\"\\\\\\\\n        style={{\\\\\\\\n          background: \\\\\\\\\\\\\\\"rgba(255, 255, 255, 0.9)\\\\\\\\\\\\\\\",\\\\\\\\n          backdropFilter: \\\\\\\\\\\\\\\"blur(4px)\\\\\\\\\\\\\\\",\\\\\\\\n          padding: \\\\\\\\\\\\\\\"3rem 1rem\\\\\\\\\\\\\\\",\\\\\\\\n        }}\\\\\\\\n      >\\\\\\\\n        <Logo\\\\\\\\n          alt=\\\\\\\\\\\\\\\"Community logo\\\\\\\\\\\\\\\"\\\\\\\\n          className=\\\\\\\\\\\\\\\"flex-shrink-0 rounded-circle attractable\\\\\\\\\\\\\\\"\\\\\\\\n          src={metadata.logo_url}\\\\\\\\n        />\\\\\\\\n\\\\\\\\n        <div className=\\\\\\\\\\\\\\\"d-flex flex-column justify-content-center gap-1 w-100\\\\\\\\\\\\\\\">\\\\\\\\n          <CommunityName\\\\\\\\n            style={{ textOverflow: \\\\\\\\\\\\\\\"ellipsis\\\\\\\\\\\\\\\", wordWrap: \\\\\\\\\\\\\\\"break-word\\\\\\\\\\\\\\\" }}\\\\\\\\n          >\\\\\\\\n            {metadata.name}\\\\\\\\n          </CommunityName>\\\\\\\\n\\\\\\\\n          <CommunityDescription\\\\\\\\n            style={{ textOverflow: \\\\\\\\\\\\\\\"ellipsis\\\\\\\\\\\\\\\", wordWrap: \\\\\\\\\\\\\\\"break-word\\\\\\\\\\\\\\\" }}\\\\\\\\n          >\\\\\\\\n            {metadata.description}\\\\\\\\n          </CommunityDescription>\\\\\\\\n        </div>\\\\\\\\n      </div>\\\\\\\\n    </Link>\\\\\\\\n  );\\\\\\\\n\\\\\\\\n  const formatMedium = (\\\\\\\\n    <Link\\\\\\\\n      className=\\\\\\\\\\\\\\\"card d-flex flex-column flex-shrink-0 text-decoration-none text-reset attractable\\\\\\\\\\\\\\\"\\\\\\\\n      to={link}\\\\\\\\n      style={{ width: \\\\\\\\\\\\\\\"23%\\\\\\\\\\\\\\\", maxWidth: 304 }}\\\\\\\\n    >\\\\\\\\n      <div\\\\\\\\n        className=\\\\\\\\\\\\\\\"card-img-top w-100\\\\\\\\\\\\\\\"\\\\\\\\n        style={{\\\\\\\\n          background: `center / cover no-repeat url(${metadata.banner_url})`,\\\\\\\\n          height: 164,\\\\\\\\n        }}\\\\\\\\n      />\\\\\\\\n\\\\\\\\n      <div className=\\\\\\\\\\\\\\\"d-flex flex-column gap-2 p-3 card-text\\\\\\\\\\\\\\\">\\\\\\\\n        <h5 class=\\\\\\\\\\\\\\\"h5 m-0\\\\\\\\\\\\\\\">{metadata.name}</h5>\\\\\\\\n        <span class=\\\\\\\\\\\\\\\"text-secondary text-wrap\\\\\\\\\\\\\\\">{metadata.description}</span>\\\\\\\\n      </div>\\\\\\\\n    </Link>\\\\\\\\n  );\\\\\\\\n\\\\\\\\n  return {\\\\\\\\n    small: formatSmall,\\\\\\\\n    medium: formatMedium,\\\\\\\\n  }[renderFormat];\\\\\\\\n};\\\\\\\\n\\\\\\\\nreturn CommunityCard(props);\\\\\\\\n\"}, \"devhub.entity.community.Tile\": {\"\": \"/* INCLUDE: \\\\\\\\\\\\\\\"core/lib/gui/attractable\\\\\\\\\\\\\\\" */\\\\\\\\nconst AttractableDiv = styled.div`\\\\\\\\n  box-shadow: 0 0.125rem 0.25rem rgba(0, 0, 0, 0.075) !important;\\\\\\\\n  transition: box-shadow 0.6s;\\\\\\\\n\\\\\\\\n  &:hover {\\\\\\\\n    box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.15) !important;\\\\\\\\n  }\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst AttractableLink = styled.a`\\\\\\\\n  box-shadow: 0 0.125rem 0.25rem rgba(0, 0, 0, 0.075) !important;\\\\\\\\n  transition: box-shadow 0.6s;\\\\\\\\n\\\\\\\\n  &:hover {\\\\\\\\n    box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.15) !important;\\\\\\\\n  }\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst AttractableImage = styled.img`\\\\\\\\n  box-shadow: 0 0.125rem 0.25rem rgba(0, 0, 0, 0.075) !important;\\\\\\\\n  transition: box-shadow 0.6s;\\\\\\\\n\\\\\\\\n  &:hover {\\\\\\\\n    box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.15) !important;\\\\\\\\n  }\\\\\\\\n`;\\\\\\\\n/* END_INCLUDE: \\\\\\\\\\\\\\\"core/lib/gui/attractable\\\\\\\\\\\\\\\" */\\\\\\\\n\\\\\\\\nconst Tile = ({\\\\\\\\n  children,\\\\\\\\n  borderRadius,\\\\\\\\n  className,\\\\\\\\n  fullWidth,\\\\\\\\n  headerSlotRight,\\\\\\\\n  heading,\\\\\\\\n  headingAdornment,\\\\\\\\n  id,\\\\\\\\n  isHidden,\\\\\\\\n  noBorder,\\\\\\\\n  noFrame,\\\\\\\\n  minHeight,\\\\\\\\n  style,\\\\\\\\n}) => (\\\\\\\\n  <AttractableDiv\\\\\\\\n    className={[\\\\\\\\n      \\\\\\\\\\\\\\\"d-flex flex-column gap-3\\\\\\\\\\\\\\\",\\\\\\\\n      className,\\\\\\\\n      fullWidth ? \\\\\\\\\\\\\\\"w-100\\\\\\\\\\\\\\\" : \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\",\\\\\\\\n      !noFrame ? \\\\\\\\\\\\\\\"p-3\\\\\\\\\\\\\\\" : \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\",\\\\\\\\n      isHidden ? \\\\\\\\\\\\\\\"d-none\\\\\\\\\\\\\\\" : \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\",\\\\\\\\n    ].join(\\\\\\\\\\\\\\\" \\\\\\\\\\\\\\\")}\\\\\\\\n    style={{\\\\\\\\n      maxWidth: fullWidth ? \\\\\\\\\\\\\\\"100%\\\\\\\\\\\\\\\" : null,\\\\\\\\n      minHeight: minHeight ?? 180,\\\\\\\\n      height: \\\\\\\\\\\\\\\"fit-content\\\\\\\\\\\\\\\",\\\\\\\\n      overflowX: \\\\\\\\\\\\\\\"auto\\\\\\\\\\\\\\\",\\\\\\\\n      borderRadius: 16,\\\\\\\\n      border: \\\\\\\\\\\\\\\"1px solid rgba(129, 129, 129, 0.30)\\\\\\\\\\\\\\\",\\\\\\\\n      background: \\\\\\\\\\\\\\\"#FFFEFE\\\\\\\\\\\\\\\",\\\\\\\\n      marginBottom: \\\\\\\\\\\\\\\"1rem\\\\\\\\\\\\\\\",\\\\\\\\n      ...style,\\\\\\\\n    }}\\\\\\\\n    {...{ id }}\\\\\\\\n  >\\\\\\\\n    {\\\\\\\\n      <div\\\\\\\\n        className={[\\\\\\\\n          \\\\\\\\\\\\\\\"d-flex align-items-center justify-content-between gap-3\\\\\\\\\\\\\\\",\\\\\\\\n\\\\\\\\n          noFrame || (!heading && !headingAdornment && !headerSlotRight)\\\\\\\\n            ? \\\\\\\\\\\\\\\"d-none\\\\\\\\\\\\\\\"\\\\\\\\n            : \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\",\\\\\\\\n        ].join(\\\\\\\\\\\\\\\" \\\\\\\\\\\\\\\")}\\\\\\\\n        style={{ minHeight: 30 }}\\\\\\\\n      >\\\\\\\\n        <h5 className=\\\\\\\\\\\\\\\"h5 d-inline-flex gap-2 m-0\\\\\\\\\\\\\\\">\\\\\\\\n          {headingAdornment}\\\\\\\\n          <span>{heading}</span>\\\\\\\\n        </h5>\\\\\\\\n\\\\\\\\n        {headerSlotRight}\\\\\\\\n      </div>\\\\\\\\n    }\\\\\\\\n\\\\\\\\n    {children}\\\\\\\\n  </AttractableDiv>\\\\\\\\n);\\\\\\\\n\\\\\\\\nreturn Tile(props);\\\\\\\\n\"}, \"devhub.components.atom.Toggle\": {\"\": \"const ToggleRoot = styled.div`\\\\\\\\n  justify-content: space-between;\\\\\\\\n  width: fit-content;\\\\\\\\n  max-width: 100%;\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst ToggleSwitchRoot = styled(\\\\\\\\\\\\\\\"Switch.Root\\\\\\\\\\\\\\\")`\\\\\\\\n  all: unset;\\\\\\\\n  display: block;\\\\\\\\n  width: 42px;\\\\\\\\n  height: 25px;\\\\\\\\n  background-color: #d1d1d1;\\\\\\\\n  border-radius: 9999px;\\\\\\\\n  position: relative;\\\\\\\\n  box-shadow: 0 2px 10px var(--blackA7);\\\\\\\\n\\\\\\\\n  &[data-state=\\\\\\\\\\\\\\\"checked\\\\\\\\\\\\\\\"] {\\\\\\\\n    background-color: #00d084;\\\\\\\\n  }\\\\\\\\n\\\\\\\\n  &[data-disabled=\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\"] {\\\\\\\\n    opacity: 0.7;\\\\\\\\n  }\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst ToggleSwitchThumb = styled(\\\\\\\\\\\\\\\"Switch.Thumb\\\\\\\\\\\\\\\")`\\\\\\\\n  all: unset;\\\\\\\\n  display: block;\\\\\\\\n  width: 21px;\\\\\\\\n  height: 21px;\\\\\\\\n  border-radius: 9999px;\\\\\\\\n  transition: transform 100ms;\\\\\\\\n  transform: translateX(2px);\\\\\\\\n  will-change: transform;\\\\\\\\n\\\\\\\\n  &[data-state=\\\\\\\\\\\\\\\"checked\\\\\\\\\\\\\\\"] {\\\\\\\\n    transform: translateX(19px);\\\\\\\\n  }\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst ToggleLabel = styled.label`\\\\\\\\n  white-space: nowrap;\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst Toggle = ({\\\\\\\\n  className,\\\\\\\\n  direction,\\\\\\\\n  disabled,\\\\\\\\n  inputProps,\\\\\\\\n  key,\\\\\\\\n  label,\\\\\\\\n  onChange,\\\\\\\\n  value: checked,\\\\\\\\n  ...rest\\\\\\\\n}) => (\\\\\\\\n  <ToggleRoot\\\\\\\\n    className={[\\\\\\\\n      \\\\\\\\\\\\\\\"d-flex justify-content-between, align-items-center gap-3 p-2\\\\\\\\\\\\\\\",\\\\\\\\n      direction === \\\\\\\\\\\\\\\"rtl\\\\\\\\\\\\\\\" ? \\\\\\\\\\\\\\\"flex-row-reverse\\\\\\\\\\\\\\\" : \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\",\\\\\\\\n      className,\\\\\\\\n    ].join(\\\\\\\\\\\\\\\" \\\\\\\\\\\\\\\")}\\\\\\\\n    {...rest}\\\\\\\\n  >\\\\\\\\n    <ToggleLabel htmlFor={`toggle-${key}`}>{label}</ToggleLabel>\\\\\\\\n\\\\\\\\n    <ToggleSwitchRoot\\\\\\\\n      className=\\\\\\\\\\\\\\\"shadow-none\\\\\\\\\\\\\\\"\\\\\\\\n      id={`toggle-${key}`}\\\\\\\\n      onCheckedChange={disabled ? null : onChange}\\\\\\\\n      {...{ checked, disabled, ...inputProps }}\\\\\\\\n    >\\\\\\\\n      {!disabled && <ToggleSwitchThumb className=\\\\\\\\\\\\\\\"bg-light shadow\\\\\\\\\\\\\\\" />}\\\\\\\\n    </ToggleSwitchRoot>\\\\\\\\n  </ToggleRoot>\\\\\\\\n);\\\\\\\\n\\\\\\\\nreturn Toggle(props);\\\\\\\\n\"}, \"devhub.components.island.hero\": {\"\": \"const { href } = VM.require(\\\\\\\\\\\\\\\"devhub.near/widget/core.lib.url\\\\\\\\\\\\\\\");\\\\\\\\n\\\\\\\\nhref || (href = () => {});\\\\\\\\n\\\\\\\\nconst imageLink =\\\\\\\\n  \\\\\\\\\\\\\\\"https://ipfs.near.social/ipfs/bafybeiap2mzwsly4apaldxguiunx4rjwqyadksj5yxuzwrww3kue3ao5qe\\\\\\\\\\\\\\\";\\\\\\\\n\\\\\\\\nconst HeroSection = styled.div`\\\\\\\\n  position: relative;\\\\\\\\n  height: auto;\\\\\\\\n  z-index: 3;\\\\\\\\n  width: 70%;\\\\\\\\n  background: #00ec97;\\\\\\\\n  clip-path: polygon(0 0, 100% 0%, 75% 100%, 0% 100%);\\\\\\\\n\\\\\\\\n  padding-top: 2rem;\\\\\\\\n  padding-bottom: 2rem;\\\\\\\\n  padding-left: 3.375rem;\\\\\\\\n\\\\\\\\n  @media screen and (max-width: 768px) {\\\\\\\\n    width: 100%;\\\\\\\\n    padding: 1rem 1.5rem;\\\\\\\\n    clip-path: none;\\\\\\\\n  }\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst Title = styled.h1`\\\\\\\\n  color: #f4f4f4;\\\\\\\\n  font-size: 4rem;\\\\\\\\n  font-style: normal;\\\\\\\\n  font-weight: 700;\\\\\\\\n  line-height: 100%; /* 88px */\\\\\\\\n  letter-spacing: -1.76px;\\\\\\\\n\\\\\\\\n  @media screen and (max-width: 768px) {\\\\\\\\n    font-size: 2.25rem;\\\\\\\\n    letter-spacing: -0.72px;\\\\\\\\n    margin: 0;\\\\\\\\n  }\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst Lead = styled.p`\\\\\\\\n  color: #151515;\\\\\\\\n  font-size: 1.75rem;\\\\\\\\n  font-style: normal;\\\\\\\\n  font-weight: 400;\\\\\\\\n  line-height: 110%; /* 39.6px */\\\\\\\\n\\\\\\\\n  width: 70%;\\\\\\\\n\\\\\\\\n  @media screen and (max-width: 768px) {\\\\\\\\n    font-size: 1.5rem;\\\\\\\\n    width: 100%;\\\\\\\\n  }\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst CTA = styled.a`\\\\\\\\n  display: inline-flex;\\\\\\\\n  padding: 0.875rem 1rem;\\\\\\\\n  align-items: center;\\\\\\\\n  gap: 0.5rem;\\\\\\\\n\\\\\\\\n  border-radius: 1rem;\\\\\\\\n  border: 1px solid #151515;\\\\\\\\n\\\\\\\\n  color: #151515 !important;\\\\\\\\n  font-size: 1.25rem;\\\\\\\\n  font-style: normal;\\\\\\\\n  font-weight: 700;\\\\\\\\n  line-height: 120%; /* 28.8px */\\\\\\\\n  letter-spacing: -0.48px;\\\\\\\\n\\\\\\\\n  &:hover {\\\\\\\\n    background: #151515;\\\\\\\\n    color: #f4f4f4 !important;\\\\\\\\n    text-decoration: none; // Remove underline on hover\\\\\\\\n  }\\\\\\\\n\\\\\\\\n  @media screen and (max-width: 768px) {\\\\\\\\n    display: inline-flex;\\\\\\\\n    padding: 8px 16px;\\\\\\\\n    align-items: center;\\\\\\\\n    gap: 8px;\\\\\\\\n\\\\\\\\n    border-radius: 16px;\\\\\\\\n    background: #00ec97;\\\\\\\\n\\\\\\\\n    border: none;\\\\\\\\n\\\\\\\\n    color: #f4f4f4 !important;\\\\\\\\n    font-size: 16px;\\\\\\\\n    font-style: normal;\\\\\\\\n    font-weight: 700;\\\\\\\\n    line-height: 120%; /* 19.2px */\\\\\\\\n    letter-spacing: -0.32px;\\\\\\\\n\\\\\\\\n    &:hover {\\\\\\\\n      background: #151515;\\\\\\\\n      color: #f4f4f4;\\\\\\\\n      text-decoration: none; // Remove underline on hover\\\\\\\\n    }\\\\\\\\n  }\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst Container = styled.div`\\\\\\\\n  position: relative;\\\\\\\\n  width: 100%;\\\\\\\\n  height: max-content;\\\\\\\\n  overflow: hidden;\\\\\\\\n\\\\\\\\n  @media screen and (max-width: 768px) {\\\\\\\\n    background: #f4f4f4;\\\\\\\\n  }\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst ImageContainer = styled.div`\\\\\\\\n  width: 100%;\\\\\\\\n  height: 100%;\\\\\\\\n  position: absolute;\\\\\\\\n  top: 0;\\\\\\\\n  right: 0;\\\\\\\\n  z-index: 1;\\\\\\\\n  background: transparent;\\\\\\\\n\\\\\\\\n  @media screen and (max-width: 768px) {\\\\\\\\n    display: none;\\\\\\\\n  }\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst Image = styled.img`\\\\\\\\n  margin-left: 15.625rem;\\\\\\\\n  height: 100%;\\\\\\\\n  width: 100%;\\\\\\\\n  filter: grayscale(100%);\\\\\\\\n  object-fit: cover;\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst DesktopDescription = styled.div`\\\\\\\\n  @media screen and (max-width: 786px) {\\\\\\\\n    display: none;\\\\\\\\n  }\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst MobileImage = styled.img`\\\\\\\\n  display: none;\\\\\\\\n\\\\\\\\n  width: 100%;\\\\\\\\n  height: 196px;\\\\\\\\n\\\\\\\\n  width: 100%;\\\\\\\\n  object-fit: cover;\\\\\\\\n  filter: grayscale(1);\\\\\\\\n\\\\\\\\n  @media screen and (max-width: 768px) {\\\\\\\\n    display: block;\\\\\\\\n  }\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst MobileDescription = styled.div`\\\\\\\\n  display: none;\\\\\\\\n  padding: 24px 16px;\\\\\\\\n\\\\\\\\n  width: 100%;\\\\\\\\n\\\\\\\\n  @media screen and (max-width: 768px) {\\\\\\\\n    display: block;\\\\\\\\n  }\\\\\\\\n`;\\\\\\\\n\\\\\\\\nreturn (\\\\\\\\n  <Container>\\\\\\\\n    <HeroSection>\\\\\\\\n      <Title>\\\\\\\\n        The decentralized <br />\\\\\\\\n        <span style={{ color: \\\\\\\\\\\\\\\"#101820\\\\\\\\\\\\\\\" }}>home base</span> <br />\\\\\\\\n        for NEAR builders\\\\\\\\n      </Title>\\\\\\\\n      <DesktopDescription>\\\\\\\\n        <Lead>\\\\\\\\n          Join a vibrant community of innovators shaping the open web.\\\\\\\\n        </Lead>\\\\\\\\n        <Link\\\\\\\\n          to={href({\\\\\\\\n            widgetSrc: \\\\\\\\\\\\\\\"devhub.near/widget/app\\\\\\\\\\\\\\\",\\\\\\\\n            params: {\\\\\\\\n              page: \\\\\\\\\\\\\\\"about\\\\\\\\\\\\\\\",\\\\\\\\n            },\\\\\\\\n          })}\\\\\\\\n        >\\\\\\\\n          <CTA href=\\\\\\\\\\\\\\\"#\\\\\\\\\\\\\\\">Read more \\\\\\\\u{2192}</CTA>\\\\\\\\n        </Link>\\\\\\\\n      </DesktopDescription>\\\\\\\\n    </HeroSection>\\\\\\\\n    <MobileImage src={imageLink} />\\\\\\\\n    <ImageContainer>\\\\\\\\n      <Image src={imageLink} />\\\\\\\\n    </ImageContainer>\\\\\\\\n    <MobileDescription>\\\\\\\\n      <Lead>Join a vibrant community of innovators shaping the open web.</Lead>\\\\\\\\n      <Link\\\\\\\\n        to={href({\\\\\\\\n          widgetSrc: \\\\\\\\\\\\\\\"devhub.near/widget/app\\\\\\\\\\\\\\\",\\\\\\\\n          params: {\\\\\\\\n            page: \\\\\\\\\\\\\\\"about\\\\\\\\\\\\\\\",\\\\\\\\n          },\\\\\\\\n        })}\\\\\\\\n      >\\\\\\\\n        <CTA href=\\\\\\\\\\\\\\\"#\\\\\\\\\\\\\\\">Read more \\\\\\\\u{2192}</CTA>\\\\\\\\n      </Link>\\\\\\\\n    </MobileDescription>\\\\\\\\n  </Container>\\\\\\\\n);\\\\\\\\n\"}, \"devhub.entity.addon.blog.Card\": {\"\": \"function Card({ data }) {\\\\\\\\n  const { category, title, subtitle, date } = data;\\\\\\\\n\\\\\\\\n  const Container = styled.div`\\\\\\\\n    min-height: 12.5rem;\\\\\\\\n    display: flex;\\\\\\\\n    padding: 1rem;\\\\\\\\n    flex-direction: column;\\\\\\\\n    align-items: flex-start;\\\\\\\\n    gap: 1rem;\\\\\\\\n    flex-shrink: 0;\\\\\\\\n\\\\\\\\n    border-radius: 1rem;\\\\\\\\n    border: 1px solid rgba(129, 129, 129, 0.3);\\\\\\\\n    background: #fffefe;\\\\\\\\n\\\\\\\\n    h5 {\\\\\\\\n      margin: 0;\\\\\\\\n      color: #151515;\\\\\\\\n      font-size: 1.5rem;\\\\\\\\n      font-style: normal;\\\\\\\\n      font-weight: 700;\\\\\\\\n      line-height: 110%; /* 39.6px */\\\\\\\\n    }\\\\\\\\n\\\\\\\\n    ${category &&\\\\\\\\n    `\\\\\\\\n    span.category {\\\\\\\\n      color: ${\\\\\\\\n        category.toLowerCase() === \\\\\\\\\\\\\\\"news\\\\\\\\\\\\\\\"\\\\\\\\n          ? \\\\\\\\\\\\\\\"#F40303\\\\\\\\\\\\\\\"\\\\\\\\n          : category.toLowerCase() === \\\\\\\\\\\\\\\"guide\\\\\\\\\\\\\\\"\\\\\\\\n          ? \\\\\\\\\\\\\\\"#004BE1\\\\\\\\\\\\\\\"\\\\\\\\n          : category.toLowerCase() === \\\\\\\\\\\\\\\"reference\\\\\\\\\\\\\\\" && \\\\\\\\\\\\\\\"#FF7A00\\\\\\\\\\\\\\\"\\\\\\\\n      };\\\\\\\\n      font-size: 1rem;\\\\\\\\n      font-style: normal;\\\\\\\\n      font-weight: 700;\\\\\\\\n      line-height: 20px; /* 125% */\\\\\\\\n      text-transform: uppercase;\\\\\\\\n    }\\\\\\\\n    `}\\\\\\\\n\\\\\\\\n    span.date {\\\\\\\\n      color: #818181;\\\\\\\\n      font-size: 16px;\\\\\\\\n      font-style: normal;\\\\\\\\n      font-weight: 400;\\\\\\\\n      line-height: 20px; /* 125% */\\\\\\\\n    }\\\\\\\\n\\\\\\\\n    p {\\\\\\\\n      margin: 0;\\\\\\\\n      color: #151515;\\\\\\\\n      font-size: 1rem;\\\\\\\\n      font-style: normal;\\\\\\\\n      font-weight: 400;\\\\\\\\n      line-height: 120%; /* 28.8px */\\\\\\\\n    }\\\\\\\\n  `;\\\\\\\\n\\\\\\\\n  const options = { year: \\\\\\\\\\\\\\\"numeric\\\\\\\\\\\\\\\", month: \\\\\\\\\\\\\\\"short\\\\\\\\\\\\\\\", day: \\\\\\\\\\\\\\\"numeric\\\\\\\\\\\\\\\" };\\\\\\\\n  const formattedDate = new Date(date).toLocaleString(\\\\\\\\\\\\\\\"en-US\\\\\\\\\\\\\\\", options);\\\\\\\\n\\\\\\\\n  return (\\\\\\\\n    <Container id={`blog-card-${title}`}>\\\\\\\\n      {category && <span className=\\\\\\\\\\\\\\\"category\\\\\\\\\\\\\\\">{category}</span>}\\\\\\\\n      <h5>{title}</h5>\\\\\\\\n      <p>{subtitle}</p>\\\\\\\\n      <span className=\\\\\\\\\\\\\\\"date\\\\\\\\\\\\\\\">{formattedDate}</span>\\\\\\\\n    </Container>\\\\\\\\n  );\\\\\\\\n}\\\\\\\\n\\\\\\\\nreturn { Card };\\\\\\\\n\"}, \"devhub.entity.addon.blog.Feed\": {\"\": \"const { Item, Layout } = props;\\\\\\\\n\\\\\\\\nLayout = Layout || (() => <></>);\\\\\\\\n\\\\\\\\nconst Container = styled.div``;\\\\\\\\n\\\\\\\\nconst Loader = styled.div`\\\\\\\\n  text-align: center;\\\\\\\\n  padding: 20px;\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst QUERYAPI_ENDPOINT = `https://near-queryapi.api.pagoda.co/v1/graphql/`;\\\\\\\\nconst DISPLAY_COUNT = 10;\\\\\\\\n\\\\\\\\nconst fetchGraphQL = (operationsDoc, operationName, variables) => {\\\\\\\\n  return asyncFetch(QUERYAPI_ENDPOINT, {\\\\\\\\n    method: \\\\\\\\\\\\\\\"POST\\\\\\\\\\\\\\\",\\\\\\\\n    headers: { \\\\\\\\\\\\\\\"x-hasura-role\\\\\\\\\\\\\\\": `bo_near` },\\\\\\\\n    body: JSON.stringify({\\\\\\\\n      query: operationsDoc,\\\\\\\\n      variables: variables,\\\\\\\\n      operationName: operationName,\\\\\\\\n    }),\\\\\\\\n  });\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst queryName =\\\\\\\\n  props.queryName ?? `bo_near_devhub_v17_posts_with_latest_snapshot`;\\\\\\\\n\\\\\\\\nconst query = `query DevhubPostsQuery($limit: Int = 100, $offset: Int = 0, $where: ${queryName}_bool_exp = {}) {\\\\\\\\n    ${queryName}(\\\\\\\\n      limit: $limit\\\\\\\\n      offset: $offset\\\\\\\\n      order_by: {block_height: desc}\\\\\\\\n      where: $where\\\\\\\\n    ) {\\\\\\\\n      post_id\\\\\\\\n    }\\\\\\\\n  }\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst [postIds, setPostIds] = useState([]);\\\\\\\\nconst [loading, setLoading] = useState(false);\\\\\\\\nconst [cachedItems, setCachedItems] = useState({});\\\\\\\\nconst [hasNext, setHasNext] = useState(true);\\\\\\\\n\\\\\\\\nconst buildWhereClause = () => {\\\\\\\\n  let where = {};\\\\\\\\n  if (props.author) {\\\\\\\\n    where = { author_id: { _eq: props.author }, ...where };\\\\\\\\n  }\\\\\\\\n  if (props.term) {\\\\\\\\n    where = { description: { _ilike: `%${props.term}%` }, ...where };\\\\\\\\n  }\\\\\\\\n  if (props.includeLabels && Array.isArray(props.includeLabels)) {\\\\\\\\n    const labelConditions = props.includeLabels.map((label) => ({\\\\\\\\n      labels: { _contains: label },\\\\\\\\n    }));\\\\\\\\n\\\\\\\\n    where = { _and: [...labelConditions, where] };\\\\\\\\n  }\\\\\\\\n  if (props.excludeLabels && Array.isArray(props.excludeLabels)) {\\\\\\\\n    const labelConditions = props.excludeLabels.map((label) => ({\\\\\\\\n      labels: { _nin: label },\\\\\\\\n    }));\\\\\\\\n\\\\\\\\n    where = { _and: [...labelConditions, where] };\\\\\\\\n  }\\\\\\\\n  if (!props.recency) {\\\\\\\\n    where = { parent_id: { _is_null: true }, ...where };\\\\\\\\n  }\\\\\\\\n  return where;\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst fetchPostIds = (offset) => {\\\\\\\\n  if (!offset) {\\\\\\\\n    offset = 0;\\\\\\\\n  }\\\\\\\\n  if (loading) return;\\\\\\\\n  setLoading(true);\\\\\\\\n  const variables = { limit: DISPLAY_COUNT, offset, where: buildWhereClause() };\\\\\\\\n  fetchGraphQL(query, \\\\\\\\\\\\\\\"DevhubPostsQuery\\\\\\\\\\\\\\\", variables).then((result) => {\\\\\\\\n    if (result.status === 200) {\\\\\\\\n      if (result.body.data) {\\\\\\\\n        const data = result.body.data[queryName];\\\\\\\\n        const newPostIds = data.map((p) => p.post_id);\\\\\\\\n        setPostIds(offset === 0 ? newPostIds : [...postIds, ...newPostIds]);\\\\\\\\n        setHasNext(data.length >= variables.limit);\\\\\\\\n      } else {\\\\\\\\n        console.error(\\\\\\\\\\\\\\\"GraphQL Error:\\\\\\\\\\\\\\\", result.errors);\\\\\\\\n      }\\\\\\\\n      setLoading(false);\\\\\\\\n    }\\\\\\\\n  });\\\\\\\\n};\\\\\\\\n\\\\\\\\nuseEffect(() => {\\\\\\\\n  fetchPostIds();\\\\\\\\n}, [props.author, props.term, props.tag, props.recency]);\\\\\\\\n\\\\\\\\nconst handleLoadMore = () => {\\\\\\\\n  if (!hasNext) return;\\\\\\\\n  fetchPostIds(postIds.length);\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst renderLoader = () => <Loader>Loading...</Loader>;\\\\\\\\n\\\\\\\\nconst renderItem = (postId) => (\\\\\\\\n  <div key={postId}>\\\\\\\\n    {(props.renderItem && props.renderItem(postId)) || <div>Post {postId}</div>}\\\\\\\\n  </div>\\\\\\\\n);\\\\\\\\n\\\\\\\\nconst cachedRenderItem = (postId) => {\\\\\\\\n  if (!(postId in cachedItems)) {\\\\\\\\n    cachedItems[postId] = renderItem(postId);\\\\\\\\n    setCachedItems({ ...cachedItems });\\\\\\\\n  }\\\\\\\\n  return cachedItems[postId];\\\\\\\\n};\\\\\\\\n\\\\\\\\nreturn (\\\\\\\\n  <Container>\\\\\\\\n    {loading && renderLoader()}\\\\\\\\n    {postIds.length > 0 ? (\\\\\\\\n      <InfiniteScroll\\\\\\\\n        pageStart={0}\\\\\\\\n        dataLength={postIds.length}\\\\\\\\n        loadMore={handleLoadMore}\\\\\\\\n        hasMore={hasNext}\\\\\\\\n        loader={renderLoader()}\\\\\\\\n      >\\\\\\\\n        <Layout>\\\\\\\\n          {/* Layout */}\\\\\\\\n          {postIds.map(cachedRenderItem)}\\\\\\\\n        </Layout>\\\\\\\\n      </InfiniteScroll>\\\\\\\\n    ) : (\\\\\\\\n      <p class=\\\\\\\\\\\\\\\"text-secondary\\\\\\\\\\\\\\\">No posts</p>\\\\\\\\n    )}\\\\\\\\n  </Container>\\\\\\\\n);\\\\\\\\n\"}, \"devhub.entity.addon.blog.Page\": {\"\": \"const imagelink =\\\\\\\\n  \\\\\\\\\\\\\\\"https://ipfs.near.social/ipfs/bafkreiajzvmy7574k7mp3if6u53mdukfr3hoc2kjkhjadt6x56vqhd5swy\\\\\\\\\\\\\\\";\\\\\\\\n\\\\\\\\nfunction Page({ data }) {\\\\\\\\n  const { category, title, description, subtitle, date, content } = data;\\\\\\\\n  const Container = styled.div`\\\\\\\\n    display: flex;\\\\\\\\n    flex-direction: column;\\\\\\\\n    width: 100%;\\\\\\\\n\\\\\\\\n    padding: 0 3rem;\\\\\\\\n\\\\\\\\n    ${category &&\\\\\\\\n    `\\\\\\\\n    span.category {\\\\\\\\n      color: ${\\\\\\\\n        category.toLowerCase() === \\\\\\\\\\\\\\\"news\\\\\\\\\\\\\\\"\\\\\\\\n          ? \\\\\\\\\\\\\\\"#F40303\\\\\\\\\\\\\\\"\\\\\\\\n          : category.toLowerCase() === \\\\\\\\\\\\\\\"guide\\\\\\\\\\\\\\\"\\\\\\\\n          ? \\\\\\\\\\\\\\\"#004BE1\\\\\\\\\\\\\\\"\\\\\\\\n          : category.toLowerCase() === \\\\\\\\\\\\\\\"reference\\\\\\\\\\\\\\\" && \\\\\\\\\\\\\\\"#FF7A00\\\\\\\\\\\\\\\"\\\\\\\\n      };\\\\\\\\n      font-size: 1.5rem;\\\\\\\\n      font-style: normal;\\\\\\\\n      font-weight: 700;\\\\\\\\n      line-height: 20px; /* 125% */\\\\\\\\n      text-transform: uppercase;\\\\\\\\n    }\\\\\\\\n    `}\\\\\\\\n\\\\\\\\n    span.date {\\\\\\\\n      color: #818181;\\\\\\\\n      font-size: 1rem;\\\\\\\\n      font-style: normal;\\\\\\\\n      font-weight: 400;\\\\\\\\n      line-height: 20px; /* 125% */\\\\\\\\n      margin: 1.5rem 0;\\\\\\\\n    }\\\\\\\\n\\\\\\\\n    h1 {\\\\\\\\n      color: #151515;\\\\\\\\n      font-size: 3.5rem;\\\\\\\\n      font-style: normal;\\\\\\\\n      font-weight: 700;\\\\\\\\n      line-height: 100%; /* 88px */\\\\\\\\n      margin: 1rem 0;\\\\\\\\n    }\\\\\\\\n\\\\\\\\n    p.subtitle {\\\\\\\\n      color: #555;\\\\\\\\n      font-size: 1.5rem;\\\\\\\\n      font-style: normal;\\\\\\\\n      font-weight: 400;\\\\\\\\n      line-height: 110%; /* 35.2px */\\\\\\\\n      margin: 0;\\\\\\\\n    }\\\\\\\\n\\\\\\\\n    @media screen and (max-width: 768px) {\\\\\\\\n      padding: 0 1rem;\\\\\\\\n\\\\\\\\n      span.category {\\\\\\\\n        font-size: 0.75rem;\\\\\\\\n      }\\\\\\\\n\\\\\\\\n      h1 {\\\\\\\\n        font-size: 2rem;\\\\\\\\n      }\\\\\\\\n\\\\\\\\n      p.subtitle {\\\\\\\\n        font-size: 1rem;\\\\\\\\n      }\\\\\\\\n    }\\\\\\\\n  `;\\\\\\\\n\\\\\\\\n  const BackgroundImage = styled.img`\\\\\\\\n    width: 100%;\\\\\\\\n    height: auto;\\\\\\\\n    object-fit: cover;\\\\\\\\n    margin-bottom: 1rem;\\\\\\\\n  `;\\\\\\\\n\\\\\\\\n  const options = { year: \\\\\\\\\\\\\\\"numeric\\\\\\\\\\\\\\\", month: \\\\\\\\\\\\\\\"short\\\\\\\\\\\\\\\", day: \\\\\\\\\\\\\\\"numeric\\\\\\\\\\\\\\\" };\\\\\\\\n  const formattedDate = new Date(date).toLocaleString(\\\\\\\\\\\\\\\"en-US\\\\\\\\\\\\\\\", options);\\\\\\\\n\\\\\\\\n  return (\\\\\\\\n    <>\\\\\\\\n      <BackgroundImage src={imagelink} />\\\\\\\\n      <Container>\\\\\\\\n        {category && <span className=\\\\\\\\\\\\\\\"category\\\\\\\\\\\\\\\">{category}</span>}\\\\\\\\n        <h1>{title}</h1>\\\\\\\\n        <p className=\\\\\\\\\\\\\\\"subtitle\\\\\\\\\\\\\\\">{subtitle}</p>\\\\\\\\n        <span className=\\\\\\\\\\\\\\\"date\\\\\\\\\\\\\\\">{formattedDate}</span>\\\\\\\\n        <p>{description}</p>\\\\\\\\n        <Widget\\\\\\\\n          src={\\\\\\\\n            \\\\\\\\\\\\\\\"devhub.near/widget/devhub.components.molecule.MarkdownViewer\\\\\\\\\\\\\\\"\\\\\\\\n          }\\\\\\\\n          props={{ text: content }}\\\\\\\\n        />\\\\\\\\n      </Container>\\\\\\\\n    </>\\\\\\\\n  );\\\\\\\\n}\\\\\\\\n\\\\\\\\nreturn { Page };\\\\\\\\n\"}, \"devhub.entity.community.Teams\": {\"\": \"const { handle } = props;\\\\\\\\n\\\\\\\\nconst { Tile } =\\\\\\\\n  VM.require(\\\\\\\\\\\\\\\"devhub.near/widget/devhub.components.molecule.Tile\\\\\\\\\\\\\\\") ||\\\\\\\\n  (() => <></>);\\\\\\\\n\\\\\\\\nconst { getCommunity } = VM.require(\\\\\\\\n  \\\\\\\\\\\\\\\"devhub.near/widget/core.adapter.devhub-contract\\\\\\\\\\\\\\\"\\\\\\\\n);\\\\\\\\n\\\\\\\\nconst communityData = getCommunity({ handle });\\\\\\\\n\\\\\\\\nif (communityData === null) {\\\\\\\\n  return <div>Loading...</div>;\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst UserList = ({ name, users }) => (\\\\\\\\n  <div>\\\\\\\\n    {(users ?? []).map((user, i) => (\\\\\\\\n      <div className={`row ${i < users.length - 1 ? \\\\\\\\\\\\\\\"mb-3\\\\\\\\\\\\\\\" : \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\"}`}>\\\\\\\\n        <div class=\\\\\\\\\\\\\\\"col-3\\\\\\\\\\\\\\\">\\\\\\\\n          <b>{name + \\\\\\\\\\\\\\\" #\\\\\\\\\\\\\\\" + (i + 1)}</b>\\\\\\\\n        </div>\\\\\\\\n\\\\\\\\n        <div class=\\\\\\\\\\\\\\\"col-9\\\\\\\\\\\\\\\">\\\\\\\\n          <span\\\\\\\\n            key={user}\\\\\\\\n            className=\\\\\\\\\\\\\\\"d-inline-flex\\\\\\\\\\\\\\\"\\\\\\\\n            style={{ fontWeight: 500 }}\\\\\\\\n          >\\\\\\\\n            <Widget\\\\\\\\n              src=\\\\\\\\\\\\\\\"neardevgov.near/widget/ProfileLine\\\\\\\\\\\\\\\"\\\\\\\\n              props={{ accountId: user, hideAccountId: true, tooltip: true }}\\\\\\\\n            />\\\\\\\\n          </span>\\\\\\\\n        </div>\\\\\\\\n      </div>\\\\\\\\n    ))}\\\\\\\\n  </div>\\\\\\\\n);\\\\\\\\n\\\\\\\\nreturn (\\\\\\\\n  <div className=\\\\\\\\\\\\\\\"d-flex flex-column align-items-center gap-4 w-100\\\\\\\\\\\\\\\">\\\\\\\\n    <Tile className=\\\\\\\\\\\\\\\"p-3 w-100 bg-white mb-3\\\\\\\\\\\\\\\" style={{ maxWidth: 960 }}>\\\\\\\\n      <div>\\\\\\\\n        <div\\\\\\\\n          className=\\\\\\\\\\\\\\\"d-flex align-items-center justify-content-between w-100 pb-3\\\\\\\\\\\\\\\"\\\\\\\\n          style={{ minHeight: 30 }}\\\\\\\\n        >\\\\\\\\n          <h5 className=\\\\\\\\\\\\\\\"h5 d-inline-flex gap-2 m-0\\\\\\\\\\\\\\\">\\\\\\\\n            <span>Admins</span>\\\\\\\\n          </h5>\\\\\\\\n        </div>\\\\\\\\n        <UserList name=\\\\\\\\\\\\\\\"Admin\\\\\\\\\\\\\\\" users={communityData.admins} />\\\\\\\\n      </div>\\\\\\\\n    </Tile>\\\\\\\\n  </div>\\\\\\\\n);\\\\\\\\n\"}, \"devhub.entity.post.PostEditor\": {\"\": \"/* INCLUDE: \\\\\\\\\\\\\\\"core/lib/autocomplete\\\\\\\\\\\\\\\" */\\\\\\\\nconst autocompleteEnabled = true;\\\\\\\\n\\\\\\\\nconst AutoComplete = styled.div`\\\\\\\\n  z-index: 5;\\\\\\\\n\\\\\\\\n  > div > div {\\\\\\\\n    padding: calc(var(--padding) / 2);\\\\\\\\n  }\\\\\\\\n`;\\\\\\\\n\\\\\\\\nfunction textareaInputHandler(value) {\\\\\\\\n  const showAccountAutocomplete = /@[\\\\\\\\\\\\\\\\w][^\\\\\\\\\\\\\\\\s]*$/.test(value);\\\\\\\\n  State.update((lastKnownState) => ({\\\\\\\\n    ...lastKnownState,\\\\\\\\n    text: value,\\\\\\\\n    showAccountAutocomplete,\\\\\\\\n  }));\\\\\\\\n}\\\\\\\\n\\\\\\\\nfunction autoCompleteAccountId(id) {\\\\\\\\n  let description = state.description.replace(/[\\\\\\\\\\\\\\\\s]{0,1}@[^\\\\\\\\\\\\\\\\s]*$/, \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\");\\\\\\\\n  description = `${description} @${id}`.trim() + \\\\\\\\\\\\\\\" \\\\\\\\\\\\\\\";\\\\\\\\n  State.update((lastKnownState) => ({\\\\\\\\n    ...lastKnownState,\\\\\\\\n    description,\\\\\\\\n    showAccountAutocomplete: false,\\\\\\\\n  }));\\\\\\\\n}\\\\\\\\n/* END_INCLUDE: \\\\\\\\\\\\\\\"core/lib/autocomplete\\\\\\\\\\\\\\\" */\\\\\\\\n\\\\\\\\nconst postType = props.postType ?? \\\\\\\\\\\\\\\"Sponsorship\\\\\\\\\\\\\\\";\\\\\\\\nconst parentId = props.parentId ?? null;\\\\\\\\nconst postId = props.postId ?? null;\\\\\\\\nconst mode = props.mode ?? \\\\\\\\\\\\\\\"Create\\\\\\\\\\\\\\\";\\\\\\\\n\\\\\\\\nconst referralLabels = props.referral ? [`referral:${props.referral}`] : [];\\\\\\\\nconst labelStrings = (props.labels ?? []).concat(referralLabels);\\\\\\\\n\\\\\\\\nconst labels = labelStrings.map((s) => {\\\\\\\\n  return { name: s };\\\\\\\\n});\\\\\\\\n\\\\\\\\ninitState({\\\\\\\\n  seekingFunding: false,\\\\\\\\n  author_id: context.accountId,\\\\\\\\n  // Should be a list of objects with field \\\\\\\\\\\\\\\"name\\\\\\\\\\\\\\\".\\\\\\\\n  labels,\\\\\\\\n  // Should be a list of labels as strings.\\\\\\\\n  // Both of the label structures should be modified together.\\\\\\\\n  labelStrings,\\\\\\\\n  postType,\\\\\\\\n  name: props.name ?? \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\",\\\\\\\\n  description: props.description ?? \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\",\\\\\\\\n  amount: props.amount ?? \\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\n  token: props.token ?? \\\\\\\\\\\\\\\"USDT\\\\\\\\\\\\\\\",\\\\\\\\n  supervisor: props.supervisor ?? \\\\\\\\\\\\\\\"neardevdao.near\\\\\\\\\\\\\\\",\\\\\\\\n  githubLink: props.githubLink ?? \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\",\\\\\\\\n  warning: \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\",\\\\\\\\n  draftStateApplied: false,\\\\\\\\n});\\\\\\\\n\\\\\\\\nif (!state.draftStateApplied && props.draftState) {\\\\\\\\n  State.update({ ...props.draftState, draftStateApplied: true });\\\\\\\\n}\\\\\\\\n\\\\\\\\nlet fields = {\\\\\\\\n  Comment: [\\\\\\\\\\\\\\\"description\\\\\\\\\\\\\\\"],\\\\\\\\n  Idea: [\\\\\\\\\\\\\\\"name\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"description\\\\\\\\\\\\\\\"],\\\\\\\\n  Solution: [\\\\\\\\\\\\\\\"name\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"description\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"fund_raising\\\\\\\\\\\\\\\"],\\\\\\\\n  Attestation: [\\\\\\\\\\\\\\\"name\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"description\\\\\\\\\\\\\\\"],\\\\\\\\n  Sponsorship: [\\\\\\\\n    \\\\\\\\\\\\\\\"name\\\\\\\\\\\\\\\",\\\\\\\\n    \\\\\\\\\\\\\\\"description\\\\\\\\\\\\\\\",\\\\\\\\n    \\\\\\\\\\\\\\\"amount\\\\\\\\\\\\\\\",\\\\\\\\n    \\\\\\\\\\\\\\\"sponsorship_token\\\\\\\\\\\\\\\",\\\\\\\\n    \\\\\\\\\\\\\\\"supervisor\\\\\\\\\\\\\\\",\\\\\\\\n  ],\\\\\\\\n  Github: [\\\\\\\\\\\\\\\"githubLink\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"name\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"description\\\\\\\\\\\\\\\"],\\\\\\\\n}[postType];\\\\\\\\n\\\\\\\\n// This must be outside onClick, because Near.view returns null at first, and when the view call finished, it returns true/false.\\\\\\\\n// If checking this inside onClick, it will give `null` and we cannot tell the result is true or false.\\\\\\\\nlet grantNotify = Near.view(\\\\\\\\\\\\\\\"social.near\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"is_write_permission_granted\\\\\\\\\\\\\\\", {\\\\\\\\n  predecessor_id: \\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\",\\\\\\\\n  key: context.accountId + \\\\\\\\\\\\\\\"/index/notify\\\\\\\\\\\\\\\",\\\\\\\\n});\\\\\\\\nif (grantNotify === null) {\\\\\\\\n  return;\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst tokenMapping = {\\\\\\\\n  NEAR: \\\\\\\\\\\\\\\"NEAR\\\\\\\\\\\\\\\",\\\\\\\\n  USDT: {\\\\\\\\n    NEP141: {\\\\\\\\n      address: \\\\\\\\\\\\\\\"usdt.tether-token.near\\\\\\\\\\\\\\\",\\\\\\\\n    },\\\\\\\\n  },\\\\\\\\n  USDC: {\\\\\\\\n    NEP141: {\\\\\\\\n      address:\\\\\\\\n        \\\\\\\\\\\\\\\"17208628f84f5d6ad33f0da3bbbeb27ffcb398eac501a31bd6ad2011e36133a1\\\\\\\\\\\\\\\",\\\\\\\\n    },\\\\\\\\n  },\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst onSubmit = () => {\\\\\\\\n  let labels = state.labelStrings;\\\\\\\\n  var body = {\\\\\\\\n    Comment: { description: state.description, comment_version: \\\\\\\\\\\\\\\"V2\\\\\\\\\\\\\\\" },\\\\\\\\n    Idea: {\\\\\\\\n      name: state.name,\\\\\\\\n      description: state.description,\\\\\\\\n      idea_version: \\\\\\\\\\\\\\\"V1\\\\\\\\\\\\\\\",\\\\\\\\n    },\\\\\\\\n    Solution: {\\\\\\\\n      name: state.name,\\\\\\\\n      description: generateDescription(\\\\\\\\n        state.description,\\\\\\\\n        state.amount,\\\\\\\\n        state.token,\\\\\\\\n        state.supervisor,\\\\\\\\n        state.seekingFunding\\\\\\\\n      ),\\\\\\\\n      solution_version: \\\\\\\\\\\\\\\"V1\\\\\\\\\\\\\\\",\\\\\\\\n    },\\\\\\\\n    Attestation: {\\\\\\\\n      name: state.name,\\\\\\\\n      description: state.description,\\\\\\\\n      attestation_version: \\\\\\\\\\\\\\\"V1\\\\\\\\\\\\\\\",\\\\\\\\n    },\\\\\\\\n    Sponsorship: {\\\\\\\\n      name: state.name,\\\\\\\\n      description: state.description,\\\\\\\\n      amount: state.amount,\\\\\\\\n      sponsorship_token: tokenMapping[state.token],\\\\\\\\n      supervisor: state.supervisor,\\\\\\\\n      sponsorship_version: \\\\\\\\\\\\\\\"V1\\\\\\\\\\\\\\\",\\\\\\\\n    },\\\\\\\\n    Github: {\\\\\\\\n      name: state.name,\\\\\\\\n      description: state.description,\\\\\\\\n      github_version: \\\\\\\\\\\\\\\"V0\\\\\\\\\\\\\\\",\\\\\\\\n      github_link: state.githubLink,\\\\\\\\n    },\\\\\\\\n  }[postType];\\\\\\\\n  body[\\\\\\\\\\\\\\\"post_type\\\\\\\\\\\\\\\"] = postType;\\\\\\\\n  if (!context.accountId) {\\\\\\\\n    return;\\\\\\\\n  }\\\\\\\\n  let txn = [];\\\\\\\\n  if (mode == \\\\\\\\\\\\\\\"Create\\\\\\\\\\\\\\\") {\\\\\\\\n    props.onDraftStateChange(\\\\\\\\n      Object.assign({}, state, { parent_post_id: parentId })\\\\\\\\n    );\\\\\\\\n    txn.push({\\\\\\\\n      contractName: \\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\",\\\\\\\\n      methodName: \\\\\\\\\\\\\\\"add_post\\\\\\\\\\\\\\\",\\\\\\\\n      args: {\\\\\\\\n        parent_id: parentId,\\\\\\\\n        labels,\\\\\\\\n        body,\\\\\\\\n      },\\\\\\\\n      deposit: Big(10).pow(21).mul(2),\\\\\\\\n      gas: Big(10).pow(12).mul(100),\\\\\\\\n    });\\\\\\\\n  } else if (mode == \\\\\\\\\\\\\\\"Edit\\\\\\\\\\\\\\\") {\\\\\\\\n    props.onDraftStateChange(\\\\\\\\n      Object.assign({}, state, { edit_post_id: postId })\\\\\\\\n    );\\\\\\\\n    txn.push({\\\\\\\\n      contractName: \\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\",\\\\\\\\n      methodName: \\\\\\\\\\\\\\\"edit_post\\\\\\\\\\\\\\\",\\\\\\\\n      args: {\\\\\\\\n        id: postId,\\\\\\\\n        labels,\\\\\\\\n        body,\\\\\\\\n      },\\\\\\\\n      deposit: Big(10).pow(21).mul(2),\\\\\\\\n      gas: Big(10).pow(12).mul(100),\\\\\\\\n    });\\\\\\\\n  }\\\\\\\\n  if (mode == \\\\\\\\\\\\\\\"Create\\\\\\\\\\\\\\\" || mode == \\\\\\\\\\\\\\\"Edit\\\\\\\\\\\\\\\") {\\\\\\\\n    if (grantNotify === false) {\\\\\\\\n      txn.unshift({\\\\\\\\n        contractName: \\\\\\\\\\\\\\\"social.near\\\\\\\\\\\\\\\",\\\\\\\\n        methodName: \\\\\\\\\\\\\\\"grant_write_permission\\\\\\\\\\\\\\\",\\\\\\\\n        args: {\\\\\\\\n          predecessor_id: \\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\",\\\\\\\\n          keys: [context.accountId + \\\\\\\\\\\\\\\"/index/notify\\\\\\\\\\\\\\\"],\\\\\\\\n        },\\\\\\\\n        deposit: Big(10).pow(23),\\\\\\\\n        gas: Big(10).pow(12).mul(30),\\\\\\\\n      });\\\\\\\\n    }\\\\\\\\n    Near.call(txn);\\\\\\\\n  }\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst normalizeLabel = (label) =>\\\\\\\\n  label\\\\\\\\n    .replaceAll(/[- \\\\\\\\\\\\\\\\.]/g, \\\\\\\\\\\\\\\"_\\\\\\\\\\\\\\\")\\\\\\\\n    .replaceAll(/[^\\\\\\\\\\\\\\\\w]+/g, \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\")\\\\\\\\n    .replaceAll(/_+/g, \\\\\\\\\\\\\\\"-\\\\\\\\\\\\\\\")\\\\\\\\n    .replace(/^-+/, \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\")\\\\\\\\n    .replace(/-+$/, \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\")\\\\\\\\n    .toLowerCase()\\\\\\\\n    .trim(\\\\\\\\\\\\\\\"-\\\\\\\\\\\\\\\");\\\\\\\\n\\\\\\\\nconst checkLabel = (label) => {\\\\\\\\n  Near.asyncView(\\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"is_allowed_to_use_labels\\\\\\\\\\\\\\\", {\\\\\\\\n    editor: context.accountId,\\\\\\\\n    labels: [label],\\\\\\\\n  }).then((allowed) => {\\\\\\\\n    if (allowed) {\\\\\\\\n      State.update({ warning: \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\" });\\\\\\\\n    } else {\\\\\\\\n      State.update({\\\\\\\\n        warning:\\\\\\\\n          \\\\\\\\\\\\'The label \\\\\\\\\\\\\\\"\\\\\\\\\\\\' +\\\\\\\\n          label +\\\\\\\\n          \\\\\\\\\\\\'\\\\\\\\\\\\\\\" is protected and can only be added by moderators\\\\\\\\\\\\',\\\\\\\\n      });\\\\\\\\n      return;\\\\\\\\n    }\\\\\\\\n  });\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst setLabels = (labels) => {\\\\\\\\n  labels = labels.map((o) => {\\\\\\\\n    o.name = normalizeLabel(o.name);\\\\\\\\n    return o;\\\\\\\\n  });\\\\\\\\n  if (labels.length < state.labels.length) {\\\\\\\\n    let oldLabels = new Set(state.labels.map((label) => label.name));\\\\\\\\n    for (let label of labels) {\\\\\\\\n      oldLabels.delete(label.name);\\\\\\\\n    }\\\\\\\\n    let removed = oldLabels.values().next().value;\\\\\\\\n    Near.asyncView(\\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"is_allowed_to_use_labels\\\\\\\\\\\\\\\", {\\\\\\\\n      editor: context.accountId,\\\\\\\\n      labels: [removed],\\\\\\\\n    }).then((allowed) => {\\\\\\\\n      if (allowed) {\\\\\\\\n        let labelStrings = labels.map(({ name }) => name);\\\\\\\\n        State.update({ labels, labelStrings });\\\\\\\\n      } else {\\\\\\\\n        State.update({\\\\\\\\n          warning:\\\\\\\\n            \\\\\\\\\\\\'The label \\\\\\\\\\\\\\\"\\\\\\\\\\\\' +\\\\\\\\n            removed +\\\\\\\\n            \\\\\\\\\\\\'\\\\\\\\\\\\\\\" is protected and can only be updated by moderators\\\\\\\\\\\\',\\\\\\\\n        });\\\\\\\\n        return;\\\\\\\\n      }\\\\\\\\n    });\\\\\\\\n  } else {\\\\\\\\n    let labelStrings = labels.map((o) => {\\\\\\\\n      return o.name;\\\\\\\\n    });\\\\\\\\n    State.update({ labels, labelStrings });\\\\\\\\n  }\\\\\\\\n};\\\\\\\\nconst existingLabelStrings =\\\\\\\\n  Near.view(\\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"get_all_allowed_labels\\\\\\\\\\\\\\\", {\\\\\\\\n    editor: context.accountId,\\\\\\\\n  }) ?? [];\\\\\\\\nconst existingLabelSet = new Set(existingLabelStrings);\\\\\\\\nconst existingLabels = existingLabelStrings.map((s) => {\\\\\\\\n  return { name: s };\\\\\\\\n});\\\\\\\\n\\\\\\\\nconst labelEditor = (\\\\\\\\n  <div className=\\\\\\\\\\\\\\\"col-lg-12  mb-2\\\\\\\\\\\\\\\">\\\\\\\\n    Labels:\\\\\\\\n    <Typeahead\\\\\\\\n      multiple\\\\\\\\n      labelKey=\\\\\\\\\\\\\\\"name\\\\\\\\\\\\\\\"\\\\\\\\n      onInputChange={checkLabel}\\\\\\\\n      onChange={setLabels}\\\\\\\\n      options={existingLabels}\\\\\\\\n      placeholder=\\\\\\\\\\\\\\\"near.social, widget, NEP, standard, protocol, tool\\\\\\\\\\\\\\\"\\\\\\\\n      selected={state.labels}\\\\\\\\n      positionFixed\\\\\\\\n      allowNew={(results, props) => {\\\\\\\\n        return (\\\\\\\\n          !existingLabelSet.has(props.text) &&\\\\\\\\n          props.selected.filter((selected) => selected.name === props.text)\\\\\\\\n            .length == 0 &&\\\\\\\\n          Near.view(\\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"is_allowed_to_use_labels\\\\\\\\\\\\\\\", {\\\\\\\\n            editor: context.accountId,\\\\\\\\n            labels: [props.text],\\\\\\\\n          })\\\\\\\\n        );\\\\\\\\n      }}\\\\\\\\n    />\\\\\\\\n  </div>\\\\\\\\n);\\\\\\\\n\\\\\\\\nconst githubLinkDiv = (\\\\\\\\n  <div className=\\\\\\\\\\\\\\\"col-lg-12  mb-2\\\\\\\\\\\\\\\">\\\\\\\\n    Github Issue URL:\\\\\\\\n    <input\\\\\\\\n      type=\\\\\\\\\\\\\\\"text\\\\\\\\\\\\\\\"\\\\\\\\n      value={state.githubLink}\\\\\\\\n      onChange={(event) => State.update({ githubLink: event.target.value })}\\\\\\\\n    />\\\\\\\\n  </div>\\\\\\\\n);\\\\\\\\n\\\\\\\\nconst nameDiv = (\\\\\\\\n  <div className=\\\\\\\\\\\\\\\"col-lg-6  mb-2\\\\\\\\\\\\\\\">\\\\\\\\n    Title:\\\\\\\\n    <input\\\\\\\\n      type=\\\\\\\\\\\\\\\"text\\\\\\\\\\\\\\\"\\\\\\\\n      value={state.name}\\\\\\\\n      onChange={(event) => State.update({ name: event.target.value })}\\\\\\\\n    />\\\\\\\\n  </div>\\\\\\\\n);\\\\\\\\n\\\\\\\\nconst amountDiv = (\\\\\\\\n  <div className=\\\\\\\\\\\\\\\"col-lg-6  mb-2\\\\\\\\\\\\\\\">\\\\\\\\n    Amount:\\\\\\\\n    <input\\\\\\\\n      type=\\\\\\\\\\\\\\\"text\\\\\\\\\\\\\\\"\\\\\\\\n      value={state.amount}\\\\\\\\n      onChange={(event) => State.update({ amount: event.target.value })}\\\\\\\\n    />\\\\\\\\n  </div>\\\\\\\\n);\\\\\\\\n\\\\\\\\nconst tokenDiv = (\\\\\\\\n  <div className=\\\\\\\\\\\\\\\"col-lg-6 mb-2\\\\\\\\\\\\\\\">\\\\\\\\n    Currency\\\\\\\\n    <select\\\\\\\\n      onChange={(event) => State.update({ token: event.target.value })}\\\\\\\\n      class=\\\\\\\\\\\\\\\"form-select\\\\\\\\\\\\\\\"\\\\\\\\n      aria-label=\\\\\\\\\\\\\\\"Select currency\\\\\\\\\\\\\\\"\\\\\\\\n      value={state.token}\\\\\\\\n    >\\\\\\\\n      <option value=\\\\\\\\\\\\\\\"USDT\\\\\\\\\\\\\\\">USDT</option>\\\\\\\\n      <option value=\\\\\\\\\\\\\\\"NEAR\\\\\\\\\\\\\\\">NEAR</option>\\\\\\\\n      <option value=\\\\\\\\\\\\\\\"USDC\\\\\\\\\\\\\\\">USDC</option>\\\\\\\\n    </select>\\\\\\\\n  </div>\\\\\\\\n);\\\\\\\\n\\\\\\\\nconst supervisorDiv = (\\\\\\\\n  <div className=\\\\\\\\\\\\\\\"col-lg-6 mb-2\\\\\\\\\\\\\\\">\\\\\\\\n    Supervisor:\\\\\\\\n    <input\\\\\\\\n      type=\\\\\\\\\\\\\\\"text\\\\\\\\\\\\\\\"\\\\\\\\n      value={state.supervisor}\\\\\\\\n      onChange={(event) => State.update({ supervisor: event.target.value })}\\\\\\\\n    />\\\\\\\\n  </div>\\\\\\\\n);\\\\\\\\n\\\\\\\\nconst callDescriptionDiv = () => {\\\\\\\\n  return (\\\\\\\\n    <div className=\\\\\\\\\\\\\\\"col-lg-12  mb-2\\\\\\\\\\\\\\\">\\\\\\\\n      Description:\\\\\\\\n      <br />\\\\\\\\n      <Widget\\\\\\\\n        src={\\\\\\\\\\\\\\\"devhub.near/widget/devhub.components.molecule.MarkdownEditor\\\\\\\\\\\\\\\"}\\\\\\\\n        props={{\\\\\\\\n          data: { handler: state.handler, content: state.description },\\\\\\\\n          onChange: (content) => {\\\\\\\\n            State.update({ description: content, handler: \\\\\\\\\\\\\\\"update\\\\\\\\\\\\\\\" });\\\\\\\\n            textareaInputHandler(content);\\\\\\\\n          },\\\\\\\\n        }}\\\\\\\\n      />\\\\\\\\n      {autocompleteEnabled && state.showAccountAutocomplete && (\\\\\\\\n        <AutoComplete>\\\\\\\\n          <Widget\\\\\\\\n            src=\\\\\\\\\\\\\\\"near/widget/AccountAutocomplete\\\\\\\\\\\\\\\"\\\\\\\\n            props={{\\\\\\\\n              term: state.text.split(\\\\\\\\\\\\\\\"@\\\\\\\\\\\\\\\").pop(),\\\\\\\\n              onSelect: autoCompleteAccountId,\\\\\\\\n              onClose: () => State.update({ showAccountAutocomplete: false }),\\\\\\\\n            }}\\\\\\\\n          />\\\\\\\\n        </AutoComplete>\\\\\\\\n      )}\\\\\\\\n    </div>\\\\\\\\n  );\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst disclaimer = (\\\\\\\\n  <p>\\\\\\\\n    <i>\\\\\\\\n      * Note, all projects that were granted sponsorships are required to pass\\\\\\\\n      KYC to receive the funding.\\\\\\\\n    </i>\\\\\\\\n  </p>\\\\\\\\n);\\\\\\\\n\\\\\\\\nconst isFundraisingDiv = (\\\\\\\\n  // This is jank with just btns and not radios. But the radios were glitchy af\\\\\\\\n  <>\\\\\\\\n    <div class=\\\\\\\\\\\\\\\"mb-2\\\\\\\\\\\\\\\">\\\\\\\\n      <p class=\\\\\\\\\\\\\\\"fs-6 fw-bold mb-1\\\\\\\\\\\\\\\">\\\\\\\\n        Are you seeking funding for your solution?\\\\\\\\n        <span class=\\\\\\\\\\\\\\\"text-muted fw-normal\\\\\\\\\\\\\\\">(Optional)</span>\\\\\\\\n      </p>\\\\\\\\n      <div class=\\\\\\\\\\\\\\\"form-check form-check-inline\\\\\\\\\\\\\\\">\\\\\\\\n        <label class=\\\\\\\\\\\\\\\"form-check-label\\\\\\\\\\\\\\\">\\\\\\\\n          <button\\\\\\\\n            className=\\\\\\\\\\\\\\\"btn btn-light p-0\\\\\\\\\\\\\\\"\\\\\\\\n            style={{\\\\\\\\n              backgroundColor: state.seekingFunding ? \\\\\\\\\\\\\\\"#0C7283\\\\\\\\\\\\\\\" : \\\\\\\\\\\\\\\"inherit\\\\\\\\\\\\\\\",\\\\\\\\n              color: \\\\\\\\\\\\\\\"#f3f3f3\\\\\\\\\\\\\\\",\\\\\\\\n              border: \\\\\\\\\\\\\\\"solid #D9D9D9\\\\\\\\\\\\\\\",\\\\\\\\n              borderRadius: \\\\\\\\\\\\\\\"100%\\\\\\\\\\\\\\\",\\\\\\\\n              height: \\\\\\\\\\\\\\\"20px\\\\\\\\\\\\\\\",\\\\\\\\n              width: \\\\\\\\\\\\\\\"20px\\\\\\\\\\\\\\\",\\\\\\\\n            }}\\\\\\\\n            onClick={() => State.update({ seekingFunding: true })}\\\\\\\\n          />\\\\\\\\n          Yes\\\\\\\\n        </label>\\\\\\\\n      </div>\\\\\\\\n      <div class=\\\\\\\\\\\\\\\"form-check form-check-inline\\\\\\\\\\\\\\\">\\\\\\\\n        <label class=\\\\\\\\\\\\\\\"form-check-label\\\\\\\\\\\\\\\">\\\\\\\\n          <button\\\\\\\\n            className=\\\\\\\\\\\\\\\"btn btn-light p-0\\\\\\\\\\\\\\\"\\\\\\\\n            style={{\\\\\\\\n              backgroundColor: !state.seekingFunding ? \\\\\\\\\\\\\\\"#0C7283\\\\\\\\\\\\\\\" : \\\\\\\\\\\\\\\"inherit\\\\\\\\\\\\\\\",\\\\\\\\n              color: \\\\\\\\\\\\\\\"#f3f3f3\\\\\\\\\\\\\\\",\\\\\\\\n              border: \\\\\\\\\\\\\\\"solid #D9D9D9\\\\\\\\\\\\\\\",\\\\\\\\n              borderRadius: \\\\\\\\\\\\\\\"100%\\\\\\\\\\\\\\\",\\\\\\\\n              height: \\\\\\\\\\\\\\\"20px\\\\\\\\\\\\\\\",\\\\\\\\n              width: \\\\\\\\\\\\\\\"20px\\\\\\\\\\\\\\\",\\\\\\\\n            }}\\\\\\\\n            onClick={() => State.update({ seekingFunding: false })}\\\\\\\\n          />\\\\\\\\n          No\\\\\\\\n        </label>\\\\\\\\n      </div>\\\\\\\\n    </div>\\\\\\\\n  </>\\\\\\\\n);\\\\\\\\n\\\\\\\\nconst fundraisingDiv = (\\\\\\\\n  <div class=\\\\\\\\\\\\\\\"d-flex flex-column mb-2\\\\\\\\\\\\\\\">\\\\\\\\n    <div className=\\\\\\\\\\\\\\\"col-lg-6 mb-2\\\\\\\\\\\\\\\">\\\\\\\\n      Currency\\\\\\\\n      <select\\\\\\\\n        onChange={(event) => State.update({ token: event.target.value })}\\\\\\\\n        class=\\\\\\\\\\\\\\\"form-select\\\\\\\\\\\\\\\"\\\\\\\\n        aria-label=\\\\\\\\\\\\\\\"Default select example\\\\\\\\\\\\\\\"\\\\\\\\n        value={state.token}\\\\\\\\n      >\\\\\\\\n        <option value=\\\\\\\\\\\\\\\"USDT\\\\\\\\\\\\\\\">USDT</option>\\\\\\\\n        <option value=\\\\\\\\\\\\\\\"NEAR\\\\\\\\\\\\\\\">NEAR</option>\\\\\\\\n        <option value=\\\\\\\\\\\\\\\"USDC\\\\\\\\\\\\\\\">USDC</option>\\\\\\\\n      </select>\\\\\\\\n    </div>\\\\\\\\n    <div className=\\\\\\\\\\\\\\\"col-lg-6 mb-2\\\\\\\\\\\\\\\">\\\\\\\\n      Requested amount\\\\\\\\n      <span class=\\\\\\\\\\\\\\\"text-muted fw-normal\\\\\\\\\\\\\\\">(Numbers Only)</span>\\\\\\\\n      <input\\\\\\\\n        type=\\\\\\\\\\\\\\\"number\\\\\\\\\\\\\\\"\\\\\\\\n        value={parseInt(state.amount) > 0 ? state.amount : \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\"}\\\\\\\\n        min={0}\\\\\\\\n        onChange={(event) => {\\\\\\\\n          State.update({\\\\\\\\n            amount: Number(\\\\\\\\n              event.target.value.toString().replace(/e/g, \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\")\\\\\\\\n            ).toString(),\\\\\\\\n          });\\\\\\\\n        }}\\\\\\\\n      />\\\\\\\\n    </div>\\\\\\\\n    <div className=\\\\\\\\\\\\\\\"col-lg-6 mb-2\\\\\\\\\\\\\\\">\\\\\\\\n      <p class=\\\\\\\\\\\\\\\"mb-1\\\\\\\\\\\\\\\">\\\\\\\\n        Requested sponsor\\\\\\\\n        <span class=\\\\\\\\\\\\\\\"text-muted fw-normal\\\\\\\\\\\\\\\">(Optional)</span>\\\\\\\\n      </p>\\\\\\\\n      <p style={{ fontSize: \\\\\\\\\\\\\\\"13px\\\\\\\\\\\\\\\" }} class=\\\\\\\\\\\\\\\"m-0 text-muted fw-light\\\\\\\\\\\\\\\">\\\\\\\\n        If you are requesting funding from a specific sponsor, please enter\\\\\\\\n        their username.\\\\\\\\n      </p>\\\\\\\\n      <div class=\\\\\\\\\\\\\\\"input-group flex-nowrap\\\\\\\\\\\\\\\">\\\\\\\\n        <span class=\\\\\\\\\\\\\\\"input-group-text\\\\\\\\\\\\\\\" id=\\\\\\\\\\\\\\\"addon-wrapping\\\\\\\\\\\\\\\">\\\\\\\\n          @\\\\\\\\n        </span>\\\\\\\\n        <input\\\\\\\\n          type=\\\\\\\\\\\\\\\"text\\\\\\\\\\\\\\\"\\\\\\\\n          class=\\\\\\\\\\\\\\\"form-control\\\\\\\\\\\\\\\"\\\\\\\\n          placeholder=\\\\\\\\\\\\\\\"Enter username\\\\\\\\\\\\\\\"\\\\\\\\n          value={state.supervisor}\\\\\\\\n          onChange={(event) => State.update({ supervisor: event.target.value })}\\\\\\\\n        />\\\\\\\\n      </div>\\\\\\\\n    </div>\\\\\\\\n  </div>\\\\\\\\n);\\\\\\\\n\\\\\\\\nfunction generateDescription(text, amount, token, supervisor, seekingFunding) {\\\\\\\\n  const fundingText =\\\\\\\\n    amount > 0 && token ? `###### Requested amount: ${amount} ${token}\\\\\\\\\\\\\\\\n` : \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\";\\\\\\\\n  const supervisorText = supervisor\\\\\\\\n    ? `###### Requested sponsor: @${supervisor}\\\\\\\\\\\\\\\\n`\\\\\\\\n    : \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\";\\\\\\\\n  return seekingFunding ? `${fundingText}${supervisorText}${text}` : text;\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst renamedPostType = postType == \\\\\\\\\\\\\\\"Submission\\\\\\\\\\\\\\\" ? \\\\\\\\\\\\\\\"Solution\\\\\\\\\\\\\\\" : postType;\\\\\\\\n// Below there is a weird code with fields.includes(\\\\\\\\\\\\\\\"githubLink\\\\\\\\\\\\\\\") ternary operator.\\\\\\\\n// This is to hack around rendering bug of near.social.\\\\\\\\nreturn (\\\\\\\\n  <div className=\\\\\\\\\\\\\\\"card\\\\\\\\\\\\\\\">\\\\\\\\n    <div className=\\\\\\\\\\\\\\\"card-header\\\\\\\\\\\\\\\">\\\\\\\\n      {mode} {renamedPostType}\\\\\\\\n    </div>\\\\\\\\n\\\\\\\\n    <div class=\\\\\\\\\\\\\\\"card-body\\\\\\\\\\\\\\\">\\\\\\\\n      {state.warning && (\\\\\\\\n        <div\\\\\\\\n          class=\\\\\\\\\\\\\\\"alert alert-warning alert-dismissible fade show\\\\\\\\\\\\\\\"\\\\\\\\n          role=\\\\\\\\\\\\\\\"alert\\\\\\\\\\\\\\\"\\\\\\\\n        >\\\\\\\\n          {state.warning}\\\\\\\\n          <button\\\\\\\\n            type=\\\\\\\\\\\\\\\"button\\\\\\\\\\\\\\\"\\\\\\\\n            class=\\\\\\\\\\\\\\\"btn-close\\\\\\\\\\\\\\\"\\\\\\\\n            data-bs-dismiss=\\\\\\\\\\\\\\\"alert\\\\\\\\\\\\\\\"\\\\\\\\n            aria-label=\\\\\\\\\\\\\\\"Close\\\\\\\\\\\\\\\"\\\\\\\\n            onClick={() => State.update({ warning: \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\" })}\\\\\\\\n          ></button>\\\\\\\\n        </div>\\\\\\\\n      )}\\\\\\\\n      {/* This statement around the githubLinkDiv creates a weird render bug\\\\\\\\n      where the title renders extra on state change. */}\\\\\\\\n      {fields.includes(\\\\\\\\\\\\\\\"githubLink\\\\\\\\\\\\\\\") ? (\\\\\\\\n        <div className=\\\\\\\\\\\\\\\"row\\\\\\\\\\\\\\\">\\\\\\\\n          {fields.includes(\\\\\\\\\\\\\\\"githubLink\\\\\\\\\\\\\\\") && githubLinkDiv}\\\\\\\\n          {labelEditor}\\\\\\\\n          {fields.includes(\\\\\\\\\\\\\\\"name\\\\\\\\\\\\\\\") && nameDiv}\\\\\\\\n          {fields.includes(\\\\\\\\\\\\\\\"description\\\\\\\\\\\\\\\") && callDescriptionDiv()}\\\\\\\\n        </div>\\\\\\\\n      ) : (\\\\\\\\n        <div className=\\\\\\\\\\\\\\\"row\\\\\\\\\\\\\\\">\\\\\\\\n          {labelEditor}\\\\\\\\n          {fields.includes(\\\\\\\\\\\\\\\"name\\\\\\\\\\\\\\\") && nameDiv}\\\\\\\\n          {fields.includes(\\\\\\\\\\\\\\\"amount\\\\\\\\\\\\\\\") && amountDiv}\\\\\\\\n          {fields.includes(\\\\\\\\\\\\\\\"sponsorship_token\\\\\\\\\\\\\\\") && tokenDiv}\\\\\\\\n          {fields.includes(\\\\\\\\\\\\\\\"supervisor\\\\\\\\\\\\\\\") && supervisorDiv}\\\\\\\\n          {fields.includes(\\\\\\\\\\\\\\\"description\\\\\\\\\\\\\\\") && callDescriptionDiv()}\\\\\\\\n          {fields.includes(\\\\\\\\\\\\\\\"fund_raising\\\\\\\\\\\\\\\") && isFundraisingDiv}\\\\\\\\n          {state.seekingFunding &&\\\\\\\\n            fields.includes(\\\\\\\\\\\\\\\"fund_raising\\\\\\\\\\\\\\\") &&\\\\\\\\n            fundraisingDiv}\\\\\\\\n        </div>\\\\\\\\n      )}\\\\\\\\n      <button\\\\\\\\n        style={{\\\\\\\\n          width: \\\\\\\\\\\\\\\"7rem\\\\\\\\\\\\\\\",\\\\\\\\n          backgroundColor: \\\\\\\\\\\\\\\"#0C7283\\\\\\\\\\\\\\\",\\\\\\\\n          color: \\\\\\\\\\\\\\\"#f3f3f3\\\\\\\\\\\\\\\",\\\\\\\\n        }}\\\\\\\\n        disabled={state.seekingFunding && (!state.amount || state.amount < 1)}\\\\\\\\n        className=\\\\\\\\\\\\\\\"btn btn-light mb-2 p-3\\\\\\\\\\\\\\\"\\\\\\\\n        onClick={onSubmit}\\\\\\\\n      >\\\\\\\\n        Submit\\\\\\\\n      </button>\\\\\\\\n      {disclaimer}\\\\\\\\n    </div>\\\\\\\\n    <div class=\\\\\\\\\\\\\\\"card-footer\\\\\\\\\\\\\\\">\\\\\\\\n      Preview:\\\\\\\\n      <Widget\\\\\\\\n        src=\\\\\\\\\\\\\\\"devhub.near/widget/devhub.entity.post.Post\\\\\\\\\\\\\\\"\\\\\\\\n        props={{\\\\\\\\n          isPreview: true,\\\\\\\\n          id: 0, // irrelevant\\\\\\\\n          post: {\\\\\\\\n            author_id: state.author_id,\\\\\\\\n            likes: [],\\\\\\\\n            snapshot: {\\\\\\\\n              editor_id: state.editor_id,\\\\\\\\n              labels: state.labelStrings,\\\\\\\\n              post_type: postType,\\\\\\\\n              name: state.name,\\\\\\\\n              description:\\\\\\\\n                postType == \\\\\\\\\\\\\\\"Solution\\\\\\\\\\\\\\\"\\\\\\\\n                  ? generateDescription(\\\\\\\\n                      state.description,\\\\\\\\n                      state.amount,\\\\\\\\n                      state.token,\\\\\\\\n                      state.supervisor,\\\\\\\\n                      state.seekingFunding\\\\\\\\n                    )\\\\\\\\n                  : state.description,\\\\\\\\n              amount: state.amount,\\\\\\\\n              sponsorship_token: state.token,\\\\\\\\n              supervisor: state.supervisor,\\\\\\\\n              github_link: state.githubLink,\\\\\\\\n            },\\\\\\\\n          },\\\\\\\\n        }}\\\\\\\\n      />\\\\\\\\n    </div>\\\\\\\\n  </div>\\\\\\\\n);\\\\\\\\n\"}, \"devhub.components.island.banner\": {\"\": \"const imageLink = props.imageLink;\\\\\\\\nconst bannerTitle = props.title;\\\\\\\\n\\\\\\\\nconst HeroSection = styled.div`\\\\\\\\n  position: relative;\\\\\\\\n  height: auto;\\\\\\\\n  z-index: 3;\\\\\\\\n  width: 70%;\\\\\\\\n  background: #00ec97;\\\\\\\\n  clip-path: polygon(0 0, 100% 0%, 75% 100%, 0% 100%);\\\\\\\\n\\\\\\\\n  padding-top: 2rem;\\\\\\\\n  padding-bottom: 2rem;\\\\\\\\n  padding-left: 3.375rem;\\\\\\\\n\\\\\\\\n  @media screen and (max-width: 768px) {\\\\\\\\n    width: 100%;\\\\\\\\n    padding: 1rem 1.5rem;\\\\\\\\n\\\\\\\\n    clip-path: none;\\\\\\\\n  }\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst Title = styled.h1`\\\\\\\\n  color: #f4f4f4;\\\\\\\\n  font-size: 4rem;\\\\\\\\n  font-style: normal;\\\\\\\\n  font-weight: 700;\\\\\\\\n  line-height: 100%; /* 88px */\\\\\\\\n  letter-spacing: -1.76px;\\\\\\\\n  margin: 0;\\\\\\\\n\\\\\\\\n  width: 80%;\\\\\\\\n\\\\\\\\n  @media screen and (max-width: 768px) {\\\\\\\\n    width: 100%;\\\\\\\\n    font-size: 2.25rem;\\\\\\\\n    letter-spacing: -0.72px;\\\\\\\\n  }\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst Container = styled.div`\\\\\\\\n  position: relative;\\\\\\\\n  width: 100%;\\\\\\\\n  height: max-content;\\\\\\\\n  overflow: hidden;\\\\\\\\n\\\\\\\\n  @media screen and (max-width: 768px) {\\\\\\\\n    background: #f4f4f4;\\\\\\\\n  }\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst ImageContainer = styled.div`\\\\\\\\n  width: 100%;\\\\\\\\n  height: 100%;\\\\\\\\n  position: absolute;\\\\\\\\n  top: 0;\\\\\\\\n  right: 0;\\\\\\\\n  z-index: 1;\\\\\\\\n  background: transparent;\\\\\\\\n\\\\\\\\n  @media screen and (max-width: 768px) {\\\\\\\\n    display: none;\\\\\\\\n  }\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst Image = styled.img`\\\\\\\\n  margin-left: 15.625rem;\\\\\\\\n  height: 100%;\\\\\\\\n  width: 100%;\\\\\\\\n  filter: grayscale(100%);\\\\\\\\n  object-fit: cover;\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst MobileImage = styled.img`\\\\\\\\n  display: none;\\\\\\\\n\\\\\\\\n  width: 356.187px;\\\\\\\\n  height: 196px;\\\\\\\\n\\\\\\\\n  width: 100%;\\\\\\\\n  object-fit: cover;\\\\\\\\n  filter: grayscale(1);\\\\\\\\n\\\\\\\\n  @media screen and (max-width: 768px) {\\\\\\\\n    display: block;\\\\\\\\n  }\\\\\\\\n`;\\\\\\\\n\\\\\\\\nreturn (\\\\\\\\n  <Container>\\\\\\\\n    <HeroSection>\\\\\\\\n      <Title>{bannerTitle}</Title>\\\\\\\\n    </HeroSection>\\\\\\\\n    <ImageContainer>\\\\\\\\n      <Image src={imageLink} />\\\\\\\\n    </ImageContainer>\\\\\\\\n    <MobileImage src={imageLink} />\\\\\\\\n  </Container>\\\\\\\\n);\\\\\\\\n\"}, \"devhub.components.molecule.Tile\": {\"\": \"function Tile({ id, children, className, minHeight, style }) {\\\\\\\\n  return (\\\\\\\\n    <div\\\\\\\\n      id={id}\\\\\\\\n      className={[\\\\\\\\n        \\\\\\\\\\\\\\\"d-flex flex-column rounded-4 attractable w-100 border\\\\\\\\\\\\\\\",\\\\\\\\n        className,\\\\\\\\n      ].join(\\\\\\\\\\\\\\\" \\\\\\\\\\\\\\\")}\\\\\\\\n      style={{\\\\\\\\n        minHeight: minHeight ?? 180,\\\\\\\\n        height: \\\\\\\\\\\\\\\"fit-content\\\\\\\\\\\\\\\",\\\\\\\\n        ...style,\\\\\\\\n      }}\\\\\\\\n    >\\\\\\\\n      {children}\\\\\\\\n    </div>\\\\\\\\n  );\\\\\\\\n}\\\\\\\\n\\\\\\\\nreturn { Tile };\\\\\\\\n\"}, \"devhub.entity.addon.blog.Viewer\": {\"\": \"const { Card } =\\\\\\\\n  VM.require(\\\\\\\\\\\\\\\"devhub.near/widget/devhub.entity.addon.blog.Card\\\\\\\\\\\\\\\") ||\\\\\\\\n  (() => <></>);\\\\\\\\n\\\\\\\\nconst { href } = VM.require(\\\\\\\\\\\\\\\"devhub.near/widget/core.lib.url\\\\\\\\\\\\\\\") || (() => {});\\\\\\\\n\\\\\\\\nconst { includeLabels, excludeLabels, layout, handle, hideTitle } = props;\\\\\\\\n\\\\\\\\nconst Grid = styled.div`\\\\\\\\n  display: grid;\\\\\\\\n  grid-template-columns: repeat(3, minmax(0, 1fr));\\\\\\\\n  gap: 1rem;\\\\\\\\n\\\\\\\\n  @media screen and (max-width: 768px) {\\\\\\\\n    display: flex;\\\\\\\\n    flex-direction: column;\\\\\\\\n    gap: 1rem;\\\\\\\\n  }\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst Heading = styled.h3`\\\\\\\\n  color: #151515;\\\\\\\\n  font-size: 2rem;\\\\\\\\n  font-style: normal;\\\\\\\\n  font-weight: 700;\\\\\\\\n  line-height: 120%; /* 48px */\\\\\\\\n  margin-bottom: 2rem;\\\\\\\\n\\\\\\\\n  @media screen and (max-width: 768px) {\\\\\\\\n    font-size: 1.5rem;\\\\\\\\n  }\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst CardContainer = styled.div`\\\\\\\\n  transition: all 300ms;\\\\\\\\n  border-radius: 1rem;\\\\\\\\n\\\\\\\\n  &:hover {\\\\\\\\n    box-shadow: 0 10px 15px -3px rgb(0 0 0 / 0.1),\\\\\\\\n      0 4px 6px -4px rgb(0 0 0 / 0.1);\\\\\\\\n  }\\\\\\\\n`;\\\\\\\\n\\\\\\\\nfunction BlogCard(postId) {\\\\\\\\n  return (\\\\\\\\n    <Link\\\\\\\\n      style={{ textDecoration: \\\\\\\\\\\\\\\"none\\\\\\\\\\\\\\\" }}\\\\\\\\n      to={href({\\\\\\\\n        widgetSrc: \\\\\\\\\\\\\\\"devhub.near/widget/app\\\\\\\\\\\\\\\",\\\\\\\\n        params: { page: \\\\\\\\\\\\\\\"blog\\\\\\\\\\\\\\\", id: postId },\\\\\\\\n      })}\\\\\\\\n    >\\\\\\\\n      <CardContainer>\\\\\\\\n        <Widget // We need this so the individual posts can make the necessary call for more data\\\\\\\\n          src=\\\\\\\\\\\\\\\"devhub.near/widget/devhub.entity.post.Postv2\\\\\\\\\\\\\\\"\\\\\\\\n          props={{ postKey: postId, template: (p) => <Card {...(p || {})} /> }} // I wonder if this could take list of types, their templates, normalizer functions, etc... and have this all as a module\\\\\\\\n        />\\\\\\\\n        {/* // so then you could swap between devhub contract or social contract sources, it doesn\\\\\\\\\\\\'t matter. */}\\\\\\\\n      </CardContainer>\\\\\\\\n    </Link>\\\\\\\\n  );\\\\\\\\n}\\\\\\\\n\\\\\\\\nreturn (\\\\\\\\n  <div class=\\\\\\\\\\\\\\\"w-100\\\\\\\\\\\\\\\">\\\\\\\\n    {!hideTitle && <Heading>Latest Blog Posts</Heading>}\\\\\\\\n    <Widget\\\\\\\\n      src={\\\\\\\\\\\\\\\"devhub.near/widget/devhub.entity.addon.blog.Feed\\\\\\\\\\\\\\\"}\\\\\\\\n      // TODO: This needs to filter by more labels\\\\\\\\n      props={{\\\\\\\\n        includeLabels: [\\\\\\\\\\\\\\\"blog\\\\\\\\\\\\\\\", handle, ...(includeLabels || [])], // make sure this has the community handle\\\\\\\\n        excludeLabels: excludeLabels || [],\\\\\\\\n        renderItem: BlogCard,\\\\\\\\n        Layout: ({ children }) => <Grid>{children}</Grid>,\\\\\\\\n      }}\\\\\\\\n    />\\\\\\\\n  </div>\\\\\\\\n);\\\\\\\\n\"}, \"devhub.entity.addon.wiki.Viewer\": {\"\": \"const { content, title, subtitle, textAlign } = props;\\\\\\\\n\\\\\\\\nconst Container = styled.div`\\\\\\\\n  display: flex;\\\\\\\\n  flex-direction: column;\\\\\\\\n  width: 100%;\\\\\\\\n\\\\\\\\n  padding: 0 3rem;\\\\\\\\n\\\\\\\\n  margin: 0 auto;\\\\\\\\n  text-align: ${(p) => p.textAlign ?? \\\\\\\\\\\\\\\"left\\\\\\\\\\\\\\\"};\\\\\\\\n\\\\\\\\n  h1 {\\\\\\\\n    color: #151515;\\\\\\\\n    font-size: 3.5rem;\\\\\\\\n    font-style: normal;\\\\\\\\n    font-weight: 700;\\\\\\\\n    line-height: 100%; /* 88px */\\\\\\\\n    margin: 1rem 0;\\\\\\\\n  }\\\\\\\\n\\\\\\\\n  p.subtitle {\\\\\\\\n    color: #555;\\\\\\\\n    font-size: 1.5rem;\\\\\\\\n    font-style: normal;\\\\\\\\n    font-weight: 400;\\\\\\\\n    line-height: 110%; /* 35.2px */\\\\\\\\n    margin: 0;\\\\\\\\n  }\\\\\\\\n\\\\\\\\n  @media screen and (max-width: 768px) {\\\\\\\\n    padding: 0 1rem;\\\\\\\\n\\\\\\\\n    span.category {\\\\\\\\n      font-size: 0.75rem;\\\\\\\\n    }\\\\\\\\n\\\\\\\\n    h1 {\\\\\\\\n      font-size: 2rem;\\\\\\\\n    }\\\\\\\\n\\\\\\\\n    p.subtitle {\\\\\\\\n      font-size: 1rem;\\\\\\\\n    }\\\\\\\\n  }\\\\\\\\n\\\\\\\\n  a {\\\\\\\\n    color: #0000ee;\\\\\\\\n  }\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst Content = styled.div`\\\\\\\\n  margin: 20px 0;\\\\\\\\n  text-align: left;\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst Title = styled.h1`\\\\\\\\n  margin-bottom: 10px;\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst Subtitle = styled.p`\\\\\\\\n  margin-bottom: 20px;\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst CenteredMessage = styled.div`\\\\\\\\n  display: flex;\\\\\\\\n  flex-direction: column;\\\\\\\\n  justify-content: center;\\\\\\\\n  align-items: center;\\\\\\\\n  width: 100%;\\\\\\\\n  height: ${(p) => p.height ?? \\\\\\\\\\\\\\\"100%\\\\\\\\\\\\\\\"};\\\\\\\\n`;\\\\\\\\n\\\\\\\\nif (!content) {\\\\\\\\n  return (\\\\\\\\n    <CenteredMessage height={\\\\\\\\\\\\\\\"384px\\\\\\\\\\\\\\\"}>\\\\\\\\n      <h2>No Wiki Configured</h2>\\\\\\\\n    </CenteredMessage>\\\\\\\\n  );\\\\\\\\n} else {\\\\\\\\n  return (\\\\\\\\n    <Container textAlign={textAlign}>\\\\\\\\n      <h1>{title}</h1>\\\\\\\\n      <p className=\\\\\\\\\\\\\\\"subtitle\\\\\\\\\\\\\\\">{subtitle}</p>\\\\\\\\n      <Content>\\\\\\\\n        <Widget\\\\\\\\n          src={\\\\\\\\n            \\\\\\\\\\\\\\\"devhub.near/widget/devhub.components.molecule.MarkdownViewer\\\\\\\\\\\\\\\"\\\\\\\\n          }\\\\\\\\n          props={{ text: content }}\\\\\\\\n        />\\\\\\\\n      </Content>\\\\\\\\n    </Container>\\\\\\\\n  );\\\\\\\\n}\\\\\\\\n\"}, \"devhub.entity.community.Sidebar\": {\"\": \"const { href } = VM.require(\\\\\\\\\\\\\\\"devhub.near/widget/core.lib.url\\\\\\\\\\\\\\\");\\\\\\\\n\\\\\\\\nif (!href) {\\\\\\\\n  return <p>Loading modules...</p>;\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst { community } = props;\\\\\\\\n\\\\\\\\nconst CommunitySummary = () => {\\\\\\\\n  return (\\\\\\\\n    <>\\\\\\\\n      <Widget\\\\\\\\n        src={\\\\\\\\\\\\\\\"devhub.near/widget/devhub.components.molecule.MarkdownViewer\\\\\\\\\\\\\\\"}\\\\\\\\n        props={{\\\\\\\\n          text: community.bio_markdown,\\\\\\\\n        }}\\\\\\\\n      />\\\\\\\\n      <small class=\\\\\\\\\\\\\\\"text-muted mb-3\\\\\\\\\\\\\\\">\\\\\\\\n        <Link\\\\\\\\n          to={href({\\\\\\\\n            widgetSrc: \\\\\\\\\\\\\\\"devhub.near/widget/app\\\\\\\\\\\\\\\",\\\\\\\\n            params: { page: \\\\\\\\\\\\\\\"feed\\\\\\\\\\\\\\\", tag: community.tag },\\\\\\\\n          })}\\\\\\\\n        >\\\\\\\\n          <Widget\\\\\\\\n            src={\\\\\\\\\\\\\\\"devhub.near/widget/devhub.components.atom.Tag\\\\\\\\\\\\\\\"}\\\\\\\\n            props={{ tag: community.tag }}\\\\\\\\n          />\\\\\\\\n        </Link>\\\\\\\\n      </small>\\\\\\\\n    </>\\\\\\\\n  );\\\\\\\\n};\\\\\\\\n\\\\\\\\nreturn community === null ? (\\\\\\\\n  <div>Loading...</div>\\\\\\\\n) : (\\\\\\\\n  <div class=\\\\\\\\\\\\\\\"d-flex flex-column align-items-end\\\\\\\\\\\\\\\">\\\\\\\\n    <Widget\\\\\\\\n      src={\\\\\\\\\\\\\\\"devhub.near/widget/devhub.entity.community.Tile\\\\\\\\\\\\\\\"}\\\\\\\\n      props={{\\\\\\\\n        fullWidth: true,\\\\\\\\n        minHeight: 0,\\\\\\\\n        noBorder: true,\\\\\\\\n        children: <CommunitySummary />,\\\\\\\\n        style: { marginTop: \\\\\\\\\\\\\\\"0.5rem\\\\\\\\\\\\\\\" },\\\\\\\\n      }}\\\\\\\\n    />\\\\\\\\n\\\\\\\\n    <Widget\\\\\\\\n      // TODO: LEGACY.\\\\\\\\n      src={\\\\\\\\\\\\\\\"devhub.near/widget/devhub.entity.community.Tile\\\\\\\\\\\\\\\"}\\\\\\\\n      props={{\\\\\\\\n        heading: \\\\\\\\\\\\\\\"Admins\\\\\\\\\\\\\\\",\\\\\\\\n\\\\\\\\n        children: (community?.admins ?? []).map((accountId) => (\\\\\\\\n          <div key={accountId} className=\\\\\\\\\\\\\\\"d-flex\\\\\\\\\\\\\\\" style={{ fontWeight: 500 }}>\\\\\\\\n            <Widget\\\\\\\\n              // TODO: LEGACY.\\\\\\\\n              src={\\\\\\\\n                \\\\\\\\\\\\\\\"devhub.near/widget/gigs-board.components.molecule.profile-card\\\\\\\\\\\\\\\"\\\\\\\\n              }\\\\\\\\n              props={{ accountId }}\\\\\\\\n            />\\\\\\\\n          </div>\\\\\\\\n        )),\\\\\\\\n\\\\\\\\n        fullWidth: true,\\\\\\\\n        minHeight: 0,\\\\\\\\n        noBorder: true,\\\\\\\\n      }}\\\\\\\\n    />\\\\\\\\n  </div>\\\\\\\\n);\\\\\\\\n\"}, \"devhub.entity.community.Spawner\": {\"\": \"const { typeMatch } = VM.require(\\\\\\\\\\\\\\\"devhub.near/widget/core.lib.struct\\\\\\\\\\\\\\\");\\\\\\\\n\\\\\\\\nif (!typeMatch) {\\\\\\\\n  return <p>Loading modules...</p>;\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst { data, onSubmit, onCancel } = props;\\\\\\\\n\\\\\\\\nconst CommunityInputsPartialSchema = {\\\\\\\\n  handle: {\\\\\\\\n    inputProps: {\\\\\\\\n      min: 2,\\\\\\\\n      max: 40,\\\\\\\\n\\\\\\\\n      placeholder:\\\\\\\\n        \\\\\\\\\\\\\\\"Choose unique URL handle for your community. Example: zero-knowledge.\\\\\\\\\\\\\\\",\\\\\\\\n\\\\\\\\n      required: true,\\\\\\\\n    },\\\\\\\\n\\\\\\\\n    label: \\\\\\\\\\\\\\\"URL handle\\\\\\\\\\\\\\\",\\\\\\\\n    order: 3,\\\\\\\\n  },\\\\\\\\n\\\\\\\\n  name: {\\\\\\\\n    inputProps: {\\\\\\\\n      min: 2,\\\\\\\\n      max: 30,\\\\\\\\n      placeholder: \\\\\\\\\\\\\\\"Community name.\\\\\\\\\\\\\\\",\\\\\\\\n      required: true,\\\\\\\\n    },\\\\\\\\n\\\\\\\\n    label: \\\\\\\\\\\\\\\"Name\\\\\\\\\\\\\\\",\\\\\\\\n    order: 1,\\\\\\\\n  },\\\\\\\\n\\\\\\\\n  tag: {\\\\\\\\n    inputProps: {\\\\\\\\n      min: 2,\\\\\\\\n      max: 30,\\\\\\\\n\\\\\\\\n      placeholder:\\\\\\\\n        \\\\\\\\\\\\\\\"Any posts with this tag will show up in your community feed.\\\\\\\\\\\\\\\",\\\\\\\\n\\\\\\\\n      required: true,\\\\\\\\n    },\\\\\\\\n\\\\\\\\n    label: \\\\\\\\\\\\\\\"Tag\\\\\\\\\\\\\\\",\\\\\\\\n    order: 4,\\\\\\\\n  },\\\\\\\\n\\\\\\\\n  description: {\\\\\\\\n    inputProps: {\\\\\\\\n      min: 2,\\\\\\\\n      max: 60,\\\\\\\\n\\\\\\\\n      placeholder:\\\\\\\\n        \\\\\\\\\\\\\\\"Describe your community in one short sentence that will appear in the communities discovery page.\\\\\\\\\\\\\\\",\\\\\\\\n\\\\\\\\n      required: true,\\\\\\\\n    },\\\\\\\\n\\\\\\\\n    label: \\\\\\\\\\\\\\\"Description\\\\\\\\\\\\\\\",\\\\\\\\n    order: 2,\\\\\\\\n  },\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst communityInputsValidator = (formValues) =>\\\\\\\\n  typeMatch(formValues) &&\\\\\\\\n  Object.values(formValues).every(\\\\\\\\n    (value) => typeof value === \\\\\\\\\\\\\\\"string\\\\\\\\\\\\\\\" && value.length > 0\\\\\\\\n  );\\\\\\\\n\\\\\\\\nconst CommunityInputsDefaults = {\\\\\\\\n  handle: \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\",\\\\\\\\n  name: \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\",\\\\\\\\n  tag: \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\",\\\\\\\\n  description: \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\",\\\\\\\\n};\\\\\\\\n\\\\\\\\nreturn (\\\\\\\\n  <Widget\\\\\\\\n    src={\\\\\\\\\\\\\\\"devhub.near/widget/gigs-board.components.organism.configurator\\\\\\\\\\\\\\\"}\\\\\\\\n    props={{\\\\\\\\n      heading: \\\\\\\\\\\\\\\"Community information\\\\\\\\\\\\\\\",\\\\\\\\n      externalState: CommunityInputsDefaults,\\\\\\\\n      fullWidth: true,\\\\\\\\n      isActive: true,\\\\\\\\n      isUnlocked: true,\\\\\\\\n      isValid: communityInputsValidator,\\\\\\\\n      onSubmit: onSubmit,\\\\\\\\n      schema: CommunityInputsPartialSchema,\\\\\\\\n      submitIcon: {\\\\\\\\n        type: \\\\\\\\\\\\\\\"bootstrap_icon\\\\\\\\\\\\\\\",\\\\\\\\n        variant: \\\\\\\\\\\\\\\"bi-rocket-takeoff-fill\\\\\\\\\\\\\\\",\\\\\\\\n      },\\\\\\\\n      submitLabel: \\\\\\\\\\\\\\\"Launch\\\\\\\\\\\\\\\",\\\\\\\\n      onCancel: onCancel,\\\\\\\\n      nearDevGovGigsWidgetsAccountId: \\\\\\\\\\\\\\\"devhub.near\\\\\\\\\\\\\\\",\\\\\\\\n    }}\\\\\\\\n  />\\\\\\\\n);\\\\\\\\n\"}, \"devhub.components.island.connect\": {\"\": \"const [startIndex, setStartIndex] = useState(0);\\\\\\\\nconst [endIndex, setEndIndex] = useState(2);\\\\\\\\n\\\\\\\\nconst DescriptionHeader = styled.h2`\\\\\\\\n  color: #f4f4f4;\\\\\\\\n  font-size: 1.75rem;\\\\\\\\n  font-style: normal;\\\\\\\\n  font-weight: 700;\\\\\\\\n  line-height: 120%; /* 43.2px */\\\\\\\\n\\\\\\\\n  @media screen and (max-width: 786px) {\\\\\\\\n    font-size: 1.5rem;\\\\\\\\n  }\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst Description = styled.p`\\\\\\\\n  color: #f4f4f4;\\\\\\\\n  text-shadow: 0px 4px 4px rgba(0, 0, 0, 0.25);\\\\\\\\n  font-size: 1.25rem;\\\\\\\\n  font-style: normal;\\\\\\\\n  font-weight: 400;\\\\\\\\n  line-height: 120%; /* 28.8px */\\\\\\\\n\\\\\\\\n  @media screen and (max-width: 786px) {\\\\\\\\n    font-size: 1rem;\\\\\\\\n  }\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst imageSource =\\\\\\\\n  \\\\\\\\\\\\\\\"https://ipfs.near.social/ipfs/bafkreic7wxhocbnxoo63uh6n2ur3otykbzouymobt3ebgd2b4dmdiu3764\\\\\\\\\\\\\\\";\\\\\\\\n\\\\\\\\nconst CardBody = styled.div`\\\\\\\\n  border-radius: 1rem;\\\\\\\\n  border: 1px solid #00ec97;\\\\\\\\n  background: #3f4040;\\\\\\\\n\\\\\\\\n  display: flex;\\\\\\\\n  max-width: 31.5%;\\\\\\\\n  height: 12rem;\\\\\\\\n  padding: 1.5rem;\\\\\\\\n  flex-direction: column;\\\\\\\\n  justify-content: center;\\\\\\\\n  align-items: flex-start;\\\\\\\\n  gap: 0.5rem;\\\\\\\\n  flex-shrink: 0;\\\\\\\\n  align-self: stretch;\\\\\\\\n\\\\\\\\n  h3 {\\\\\\\\n    color: #00ec97;\\\\\\\\n    font-size: 1.5rem;\\\\\\\\n    font-style: normal;\\\\\\\\n    font-weight: 700;\\\\\\\\n    line-height: 100%; /* 40px */\\\\\\\\n  }\\\\\\\\n\\\\\\\\n  p {\\\\\\\\n    color: #818181;\\\\\\\\n    font-size: 1.125rem;\\\\\\\\n    font-style: normal;\\\\\\\\n    font-weight: 400;\\\\\\\\n    line-height: 120%; /* 28.8px */\\\\\\\\n  }\\\\\\\\n\\\\\\\\n  a {\\\\\\\\n    color: #00ec97;\\\\\\\\n    font-size: 1.25rem;\\\\\\\\n    font-style: normal;\\\\\\\\n    font-weight: 700;\\\\\\\\n    line-height: 120%; /* 28.8px */\\\\\\\\n\\\\\\\\n    &:hover {\\\\\\\\n      text-decoration: none;\\\\\\\\n    }\\\\\\\\n  }\\\\\\\\n\\\\\\\\n  @media screen and (max-width: 768px) {\\\\\\\\n    max-width: 80%;\\\\\\\\n  }\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst Card = ({ title, description, href }) => {\\\\\\\\n  return (\\\\\\\\n    <CardBody>\\\\\\\\n      <h3>{title}</h3>\\\\\\\\n      <p>{description}</p>\\\\\\\\n      <a href={href}>Learn more \\\\\\\\u{2192}</a>\\\\\\\\n    </CardBody>\\\\\\\\n  );\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst Cards = [\\\\\\\\n  {\\\\\\\\n    title: \\\\\\\\\\\\\\\"Devhub Hacks\\\\\\\\\\\\\\\",\\\\\\\\n    description: \\\\\\\\\\\\\\\"Host and support developer focused events around the globe.\\\\\\\\\\\\\\\",\\\\\\\\n    href: \\\\\\\\\\\\\\\"/devhub.near/widget/app?page=community&handle=hacks\\\\\\\\\\\\\\\",\\\\\\\\n  },\\\\\\\\n  {\\\\\\\\n    title: \\\\\\\\\\\\\\\"NEAR Platform Fellowship\\\\\\\\\\\\\\\",\\\\\\\\n    description: \\\\\\\\\\\\\\\"Improve the NEAR dev experience with guidance & funding.\\\\\\\\\\\\\\\",\\\\\\\\n    href: \\\\\\\\\\\\\\\"/devhub.near/widget/app?page=community&handle=fellowship\\\\\\\\\\\\\\\",\\\\\\\\n  },\\\\\\\\n  {\\\\\\\\n    title: \\\\\\\\\\\\\\\"Protocol\\\\\\\\\\\\\\\",\\\\\\\\n    description: \\\\\\\\\\\\\\\"Support the ongoing innovation of the NEAR protocol.\\\\\\\\\\\\\\\",\\\\\\\\n    href: \\\\\\\\\\\\\\\"/devhub.near/widget/app?page=community&handle=protocol\\\\\\\\\\\\\\\",\\\\\\\\n  },\\\\\\\\n  {\\\\\\\\n    title: \\\\\\\\\\\\\\\"Zero Knowledge\\\\\\\\\\\\\\\",\\\\\\\\n    description: \\\\\\\\\\\\\\\"Build a Zero Knowledge ecosystem on NEAR.\\\\\\\\\\\\\\\",\\\\\\\\n    href: \\\\\\\\\\\\\\\"/devhub.near/widget/app?page=community&handle=zero-knowledge\\\\\\\\\\\\\\\",\\\\\\\\n  },\\\\\\\\n  {\\\\\\\\n    title: \\\\\\\\\\\\\\\"Contract Standards\\\\\\\\\\\\\\\",\\\\\\\\n    description: \\\\\\\\\\\\\\\"Coordinate the contribution to the NEAR dapp standards.\\\\\\\\\\\\\\\",\\\\\\\\n    href: \\\\\\\\\\\\\\\"/devhub.near/widget/app?page=community&handle=contract-standards\\\\\\\\\\\\\\\",\\\\\\\\n  },\\\\\\\\n];\\\\\\\\n\\\\\\\\nconst ForwardButton = styled.button`\\\\\\\\n  all: unset;\\\\\\\\n  position: absolute;\\\\\\\\n  right: 0;\\\\\\\\n\\\\\\\\n  margin: 1rem;\\\\\\\\n\\\\\\\\n  &:hover,\\\\\\\\n  &:active {\\\\\\\\n    border: none;\\\\\\\\n    outline: none;\\\\\\\\n  }\\\\\\\\n\\\\\\\\n  ${endIndex >= Cards.length - 1 && \\\\\\\\\\\\\\\"svg {transform: rotate(180deg);}\\\\\\\\\\\\\\\"}\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst handleForward = () => {\\\\\\\\n  if (endIndex <= Cards.length - 1) {\\\\\\\\n    setStartIndex(endIndex + 1);\\\\\\\\n    setEndIndex(endIndex + 3);\\\\\\\\n  } else {\\\\\\\\n    setStartIndex(0);\\\\\\\\n    setEndIndex(2);\\\\\\\\n  }\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst CTA = styled.a`\\\\\\\\n  color: #00ec97 !important;\\\\\\\\n  font-size: 1.5rem;\\\\\\\\n  font-style: normal;\\\\\\\\n  font-weight: 700;\\\\\\\\n  line-height: 120%; /* 28.8px */\\\\\\\\n\\\\\\\\n  @media screen and (max-width: 768px) {\\\\\\\\n    font-size: 1.25rem;\\\\\\\\n  }\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst Subheading = styled.h3`\\\\\\\\n  color: #8a8e93;\\\\\\\\n  font-size: 2.25rem;\\\\\\\\n  font-style: normal;\\\\\\\\n  font-weight: 700;\\\\\\\\n  line-height: 120%; /* 43.2px */\\\\\\\\n\\\\\\\\n  padding: 3rem;\\\\\\\\n  padding-top: 0;\\\\\\\\n\\\\\\\\n  @media screen and (max-width: 786px) {\\\\\\\\n    padding: 1rem;\\\\\\\\n    padding-top: 0;\\\\\\\\n    font-size: 1.5rem;\\\\\\\\n  }\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst Container = styled.div`\\\\\\\\n  width: 100%;\\\\\\\\n  display: flex;\\\\\\\\n  position: relative;\\\\\\\\n  align-items: center;\\\\\\\\n\\\\\\\\n  @media screen and (max-width: 768px) {\\\\\\\\n    flex-direction: column;\\\\\\\\n  }\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst DescriptionContainer = styled.div`\\\\\\\\n  padding: 3rem;\\\\\\\\n  width: 55%;\\\\\\\\n\\\\\\\\n  @media screen and (max-width: 768px) {\\\\\\\\n    padding: 1rem;\\\\\\\\n    width: 100%;\\\\\\\\n  }\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst ImageContainer = styled.div`\\\\\\\\n  position: absolute;\\\\\\\\n  top: 25%;\\\\\\\\n  right: 0;\\\\\\\\n\\\\\\\\n  width: 50%;\\\\\\\\n  height: 65%;\\\\\\\\n\\\\\\\\n  @media screen and (max-width: 768px) {\\\\\\\\n    position: relative;\\\\\\\\n    padding: 0 1rem;\\\\\\\\n\\\\\\\\n    height: 225px;\\\\\\\\n    width: 100%;\\\\\\\\n  }\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst Image = styled.img`\\\\\\\\n  width: 100%;\\\\\\\\n  height: 90%;\\\\\\\\n  object-fit: cover;\\\\\\\\n  clip-path: polygon(15% 0, 100% 0%, 100% 100%, 0% 100%);\\\\\\\\n\\\\\\\\n  @media screen and (max-width: 768px) {\\\\\\\\n    clip-path: none;\\\\\\\\n  }\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst CardsContainer = styled.div`\\\\\\\\n  padding: 3rem;\\\\\\\\n  padding-top: 0;\\\\\\\\n\\\\\\\\n  position: relative;\\\\\\\\n  display: flex;\\\\\\\\n  flex-direction: row;\\\\\\\\n  gap: 1rem;\\\\\\\\n  width: 100%;\\\\\\\\n  align-items: center;\\\\\\\\n\\\\\\\\n  @media screen and (max-width: 768px) {\\\\\\\\n    display: none;\\\\\\\\n  }\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst ArrowIcon = () => {\\\\\\\\n  return (\\\\\\\\n    <svg\\\\\\\\n      xmlns=\\\\\\\\\\\\\\\"http://www.w3.org/2000/svg\\\\\\\\\\\\\\\"\\\\\\\\n      width=\\\\\\\\\\\\\\\"48\\\\\\\\\\\\\\\"\\\\\\\\n      height=\\\\\\\\\\\\\\\"49\\\\\\\\\\\\\\\"\\\\\\\\n      viewBox=\\\\\\\\\\\\\\\"0 0 48 49\\\\\\\\\\\\\\\"\\\\\\\\n      fill=\\\\\\\\\\\\\\\"none\\\\\\\\\\\\\\\"\\\\\\\\n    >\\\\\\\\n      <path\\\\\\\\n        fill-rule=\\\\\\\\\\\\\\\"evenodd\\\\\\\\\\\\\\\"\\\\\\\\n        clip-rule=\\\\\\\\\\\\\\\"evenodd\\\\\\\\\\\\\\\"\\\\\\\\n        d=\\\\\\\\\\\\\\\"M32.9999 24.5L17.9999 39.5L15.8999 37.4L28.7999 24.5L15.8999 11.6L17.9999 9.5L32.9999 24.5Z\\\\\\\\\\\\\\\"\\\\\\\\n        fill=\\\\\\\\\\\\\\\"#00EC97\\\\\\\\\\\\\\\"\\\\\\\\n      />\\\\\\\\n    </svg>\\\\\\\\n  );\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst CTAContainer = styled.div`\\\\\\\\n  padding: 3rem;\\\\\\\\n  padding-top: 0;\\\\\\\\n\\\\\\\\n  @media screen and (max-width: 786px) {\\\\\\\\n    padding: 1rem;\\\\\\\\n    padding-top: 0;\\\\\\\\n  }\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst MobileCards = styled.div`\\\\\\\\n  display: none;\\\\\\\\n\\\\\\\\n  @media screen and (max-width: 768px) {\\\\\\\\n    display: flex;\\\\\\\\n    padding: 1rem;\\\\\\\\n    flex-direction: row;\\\\\\\\n    overflow-x: auto;\\\\\\\\n    gap: 1rem;\\\\\\\\n  }\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst Content = (\\\\\\\\n  <>\\\\\\\\n    <Container>\\\\\\\\n      <DescriptionContainer>\\\\\\\\n        <DescriptionHeader>\\\\\\\\n          Communities are the lifeblood of /dev/hub\\\\\\\\n        </DescriptionHeader>\\\\\\\\n        <Description>\\\\\\\\n          We believe that communities are the foundation of a decentralized\\\\\\\\n          ecosystem. Explore and engage with our diverse range of communities\\\\\\\\n          today.\\\\\\\\n        </Description>\\\\\\\\n      </DescriptionContainer>\\\\\\\\n      <ImageContainer>\\\\\\\\n        <Image src={imageSource} />\\\\\\\\n      </ImageContainer>\\\\\\\\n    </Container>\\\\\\\\n    <Subheading>Featured Communities</Subheading>\\\\\\\\n    <CardsContainer>\\\\\\\\n      {Cards.slice(startIndex, endIndex + 1).map((card, idx) => (\\\\\\\\n        <Card\\\\\\\\n          title={card.title}\\\\\\\\n          description={card.description}\\\\\\\\n          href={card.href}\\\\\\\\n          key={`project-card-${idx}`}\\\\\\\\n        />\\\\\\\\n      ))}\\\\\\\\n      <ForwardButton onClick={handleForward}>\\\\\\\\n        <ArrowIcon />\\\\\\\\n      </ForwardButton>\\\\\\\\n    </CardsContainer>\\\\\\\\n    <MobileCards>\\\\\\\\n      {Cards.map((card, idx) => (\\\\\\\\n        <Card\\\\\\\\n          title={card.title}\\\\\\\\n          description={card.description}\\\\\\\\n          href={card.href}\\\\\\\\n          key={`mobile-card-${idx}`}\\\\\\\\n        />\\\\\\\\n      ))}\\\\\\\\n    </MobileCards>\\\\\\\\n    <CTAContainer>\\\\\\\\n      <CTA href=\\\\\\\\\\\\\\\"/devhub.near/widget/app?page=communities\\\\\\\\\\\\\\\">\\\\\\\\n        Explore all communities \\\\\\\\u{2192}\\\\\\\\n      </CTA>\\\\\\\\n    </CTAContainer>\\\\\\\\n  </>\\\\\\\\n);\\\\\\\\n\\\\\\\\nreturn (\\\\\\\\n  <Widget\\\\\\\\n    src=\\\\\\\\\\\\\\\"devhub.near/widget/devhub.components.island.home-section\\\\\\\\\\\\\\\"\\\\\\\\n    props={{\\\\\\\\n      title: \\\\\\\\\\\\\\\"/connect\\\\\\\\\\\\\\\",\\\\\\\\n      children: Content,\\\\\\\\n      background: true,\\\\\\\\n    }}\\\\\\\\n  />\\\\\\\\n);\\\\\\\\n\"}, \"devhub.components.island.explore\": {\"\": \"const Card = styled.div`\\\\\\\\n  display: flex;\\\\\\\\n  max-width: 20rem;\\\\\\\\n  max-height: 17.5rem;\\\\\\\\n  padding: 1.5rem;\\\\\\\\n  flex-direction: column;\\\\\\\\n  justify-content: space-between;\\\\\\\\n  align-items: center;\\\\\\\\n\\\\\\\\n  background: #fff;\\\\\\\\n  border-radius: 1rem;\\\\\\\\n\\\\\\\\n  h3 {\\\\\\\\n    color: #04a46e; //#00ec97;\\\\\\\\n    text-align: center;\\\\\\\\n    font-size: 1.5rem;\\\\\\\\n    font-style: normal;\\\\\\\\n    font-weight: 700;\\\\\\\\n    line-height: 120%; /* 28.8px */\\\\\\\\n  }\\\\\\\\n\\\\\\\\n  p {\\\\\\\\n    color: #555;\\\\\\\\n    text-align: center;\\\\\\\\n    font-size: 1rem;\\\\\\\\n    font-style: normal;\\\\\\\\n    font-weight: 400;\\\\\\\\n    line-height: 120%; /* 24px */\\\\\\\\n  }\\\\\\\\n\\\\\\\\n  a {\\\\\\\\n    color: #04a46e; //#00ec97;\\\\\\\\n    text-align: center;\\\\\\\\n    font-size: 1.25rem;\\\\\\\\n    font-style: normal;\\\\\\\\n    font-weight: 700;\\\\\\\\n    line-height: 120%; /* 24px */\\\\\\\\n  }\\\\\\\\n\\\\\\\\n  @media screen and (max-width: 768px) {\\\\\\\\n    h3 {\\\\\\\\n      font-size: 1.5rem;\\\\\\\\n    }\\\\\\\\n\\\\\\\\n    p,\\\\\\\\n    a {\\\\\\\\n      font-size: 1rem;\\\\\\\\n    }\\\\\\\\n\\\\\\\\n    padding: 1rem;\\\\\\\\n  }\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst SectionCard = ({ title, description, href }) => {\\\\\\\\n  return (\\\\\\\\n    <Card>\\\\\\\\n      <h3>{title}</h3>\\\\\\\\n      <p>{description}</p>\\\\\\\\n      <a href={href}>Learn more \\\\\\\\u{2192}</a>\\\\\\\\n    </Card>\\\\\\\\n  );\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst Cards = [\\\\\\\\n  {\\\\\\\\n    title: \\\\\\\\\\\\\\\"217 Validators\\\\\\\\\\\\\\\",\\\\\\\\n    description:\\\\\\\\n      \\\\\\\\\\\\\\\"to ensure security, liveness, and fault tolerance of the network\\\\\\\\\\\\\\\",\\\\\\\\n    href: \\\\\\\\\\\\\\\"https://nearscope.net/\\\\\\\\\\\\\\\",\\\\\\\\n  },\\\\\\\\n  {\\\\\\\\n    title: \\\\\\\\\\\\\\\"<1s, <1\\\\\\\\u{a2}\\\\\\\\\\\\\\\",\\\\\\\\n    description:\\\\\\\\n      \\\\\\\\\\\\\\\"Fast and cost-efficient transactions. 1s to update values with minimal fees\\\\\\\\\\\\\\\",\\\\\\\\n    href: \\\\\\\\\\\\\\\"https://nearblocks.io/\\\\\\\\\\\\\\\",\\\\\\\\n  },\\\\\\\\n  {\\\\\\\\n    title: \\\\\\\\\\\\\\\"Awesome DevEx\\\\\\\\\\\\\\\",\\\\\\\\n    description:\\\\\\\\n      \\\\\\\\\\\\\\\"NEAR lets developers innovate with familiar tools: TypeScript, Rust, Solidity\\\\\\\\\\\\\\\",\\\\\\\\n    href: \\\\\\\\\\\\\\\"https://docs.near.org/\\\\\\\\\\\\\\\",\\\\\\\\n  },\\\\\\\\n  {\\\\\\\\n    title: \\\\\\\\\\\\\\\"Horizontal Scaling\\\\\\\\\\\\\\\",\\\\\\\\n    description:\\\\\\\\n      \\\\\\\\\\\\\\\"Nightshade ensures maximum performance thanks to its sharded design\\\\\\\\\\\\\\\",\\\\\\\\n    href: \\\\\\\\\\\\\\\"https://docs.near.org/concepts/advanced/papers\\\\\\\\\\\\\\\",\\\\\\\\n  },\\\\\\\\n];\\\\\\\\n\\\\\\\\nconst CTA = styled.a`\\\\\\\\n  display: flex;\\\\\\\\n  padding: 0.875rem 1rem;\\\\\\\\n  align-items: center;\\\\\\\\n  gap: 0.5rem;\\\\\\\\n\\\\\\\\n  border-radius: 1rem;\\\\\\\\n  background: #00ec97;\\\\\\\\n\\\\\\\\n  color: #f4f4f4 !important;\\\\\\\\n  font-size: 1.5rem;\\\\\\\\n  font-style: normal;\\\\\\\\n  font-weight: 700;\\\\\\\\n  line-height: 120%; /* 28.8px */\\\\\\\\n  letter-spacing: -0.03rem;\\\\\\\\n\\\\\\\\n  width: max-content;\\\\\\\\n  text-decoration: none;\\\\\\\\n\\\\\\\\n  &:hover {\\\\\\\\n    text-decoration: none;\\\\\\\\n    background: #04a46e;\\\\\\\\n  }\\\\\\\\n\\\\\\\\n  @media screen and (max-width: 768px) {\\\\\\\\n    color: #f4f4f4 !important;\\\\\\\\n    font-size: 1.125rem;\\\\\\\\n    font-style: normal;\\\\\\\\n    font-weight: 700;\\\\\\\\n    line-height: 120%; /* 24px */\\\\\\\\n    letter-spacing: -0.4px;\\\\\\\\n\\\\\\\\n    margin-left: auto;\\\\\\\\n    margin-right: auto;\\\\\\\\n\\\\\\\\n    display: flex;\\\\\\\\n    padding: 14px 16px;\\\\\\\\n    flex-direction: column;\\\\\\\\n    justify-content: center;\\\\\\\\n    align-items: flex-start;\\\\\\\\n    gap: 8px;\\\\\\\\n\\\\\\\\n    border-radius: 16px;\\\\\\\\n    background: #00ec97;\\\\\\\\n  }\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst Container = styled.div`\\\\\\\\n  display: flex;\\\\\\\\n  flex-direction: column;\\\\\\\\n  gap: 3rem;\\\\\\\\n\\\\\\\\n  padding: 3rem;\\\\\\\\n  padding-top: 0;\\\\\\\\n\\\\\\\\n  @media screen and (max-width: 768px) {\\\\\\\\n    padding: 1.5rem;\\\\\\\\n    padding-top: 0;\\\\\\\\n  }\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst CardsContainer = styled.div`\\\\\\\\n  display: flex;\\\\\\\\n  justify-content: space-between;\\\\\\\\n  gap: 1.5rem;\\\\\\\\n\\\\\\\\n  @media screen and (max-width: 768px) {\\\\\\\\n    display: grid;\\\\\\\\n    grid-template-columns: 1fr 1fr;\\\\\\\\n    /* gap: 2.25rem; */\\\\\\\\n  }\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst Content = (\\\\\\\\n  <Container>\\\\\\\\n    <CardsContainer>\\\\\\\\n      {Cards.map((card) => (\\\\\\\\n        <SectionCard\\\\\\\\n          title={card.title}\\\\\\\\n          description={card.description}\\\\\\\\n          href={card.href}\\\\\\\\n          key={Math.random()}\\\\\\\\n        />\\\\\\\\n      ))}\\\\\\\\n    </CardsContainer>\\\\\\\\n    <CTA href=\\\\\\\\\\\\\\\"https://near.org/ecosystem\\\\\\\\\\\\\\\" target=\\\\\\\\\\\\\\\"_blank\\\\\\\\\\\\\\\">\\\\\\\\n      Explore the Open Web on NEAR \\\\\\\\u{2192}\\\\\\\\n    </CTA>\\\\\\\\n  </Container>\\\\\\\\n);\\\\\\\\n\\\\\\\\nreturn (\\\\\\\\n  <Widget\\\\\\\\n    src=\\\\\\\\\\\\\\\"devhub.near/widget/devhub.components.island.home-section\\\\\\\\\\\\\\\"\\\\\\\\n    props={{\\\\\\\\n      title: \\\\\\\\\\\\\\\"/explore\\\\\\\\\\\\\\\",\\\\\\\\n      titleColor: \\\\\\\\\\\\\\\"#04A46E\\\\\\\\\\\\\\\",\\\\\\\\n      description:\\\\\\\\n        \\\\\\\\\\\\\\\"NEAR Protocol is your fast, low-cost and reliable gateway to the Open Web\\\\\\\\\\\\\\\",\\\\\\\\n      children: Content,\\\\\\\\n    }}\\\\\\\\n  />\\\\\\\\n);\\\\\\\\n\"}, \"devhub.components.island.support\": {\"\": \"const Items = [\\\\\\\\n  {\\\\\\\\n    heading: (\\\\\\\\n      <>\\\\\\\\n        Developer\\\\\\\\n        <br />\\\\\\\\n        Resources\\\\\\\\n      </>\\\\\\\\n    ),\\\\\\\\n    description: \\\\\\\\\\\\\\\"Learn the fundamentals of NEAR and build with confidence\\\\\\\\\\\\\\\",\\\\\\\\n    cta: {\\\\\\\\n      href: \\\\\\\\\\\\\\\"https://docs.near.org\\\\\\\\\\\\\\\",\\\\\\\\n      title: \\\\\\\\\\\\\\\"Read \\\\\\\\u{2197}\\\\\\\\\\\\\\\",\\\\\\\\n    },\\\\\\\\n  },\\\\\\\\n  {\\\\\\\\n    heading: <>Office Hours</>,\\\\\\\\n    description: (\\\\\\\\n      <>\\\\\\\\n        Need some help?\\\\\\\\n        <br /> DevRel contributors are available to answer your technical\\\\\\\\n        questions\\\\\\\\n      </>\\\\\\\\n    ),\\\\\\\\n    cta: {\\\\\\\\n      href: \\\\\\\\\\\\\\\"https://bit.ly/DevHubOfficeHrs\\\\\\\\\\\\\\\",\\\\\\\\n      title: \\\\\\\\\\\\\\\"Book a meeting \\\\\\\\u{2197}\\\\\\\\\\\\\\\",\\\\\\\\n    },\\\\\\\\n  },\\\\\\\\n  {\\\\\\\\n    heading: <>Get Funding</>,\\\\\\\\n    description:\\\\\\\\n      \\\\\\\\\\\\\\\"Explore funding opportunities from DevHub to fuel your vision\\\\\\\\\\\\\\\",\\\\\\\\n    cta: {\\\\\\\\n      href: \\\\\\\\\\\\\\\"https://near.social/devgovgigs.near/widget/app?page=community&handle=developer-dao&tab=Funding\\\\\\\\\\\\\\\",\\\\\\\\n      title: \\\\\\\\\\\\\\\"Learn more \\\\\\\\u{2197}\\\\\\\\\\\\\\\",\\\\\\\\n    },\\\\\\\\n  },\\\\\\\\n];\\\\\\\\n\\\\\\\\nconst Circle = styled.div`\\\\\\\\n  display: flex;\\\\\\\\n  width: 18.75rem;\\\\\\\\n  height: 18.75rem;\\\\\\\\n  padding: 2.25rem;\\\\\\\\n  flex-direction: column;\\\\\\\\n  justify-content: center;\\\\\\\\n  align-items: center;\\\\\\\\n  gap: 1rem;\\\\\\\\n  flex-shrink: 0;\\\\\\\\n\\\\\\\\n  border-radius: 22.5rem;\\\\\\\\n  border: 1px solid #00ec97;\\\\\\\\n  background: #f4f4f4;\\\\\\\\n\\\\\\\\n  h3 {\\\\\\\\n    color: #101820;\\\\\\\\n    text-align: center;\\\\\\\\n    font-size: 1.75rem;\\\\\\\\n    font-style: normal;\\\\\\\\n    font-weight: 700;\\\\\\\\n    line-height: 100%; /* 36px */\\\\\\\\n  }\\\\\\\\n\\\\\\\\n  p {\\\\\\\\n    color: #101820;\\\\\\\\n    text-align: center;\\\\\\\\n    font-size: 1.125rem;\\\\\\\\n    font-style: normal;\\\\\\\\n    font-weight: 400;\\\\\\\\n    line-height: 120%; /* 28.8px */\\\\\\\\n    letter-spacing: -0.72px;\\\\\\\\n  }\\\\\\\\n\\\\\\\\n  a {\\\\\\\\n    color: #04a46e;\\\\\\\\n    font-size: 1.125rem;\\\\\\\\n    font-style: normal;\\\\\\\\n    font-weight: 700;\\\\\\\\n    line-height: 120%; /* 28.8px */\\\\\\\\n  }\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst Container = styled.div`\\\\\\\\n  padding: 3rem;\\\\\\\\n  padding-top: 0;\\\\\\\\n  margin-top: 1.5rem;\\\\\\\\n\\\\\\\\n  @media screen and (max-width: 786px) {\\\\\\\\n    padding: 1.5rem;\\\\\\\\n    padding-top: 0;\\\\\\\\n  }\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst ItemsContainer = styled.div`\\\\\\\\n  display: flex;\\\\\\\\n  flex-direction: row;\\\\\\\\n  justify-content: center;\\\\\\\\n  align-items: center;\\\\\\\\n  width: 100%;\\\\\\\\n\\\\\\\\n  flex-wrap: wrap;\\\\\\\\n  gap: 3rem;\\\\\\\\n\\\\\\\\n  @media screen and (max-width: 768px) {\\\\\\\\n    flex-direction: column;\\\\\\\\n    gap: 1rem;\\\\\\\\n  }\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst Content = (\\\\\\\\n  <Container>\\\\\\\\n    <ItemsContainer>\\\\\\\\n      {Items.map((it) => (\\\\\\\\n        <Circle key={Math.random()}>\\\\\\\\n          <h3>{it.heading}</h3>\\\\\\\\n          <p>{it.description}</p>\\\\\\\\n          <a href={it.cta.href}>{it.cta.title}</a>\\\\\\\\n        </Circle>\\\\\\\\n      ))}\\\\\\\\n    </ItemsContainer>\\\\\\\\n  </Container>\\\\\\\\n);\\\\\\\\n\\\\\\\\nreturn (\\\\\\\\n  <Widget\\\\\\\\n    src=\\\\\\\\\\\\\\\"devhub.near/widget/devhub.components.island.home-section\\\\\\\\\\\\\\\"\\\\\\\\n    props={{\\\\\\\\n      title: \\\\\\\\\\\\\\\"/get support\\\\\\\\\\\\\\\",\\\\\\\\n      children: Content,\\\\\\\\n      background: true,\\\\\\\\n    }}\\\\\\\\n  />\\\\\\\\n);\\\\\\\\n\"}, \"devhub.components.molecule.Input\": {\"\": \"const TextInput = ({\\\\\\\\n  className,\\\\\\\\n  format,\\\\\\\\n  inputProps: { className: inputClassName, ...inputProps },\\\\\\\\n  key,\\\\\\\\n  label,\\\\\\\\n  multiline,\\\\\\\\n  onChange,\\\\\\\\n  placeholder,\\\\\\\\n  type,\\\\\\\\n  value,\\\\\\\\n  skipPaddingGap,\\\\\\\\n  style,\\\\\\\\n  ...otherProps\\\\\\\\n}) => {\\\\\\\\n  const typeAttribute =\\\\\\\\n    type === \\\\\\\\\\\\\\\"text\\\\\\\\\\\\\\\" ||\\\\\\\\n    type === \\\\\\\\\\\\\\\"password\\\\\\\\\\\\\\\" ||\\\\\\\\n    type === \\\\\\\\\\\\\\\"number\\\\\\\\\\\\\\\" ||\\\\\\\\n    type === \\\\\\\\\\\\\\\"date\\\\\\\\\\\\\\\"\\\\\\\\n      ? type\\\\\\\\n      : \\\\\\\\\\\\\\\"text\\\\\\\\\\\\\\\";\\\\\\\\n\\\\\\\\n  const renderedLabels = [\\\\\\\\n    (label?.length ?? 0) > 0 ? (\\\\\\\\n      <span className=\\\\\\\\\\\\\\\"d-inline-flex gap-1 text-wrap\\\\\\\\\\\\\\\">\\\\\\\\n        <span>{label}</span>\\\\\\\\n\\\\\\\\n        {inputProps.required ? <span className=\\\\\\\\\\\\\\\"text-danger\\\\\\\\\\\\\\\">*</span> : null}\\\\\\\\n      </span>\\\\\\\\n    ) : null,\\\\\\\\n\\\\\\\\n    format === \\\\\\\\\\\\\\\"markdown\\\\\\\\\\\\\\\" ? (\\\\\\\\n      <i class=\\\\\\\\\\\\\\\"bi bi-markdown text-muted\\\\\\\\\\\\\\\" title=\\\\\\\\\\\\\\\"Markdown\\\\\\\\\\\\\\\" />\\\\\\\\n    ) : null,\\\\\\\\n\\\\\\\\n    format === \\\\\\\\\\\\\\\"comma-separated\\\\\\\\\\\\\\\" ? (\\\\\\\\n      <span\\\\\\\\n        className=\\\\\\\\\\\\\\\"d-inline-flex align-items-center text-muted\\\\\\\\\\\\\\\"\\\\\\\\n        style={{ fontSize: 12 }}\\\\\\\\n      >\\\\\\\\n        {format}\\\\\\\\n      </span>\\\\\\\\n    ) : null,\\\\\\\\n\\\\\\\\n    (inputProps.max ?? null) !== null ? (\\\\\\\\n      <span className=\\\\\\\\\\\\\\\"d-inline-flex text-muted\\\\\\\\\\\\\\\" style={{ fontSize: 12 }}>{`${\\\\\\\\n        value?.length ?? 0\\\\\\\\n      } / ${inputProps.max}`}</span>\\\\\\\\n    ) : null,\\\\\\\\n  ].filter((label) => label !== null);\\\\\\\\n\\\\\\\\n  return (\\\\\\\\n    <div\\\\\\\\n      className={[\\\\\\\\n        \\\\\\\\\\\\\\\"d-flex flex-column flex-1 align-items-start justify-content-evenly\\\\\\\\\\\\\\\",\\\\\\\\n        skipPaddingGap ? \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\" : \\\\\\\\\\\\\\\"gap-1 p-2\\\\\\\\\\\\\\\",\\\\\\\\n        className ?? \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\",\\\\\\\\n      ].join(\\\\\\\\\\\\\\\" \\\\\\\\\\\\\\\")}\\\\\\\\n      style={style}\\\\\\\\n      {...otherProps}\\\\\\\\n    >\\\\\\\\n      {renderedLabels.length > 0 ? (\\\\\\\\n        <span\\\\\\\\n          className=\\\\\\\\\\\\\\\"d-flex justify-content-between align-items-center gap-3 w-100\\\\\\\\\\\\\\\"\\\\\\\\n          id={key}\\\\\\\\n        >\\\\\\\\n          {renderedLabels.map((label) => label)}\\\\\\\\n        </span>\\\\\\\\n      ) : null}\\\\\\\\n\\\\\\\\n      {!multiline ? (\\\\\\\\n        <div className=\\\\\\\\\\\\\\\"input-group\\\\\\\\\\\\\\\">\\\\\\\\n          {inputProps.prefix && (\\\\\\\\n            <span className=\\\\\\\\\\\\\\\"input-group-text\\\\\\\\\\\\\\\">{inputProps.prefix}</span>\\\\\\\\n          )}\\\\\\\\n          <input\\\\\\\\n            aria-describedby={key}\\\\\\\\n            aria-label={label}\\\\\\\\n            className={[\\\\\\\\\\\\\\\"form-control border border-2\\\\\\\\\\\\\\\", inputClassName].join(\\\\\\\\n              \\\\\\\\\\\\\\\" \\\\\\\\\\\\\\\"\\\\\\\\n            )}\\\\\\\\n            type={typeAttribute}\\\\\\\\n            {...{ onChange, placeholder, value, ...inputProps }}\\\\\\\\n          />\\\\\\\\n        </div>\\\\\\\\n      ) : (\\\\\\\\n        <textarea\\\\\\\\n          aria-describedby={key}\\\\\\\\n          aria-label={label}\\\\\\\\n          className={[\\\\\\\\\\\\\\\"form-control border border-2\\\\\\\\\\\\\\\", inputClassName].join(\\\\\\\\\\\\\\\" \\\\\\\\\\\\\\\")}\\\\\\\\n          placeholder={\\\\\\\\n            placeholder + (inputProps.required ? \\\\\\\\\\\\\\\" ( required )\\\\\\\\\\\\\\\" : \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\")\\\\\\\\n          }\\\\\\\\n          style={{ resize: inputProps.resize ?? \\\\\\\\\\\\\\\"vertical\\\\\\\\\\\\\\\" }}\\\\\\\\n          type={typeAttribute}\\\\\\\\n          {...{ onChange, placeholder, value, ...inputProps }}\\\\\\\\n        />\\\\\\\\n      )}\\\\\\\\n    </div>\\\\\\\\n  );\\\\\\\\n};\\\\\\\\n\\\\\\\\nreturn TextInput(props);\\\\\\\\n\"}, \"devhub.entity.community.Activity\": {\"\": \"const { handle } = props;\\\\\\\\n\\\\\\\\nconst { getCommunity } = VM.require(\\\\\\\\n  \\\\\\\\\\\\\\\"devhub.near/widget/core.adapter.devhub-contract\\\\\\\\\\\\\\\"\\\\\\\\n);\\\\\\\\n\\\\\\\\nconst { href } = VM.require(\\\\\\\\\\\\\\\"devhub.near/widget/core.lib.url\\\\\\\\\\\\\\\");\\\\\\\\n\\\\\\\\nif (!getCommunity || !href) {\\\\\\\\n  return <p>Loading modules...</p>;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// TODO: Why do we need to get community data again? Isn\\\\\\\\\\\\'t the tag the handle...\\\\\\\\nconst communityData = getCommunity({ handle });\\\\\\\\n\\\\\\\\nif (communityData === null) {\\\\\\\\n  return <div>Loading...</div>;\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst MainContent = styled.div`\\\\\\\\n  flex-grow: 1;\\\\\\\\n\\\\\\\\n  @media screen and (max-width: 960px) {\\\\\\\\n    max-width: 100%;\\\\\\\\n  }\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst SidebarContainer = styled.div`\\\\\\\\n  max-width: 25%;\\\\\\\\n  margin-right: 1.5rem;\\\\\\\\n\\\\\\\\n  @media screen and (max-width: 960px) {\\\\\\\\n    display: none;\\\\\\\\n  }\\\\\\\\n`;\\\\\\\\n\\\\\\\\nreturn (\\\\\\\\n  <div style={{ maxWidth: \\\\\\\\\\\\\\\"100%\\\\\\\\\\\\\\\" }}>\\\\\\\\n    <div class=\\\\\\\\\\\\\\\"col\\\\\\\\\\\\\\\">\\\\\\\\n      <div class=\\\\\\\\\\\\\\\"d-flex w-100\\\\\\\\\\\\\\\">\\\\\\\\n        <MainContent>\\\\\\\\n          <Widget\\\\\\\\n            src={\\\\\\\\\\\\\\\"devhub.near/widget/devhub.feature.post-search.panel\\\\\\\\\\\\\\\"}\\\\\\\\n            props={{\\\\\\\\n              hideHeader: true,\\\\\\\\n              tag: communityData.tag,\\\\\\\\n              children: (\\\\\\\\n                <Widget\\\\\\\\n                  src={\\\\\\\\n                    \\\\\\\\\\\\\\\"devhub.near/widget/devhub.components.molecule.PostControls\\\\\\\\\\\\\\\"\\\\\\\\n                  }\\\\\\\\n                  props={{\\\\\\\\n                    title: \\\\\\\\\\\\\\\"Post\\\\\\\\\\\\\\\",\\\\\\\\n                    href: href({\\\\\\\\n                      widgetSrc: \\\\\\\\\\\\\\\"devhub.near/widget/app\\\\\\\\\\\\\\\",\\\\\\\\n                      params: {\\\\\\\\n                        page: \\\\\\\\\\\\\\\"create\\\\\\\\\\\\\\\",\\\\\\\\n                        labels: [communityData.tag],\\\\\\\\n                      },\\\\\\\\n                    }),\\\\\\\\n                  }}\\\\\\\\n                />\\\\\\\\n              ),\\\\\\\\n              recency,\\\\\\\\n              transactionHashes: props.transactionHashes,\\\\\\\\n            }}\\\\\\\\n          />\\\\\\\\n        </MainContent>\\\\\\\\n        <SidebarContainer>\\\\\\\\n          <Widget\\\\\\\\n            src={\\\\\\\\\\\\\\\"devhub.near/widget/devhub.entity.community.Sidebar\\\\\\\\\\\\\\\"}\\\\\\\\n            props={{ community: communityData }}\\\\\\\\n          />\\\\\\\\n        </SidebarContainer>\\\\\\\\n      </div>\\\\\\\\n    </div>\\\\\\\\n  </div>\\\\\\\\n);\\\\\\\\n\"}, \"devhub.entity.community.Provider\": {\"\": \"const { handle, Children } = props;\\\\\\\\n\\\\\\\\nconst {\\\\\\\\n  getAccountCommunityPermissions,\\\\\\\\n  createCommunity,\\\\\\\\n  updateCommunity,\\\\\\\\n  deleteCommunity,\\\\\\\\n  getCommunity,\\\\\\\\n  setCommunityAddons,\\\\\\\\n} = VM.require(\\\\\\\\\\\\\\\"devhub.near/widget/core.adapter.devhub-contract\\\\\\\\\\\\\\\");\\\\\\\\n\\\\\\\\nif (\\\\\\\\n  !getCommunity ||\\\\\\\\n  !getAccountCommunityPermissions ||\\\\\\\\n  !createCommunity ||\\\\\\\\n  !updateCommunity ||\\\\\\\\n  !deleteCommunity ||\\\\\\\\n  !setCommunityAddons\\\\\\\\n) {\\\\\\\\n  return <p>Loading modules...</p>;\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst CenteredMessage = styled.div`\\\\\\\\n  display: flex;\\\\\\\\n  flex-direction: column;\\\\\\\\n  justify-content: center;\\\\\\\\n  align-items: center;\\\\\\\\n  width: 100%;\\\\\\\\n  height: ${(p) => p.height ?? \\\\\\\\\\\\\\\"100%\\\\\\\\\\\\\\\"};\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst [isLoading, setIsLoading] = useState(false);\\\\\\\\nconst [error, setError] = useState(null);\\\\\\\\n\\\\\\\\nconst community = getCommunity({ handle });\\\\\\\\n\\\\\\\\nconst permissions = getAccountCommunityPermissions({\\\\\\\\n  account_id: context.accountId,\\\\\\\\n  community_handle: handle,\\\\\\\\n}) || {\\\\\\\\n  can_configure: false,\\\\\\\\n  can_delete: false,\\\\\\\\n};\\\\\\\\n\\\\\\\\nif (isLoading) {\\\\\\\\n  return (\\\\\\\\n    <CenteredMessage height={\\\\\\\\\\\\\\\"384px\\\\\\\\\\\\\\\"}>\\\\\\\\n      <h2>Loading...</h2>\\\\\\\\n    </CenteredMessage>\\\\\\\\n  );\\\\\\\\n} else if (!community) {\\\\\\\\n  return (\\\\\\\\n    <CenteredMessage height={\\\\\\\\\\\\\\\"384px\\\\\\\\\\\\\\\"}>\\\\\\\\n      <h2>{`Community with handle \\\\\\\\\\\\\\\"${handle}\\\\\\\\\\\\\\\" not found.`}</h2>\\\\\\\\n    </CenteredMessage>\\\\\\\\n  );\\\\\\\\n}\\\\\\\\n\\\\\\\\nfunction handleUpdateCommunity(v) {\\\\\\\\n  updateCommunity(v);\\\\\\\\n}\\\\\\\\n\\\\\\\\nreturn (\\\\\\\\n  <Children\\\\\\\\n    permissions={permissions}\\\\\\\\n    community={community}\\\\\\\\n    setCommunityAddons={setCommunityAddons}\\\\\\\\n    createCommunity={createCommunity}\\\\\\\\n    updateCommunity={handleUpdateCommunity}\\\\\\\\n    deleteCommunity={deleteCommunity}\\\\\\\\n  />\\\\\\\\n);\\\\\\\\n\"}, \"devhub.feature.post-search.panel\": {\"\": \"const { href } = VM.require(\\\\\\\\\\\\\\\"devhub.near/widget/core.lib.url\\\\\\\\\\\\\\\");\\\\\\\\n\\\\\\\\nhref || (href = () => {});\\\\\\\\n\\\\\\\\nState.init({\\\\\\\\n  tag: props.tag,\\\\\\\\n  term: \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\",\\\\\\\\n});\\\\\\\\n\\\\\\\\nconst updateInput = (term) => {\\\\\\\\n  State.update({\\\\\\\\n    term: term,\\\\\\\\n  });\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst buttonStyle = {\\\\\\\\n  backgroundColor: \\\\\\\\\\\\\\\"#0C7283\\\\\\\\\\\\\\\",\\\\\\\\n  color: \\\\\\\\\\\\\\\"#f3f3f3\\\\\\\\\\\\\\\",\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst PageTitle = styled.h5`\\\\\\\\n  color: #04a46e;\\\\\\\\n  font-size: 24px;\\\\\\\\n  font-style: normal;\\\\\\\\n  font-weight: 400;\\\\\\\\n  line-height: 120%; /* 28.8px */\\\\\\\\n  letter-spacing: -0.24px;\\\\\\\\n\\\\\\\\n  margin: 0;\\\\\\\\n  margin-bottom: 1rem;\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst Container = styled.div`\\\\\\\\n  padding: 24px;\\\\\\\\n  width: 100%;\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst PostContainer = styled.div`\\\\\\\\n  margin: 0 1rem;\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst InputContainer = styled.div`\\\\\\\\n  display: flex;\\\\\\\\n  flex-direction: row;\\\\\\\\n  position: relative;\\\\\\\\n  width: 25%;\\\\\\\\n\\\\\\\\n  @media screen and (max-width: 768px) {\\\\\\\\n    width: 100%;\\\\\\\\n  }\\\\\\\\n`;\\\\\\\\n\\\\\\\\nreturn (\\\\\\\\n  <>\\\\\\\\n    {!props.hideHeader && (\\\\\\\\n      <Container>\\\\\\\\n        <div className=\\\\\\\\\\\\\\\"w-100\\\\\\\\\\\\\\\">\\\\\\\\n          <PageTitle>Activity Feed</PageTitle>\\\\\\\\n          <div>\\\\\\\\n            <div className=\\\\\\\\\\\\\\\"d-flex flex-column flex-lg-row gap-4\\\\\\\\\\\\\\\">\\\\\\\\n              <InputContainer>\\\\\\\\n                <div className=\\\\\\\\\\\\\\\"position-absolute d-flex ps-3 flex-column h-100 justify-center\\\\\\\\\\\\\\\">\\\\\\\\n                  <i class=\\\\\\\\\\\\\\\"bi bi-search m-auto\\\\\\\\\\\\\\\"></i>\\\\\\\\n                </div>\\\\\\\\n                <input\\\\\\\\n                  type=\\\\\\\\\\\\\\\"search\\\\\\\\\\\\\\\"\\\\\\\\n                  className=\\\\\\\\\\\\\\\"ps-5 form-control border border-0\\\\\\\\\\\\\\\"\\\\\\\\n                  value={state.term ?? \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\"}\\\\\\\\n                  onChange={(e) => updateInput(e.target.value)}\\\\\\\\n                  onKeyDown={(e) => e.key == \\\\\\\\\\\\\\\"Enter\\\\\\\\\\\\\\\" && search()}\\\\\\\\n                  placeholder={props.placeholder ?? `Search by content`}\\\\\\\\n                />\\\\\\\\n              </InputContainer>\\\\\\\\n              <div class=\\\\\\\\\\\\\\\"dropdown\\\\\\\\\\\\\\\">\\\\\\\\n                <button\\\\\\\\n                  class=\\\\\\\\\\\\\\\"btn dropdown-toggle bg-white\\\\\\\\\\\\\\\"\\\\\\\\n                  type=\\\\\\\\\\\\\\\"button\\\\\\\\\\\\\\\"\\\\\\\\n                  data-bs-toggle=\\\\\\\\\\\\\\\"dropdown\\\\\\\\\\\\\\\"\\\\\\\\n                  aria-expanded=\\\\\\\\\\\\\\\"false\\\\\\\\\\\\\\\"\\\\\\\\n                >\\\\\\\\n                  Sort{props.recency === \\\\\\\\\\\\\\\"all\\\\\\\\\\\\\\\" ? \\\\\\\\\\\\\\\": All replies\\\\\\\\\\\\\\\" : \\\\\\\\\\\\\\\": Latest\\\\\\\\\\\\\\\"}\\\\\\\\n                </button>\\\\\\\\n                <ul class=\\\\\\\\\\\\\\\"dropdown-menu px-2 shadow\\\\\\\\\\\\\\\">\\\\\\\\n                  <li>\\\\\\\\n                    <a\\\\\\\\n                      style={{ borderRadius: \\\\\\\\\\\\\\\"5px\\\\\\\\\\\\\\\" }}\\\\\\\\n                      class=\\\\\\\\\\\\\\\"dropdown-item link-underline link-underline-opacity-0\\\\\\\\\\\\\\\"\\\\\\\\n                      href={href({\\\\\\\\n                        widgetSrc: \\\\\\\\\\\\\\\"devhub.near/widget/app\\\\\\\\\\\\\\\",\\\\\\\\n                        params: { page: \\\\\\\\\\\\\\\"feed\\\\\\\\\\\\\\\" },\\\\\\\\n                      })}\\\\\\\\n                    >\\\\\\\\n                      Latest\\\\\\\\n                    </a>\\\\\\\\n                  </li>\\\\\\\\n                  <li>\\\\\\\\n                    <a\\\\\\\\n                      style={{ borderRadius: \\\\\\\\\\\\\\\"5px\\\\\\\\\\\\\\\" }}\\\\\\\\n                      class=\\\\\\\\\\\\\\\"dropdown-item link-underline link-underline-opacity-0\\\\\\\\\\\\\\\"\\\\\\\\n                      href={href({\\\\\\\\n                        widgetSrc: \\\\\\\\\\\\\\\"devhub.near/widget/app\\\\\\\\\\\\\\\",\\\\\\\\n                        params: { page: \\\\\\\\\\\\\\\"feed\\\\\\\\\\\\\\\", recency: \\\\\\\\\\\\\\\"all\\\\\\\\\\\\\\\" },\\\\\\\\n                      })}\\\\\\\\n                    >\\\\\\\\n                      All replies\\\\\\\\n                    </a>\\\\\\\\n                  </li>\\\\\\\\n                </ul>\\\\\\\\n              </div>\\\\\\\\n              <div class=\\\\\\\\\\\\\\\"dropdown\\\\\\\\\\\\\\\">\\\\\\\\n                <Widget\\\\\\\\n                  src=\\\\\\\\\\\\\\\"devhub.near/widget/devhub.feature.post-search.by-author\\\\\\\\\\\\\\\"\\\\\\\\n                  props={{\\\\\\\\n                    author: state.author,\\\\\\\\n                    onAuthorSearch: (author) => {\\\\\\\\n                      State.update({ author });\\\\\\\\n                    },\\\\\\\\n                  }}\\\\\\\\n                />\\\\\\\\n              </div>\\\\\\\\n              <div>\\\\\\\\n                <Widget\\\\\\\\n                  src=\\\\\\\\\\\\\\\"devhub.near/widget/devhub.feature.post-search.by-tag\\\\\\\\\\\\\\\"\\\\\\\\n                  props={{\\\\\\\\n                    tag: state.tag,\\\\\\\\n                    onTagSearch: (tag) => {\\\\\\\\n                      State.update({ tag });\\\\\\\\n                    },\\\\\\\\n                  }}\\\\\\\\n                />\\\\\\\\n              </div>\\\\\\\\n              <div className=\\\\\\\\\\\\\\\"d-flex flex-row-reverse flex-grow-1\\\\\\\\\\\\\\\">\\\\\\\\n                {props.children}\\\\\\\\n              </div>\\\\\\\\n            </div>\\\\\\\\n          </div>\\\\\\\\n        </div>\\\\\\\\n      </Container>\\\\\\\\n    )}\\\\\\\\n    <PostContainer>\\\\\\\\n      <Widget\\\\\\\\n        src=\\\\\\\\\\\\\\\"devhub.near/widget/devhub.entity.post.List\\\\\\\\\\\\\\\"\\\\\\\\n        props={{\\\\\\\\n          author: state.author,\\\\\\\\n          tag: state.tag,\\\\\\\\n          term: state.term,\\\\\\\\n          recency: props.recency,\\\\\\\\n          transactionHashes: props.transactionHashes,\\\\\\\\n        }}\\\\\\\\n      />\\\\\\\\n    </PostContainer>\\\\\\\\n  </>\\\\\\\\n);\\\\\\\\n\"}, \"devhub.components.molecule.Button\": {\"\": \"const styles = `\\\\\\\\n  padding: 0.5rem 1.2rem !important;\\\\\\\\n  min-height: 36px;\\\\\\\\n  line-height: 1.5;\\\\\\\\n  text-decoration: none !important;\\\\\\\\n\\\\\\\\n  &:not(.shadow-none) {\\\\\\\\n    box-shadow: 0 0.125rem 0.25rem rgba(0, 0, 0, 0.075) !important;\\\\\\\\n    transition: box-shadow 0.6s;\\\\\\\\n  }\\\\\\\\n\\\\\\\\n  &.btn-sm {\\\\\\\\n    padding: 0.5rem 0.8rem !important;\\\\\\\\n    min-height: 32px;\\\\\\\\n    line-height: 1;\\\\\\\\n  }\\\\\\\\n\\\\\\\\n  &.btn-lg {\\\\\\\\n    padding: 1rem 1.5rem !important;\\\\\\\\n    min-height: 48px;\\\\\\\\n  }\\\\\\\\n\\\\\\\\n  &.btn-primary {\\\\\\\\n    border: none;\\\\\\\\n    --bs-btn-color: #ffffff;\\\\\\\\n    --bs-btn-bg: #087990;\\\\\\\\n    --bs-btn-border-color: #087990;\\\\\\\\n    --bs-btn-hover-color: #ffffff;\\\\\\\\n    --bs-btn-hover-bg: #055160;\\\\\\\\n    --bs-btn-hover-border-color: #055160;\\\\\\\\n    --bs-btn-focus-shadow-rgb: 49, 132, 253;\\\\\\\\n    --bs-btn-active-color: #ffffff;\\\\\\\\n    --bs-btn-active-bg: #055160;\\\\\\\\n    --bs-btn-active-border-color: #055160;\\\\\\\\n    --bs-btn-active-shadow: inset 0 3px 5px rgba(0, 0, 0, 0.125);\\\\\\\\n    --bs-btn-disabled-color: #ffffff;\\\\\\\\n    --bs-btn-disabled-bg: #0551604a;\\\\\\\\n  }\\\\\\\\n\\\\\\\\n\\\\\\\\t&.btn-outline-primary {\\\\\\\\n\\\\\\\\t\\\\\\\\t--bs-btn-color: #087990;\\\\\\\\n\\\\\\\\t\\\\\\\\t--bs-btn-border-color: #087990;\\\\\\\\n\\\\\\\\t\\\\\\\\t--bs-btn-hover-color: #ffffff;\\\\\\\\n\\\\\\\\t\\\\\\\\t--bs-btn-hover-bg: #087990;\\\\\\\\n\\\\\\\\t\\\\\\\\t--bs-btn-hover-border-color: #087990;\\\\\\\\n\\\\\\\\t\\\\\\\\t--bs-btn-focus-shadow-rgb: 49, 132, 253;\\\\\\\\n\\\\\\\\t\\\\\\\\t--bs-btn-active-color: #ffffff;\\\\\\\\n\\\\\\\\t\\\\\\\\t--bs-btn-active-bg: #087990;\\\\\\\\n\\\\\\\\t\\\\\\\\t--bs-btn-active-border-color: #087990;\\\\\\\\n\\\\\\\\t\\\\\\\\t--bs-btn-active-shadow: inset 0 3px 5px rgba(0, 0, 0, 0.125);\\\\\\\\n\\\\\\\\t\\\\\\\\t--bs-btn-disabled-border-color: #0551604a;\\\\\\\\n\\\\\\\\t}\\\\\\\\n\\\\\\\\n  &[class*=\\\\\\\\\\\\\\\"btn-outline-\\\\\\\\\\\\\\\"] {\\\\\\\\n    border-width: 2px;\\\\\\\\n  }\\\\\\\\n\\\\\\\\n  &.btn-outline-primary {\\\\\\\\n    --bs-btn-disabled-color: #6c757d8f;\\\\\\\\n  }\\\\\\\\n\\\\\\\\n  &.btn-secondary {\\\\\\\\n    border: none;\\\\\\\\n  }\\\\\\\\n\\\\\\\\n  &.btn-outline-secondary {\\\\\\\\n    --bs-btn-disabled-color: #6c757d8f;\\\\\\\\n  }\\\\\\\\n\\\\\\\\n  &.btn-success {\\\\\\\\n    border: none;\\\\\\\\n    --bs-btn-disabled-bg: #35482a4a;\\\\\\\\n  }\\\\\\\\n\\\\\\\\n  &.btn-outline-success {\\\\\\\\n    --bs-btn-disabled-color: #6c757d8f;\\\\\\\\n  }\\\\\\\\n\\\\\\\\n  &.btn-danger {\\\\\\\\n    border: none;\\\\\\\\n  }\\\\\\\\n\\\\\\\\n  &.btn-outline-danger {\\\\\\\\n    --bs-btn-disabled-color: #6c757d8f;\\\\\\\\n  }\\\\\\\\n\\\\\\\\n  &.btn-warning {\\\\\\\\n    border: none;\\\\\\\\n  }\\\\\\\\n\\\\\\\\n  &.btn-outline-warning {\\\\\\\\n    --bs-btn-disabled-color: #6c757d8f;\\\\\\\\n  }\\\\\\\\n\\\\\\\\n  &.btn-info {\\\\\\\\n    border: none;\\\\\\\\n  }\\\\\\\\n\\\\\\\\n  &.btn-outline-info {\\\\\\\\n    --bs-btn-disabled-color: #6c757d8f;\\\\\\\\n  }\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst rootElementByType = (type) =>\\\\\\\\n  type === \\\\\\\\\\\\\\\"link\\\\\\\\\\\\\\\"\\\\\\\\n    ? styled.a`\\\\\\\\n        ${styles}\\\\\\\\n      `\\\\\\\\n    : styled.button`\\\\\\\\n        ${styles}\\\\\\\\n      `;\\\\\\\\n\\\\\\\\nconst Button = ({\\\\\\\\n  classNames,\\\\\\\\n  icon: iconProps,\\\\\\\\n  label,\\\\\\\\n  type,\\\\\\\\n  notRounded,\\\\\\\\n  ...restProps\\\\\\\\n}) => {\\\\\\\\n  const ButtonRoot = rootElementByType(type);\\\\\\\\n\\\\\\\\n  return (\\\\\\\\n    <ButtonRoot\\\\\\\\n      className={[\\\\\\\\n        \\\\\\\\\\\\\\\"btn d-inline-flex align-items-center gap-2\\\\\\\\\\\\\\\",\\\\\\\\n        classNames?.root ?? \\\\\\\\\\\\\\\"btn-primary\\\\\\\\\\\\\\\",\\\\\\\\n        !notRounded ?? \\\\\\\\\\\\\\\"rounded-pill\\\\\\\\\\\\\\\",\\\\\\\\n      ].join(\\\\\\\\\\\\\\\" \\\\\\\\\\\\\\\")}\\\\\\\\n      style={{ width: \\\\\\\\\\\\\\\"fit-content\\\\\\\\\\\\\\\" }}\\\\\\\\n      {...restProps}\\\\\\\\n    >\\\\\\\\n      {iconProps !== null &&\\\\\\\\n        typeof iconProps === \\\\\\\\\\\\\\\"object\\\\\\\\\\\\\\\" &&\\\\\\\\n        !Array.isArray(iconProps) && (\\\\\\\\n          <Widget\\\\\\\\n            src={\\\\\\\\\\\\\\\"devhub.near/widget/devhub.components.atom.Icon\\\\\\\\\\\\\\\"}\\\\\\\\n            props={iconProps}\\\\\\\\n          />\\\\\\\\n        )}\\\\\\\\n      <span className={classNames?.label} style={{ lineHeight: \\\\\\\\\\\\\\\"inherit\\\\\\\\\\\\\\\" }}>\\\\\\\\n        {label}\\\\\\\\n      </span>\\\\\\\\n    </ButtonRoot>\\\\\\\\n  );\\\\\\\\n};\\\\\\\\n\\\\\\\\nreturn Button(props);\\\\\\\\n\"}, \"devhub.components.molecule.Select\": {\"\": \"const SelectInput = ({\\\\\\\\n  className,\\\\\\\\n  key,\\\\\\\\n  label,\\\\\\\\n  onChange,\\\\\\\\n  options,\\\\\\\\n  placeholder,\\\\\\\\n  value,\\\\\\\\n  style,\\\\\\\\n  ...otherProps\\\\\\\\n}) => {\\\\\\\\n  const renderedLabels =\\\\\\\\n    [(label?.length ?? 0) > 0 && <span>{label}</span>] || [];\\\\\\\\n\\\\\\\\n  return (\\\\\\\\n    <div\\\\\\\\n      className={[\\\\\\\\n        \\\\\\\\\\\\\\\"d-flex flex-column flex-1 align-items-start justify-content-evenly\\\\\\\\\\\\\\\",\\\\\\\\n        className,\\\\\\\\n      ].join(\\\\\\\\\\\\\\\" \\\\\\\\\\\\\\\")}\\\\\\\\n      style={style}\\\\\\\\n      {...otherProps}\\\\\\\\n    >\\\\\\\\n      {renderedLabels.length > 0 && (\\\\\\\\n        <span className=\\\\\\\\\\\\\\\"d-flex justify-content-between align-items-center gap-3 w-100\\\\\\\\\\\\\\\">\\\\\\\\n          {renderedLabels}\\\\\\\\n        </span>\\\\\\\\n      )}\\\\\\\\n\\\\\\\\n      <div className=\\\\\\\\\\\\\\\"input-group\\\\\\\\\\\\\\\">\\\\\\\\n        <select\\\\\\\\n          className=\\\\\\\\\\\\\\\"form-select border border-2\\\\\\\\\\\\\\\"\\\\\\\\n          value={value}\\\\\\\\n          onChange={onChange}\\\\\\\\n          aria-label={label}\\\\\\\\n        >\\\\\\\\n          <option value=\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\" disabled hidden>\\\\\\\\n            {placeholder}\\\\\\\\n          </option>\\\\\\\\n          {options.map((option) => (\\\\\\\\n            <option key={option.value} value={option.value}>\\\\\\\\n              {option.label}\\\\\\\\n            </option>\\\\\\\\n          ))}\\\\\\\\n        </select>\\\\\\\\n      </div>\\\\\\\\n    </div>\\\\\\\\n  );\\\\\\\\n};\\\\\\\\n\\\\\\\\nreturn SelectInput(props);\\\\\\\\n\"}, \"devhub.components.organism.Navbar\": {\"\": \"const page = props.page;\\\\\\\\n\\\\\\\\nconst [showMenu, setShowMenu] = useState(false);\\\\\\\\n\\\\\\\\nconst { href: linkHref } = VM.require(\\\\\\\\\\\\\\\"devhub.near/widget/core.lib.url\\\\\\\\\\\\\\\");\\\\\\\\n\\\\\\\\nlinkHref || (linkHref = () => {});\\\\\\\\n\\\\\\\\nconst Logo = () => {\\\\\\\\n  const Wrapper = styled.div`\\\\\\\\n    @media screen and (max-width: 768px) {\\\\\\\\n      svg {\\\\\\\\n        width: 90px;\\\\\\\\n        height: 12px;\\\\\\\\n        transform: scale(1.5);\\\\\\\\n        margin-left: 1rem;\\\\\\\\n      }\\\\\\\\n    }\\\\\\\\n  `;\\\\\\\\n\\\\\\\\n  return (\\\\\\\\n    <Wrapper>\\\\\\\\n      <Link\\\\\\\\n        to={linkHref({\\\\\\\\n          widgetSrc: \\\\\\\\\\\\\\\"devhub.near/widget/app\\\\\\\\\\\\\\\",\\\\\\\\n          params: { page: \\\\\\\\\\\\\\\"home\\\\\\\\\\\\\\\" },\\\\\\\\n        })}\\\\\\\\n      >\\\\\\\\n        <svg\\\\\\\\n          xmlns=\\\\\\\\\\\\\\\"http://www.w3.org/2000/svg\\\\\\\\\\\\\\\"\\\\\\\\n          width=\\\\\\\\\\\\\\\"180\\\\\\\\\\\\\\\"\\\\\\\\n          height=\\\\\\\\\\\\\\\"24\\\\\\\\\\\\\\\"\\\\\\\\n          viewBox=\\\\\\\\\\\\\\\"0 0 180 24\\\\\\\\\\\\\\\"\\\\\\\\n          fill=\\\\\\\\\\\\\\\"none\\\\\\\\\\\\\\\"\\\\\\\\n        >\\\\\\\\n          <g clip-path=\\\\\\\\\\\\\\\"url(#clip0_530_29)\\\\\\\\\\\\\\\">\\\\\\\\n            <path\\\\\\\\n              d=\\\\\\\\\\\\\\\"M8.62185 6.09766C11.8428 6.09766 14.5995 7.77588 14.5995 12.7821V20.8888H10.508V13.1803C10.508 10.7057 9.55041 9.39721 7.49016 9.39721C5.37187 9.39721 4.15313 10.8763 4.15313 13.4079V20.8888H0.0616455V6.26832H3.63081L4.00804 8.08877C4.96563 6.95099 6.32945 6.09766 8.62185 6.09766ZM23.911 21.0594C18.9489 21.0594 15.9601 18.1297 15.9601 13.607C15.9601 9.05588 19.007 6.09766 23.6208 6.09766C28.0895 6.09766 31.1073 8.82832 31.1654 13.1234C31.1654 13.5501 31.1364 14.0337 31.0493 14.4888H20.2257V14.6879C20.3128 16.7643 21.6766 18.0159 23.7369 18.0159C25.3909 18.0159 26.5516 17.3048 26.8998 15.9394H30.9332C30.4689 18.7839 27.8864 21.0594 23.911 21.0594ZM20.3128 11.8719H27.0449C26.7547 10.0799 25.5069 9.08432 23.6498 9.08432C21.8797 9.08432 20.5449 10.1368 20.3128 11.8719ZM47.0396 17.5039H47.5039V20.8888H45.4146C43.2963 20.8888 42.6289 19.8932 42.6579 18.4994C41.6133 20.1208 40.1044 21.0594 37.783 21.0594C34.562 21.0594 32.2406 19.5519 32.2406 16.7643C32.2406 13.6639 34.6201 11.9003 39.0888 11.9003H42.0486V11.1892C42.0486 9.88077 41.091 9.02743 39.3789 9.02743C37.783 9.02743 36.7093 9.73854 36.5352 10.8194H32.5888C32.879 7.97499 35.5486 6.09766 39.495 6.09766C43.6736 6.09766 46.082 7.9181 46.082 11.4168V16.5937C46.082 17.3617 46.4012 17.5039 47.0396 17.5039ZM42.0486 14.8585V14.5741H39.0598C37.3477 14.5741 36.3611 15.2568 36.3611 16.4799C36.3611 17.5039 37.2026 18.1581 38.5665 18.1581C40.7138 18.1581 42.0196 16.8497 42.0486 14.8585ZM56.8924 6.26832H57.5889V9.90921H55.9639C53.5264 9.90921 52.5978 11.5021 52.5978 13.7208V20.8888H48.5064V6.26832H52.2206L52.5978 8.45854C53.4103 7.1501 54.571 6.26832 56.8924 6.26832Z\\\\\\\\\\\\\\\"\\\\\\\\n              fill=\\\\\\\\\\\\\\\"#00EC97\\\\\\\\\\\\\\\"\\\\\\\\n            />\\\\\\\\n            <path\\\\\\\\n              d=\\\\\\\\\\\\\\\"M60.7221 23.961H59.2422L67.4542 0.124512H68.9341L60.7221 23.961ZM82.8081 8.08896V0.977843H86.8996V20.889H83.3304L82.9242 18.8694C81.9376 20.121 80.4867 21.0596 78.3394 21.0596C74.335 21.0596 71.4042 18.1867 71.4042 13.5503C71.4042 9.02762 74.335 6.09785 78.3104 6.09785C80.3706 6.09785 81.8505 6.89429 82.8081 8.08896ZM79.239 17.7885C81.4733 17.7885 82.8662 16.0818 82.8662 13.6072C82.8662 11.1041 81.4733 9.36896 79.239 9.36896C77.0046 9.36896 75.5827 11.0756 75.5827 13.5787C75.5827 16.0818 77.0046 17.7885 79.239 17.7885ZM96.2521 21.0596C91.2901 21.0596 88.3013 18.1298 88.3013 13.6072C88.3013 9.05607 91.3482 6.09785 95.962 6.09785C100.431 6.09785 103.449 8.82851 103.507 13.1236C103.507 13.5503 103.478 14.0338 103.39 14.489H92.5669V14.6881C92.6539 16.7645 94.0178 18.0161 96.078 18.0161C97.732 18.0161 98.8927 17.305 99.2409 15.9396H103.274C102.81 18.7841 100.228 21.0596 96.2521 21.0596ZM92.6539 11.8721H99.386C99.0959 10.0801 97.8481 9.08451 95.991 9.08451C94.2209 9.08451 92.8861 10.137 92.6539 11.8721ZM108.081 20.889L102.713 6.26851H107.094L110.692 16.793L114.233 6.26851H118.527L113.159 20.889H108.081ZM120.906 23.961H119.427L127.639 0.124512H129.118L120.906 23.961ZM140.671 6.09785C143.979 6.09785 146.707 7.83296 146.707 12.7823V20.889H142.615V13.1236C142.615 10.7343 141.629 9.3974 139.597 9.3974C137.508 9.3974 136.26 10.8765 136.26 13.3796V20.889H132.169V0.977843H136.26V8.06051C137.218 6.92273 138.553 6.09785 140.671 6.09785ZM158.367 13.5787V6.26851H162.459V20.889H158.832L158.454 19.1254C157.497 20.2632 156.191 21.0596 154.073 21.0596C150.997 21.0596 148.153 19.5521 148.153 14.3752V6.26851H152.245V13.8347C152.245 16.4516 153.115 17.7316 155.146 17.7316C157.178 17.7316 158.367 16.281 158.367 13.5787ZM173.022 6.09785C177.027 6.09785 179.928 8.91385 179.928 13.5503C179.928 18.073 177.027 21.0596 172.993 21.0596C170.846 21.0596 169.366 20.1494 168.408 18.8978L168.002 20.889H164.433V0.977843H168.524V8.1174C169.511 6.95118 170.962 6.09785 173.022 6.09785ZM172.094 17.7885C174.328 17.7885 175.779 16.0818 175.779 13.5787C175.779 11.0756 174.328 9.36896 172.094 9.36896C169.859 9.36896 168.466 11.0756 168.466 13.5503C168.466 16.0534 169.859 17.7885 172.094 17.7885Z\\\\\\\\\\\\\\\"\\\\\\\\n              fill=\\\\\\\\\\\\\\\"#151515\\\\\\\\\\\\\\\"\\\\\\\\n            />\\\\\\\\n          </g>\\\\\\\\n          <defs>\\\\\\\\n            <clipPath id=\\\\\\\\\\\\\\\"clip0_530_29\\\\\\\\\\\\\\\">\\\\\\\\n              <rect width=\\\\\\\\\\\\\\\"180\\\\\\\\\\\\\\\" height=\\\\\\\\\\\\\\\"24\\\\\\\\\\\\\\\" fill=\\\\\\\\\\\\\\\"white\\\\\\\\\\\\\\\" />\\\\\\\\n            </clipPath>\\\\\\\\n          </defs>\\\\\\\\n        </svg>\\\\\\\\n      </Link>\\\\\\\\n    </Wrapper>\\\\\\\\n  );\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst ProfileIcon = () => {\\\\\\\\n  const Wrapper = styled.svg`\\\\\\\\n    padding: 0.25rem;\\\\\\\\n    @media screen and (max-width: 768px) {\\\\\\\\n      display: none;\\\\\\\\n    }\\\\\\\\n  `;\\\\\\\\n  return (\\\\\\\\n    <Link\\\\\\\\n      to={linkHref({\\\\\\\\n        widgetSrc: \\\\\\\\\\\\\\\"devhub.near/widget/app\\\\\\\\\\\\\\\",\\\\\\\\n        params: { page: \\\\\\\\\\\\\\\"profile\\\\\\\\\\\\\\\", accountId: context.accountId },\\\\\\\\n      })}\\\\\\\\n    >\\\\\\\\n      <Widget\\\\\\\\n        src=\\\\\\\\\\\\\\\"devhub.near/widget/devhub.components.molecule.ProfileCard\\\\\\\\\\\\\\\"\\\\\\\\n        props={{ iconOnly: true, accountId: context.accountId || null }}\\\\\\\\n      />\\\\\\\\n    </Link>\\\\\\\\n  );\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst MenuIcon = () => (\\\\\\\\n  <svg\\\\\\\\n    xmlns=\\\\\\\\\\\\\\\"http://www.w3.org/2000/svg\\\\\\\\\\\\\\\"\\\\\\\\n    width=\\\\\\\\\\\\\\\"16\\\\\\\\\\\\\\\"\\\\\\\\n    height=\\\\\\\\\\\\\\\"16\\\\\\\\\\\\\\\"\\\\\\\\n    viewBox=\\\\\\\\\\\\\\\"0 0 16 16\\\\\\\\\\\\\\\"\\\\\\\\n    fill=\\\\\\\\\\\\\\\"none\\\\\\\\\\\\\\\"\\\\\\\\n    style={{ height: 20, width: 20 }}\\\\\\\\n  >\\\\\\\\n    <path\\\\\\\\n      fill-rule=\\\\\\\\\\\\\\\"evenodd\\\\\\\\\\\\\\\"\\\\\\\\n      clip-rule=\\\\\\\\\\\\\\\"evenodd\\\\\\\\\\\\\\\"\\\\\\\\n      d=\\\\\\\\\\\\\\\"M2 12.2986H14V13.3732H2V12.2986ZM2 9.07471H14V10.1493H2V9.07471ZM2 5.85083H14V6.92546H2V5.85083ZM2 2.62695H14V3.70158H2V2.62695Z\\\\\\\\\\\\\\\"\\\\\\\\n      fill=\\\\\\\\\\\\\\\"#818181\\\\\\\\\\\\\\\"\\\\\\\\n    />\\\\\\\\n  </svg>\\\\\\\\n);\\\\\\\\n\\\\\\\\nconst Navbar = styled.div`\\\\\\\\n  padding: 1.5rem 3rem;\\\\\\\\n\\\\\\\\n  display: flex;\\\\\\\\n  flex-direction: row;\\\\\\\\n  justify-content: space-between;\\\\\\\\n  align-items: center;\\\\\\\\n\\\\\\\\n  background: #f4f4f4;\\\\\\\\n\\\\\\\\n  @media screen and (max-width: 768px) {\\\\\\\\n    padding: 1.875rem 1.375rem;\\\\\\\\n  }\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst LinksContainer = styled.div`\\\\\\\\n  display: flex;\\\\\\\\n  flex-direction: row;\\\\\\\\n  align-items: center;\\\\\\\\n  gap: 1.5rem;\\\\\\\\n\\\\\\\\n  @media screen and (max-width: 768px) {\\\\\\\\n    display: none;\\\\\\\\n  }\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst MobileMenu = styled.button`\\\\\\\\n  all: unset;\\\\\\\\n  display: none;\\\\\\\\n\\\\\\\\n  @media screen and (max-width: 768px) {\\\\\\\\n    display: block;\\\\\\\\n  }\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst links = [\\\\\\\\n  {\\\\\\\\n    title: \\\\\\\\\\\\\\\"/communities\\\\\\\\\\\\\\\",\\\\\\\\n    href: \\\\\\\\\\\\\\\"communities\\\\\\\\\\\\\\\",\\\\\\\\n    links: [],\\\\\\\\n  },\\\\\\\\n  {\\\\\\\\n    title: \\\\\\\\\\\\\\\"/activity feed\\\\\\\\\\\\\\\",\\\\\\\\n    href: \\\\\\\\\\\\\\\"feed\\\\\\\\\\\\\\\",\\\\\\\\n    links: [],\\\\\\\\n  },\\\\\\\\n  {\\\\\\\\n    title: \\\\\\\\\\\\\\\"/about\\\\\\\\\\\\\\\",\\\\\\\\n    links: [\\\\\\\\n      { title: \\\\\\\\\\\\\\\"mission\\\\\\\\\\\\\\\", href: \\\\\\\\\\\\\\\"about\\\\\\\\\\\\\\\" },\\\\\\\\n      { title: \\\\\\\\\\\\\\\"blog\\\\\\\\\\\\\\\", href: \\\\\\\\\\\\\\\"blog\\\\\\\\\\\\\\\" },\\\\\\\\n      { title: \\\\\\\\\\\\\\\"newsletter\\\\\\\\\\\\\\\", href: \\\\\\\\\\\\\\\"https://newsletter.neardevhub.org\\\\\\\\\\\\\\\" },\\\\\\\\n      {\\\\\\\\n        title: \\\\\\\\\\\\\\\"calendar\\\\\\\\\\\\\\\",\\\\\\\\n        href: \\\\\\\\\\\\\\\"https://calendar.google.com/calendar/embed?height=600&wkst=2&bgcolor=%23ffffff&ctz=UTC&title&showNav=1&showDate=1&mode=AGENDA&showPrint=0&src=Y19mNTRlZDM3ZmQ5MjMyN2FjZGM3ZTQzNDNmZTQwNzIyYWU1Nzk3YjZjODI5MjliYTkzZTlmM2E4OWM2OTY1N2FiQGdyb3VwLmNhbGVuZGFyLmdvb2dsZS5jb20&color=%23616161\\\\\\\\\\\\\\\",\\\\\\\\n      },\\\\\\\\n      {\\\\\\\\n        title: \\\\\\\\\\\\\\\"brand kit\\\\\\\\\\\\\\\",\\\\\\\\n        href: \\\\\\\\\\\\\\\"https://drive.google.com/drive/folders/1C0GMmGq3MzbVPpxvf9807IU-7kpc2_v5?usp=sharing\\\\\\\\\\\\\\\",\\\\\\\\n      },\\\\\\\\n    ],\\\\\\\\n  },\\\\\\\\n];\\\\\\\\n\\\\\\\\nconst MobileNav = styled.div`\\\\\\\\n  display: none;\\\\\\\\n\\\\\\\\n  @media screen and (max-width: 768px) {\\\\\\\\n    display: flex;\\\\\\\\n  }\\\\\\\\n\\\\\\\\n  position: absolute;\\\\\\\\n  top: 0;\\\\\\\\n  right: 0;\\\\\\\\n\\\\\\\\n  width: 207px;\\\\\\\\n\\\\\\\\n  padding: 24px 36px 36px 16px;\\\\\\\\n  flex-direction: column;\\\\\\\\n  align-items: flex-end;\\\\\\\\n  gap: 2.5rem;\\\\\\\\n  flex-shrink: 0;\\\\\\\\n\\\\\\\\n  border-radius: 0px 0px 0px 16px;\\\\\\\\n  background: rgba(41, 41, 41, 0.6);\\\\\\\\n  backdrop-filter: blur(5px);\\\\\\\\n\\\\\\\\n  z-index: 50;\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst MobileLink = styled.a`\\\\\\\\n  color: #f4f4f4 !important;\\\\\\\\n  font-size: 20px;\\\\\\\\n  font-style: normal;\\\\\\\\n  font-weight: 400;\\\\\\\\n  line-height: 20px; /* 100% */\\\\\\\\n  margin-bottom: 1rem;\\\\\\\\n\\\\\\\\n  &.active {\\\\\\\\n    color: #04a46e !important;\\\\\\\\n  }\\\\\\\\n\\\\\\\\n  &:hover {\\\\\\\\n    text-decoration: none;\\\\\\\\n    color: #096d50 !important;\\\\\\\\n  }\\\\\\\\n`;\\\\\\\\n\\\\\\\\nreturn (\\\\\\\\n  <Navbar className=\\\\\\\\\\\\\\\"position-relative\\\\\\\\\\\\\\\">\\\\\\\\n    <Logo />\\\\\\\\n    <div className=\\\\\\\\\\\\\\\"d-flex gap-3 align-items-center\\\\\\\\\\\\\\\">\\\\\\\\n      <LinksContainer>\\\\\\\\n        {links.map((link) => (\\\\\\\\n          <Widget\\\\\\\\n            src=\\\\\\\\\\\\\\\"devhub.near/widget/devhub.components.molecule.NavbarDropdown\\\\\\\\\\\\\\\"\\\\\\\\n            props={{\\\\\\\\n              title: link.title,\\\\\\\\n              href: link.href,\\\\\\\\n              links: link.links,\\\\\\\\n              page: page,\\\\\\\\n            }}\\\\\\\\n          />\\\\\\\\n        ))}\\\\\\\\n      </LinksContainer>\\\\\\\\n      {context.accountId && <ProfileIcon />}\\\\\\\\n      <MobileMenu onClick={() => setShowMenu(!showMenu)}>\\\\\\\\n        <MenuIcon />\\\\\\\\n      </MobileMenu>\\\\\\\\n    </div>\\\\\\\\n    {showMenu && (\\\\\\\\n      <MobileNav>\\\\\\\\n        <div\\\\\\\\n          onClick={() => setShowMenu(!showMenu)}\\\\\\\\n          style={{ cursor: \\\\\\\\\\\\\\\"pointer\\\\\\\\\\\\\\\" }}\\\\\\\\n        >\\\\\\\\n          <i className=\\\\\\\\\\\\\\\"bi bi-x\\\\\\\\\\\\\\\" style={{ fontSize: 20, color: \\\\\\\\\\\\\\\"#F4F4F4\\\\\\\\\\\\\\\" }}></i>\\\\\\\\n        </div>\\\\\\\\n        <div className=\\\\\\\\\\\\\\\"d-flex flex-column gap-2\\\\\\\\\\\\\\\">\\\\\\\\n          {links.map((link, idx) =>\\\\\\\\n            link.href ? (\\\\\\\\n              <MobileLink\\\\\\\\n                key={`mobile-link-${idx}`}\\\\\\\\n                className={link.href === props.page && \\\\\\\\\\\\\\\"active\\\\\\\\\\\\\\\"}\\\\\\\\n                href={`/devhub.near/widget/app?page=${link.href}`}\\\\\\\\n              >\\\\\\\\n                {link.title}\\\\\\\\n              </MobileLink>\\\\\\\\n            ) : (\\\\\\\\n              link.links.map((it, idx) => (\\\\\\\\n                <MobileLink\\\\\\\\n                  key={`nested-link-${idx}`}\\\\\\\\n                  className={link.href === props.page && \\\\\\\\\\\\\\\"active\\\\\\\\\\\\\\\"}\\\\\\\\n                  href={`/devhub.near/widget/app?page=${it.href}`}\\\\\\\\n                >\\\\\\\\n                  {it.title}\\\\\\\\n                </MobileLink>\\\\\\\\n              ))\\\\\\\\n            )\\\\\\\\n          )}\\\\\\\\n        </div>\\\\\\\\n      </MobileNav>\\\\\\\\n    )}\\\\\\\\n  </Navbar>\\\\\\\\n);\\\\\\\\n\"}, \"devhub.entity.addon.github.Viewer\": {\"\": \"const { href } = VM.require(\\\\\\\\\\\\\\\"devhub.near/widget/core.lib.url\\\\\\\\\\\\\\\");\\\\\\\\n\\\\\\\\nhref || (href = () => {});\\\\\\\\n\\\\\\\\nconst { kanbanBoards, handle, permissions } = props;\\\\\\\\n// TODO: Convert this viewer to display the provided data via kanbanBoards\\\\\\\\n\\\\\\\\nreturn (\\\\\\\\n  <Widget\\\\\\\\n    // TODO: LEGACY.\\\\\\\\n    src=\\\\\\\\\\\\\\\"devhub.near/widget/gigs-board.entity.workspace.view.github.configurator\\\\\\\\\\\\\\\"\\\\\\\\n    props={{\\\\\\\\n      communityHandle: handle, // rather than fetching again via the handle\\\\\\\\n      link: href({\\\\\\\\n        // do we need a link?\\\\\\\\n        gateway: \\\\\\\\\\\\\\\"near.org\\\\\\\\\\\\\\\",\\\\\\\\n        widgetSrc: \\\\\\\\\\\\\\\"devhub.near/widget/app\\\\\\\\\\\\\\\",\\\\\\\\n        params: { page: \\\\\\\\\\\\\\\"community\\\\\\\\\\\\\\\", handle },\\\\\\\\n      }),\\\\\\\\n      permissions,\\\\\\\\n      // TODO: REMOVE AFTER MIGRATION.\\\\\\\\n      nearDevGovGigsWidgetsAccountId: \\\\\\\\\\\\\\\"devhub.near\\\\\\\\\\\\\\\",\\\\\\\\n      nearDevGovGigsWidgetsAccountId: \\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\",\\\\\\\\n    }}\\\\\\\\n  />\\\\\\\\n);\\\\\\\\n\"}, \"devhub.entity.addon.kanban.Viewer\": {\"\": \"const { href } = VM.require(\\\\\\\\\\\\\\\"devhub.near/widget/core.lib.url\\\\\\\\\\\\\\\");\\\\\\\\n\\\\\\\\nhref || (href = () => {});\\\\\\\\n\\\\\\\\nconst { metadata, payload, handle, permissions } = props;\\\\\\\\n// TODO: Convert this viewer to display the provided data via metadata, payload\\\\\\\\n\\\\\\\\nconst CommunityBoardPage = ({ handle, permissions }) => {\\\\\\\\n  return (\\\\\\\\n    <Widget\\\\\\\\n      // TODO: LEGACY.\\\\\\\\n      src=\\\\\\\\\\\\\\\"devhub.near/widget/gigs-board.entity.workspace.view.kanban.configurator\\\\\\\\\\\\\\\"\\\\\\\\n      props={{\\\\\\\\n        communityHandle: handle, // rather than fetching again via the handle\\\\\\\\n        link: href({\\\\\\\\n          // do we need a link?\\\\\\\\n          gateway: \\\\\\\\\\\\\\\"near.org\\\\\\\\\\\\\\\",\\\\\\\\n          widgetSrc: \\\\\\\\\\\\\\\"devhub.near/widget/app\\\\\\\\\\\\\\\",\\\\\\\\n          params: { page: \\\\\\\\\\\\\\\"community\\\\\\\\\\\\\\\", handle },\\\\\\\\n        }),\\\\\\\\n        permissions,\\\\\\\\n        // TODO: REMOVE AFTER MIGRATION.\\\\\\\\n        nearDevGovGigsWidgetsAccountId: \\\\\\\\\\\\\\\"devhub.near\\\\\\\\\\\\\\\",\\\\\\\\n        nearDevGovGigsWidgetsAccountId: \\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\",\\\\\\\\n      }}\\\\\\\\n    />\\\\\\\\n  );\\\\\\\\n};\\\\\\\\n\\\\\\\\nreturn CommunityBoardPage(props);\\\\\\\\n\"}, \"devhub.feature.post-search.by-tag\": {\"\": \"const { getAllLabels } = VM.require(\\\\\\\\n  \\\\\\\\\\\\\\\"devhub.near/widget/core.adapter.devhub-contract\\\\\\\\\\\\\\\"\\\\\\\\n);\\\\\\\\n\\\\\\\\nif (!getAllLabels) {\\\\\\\\n  return <p>Loading modules...</p>;\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst selectedTags = props.tag ? [{ name: props.tag }] : [];\\\\\\\\n\\\\\\\\nconst tags = getAllLabels();\\\\\\\\n\\\\\\\\nif (tags === null) {\\\\\\\\n  return <div>Loading ...</div>;\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst onChange = (selectedTags) => props.onTagSearch?.(selectedTags[0]?.name);\\\\\\\\n\\\\\\\\nreturn (\\\\\\\\n  <Typeahead\\\\\\\\n    clearButton\\\\\\\\n    id=\\\\\\\\\\\\\\\"basic-typeahead-single\\\\\\\\\\\\\\\"\\\\\\\\n    labelKey=\\\\\\\\\\\\\\\"name\\\\\\\\\\\\\\\"\\\\\\\\n    options={tags.map((tag) => ({ name: tag }))}\\\\\\\\n    placeholder=\\\\\\\\\\\\\\\"Search by tag\\\\\\\\\\\\\\\"\\\\\\\\n    selected={selectedTags}\\\\\\\\n    {...{ onChange }}\\\\\\\\n  />\\\\\\\\n);\\\\\\\\n\"}, \"devhub.entity.addon.telegram.Viewer\": {\"\": \"const { handles } = props;\\\\\\\\n\\\\\\\\nconst CenteredMessage = styled.div`\\\\\\\\n  display: flex;\\\\\\\\n  flex-direction: column;\\\\\\\\n  justify-content: center;\\\\\\\\n  align-items: center;\\\\\\\\n  width: 100%;\\\\\\\\n  height: ${(p) => p.height ?? \\\\\\\\\\\\\\\"100%\\\\\\\\\\\\\\\"};\\\\\\\\n`;\\\\\\\\n\\\\\\\\nif (!handles || handles.length === 0) {\\\\\\\\n  return (\\\\\\\\n    <CenteredMessage height={\\\\\\\\\\\\\\\"384px\\\\\\\\\\\\\\\"}>\\\\\\\\n      <h2>No Telegram Configured</h2>\\\\\\\\n    </CenteredMessage>\\\\\\\\n  );\\\\\\\\n} else {\\\\\\\\n  return (\\\\\\\\n    <div>\\\\\\\\n      {(handles || []).map((tg) => (\\\\\\\\n        <>\\\\\\\\n          <iframe\\\\\\\\n            iframeResizer\\\\\\\\n            src={\\\\\\\\n              \\\\\\\\\\\\\\\"https://j96g3uepe0.execute-api.us-east-1.amazonaws.com/groups-ui/\\\\\\\\\\\\\\\" +\\\\\\\\n              tg\\\\\\\\n            }\\\\\\\\n            frameborder=\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\"\\\\\\\\n            // width and minWidth required by iframeResizer\\\\\\\\n            style={{\\\\\\\\n              width: \\\\\\\\\\\\\\\"1px\\\\\\\\\\\\\\\",\\\\\\\\n              minWidth: \\\\\\\\\\\\\\\"100%\\\\\\\\\\\\\\\",\\\\\\\\n              marginTop: \\\\\\\\\\\\\\\"20px\\\\\\\\\\\\\\\",\\\\\\\\n            }}\\\\\\\\n          ></iframe>\\\\\\\\n\\\\\\\\n          <a href={\\\\\\\\\\\\\\\"https://t.me/\\\\\\\\\\\\\\\" + tg} target=\\\\\\\\\\\\\\\"_blank\\\\\\\\\\\\\\\">\\\\\\\\n            <Widget\\\\\\\\n              src={\\\\\\\\\\\\\\\"devhub.near/widget/devhub.components.molecule.Button\\\\\\\\\\\\\\\"}\\\\\\\\n              props={{\\\\\\\\n                classNames: { root: \\\\\\\\\\\\\\\"btn-primary\\\\\\\\\\\\\\\" },\\\\\\\\n                label: \\\\\\\\\\\\\\\"View More\\\\\\\\\\\\\\\",\\\\\\\\n              }}\\\\\\\\n            />\\\\\\\\n          </a>\\\\\\\\n        </>\\\\\\\\n      ))}\\\\\\\\n    </div>\\\\\\\\n  );\\\\\\\\n}\\\\\\\\n\"}, \"devhub.page.community.configuration\": {\"\": \"const { Tile } =\\\\\\\\n  VM.require(\\\\\\\\\\\\\\\"devhub.near/widget/devhub.components.molecule.Tile\\\\\\\\\\\\\\\") ||\\\\\\\\n  (() => <></>);\\\\\\\\n\\\\\\\\nconst {\\\\\\\\n  permissions,\\\\\\\\n  handle,\\\\\\\\n  community,\\\\\\\\n  setCommunityAddons,\\\\\\\\n  deleteCommunity,\\\\\\\\n  updateCommunity,\\\\\\\\n} = props;\\\\\\\\n\\\\\\\\nconst [communityData, setCommunityData] = useState(community || {});\\\\\\\\nconst [selectedAddon, setSelectedAddon] = useState(null);\\\\\\\\nconst [hasUnsavedChanges, setHasUnsavedChanges] = useState(false);\\\\\\\\n\\\\\\\\nconst sectionSubmit = (sectionData) => {\\\\\\\\n  const updatedCommunityData = {\\\\\\\\n    ...Object.entries(sectionData).reduce(\\\\\\\\n      (update, [propertyKey, propertyValue]) => ({\\\\\\\\n        ...update,\\\\\\\\n\\\\\\\\n        [propertyKey]:\\\\\\\\n          typeof propertyValue !== \\\\\\\\\\\\\\\"string\\\\\\\\\\\\\\\" || (propertyValue?.length ?? 0) > 0\\\\\\\\n            ? propertyValue ?? null\\\\\\\\n            : null,\\\\\\\\n      }),\\\\\\\\n\\\\\\\\n      communityData\\\\\\\\n    ),\\\\\\\\n  };\\\\\\\\n  setCommunityData(updatedCommunityData);\\\\\\\\n  setHasUnsavedChanges(true);\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst hasConfigurePermissions = permissions.can_configure;\\\\\\\\nconst hasDeletePermissions = permissions.can_delete;\\\\\\\\n\\\\\\\\nreturn (\\\\\\\\n  <div\\\\\\\\n    className=\\\\\\\\\\\\\\\"d-flex flex-column align-items-center gap-4 w-100 p-4\\\\\\\\\\\\\\\"\\\\\\\\n    style={{ maxWidth: 960, marginBottom: \\\\\\\\\\\\\\\"60px\\\\\\\\\\\\\\\" }}\\\\\\\\n  >\\\\\\\\n    <Tile className={\\\\\\\\\\\\\\\"bg-white\\\\\\\\\\\\\\\"}>\\\\\\\\n      <Widget\\\\\\\\n        src={\\\\\\\\n          \\\\\\\\\\\\\\\"devhub.near/widget/devhub.entity.community.configuration.BrandingConfigurator\\\\\\\\\\\\\\\"\\\\\\\\n        }\\\\\\\\n        props={{\\\\\\\\n          onSubmit: sectionSubmit,\\\\\\\\n          data: communityData,\\\\\\\\n          hasConfigurePermissions,\\\\\\\\n          link: `/devhub.near/widget/app?page=community&handle=${handle}`,\\\\\\\\n        }}\\\\\\\\n      />\\\\\\\\n    </Tile>\\\\\\\\n    <Tile className={\\\\\\\\\\\\\\\"p-3 bg-white\\\\\\\\\\\\\\\"}>\\\\\\\\n      <Widget\\\\\\\\n        src={\\\\\\\\n          \\\\\\\\\\\\\\\"devhub.near/widget/devhub.entity.community.configuration.ConfigurationSection\\\\\\\\\\\\\\\"\\\\\\\\n        }\\\\\\\\n        props={{\\\\\\\\n          title: \\\\\\\\\\\\\\\"Community Information\\\\\\\\\\\\\\\",\\\\\\\\n          hasConfigurePermissions,\\\\\\\\n          Configurator: (p) => (\\\\\\\\n            <Widget\\\\\\\\n              src={\\\\\\\\n                \\\\\\\\\\\\\\\"devhub.near/widget/devhub.entity.community.configuration.InformationConfigurator\\\\\\\\\\\\\\\"\\\\\\\\n              }\\\\\\\\n              props={{\\\\\\\\n                data: communityData,\\\\\\\\n                onSubmit: sectionSubmit,\\\\\\\\n                ...p,\\\\\\\\n              }}\\\\\\\\n            />\\\\\\\\n          ),\\\\\\\\n        }}\\\\\\\\n      />\\\\\\\\n    </Tile>\\\\\\\\n    <Tile className={\\\\\\\\\\\\\\\"p-3 bg-white\\\\\\\\\\\\\\\"}>\\\\\\\\n      <Widget\\\\\\\\n        src={\\\\\\\\n          \\\\\\\\\\\\\\\"devhub.near/widget/devhub.entity.community.configuration.ConfigurationSection\\\\\\\\\\\\\\\"\\\\\\\\n        }\\\\\\\\n        props={{\\\\\\\\n          title: \\\\\\\\\\\\\\\"About\\\\\\\\\\\\\\\",\\\\\\\\n          hasConfigurePermissions,\\\\\\\\n          Configurator: (p) => (\\\\\\\\n            <Widget\\\\\\\\n              src={\\\\\\\\n                \\\\\\\\\\\\\\\"devhub.near/widget/devhub.entity.community.configuration.AboutConfigurator\\\\\\\\\\\\\\\"\\\\\\\\n              }\\\\\\\\n              props={{\\\\\\\\n                data: communityData,\\\\\\\\n                onSubmit: sectionSubmit,\\\\\\\\n                ...p,\\\\\\\\n              }}\\\\\\\\n            />\\\\\\\\n          ),\\\\\\\\n        }}\\\\\\\\n      />\\\\\\\\n    </Tile>\\\\\\\\n    <Tile className={\\\\\\\\\\\\\\\"p-3 bg-white\\\\\\\\\\\\\\\"}>\\\\\\\\n      <Widget\\\\\\\\n        src={\\\\\\\\n          \\\\\\\\\\\\\\\"devhub.near/widget/devhub.entity.community.configuration.ConfigurationSection\\\\\\\\\\\\\\\"\\\\\\\\n        }\\\\\\\\n        props={{\\\\\\\\n          title: \\\\\\\\\\\\\\\"Access Control\\\\\\\\\\\\\\\",\\\\\\\\n          hasConfigurePermissions,\\\\\\\\n          Configurator: (p) => (\\\\\\\\n            <Widget\\\\\\\\n              src={\\\\\\\\n                \\\\\\\\\\\\\\\"devhub.near/widget/devhub.entity.community.configuration.AccessControlConfigurator\\\\\\\\\\\\\\\"\\\\\\\\n              }\\\\\\\\n              props={{\\\\\\\\n                data: communityData,\\\\\\\\n                onSubmit: sectionSubmit,\\\\\\\\n                ...p,\\\\\\\\n              }}\\\\\\\\n            />\\\\\\\\n          ),\\\\\\\\n        }}\\\\\\\\n      />\\\\\\\\n    </Tile>\\\\\\\\n    {hasConfigurePermissions && (\\\\\\\\n      <Tile className={\\\\\\\\\\\\\\\"p-3 bg-white\\\\\\\\\\\\\\\"}>\\\\\\\\n        <Widget\\\\\\\\n          src={\\\\\\\\n            \\\\\\\\\\\\\\\"devhub.near/widget/devhub.entity.community.configuration.ConfigurationSection\\\\\\\\\\\\\\\"\\\\\\\\n          }\\\\\\\\n          props={{\\\\\\\\n            title: \\\\\\\\\\\\\\\"Add-Ons\\\\\\\\\\\\\\\",\\\\\\\\n            hasConfigurePermissions,\\\\\\\\n            Configurator: (p) => (\\\\\\\\n              <Widget\\\\\\\\n                src={\\\\\\\\n                  \\\\\\\\\\\\\\\"devhub.near/widget/devhub.entity.community.configuration.AddonsConfigurator\\\\\\\\\\\\\\\"\\\\\\\\n                }\\\\\\\\n                props={{\\\\\\\\n                  data: communityData.addons || [],\\\\\\\\n                  onSubmit: (v) => setCommunityAddons({ handle, addons: v }),\\\\\\\\n                  ...p,\\\\\\\\n                }}\\\\\\\\n              />\\\\\\\\n            ),\\\\\\\\n          }}\\\\\\\\n        />\\\\\\\\n      </Tile>\\\\\\\\n    )}\\\\\\\\n    {hasDeletePermissions && (\\\\\\\\n      <div\\\\\\\\n        className=\\\\\\\\\\\\\\\"d-flex justify-content-center gap-4 p-4 w-100\\\\\\\\\\\\\\\"\\\\\\\\n        style={{ maxWidth: 896 }}\\\\\\\\n      >\\\\\\\\n        <Widget\\\\\\\\n          src={\\\\\\\\\\\\\\\"devhub.near/widget/devhub.components.molecule.Button\\\\\\\\\\\\\\\"}\\\\\\\\n          props={{\\\\\\\\n            classNames: { root: \\\\\\\\\\\\\\\"btn-lg btn-outline-danger border-none\\\\\\\\\\\\\\\" },\\\\\\\\n            label: \\\\\\\\\\\\\\\"Delete community\\\\\\\\\\\\\\\",\\\\\\\\n            onClick: () => deleteCommunity({ handle }),\\\\\\\\n          }}\\\\\\\\n        />\\\\\\\\n      </div>\\\\\\\\n    )}\\\\\\\\n    {hasConfigurePermissions && hasUnsavedChanges && (\\\\\\\\n      <div\\\\\\\\n        className=\\\\\\\\\\\\\\\"position-fixed end-0 bottom-0 bg-transparent pe-4 pb-4\\\\\\\\\\\\\\\"\\\\\\\\n        style={{ borderTopLeftRadius: \\\\\\\\\\\\\\\"100%\\\\\\\\\\\\\\\" }}\\\\\\\\n      >\\\\\\\\n        <Widget\\\\\\\\n          src={\\\\\\\\\\\\\\\"devhub.near/widget/devhub.components.molecule.Button\\\\\\\\\\\\\\\"}\\\\\\\\n          props={{\\\\\\\\n            classNames: { root: \\\\\\\\\\\\\\\"btn-lg btn-success\\\\\\\\\\\\\\\" },\\\\\\\\n            icon: { type: \\\\\\\\\\\\\\\"svg_icon\\\\\\\\\\\\\\\", variant: \\\\\\\\\\\\\\\"floppy_drive\\\\\\\\\\\\\\\" },\\\\\\\\n            label: \\\\\\\\\\\\\\\"Save\\\\\\\\\\\\\\\",\\\\\\\\n            onClick: () =>\\\\\\\\n              updateCommunity({ handle, community: communityData }), // TODO : Track changes in State\\\\\\\\n          }}\\\\\\\\n        />\\\\\\\\n      </div>\\\\\\\\n    )}\\\\\\\\n  </div>\\\\\\\\n);\\\\\\\\n\"}, \"devhub.components.island.participate\": {\"\": \"const { href } = VM.require(\\\\\\\\\\\\\\\"devhub.near/widget/core.lib.url\\\\\\\\\\\\\\\");\\\\\\\\n\\\\\\\\nhref || (href = () => {});\\\\\\\\n\\\\\\\\nconst Container = styled.div`\\\\\\\\n  margin-top: 2.25rem;\\\\\\\\n\\\\\\\\n  display: flex;\\\\\\\\n  flex-direction: row;\\\\\\\\n  justify-content: space-between;\\\\\\\\n  width: 100%;\\\\\\\\n\\\\\\\\n  @media screen and (max-width: 768px) {\\\\\\\\n    flex-direction: column;\\\\\\\\n    margin-top: 0;\\\\\\\\n  }\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst LinkItem = styled.a`\\\\\\\\n  color: #00ec97;\\\\\\\\n  font-size: 1.25rem;\\\\\\\\n  font-style: normal;\\\\\\\\n  font-weight: 400;\\\\\\\\n  line-height: 120%; /* 28.8px */\\\\\\\\n\\\\\\\\n  display: flex;\\\\\\\\n  align-items: center;\\\\\\\\n\\\\\\\\n  &:hover {\\\\\\\\n    text-decoration: none;\\\\\\\\n    color: #096d50;\\\\\\\\n  }\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst Links = [\\\\\\\\n  {\\\\\\\\n    links: [\\\\\\\\n      {\\\\\\\\n        title: \\\\\\\\\\\\\\\"Ideate on Devhub\\\\\\\\\\\\\\\",\\\\\\\\n        href: \\\\\\\\\\\\\\\"https://www.neardevgov.org/blog/how-to-ideate-on-dev-hub\\\\\\\\\\\\\\\",\\\\\\\\n        count: 1,\\\\\\\\n      },\\\\\\\\n      {\\\\\\\\n        title: \\\\\\\\\\\\\\\"Post a Proposal\\\\\\\\\\\\\\\",\\\\\\\\n        href: \\\\\\\\\\\\\\\"https://www.neardevgov.org/blog/how-to-post-proposals-on-devhub\\\\\\\\\\\\\\\",\\\\\\\\n        count: 4,\\\\\\\\n      },\\\\\\\\n      {\\\\\\\\n        title: \\\\\\\\\\\\\\\"Host an Event\\\\\\\\\\\\\\\",\\\\\\\\n        href: \\\\\\\\\\\\\\\"https://near.social/devgovgigs.near/widget/app?page=community&handle=hacks&tab=Wiki%202\\\\\\\\\\\\\\\",\\\\\\\\n        count: 7,\\\\\\\\n      },\\\\\\\\n    ],\\\\\\\\n  },\\\\\\\\n  {\\\\\\\\n    links: [\\\\\\\\n      {\\\\\\\\n        title: \\\\\\\\\\\\\\\"Improve NEAR Docs\\\\\\\\\\\\\\\",\\\\\\\\n        href: \\\\\\\\\\\\\\\"https://github.com/near/docs\\\\\\\\\\\\\\\",\\\\\\\\n        count: 2,\\\\\\\\n      },\\\\\\\\n      {\\\\\\\\n        title: \\\\\\\\\\\\\\\"Join the Fellowship\\\\\\\\\\\\\\\",\\\\\\\\n        href: \\\\\\\\\\\\\\\"https://near.social/devgovgigs.near/widget/app?page=community&handle=fellowship&tab=Wiki%201\\\\\\\\\\\\\\\",\\\\\\\\n        count: 5,\\\\\\\\n      },\\\\\\\\n    ],\\\\\\\\n  },\\\\\\\\n  {\\\\\\\\n    links: [\\\\\\\\n      {\\\\\\\\n        title: \\\\\\\\\\\\\\\"Join NEAR Campus\\\\\\\\\\\\\\\",\\\\\\\\n        href: \\\\\\\\\\\\\\\"https://near.social/devgovgigs.near/widget/app?page=community&handle=near-campus\\\\\\\\\\\\\\\",\\\\\\\\n        count: 3,\\\\\\\\n      },\\\\\\\\n      {\\\\\\\\n        title: \\\\\\\\\\\\\\\"Dive into Hackbox\\\\\\\\\\\\\\\",\\\\\\\\n        href: \\\\\\\\\\\\\\\"https://near.social/hackbox.near/widget/home\\\\\\\\\\\\\\\",\\\\\\\\n        count: 6,\\\\\\\\n      },\\\\\\\\n    ],\\\\\\\\n  },\\\\\\\\n];\\\\\\\\n\\\\\\\\nconst CTA = styled.a`\\\\\\\\n  display: flex;\\\\\\\\n  padding: 0.875rem 1rem;\\\\\\\\n  align-items: center;\\\\\\\\n  gap: 0.5rem;\\\\\\\\n\\\\\\\\n  border-radius: 1rem;\\\\\\\\n  background: #00ec97;\\\\\\\\n\\\\\\\\n  color: #f4f4f4 !important;\\\\\\\\n  font-size: 1.5rem;\\\\\\\\n  font-style: normal;\\\\\\\\n  font-weight: 700;\\\\\\\\n  line-height: 120%; /* 28.8px */\\\\\\\\n  letter-spacing: -0.03rem;\\\\\\\\n\\\\\\\\n  width: max-content;\\\\\\\\n  margin-top: 1.5rem;\\\\\\\\n\\\\\\\\n  &:hover {\\\\\\\\n    background: #04a46e;\\\\\\\\n    text-decoration: none !important;\\\\\\\\n  }\\\\\\\\n\\\\\\\\n  @media screen and (max-width: 768px) {\\\\\\\\n    color: #f4f4f4 !important;\\\\\\\\n    font-size: 20px;\\\\\\\\n    font-style: normal;\\\\\\\\n    font-weight: 700;\\\\\\\\n    line-height: 120%; /* 24px */\\\\\\\\n\\\\\\\\n    display: flex;\\\\\\\\n    padding: 14px 16px;\\\\\\\\n    align-items: center;\\\\\\\\n    gap: 8px;\\\\\\\\n\\\\\\\\n    border-radius: 16px;\\\\\\\\n    background: #04a46e;\\\\\\\\n\\\\\\\\n    &:hover {\\\\\\\\n      //background: #04A46E;\\\\\\\\n      text-decoration: none;\\\\\\\\n    }\\\\\\\\n  }\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst SectionPadding = styled.div`\\\\\\\\n  padding: 3rem;\\\\\\\\n  padding-top: 0;\\\\\\\\n\\\\\\\\n  display: flex;\\\\\\\\n  flex-direction: column;\\\\\\\\n\\\\\\\\n  @media screen and (max-width: 768px) {\\\\\\\\n    padding: 1rem;\\\\\\\\n    padding-top: 0;\\\\\\\\n  }\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst LinksContainer = styled.div`\\\\\\\\n  width: 30%;\\\\\\\\n\\\\\\\\n  @media screen and (max-width: 768px) {\\\\\\\\n    width: 100%;\\\\\\\\n    margin-bottom: 1rem;\\\\\\\\n  }\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst Content = (\\\\\\\\n  <SectionPadding>\\\\\\\\n    <Container>\\\\\\\\n      {Links.map((it) => (\\\\\\\\n        <LinksContainer key={Math.random()}>\\\\\\\\n          <div className=\\\\\\\\\\\\\\\"d-flex flex-column gap-3 gap-md-2\\\\\\\\\\\\\\\">\\\\\\\\n            {it.links.map((link) => (\\\\\\\\n              <div className=\\\\\\\\\\\\\\\"d-flex flex-row\\\\\\\\\\\\\\\">\\\\\\\\n                <span\\\\\\\\n                  style={{\\\\\\\\n                    color: \\\\\\\\\\\\\\\"#04A46E\\\\\\\\\\\\\\\",\\\\\\\\n                    border: \\\\\\\\\\\\\\\"2px #04A46E solid\\\\\\\\\\\\\\\",\\\\\\\\n                    fontSize: 12,\\\\\\\\n                    padding: 4,\\\\\\\\n                    width: 22,\\\\\\\\n                    height: 22,\\\\\\\\n                  }}\\\\\\\\n                  className=\\\\\\\\\\\\\\\"rounded-circle d-flex align-items-center justify-content-center me-1\\\\\\\\\\\\\\\"\\\\\\\\n                >\\\\\\\\n                  {link.count}\\\\\\\\n                </span>{\\\\\\\\\\\\\\\" \\\\\\\\\\\\\\\"}\\\\\\\\n                <LinkItem href={link.href} target=\\\\\\\\\\\\\\\"no_blank\\\\\\\\\\\\\\\">\\\\\\\\n                  {link.title}\\\\\\\\n                </LinkItem>\\\\\\\\n              </div>\\\\\\\\n            ))}\\\\\\\\n          </div>\\\\\\\\n        </LinksContainer>\\\\\\\\n      ))}\\\\\\\\n    </Container>\\\\\\\\n\\\\\\\\n    <Link\\\\\\\\n      to={href({\\\\\\\\n        widgetSrc: \\\\\\\\\\\\\\\"devhub.near/widget/app\\\\\\\\\\\\\\\",\\\\\\\\n        params: { page: \\\\\\\\\\\\\\\"contribute\\\\\\\\\\\\\\\" },\\\\\\\\n      })}\\\\\\\\n      style={{ textDecoration: \\\\\\\\\\\\\\\"none\\\\\\\\\\\\\\\" }}\\\\\\\\n    >\\\\\\\\n      <CTA>Learn more \\\\\\\\u{2192}</CTA>\\\\\\\\n    </Link>\\\\\\\\n  </SectionPadding>\\\\\\\\n);\\\\\\\\n\\\\\\\\nreturn (\\\\\\\\n  <Widget\\\\\\\\n    src=\\\\\\\\\\\\\\\"devhub.near/widget/devhub.components.island.home-section\\\\\\\\\\\\\\\"\\\\\\\\n    props={{\\\\\\\\n      title: \\\\\\\\\\\\\\\"/participate\\\\\\\\\\\\\\\",\\\\\\\\n      titleColor: \\\\\\\\\\\\\\\"#04A46E\\\\\\\\\\\\\\\",\\\\\\\\n      description:\\\\\\\\n        \\\\\\\\\\\\\\\"There are many ways to start your contribution journey. You can:\\\\\\\\\\\\\\\",\\\\\\\\n      children: Content,\\\\\\\\n    }}\\\\\\\\n  />\\\\\\\\n);\\\\\\\\n\"}, \"devhub.entity.addon.blog.editor.form\": {\"\": \"const FormContainer = styled.div`\\\\\\\\n  & > *:not(:last-child) {\\\\\\\\n    margin-bottom: 1rem;\\\\\\\\n  }\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst {\\\\\\\\n  title,\\\\\\\\n  setTitle,\\\\\\\\n  subtitle,\\\\\\\\n  setSubtitle,\\\\\\\\n  options,\\\\\\\\n  category,\\\\\\\\n  setCategory,\\\\\\\\n  description,\\\\\\\\n  setDescription,\\\\\\\\n  debouncedUpdateState,\\\\\\\\n  author,\\\\\\\\n  setAuthor,\\\\\\\\n  date,\\\\\\\\n  setDate,\\\\\\\\n  content,\\\\\\\\n  setContent,\\\\\\\\n} = props;\\\\\\\\n\\\\\\\\nconst TitleInput = ({ title, setTitle }) => {\\\\\\\\n  return (\\\\\\\\n    <div>\\\\\\\\n      <h5>Title</h5>\\\\\\\\n      <div className=\\\\\\\\\\\\\\\"flex-grow-1\\\\\\\\\\\\\\\">\\\\\\\\n        <Widget\\\\\\\\n          src=\\\\\\\\\\\\\\\"devhub.near/widget/devhub.components.molecule.Input\\\\\\\\\\\\\\\"\\\\\\\\n          props={{\\\\\\\\n            className: \\\\\\\\\\\\\\\"flex-grow-1\\\\\\\\\\\\\\\",\\\\\\\\n            onChange: (e) => setTitle(e.target.value),\\\\\\\\n            value: title,\\\\\\\\n            placeholder: \\\\\\\\\\\\\\\"Title\\\\\\\\\\\\\\\",\\\\\\\\n            inputProps: { name: \\\\\\\\\\\\\\\"title\\\\\\\\\\\\\\\" },\\\\\\\\n          }}\\\\\\\\n        />\\\\\\\\n      </div>\\\\\\\\n    </div>\\\\\\\\n  );\\\\\\\\n};\\\\\\\\nconst SubtitleInput = ({ subtitle, setSubtitle }) => {\\\\\\\\n  return (\\\\\\\\n    <div>\\\\\\\\n      <h5>Subtitle</h5>\\\\\\\\n      <div className=\\\\\\\\\\\\\\\"flex-grow-1\\\\\\\\\\\\\\\">\\\\\\\\n        <Widget\\\\\\\\n          src=\\\\\\\\\\\\\\\"devhub.near/widget/devhub.components.molecule.Input\\\\\\\\\\\\\\\"\\\\\\\\n          props={{\\\\\\\\n            className: \\\\\\\\\\\\\\\"flex-grow-1\\\\\\\\\\\\\\\",\\\\\\\\n            onChange: (e) => setSubtitle(e.target.value),\\\\\\\\n            value: subtitle,\\\\\\\\n            placeholder: \\\\\\\\\\\\\\\"Subtitle\\\\\\\\\\\\\\\",\\\\\\\\n            inputProps: { name: \\\\\\\\\\\\\\\"subtitle\\\\\\\\\\\\\\\" },\\\\\\\\n          }}\\\\\\\\n        />\\\\\\\\n      </div>\\\\\\\\n    </div>\\\\\\\\n  );\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst CategorySelect = ({ options, category, setCategory }) => {\\\\\\\\n  return (\\\\\\\\n    <div>\\\\\\\\n      <h5>Category</h5>\\\\\\\\n      <div className=\\\\\\\\\\\\\\\"flex-grow-1\\\\\\\\\\\\\\\">\\\\\\\\n        <Widget\\\\\\\\n          src={\\\\\\\\\\\\\\\"devhub.near/widget/devhub.components.molecule.Select\\\\\\\\\\\\\\\"}\\\\\\\\n          props={{\\\\\\\\n            className: \\\\\\\\\\\\\\\"flex-grow-1\\\\\\\\\\\\\\\",\\\\\\\\n            options,\\\\\\\\n            value: category,\\\\\\\\n            onChange: (e) => setCategory(e.target.value),\\\\\\\\n            placeholder: \\\\\\\\\\\\\\\"Select a category\\\\\\\\\\\\\\\",\\\\\\\\n          }}\\\\\\\\n        />\\\\\\\\n      </div>\\\\\\\\n    </div>\\\\\\\\n  );\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst DescriptionInput = ({ description, setDescription }) => {\\\\\\\\n  return (\\\\\\\\n    <div>\\\\\\\\n      <h5>Description</h5>\\\\\\\\n      <div className=\\\\\\\\\\\\\\\"flex-grow-1\\\\\\\\\\\\\\\">\\\\\\\\n        <Widget\\\\\\\\n          src=\\\\\\\\\\\\\\\"devhub.near/widget/devhub.components.molecule.Input\\\\\\\\\\\\\\\"\\\\\\\\n          props={{\\\\\\\\n            className: \\\\\\\\\\\\\\\"flex-grow-1\\\\\\\\\\\\\\\",\\\\\\\\n            onChange: (e) => setDescription(e.target.value),\\\\\\\\n            value: description,\\\\\\\\n            placeholder: \\\\\\\\\\\\\\\"Description\\\\\\\\\\\\\\\",\\\\\\\\n            inputProps: { name: \\\\\\\\\\\\\\\"description\\\\\\\\\\\\\\\" },\\\\\\\\n          }}\\\\\\\\n        />\\\\\\\\n      </div>\\\\\\\\n    </div>\\\\\\\\n  );\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst AuthorInput = ({ author, setAuthor }) => {\\\\\\\\n  return (\\\\\\\\n    <div>\\\\\\\\n      <h5>Author</h5>\\\\\\\\n      <div className=\\\\\\\\\\\\\\\"flex-grow-1\\\\\\\\\\\\\\\">\\\\\\\\n        <Widget\\\\\\\\n          src=\\\\\\\\\\\\\\\"devhub.near/widget/devhub.components.molecule.Input\\\\\\\\\\\\\\\"\\\\\\\\n          props={{\\\\\\\\n            className: \\\\\\\\\\\\\\\"flex-grow-1\\\\\\\\\\\\\\\",\\\\\\\\n            onChange: (e) => setAuthor(e.target.value),\\\\\\\\n            value: author,\\\\\\\\n            placeholder: \\\\\\\\\\\\\\\"Author\\\\\\\\\\\\\\\",\\\\\\\\n            inputProps: { name: \\\\\\\\\\\\\\\"author\\\\\\\\\\\\\\\" },\\\\\\\\n          }}\\\\\\\\n        />\\\\\\\\n      </div>\\\\\\\\n    </div>\\\\\\\\n  );\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst DateInput = ({ date, setDate }) => {\\\\\\\\n  return (\\\\\\\\n    <div>\\\\\\\\n      <h5>Date</h5>\\\\\\\\n      <input\\\\\\\\n        name=\\\\\\\\\\\\\\\"date\\\\\\\\\\\\\\\"\\\\\\\\n        type=\\\\\\\\\\\\\\\"date\\\\\\\\\\\\\\\"\\\\\\\\n        value={date}\\\\\\\\n        onChange={(e) => setDate(e.target.value)}\\\\\\\\n      />\\\\\\\\n    </div>\\\\\\\\n  );\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst ContentEditor = ({ content, setContent }) => {\\\\\\\\n  return (\\\\\\\\n    <div>\\\\\\\\n      <h5>Content</h5>\\\\\\\\n      <Widget\\\\\\\\n        src=\\\\\\\\\\\\\\\"devhub.near/widget/devhub.components.molecule.MarkdownEditor\\\\\\\\\\\\\\\"\\\\\\\\n        props={{ data: { content }, onChange: setContent }}\\\\\\\\n      />\\\\\\\\n    </div>\\\\\\\\n  );\\\\\\\\n};\\\\\\\\n\\\\\\\\nreturn (\\\\\\\\n  <FormContainer id=\\\\\\\\\\\\\\\"blog-editor-form\\\\\\\\\\\\\\\">\\\\\\\\n    <TitleInput title={title} setTitle={setTitle} />\\\\\\\\n    <SubtitleInput subtitle={subtitle} setSubtitle={setSubtitle} />\\\\\\\\n    <CategorySelect\\\\\\\\n      options={options}\\\\\\\\n      category={category}\\\\\\\\n      setCategory={setCategory}\\\\\\\\n    />\\\\\\\\n    <DescriptionInput\\\\\\\\n      description={description}\\\\\\\\n      setDescription={setDescription}\\\\\\\\n      debouncedUpdateState={debouncedUpdateState}\\\\\\\\n    />\\\\\\\\n    <AuthorInput author={author} setAuthor={setAuthor} />\\\\\\\\n    <DateInput date={date} setDate={setDate} />\\\\\\\\n    <ContentEditor content={content} setContent={setContent} />\\\\\\\\n  </FormContainer>\\\\\\\\n);\\\\\\\\n\"}, \"devhub.feature.post-search.by-author\": {\"\": \"const { getAllAuthors } = VM.require(\\\\\\\\n  \\\\\\\\\\\\\\\"devhub.near/widget/core.adapter.devhub-contract\\\\\\\\\\\\\\\"\\\\\\\\n);\\\\\\\\n\\\\\\\\nif (!getAllAuthors) {\\\\\\\\n  return <p>Loading modules...</p>;\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst selectedAuthors = props.author ? [{ name: props.author }] : [];\\\\\\\\n\\\\\\\\nconst authors = getAllAuthors();\\\\\\\\n\\\\\\\\nif (authors === null) {\\\\\\\\n  return <div>Loading ...</div>;\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst onChange = (selectedAuthors) =>\\\\\\\\n  props.onAuthorSearch(selectedAuthors[0]?.name);\\\\\\\\n\\\\\\\\nreturn (\\\\\\\\n  <Typeahead\\\\\\\\n    clearButton\\\\\\\\n    id=\\\\\\\\\\\\\\\"basic-typeahead-single\\\\\\\\\\\\\\\"\\\\\\\\n    labelKey=\\\\\\\\\\\\\\\"name\\\\\\\\\\\\\\\"\\\\\\\\n    options={authors.map((author) => ({ name: author }))}\\\\\\\\n    placeholder=\\\\\\\\\\\\\\\"Search by author\\\\\\\\\\\\\\\"\\\\\\\\n    selected={selectedAuthors}\\\\\\\\n    {...{ onChange }}\\\\\\\\n  />\\\\\\\\n);\\\\\\\\n\"}, \"devhub.components.island.home-section\": {\"\": \"const title = props.title;\\\\\\\\nconst titleColor = props.titleColor;\\\\\\\\nconst description = props.description;\\\\\\\\nconst children = props.children;\\\\\\\\nconst background = props.background;\\\\\\\\n\\\\\\\\nconst Section = styled.div`\\\\\\\\n  ${background && \\\\\\\\\\\\\\\"background: #292929;\\\\\\\\\\\\\\\"}\\\\\\\\n  ${background && \\\\\\\\\\\\\\\"color: #F4F4F4;\\\\\\\\\\\\\\\"}\\\\\\\\n  width: 100%;\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst SectionHeader = styled.h2`\\\\\\\\n  color: ${titleColor || \\\\\\\\\\\\\\\"#00ec97\\\\\\\\\\\\\\\"};\\\\\\\\n  font-size: 1.5rem;\\\\\\\\n  font-style: normal;\\\\\\\\n  font-weight: 400;\\\\\\\\n  line-height: 120%; /* 28.8px */\\\\\\\\n  letter-spacing: -0.24px;\\\\\\\\n\\\\\\\\n  @media screen and (max-width: 768px) {\\\\\\\\n    font-size: 1.25rem;\\\\\\\\n  }\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst SectionDescription = styled.h3`\\\\\\\\n  color: #151515;\\\\\\\\n  font-size: 2.25rem;\\\\\\\\n  font-style: normal;\\\\\\\\n  font-weight: 700;\\\\\\\\n  line-height: 110%; /* 39.6px */\\\\\\\\n  letter-spacing: -0.72px;\\\\\\\\n\\\\\\\\n  margin-bottom: 2.25rem;\\\\\\\\n  margin-top: 2.25rem;\\\\\\\\n\\\\\\\\n  max-width: 40rem;\\\\\\\\n\\\\\\\\n  @media screen and (max-width: 768px) {\\\\\\\\n    margin-bottom: 1.5rem;\\\\\\\\n    margin-top: 1.5rem;\\\\\\\\n    font-size: 1.5rem;\\\\\\\\n  }\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst Container = styled.div`\\\\\\\\n  padding: 3rem;\\\\\\\\n  padding-bottom: 0;\\\\\\\\n\\\\\\\\n  @media screen and (max-width: 768px) {\\\\\\\\n    padding: 1rem;\\\\\\\\n  }\\\\\\\\n`;\\\\\\\\n\\\\\\\\nreturn (\\\\\\\\n  <Section>\\\\\\\\n    <Container>\\\\\\\\n      <SectionHeader>{title}</SectionHeader>\\\\\\\\n      {description && <SectionDescription>{description}</SectionDescription>}\\\\\\\\n    </Container>\\\\\\\\n    {children}\\\\\\\\n  </Section>\\\\\\\\n);\\\\\\\\n\"}, \"devhub.components.molecule.BadgesList\": {\"\": \"const { href } = VM.require(\\\\\\\\\\\\\\\"devhub.near/widget/core.lib.url\\\\\\\\\\\\\\\") || (() => {});\\\\\\\\n\\\\\\\\nconst nearDevGovBadgesContractId = \\\\\\\\\\\\\\\"neardevgov.near\\\\\\\\\\\\\\\";\\\\\\\\n\\\\\\\\nlet badges = props.badges;\\\\\\\\nconst mode = props.mode || \\\\\\\\\\\\\\\"normal\\\\\\\\\\\\\\\";\\\\\\\\n\\\\\\\\nif (!badges) {\\\\\\\\n  const accountId = props.accountId || context.accountId;\\\\\\\\n  const ownedBadges = Near.view(\\\\\\\\n    nearDevGovBadgesContractId,\\\\\\\\n    \\\\\\\\\\\\\\\"nft_tokens_for_owner\\\\\\\\\\\\\\\",\\\\\\\\n    {\\\\\\\\n      account_id: accountId,\\\\\\\\n    }\\\\\\\\n  );\\\\\\\\n  if (!ownedBadges) {\\\\\\\\n    return <>{mode === \\\\\\\\\\\\\\\"compact\\\\\\\\\\\\\\\" ? \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\" : \\\\\\\\\\\\\\\"Loading...\\\\\\\\\\\\\\\"}</>;\\\\\\\\n  }\\\\\\\\n  badges = ownedBadges;\\\\\\\\n}\\\\\\\\n\\\\\\\\nlet style;\\\\\\\\nif (mode === \\\\\\\\\\\\\\\"normal\\\\\\\\\\\\\\\") {\\\\\\\\n  style = { width: \\\\\\\\\\\\\\\"3em\\\\\\\\\\\\\\\", height: \\\\\\\\\\\\\\\"3em\\\\\\\\\\\\\\\" };\\\\\\\\n} else if (mode === \\\\\\\\\\\\\\\"compact\\\\\\\\\\\\\\\") {\\\\\\\\n  style = { width: \\\\\\\\\\\\\\\"1.5em\\\\\\\\\\\\\\\", height: \\\\\\\\\\\\\\\"1.5em\\\\\\\\\\\\\\\" };\\\\\\\\n}\\\\\\\\nif (props.style) {\\\\\\\\n  style = props.style;\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst renderedBadgesList = badges.map(({ token_id: tokenId, metadata }) => (\\\\\\\\n  <Link\\\\\\\\n    to={`/neardevgov.near/widget/BadgeDetails?tokenId=${tokenId}`}\\\\\\\\n    title={`NEAR DevGov Badge - ${metadata.title}`}\\\\\\\\n  >\\\\\\\\n    <Widget\\\\\\\\n      src=\\\\\\\\\\\\\\\"mob.near/widget/NftImage\\\\\\\\\\\\\\\"\\\\\\\\n      props={{\\\\\\\\n        style,\\\\\\\\n        nft: {\\\\\\\\n          tokenMetadata: metadata,\\\\\\\\n          contractId: nearDevGovBadgesContractId,\\\\\\\\n        },\\\\\\\\n        alt: `NEAR DevGov Badge - ${metadata.title}`,\\\\\\\\n      }}\\\\\\\\n    />\\\\\\\\n    {mode === \\\\\\\\\\\\\\\"compact\\\\\\\\\\\\\\\" ? null : metadata.title}\\\\\\\\n  </Link>\\\\\\\\n));\\\\\\\\n\\\\\\\\nif (mode === \\\\\\\\\\\\\\\"compact\\\\\\\\\\\\\\\") {\\\\\\\\n  return <>{renderedBadgesList}</>;\\\\\\\\n} else {\\\\\\\\n  return (\\\\\\\\n    <ul>\\\\\\\\n      {renderedBadgesList.map((renderedBadge) => (\\\\\\\\n        <li style={{ listStyleType: \\\\\\\\\\\\\\\"none\\\\\\\\\\\\\\\" }}>{renderedBadge}</li>\\\\\\\\n      ))}\\\\\\\\n    </ul>\\\\\\\\n  );\\\\\\\\n}\\\\\\\\n\"}, \"devhub.components.organism.NewsLetter\": {\"\": \"const page = props.page;\\\\\\\\nconst imageLink =\\\\\\\\n  \\\\\\\\\\\\\\\"https://ipfs.near.social/ipfs/bafkreiatybj6g6i4b4azcu3zoutlcxobrzpg3k4taazhkyd7sk5tuwmb5q\\\\\\\\\\\\\\\";\\\\\\\\n\\\\\\\\nconst Footer = styled.div`\\\\\\\\n  width: 100%;\\\\\\\\n  background-color: #00ec97;\\\\\\\\n  padding: 1.5rem;\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst Title = styled.h5`\\\\\\\\n  color: #151515;\\\\\\\\n  text-align: center;\\\\\\\\n  font-size: 1.75rem;\\\\\\\\n  font-style: normal;\\\\\\\\n  font-weight: 700;\\\\\\\\n  line-height: 120%; /* 43.2px */\\\\\\\\n  margin: 0;\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst Description = styled.p`\\\\\\\\n  color: #151515;\\\\\\\\n  text-align: center;\\\\\\\\n  font-size: 1rem;\\\\\\\\n  font-style: normal;\\\\\\\\n  font-weight: 400;\\\\\\\\n  line-height: 120%; /* 28.8px */\\\\\\\\n  letter-spacing: -0.72px;\\\\\\\\n  margin: 0;\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst MidContainer = styled.div`\\\\\\\\n  width: 720px;\\\\\\\\n  display: flex;\\\\\\\\n  width: 100%;\\\\\\\\n  flex-direction: column;\\\\\\\\n  gap: 1rem;\\\\\\\\n  align-items: center;\\\\\\\\n  ${(page === \\\\\\\\\\\\\\\"community\\\\\\\\\\\\\\\" || page === \\\\\\\\\\\\\\\"communities\\\\\\\\\\\\\\\" || page === \\\\\\\\\\\\\\\"feed\\\\\\\\\\\\\\\") &&\\\\\\\\n  \\\\\\\\\\\\\\\"display: none;\\\\\\\\\\\\\\\"}\\\\\\\\n`;\\\\\\\\n\\\\\\\\n// const CTA = styled.a`\\\\\\\\n//   background: #151515;\\\\\\\\n//   padding: 0.75rem 0.75rem;\\\\\\\\n//   color: #00ec97 !important;\\\\\\\\n//   font-size: 1rem;\\\\\\\\n//   font-style: normal;\\\\\\\\n//   font-weight: 700;\\\\\\\\n//   line-height: 20px; /* 83.333% */\\\\\\\\n//   &:hover {\\\\\\\\n//     text-decoration: none;\\\\\\\\n//   }\\\\\\\\n// `;\\\\\\\\n\\\\\\\\nconst CTA = styled.a`\\\\\\\\n  display: inline-flex;\\\\\\\\n  padding: 0.875rem 1rem;\\\\\\\\n  align-items: center;\\\\\\\\n  gap: 0.5rem;\\\\\\\\n\\\\\\\\n  border-radius: 1rem;\\\\\\\\n  border: 1px solid #151515;\\\\\\\\n\\\\\\\\n  color: #151515 !important;\\\\\\\\n  font-size: 1.25rem;\\\\\\\\n  font-style: normal;\\\\\\\\n  font-weight: 700;\\\\\\\\n  line-height: 120%; /* 28.8px */\\\\\\\\n  letter-spacing: -0.48px;\\\\\\\\n\\\\\\\\n  &:hover {\\\\\\\\n    background: #151515;\\\\\\\\n    color: #f4f4f4 !important;\\\\\\\\n    text-decoration: none; // Remove underline on hover\\\\\\\\n  }\\\\\\\\n\\\\\\\\n  @media screen and (max-width: 768px) {\\\\\\\\n    display: inline-flex;\\\\\\\\n    padding: 8px 16px;\\\\\\\\n    align-items: center;\\\\\\\\n    gap: 8px;\\\\\\\\n\\\\\\\\n    border-radius: 16px;\\\\\\\\n    background: #151515;\\\\\\\\n\\\\\\\\n    border: none;\\\\\\\\n\\\\\\\\n    color: #f4f4f4 !important;\\\\\\\\n    font-size: 16px;\\\\\\\\n    font-style: normal;\\\\\\\\n    font-weight: 700;\\\\\\\\n    line-height: 120%; /* 19.2px */\\\\\\\\n    letter-spacing: -0.32px;\\\\\\\\n\\\\\\\\n    &:hover {\\\\\\\\n      background: #151515;\\\\\\\\n      color: #f4f4f4;\\\\\\\\n      text-decoration: none; // Remove underline on hover\\\\\\\\n    }\\\\\\\\n  }\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst SocialLinks = styled.div`\\\\\\\\n  display: flex;\\\\\\\\n  flex-direction: row;\\\\\\\\n  gap: 1rem;\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst XIcon = () => {\\\\\\\\n  return (\\\\\\\\n    <svg\\\\\\\\n      width=\\\\\\\\\\\\\\\"20\\\\\\\\\\\\\\\"\\\\\\\\n      height=\\\\\\\\\\\\\\\"16\\\\\\\\\\\\\\\"\\\\\\\\n      version=\\\\\\\\\\\\\\\"1.1\\\\\\\\\\\\\\\"\\\\\\\\n      xmlns=\\\\\\\\\\\\\\\"http://www.w3.org/2000/svg\\\\\\\\\\\\\\\"\\\\\\\\n      viewBox=\\\\\\\\\\\\\\\"0 0 300 300\\\\\\\\\\\\\\\"\\\\\\\\n    >\\\\\\\\n      <path d=\\\\\\\\\\\\\\\"M178.57 127.15 290.27 0h-26.46l-97.03 110.38L89.34 0H0l117.13 166.93L0 300.25h26.46l102.4-116.59 81.8 116.59h89.34M36.01 19.54H76.66l187.13 262.13h-40.66\\\\\\\\\\\\\\\" />\\\\\\\\n    </svg>\\\\\\\\n  );\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst TelegramIcon = () => {\\\\\\\\n  return (\\\\\\\\n    <svg\\\\\\\\n      xmlns=\\\\\\\\\\\\\\\"http://www.w3.org/2000/svg\\\\\\\\\\\\\\\"\\\\\\\\n      width=\\\\\\\\\\\\\\\"20\\\\\\\\\\\\\\\"\\\\\\\\n      height=\\\\\\\\\\\\\\\"16\\\\\\\\\\\\\\\"\\\\\\\\n      viewBox=\\\\\\\\\\\\\\\"0 0 20 16\\\\\\\\\\\\\\\"\\\\\\\\n      fill=\\\\\\\\\\\\\\\"none\\\\\\\\\\\\\\\"\\\\\\\\n    >\\\\\\\\n      <path\\\\\\\\n        d=\\\\\\\\\\\\\\\"M19.7398 1.45657L16.8608 15.0342C16.6436 15.9924 16.0771 16.2309 15.2721 15.7796L10.8854 12.5469L8.76879 14.5828C8.53463 14.817 8.33866 15.0129 7.8872 15.0129L8.20233 10.5452L16.3327 3.19847C16.6862 2.88334 16.256 2.70869 15.7833 3.02386L5.73217 9.35266L1.40507 7.99835C0.463838 7.70445 0.446834 7.05707 1.60095 6.60566L18.526 0.085202C19.3096 -0.208647 19.9954 0.25977 19.7398 1.45657Z\\\\\\\\\\\\\\\"\\\\\\\\n        fill=\\\\\\\\\\\\\\\"#151515\\\\\\\\\\\\\\\"\\\\\\\\n      />\\\\\\\\n    </svg>\\\\\\\\n  );\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst YoutubeIcon = () => {\\\\\\\\n  return (\\\\\\\\n    <svg\\\\\\\\n      xmlns=\\\\\\\\\\\\\\\"http://www.w3.org/2000/svg\\\\\\\\\\\\\\\"\\\\\\\\n      width=\\\\\\\\\\\\\\\"24\\\\\\\\\\\\\\\"\\\\\\\\n      height=\\\\\\\\\\\\\\\"16\\\\\\\\\\\\\\\"\\\\\\\\n      viewBox=\\\\\\\\\\\\\\\"0 0 24 16\\\\\\\\\\\\\\\"\\\\\\\\n      fill=\\\\\\\\\\\\\\\"none\\\\\\\\\\\\\\\"\\\\\\\\n    >\\\\\\\\n      <path\\\\\\\\n        d=\\\\\\\\\\\\\\\"M23.1744 2.49854C22.9115 1.51517 22.1369 0.740571 21.1535 0.477714C19.3712 -1.21102e-07 12.2235 0 12.2235 0C12.2235 0 5.07581 -1.21102e-07 3.29346 0.477714C2.3101 0.740571 1.53549 1.51517 1.27264 2.49854C0.794922 4.28089 0.794922 8 0.794922 8C0.794922 8 0.794922 11.7191 1.27264 13.5015C1.53549 14.4848 2.3101 15.2594 3.29346 15.5223C5.07581 16 12.2235 16 12.2235 16C12.2235 16 19.3712 16 21.1535 15.5223C22.1369 15.2594 22.9115 14.4848 23.1744 13.5015C23.6521 11.7191 23.6521 8 23.6521 8C23.6521 8 23.6521 4.28089 23.1744 2.49854ZM9.93778 11.4286V4.57143L15.8761 8L9.93778 11.4286Z\\\\\\\\\\\\\\\"\\\\\\\\n        fill=\\\\\\\\\\\\\\\"#151515\\\\\\\\\\\\\\\"\\\\\\\\n      />\\\\\\\\n    </svg>\\\\\\\\n  );\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst ImageContainer = styled.img`\\\\\\\\n  ${page !== \\\\\\\\\\\\\\\"home\\\\\\\\\\\\\\\" && \\\\\\\\\\\\\\\"display: none;\\\\\\\\\\\\\\\"}\\\\\\\\n  height: 280px;\\\\\\\\n  width: 100%;\\\\\\\\n  object-fit: cover;\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst MidContent = () => {\\\\\\\\n  return (\\\\\\\\n    <>\\\\\\\\n      <MidContainer>\\\\\\\\n        <Title>/dev/hub newsletter</Title>\\\\\\\\n        <Description>\\\\\\\\n          Stay in the loop. Get the latest updates, announcements,\\\\\\\\n          <br />\\\\\\\\n          opportunities, and insights from the ecosystem in your inbox.\\\\\\\\n        </Description>\\\\\\\\n        <CTA href=\\\\\\\\\\\\\\\"https://newsletter.neardevhub.org\\\\\\\\\\\\\\\" target=\\\\\\\\\\\\\\\"no_blank\\\\\\\\\\\\\\\">\\\\\\\\n          Subscribe\\\\\\\\n        </CTA>\\\\\\\\n        <SocialLinks>\\\\\\\\n          <a href=\\\\\\\\\\\\\\\"https://twitter.com/NEARDevHub\\\\\\\\\\\\\\\" target=\\\\\\\\\\\\\\\"_blank\\\\\\\\\\\\\\\">\\\\\\\\n            <XIcon />\\\\\\\\n          </a>\\\\\\\\n          <a href=\\\\\\\\\\\\\\\"https://t.me/NEARDevHub\\\\\\\\\\\\\\\" target=\\\\\\\\\\\\\\\"_blank\\\\\\\\\\\\\\\">\\\\\\\\n            <TelegramIcon />\\\\\\\\n          </a>\\\\\\\\n          <a href=\\\\\\\\\\\\\\\"https://www.youtube.com/@NEARDevHub\\\\\\\\\\\\\\\" target=\\\\\\\\\\\\\\\"_blank\\\\\\\\\\\\\\\">\\\\\\\\n            <YoutubeIcon />\\\\\\\\n          </a>\\\\\\\\n        </SocialLinks>\\\\\\\\n      </MidContainer>\\\\\\\\n    </>\\\\\\\\n  );\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst SmallContainer = styled.div`\\\\\\\\n  display: none;\\\\\\\\n  ${(page === \\\\\\\\\\\\\\\"communities\\\\\\\\\\\\\\\" || page === \\\\\\\\\\\\\\\"community\\\\\\\\\\\\\\\" || page === \\\\\\\\\\\\\\\"feed\\\\\\\\\\\\\\\") &&\\\\\\\\n  \\\\\\\\\\\\\\\"display: flex !important;\\\\\\\\\\\\\\\"}\\\\\\\\n  justify-content: space-between;\\\\\\\\n  align-items: center;\\\\\\\\n\\\\\\\\n  @media screen and (max-width: 768px) {\\\\\\\\n    flex-direction: column-reverse;\\\\\\\\n    justify-content: center;\\\\\\\\n    gap: 1rem;\\\\\\\\n    align-items: center;\\\\\\\\n  }\\\\\\\\n`;\\\\\\\\nconst SmallContent = () => {\\\\\\\\n  return (\\\\\\\\n    <SmallContainer>\\\\\\\\n      <SocialLinks>\\\\\\\\n        <a href=\\\\\\\\\\\\\\\"https://twitter.com/NEARDevHub\\\\\\\\\\\\\\\" target=\\\\\\\\\\\\\\\"_blank\\\\\\\\\\\\\\\">\\\\\\\\n          <XIcon />\\\\\\\\n        </a>\\\\\\\\n        <a href=\\\\\\\\\\\\\\\"https://t.me/NEARDevHub\\\\\\\\\\\\\\\" target=\\\\\\\\\\\\\\\"_blank\\\\\\\\\\\\\\\">\\\\\\\\n          <TelegramIcon />\\\\\\\\n        </a>\\\\\\\\n        <a href=\\\\\\\\\\\\\\\"https://www.youtube.com/@NEARDevHub\\\\\\\\\\\\\\\" target=\\\\\\\\\\\\\\\"_blank\\\\\\\\\\\\\\\">\\\\\\\\n          <YoutubeIcon />\\\\\\\\n        </a>\\\\\\\\n      </SocialLinks>\\\\\\\\n      <div className=\\\\\\\\\\\\\\\"d-flex align-items-center gap-3\\\\\\\\\\\\\\\">\\\\\\\\n        <h5 className=\\\\\\\\\\\\\\\"m-0\\\\\\\\\\\\\\\">Subscribe to our newsletter</h5>\\\\\\\\n        <CTA href=\\\\\\\\\\\\\\\"https://newsletter.neardevhub.org\\\\\\\\\\\\\\\" target=\\\\\\\\\\\\\\\"no_blank\\\\\\\\\\\\\\\">\\\\\\\\n          Subscribe\\\\\\\\n        </CTA>\\\\\\\\n      </div>\\\\\\\\n    </SmallContainer>\\\\\\\\n  );\\\\\\\\n};\\\\\\\\n\\\\\\\\nreturn (\\\\\\\\n  <>\\\\\\\\n    <ImageContainer src={imageLink} />\\\\\\\\n    <Footer>\\\\\\\\n      <MidContent />\\\\\\\\n      <SmallContent />\\\\\\\\n    </Footer>\\\\\\\\n  </>\\\\\\\\n);\\\\\\\\n\"}, \"devhub.components.templates.AppLayout\": {\"\": \"const Container = styled.div`\\\\\\\\n  display: flex;\\\\\\\\n  flex-direction: column;\\\\\\\\n  width: 100%;\\\\\\\\n  height: 100%;\\\\\\\\n  min-height: 100vh;\\\\\\\\n\\\\\\\\n  background: #f4f4f4;\\\\\\\\n\\\\\\\\n  margin-top: calc(-1 * var(--body-top-padding));\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst ContentContainer = styled.div`\\\\\\\\n  flex: 1;\\\\\\\\n  display: flex;\\\\\\\\n  flex-direction: column;\\\\\\\\n  align-items: center;\\\\\\\\n  width: 100%;\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst AppHeader = ({ page }) => (\\\\\\\\n  <Widget\\\\\\\\n    src=\\\\\\\\\\\\\\\"devhub.near/widget/devhub.components.organism.Navbar\\\\\\\\\\\\\\\"\\\\\\\\n    props={{\\\\\\\\n      page: page,\\\\\\\\n      ...props,\\\\\\\\n    }}\\\\\\\\n  />\\\\\\\\n);\\\\\\\\n\\\\\\\\nconst Footer = (props) => {\\\\\\\\n  return (\\\\\\\\n    <Widget\\\\\\\\n      src=\\\\\\\\\\\\\\\"devhub.near/widget/devhub.components.organism.NewsLetter\\\\\\\\\\\\\\\"\\\\\\\\n      props={{\\\\\\\\n        ...props,\\\\\\\\n      }}\\\\\\\\n    />\\\\\\\\n  );\\\\\\\\n};\\\\\\\\n\\\\\\\\nfunction AppLayout({ page, children }) {\\\\\\\\n  return (\\\\\\\\n    <>\\\\\\\\n      <Container>\\\\\\\\n        <AppHeader page={page} />\\\\\\\\n        <ContentContainer>{children}</ContentContainer>\\\\\\\\n        <Footer page={page} />\\\\\\\\n      </Container>\\\\\\\\n    </>\\\\\\\\n  );\\\\\\\\n}\\\\\\\\n\\\\\\\\nreturn { AppLayout };\\\\\\\\n\"}, \"devhub.entity.addon.blog.Configurator\": {\"\": \"const { data, handle, onSubmit } = props;\\\\\\\\n\\\\\\\\nconst { Tile } =\\\\\\\\n  VM.require(\\\\\\\\\\\\\\\"devhub.near/widget/devhub.components.molecule.Tile\\\\\\\\\\\\\\\") ||\\\\\\\\n  (() => <></>);\\\\\\\\n\\\\\\\\nconst Container = styled.div`\\\\\\\\n  display: flex;\\\\\\\\n  flex-direction: column;\\\\\\\\n  width: 100%;\\\\\\\\n  padding: 20px;\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst Item = styled.div`\\\\\\\\n  padding: 10px;\\\\\\\\n  margin: 5px;\\\\\\\\n  display: flex;\\\\\\\\n  align-items: center;\\\\\\\\n  flex-direction: row;\\\\\\\\n  gap: 10px;\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst EditableField = styled.input`\\\\\\\\n  flex: 1;\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst initialData = data;\\\\\\\\n\\\\\\\\nreturn (\\\\\\\\n  <Tile className=\\\\\\\\\\\\\\\"p-3 bg-white\\\\\\\\\\\\\\\">\\\\\\\\n    <Container>\\\\\\\\n      <Widget\\\\\\\\n        src={\\\\\\\\\\\\\\\"devhub.near/widget/devhub.entity.addon.blog.editor.index\\\\\\\\\\\\\\\"}\\\\\\\\n        props={{\\\\\\\\n          data,\\\\\\\\n          handle,\\\\\\\\n        }}\\\\\\\\n      />\\\\\\\\n    </Container>\\\\\\\\n  </Tile>\\\\\\\\n);\\\\\\\\n\"}, \"devhub.entity.addon.blog.editor.index\": {\"\": \"let theme = props.theme;\\\\\\\\nlet variables = props.variables;\\\\\\\\n\\\\\\\\nif (!variables) {\\\\\\\\n  variables = ``;\\\\\\\\n}\\\\\\\\n\\\\\\\\nif (!theme) {\\\\\\\\n  theme = ``;\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst Root = styled.div`\\\\\\\\n  ${variables}\\\\\\\\n  ${theme}\\\\\\\\n\\\\\\\\n  a {\\\\\\\\n    text-decoration: none;\\\\\\\\n    color: var(--base900);\\\\\\\\n  }\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst Container = styled.div`\\\\\\\\n  display: flex;\\\\\\\\n  justify-content: center;\\\\\\\\n  align-items: center;\\\\\\\\n  height: 100%;\\\\\\\\n  width: 100%;\\\\\\\\n`;\\\\\\\\n\\\\\\\\n// What would be the first steps?\\\\\\\\n// Create this container and an empty provider\\\\\\\\n// Provider has some items, onChange, onSubmit console logs\\\\\\\\n// Create a layout that takes in Editor\\\\\\\\n\\\\\\\\nreturn (\\\\\\\\n  <Root>\\\\\\\\n    {/* Get any layout */}\\\\\\\\n    <Container>\\\\\\\\n      <Widget\\\\\\\\n        src=\\\\\\\\\\\\\\\"devhub.near/widget/devhub.entity.addon.blog.editor.provider\\\\\\\\\\\\\\\"\\\\\\\\n        props={{\\\\\\\\n          handle: props.handle,\\\\\\\\n          Layout: (providerProps) => {\\\\\\\\n            const { data, onChange, onSubmit, onCancel, getData } =\\\\\\\\n              providerProps;\\\\\\\\n            return (\\\\\\\\n              <Widget\\\\\\\\n                src=\\\\\\\\\\\\\\\"devhub.near/widget/devhub.entity.addon.blog.editor.layout\\\\\\\\\\\\\\\"\\\\\\\\n                props={{\\\\\\\\n                  getData,\\\\\\\\n                  Sidebar: (p) => (\\\\\\\\n                    <Widget\\\\\\\\n                      src=\\\\\\\\\\\\\\\"devhub.near/widget/devhub.entity.addon.blog.editor.sidebar\\\\\\\\\\\\\\\"\\\\\\\\n                      props={{ items: data, ...p }}\\\\\\\\n                    />\\\\\\\\n                  ),\\\\\\\\n                  Content: (p) => (\\\\\\\\n                    <Widget\\\\\\\\n                      src=\\\\\\\\\\\\\\\"devhub.near/widget/devhub.entity.addon.blog.editor.content\\\\\\\\\\\\\\\"\\\\\\\\n                      props={{ onChange, onCancel, onSubmit, ...p }}\\\\\\\\n                    />\\\\\\\\n                  ),\\\\\\\\n                }}\\\\\\\\n              />\\\\\\\\n            );\\\\\\\\n          },\\\\\\\\n        }}\\\\\\\\n      />\\\\\\\\n    </Container>\\\\\\\\n  </Root>\\\\\\\\n);\\\\\\\\n\"}, \"devhub.entity.addon.wiki.Configurator\": {\"\": \"const { data, onSubmit } = props;\\\\\\\\n\\\\\\\\nconst initialData = data;\\\\\\\\nconst [content, setContent] = useState(data.content || \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\");\\\\\\\\nconst [title, setTitle] = useState(data.title || \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\");\\\\\\\\nconst [subtitle, setSubtitle] = useState(data.subtitle || \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\");\\\\\\\\n\\\\\\\\nconst [textAlign, setTextAlign] = useState(data.textAlign || \\\\\\\\\\\\\\\"left\\\\\\\\\\\\\\\");\\\\\\\\n\\\\\\\\nconst Container = styled.div`\\\\\\\\n  width: 100%;\\\\\\\\n  margin: 0 auto;\\\\\\\\n  padding: 20px;\\\\\\\\n  text-align: left;\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst FormContainer = styled.div`\\\\\\\\n  padding-top: 1rem;\\\\\\\\n\\\\\\\\n  & > *:not(:last-child) {\\\\\\\\n    margin-bottom: 1rem;\\\\\\\\n  }\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst hasDataChanged = () => {\\\\\\\\n  return (\\\\\\\\n    content !== initialData.content ||\\\\\\\\n    title !== initialData.title ||\\\\\\\\n    subtitle !== initialData.subtitle ||\\\\\\\\n    textAlign !== initialData.textAlign\\\\\\\\n  );\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst handleSubmit = () => {\\\\\\\\n  if (title) onSubmit({ title, subtitle, content, textAlign });\\\\\\\\n};\\\\\\\\n\\\\\\\\nreturn (\\\\\\\\n  <Container>\\\\\\\\n    <ul className=\\\\\\\\\\\\\\\"nav nav-tabs\\\\\\\\\\\\\\\" id=\\\\\\\\\\\\\\\"editPreviewTabs\\\\\\\\\\\\\\\" role=\\\\\\\\\\\\\\\"tablist\\\\\\\\\\\\\\\">\\\\\\\\n      <li className=\\\\\\\\\\\\\\\"nav-item\\\\\\\\\\\\\\\" role=\\\\\\\\\\\\\\\"presentation\\\\\\\\\\\\\\\">\\\\\\\\n        <button\\\\\\\\n          className=\\\\\\\\\\\\\\\"nav-link active\\\\\\\\\\\\\\\"\\\\\\\\n          id=\\\\\\\\\\\\\\\"edit-tab\\\\\\\\\\\\\\\"\\\\\\\\n          data-bs-toggle=\\\\\\\\\\\\\\\"tab\\\\\\\\\\\\\\\"\\\\\\\\n          data-bs-target=\\\\\\\\\\\\\\\"#edit\\\\\\\\\\\\\\\"\\\\\\\\n          type=\\\\\\\\\\\\\\\"button\\\\\\\\\\\\\\\"\\\\\\\\n          role=\\\\\\\\\\\\\\\"tab\\\\\\\\\\\\\\\"\\\\\\\\n          aria-controls=\\\\\\\\\\\\\\\"edit\\\\\\\\\\\\\\\"\\\\\\\\n          aria-selected=\\\\\\\\\\\\\\\"true\\\\\\\\\\\\\\\"\\\\\\\\n        >\\\\\\\\n          Edit\\\\\\\\n        </button>\\\\\\\\n      </li>\\\\\\\\n      <li className=\\\\\\\\\\\\\\\"nav-item\\\\\\\\\\\\\\\" role=\\\\\\\\\\\\\\\"presentation\\\\\\\\\\\\\\\">\\\\\\\\n        <button\\\\\\\\n          className=\\\\\\\\\\\\\\\"nav-link\\\\\\\\\\\\\\\"\\\\\\\\n          id=\\\\\\\\\\\\\\\"preview-tab\\\\\\\\\\\\\\\"\\\\\\\\n          data-bs-toggle=\\\\\\\\\\\\\\\"tab\\\\\\\\\\\\\\\"\\\\\\\\n          data-bs-target=\\\\\\\\\\\\\\\"#preview\\\\\\\\\\\\\\\"\\\\\\\\n          type=\\\\\\\\\\\\\\\"button\\\\\\\\\\\\\\\"\\\\\\\\n          role=\\\\\\\\\\\\\\\"tab\\\\\\\\\\\\\\\"\\\\\\\\n          aria-controls=\\\\\\\\\\\\\\\"preview\\\\\\\\\\\\\\\"\\\\\\\\n          aria-selected=\\\\\\\\\\\\\\\"false\\\\\\\\\\\\\\\"\\\\\\\\n        >\\\\\\\\n          Preview\\\\\\\\n        </button>\\\\\\\\n      </li>\\\\\\\\n    </ul>\\\\\\\\n    <div className=\\\\\\\\\\\\\\\"tab-content\\\\\\\\\\\\\\\" id=\\\\\\\\\\\\\\\"editPreviewTabsContent\\\\\\\\\\\\\\\">\\\\\\\\n      <div\\\\\\\\n        className=\\\\\\\\\\\\\\\"tab-pane show active p-4\\\\\\\\\\\\\\\"\\\\\\\\n        id=\\\\\\\\\\\\\\\"edit\\\\\\\\\\\\\\\"\\\\\\\\n        role=\\\\\\\\\\\\\\\"tabpanel\\\\\\\\\\\\\\\"\\\\\\\\n        aria-labelledby=\\\\\\\\\\\\\\\"edit-tab\\\\\\\\\\\\\\\"\\\\\\\\n        style={{ position: \\\\\\\\\\\\\\\"relative\\\\\\\\\\\\\\\" }}\\\\\\\\n      >\\\\\\\\n        <div style={{ position: \\\\\\\\\\\\\\\"absolute\\\\\\\\\\\\\\\", top: 10, right: 0 }}>\\\\\\\\n          <Widget\\\\\\\\n            // LEGACY\\\\\\\\n            src=\\\\\\\\\\\\\\\"devhub.near/widget/gigs-board.components.molecule.button-switch\\\\\\\\\\\\\\\"\\\\\\\\n            props={{\\\\\\\\n              currentValue: textAlign,\\\\\\\\n              key: \\\\\\\\\\\\\\\"textAlign\\\\\\\\\\\\\\\",\\\\\\\\n              onChange: (e) => setTextAlign(e.target.value),\\\\\\\\n              options: [\\\\\\\\n                { label: \\\\\\\\\\\\\\\"Left\\\\\\\\\\\\\\\", value: \\\\\\\\\\\\\\\"left\\\\\\\\\\\\\\\" },\\\\\\\\n                { label: \\\\\\\\\\\\\\\"Center\\\\\\\\\\\\\\\", value: \\\\\\\\\\\\\\\"center\\\\\\\\\\\\\\\" },\\\\\\\\n                { label: \\\\\\\\\\\\\\\"Right\\\\\\\\\\\\\\\", value: \\\\\\\\\\\\\\\"right\\\\\\\\\\\\\\\" },\\\\\\\\n              ],\\\\\\\\n            }}\\\\\\\\n          />\\\\\\\\n        </div>\\\\\\\\n        <FormContainer>\\\\\\\\n          <div className=\\\\\\\\\\\\\\\"flex-grow-1\\\\\\\\\\\\\\\">\\\\\\\\n            <Widget\\\\\\\\n              src=\\\\\\\\\\\\\\\"devhub.near/widget/devhub.components.molecule.Input\\\\\\\\\\\\\\\"\\\\\\\\n              props={{\\\\\\\\n                label: \\\\\\\\\\\\\\\"Title\\\\\\\\\\\\\\\",\\\\\\\\n                className: \\\\\\\\\\\\\\\"flex-grow-1\\\\\\\\\\\\\\\",\\\\\\\\n                onChange: (e) => setTitle(e.target.value),\\\\\\\\n                value: title,\\\\\\\\n                inputProps: {\\\\\\\\n                  min: 2,\\\\\\\\n                  max: 60,\\\\\\\\n                  required: true,\\\\\\\\n                },\\\\\\\\n              }}\\\\\\\\n            />\\\\\\\\n          </div>\\\\\\\\n          <div className=\\\\\\\\\\\\\\\"flex-grow-1\\\\\\\\\\\\\\\">\\\\\\\\n            <Widget\\\\\\\\n              src=\\\\\\\\\\\\\\\"devhub.near/widget/devhub.components.molecule.Input\\\\\\\\\\\\\\\"\\\\\\\\n              props={{\\\\\\\\n                label: \\\\\\\\\\\\\\\"Subtitle\\\\\\\\\\\\\\\",\\\\\\\\n                className: \\\\\\\\\\\\\\\"flex-grow-1\\\\\\\\\\\\\\\",\\\\\\\\n                onChange: (e) => setSubtitle(e.target.value),\\\\\\\\n                value: subtitle,\\\\\\\\n                inputProps: {\\\\\\\\n                  min: 2,\\\\\\\\n                  max: 250,\\\\\\\\n                },\\\\\\\\n              }}\\\\\\\\n            />\\\\\\\\n          </div>\\\\\\\\n          <Widget\\\\\\\\n            src=\\\\\\\\\\\\\\\"devhub.near/widget/devhub.components.molecule.MarkdownEditor\\\\\\\\\\\\\\\"\\\\\\\\n            props={{ data: { content }, onChange: setContent }}\\\\\\\\n          />\\\\\\\\n        </FormContainer>\\\\\\\\n        <div\\\\\\\\n          className={\\\\\\\\\\\\\\\"d-flex align-items-center justify-content-end gap-3 mt-4\\\\\\\\\\\\\\\"}\\\\\\\\n        >\\\\\\\\n          <Widget\\\\\\\\n            src={\\\\\\\\\\\\\\\"devhub.near/widget/devhub.components.molecule.Button\\\\\\\\\\\\\\\"}\\\\\\\\n            props={{\\\\\\\\n              classNames: { root: \\\\\\\\\\\\\\\"btn-success\\\\\\\\\\\\\\\" },\\\\\\\\n              disabled: !hasDataChanged() || !title || !content,\\\\\\\\n              icon: {\\\\\\\\n                type: \\\\\\\\\\\\\\\"bootstrap_icon\\\\\\\\\\\\\\\",\\\\\\\\n                variant: \\\\\\\\\\\\\\\"bi-check-circle-fill\\\\\\\\\\\\\\\",\\\\\\\\n              },\\\\\\\\n              label: \\\\\\\\\\\\\\\"Publish\\\\\\\\\\\\\\\",\\\\\\\\n              onClick: handleSubmit,\\\\\\\\n            }}\\\\\\\\n          />\\\\\\\\n        </div>\\\\\\\\n      </div>\\\\\\\\n      <div\\\\\\\\n        className=\\\\\\\\\\\\\\\"tab-pane\\\\\\\\\\\\\\\"\\\\\\\\n        id=\\\\\\\\\\\\\\\"preview\\\\\\\\\\\\\\\"\\\\\\\\n        role=\\\\\\\\\\\\\\\"tabpanel\\\\\\\\\\\\\\\"\\\\\\\\n        aria-labelledby=\\\\\\\\\\\\\\\"preview-tab\\\\\\\\\\\\\\\"\\\\\\\\n      >\\\\\\\\n        <div className=\\\\\\\\\\\\\\\"w-100 h-100 p-4\\\\\\\\\\\\\\\">\\\\\\\\n          <Widget\\\\\\\\n            src=\\\\\\\\\\\\\\\"devhub.near/widget/devhub.entity.addon.wiki.Viewer\\\\\\\\\\\\\\\"\\\\\\\\n            props={{ title, subtitle, content, textAlign }}\\\\\\\\n          />\\\\\\\\n        </div>\\\\\\\\n      </div>\\\\\\\\n    </div>\\\\\\\\n  </Container>\\\\\\\\n);\\\\\\\\n\"}, \"devhub.components.molecule.ProfileCard\": {\"\": \"const MutedText = styled.span`\\\\\\\\n  color: #818181;\\\\\\\\n\\\\\\\\n  font-size: 16px;\\\\\\\\n  font-style: normal;\\\\\\\\n  font-weight: 400;\\\\\\\\n  line-height: 20px; /* 125% */\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst AccountName = styled.span`\\\\\\\\n  color: #818181;\\\\\\\\n  font-size: 16px;\\\\\\\\n  font-style: normal;\\\\\\\\n  font-weight: 500;\\\\\\\\n  line-height: 20px;\\\\\\\\n\\\\\\\\n  max-width: 30ch;\\\\\\\\n  overflow: hidden;\\\\\\\\n  text-overflow: ellipsis;\\\\\\\\n  white-space: nowrap;\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst ProfileCard = (props) => {\\\\\\\\n  const accountId = props.accountId ?? context.accountId;\\\\\\\\n  const link = props.link ?? true;\\\\\\\\n  // const hideAccountId = props.hideAccountId;\\\\\\\\n  // const hideName = props.hideName;\\\\\\\\n  const hideImage = props.hideImage;\\\\\\\\n  const iconOnly = props.iconOnly;\\\\\\\\n\\\\\\\\n  const profile = props.profile ?? Social.getr(`${accountId}/profile`);\\\\\\\\n\\\\\\\\n  const name = profile.name ?? accountId;\\\\\\\\n  const title = props.title ?? `${name} @${accountId}`;\\\\\\\\n  const tooltip =\\\\\\\\n    props.tooltip && (props.tooltip === true ? title : props.tooltip);\\\\\\\\n\\\\\\\\n  let inner = (\\\\\\\\n    <div className=\\\\\\\\\\\\\\\"d-flex flex-row justify-content-center align-items-center\\\\\\\\\\\\\\\">\\\\\\\\n      {!hideImage && (\\\\\\\\n        <Widget\\\\\\\\n          key=\\\\\\\\\\\\\\\"image\\\\\\\\\\\\\\\"\\\\\\\\n          src=\\\\\\\\\\\\\\\"mob.near/widget/ProfileImage\\\\\\\\\\\\\\\"\\\\\\\\n          props={{\\\\\\\\n            style: { width: \\\\\\\\\\\\\\\"2.5em\\\\\\\\\\\\\\\", height: \\\\\\\\\\\\\\\"2.5em\\\\\\\\\\\\\\\", marginRight: \\\\\\\\\\\\\\\"0.3em\\\\\\\\\\\\\\\" },\\\\\\\\n            profile,\\\\\\\\n            accountId,\\\\\\\\n            className: \\\\\\\\\\\\\\\"d-inline-block flex-shrink-0\\\\\\\\\\\\\\\",\\\\\\\\n            imageClassName: \\\\\\\\\\\\\\\"rounded-circle w-100 h-100 align-top\\\\\\\\\\\\\\\",\\\\\\\\n          }}\\\\\\\\n        />\\\\\\\\n      )}\\\\\\\\n      {!iconOnly && (\\\\\\\\n        <div className=\\\\\\\\\\\\\\\"d-flex flex-column gap-1\\\\\\\\\\\\\\\">\\\\\\\\n          <AccountName key=\\\\\\\\\\\\\\\"accountName\\\\\\\\\\\\\\\">{name}</AccountName>\\\\\\\\n          <AccountName key=\\\\\\\\\\\\\\\"accountId\\\\\\\\\\\\\\\">@{accountId}</AccountName>\\\\\\\\n        </div>\\\\\\\\n      )}\\\\\\\\n    </div>\\\\\\\\n  );\\\\\\\\n\\\\\\\\n  inner = link ? (\\\\\\\\n    <a\\\\\\\\n      href={\\\\\\\\n        link !== true\\\\\\\\n          ? link\\\\\\\\n          : `devhub.near/widget/ProfilePage?accountId=${accountId}`\\\\\\\\n      }\\\\\\\\n      className=\\\\\\\\\\\\\\\"link-dark text-truncate d-inline-flex\\\\\\\\\\\\\\\"\\\\\\\\n    >\\\\\\\\n      {inner}\\\\\\\\n    </a>\\\\\\\\n  ) : (\\\\\\\\n    <span className=\\\\\\\\\\\\\\\"text-truncate d-inline-flex\\\\\\\\\\\\\\\">{inner}</span>\\\\\\\\n  );\\\\\\\\n\\\\\\\\n  if (props.tooltip === true) {\\\\\\\\n    return (\\\\\\\\n      <Widget\\\\\\\\n        src=\\\\\\\\\\\\\\\"mob.near/widget/Profile.OverlayTrigger\\\\\\\\\\\\\\\"\\\\\\\\n        props={{ accountId, children: inner }}\\\\\\\\n      />\\\\\\\\n    );\\\\\\\\n  }\\\\\\\\n  if (tooltip) {\\\\\\\\n    inner = (\\\\\\\\n      <OverlayTrigger placement=\\\\\\\\\\\\\\\"auto\\\\\\\\\\\\\\\" overlay={<Tooltip>{tooltip}</Tooltip>}>\\\\\\\\n        {inner}\\\\\\\\n      </OverlayTrigger>\\\\\\\\n    );\\\\\\\\n  }\\\\\\\\n  return (\\\\\\\\n    <div className=\\\\\\\\\\\\\\\"d-flex flex-row align-items-center\\\\\\\\\\\\\\\">\\\\\\\\n      {inner}\\\\\\\\n      <Widget\\\\\\\\n        src=\\\\\\\\\\\\\\\"neardevgov.near/widget/BadgesList\\\\\\\\\\\\\\\"\\\\\\\\n        props={{\\\\\\\\n          accountId,\\\\\\\\n          mode: \\\\\\\\\\\\\\\"compact\\\\\\\\\\\\\\\",\\\\\\\\n        }}\\\\\\\\n      />\\\\\\\\n    </div>\\\\\\\\n  );\\\\\\\\n};\\\\\\\\n\\\\\\\\nreturn ProfileCard(props);\\\\\\\\n\"}, \"devhub.entity.addon.blog.editor.layout\": {\"\": \"const { Sidebar, Content, getData } = props;\\\\\\\\n\\\\\\\\nconst [selectedItem, setSelectedItem] = useState(null);\\\\\\\\n\\\\\\\\nconst handleItemClick = (item) => {\\\\\\\\n  if (item) {\\\\\\\\n    const data = getData(item);\\\\\\\\n    setSelectedItem(data);\\\\\\\\n  } else {\\\\\\\\n    setSelectedItem(null);\\\\\\\\n  }\\\\\\\\n};\\\\\\\\n\\\\\\\\nreturn (\\\\\\\\n  <div\\\\\\\\n    className=\\\\\\\\\\\\\\\"template\\\\\\\\\\\\\\\"\\\\\\\\n    style={{ display: \\\\\\\\\\\\\\\"flex\\\\\\\\\\\\\\\", width: \\\\\\\\\\\\\\\"100%\\\\\\\\\\\\\\\", height: \\\\\\\\\\\\\\\"100%\\\\\\\\\\\\\\\" }}\\\\\\\\n  >\\\\\\\\n    <div\\\\\\\\n      className=\\\\\\\\\\\\\\\"left-panel\\\\\\\\\\\\\\\"\\\\\\\\n      style={{\\\\\\\\n        margin: \\\\\\\\\\\\\\\"20px 20px 80px 20px\\\\\\\\\\\\\\\",\\\\\\\\n      }}\\\\\\\\n    >\\\\\\\\n      <Sidebar selectedItem={selectedItem} handleItemClick={handleItemClick} />\\\\\\\\n    </div>\\\\\\\\n    <div\\\\\\\\n      className=\\\\\\\\\\\\\\\"right-panel\\\\\\\\\\\\\\\"\\\\\\\\n      style={{ flex: 1, width: 0, overflow: \\\\\\\\\\\\\\\"scroll\\\\\\\\\\\\\\\" }}\\\\\\\\n      key={selectedItem.id}\\\\\\\\n    >\\\\\\\\n      <Content data={selectedItem} />\\\\\\\\n    </div>\\\\\\\\n  </div>\\\\\\\\n);\\\\\\\\n\"}, \"devhub.components.molecule.PostControls\": {\"\": \"const { className, title, icon, href, onClick } = props;\\\\\\\\n\\\\\\\\nconst Button = styled.button`\\\\\\\\n  display: flex;\\\\\\\\n  align-items: center;\\\\\\\\n  gap: 8px;\\\\\\\\n\\\\\\\\n  border-radius: 4px;\\\\\\\\n  background: #00ec97;\\\\\\\\n\\\\\\\\n  color: #f4f4f4;\\\\\\\\n  font-size: 16px;\\\\\\\\n  font-style: normal;\\\\\\\\n  font-weight: 700;\\\\\\\\n  line-height: 20px; /* 125% */\\\\\\\\n\\\\\\\\n  padding: 0.5rem 1rem;\\\\\\\\n\\\\\\\\n  &:hover {\\\\\\\\n    background: #04a46e;\\\\\\\\n    text-decoration: none !important;\\\\\\\\n  }\\\\\\\\n\\\\\\\\n  outline: none;\\\\\\\\n  border: none;\\\\\\\\n`;\\\\\\\\n\\\\\\\\nreturn (\\\\\\\\n  <div className={`d-flex flex-row-reverse ${props.className}`}>\\\\\\\\n    {props.href ? (\\\\\\\\n      <Link to={props.href} style={{ textDecoration: \\\\\\\\\\\\\\\"none\\\\\\\\\\\\\\\" }}>\\\\\\\\n        <Button>\\\\\\\\n          <i className={props.icon ? props.icon : \\\\\\\\\\\\\\\"bi bi-plus-circle-fill\\\\\\\\\\\\\\\"}></i>\\\\\\\\n          {props.title}\\\\\\\\n        </Button>\\\\\\\\n      </Link>\\\\\\\\n    ) : (\\\\\\\\n      <Button onClick={props.onClick}>\\\\\\\\n        <i className={props.icon ? props.icon : \\\\\\\\\\\\\\\"bi bi-plus-circle-fill\\\\\\\\\\\\\\\"}></i>\\\\\\\\n        {props.title || \\\\\\\\\\\\\\\"Post\\\\\\\\\\\\\\\"}\\\\\\\\n      </Button>\\\\\\\\n    )}\\\\\\\\n  </div>\\\\\\\\n);\\\\\\\\n\"}, \"devhub.components.organism.Configurator\": {\"\": \"const Struct = VM.require(\\\\\\\\\\\\\\\"devhub.near/widget/core.lib.struct\\\\\\\\\\\\\\\");\\\\\\\\n\\\\\\\\nif (!Struct) {\\\\\\\\n  return <p>Loading modules...</p>;\\\\\\\\n}\\\\\\\\n/* INCLUDE: \\\\\\\\\\\\\\\"core/lib/gui/form\\\\\\\\\\\\\\\" */\\\\\\\\nconst defaultFieldUpdate = ({\\\\\\\\n  input,\\\\\\\\n  lastKnownValue,\\\\\\\\n  params: { arrayDelimiter },\\\\\\\\n}) => {\\\\\\\\n  switch (typeof input) {\\\\\\\\n    case \\\\\\\\\\\\\\\"boolean\\\\\\\\\\\\\\\":\\\\\\\\n      return input;\\\\\\\\n\\\\\\\\n    case \\\\\\\\\\\\\\\"object\\\\\\\\\\\\\\\": {\\\\\\\\n      if (Array.isArray(input) && typeof lastKnownValue === \\\\\\\\\\\\\\\"string\\\\\\\\\\\\\\\") {\\\\\\\\n        return input.join(arrayDelimiter ?? \\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\");\\\\\\\\n      } else {\\\\\\\\n        return Array.isArray(lastKnownValue)\\\\\\\\n          ? [...lastKnownValue, ...input]\\\\\\\\n          : { ...lastKnownValue, ...input };\\\\\\\\n      }\\\\\\\\n    }\\\\\\\\n\\\\\\\\n    case \\\\\\\\\\\\\\\"string\\\\\\\\\\\\\\\":\\\\\\\\n      return Array.isArray(lastKnownValue)\\\\\\\\n        ? input.split(arrayDelimiter ?? \\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\").map((string) => string.trim())\\\\\\\\n        : input;\\\\\\\\n\\\\\\\\n    default: {\\\\\\\\n      if ((input ?? null) === null) {\\\\\\\\n        switch (typeof lastKnownValue) {\\\\\\\\n          case \\\\\\\\\\\\\\\"boolean\\\\\\\\\\\\\\\":\\\\\\\\n            return !lastKnownValue;\\\\\\\\n\\\\\\\\n          default:\\\\\\\\n            return lastKnownValue;\\\\\\\\n        }\\\\\\\\n      } else return input;\\\\\\\\n    }\\\\\\\\n  }\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst useForm = ({ initialValues, onUpdate, stateKey, uninitialized }) => {\\\\\\\\n  const initialFormState = {\\\\\\\\n    hasUnsubmittedChanges: false,\\\\\\\\n    values: initialValues ?? {},\\\\\\\\n  };\\\\\\\\n\\\\\\\\n  const formState = state[stateKey] ?? null,\\\\\\\\n    isSynced = Struct.isEqual(formState?.values ?? {}, initialFormState.values);\\\\\\\\n\\\\\\\\n  const formReset = () =>\\\\\\\\n    State.update((lastKnownComponentState) => ({\\\\\\\\n      ...lastKnownComponentState,\\\\\\\\n      [stateKey]: initialFormState,\\\\\\\\n      hasUnsubmittedChanges: false,\\\\\\\\n    }));\\\\\\\\n\\\\\\\\n  const formUpdate =\\\\\\\\n    ({ path, via: customFieldUpdate, ...params }) =>\\\\\\\\n    (fieldInput) => {\\\\\\\\n      const updatedValues = Struct.deepFieldUpdate(\\\\\\\\n        formState?.values ?? {},\\\\\\\\n\\\\\\\\n        {\\\\\\\\n          input: fieldInput?.target?.value ?? fieldInput,\\\\\\\\n          params,\\\\\\\\n          path,\\\\\\\\n\\\\\\\\n          via:\\\\\\\\n            typeof customFieldUpdate === \\\\\\\\\\\\\\\"function\\\\\\\\\\\\\\\"\\\\\\\\n              ? customFieldUpdate\\\\\\\\n              : defaultFieldUpdate,\\\\\\\\n        }\\\\\\\\n      );\\\\\\\\n\\\\\\\\n      State.update((lastKnownComponentState) => ({\\\\\\\\n        ...lastKnownComponentState,\\\\\\\\n\\\\\\\\n        [stateKey]: {\\\\\\\\n          hasUnsubmittedChanges: !Struct.isEqual(\\\\\\\\n            updatedValues,\\\\\\\\n            initialFormState.values\\\\\\\\n          ),\\\\\\\\n\\\\\\\\n          values: updatedValues,\\\\\\\\n        },\\\\\\\\n      }));\\\\\\\\n\\\\\\\\n      if (\\\\\\\\n        typeof onUpdate === \\\\\\\\\\\\\\\"function\\\\\\\\\\\\\\\" &&\\\\\\\\n        !Struct.isEqual(updatedValues, initialFormState.values)\\\\\\\\n      ) {\\\\\\\\n        onUpdate(updatedValues);\\\\\\\\n      }\\\\\\\\n    };\\\\\\\\n\\\\\\\\n  if (\\\\\\\\n    !uninitialized &&\\\\\\\\n    (formState === null || (!formState.hasUnsubmittedChanges && !isSynced))\\\\\\\\n  ) {\\\\\\\\n    formReset();\\\\\\\\n  }\\\\\\\\n\\\\\\\\n  return {\\\\\\\\n    ...(formState ?? initialFormState),\\\\\\\\n    isSynced,\\\\\\\\n    reset: formReset,\\\\\\\\n    stateKey,\\\\\\\\n    update: formUpdate,\\\\\\\\n  };\\\\\\\\n};\\\\\\\\n/* END_INCLUDE: \\\\\\\\\\\\\\\"core/lib/gui/form\\\\\\\\\\\\\\\" */\\\\\\\\n\\\\\\\\nconst ValueView = styled.div`\\\\\\\\n  & > p {\\\\\\\\n    margin: 0;\\\\\\\\n  }\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst fieldParamsByType = {\\\\\\\\n  array: {\\\\\\\\n    name: \\\\\\\\\\\\\\\"components.molecule.text-input\\\\\\\\\\\\\\\",\\\\\\\\n    inputProps: { type: \\\\\\\\\\\\\\\"text\\\\\\\\\\\\\\\" },\\\\\\\\n  },\\\\\\\\n\\\\\\\\n  boolean: {\\\\\\\\n    name: \\\\\\\\\\\\\\\"components.atom.toggle\\\\\\\\\\\\\\\",\\\\\\\\n  },\\\\\\\\n\\\\\\\\n  string: {\\\\\\\\n    name: \\\\\\\\\\\\\\\"components.molecule.text-input\\\\\\\\\\\\\\\",\\\\\\\\n    inputProps: { type: \\\\\\\\\\\\\\\"text\\\\\\\\\\\\\\\" },\\\\\\\\n  },\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst defaultFieldsRender = ({ schema, form, isEditable }) => (\\\\\\\\n  <>\\\\\\\\n    {Object.entries(schema).map(\\\\\\\\n      (\\\\\\\\n        [key, { format, inputProps, noop, label, order, style, ...fieldProps }],\\\\\\\\n        idx\\\\\\\\n      ) => {\\\\\\\\n        const fieldKey = `${idx}-${key}`,\\\\\\\\n          fieldValue = form.values[key];\\\\\\\\n\\\\\\\\n        const fieldType = Array.isArray(fieldValue)\\\\\\\\n          ? \\\\\\\\\\\\\\\"array\\\\\\\\\\\\\\\"\\\\\\\\n          : typeof (fieldValue ?? \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\");\\\\\\\\n\\\\\\\\n        const isDisabled = noop ?? inputProps.disabled ?? false;\\\\\\\\n\\\\\\\\n        const viewClassName = [\\\\\\\\n          (fieldValue?.length ?? 0) > 0 ? \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\" : \\\\\\\\\\\\\\\"text-muted\\\\\\\\\\\\\\\",\\\\\\\\n          \\\\\\\\\\\\\\\"m-0\\\\\\\\\\\\\\\",\\\\\\\\n        ].join(\\\\\\\\\\\\\\\" \\\\\\\\\\\\\\\");\\\\\\\\n\\\\\\\\n        return (\\\\\\\\n          <>\\\\\\\\n            <div\\\\\\\\n              className={[\\\\\\\\n                \\\\\\\\\\\\\\\"d-flex gap-3\\\\\\\\\\\\\\\",\\\\\\\\n                isEditable || noop ? \\\\\\\\\\\\\\\"d-none\\\\\\\\\\\\\\\" : \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\",\\\\\\\\n              ].join(\\\\\\\\\\\\\\\" \\\\\\\\\\\\\\\")}\\\\\\\\n              key={fieldKey}\\\\\\\\n              style={{ order }}\\\\\\\\n            >\\\\\\\\n              <label className=\\\\\\\\\\\\\\\"fw-bold w-25\\\\\\\\\\\\\\\">{label}</label>\\\\\\\\n\\\\\\\\n              <ValueView className={[viewClassName, \\\\\\\\\\\\\\\"w-75\\\\\\\\\\\\\\\"].join(\\\\\\\\\\\\\\\" \\\\\\\\\\\\\\\")}>\\\\\\\\n                {format !== \\\\\\\\\\\\\\\"markdown\\\\\\\\\\\\\\\" ? (\\\\\\\\n                  <span>\\\\\\\\n                    {(fieldType === \\\\\\\\\\\\\\\"array\\\\\\\\\\\\\\\" && format === \\\\\\\\\\\\\\\"comma-separated\\\\\\\\\\\\\\\"\\\\\\\\n                      ? fieldValue\\\\\\\\n                          .filter((string) => string.length > 0)\\\\\\\\n                          .join(\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\")\\\\\\\\n                      : fieldValue\\\\\\\\n                    )?.toString?.() || \\\\\\\\\\\\\\\"none\\\\\\\\\\\\\\\"}\\\\\\\\n                  </span>\\\\\\\\n                ) : (fieldValue?.length ?? 0) > 0 ? (\\\\\\\\n                  <Widget\\\\\\\\n                    // TODO: LEGACY.\\\\\\\\n                    src={\\\\\\\\n                      \\\\\\\\\\\\\\\"devhub.near/widget/devhub.components.molecule.MarkdownViewer\\\\\\\\\\\\\\\"\\\\\\\\n                    }\\\\\\\\n                    props={{\\\\\\\\n                      text: fieldValue,\\\\\\\\n                    }}\\\\\\\\n                  />\\\\\\\\n                ) : (\\\\\\\\n                  <span>none</span>\\\\\\\\n                )}\\\\\\\\n              </ValueView>\\\\\\\\n            </div>\\\\\\\\n            <Widget\\\\\\\\n              // TODO: LEGACY.\\\\\\\\n              src={`devhub.near/widget/gigs-board.${fieldParamsByType[fieldType].name}`}\\\\\\\\n              props={{\\\\\\\\n                ...fieldProps,\\\\\\\\n\\\\\\\\n                className: [\\\\\\\\n                  \\\\\\\\\\\\\\\"w-100\\\\\\\\\\\\\\\",\\\\\\\\n                  fieldProps.className ?? \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\",\\\\\\\\n                  isEditable && !noop ? \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\" : \\\\\\\\\\\\\\\"d-none\\\\\\\\\\\\\\\",\\\\\\\\n                ].join(\\\\\\\\\\\\\\\" \\\\\\\\\\\\\\\"),\\\\\\\\n\\\\\\\\n                disabled: isDisabled,\\\\\\\\n                format,\\\\\\\\n                key: `${fieldKey}--editable`,\\\\\\\\n                label,\\\\\\\\n                onChange: form.update({ path: [key] }),\\\\\\\\n                style: { ...style, order },\\\\\\\\n\\\\\\\\n                value:\\\\\\\\n                  fieldType === \\\\\\\\\\\\\\\"array\\\\\\\\\\\\\\\" && format === \\\\\\\\\\\\\\\"comma-separated\\\\\\\\\\\\\\\"\\\\\\\\n                    ? fieldValue.join(\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\")\\\\\\\\n                    : fieldValue,\\\\\\\\n\\\\\\\\n                inputProps: {\\\\\\\\n                  ...(inputProps ?? {}),\\\\\\\\n                  disabled: isDisabled,\\\\\\\\n\\\\\\\\n                  title:\\\\\\\\n                    noop ?? false\\\\\\\\n                      ? \\\\\\\\\\\\\\\"Temporarily disabled due to technical reasons.\\\\\\\\\\\\\\\"\\\\\\\\n                      : inputProps.title,\\\\\\\\n\\\\\\\\n                  ...(fieldParamsByType[fieldType].inputProps ?? {}),\\\\\\\\n                  tabIndex: order,\\\\\\\\n                },\\\\\\\\n              }}\\\\\\\\n            />\\\\\\\\n          </>\\\\\\\\n        );\\\\\\\\n      }\\\\\\\\n    )}\\\\\\\\n  </>\\\\\\\\n);\\\\\\\\n\\\\\\\\nconst Configurator = ({\\\\\\\\n  actionsAdditional,\\\\\\\\n  cancelLabel,\\\\\\\\n  classNames,\\\\\\\\n  externalState,\\\\\\\\n  fieldsRender: customFieldsRender,\\\\\\\\n  formatter: toFormatted,\\\\\\\\n  isValid,\\\\\\\\n  isActive,\\\\\\\\n  onCancel,\\\\\\\\n  onChange,\\\\\\\\n  onSubmit,\\\\\\\\n  schema,\\\\\\\\n  submitIcon,\\\\\\\\n  submitLabel,\\\\\\\\n}) => {\\\\\\\\n  const fieldsRender = customFieldsRender || defaultFieldsRender;\\\\\\\\n\\\\\\\\n  const initialValues = Struct.typeMatch(schema)\\\\\\\\n    ? Struct.pick(externalState ?? {}, Object.keys(schema))\\\\\\\\n    : {};\\\\\\\\n\\\\\\\\n  const form = useForm({ initialValues, onUpdate: onChange, stateKey: \\\\\\\\\\\\\\\"form\\\\\\\\\\\\\\\" });\\\\\\\\n\\\\\\\\n  const formFormattedValues = toFormatted\\\\\\\\n    ? toFormatted(form.values)\\\\\\\\n    : form.values;\\\\\\\\n\\\\\\\\n  const isFormValid = isValid ? isValid(formFormattedValues) : true;\\\\\\\\n\\\\\\\\n  const onCancelClick = () => {\\\\\\\\n    form.reset();\\\\\\\\n    if (onCancel) onCancel();\\\\\\\\n  };\\\\\\\\n\\\\\\\\n  const onSubmitClick = () => {\\\\\\\\n    if (onSubmit && isFormValid) {\\\\\\\\n      onSubmit(formFormattedValues);\\\\\\\\n    }\\\\\\\\n  };\\\\\\\\n\\\\\\\\n  return (\\\\\\\\n    <div className=\\\\\\\\\\\\\\\"flex-grow-1 d-flex flex-column gap-4\\\\\\\\\\\\\\\">\\\\\\\\n      <div className={`d-flex flex-column gap-${isActive ? 1 : 4}`}>\\\\\\\\n        {fieldsRender({\\\\\\\\n          form,\\\\\\\\n          isEditable: isActive,\\\\\\\\n          schema,\\\\\\\\n        })}\\\\\\\\n      </div>\\\\\\\\n      {isActive && (\\\\\\\\n        <div className=\\\\\\\\\\\\\\\"d-flex align-items-center justify-content-end gap-3 mt-auto\\\\\\\\\\\\\\\">\\\\\\\\n          {actionsAdditional ? (\\\\\\\\n            <div className=\\\\\\\\\\\\\\\"me-auto\\\\\\\\\\\\\\\">{actionsAdditional}</div>\\\\\\\\n          ) : null}\\\\\\\\n\\\\\\\\n          <Widget\\\\\\\\n            src={\\\\\\\\\\\\\\\"devhub.near/widget/devhub.components.molecule.Button\\\\\\\\\\\\\\\"}\\\\\\\\n            props={{\\\\\\\\n              classNames: { root: \\\\\\\\\\\\\\\"btn-outline-danger shadow-none border-0\\\\\\\\\\\\\\\" },\\\\\\\\n              label: cancelLabel || \\\\\\\\\\\\\\\"Cancel\\\\\\\\\\\\\\\",\\\\\\\\n              onClick: onCancelClick,\\\\\\\\n            }}\\\\\\\\n          />\\\\\\\\n          <Widget\\\\\\\\n            src={\\\\\\\\\\\\\\\"devhub.near/widget/devhub.components.molecule.Button\\\\\\\\\\\\\\\"}\\\\\\\\n            props={{\\\\\\\\n              classNames: { root: classNames.submit || \\\\\\\\\\\\\\\"btn-success\\\\\\\\\\\\\\\" },\\\\\\\\n              disabled: !form.hasUnsubmittedChanges || !isFormValid,\\\\\\\\n              icon: submitIcon || {\\\\\\\\n                type: \\\\\\\\\\\\\\\"bootstrap_icon\\\\\\\\\\\\\\\",\\\\\\\\n                variant: \\\\\\\\\\\\\\\"bi-check-circle-fill\\\\\\\\\\\\\\\",\\\\\\\\n              },\\\\\\\\n              label: submitLabel || \\\\\\\\\\\\\\\"Submit\\\\\\\\\\\\\\\",\\\\\\\\n              onClick: onSubmitClick,\\\\\\\\n            }}\\\\\\\\n          />\\\\\\\\n        </div>\\\\\\\\n      )}\\\\\\\\n    </div>\\\\\\\\n  );\\\\\\\\n};\\\\\\\\n\\\\\\\\nreturn Configurator(props);\\\\\\\\n\"}, \"devhub.entity.addon.blog.editor.content\": {\"\": \"const { Card } =\\\\\\\\n  VM.require(\\\\\\\\\\\\\\\"devhub.near/widget/devhub.entity.addon.blog.Card\\\\\\\\\\\\\\\") ||\\\\\\\\n  (() => <></>);\\\\\\\\nconst { Page } =\\\\\\\\n  VM.require(\\\\\\\\\\\\\\\"devhub.near/widget/devhub.entity.addon.blog.Page\\\\\\\\\\\\\\\") ||\\\\\\\\n  (() => <></>);\\\\\\\\n\\\\\\\\nconst categories = [\\\\\\\\n  {\\\\\\\\n    label: \\\\\\\\\\\\\\\"Guide\\\\\\\\\\\\\\\",\\\\\\\\n    value: \\\\\\\\\\\\\\\"guide\\\\\\\\\\\\\\\",\\\\\\\\n  },\\\\\\\\n  {\\\\\\\\n    label: \\\\\\\\\\\\\\\"News\\\\\\\\\\\\\\\",\\\\\\\\n    value: \\\\\\\\\\\\\\\"news\\\\\\\\\\\\\\\",\\\\\\\\n  },\\\\\\\\n  {\\\\\\\\n    label: \\\\\\\\\\\\\\\"Reference\\\\\\\\\\\\\\\",\\\\\\\\n    value: \\\\\\\\\\\\\\\"reference\\\\\\\\\\\\\\\",\\\\\\\\n  },\\\\\\\\n];\\\\\\\\n\\\\\\\\nconst selectOptions = useMemo(\\\\\\\\n  () =>\\\\\\\\n    categories.map((it) => ({\\\\\\\\n      label: it.label,\\\\\\\\n      value: it.value,\\\\\\\\n    })),\\\\\\\\n  [categories]\\\\\\\\n);\\\\\\\\n\\\\\\\\nconst Banner = styled.div`\\\\\\\\n  border-radius: var(--bs-border-radius-xl) !important;\\\\\\\\n  height: 100%;\\\\\\\\n\\\\\\\\n  & > div :not(.btn) {\\\\\\\\n    position: absolute;\\\\\\\\n    display: none;\\\\\\\\n    margin: 0 !important;\\\\\\\\n    width: 0 !important;\\\\\\\\n    height: 0 !important;\\\\\\\\n  }\\\\\\\\n\\\\\\\\n  .btn {\\\\\\\\n    padding: 0.5rem 0.75rem !important;\\\\\\\\n    min-height: 32;\\\\\\\\n    line-height: 1;\\\\\\\\n\\\\\\\\n    border: none;\\\\\\\\n    border-radius: 50px;\\\\\\\\n    --bs-btn-color: #ffffff;\\\\\\\\n    --bs-btn-bg: #087990;\\\\\\\\n    --bs-btn-border-color: #087990;\\\\\\\\n    --bs-btn-hover-color: #ffffff;\\\\\\\\n    --bs-btn-hover-bg: #055160;\\\\\\\\n    --bs-btn-hover-border-color: #055160;\\\\\\\\n    --bs-btn-focus-shadow-rgb: 49, 132, 253;\\\\\\\\n    --bs-btn-active-color: #ffffff;\\\\\\\\n    --bs-btn-active-bg: #055160;\\\\\\\\n    --bs-btn-active-border-color: #055160;\\\\\\\\n    --bs-btn-active-shadow: inset 0 3px 5px rgba(0, 0, 0, 0.125);\\\\\\\\n    opacity: 0.8;\\\\\\\\n\\\\\\\\n    &:hover {\\\\\\\\n      opacity: 1;\\\\\\\\n    }\\\\\\\\n  }\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst { data, handle, onSubmit } = props;\\\\\\\\n\\\\\\\\nconst initialData = data;\\\\\\\\n\\\\\\\\nconst [content, setContent] = useState(initialData.content || \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\");\\\\\\\\nconst [title, setTitle] = useState(initialData.title || \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\");\\\\\\\\nconst [subtitle, setSubtitle] = useState(initialData.subtitle || \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\");\\\\\\\\nconst [description, setDescription] = useState(initialData.description || \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\");\\\\\\\\nconst [author, setAuthor] = useState(initialData.author || \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\");\\\\\\\\nconst [previewMode, setPreviewMode] = useState(\\\\\\\\\\\\\\\"card\\\\\\\\\\\\\\\"); // \\\\\\\\\\\\\\\"card\\\\\\\\\\\\\\\" or \\\\\\\\\\\\\\\"page\\\\\\\\\\\\\\\"\\\\\\\\nconst [date, setDate] = useState(initialData.date || new Date());\\\\\\\\nconst [category, setCategory] = useState(\\\\\\\\\\\\\\\"guide\\\\\\\\\\\\\\\");\\\\\\\\n\\\\\\\\nconst Container = styled.div`\\\\\\\\n  width: 100%;\\\\\\\\n  margin: 0 auto;\\\\\\\\n  padding: 20px;\\\\\\\\n  text-align: left;\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst hasDataChanged = () => {\\\\\\\\n  return (\\\\\\\\n    content !== initialData.content ||\\\\\\\\n    title !== initialData.title ||\\\\\\\\n    author !== initialData.author ||\\\\\\\\n    subtitle !== initialData.subtitle ||\\\\\\\\n    description !== initialData.description ||\\\\\\\\n    date !== initialData.date ||\\\\\\\\n    category !== initialData.category\\\\\\\\n  );\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst handlePublish = () => {\\\\\\\\n  onSubmit &&\\\\\\\\n    onSubmit(\\\\\\\\n      {\\\\\\\\n        id: data.id || undefined,\\\\\\\\n        title,\\\\\\\\n        subtitle,\\\\\\\\n        description,\\\\\\\\n        date,\\\\\\\\n        content,\\\\\\\\n        author,\\\\\\\\n        category,\\\\\\\\n        community: handle,\\\\\\\\n      },\\\\\\\\n      data.id !== undefined\\\\\\\\n    );\\\\\\\\n};\\\\\\\\n\\\\\\\\nfunction Preview() {\\\\\\\\n  switch (previewMode) {\\\\\\\\n    case \\\\\\\\\\\\\\\"card\\\\\\\\\\\\\\\": {\\\\\\\\n      return (\\\\\\\\n        <Card\\\\\\\\n          data={{\\\\\\\\n            title,\\\\\\\\n            subtitle,\\\\\\\\n            description,\\\\\\\\n            date,\\\\\\\\n            content,\\\\\\\\n            author,\\\\\\\\n            category,\\\\\\\\n            community: handle,\\\\\\\\n          }}\\\\\\\\n        />\\\\\\\\n      );\\\\\\\\n    }\\\\\\\\n    case \\\\\\\\\\\\\\\"page\\\\\\\\\\\\\\\": {\\\\\\\\n      return (\\\\\\\\n        <Page\\\\\\\\n          data={{\\\\\\\\n            title,\\\\\\\\n            subtitle,\\\\\\\\n            description,\\\\\\\\n            date,\\\\\\\\n            content,\\\\\\\\n            author,\\\\\\\\n            category,\\\\\\\\n            community: handle,\\\\\\\\n          }}\\\\\\\\n        />\\\\\\\\n      );\\\\\\\\n    }\\\\\\\\n  }\\\\\\\\n}\\\\\\\\n\\\\\\\\nreturn (\\\\\\\\n  <Container>\\\\\\\\n    <ul className=\\\\\\\\\\\\\\\"nav nav-tabs\\\\\\\\\\\\\\\" id=\\\\\\\\\\\\\\\"editPreviewTabs\\\\\\\\\\\\\\\" role=\\\\\\\\\\\\\\\"tablist\\\\\\\\\\\\\\\">\\\\\\\\n      <li className=\\\\\\\\\\\\\\\"nav-item\\\\\\\\\\\\\\\" role=\\\\\\\\\\\\\\\"presentation\\\\\\\\\\\\\\\">\\\\\\\\n        <button\\\\\\\\n          className=\\\\\\\\\\\\\\\"nav-link active\\\\\\\\\\\\\\\"\\\\\\\\n          id=\\\\\\\\\\\\\\\"edit-tab\\\\\\\\\\\\\\\"\\\\\\\\n          data-bs-toggle=\\\\\\\\\\\\\\\"tab\\\\\\\\\\\\\\\"\\\\\\\\n          data-bs-target=\\\\\\\\\\\\\\\"#edit\\\\\\\\\\\\\\\"\\\\\\\\n          type=\\\\\\\\\\\\\\\"button\\\\\\\\\\\\\\\"\\\\\\\\n          role=\\\\\\\\\\\\\\\"tab\\\\\\\\\\\\\\\"\\\\\\\\n          aria-controls=\\\\\\\\\\\\\\\"edit\\\\\\\\\\\\\\\"\\\\\\\\n          aria-selected=\\\\\\\\\\\\\\\"true\\\\\\\\\\\\\\\"\\\\\\\\n        >\\\\\\\\n          Edit\\\\\\\\n        </button>\\\\\\\\n      </li>\\\\\\\\n      <li className=\\\\\\\\\\\\\\\"nav-item\\\\\\\\\\\\\\\" role=\\\\\\\\\\\\\\\"presentation\\\\\\\\\\\\\\\">\\\\\\\\n        <button\\\\\\\\n          className=\\\\\\\\\\\\\\\"nav-link\\\\\\\\\\\\\\\"\\\\\\\\n          id=\\\\\\\\\\\\\\\"preview-tab\\\\\\\\\\\\\\\"\\\\\\\\n          data-bs-toggle=\\\\\\\\\\\\\\\"tab\\\\\\\\\\\\\\\"\\\\\\\\n          data-bs-target=\\\\\\\\\\\\\\\"#preview\\\\\\\\\\\\\\\"\\\\\\\\n          type=\\\\\\\\\\\\\\\"button\\\\\\\\\\\\\\\"\\\\\\\\n          role=\\\\\\\\\\\\\\\"tab\\\\\\\\\\\\\\\"\\\\\\\\n          aria-controls=\\\\\\\\\\\\\\\"preview\\\\\\\\\\\\\\\"\\\\\\\\n          aria-selected=\\\\\\\\\\\\\\\"false\\\\\\\\\\\\\\\"\\\\\\\\n        >\\\\\\\\n          Preview\\\\\\\\n        </button>\\\\\\\\n      </li>\\\\\\\\n    </ul>\\\\\\\\n    <div className=\\\\\\\\\\\\\\\"tab-content\\\\\\\\\\\\\\\" id=\\\\\\\\\\\\\\\"editPreviewTabsContent\\\\\\\\\\\\\\\">\\\\\\\\n      <div\\\\\\\\n        className=\\\\\\\\\\\\\\\"tab-pane show active p-4\\\\\\\\\\\\\\\"\\\\\\\\n        id=\\\\\\\\\\\\\\\"edit\\\\\\\\\\\\\\\"\\\\\\\\n        role=\\\\\\\\\\\\\\\"tabpanel\\\\\\\\\\\\\\\"\\\\\\\\n        aria-labelledby=\\\\\\\\\\\\\\\"edit-tab\\\\\\\\\\\\\\\"\\\\\\\\n      >\\\\\\\\n        <Widget\\\\\\\\n          src=\\\\\\\\\\\\\\\"devhub.near/widget/devhub.entity.addon.blog.editor.form\\\\\\\\\\\\\\\"\\\\\\\\n          props={{\\\\\\\\n            title,\\\\\\\\n            setTitle,\\\\\\\\n            subtitle,\\\\\\\\n            setSubtitle,\\\\\\\\n            options: selectOptions,\\\\\\\\n            category,\\\\\\\\n            setCategory,\\\\\\\\n            description,\\\\\\\\n            setDescription,\\\\\\\\n            author,\\\\\\\\n            setAuthor,\\\\\\\\n            date,\\\\\\\\n            setDate,\\\\\\\\n            content,\\\\\\\\n            setContent,\\\\\\\\n          }}\\\\\\\\n        />\\\\\\\\n        <div\\\\\\\\n          className={\\\\\\\\\\\\\\\"d-flex align-items-center justify-content-end gap-3 mt-4\\\\\\\\\\\\\\\"}\\\\\\\\n        >\\\\\\\\n          <Widget\\\\\\\\n            src={\\\\\\\\\\\\\\\"devhub.near/widget/devhub.components.molecule.Button\\\\\\\\\\\\\\\"}\\\\\\\\n            props={{\\\\\\\\n              classNames: { root: \\\\\\\\\\\\\\\"btn-success\\\\\\\\\\\\\\\" },\\\\\\\\n              disabled: !hasDataChanged(),\\\\\\\\n              icon: {\\\\\\\\n                type: \\\\\\\\\\\\\\\"bootstrap_icon\\\\\\\\\\\\\\\",\\\\\\\\n                variant: \\\\\\\\\\\\\\\"bi-check-circle-fill\\\\\\\\\\\\\\\",\\\\\\\\n              },\\\\\\\\n              label: \\\\\\\\\\\\\\\"Publish\\\\\\\\\\\\\\\",\\\\\\\\n              onClick: handlePublish,\\\\\\\\n            }}\\\\\\\\n          />\\\\\\\\n        </div>\\\\\\\\n      </div>\\\\\\\\n      <div\\\\\\\\n        className=\\\\\\\\\\\\\\\"tab-pane\\\\\\\\\\\\\\\"\\\\\\\\n        id=\\\\\\\\\\\\\\\"preview\\\\\\\\\\\\\\\"\\\\\\\\n        role=\\\\\\\\\\\\\\\"tabpanel\\\\\\\\\\\\\\\"\\\\\\\\n        aria-labelledby=\\\\\\\\\\\\\\\"preview-tab\\\\\\\\\\\\\\\"\\\\\\\\n        style={{ position: \\\\\\\\\\\\\\\"relative\\\\\\\\\\\\\\\" }}\\\\\\\\n      >\\\\\\\\n        <div style={{ position: \\\\\\\\\\\\\\\"absolute\\\\\\\\\\\\\\\", top: 10, right: 0 }}>\\\\\\\\n          <Widget\\\\\\\\n            // LEGACY\\\\\\\\n            src=\\\\\\\\\\\\\\\"devhub.near/widget/gigs-board.components.molecule.button-switch\\\\\\\\\\\\\\\"\\\\\\\\n            props={{\\\\\\\\n              currentValue: previewMode,\\\\\\\\n              key: \\\\\\\\\\\\\\\"previewMode\\\\\\\\\\\\\\\",\\\\\\\\n              onChange: (e) => setPreviewMode(e.target.value),\\\\\\\\n              options: [\\\\\\\\n                { label: \\\\\\\\\\\\\\\"Card\\\\\\\\\\\\\\\", value: \\\\\\\\\\\\\\\"card\\\\\\\\\\\\\\\" },\\\\\\\\n                { label: \\\\\\\\\\\\\\\"Page\\\\\\\\\\\\\\\", value: \\\\\\\\\\\\\\\"page\\\\\\\\\\\\\\\" },\\\\\\\\n              ],\\\\\\\\n\\\\\\\\n              title: \\\\\\\\\\\\\\\"Preview mode selection\\\\\\\\\\\\\\\",\\\\\\\\n            }}\\\\\\\\n          />\\\\\\\\n        </div>\\\\\\\\n        <div className=\\\\\\\\\\\\\\\"w-100 h-100 p-4\\\\\\\\\\\\\\\">\\\\\\\\n          <Preview />\\\\\\\\n        </div>\\\\\\\\n      </div>\\\\\\\\n    </div>\\\\\\\\n  </Container>\\\\\\\\n);\\\\\\\\n\"}, \"devhub.entity.addon.blog.editor.preview\": {\"\": \"return (\\\\\\\\n  <div>\\\\\\\\n    <h1>Preview</h1>\\\\\\\\n    <p>{JSON.stringify(props)}</p>\\\\\\\\n  </div>\\\\\\\\n);\\\\\\\\n\"}, \"devhub.entity.addon.blog.editor.sidebar\": {\"\": \"const { items, handleItemClick, selectedItem } = props;\\\\\\\\n\\\\\\\\nconst SidebarContainer = styled.div`\\\\\\\\n  background-color: #f0f0f0;\\\\\\\\n  padding: 16px;\\\\\\\\n  width: 200px;\\\\\\\\n  display: flex;\\\\\\\\n  flex-direction: column;\\\\\\\\n  align-items: center;\\\\\\\\n  height: 100%;\\\\\\\\n  gap: 4px;\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst SidebarButton = styled.button`\\\\\\\\n  display: flex;\\\\\\\\n  padding: 14px 16px;\\\\\\\\n  text-align: center;\\\\\\\\n  cursor: pointer;\\\\\\\\n  gap: 16px;\\\\\\\\n  width: 100%;\\\\\\\\n\\\\\\\\n  border-radius: 4px;\\\\\\\\n  border: 1px solid #00ec97;\\\\\\\\n\\\\\\\\n  background-color: ${({ selected }) => (selected ? \\\\\\\\\\\\\\\"#00ec97\\\\\\\\\\\\\\\" : \\\\\\\\\\\\\\\"white\\\\\\\\\\\\\\\")};\\\\\\\\n  color: ${({ selected }) => (selected ? \\\\\\\\\\\\\\\"white\\\\\\\\\\\\\\\" : \\\\\\\\\\\\\\\"black\\\\\\\\\\\\\\\")};\\\\\\\\n`;\\\\\\\\n\\\\\\\\nreturn (\\\\\\\\n  <SidebarContainer id=\\\\\\\\\\\\\\\"edit-blog-sidebar\\\\\\\\\\\\\\\">\\\\\\\\n    <p>Blog posts</p>\\\\\\\\n    <SidebarButton onClick={() => handleItemClick(null)} id=\\\\\\\\\\\\\\\"create-new-blog\\\\\\\\\\\\\\\">\\\\\\\\n      New\\\\\\\\n    </SidebarButton>\\\\\\\\n    {(items || []).map((it) => (\\\\\\\\n      <SidebarButton\\\\\\\\n        id={`edit-blog-selector-${it.post_id}`}\\\\\\\\n        key={it.post_id}\\\\\\\\n        selected={selectedItem.id === it.post_id}\\\\\\\\n        onClick={() => handleItemClick(it.post_id)}\\\\\\\\n      >\\\\\\\\n        {it.post_id}\\\\\\\\n      </SidebarButton>\\\\\\\\n    ))}\\\\\\\\n  </SidebarContainer>\\\\\\\\n);\\\\\\\\n\"}, \"devhub.entity.addon.github.Configurator\": {\"\": \"// THIS IS A WORK IN PROGRESS.\\\\\\\\n// The code for the configurator and viewer is very intertwined\\\\\\\\n// and there is constant \\\\\\\\\\\\\\\"negative affirmative\\\\\\\\\\\\\\\" prop drilling happening, making it hard to follow\\\\\\\\nconst { data, onSubmit, permissions } = props;\\\\\\\\n\\\\\\\\nconst Struct = VM.require(\\\\\\\\\\\\\\\"devhub.near/widget/core.lib.struct\\\\\\\\\\\\\\\");\\\\\\\\n\\\\\\\\nif (!Struct) {\\\\\\\\n  return <p>Loading modules...</p>;\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst defaultFieldUpdate = ({\\\\\\\\n  input,\\\\\\\\n  lastKnownValue,\\\\\\\\n  params: { arrayDelimiter },\\\\\\\\n}) => {\\\\\\\\n  switch (typeof input) {\\\\\\\\n    case \\\\\\\\\\\\\\\"boolean\\\\\\\\\\\\\\\":\\\\\\\\n      return input;\\\\\\\\n\\\\\\\\n    case \\\\\\\\\\\\\\\"object\\\\\\\\\\\\\\\": {\\\\\\\\n      if (Array.isArray(input) && typeof lastKnownValue === \\\\\\\\\\\\\\\"string\\\\\\\\\\\\\\\") {\\\\\\\\n        return input.join(arrayDelimiter ?? \\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\");\\\\\\\\n      } else {\\\\\\\\n        return Array.isArray(lastKnownValue)\\\\\\\\n          ? [...lastKnownValue, ...input]\\\\\\\\n          : { ...lastKnownValue, ...input };\\\\\\\\n      }\\\\\\\\n    }\\\\\\\\n\\\\\\\\n    case \\\\\\\\\\\\\\\"string\\\\\\\\\\\\\\\":\\\\\\\\n      return Array.isArray(lastKnownValue)\\\\\\\\n        ? input.split(arrayDelimiter ?? \\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\").map((string) => string.trim())\\\\\\\\n        : input;\\\\\\\\n\\\\\\\\n    default: {\\\\\\\\n      if ((input ?? null) === null) {\\\\\\\\n        switch (typeof lastKnownValue) {\\\\\\\\n          case \\\\\\\\\\\\\\\"boolean\\\\\\\\\\\\\\\":\\\\\\\\n            return !lastKnownValue;\\\\\\\\n\\\\\\\\n          default:\\\\\\\\n            return lastKnownValue;\\\\\\\\n        }\\\\\\\\n      } else return input;\\\\\\\\n    }\\\\\\\\n  }\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst useForm = ({ initialValues, onUpdate, stateKey, uninitialized }) => {\\\\\\\\n  const initialFormState = {\\\\\\\\n    hasUnsubmittedChanges: false,\\\\\\\\n    values: initialValues ?? {},\\\\\\\\n  };\\\\\\\\n\\\\\\\\n  const formState = state[stateKey] ?? null,\\\\\\\\n    isSynced = Struct.isEqual(formState?.values ?? {}, initialFormState.values);\\\\\\\\n\\\\\\\\n  const formReset = () =>\\\\\\\\n    State.update((lastKnownComponentState) => ({\\\\\\\\n      ...lastKnownComponentState,\\\\\\\\n      [stateKey]: initialFormState,\\\\\\\\n      hasUnsubmittedChanges: false,\\\\\\\\n    }));\\\\\\\\n\\\\\\\\n  const formUpdate =\\\\\\\\n    ({ path, via: customFieldUpdate, ...params }) =>\\\\\\\\n    (fieldInput) => {\\\\\\\\n      const updatedValues = Struct.deepFieldUpdate(\\\\\\\\n        formState?.values ?? {},\\\\\\\\n        path, // Pass the path directly\\\\\\\\n        (node) => {\\\\\\\\n          return {\\\\\\\\n            ...node,\\\\\\\\n            // Update the last key in the path\\\\\\\\n            [path[path.length - 1]]:\\\\\\\\n              typeof customFieldUpdate === \\\\\\\\\\\\\\\"function\\\\\\\\\\\\\\\"\\\\\\\\n                ? customFieldUpdate(\\\\\\\\n                    fieldInput?.target?.value ?? fieldInput,\\\\\\\\n                    node[path[path.length - 1]],\\\\\\\\n                    params\\\\\\\\n                  )\\\\\\\\n                : defaultFieldUpdate(\\\\\\\\n                    fieldInput?.target?.value ?? fieldInput,\\\\\\\\n                    node[path[path.length - 1]],\\\\\\\\n                    params\\\\\\\\n                  ),\\\\\\\\n          };\\\\\\\\n        }\\\\\\\\n      );\\\\\\\\n\\\\\\\\n      State.update((lastKnownComponentState) => ({\\\\\\\\n        ...lastKnownComponentState,\\\\\\\\n\\\\\\\\n        [stateKey]: {\\\\\\\\n          hasUnsubmittedChanges: !Struct.isEqual(\\\\\\\\n            updatedValues,\\\\\\\\n            initialFormState.values\\\\\\\\n          ),\\\\\\\\n\\\\\\\\n          values: updatedValues,\\\\\\\\n        },\\\\\\\\n      }));\\\\\\\\n\\\\\\\\n      if (\\\\\\\\n        typeof onUpdate === \\\\\\\\\\\\\\\"function\\\\\\\\\\\\\\\" &&\\\\\\\\n        !Struct.isEqual(updatedValues, initialFormState.values)\\\\\\\\n      ) {\\\\\\\\n        onUpdate(updatedValues);\\\\\\\\n      }\\\\\\\\n    };\\\\\\\\n\\\\\\\\n  if (\\\\\\\\n    !uninitialized &&\\\\\\\\n    (formState === null || (!formState.hasUnsubmittedChanges && !isSynced))\\\\\\\\n  ) {\\\\\\\\n    formReset();\\\\\\\\n  }\\\\\\\\n\\\\\\\\n  return {\\\\\\\\n    ...(formState ?? initialFormState),\\\\\\\\n    isSynced,\\\\\\\\n    reset: formReset,\\\\\\\\n    stateKey,\\\\\\\\n    update: formUpdate,\\\\\\\\n  };\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst uuid = () =>\\\\\\\\n  [Date.now().toString(16)]\\\\\\\\n    .concat(\\\\\\\\n      Array.from(\\\\\\\\n        { length: 4 },\\\\\\\\n        () => Math.floor(Math.random() * 0xffffffff) & 0xffffffff\\\\\\\\n      ).map((value) => value.toString(16))\\\\\\\\n    )\\\\\\\\n    .join(\\\\\\\\\\\\\\\"-\\\\\\\\\\\\\\\");\\\\\\\\n\\\\\\\\nconst withUUIDIndex = (data) => {\\\\\\\\n  const id = uuid();\\\\\\\\n\\\\\\\\n  return Object.fromEntries([[id, { ...data, id }]]);\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst settings = {\\\\\\\\n  maxColumnsNumber: 20,\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst GithubKanbanBoardTicketFeaturesSchema = {\\\\\\\\n  id: { label: \\\\\\\\\\\\\\\"GitHub ID\\\\\\\\\\\\\\\" },\\\\\\\\n  author: { label: \\\\\\\\\\\\\\\"Author\\\\\\\\\\\\\\\" },\\\\\\\\n  labels: { label: \\\\\\\\\\\\\\\"Labels\\\\\\\\\\\\\\\" },\\\\\\\\n  type: { label: \\\\\\\\\\\\\\\"Type\\\\\\\\\\\\\\\" },\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst GithubKanbanBoardTicketTypesSchema = {\\\\\\\\n  Issue: { label: \\\\\\\\\\\\\\\"Issue\\\\\\\\\\\\\\\" },\\\\\\\\n  PullRequest: { label: \\\\\\\\\\\\\\\"Pull Request\\\\\\\\\\\\\\\" },\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst GithubKanbanBoardDefaults = {\\\\\\\\n  columns: {},\\\\\\\\n  dataTypesIncluded: { Issue: false, PullRequest: true },\\\\\\\\n  description: \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\",\\\\\\\\n  repoURL: \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\",\\\\\\\\n  ticketState: \\\\\\\\\\\\\\\"all\\\\\\\\\\\\\\\",\\\\\\\\n  title: \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\",\\\\\\\\n\\\\\\\\n  metadata: {\\\\\\\\n    id: uuid(),\\\\\\\\n    type: \\\\\\\\\\\\\\\"github.kanban_board\\\\\\\\\\\\\\\",\\\\\\\\n\\\\\\\\n    ticket: {\\\\\\\\n      type: \\\\\\\\\\\\\\\"github.kanban_ticket\\\\\\\\\\\\\\\",\\\\\\\\n      features: { id: true, author: true, labels: true, type: true },\\\\\\\\n    },\\\\\\\\n  },\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst toMigrated = ({ metadata, id, ...restParams }) => ({\\\\\\\\n  metadata: {\\\\\\\\n    ...GithubKanbanBoardDefaults.metadata,\\\\\\\\n    ...metadata,\\\\\\\\n    id: id ?? metadata.id,\\\\\\\\n  },\\\\\\\\n\\\\\\\\n  ...restParams,\\\\\\\\n});\\\\\\\\n\\\\\\\\nconst [editingMode, setEditingMode] = useState(\\\\\\\\\\\\\\\"form\\\\\\\\\\\\\\\");\\\\\\\\n\\\\\\\\n// This is a workaround because of how the data was decided to be saved.\\\\\\\\nconst dynamicKey = Object.keys(data).find((key) => key !== \\\\\\\\\\\\\\\"metadata\\\\\\\\\\\\\\\");\\\\\\\\ndata = data[dynamicKey];\\\\\\\\n\\\\\\\\nconst form = useForm({\\\\\\\\n  initialValues: Struct.typeMatch(data) ? toMigrated(data) : {},\\\\\\\\n  stateKey: \\\\\\\\\\\\\\\"view\\\\\\\\\\\\\\\",\\\\\\\\n  uninitialized: !Struct.typeMatch(data),\\\\\\\\n});\\\\\\\\n\\\\\\\\nconst newViewInit = () =>\\\\\\\\n  State.update((lastKnownState) => ({\\\\\\\\n    ...lastKnownState,\\\\\\\\n\\\\\\\\n    board: {\\\\\\\\n      hasUnsubmittedChanges: false,\\\\\\\\n      values: GithubKanbanBoardDefaults,\\\\\\\\n    },\\\\\\\\n  }));\\\\\\\\n\\\\\\\\nconst columnsCreateNew = ({ lastKnownValue }) =>\\\\\\\\n  Object.keys(lastKnownValue || {}).length < settings.maxColumnsNumber\\\\\\\\n    ? {\\\\\\\\n        ...(lastKnownValue ?? {}),\\\\\\\\n\\\\\\\\n        ...withUUIDIndex({\\\\\\\\n          description: \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\",\\\\\\\\n          labelSearchTerms: [],\\\\\\\\n          title: \\\\\\\\\\\\\\\"New column\\\\\\\\\\\\\\\",\\\\\\\\n        }),\\\\\\\\n      }\\\\\\\\n    : lastKnownValue;\\\\\\\\n\\\\\\\\nconst columnsDeleteById =\\\\\\\\n  (id) =>\\\\\\\\n  ({ lastKnownValue }) =>\\\\\\\\n    Object.fromEntries(\\\\\\\\n      Object.entries(lastKnownValue).filter(([columnId]) => columnId !== id)\\\\\\\\n    );\\\\\\\\n\\\\\\\\nconst onCancel = () => {\\\\\\\\n  form.reset();\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst onSave = () =>\\\\\\\\n  onSubmit({\\\\\\\\n    kanbanBoards: { [form.values.metadata.id]: form.values },\\\\\\\\n  });\\\\\\\\n\\\\\\\\nfunction Form() {\\\\\\\\n  return (\\\\\\\\n    <>\\\\\\\\n      <div className=\\\\\\\\\\\\\\\"d-flex flex-column\\\\\\\\\\\\\\\">\\\\\\\\n        <div className=\\\\\\\\\\\\\\\"d-flex gap-1 flex-column flex-xl-row\\\\\\\\\\\\\\\">\\\\\\\\n          <Widget\\\\\\\\n            src=\\\\\\\\\\\\\\\"devhub.near/widget/gigs-board.components.molecule.text-input\\\\\\\\\\\\\\\"\\\\\\\\n            props={{\\\\\\\\n              className: \\\\\\\\\\\\\\\"w-100\\\\\\\\\\\\\\\",\\\\\\\\n              key: `${form.values.metadata.id}-repoURL`,\\\\\\\\n              label: \\\\\\\\\\\\\\\"Repository URL\\\\\\\\\\\\\\\",\\\\\\\\n              onChange: form.update({ path: [\\\\\\\\\\\\\\\"repoURL\\\\\\\\\\\\\\\"] }),\\\\\\\\n              placeholder: \\\\\\\\\\\\\\\"https://github.com/example-org/example-repo\\\\\\\\\\\\\\\",\\\\\\\\n              value: form.values.repoURL,\\\\\\\\n            }}\\\\\\\\n          />\\\\\\\\n          <Widget\\\\\\\\n            src=\\\\\\\\\\\\\\\"devhub.near/widget/gigs-board.components.molecule.text-input\\\\\\\\\\\\\\\"\\\\\\\\n            props={{\\\\\\\\n              className: \\\\\\\\\\\\\\\"w-100\\\\\\\\\\\\\\\",\\\\\\\\n              key: `${form.values.metadata.id}-title`,\\\\\\\\n              label: \\\\\\\\\\\\\\\"Title\\\\\\\\\\\\\\\",\\\\\\\\n              onChange: form.update({ path: [\\\\\\\\\\\\\\\"title\\\\\\\\\\\\\\\"] }),\\\\\\\\n              placeholder: \\\\\\\\\\\\\\\"NEAR Protocol NEPs\\\\\\\\\\\\\\\",\\\\\\\\n              value: form.values.title,\\\\\\\\n            }}\\\\\\\\n          />\\\\\\\\n        </div>\\\\\\\\n\\\\\\\\n        <Widget\\\\\\\\n          src=\\\\\\\\\\\\\\\"devhub.near/widget/gigs-board.components.molecule.text-input\\\\\\\\\\\\\\\"\\\\\\\\n          props={{\\\\\\\\n            className: \\\\\\\\\\\\\\\"w-100\\\\\\\\\\\\\\\",\\\\\\\\n            key: `${form.values.metadata.id}-description`,\\\\\\\\n            label: \\\\\\\\\\\\\\\"Description\\\\\\\\\\\\\\\",\\\\\\\\n            onChange: form.update({ path: [\\\\\\\\\\\\\\\"description\\\\\\\\\\\\\\\"] }),\\\\\\\\n            placeholder: \\\\\\\\\\\\\\\"Latest NEAR Enhancement Proposals by status.\\\\\\\\\\\\\\\",\\\\\\\\n            value: form.values.description,\\\\\\\\n          }}\\\\\\\\n        />\\\\\\\\n      </div>\\\\\\\\n\\\\\\\\n      <div className=\\\\\\\\\\\\\\\"d-flex gap-4 flex-row flex-wrap justify-content-between\\\\\\\\\\\\\\\">\\\\\\\\n        <Widget\\\\\\\\n          src=\\\\\\\\\\\\\\\"devhub.near/widget/gigs-board.components.molecule.text-input\\\\\\\\\\\\\\\"\\\\\\\\n          props={{\\\\\\\\n            heading: \\\\\\\\\\\\\\\"Ticket types\\\\\\\\\\\\\\\",\\\\\\\\n            classNames: { root: \\\\\\\\\\\\\\\"col-12 col-md-4 h-auto\\\\\\\\\\\\\\\" },\\\\\\\\n            externalState: form.values.dataTypesIncluded,\\\\\\\\n            isActive: true,\\\\\\\\n            isEmbedded: true,\\\\\\\\n            isUnlocked: permissions.can_configure,\\\\\\\\n            onChange: form.update({ path: [\\\\\\\\\\\\\\\"dataTypesIncluded\\\\\\\\\\\\\\\"] }),\\\\\\\\n            schema: GithubKanbanBoardTicketTypesSchema,\\\\\\\\n          }}\\\\\\\\n        />\\\\\\\\n\\\\\\\\n        <div\\\\\\\\n          className={[\\\\\\\\n            \\\\\\\\\\\\\\\"col-12 col-md-3\\\\\\\\\\\\\\\",\\\\\\\\n            \\\\\\\\\\\\\\\"d-flex gap-3 flex-column justify-content-center p-4\\\\\\\\\\\\\\\",\\\\\\\\n          ].join(\\\\\\\\\\\\\\\" \\\\\\\\\\\\\\\")}\\\\\\\\n        >\\\\\\\\n          <span\\\\\\\\n            className=\\\\\\\\\\\\\\\"d-inline-flex gap-2\\\\\\\\\\\\\\\"\\\\\\\\n            id={`${form.values.metadata.id}-ticketState`}\\\\\\\\n          >\\\\\\\\n            <i class=\\\\\\\\\\\\\\\"bi bi-cone-striped\\\\\\\\\\\\\\\" />\\\\\\\\n            <span>Ticket state</span>\\\\\\\\n          </span>\\\\\\\\n\\\\\\\\n          <Widget\\\\\\\\n            src=\\\\\\\\\\\\\\\"devhub.near/widget/gigs-board.components.molecule.button-switch\\\\\\\\\\\\\\\"\\\\\\\\n            props={{\\\\\\\\n              currentValue: form.values.ticketState,\\\\\\\\n              key: \\\\\\\\\\\\\\\"ticketState\\\\\\\\\\\\\\\",\\\\\\\\n              onChange: form.update({ path: [\\\\\\\\\\\\\\\"ticketState\\\\\\\\\\\\\\\"] }),\\\\\\\\n\\\\\\\\n              options: [\\\\\\\\n                { label: \\\\\\\\\\\\\\\"All\\\\\\\\\\\\\\\", value: \\\\\\\\\\\\\\\"all\\\\\\\\\\\\\\\" },\\\\\\\\n                { label: \\\\\\\\\\\\\\\"Open\\\\\\\\\\\\\\\", value: \\\\\\\\\\\\\\\"open\\\\\\\\\\\\\\\" },\\\\\\\\n                { label: \\\\\\\\\\\\\\\"Closed\\\\\\\\\\\\\\\", value: \\\\\\\\\\\\\\\"closed\\\\\\\\\\\\\\\" },\\\\\\\\n              ],\\\\\\\\n            }}\\\\\\\\n          />\\\\\\\\n        </div>\\\\\\\\n        <Widget\\\\\\\\n          src=\\\\\\\\\\\\\\\"devhub.near/widget/gigs-board.components.organism.configurator\\\\\\\\\\\\\\\"\\\\\\\\n          props={{\\\\\\\\n            heading: \\\\\\\\\\\\\\\"Card fields\\\\\\\\\\\\\\\",\\\\\\\\n            classNames: { root: \\\\\\\\\\\\\\\"col-12 col-md-4 h-auto\\\\\\\\\\\\\\\" },\\\\\\\\n            externalState: form.values.metadata.ticket.features,\\\\\\\\n            isActive: true,\\\\\\\\n            isEmbedded: true,\\\\\\\\n            isUnlocked: permissions.can_configure,\\\\\\\\n            onChange: form.update({ path: [\\\\\\\\\\\\\\\"metadata\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"ticket\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"features\\\\\\\\\\\\\\\"] }),\\\\\\\\n            schema: GithubKanbanBoardTicketFeaturesSchema,\\\\\\\\n            nearDevGovGigsWidgetsAccountId: \\\\\\\\\\\\\\\"devhub.near\\\\\\\\\\\\\\\",\\\\\\\\n            nearDevGovGigsContractAccountId: \\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\",\\\\\\\\n          }}\\\\\\\\n        />\\\\\\\\n      </div>\\\\\\\\n\\\\\\\\n      <div className=\\\\\\\\\\\\\\\"d-flex align-items-center justify-content-between\\\\\\\\\\\\\\\">\\\\\\\\n        <span className=\\\\\\\\\\\\\\\"d-inline-flex gap-2 m-0\\\\\\\\\\\\\\\">\\\\\\\\n          <i className=\\\\\\\\\\\\\\\"bi bi-list-task\\\\\\\\\\\\\\\" />\\\\\\\\n          <span>{`Columns ( max. ${settings.maxColumnsNumber} )`}</span>\\\\\\\\n        </span>\\\\\\\\n      </div>\\\\\\\\n\\\\\\\\n      <div className=\\\\\\\\\\\\\\\"d-flex flex-column align-items-center gap-3 w-100\\\\\\\\\\\\\\\">\\\\\\\\n        {Object.values(form.values.columns ?? {}).map(\\\\\\\\n          ({ id, description, labelSearchTerms, title }) => (\\\\\\\\n            <div\\\\\\\\n              className=\\\\\\\\\\\\\\\"d-flex gap-3 rounded-4 border p-3 w-100 attractable\\\\\\\\\\\\\\\"\\\\\\\\n              key={`column-${id}-configurator`}\\\\\\\\n            >\\\\\\\\n              <div className=\\\\\\\\\\\\\\\"d-flex flex-column gap-1 w-100\\\\\\\\\\\\\\\">\\\\\\\\n                <Widget\\\\\\\\n                  src=\\\\\\\\\\\\\\\"devhub.near/widget/gigs-board.components.molecule.text-input\\\\\\\\\\\\\\\"\\\\\\\\n                  props={{\\\\\\\\n                    className: \\\\\\\\\\\\\\\"flex-grow-1\\\\\\\\\\\\\\\",\\\\\\\\n                    key: `${form.values.metadata.id}-column-${id}-title`,\\\\\\\\n                    label: \\\\\\\\\\\\\\\"Title\\\\\\\\\\\\\\\",\\\\\\\\n                    onChange: form.update({ path: [\\\\\\\\\\\\\\\"columns\\\\\\\\\\\\\\\", id, \\\\\\\\\\\\\\\"title\\\\\\\\\\\\\\\"] }),\\\\\\\\n                    placeholder: \\\\\\\\\\\\\\\"\\\\\\\\u{1f440} Review\\\\\\\\\\\\\\\",\\\\\\\\n                    value: title,\\\\\\\\n                  }}\\\\\\\\n                />\\\\\\\\n                <Widget\\\\\\\\n                  src=\\\\\\\\\\\\\\\"devhub.near/widget/gigs-board.components.molecule.text-input\\\\\\\\\\\\\\\"\\\\\\\\n                  props={{\\\\\\\\n                    format: \\\\\\\\\\\\\\\"comma-separated\\\\\\\\\\\\\\\",\\\\\\\\n                    key: `${form.values.metadata.id}-column-${title}-labelSearchTerms`,\\\\\\\\n\\\\\\\\n                    label: `Search terms for all the labels\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\tMUST be presented in included tickets`,\\\\\\\\n\\\\\\\\n                    onChange: form.update({\\\\\\\\n                      path: [\\\\\\\\\\\\\\\"columns\\\\\\\\\\\\\\\", id, \\\\\\\\\\\\\\\"labelSearchTerms\\\\\\\\\\\\\\\"],\\\\\\\\n                    }),\\\\\\\\n\\\\\\\\n                    placeholder: \\\\\\\\\\\\\\\"WG-, draft, review, proposal, ...\\\\\\\\\\\\\\\",\\\\\\\\n                    value: labelSearchTerms.join(\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"),\\\\\\\\n                  }}\\\\\\\\n                />\\\\\\\\n                <Widget\\\\\\\\n                  src=\\\\\\\\\\\\\\\"devhub.near/widget/gigs-board.components.molecule.text-input\\\\\\\\\\\\\\\"\\\\\\\\n                  props={{\\\\\\\\n                    className: \\\\\\\\\\\\\\\"flex-grow-1\\\\\\\\\\\\\\\",\\\\\\\\n                    key: `${form.values.metadata.id}-column-${id}-description`,\\\\\\\\n                    label: \\\\\\\\\\\\\\\"Description\\\\\\\\\\\\\\\",\\\\\\\\n\\\\\\\\n                    onChange: form.update({\\\\\\\\n                      path: [\\\\\\\\\\\\\\\"columns\\\\\\\\\\\\\\\", id, \\\\\\\\\\\\\\\"description\\\\\\\\\\\\\\\"],\\\\\\\\n                    }),\\\\\\\\n\\\\\\\\n                    placeholder:\\\\\\\\n                      \\\\\\\\\\\\\\\"NEPs that need a review by Subject Matter Experts.\\\\\\\\\\\\\\\",\\\\\\\\n\\\\\\\\n                    value: description,\\\\\\\\n                  }}\\\\\\\\n                />\\\\\\\\n              </div>\\\\\\\\n\\\\\\\\n              <div\\\\\\\\n                className=\\\\\\\\\\\\\\\"d-flex flex-column gap-3 border-start p-3 pe-0\\\\\\\\\\\\\\\"\\\\\\\\n                style={{ marginTop: -16, marginBottom: -16 }}\\\\\\\\n              >\\\\\\\\n                <button\\\\\\\\n                  className=\\\\\\\\\\\\\\\"btn btn-outline-danger\\\\\\\\\\\\\\\"\\\\\\\\n                  onClick={form.update({\\\\\\\\n                    path: [\\\\\\\\\\\\\\\"columns\\\\\\\\\\\\\\\"],\\\\\\\\n                    via: columnsDeleteById(id),\\\\\\\\n                  })}\\\\\\\\n                  title=\\\\\\\\\\\\\\\"Delete column\\\\\\\\\\\\\\\"\\\\\\\\n                >\\\\\\\\n                  <i className=\\\\\\\\\\\\\\\"bi bi-trash-fill\\\\\\\\\\\\\\\" />\\\\\\\\n                </button>\\\\\\\\n              </div>\\\\\\\\n            </div>\\\\\\\\n          )\\\\\\\\n        )}\\\\\\\\n\\\\\\\\n        <div className=\\\\\\\\\\\\\\\"d-flex gap-3 justify-content-end w-100\\\\\\\\\\\\\\\">\\\\\\\\n          <Widget\\\\\\\\n            src=\\\\\\\\\\\\\\\"devhub.near/widget/gigs-board.components.molecule.button\\\\\\\\\\\\\\\"\\\\\\\\n            props={{\\\\\\\\n              classNames: {\\\\\\\\n                root: \\\\\\\\\\\\\\\"d-flex btn btn-outline-danger shadow-none border-0\\\\\\\\\\\\\\\",\\\\\\\\n              },\\\\\\\\n              label: \\\\\\\\\\\\\\\"Cancel\\\\\\\\\\\\\\\",\\\\\\\\n              onClick: onCancel,\\\\\\\\n              nearDevGovGigsWidgetsAccountId: \\\\\\\\\\\\\\\"devhub.near\\\\\\\\\\\\\\\",\\\\\\\\n            }}\\\\\\\\n          />\\\\\\\\n          <Widget\\\\\\\\n            src=\\\\\\\\\\\\\\\"devhub.near/widget/gigs-board.components.molecule.button\\\\\\\\\\\\\\\"\\\\\\\\n            props={{\\\\\\\\n              classNames: { root: \\\\\\\\\\\\\\\"btn btn-success\\\\\\\\\\\\\\\" },\\\\\\\\n              disabled: form.isSynced,\\\\\\\\n\\\\\\\\n              icon: {\\\\\\\\n                type: \\\\\\\\\\\\\\\"svg_icon\\\\\\\\\\\\\\\",\\\\\\\\n                variant: \\\\\\\\\\\\\\\"floppy_drive\\\\\\\\\\\\\\\",\\\\\\\\n                width: 14,\\\\\\\\n                height: 14,\\\\\\\\n              },\\\\\\\\n              label: \\\\\\\\\\\\\\\"Save\\\\\\\\\\\\\\\",\\\\\\\\n              onClick: onSave,\\\\\\\\n              nearDevGovGigsWidgetsAccountId: \\\\\\\\\\\\\\\"devhub.near\\\\\\\\\\\\\\\",\\\\\\\\n            }}\\\\\\\\n          />\\\\\\\\n        </div>\\\\\\\\n      </div>\\\\\\\\n    </>\\\\\\\\n  );\\\\\\\\n}\\\\\\\\n\\\\\\\\nreturn (\\\\\\\\n  <div\\\\\\\\n    className=\\\\\\\\\\\\\\\"d-flex flex-column gap-4 w-100\\\\\\\\\\\\\\\"\\\\\\\\n    style={{ maxWidth: \\\\\\\\\\\\\\\"100%\\\\\\\\\\\\\\\", marginTop: \\\\\\\\\\\\\\\"40px\\\\\\\\\\\\\\\" }}\\\\\\\\n  >\\\\\\\\n    <div className={\\\\\\\\\\\\\\\"d-flex flex-column gap-4 w-100\\\\\\\\\\\\\\\"}>\\\\\\\\n      <div className=\\\\\\\\\\\\\\\"d-flex align-items-center justify-content-between gap-3 w-100\\\\\\\\\\\\\\\">\\\\\\\\n        <h5 className=\\\\\\\\\\\\\\\"h5 d-inline-flex gap-2 m-0\\\\\\\\\\\\\\\">\\\\\\\\n          <i className=\\\\\\\\\\\\\\\"bi bi-gear-wide-connected\\\\\\\\\\\\\\\" />\\\\\\\\n          <span>GitHub board configuration</span>\\\\\\\\n        </h5>\\\\\\\\n        <Widget\\\\\\\\n          src=\\\\\\\\\\\\\\\"devhub.near/widget/gigs-board.components.molecule.button-switch\\\\\\\\\\\\\\\"\\\\\\\\n          props={{\\\\\\\\n            currentValue: editingMode,\\\\\\\\n            key: \\\\\\\\\\\\\\\"editingMode\\\\\\\\\\\\\\\",\\\\\\\\n            onChange: (e) => setEditingMode(e.target.value),\\\\\\\\n\\\\\\\\n            options: [\\\\\\\\n              { label: \\\\\\\\\\\\\\\"Form\\\\\\\\\\\\\\\", value: \\\\\\\\\\\\\\\"form\\\\\\\\\\\\\\\" },\\\\\\\\n              { label: \\\\\\\\\\\\\\\"JSON\\\\\\\\\\\\\\\", value: \\\\\\\\\\\\\\\"JSON\\\\\\\\\\\\\\\" },\\\\\\\\n            ],\\\\\\\\n\\\\\\\\n            title: \\\\\\\\\\\\\\\"Editing mode selection\\\\\\\\\\\\\\\",\\\\\\\\n          }}\\\\\\\\n        />\\\\\\\\n      </div>\\\\\\\\n      {editingMode === \\\\\\\\\\\\\\\"JSON\\\\\\\\\\\\\\\" ? (\\\\\\\\n        <div className=\\\\\\\\\\\\\\\"d-flex flex-column flex-grow-1 border-0 bg-transparent w-100\\\\\\\\\\\\\\\">\\\\\\\\n          <textarea\\\\\\\\n            className=\\\\\\\\\\\\\\\"form-control\\\\\\\\\\\\\\\"\\\\\\\\n            rows=\\\\\\\\\\\\\\\"12\\\\\\\\\\\\\\\"\\\\\\\\n            type=\\\\\\\\\\\\\\\"text\\\\\\\\\\\\\\\"\\\\\\\\n            value={JSON.stringify(form.values ?? {}, null, \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\t\\\\\\\\\\\\\\\")}\\\\\\\\n          />\\\\\\\\n        </div>\\\\\\\\n      ) : (\\\\\\\\n        <Form />\\\\\\\\n      )}\\\\\\\\n    </div>\\\\\\\\n    {form.values ? (\\\\\\\\n      <Widget\\\\\\\\n        src={`devhub.near/widget/gigs-board.entity.workspace.view.${form.values.metadata.type}`}\\\\\\\\n        props={{\\\\\\\\n          ...form.values,\\\\\\\\n\\\\\\\\n          configurationControls: [\\\\\\\\n            {\\\\\\\\n              label: \\\\\\\\\\\\\\\"New column\\\\\\\\\\\\\\\",\\\\\\\\n\\\\\\\\n              disabled:\\\\\\\\n                Object.keys(form.values.columns || {}).length >=\\\\\\\\n                settings.maxColumnsNumber,\\\\\\\\n\\\\\\\\n              icon: { type: \\\\\\\\\\\\\\\"bootstrap_icon\\\\\\\\\\\\\\\", variant: \\\\\\\\\\\\\\\"bi-plus-lg\\\\\\\\\\\\\\\" },\\\\\\\\n\\\\\\\\n              onClick: form.update({\\\\\\\\n                path: [\\\\\\\\\\\\\\\"columns\\\\\\\\\\\\\\\"],\\\\\\\\n                via: columnsCreateNew,\\\\\\\\n              }),\\\\\\\\n            },\\\\\\\\n          ],\\\\\\\\n\\\\\\\\n          isSynced: form.isSynced,\\\\\\\\n          link,\\\\\\\\n          permissions,\\\\\\\\n          nearDevGovGigsWidgetsAccountId: \\\\\\\\\\\\\\\"devhub.near\\\\\\\\\\\\\\\",\\\\\\\\n          nearDevGovGigsContractAccountId: \\\\\\\\\\\\\\\"${REPL_DEVHUB_CONTRACT\\\\\\\\\\\\\\\",\\\\\\\\n        }}\\\\\\\\n      />\\\\\\\\n    ) : (\\\\\\\\n      <div\\\\\\\\n        className=\\\\\\\\\\\\\\\"d-flex flex-column align-items-center justify-content-center gap-4\\\\\\\\\\\\\\\"\\\\\\\\n        style={{ height: 384 }}\\\\\\\\n      >\\\\\\\\n        <h5 className=\\\\\\\\\\\\\\\"h5 d-inline-flex gap-2 m-0\\\\\\\\\\\\\\\">\\\\\\\\n          This community doesn\\\\\\\\\\\\'t have a GitHub board\\\\\\\\n        </h5>\\\\\\\\n        <Widget\\\\\\\\n          src=\\\\\\\\\\\\\\\"devhub.near/widget/gigs-board.components.molecule.button\\\\\\\\\\\\\\\"\\\\\\\\n          props={{\\\\\\\\n            icon: { type: \\\\\\\\\\\\\\\"bootstrap_icon\\\\\\\\\\\\\\\", variant: \\\\\\\\\\\\\\\"bi-github\\\\\\\\\\\\\\\" },\\\\\\\\n            isHidden: !permissions.can_configure,\\\\\\\\n            label: \\\\\\\\\\\\\\\"Create GitHub board\\\\\\\\\\\\\\\",\\\\\\\\n            onClick: newViewInit,\\\\\\\\n            nearDevGovGigsWidgetsAccountId: \\\\\\\\\\\\\\\"devhub.near\\\\\\\\\\\\\\\",\\\\\\\\n          }}\\\\\\\\n        />\\\\\\\\n      </div>\\\\\\\\n    )}\\\\\\\\n  </div>\\\\\\\\n);\\\\\\\\n\"}, \"devhub.entity.addon.kanban.Configurator\": {\"\": \"// TODO: Kanban needs be converted to follow this pattern\\\\\\\\nconst { data, onSubmit } = props;\\\\\\\\n\\\\\\\\nreturn <></>;\\\\\\\\n\"}, \"devhub.entity.addon.blog.editor.provider\": {\"\": \"const { getPost } =\\\\\\\\n  VM.require(\\\\\\\\\\\\\\\"devhub.near/widget/core.adapter.devhub-contract\\\\\\\\\\\\\\\") ||\\\\\\\\n  (() => {});\\\\\\\\n\\\\\\\\nconst { Layout, handle } = props;\\\\\\\\n\\\\\\\\nconst QUERYAPI_ENDPOINT = `https://near-queryapi.api.pagoda.co/v1/graphql/`;\\\\\\\\n\\\\\\\\nconst fetchGraphQL = (operationsDoc, operationName, variables) => {\\\\\\\\n  return fetch(QUERYAPI_ENDPOINT, {\\\\\\\\n    method: \\\\\\\\\\\\\\\"POST\\\\\\\\\\\\\\\",\\\\\\\\n    headers: { \\\\\\\\\\\\\\\"x-hasura-role\\\\\\\\\\\\\\\": `bo_near` },\\\\\\\\n    body: JSON.stringify({\\\\\\\\n      query: operationsDoc,\\\\\\\\n      variables: variables,\\\\\\\\n      operationName: operationName,\\\\\\\\n    }),\\\\\\\\n  });\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst queryName =\\\\\\\\n  props.queryName ?? `bo_near_devhub_v17_posts_with_latest_snapshot`;\\\\\\\\n\\\\\\\\nconst query = `query DevhubPostsQuery($limit: Int = 100, $offset: Int = 0, $where: ${queryName}_bool_exp = {}) {\\\\\\\\n    ${queryName}(\\\\\\\\n      limit: $limit\\\\\\\\n      offset: $offset\\\\\\\\n      order_by: {block_height: desc}\\\\\\\\n      where: $where\\\\\\\\n    ) {\\\\\\\\n      post_id\\\\\\\\n    }\\\\\\\\n  }\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst includeLabels = [\\\\\\\\\\\\\\\"blog\\\\\\\\\\\\\\\", handle];\\\\\\\\n\\\\\\\\nconst buildWhereClause = () => {\\\\\\\\n  let where = {};\\\\\\\\n  if (props.author) {\\\\\\\\n    where = { author_id: { _eq: props.author }, ...where };\\\\\\\\n  }\\\\\\\\n  if (props.term) {\\\\\\\\n    where = { description: { _ilike: `%${props.term}%` }, ...where };\\\\\\\\n  }\\\\\\\\n  if (includeLabels && Array.isArray(includeLabels)) {\\\\\\\\n    const labelConditions = includeLabels.map((label) => ({\\\\\\\\n      labels: { _contains: label },\\\\\\\\n    }));\\\\\\\\n\\\\\\\\n    where = { _and: [...labelConditions, where] };\\\\\\\\n  }\\\\\\\\n  if (props.excludeLabels && Array.isArray(props.excludeLabels)) {\\\\\\\\n    const labelConditions = props.excludeLabels.map((label) => ({\\\\\\\\n      labels: { _nin: label },\\\\\\\\n    }));\\\\\\\\n\\\\\\\\n    where = { _and: [...labelConditions, where] };\\\\\\\\n  }\\\\\\\\n  if (!props.recency) {\\\\\\\\n    where = { parent_id: { _is_null: true }, ...where };\\\\\\\\n  }\\\\\\\\n  return where;\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst variables = { limit: DISPLAY_COUNT, offset, where: buildWhereClause() };\\\\\\\\n\\\\\\\\nconst posts = fetch(QUERYAPI_ENDPOINT, {\\\\\\\\n  method: \\\\\\\\\\\\\\\"POST\\\\\\\\\\\\\\\",\\\\\\\\n  headers: { \\\\\\\\\\\\\\\"x-hasura-role\\\\\\\\\\\\\\\": `bo_near` },\\\\\\\\n  body: JSON.stringify({\\\\\\\\n    query: query,\\\\\\\\n    variables: variables,\\\\\\\\n    operationName: \\\\\\\\\\\\\\\"DevhubPostsQuery\\\\\\\\\\\\\\\",\\\\\\\\n  }),\\\\\\\\n});\\\\\\\\n\\\\\\\\nconst handleOnChange = (v) => {\\\\\\\\n  console.log(\\\\\\\\\\\\\\\"onChange\\\\\\\\\\\\\\\", v);\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst handleGetData = (v) => {\\\\\\\\n  const postId = parseInt(v);\\\\\\\\n  const post = getPost({ post_id: postId });\\\\\\\\n  const description = JSON.parse(post.snapshot.description || \\\\\\\\\\\\\\\"null\\\\\\\\\\\\\\\") || {};\\\\\\\\n\\\\\\\\n  return {\\\\\\\\n    id: postId,\\\\\\\\n    ...description,\\\\\\\\n  };\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst handleOnSubmit = (v, isEdit) => {\\\\\\\\n  console.log(isEdit);\\\\\\\\n  if (isEdit) {\\\\\\\\n    Near.call({\\\\\\\\n      contractName: \\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\",\\\\\\\\n      methodName: \\\\\\\\\\\\\\\"edit_post\\\\\\\\\\\\\\\",\\\\\\\\n      args: {\\\\\\\\n        id: v.id,\\\\\\\\n        labels: [\\\\\\\\\\\\\\\"blog\\\\\\\\\\\\\\\", handle],\\\\\\\\n        body: {\\\\\\\\n          post_type: \\\\\\\\\\\\\\\"Comment\\\\\\\\\\\\\\\",\\\\\\\\n          description: JSON.stringify(v),\\\\\\\\n          comment_version: \\\\\\\\\\\\\\\"V2\\\\\\\\\\\\\\\",\\\\\\\\n        },\\\\\\\\n      },\\\\\\\\n      deposit: Big(10).pow(21).mul(2),\\\\\\\\n      gas: Big(10).pow(12).mul(100),\\\\\\\\n    });\\\\\\\\n  } else {\\\\\\\\n    Near.call({\\\\\\\\n      contractName: \\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\",\\\\\\\\n      methodName: \\\\\\\\\\\\\\\"add_post\\\\\\\\\\\\\\\",\\\\\\\\n      args: {\\\\\\\\n        labels: [\\\\\\\\\\\\\\\"blog\\\\\\\\\\\\\\\", handle],\\\\\\\\n        body: {\\\\\\\\n          post_type: \\\\\\\\\\\\\\\"Comment\\\\\\\\\\\\\\\",\\\\\\\\n          description: JSON.stringify(v),\\\\\\\\n          comment_version: \\\\\\\\\\\\\\\"V2\\\\\\\\\\\\\\\",\\\\\\\\n        },\\\\\\\\n      },\\\\\\\\n      deposit: Big(10).pow(21).mul(2),\\\\\\\\n      gas: Big(10).pow(12).mul(100),\\\\\\\\n    });\\\\\\\\n  }\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst handleOnCancel = (v) => {\\\\\\\\n  console.log(\\\\\\\\\\\\\\\"onCancel\\\\\\\\\\\\\\\", v);\\\\\\\\n};\\\\\\\\n\\\\\\\\nreturn (\\\\\\\\n  <Layout\\\\\\\\n    data={posts.body.data.bo_near_devhub_v17_posts_with_latest_snapshot || []}\\\\\\\\n    getData={handleGetData}\\\\\\\\n    onChange={handleOnChange}\\\\\\\\n    onSubmit={handleOnSubmit}\\\\\\\\n    onCancel={handleOnCancel}\\\\\\\\n  />\\\\\\\\n);\\\\\\\\n\"}, \"devhub.components.molecule.MarkdownEditor\": {\"\": \"const MarkdownEditor = ({ data, onChange }) => {\\\\\\\\n  return (\\\\\\\\n    <Widget\\\\\\\\n      src={\\\\\\\\\\\\\\\"efiz.near/widget/SimpleMDE\\\\\\\\\\\\\\\"}\\\\\\\\n      props={{\\\\\\\\n        data,\\\\\\\\n        onChange,\\\\\\\\n        toolbar: [\\\\\\\\n          \\\\\\\\\\\\\\\"heading\\\\\\\\\\\\\\\",\\\\\\\\n          \\\\\\\\\\\\\\\"bold\\\\\\\\\\\\\\\",\\\\\\\\n          \\\\\\\\\\\\\\\"italic\\\\\\\\\\\\\\\",\\\\\\\\n          \\\\\\\\\\\\\\\"quote\\\\\\\\\\\\\\\",\\\\\\\\n          \\\\\\\\\\\\\\\"code\\\\\\\\\\\\\\\",\\\\\\\\n          \\\\\\\\\\\\\\\"link\\\\\\\\\\\\\\\",\\\\\\\\n          \\\\\\\\\\\\\\\"unordered-list\\\\\\\\\\\\\\\",\\\\\\\\n          \\\\\\\\\\\\\\\"ordered-list\\\\\\\\\\\\\\\",\\\\\\\\n          \\\\\\\\\\\\\\\"checklist\\\\\\\\\\\\\\\",\\\\\\\\n          \\\\\\\\\\\\\\\"mention\\\\\\\\\\\\\\\",\\\\\\\\n        ],\\\\\\\\n        statusConfig: [],\\\\\\\\n        spellChecker: false,\\\\\\\\n      }}\\\\\\\\n    />\\\\\\\\n  );\\\\\\\\n};\\\\\\\\n\\\\\\\\nreturn MarkdownEditor(props);\\\\\\\\n\"}, \"devhub.components.molecule.MarkdownViewer\": {\"\": \"const Wrapper = styled.div`\\\\\\\\n  p {\\\\\\\\n    white-space: pre-line; // This ensures text breaks to new line\\\\\\\\n\\\\\\\\n    span {\\\\\\\\n      white-space: normal; // and this ensures profile links look normal\\\\\\\\n    }\\\\\\\\n  }\\\\\\\\n\\\\\\\\n  blockquote {\\\\\\\\n    margin: 1em 0;\\\\\\\\n    padding-left: 1.5em;\\\\\\\\n    border-left: 4px solid #ccc;\\\\\\\\n    color: #666;\\\\\\\\n    font-style: italic;\\\\\\\\n    font-size: inherit;\\\\\\\\n  }\\\\\\\\n\\\\\\\\n  pre {\\\\\\\\n    background-color: #f4f4f4;\\\\\\\\n    border: 1px solid #ddd;\\\\\\\\n    border-radius: 4px;\\\\\\\\n    padding: 1em;\\\\\\\\n    overflow-x: auto;\\\\\\\\n    font-family: \\\\\\\\\\\\\\\"Courier New\\\\\\\\\\\\\\\", Courier, monospace;\\\\\\\\n  }\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst Embedded = styled.span`\\\\\\\\n  white-space: normal;\\\\\\\\n\\\\\\\\n  p {\\\\\\\\n    white-space: normal;\\\\\\\\n  }\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst renderMention =\\\\\\\\n  props.renderMention ??\\\\\\\\n  ((accountId) => (\\\\\\\\n    <span key={accountId} className=\\\\\\\\\\\\\\\"d-inline-flex\\\\\\\\\\\\\\\" style={{ fontWeight: 500 }}>\\\\\\\\n      <Widget\\\\\\\\n        src=\\\\\\\\\\\\\\\"neardevgov.near/widget/ProfileLine\\\\\\\\\\\\\\\"\\\\\\\\n        props={{\\\\\\\\n          accountId: accountId.toLowerCase(),\\\\\\\\n          hideAccountId: true,\\\\\\\\n          tooltip: true,\\\\\\\\n        }}\\\\\\\\n      />\\\\\\\\n    </span>\\\\\\\\n  ));\\\\\\\\n\\\\\\\\nreturn (\\\\\\\\n  <Wrapper>\\\\\\\\n    <Markdown text={props.text} onMention={renderMention} />\\\\\\\\n  </Wrapper>\\\\\\\\n);\\\\\\\\n\"}, \"devhub.components.molecule.NavbarDropdown\": {\"\": \"const title = props.title;\\\\\\\\nconst links = props.links;\\\\\\\\nconst href = props.href;\\\\\\\\n\\\\\\\\nconst [showMenu, setShowMenu] = useState(false);\\\\\\\\n\\\\\\\\nconst { href: linkHref } = VM.require(\\\\\\\\\\\\\\\"devhub.near/widget/core.lib.url\\\\\\\\\\\\\\\");\\\\\\\\n\\\\\\\\nlinkHref || (linkHref = () => {});\\\\\\\\n\\\\\\\\nconst Dropdown = styled.div`\\\\\\\\n  position: relative;\\\\\\\\n  display: flex;\\\\\\\\n  flex-direction: column;\\\\\\\\n  align-items: center;\\\\\\\\n\\\\\\\\n  p {\\\\\\\\n    &.active {\\\\\\\\n      color: #fff;\\\\\\\\n\\\\\\\\n      &:hover {\\\\\\\\n        text-decoration: none;\\\\\\\\n        color: #096d50 !important;\\\\\\\\n      }\\\\\\\\n    }\\\\\\\\n  }\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst DropdownMenu = styled.div`\\\\\\\\n  z-index: 50;\\\\\\\\n  position: absolute;\\\\\\\\n  top: 2.25rem;\\\\\\\\n\\\\\\\\n  &.active {\\\\\\\\n    padding: 0.5rem 1rem;\\\\\\\\n    padding-top: 1rem;\\\\\\\\n    border-radius: 1rem;\\\\\\\\n    background: rgba(217, 217, 217, 0.7);\\\\\\\\n    backdrop-filter: blur(5px);\\\\\\\\n    width: max-content;\\\\\\\\n    animation: slide-down 300ms ease;\\\\\\\\n    transform-origin: top center;\\\\\\\\n  }\\\\\\\\n\\\\\\\\n  @keyframes slide-down {\\\\\\\\n    0% {\\\\\\\\n      transform: scaleY(0);\\\\\\\\n    }\\\\\\\\n    100% {\\\\\\\\n      transform: scaleY(1);\\\\\\\\n    }\\\\\\\\n  }\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst DropdownLink = styled.div`\\\\\\\\n  color: inherit;\\\\\\\\n  text-decoration: none;\\\\\\\\n\\\\\\\\n  &.active {\\\\\\\\n    color: #04a46e;\\\\\\\\n  }\\\\\\\\n\\\\\\\\n  &:hover {\\\\\\\\n    text-decoration: none;\\\\\\\\n    color: #096d50 !important;\\\\\\\\n  }\\\\\\\\n`;\\\\\\\\n\\\\\\\\nreturn (\\\\\\\\n  <Dropdown\\\\\\\\n    onMouseEnter={() => setShowMenu(true)}\\\\\\\\n    onMouseLeave={() => setShowMenu(false)}\\\\\\\\n  >\\\\\\\\n    {href ? (\\\\\\\\n      <DropdownLink className={href === props.page && \\\\\\\\\\\\\\\"active\\\\\\\\\\\\\\\"} href={href}>\\\\\\\\n        <Link\\\\\\\\n          style={{ textDecoration: \\\\\\\\\\\\\\\"none\\\\\\\\\\\\\\\" }}\\\\\\\\n          to={linkHref({\\\\\\\\n            widgetSrc: \\\\\\\\\\\\\\\"devhub.near/widget/app\\\\\\\\\\\\\\\",\\\\\\\\n            params: { page: href },\\\\\\\\n          })}\\\\\\\\n        >\\\\\\\\n          {title}\\\\\\\\n        </Link>\\\\\\\\n      </DropdownLink>\\\\\\\\n    ) : (\\\\\\\\n      <p className={`m-0 py-2 nav-dropdown`} style={{ cursor: \\\\\\\\\\\\\\\"default\\\\\\\\\\\\\\\" }}>\\\\\\\\n        {title} \\\\\\\\u{2193}\\\\\\\\n      </p>\\\\\\\\n    )}\\\\\\\\n    {showMenu && links.length !== 0 && (\\\\\\\\n      <DropdownMenu className={`${showMenu && \\\\\\\\\\\\\\\"active\\\\\\\\\\\\\\\"}`}>\\\\\\\\n        <div className=\\\\\\\\\\\\\\\"d-flex flex-column gap-3\\\\\\\\\\\\\\\">\\\\\\\\n          {links.map((link) => (\\\\\\\\n            // Check if the link is external\\\\\\\\n            <DropdownLink\\\\\\\\n              className={link.href === props.page && \\\\\\\\\\\\\\\"active\\\\\\\\\\\\\\\"}\\\\\\\\n              key={`${link.title}-${link.href}`}\\\\\\\\n            >\\\\\\\\n              {link.href.startsWith(\\\\\\\\\\\\\\\"http://\\\\\\\\\\\\\\\") ||\\\\\\\\n              link.href.startsWith(\\\\\\\\\\\\\\\"https://\\\\\\\\\\\\\\\") ? (\\\\\\\\n                // External link: Render an <a> tag\\\\\\\\n                <a\\\\\\\\n                  href={link.href}\\\\\\\\n                  style={{ textDecoration: \\\\\\\\\\\\\\\"none\\\\\\\\\\\\\\\" }}\\\\\\\\n                  target=\\\\\\\\\\\\\\\"_blank\\\\\\\\\\\\\\\"\\\\\\\\n                  rel=\\\\\\\\\\\\\\\"noopener noreferrer\\\\\\\\\\\\\\\"\\\\\\\\n                >\\\\\\\\n                  {link.title}\\\\\\\\n                </a>\\\\\\\\n              ) : (\\\\\\\\n                // Internal link: Render the <Link> component\\\\\\\\n                <Link\\\\\\\\n                  style={{ textDecoration: \\\\\\\\\\\\\\\"none\\\\\\\\\\\\\\\" }}\\\\\\\\n                  to={linkHref({\\\\\\\\n                    widgetSrc: \\\\\\\\\\\\\\\"devhub.near/widget/app\\\\\\\\\\\\\\\",\\\\\\\\n                    params: { page: link.href },\\\\\\\\n                  })}\\\\\\\\n                >\\\\\\\\n                  {link.title}\\\\\\\\n                </Link>\\\\\\\\n              )}\\\\\\\\n            </DropdownLink>\\\\\\\\n          ))}\\\\\\\\n        </div>\\\\\\\\n      </DropdownMenu>\\\\\\\\n    )}\\\\\\\\n  </Dropdown>\\\\\\\\n);\\\\\\\\n\"}, \"devhub.entity.addon.telegram.Configurator\": {\"\": \"const { Tile } =\\\\\\\\n  VM.require(\\\\\\\\\\\\\\\"devhub.near/widget/devhub.components.molecule.Tile\\\\\\\\\\\\\\\") ||\\\\\\\\n  (() => <></>);\\\\\\\\n\\\\\\\\nconst { data, onSubmit } = props;\\\\\\\\n\\\\\\\\nconst Container = styled.div`\\\\\\\\n  display: flex;\\\\\\\\n  flex-direction: column;\\\\\\\\n  width: 100%;\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst Item = styled.div`\\\\\\\\n  padding: 10px;\\\\\\\\n  margin: 5px;\\\\\\\\n  display: flex;\\\\\\\\n  align-items: center;\\\\\\\\n  flex-direction: row;\\\\\\\\n  gap: 10px;\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst EditableField = styled.input`\\\\\\\\n  flex: 1;\\\\\\\\n`;\\\\\\\\nconst initialData = data.handles;\\\\\\\\nconst [handles, setHandles] = useState(initialData || []);\\\\\\\\nconst [newItem, setNewItem] = useState(\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\");\\\\\\\\n\\\\\\\\nconst handleAddItem = () => {\\\\\\\\n  if (newItem) {\\\\\\\\n    setHandles([...handles, newItem]);\\\\\\\\n    setNewItem(\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\");\\\\\\\\n  }\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst handleDeleteItem = (index) => {\\\\\\\\n  const updatedData = [...handles];\\\\\\\\n  updatedData.splice(index, 1);\\\\\\\\n  setHandles(updatedData);\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst handleSubmit = () => {\\\\\\\\n  onSubmit({ handles: handles.map((handle) => handle.trim()) });\\\\\\\\n};\\\\\\\\n\\\\\\\\nreturn (\\\\\\\\n  <Tile className=\\\\\\\\\\\\\\\"p-3\\\\\\\\\\\\\\\">\\\\\\\\n    <Container>\\\\\\\\n      {handles.map((item, index) => (\\\\\\\\n        <Item key={index}>\\\\\\\\n          <div className=\\\\\\\\\\\\\\\"flex-grow-1\\\\\\\\\\\\\\\">\\\\\\\\n            <Widget\\\\\\\\n              // TODO: LEGACY.\\\\\\\\n              src=\\\\\\\\\\\\\\\"devhub.near/widget/gigs-board.components.molecule.text-input\\\\\\\\\\\\\\\"\\\\\\\\n              props={{\\\\\\\\n                className: \\\\\\\\\\\\\\\"flex-grow-1\\\\\\\\\\\\\\\",\\\\\\\\n                value: item,\\\\\\\\n                placeholder: \\\\\\\\\\\\\\\"Telegram Handle\\\\\\\\\\\\\\\",\\\\\\\\n                inputProps: {\\\\\\\\n                  prefix: \\\\\\\\\\\\\\\"https://t.me/\\\\\\\\\\\\\\\",\\\\\\\\n                  disabled: true,\\\\\\\\n                },\\\\\\\\n              }}\\\\\\\\n            />\\\\\\\\n          </div>\\\\\\\\n          <button\\\\\\\\n            className=\\\\\\\\\\\\\\\"btn btn-outline-danger\\\\\\\\\\\\\\\"\\\\\\\\n            onClick={() => handleDeleteItem(index)}\\\\\\\\n          >\\\\\\\\n            <i className=\\\\\\\\\\\\\\\"bi bi-trash-fill\\\\\\\\\\\\\\\" />\\\\\\\\n          </button>\\\\\\\\n        </Item>\\\\\\\\n      ))}\\\\\\\\n      <Item>\\\\\\\\n        <div className=\\\\\\\\\\\\\\\"flex-grow-1\\\\\\\\\\\\\\\">\\\\\\\\n          <Widget\\\\\\\\n            // TODO: LEGACY.\\\\\\\\n            src=\\\\\\\\\\\\\\\"devhub.near/widget/gigs-board.components.molecule.text-input\\\\\\\\\\\\\\\"\\\\\\\\n            props={{\\\\\\\\n              className: \\\\\\\\\\\\\\\"flex-grow-1\\\\\\\\\\\\\\\",\\\\\\\\n              onChange: (e) => setNewItem(e.target.value),\\\\\\\\n              value: newItem,\\\\\\\\n              placeholder: \\\\\\\\\\\\\\\"Telegram Handle\\\\\\\\\\\\\\\",\\\\\\\\n              inputProps: {\\\\\\\\n                prefix: \\\\\\\\\\\\\\\"https://t.me/\\\\\\\\\\\\\\\",\\\\\\\\n              },\\\\\\\\n            }}\\\\\\\\n          />\\\\\\\\n        </div>\\\\\\\\n        <button\\\\\\\\n          className=\\\\\\\\\\\\\\\"btn btn-success\\\\\\\\\\\\\\\"\\\\\\\\n          onClick={handleAddItem}\\\\\\\\n          disabled={newItem === \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\"}\\\\\\\\n        >\\\\\\\\n          <i className=\\\\\\\\\\\\\\\"bi bi-plus\\\\\\\\\\\\\\\" />\\\\\\\\n        </button>\\\\\\\\n      </Item>\\\\\\\\n      <div\\\\\\\\n        className={\\\\\\\\\\\\\\\"d-flex align-items-center justify-content-end gap-3 mt-4\\\\\\\\\\\\\\\"}\\\\\\\\n      >\\\\\\\\n        <Widget\\\\\\\\n          src={\\\\\\\\\\\\\\\"devhub.near/widget/devhub.components.molecule.Button\\\\\\\\\\\\\\\"}\\\\\\\\n          props={{\\\\\\\\n            classNames: { root: \\\\\\\\\\\\\\\"btn-success\\\\\\\\\\\\\\\" },\\\\\\\\n            disabled: initialData === handles,\\\\\\\\n            icon: {\\\\\\\\n              type: \\\\\\\\\\\\\\\"bootstrap_icon\\\\\\\\\\\\\\\",\\\\\\\\n              variant: \\\\\\\\\\\\\\\"bi-check-circle-fill\\\\\\\\\\\\\\\",\\\\\\\\n            },\\\\\\\\n            label: \\\\\\\\\\\\\\\"Submit\\\\\\\\\\\\\\\",\\\\\\\\n            onClick: handleSubmit,\\\\\\\\n          }}\\\\\\\\n        />\\\\\\\\n      </div>\\\\\\\\n    </Container>\\\\\\\\n  </Tile>\\\\\\\\n);\\\\\\\\n\"}, \"devhub.entity.community.configuration.AboutConfigurator\": {\"\": \"const CommunityAboutSchema = {\\\\\\\\n  bio_markdown: {\\\\\\\\n    format: \\\\\\\\\\\\\\\"markdown\\\\\\\\\\\\\\\",\\\\\\\\n\\\\\\\\n    inputProps: {\\\\\\\\n      min: 3,\\\\\\\\n      max: 200,\\\\\\\\n\\\\\\\\n      placeholder:\\\\\\\\n        \\\\\\\\\\\\\\\"Tell people about your community. This will appear on your community\\\\\\\\u{2019}s homepage.\\\\\\\\\\\\\\\",\\\\\\\\n\\\\\\\\n      resize: \\\\\\\\\\\\\\\"none\\\\\\\\\\\\\\\",\\\\\\\\n    },\\\\\\\\n\\\\\\\\n    label: \\\\\\\\\\\\\\\"Bio\\\\\\\\\\\\\\\",\\\\\\\\n    multiline: true,\\\\\\\\n    order: 1,\\\\\\\\n  },\\\\\\\\n\\\\\\\\n  twitter_handle: {\\\\\\\\n    inputProps: { prefix: \\\\\\\\\\\\\\\"https://twitter.com/\\\\\\\\\\\\\\\", min: 2, max: 60 },\\\\\\\\n    label: \\\\\\\\\\\\\\\"Twitter\\\\\\\\\\\\\\\",\\\\\\\\n    order: 2,\\\\\\\\n  },\\\\\\\\n\\\\\\\\n  github_handle: {\\\\\\\\n    inputProps: { prefix: \\\\\\\\\\\\\\\"https://github.com/\\\\\\\\\\\\\\\", min: 2, max: 60 },\\\\\\\\n    label: \\\\\\\\\\\\\\\"Github\\\\\\\\\\\\\\\",\\\\\\\\n    order: 3,\\\\\\\\n  },\\\\\\\\n\\\\\\\\n  telegram_handle: {\\\\\\\\n    inputProps: { prefix: \\\\\\\\\\\\\\\"https://t.me/\\\\\\\\\\\\\\\", min: 2, max: 60 },\\\\\\\\n    format: \\\\\\\\\\\\\\\"comma-separated\\\\\\\\\\\\\\\",\\\\\\\\n    label: \\\\\\\\\\\\\\\"Telegram\\\\\\\\\\\\\\\",\\\\\\\\n    order: 4,\\\\\\\\n  },\\\\\\\\n\\\\\\\\n  website_url: {\\\\\\\\n    inputProps: { prefix: \\\\\\\\\\\\\\\"https://\\\\\\\\\\\\\\\", min: 2, max: 60 },\\\\\\\\n    label: \\\\\\\\\\\\\\\"Website\\\\\\\\\\\\\\\",\\\\\\\\n    order: 5,\\\\\\\\n  },\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst { data, onSubmit, onCancel, setIsActive, isActive } = props;\\\\\\\\n\\\\\\\\nfunction handleOnSubmit(v) {\\\\\\\\n  onSubmit(v);\\\\\\\\n  setIsActive(false);\\\\\\\\n}\\\\\\\\n\\\\\\\\nreturn (\\\\\\\\n  <Widget\\\\\\\\n    src={\\\\\\\\\\\\\\\"devhub.near/widget/devhub.components.organism.Configurator\\\\\\\\\\\\\\\"}\\\\\\\\n    props={{\\\\\\\\n      externalState: data,\\\\\\\\n      schema: CommunityAboutSchema,\\\\\\\\n      onSubmit: handleOnSubmit,\\\\\\\\n      isActive,\\\\\\\\n      onCancel: onCancel,\\\\\\\\n    }}\\\\\\\\n  />\\\\\\\\n);\\\\\\\\n\"}, \"devhub.entity.community.configuration.AddonsConfigurator\": {\"\": \"const { getAllAddons } =\\\\\\\\n  VM.require(\\\\\\\\\\\\\\\"devhub.near/widget/core.adapter.devhub-contract\\\\\\\\\\\\\\\") ||\\\\\\\\n  (() => {});\\\\\\\\n\\\\\\\\nconst { href } = VM.require(\\\\\\\\\\\\\\\"devhub.near/widget/core.lib.url\\\\\\\\\\\\\\\") || (() => {});\\\\\\\\n\\\\\\\\nconst availableAddons = getAllAddons() || [];\\\\\\\\n\\\\\\\\nconst isActive = props.isActive;\\\\\\\\n\\\\\\\\nconst Container = styled.div`\\\\\\\\n  display: flex;\\\\\\\\n  flex-direction: column;\\\\\\\\n  width: 100%;\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst Item = styled.div`\\\\\\\\n  padding: 10px;\\\\\\\\n  margin: 5px;\\\\\\\\n  display: flex;\\\\\\\\n  align-items: center;\\\\\\\\n  gap: 10px;\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst Icon = styled.span`\\\\\\\\n  margin-right: 10px;\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst EditableField = styled.input`\\\\\\\\n  flex: 1;\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst ToggleButton = styled.input`\\\\\\\\n  margin-left: 10px;\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst Table = styled.table`\\\\\\\\n  width: 100%;\\\\\\\\n  border-collapse: collapse;\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst Header = styled.thead`\\\\\\\\n  background-color: #f0f0f0;\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst HeaderCell = styled.th`\\\\\\\\n  padding: 10px;\\\\\\\\n  text-align: left;\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst Row = styled.tr``;\\\\\\\\n\\\\\\\\nconst Cell = styled.td`\\\\\\\\n  padding: 10px;\\\\\\\\n`;\\\\\\\\n\\\\\\\\nfunction generateRandom6CharUUID() {\\\\\\\\n  const chars = \\\\\\\\\\\\\\\"0123456789abcdefghijklmnopqrstuvwxyz\\\\\\\\\\\\\\\";\\\\\\\\n  let result = \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\";\\\\\\\\n\\\\\\\\n  for (let i = 0; i < 6; i++) {\\\\\\\\n    const randomIndex = Math.floor(Math.random() * chars.length);\\\\\\\\n    result += chars[randomIndex];\\\\\\\\n  }\\\\\\\\n\\\\\\\\n  return result;\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst AddonItem = ({\\\\\\\\n  data,\\\\\\\\n  onUpdate,\\\\\\\\n  onMove,\\\\\\\\n  onRemove,\\\\\\\\n  index,\\\\\\\\n  isTop,\\\\\\\\n  isBottom,\\\\\\\\n}) => {\\\\\\\\n  const handleNameChange = (event) => {\\\\\\\\n    const newName = event.target.value;\\\\\\\\n    onUpdate({ ...data, display_name: newName });\\\\\\\\n  };\\\\\\\\n\\\\\\\\n  const handleEnableChange = () => {\\\\\\\\n    onUpdate({ ...data, enabled: !data.enabled });\\\\\\\\n  };\\\\\\\\n\\\\\\\\n  const moveItemUp = () => {\\\\\\\\n    if (!isTop) {\\\\\\\\n      onMove(index, index - 1);\\\\\\\\n    }\\\\\\\\n  };\\\\\\\\n\\\\\\\\n  const moveItemDown = () => {\\\\\\\\n    if (!isBottom) {\\\\\\\\n      onMove(index, index + 1);\\\\\\\\n    }\\\\\\\\n  };\\\\\\\\n\\\\\\\\n  const removeItem = () => {\\\\\\\\n    onRemove(data.id);\\\\\\\\n  };\\\\\\\\n\\\\\\\\n  const addonMatch =\\\\\\\\n    availableAddons.find((it) => it.id === data.addon_id) ?? null;\\\\\\\\n\\\\\\\\n  return (\\\\\\\\n    <Row>\\\\\\\\n      <Cell>\\\\\\\\n        <div style={{ display: \\\\\\\\\\\\\\\"flex\\\\\\\\\\\\\\\", flexDirection: \\\\\\\\\\\\\\\"column\\\\\\\\\\\\\\\", gap: \\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\" }}>\\\\\\\\n          <button\\\\\\\\n            className=\\\\\\\\\\\\\\\"btn btn-sm btn-secondary rounded-0\\\\\\\\\\\\\\\"\\\\\\\\n            onClick={moveItemUp}\\\\\\\\n            disabled={!isActive || isTop}\\\\\\\\n            style={{ visibility: isTop && !isBottom ? \\\\\\\\\\\\\\\"hidden\\\\\\\\\\\\\\\" : \\\\\\\\\\\\\\\"visible\\\\\\\\\\\\\\\" }}\\\\\\\\n          >\\\\\\\\n            <i className=\\\\\\\\\\\\\\\"bi bi-arrow-up\\\\\\\\\\\\\\\"></i>\\\\\\\\n          </button>\\\\\\\\n          <button\\\\\\\\n            className=\\\\\\\\\\\\\\\"btn btn-sm btn-secondary rounded-0\\\\\\\\\\\\\\\"\\\\\\\\n            onClick={moveItemDown}\\\\\\\\n            disabled={!isActive || isBottom}\\\\\\\\n            style={{ visibility: isBottom && !isTop ? \\\\\\\\\\\\\\\"hidden\\\\\\\\\\\\\\\" : \\\\\\\\\\\\\\\"visible\\\\\\\\\\\\\\\" }}\\\\\\\\n          >\\\\\\\\n            <i className=\\\\\\\\\\\\\\\"bi bi-arrow-down\\\\\\\\\\\\\\\"></i>\\\\\\\\n          </button>\\\\\\\\n        </div>\\\\\\\\n      </Cell>\\\\\\\\n      <Cell>\\\\\\\\n        <div>{addonMatch.title}</div>\\\\\\\\n      </Cell>\\\\\\\\n      <Cell>\\\\\\\\n        <Widget\\\\\\\\n          src=\\\\\\\\\\\\\\\"devhub.near/widget/devhub.components.molecule.Input\\\\\\\\\\\\\\\"\\\\\\\\n          props={{\\\\\\\\n            label: \\\\\\\\\\\\\\\" \\\\\\\\\\\\\\\",\\\\\\\\n            value: data.display_name,\\\\\\\\n            onChange: handleNameChange,\\\\\\\\n            inputProps: {\\\\\\\\n              min: 3,\\\\\\\\n              max: 30,\\\\\\\\n              disabled: !data.enabled || !isActive,\\\\\\\\n            },\\\\\\\\n          }}\\\\\\\\n        />\\\\\\\\n      </Cell>\\\\\\\\n      <Cell>\\\\\\\\n        <div\\\\\\\\n          className={\\\\\\\\n            \\\\\\\\\\\\\\\"d-flex flex-column flex-1 align-items-start justify-content-evenly\\\\\\\\\\\\\\\"\\\\\\\\n          }\\\\\\\\n        >\\\\\\\\n          <Widget\\\\\\\\n            src={\\\\\\\\\\\\\\\"devhub.near/widget/devhub.components.atom.Toggle\\\\\\\\\\\\\\\"}\\\\\\\\n            props={{\\\\\\\\n              value: data.enabled,\\\\\\\\n              onChange: handleEnableChange,\\\\\\\\n              disabled: !isActive,\\\\\\\\n            }}\\\\\\\\n          />\\\\\\\\n        </div>\\\\\\\\n      </Cell>\\\\\\\\n      <Cell>\\\\\\\\n        <div style={{ display: \\\\\\\\\\\\\\\"flex\\\\\\\\\\\\\\\", gap: \\\\\\\\\\\\\\\"2px\\\\\\\\\\\\\\\" }}>\\\\\\\\n          {isActive && (\\\\\\\\n            <button className=\\\\\\\\\\\\\\\"btn btn-outline-danger\\\\\\\\\\\\\\\" onClick={removeItem}>\\\\\\\\n              <i className=\\\\\\\\\\\\\\\"bi bi-trash-fill\\\\\\\\\\\\\\\" />\\\\\\\\n            </button>\\\\\\\\n          )}\\\\\\\\n        </div>\\\\\\\\n      </Cell>\\\\\\\\n    </Row>\\\\\\\\n  );\\\\\\\\n};\\\\\\\\n\\\\\\\\nfunction arraysAreEqual(arr1, arr2) {\\\\\\\\n  if (arr1.length !== arr2.length) {\\\\\\\\n    return false;\\\\\\\\n  }\\\\\\\\n  for (let i = 0; i < arr1.length; i++) {\\\\\\\\n    if (arr1[i] !== arr2[i]) {\\\\\\\\n      return false;\\\\\\\\n    }\\\\\\\\n  }\\\\\\\\n  return true;\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst AddonsConfigurator = ({ data, onSubmit }) => {\\\\\\\\n  const [originalList, setOriginalList] = useState(data);\\\\\\\\n  const [list, setList] = useState(data);\\\\\\\\n  const [changesMade, setChangesMade] = useState(false);\\\\\\\\n\\\\\\\\n  useEffect(() => {\\\\\\\\n    setOriginalList(data);\\\\\\\\n  }, [data]);\\\\\\\\n\\\\\\\\n  const updateItem = (updatedItem) => {\\\\\\\\n    const updatedList = list.map((item) =>\\\\\\\\n      item.id === updatedItem.id ? updatedItem : item\\\\\\\\n    );\\\\\\\\n    setList(updatedList);\\\\\\\\n    setChangesMade(!arraysAreEqual(originalList, updatedList));\\\\\\\\n  };\\\\\\\\n\\\\\\\\n  const moveItem = (fromIndex, toIndex) => {\\\\\\\\n    const updatedList = [...list];\\\\\\\\n    const [movedItem] = updatedList.splice(fromIndex, 1);\\\\\\\\n    updatedList.splice(toIndex, 0, movedItem);\\\\\\\\n    setList(updatedList);\\\\\\\\n    setChangesMade(!arraysAreEqual(originalList, updatedList));\\\\\\\\n  };\\\\\\\\n\\\\\\\\n  const [selectedAddon, setSelectedAddon] = useState(null);\\\\\\\\n\\\\\\\\n  const handleAddItem = () => {\\\\\\\\n    const newItem = {\\\\\\\\n      id: generateRandom6CharUUID(),\\\\\\\\n      addon_id: selectedAddon.id,\\\\\\\\n      display_name: selectedAddon.title,\\\\\\\\n      enabled: true,\\\\\\\\n      parameters: \\\\\\\\\\\\\\\"{}\\\\\\\\\\\\\\\",\\\\\\\\n    };\\\\\\\\n    const updatedList = [...list, newItem];\\\\\\\\n    setList(updatedList);\\\\\\\\n    setChangesMade(!arraysAreEqual(originalList, updatedList));\\\\\\\\n    setSelectedAddon(null);\\\\\\\\n  };\\\\\\\\n\\\\\\\\n  const removeItem = (id) => {\\\\\\\\n    const updatedList = list.filter((item) => item.id !== id);\\\\\\\\n    setList(updatedList);\\\\\\\\n    setChangesMade(!arraysAreEqual(originalList, updatedList));\\\\\\\\n  };\\\\\\\\n\\\\\\\\n  return (\\\\\\\\n    <Container>\\\\\\\\n      <p>\\\\\\\\n        Add or remove custom tabs, which will appear in your community\\\\\\\\\\\\'s\\\\\\\\n        navigation bar.\\\\\\\\n        <br />\\\\\\\\n        You can customize them on each page.\\\\\\\\n      </p>\\\\\\\\n      {list.length > 0 && (\\\\\\\\n        <Table>\\\\\\\\n          <Header>\\\\\\\\n            <Row>\\\\\\\\n              <HeaderCell style={{ width: \\\\\\\\\\\\\\\"30px\\\\\\\\\\\\\\\" }}>Order</HeaderCell>\\\\\\\\n              <HeaderCell>Tab Type</HeaderCell>\\\\\\\\n              <HeaderCell>Tab Name</HeaderCell>\\\\\\\\n              <HeaderCell style={{ width: \\\\\\\\\\\\\\\"45px\\\\\\\\\\\\\\\" }}>Enabled</HeaderCell>\\\\\\\\n              <HeaderCell style={{ width: \\\\\\\\\\\\\\\"40px\\\\\\\\\\\\\\\" }}>Actions</HeaderCell>\\\\\\\\n            </Row>\\\\\\\\n          </Header>\\\\\\\\n          <tbody>\\\\\\\\n            {list.map((item, index) => (\\\\\\\\n              <AddonItem\\\\\\\\n                key={item.id}\\\\\\\\n                data={item}\\\\\\\\n                onUpdate={updateItem}\\\\\\\\n                onMove={moveItem}\\\\\\\\n                onRemove={removeItem}\\\\\\\\n                index={index}\\\\\\\\n                isTop={index === 0}\\\\\\\\n                isBottom={index === list.length - 1}\\\\\\\\n              />\\\\\\\\n            ))}\\\\\\\\n          </tbody>\\\\\\\\n        </Table>\\\\\\\\n      )}\\\\\\\\n      {isActive && availableAddons && list.length < 7 && (\\\\\\\\n        <div className=\\\\\\\\\\\\\\\"d-flex justify-content-center pt-2\\\\\\\\\\\\\\\">\\\\\\\\n          <div className=\\\\\\\\\\\\\\\"d-flex gap-2 flex-grow-1 px-4\\\\\\\\\\\\\\\">\\\\\\\\n            <Widget\\\\\\\\n              src={\\\\\\\\\\\\\\\"devhub.near/widget/devhub.components.molecule.Select\\\\\\\\\\\\\\\"}\\\\\\\\n              props={{\\\\\\\\n                className: \\\\\\\\\\\\\\\"flex-grow-1\\\\\\\\\\\\\\\",\\\\\\\\n                options: availableAddons.map((addon) => ({\\\\\\\\n                  label: addon.title,\\\\\\\\n                  value: addon.id,\\\\\\\\n                })),\\\\\\\\n                value: selectedAddon.id ?? \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\",\\\\\\\\n                onChange: (e) =>\\\\\\\\n                  setSelectedAddon(\\\\\\\\n                    availableAddons.find((addon) => addon.id === e.target.value)\\\\\\\\n                  ),\\\\\\\\n                placeholder: \\\\\\\\\\\\\\\"Select an addon\\\\\\\\\\\\\\\",\\\\\\\\n              }}\\\\\\\\n            />\\\\\\\\n            <button\\\\\\\\n              className=\\\\\\\\\\\\\\\"btn btn-success\\\\\\\\\\\\\\\"\\\\\\\\n              onClick={handleAddItem}\\\\\\\\n              disabled={!selectedAddon}\\\\\\\\n            >\\\\\\\\n              <i className=\\\\\\\\\\\\\\\"bi bi-plus\\\\\\\\\\\\\\\" />\\\\\\\\n            </button>\\\\\\\\n          </div>\\\\\\\\n        </div>\\\\\\\\n      )}\\\\\\\\n      {isActive && (\\\\\\\\n        <div\\\\\\\\n          className={\\\\\\\\\\\\\\\"d-flex align-items-center justify-content-end gap-3 mt-4\\\\\\\\\\\\\\\"}\\\\\\\\n        >\\\\\\\\n          <Widget\\\\\\\\n            src={\\\\\\\\\\\\\\\"devhub.near/widget/devhub.components.molecule.Button\\\\\\\\\\\\\\\"}\\\\\\\\n            props={{\\\\\\\\n              classNames: { root: \\\\\\\\\\\\\\\"btn-success\\\\\\\\\\\\\\\" },\\\\\\\\n              disabled: !changesMade,\\\\\\\\n              icon: {\\\\\\\\n                type: \\\\\\\\\\\\\\\"bootstrap_icon\\\\\\\\\\\\\\\",\\\\\\\\n                variant: \\\\\\\\\\\\\\\"bi-check-circle-fill\\\\\\\\\\\\\\\",\\\\\\\\n              },\\\\\\\\n              label: \\\\\\\\\\\\\\\"Submit\\\\\\\\\\\\\\\",\\\\\\\\n              onClick: () => onSubmit(list),\\\\\\\\n            }}\\\\\\\\n          />\\\\\\\\n        </div>\\\\\\\\n      )}\\\\\\\\n    </Container>\\\\\\\\n  );\\\\\\\\n};\\\\\\\\n\\\\\\\\nreturn AddonsConfigurator(props);\\\\\\\\n\"}, \"devhub.entity.community.configuration.BrandingConfigurator\": {\"\": \"const Banner = styled.div`\\\\\\\\n  border-top-left-radius: var(--bs-border-radius-xl) !important;\\\\\\\\n  border-top-right-radius: var(--bs-border-radius-xl) !important;\\\\\\\\n  height: calc(100% - 100px);\\\\\\\\n\\\\\\\\n  & > div :not(.btn) {\\\\\\\\n    position: absolute;\\\\\\\\n    display: none;\\\\\\\\n    margin: 0 !important;\\\\\\\\n    width: 0 !important;\\\\\\\\n    height: 0 !important;\\\\\\\\n  }\\\\\\\\n\\\\\\\\n  .btn {\\\\\\\\n    padding: 0.5rem 0.75rem !important;\\\\\\\\n    min-height: 32;\\\\\\\\n    line-height: 1;\\\\\\\\n\\\\\\\\n    border: none;\\\\\\\\n    border-radius: 50px;\\\\\\\\n    --bs-btn-color: #ffffff;\\\\\\\\n    --bs-btn-bg: #087990;\\\\\\\\n    --bs-btn-border-color: #087990;\\\\\\\\n    --bs-btn-hover-color: #ffffff;\\\\\\\\n    --bs-btn-hover-bg: #055160;\\\\\\\\n    --bs-btn-hover-border-color: #055160;\\\\\\\\n    --bs-btn-focus-shadow-rgb: 49, 132, 253;\\\\\\\\n    --bs-btn-active-color: #ffffff;\\\\\\\\n    --bs-btn-active-bg: #055160;\\\\\\\\n    --bs-btn-active-border-color: #055160;\\\\\\\\n    --bs-btn-active-shadow: inset 0 3px 5px rgba(0, 0, 0, 0.125);\\\\\\\\n    opacity: 0.8;\\\\\\\\n\\\\\\\\n    &:hover {\\\\\\\\n      opacity: 1;\\\\\\\\n    }\\\\\\\\n  }\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst Logo = styled.div`\\\\\\\\n  & > div :not(.btn) {\\\\\\\\n    position: absolute;\\\\\\\\n    display: none;\\\\\\\\n    margin: 0 !important;\\\\\\\\n    width: 0 !important;\\\\\\\\n    height: 0 !important;\\\\\\\\n  }\\\\\\\\n\\\\\\\\n  .btn {\\\\\\\\n    padding: 0.5rem 0.75rem !important;\\\\\\\\n    min-height: 32;\\\\\\\\n    line-height: 1;\\\\\\\\n\\\\\\\\n    border: none;\\\\\\\\n    border-radius: 50px;\\\\\\\\n    --bs-btn-color: #ffffff;\\\\\\\\n    --bs-btn-bg: #087990;\\\\\\\\n    --bs-btn-border-color: #087990;\\\\\\\\n    --bs-btn-hover-color: #ffffff;\\\\\\\\n    --bs-btn-hover-bg: #055160;\\\\\\\\n    --bs-btn-hover-border-color: #055160;\\\\\\\\n    --bs-btn-focus-shadow-rgb: 49, 132, 253;\\\\\\\\n    --bs-btn-active-color: #ffffff;\\\\\\\\n    --bs-btn-active-bg: #055160;\\\\\\\\n    --bs-btn-active-border-color: #055160;\\\\\\\\n    --bs-btn-active-shadow: inset 0 3px 5px rgba(0, 0, 0, 0.125);\\\\\\\\n    opacity: 0.8;\\\\\\\\n\\\\\\\\n    &:hover {\\\\\\\\n      opacity: 1;\\\\\\\\n    }\\\\\\\\n  }\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst cidToURL = (cid) => `https://ipfs.near.social/ipfs/${cid}`;\\\\\\\\n\\\\\\\\nconst { data, onSubmit, hasConfigurePermissions, link } = props;\\\\\\\\n\\\\\\\\nconst initialInput = { banner: null, logo: null };\\\\\\\\n\\\\\\\\nconst initialValues = {\\\\\\\\n  banner: { cid: data.banner_url.split(\\\\\\\\\\\\\\\"/\\\\\\\\\\\\\\\").at(-1) },\\\\\\\\n  logo: { cid: data.logo_url.split(\\\\\\\\\\\\\\\"/\\\\\\\\\\\\\\\").at(-1) },\\\\\\\\n};\\\\\\\\n\\\\\\\\nState.init({\\\\\\\\n  input: initialInput,\\\\\\\\n});\\\\\\\\n\\\\\\\\nconst hasUnsubmittedChanges = Object.values(state.input).some(\\\\\\\\n  (value) => value !== null\\\\\\\\n);\\\\\\\\n\\\\\\\\nconst isSynced = state.input === initialValues;\\\\\\\\n\\\\\\\\nif (hasUnsubmittedChanges && !isSynced) {\\\\\\\\n  onSubmit({\\\\\\\\n    banner_url: cidToURL(state.input.banner?.cid ?? initialValues.banner.cid),\\\\\\\\n    logo_url: cidToURL(state.input.logo?.cid ?? initialValues.logo.cid),\\\\\\\\n  });\\\\\\\\n\\\\\\\\n  State.update((lastKnownState) => ({\\\\\\\\n    ...lastKnownState,\\\\\\\\n    input: initialInput,\\\\\\\\n  }));\\\\\\\\n}\\\\\\\\n\\\\\\\\nreturn (\\\\\\\\n  <div style={{ height: 280 }}>\\\\\\\\n    <Banner\\\\\\\\n      alt=\\\\\\\\\\\\\\\"Community banner preview\\\\\\\\\\\\\\\"\\\\\\\\n      className=\\\\\\\\\\\\\\\"card-img-top d-flex flex-column justify-content-end align-items-end p-4\\\\\\\\\\\\\\\"\\\\\\\\n      style={{\\\\\\\\n        background: `center / cover no-repeat url(${cidToURL(\\\\\\\\n          initialValues.banner.cid\\\\\\\\n        )})`,\\\\\\\\n      }}\\\\\\\\n    >\\\\\\\\n      {hasConfigurePermissions && (\\\\\\\\n        <IpfsImageUpload image={state.input.banner} />\\\\\\\\n      )}\\\\\\\\n    </Banner>\\\\\\\\n    <Logo\\\\\\\\n      alt=\\\\\\\\\\\\\\\"Community logo preview\\\\\\\\\\\\\\\"\\\\\\\\n      className={[\\\\\\\\n        \\\\\\\\\\\\\\\"d-flex flex-column justify-content-center align-items-center\\\\\\\\\\\\\\\",\\\\\\\\n        \\\\\\\\\\\\\\\"rounded-circle ms-5 border border-4 border-white\\\\\\\\\\\\\\\",\\\\\\\\n      ].join(\\\\\\\\\\\\\\\" \\\\\\\\\\\\\\\")}\\\\\\\\n      style={{\\\\\\\\n        marginTop: -64,\\\\\\\\n        width: 128,\\\\\\\\n        height: 128,\\\\\\\\n\\\\\\\\n        background: `center / cover no-repeat url(${cidToURL(\\\\\\\\n          initialValues.logo.cid\\\\\\\\n        )})`,\\\\\\\\n      }}\\\\\\\\n    >\\\\\\\\n      {hasConfigurePermissions && <IpfsImageUpload image={state.input.logo} />}\\\\\\\\n    </Logo>\\\\\\\\n\\\\\\\\n    <div\\\\\\\\n      className=\\\\\\\\\\\\\\\"card-body p-4\\\\\\\\\\\\\\\"\\\\\\\\n      style={{ marginTop: -64, marginLeft: 180, height: 84 }}\\\\\\\\n    >\\\\\\\\n      <h5\\\\\\\\n        className=\\\\\\\\\\\\\\\"h5 text-nowrap overflow-hidden\\\\\\\\\\\\\\\"\\\\\\\\n        style={{ textOverflow: \\\\\\\\\\\\\\\"ellipsis\\\\\\\\\\\\\\\" }}\\\\\\\\n      >\\\\\\\\n        {typeof link === \\\\\\\\\\\\\\\"string\\\\\\\\\\\\\\\" && link.length > 0 ? (\\\\\\\\n          <Link to={link}>{data.name}</Link>\\\\\\\\n        ) : (\\\\\\\\n          data.name\\\\\\\\n        )}\\\\\\\\n      </h5>\\\\\\\\n\\\\\\\\n      <p\\\\\\\\n        className=\\\\\\\\\\\\\\\"card-text text-nowrap overflow-hidden\\\\\\\\\\\\\\\"\\\\\\\\n        style={{ textOverflow: \\\\\\\\\\\\\\\"ellipsis\\\\\\\\\\\\\\\" }}\\\\\\\\n      >\\\\\\\\n        {data.description}\\\\\\\\n      </p>\\\\\\\\n    </div>\\\\\\\\n  </div>\\\\\\\\n);\\\\\\\\n\"}, \"devhub.entity.community.configuration.ConfigurationSection\": {\"\": \"const {\\\\\\\\n  title,\\\\\\\\n  hasConfigurePermissions,\\\\\\\\n  Configurator,\\\\\\\\n  Preview,\\\\\\\\n  headerRight,\\\\\\\\n  forceEditActive,\\\\\\\\n} = props;\\\\\\\\n\\\\\\\\nconst [isEditActive, setEditActive] = useState(forceEditActive || false);\\\\\\\\n\\\\\\\\nfunction SectionHeader() {\\\\\\\\n  return (\\\\\\\\n    <div\\\\\\\\n      className=\\\\\\\\\\\\\\\"d-flex align-items-center justify-content-between w-100 pb-3\\\\\\\\\\\\\\\"\\\\\\\\n      style={{ minHeight: 30 }}\\\\\\\\n    >\\\\\\\\n      <h5 className=\\\\\\\\\\\\\\\"h5 d-inline-flex gap-2 m-0\\\\\\\\\\\\\\\">\\\\\\\\n        <span>{title}</span>\\\\\\\\n      </h5>\\\\\\\\n      {headerRight ||\\\\\\\\n        (hasConfigurePermissions && (\\\\\\\\n          <Widget\\\\\\\\n            src={\\\\\\\\\\\\\\\"devhub.near/widget/devhub.components.molecule.Button\\\\\\\\\\\\\\\"}\\\\\\\\n            props={{\\\\\\\\n              classNames: { root: \\\\\\\\\\\\\\\"btn-sm btn-secondary\\\\\\\\\\\\\\\" },\\\\\\\\n              icon: {\\\\\\\\n                type: \\\\\\\\\\\\\\\"bootstrap_icon\\\\\\\\\\\\\\\",\\\\\\\\n                variant: isEditActive ? \\\\\\\\\\\\\\\"bi-x-circle\\\\\\\\\\\\\\\" : \\\\\\\\\\\\\\\"bi-pen-fill\\\\\\\\\\\\\\\",\\\\\\\\n              },\\\\\\\\n              label: isEditActive ? \\\\\\\\\\\\\\\"Cancel\\\\\\\\\\\\\\\" : \\\\\\\\\\\\\\\"Edit\\\\\\\\\\\\\\\",\\\\\\\\n              onClick: () => setEditActive(!isEditActive),\\\\\\\\n            }}\\\\\\\\n          />\\\\\\\\n        ))}\\\\\\\\n    </div>\\\\\\\\n  );\\\\\\\\n}\\\\\\\\n\\\\\\\\nreturn (\\\\\\\\n  <div>\\\\\\\\n    <SectionHeader />\\\\\\\\n    <Configurator\\\\\\\\n      isActive={isEditActive}\\\\\\\\n      setIsActive={setEditActive}\\\\\\\\n      onCancel={() => setEditActive(!isEditActive)}\\\\\\\\n    />\\\\\\\\n  </div>\\\\\\\\n);\\\\\\\\n\"}, \"devhub.entity.community.configuration.InformationConfigurator\": {\"\": \"const CommunityInformationSchema = {\\\\\\\\n  name: {\\\\\\\\n    inputProps: {\\\\\\\\n      min: 2,\\\\\\\\n      max: 30,\\\\\\\\n      placeholder: \\\\\\\\\\\\\\\"Community name.\\\\\\\\\\\\\\\",\\\\\\\\n      required: true,\\\\\\\\n    },\\\\\\\\n\\\\\\\\n    label: \\\\\\\\\\\\\\\"Name\\\\\\\\\\\\\\\",\\\\\\\\n    order: 1,\\\\\\\\n  },\\\\\\\\n\\\\\\\\n  description: {\\\\\\\\n    inputProps: {\\\\\\\\n      min: 2,\\\\\\\\n      max: 60,\\\\\\\\n\\\\\\\\n      placeholder:\\\\\\\\n        \\\\\\\\\\\\\\\"Describe your community in one short sentence that will appear in the communities discovery page.\\\\\\\\\\\\\\\",\\\\\\\\n\\\\\\\\n      required: true,\\\\\\\\n    },\\\\\\\\n\\\\\\\\n    label: \\\\\\\\\\\\\\\"Description\\\\\\\\\\\\\\\",\\\\\\\\n    order: 2,\\\\\\\\n  },\\\\\\\\n\\\\\\\\n  handle: {\\\\\\\\n    inputProps: {\\\\\\\\n      min: 2,\\\\\\\\n      max: 40,\\\\\\\\n\\\\\\\\n      placeholder:\\\\\\\\n        \\\\\\\\\\\\\\\"Choose unique URL handle for your community. Example: zero-knowledge.\\\\\\\\\\\\\\\",\\\\\\\\n\\\\\\\\n      required: true,\\\\\\\\n    },\\\\\\\\n\\\\\\\\n    label: \\\\\\\\\\\\\\\"URL handle\\\\\\\\\\\\\\\",\\\\\\\\n    order: 3,\\\\\\\\n  },\\\\\\\\n\\\\\\\\n  tag: {\\\\\\\\n    inputProps: {\\\\\\\\n      min: 2,\\\\\\\\n      max: 30,\\\\\\\\n\\\\\\\\n      placeholder:\\\\\\\\n        \\\\\\\\\\\\\\\"Any posts with this tag will show up in your community feed.\\\\\\\\\\\\\\\",\\\\\\\\n\\\\\\\\n      required: true,\\\\\\\\n    },\\\\\\\\n\\\\\\\\n    label: \\\\\\\\\\\\\\\"Tag\\\\\\\\\\\\\\\",\\\\\\\\n    order: 4,\\\\\\\\n  },\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst { data, onSubmit, onCancel, setIsActive, isActive } = props;\\\\\\\\n\\\\\\\\nfunction handleOnSubmit(v) {\\\\\\\\n  onSubmit(v);\\\\\\\\n  setIsActive(false);\\\\\\\\n}\\\\\\\\n\\\\\\\\nreturn (\\\\\\\\n  <Widget\\\\\\\\n    src={\\\\\\\\\\\\\\\"devhub.near/widget/devhub.components.organism.Configurator\\\\\\\\\\\\\\\"}\\\\\\\\n    props={{\\\\\\\\n      externalState: data,\\\\\\\\n      schema: CommunityInformationSchema,\\\\\\\\n      onSubmit: handleOnSubmit,\\\\\\\\n      isActive: isActive,\\\\\\\\n      onCancel: onCancel,\\\\\\\\n    }}\\\\\\\\n  />\\\\\\\\n);\\\\\\\\n\"}, \"devhub.entity.community.configuration.AccessControlConfigurator\": {\"\": \"const CommunityAccessControlSchema = {\\\\\\\\n  admins: {\\\\\\\\n    format: \\\\\\\\\\\\\\\"comma-separated\\\\\\\\\\\\\\\",\\\\\\\\n    inputProps: { required: true },\\\\\\\\n    label: \\\\\\\\\\\\\\\"Admins\\\\\\\\\\\\\\\",\\\\\\\\n    order: 1,\\\\\\\\n  },\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst { data, onSubmit, onCancel, setIsActive, isActive } = props;\\\\\\\\n\\\\\\\\nfunction handleOnSubmit(v) {\\\\\\\\n  if (v.admins) {\\\\\\\\n    v.admins = v.admins.split(\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\").map((admin) => admin.trim());\\\\\\\\n  }\\\\\\\\n  onSubmit(v);\\\\\\\\n  setIsActive(false);\\\\\\\\n}\\\\\\\\n\\\\\\\\nreturn (\\\\\\\\n  <Widget\\\\\\\\n    src={\\\\\\\\\\\\\\\"devhub.near/widget/devhub.components.organism.Configurator\\\\\\\\\\\\\\\"}\\\\\\\\n    props={{\\\\\\\\n      externalState: data,\\\\\\\\n      schema: CommunityAccessControlSchema,\\\\\\\\n      onSubmit: handleOnSubmit,\\\\\\\\n      isActive,\\\\\\\\n      onCancel: onCancel,\\\\\\\\n    }}\\\\\\\\n  />\\\\\\\\n);\\\\\\\\n\"}}}}}"
      }
    ],
    "actions_agg": {
      "deposit": 1
    },
    "outcomes": {
      "status": true
    },
    "outcomes_agg": {
      "transaction_fee": 1.45956772352084e+22
    }
  }
]