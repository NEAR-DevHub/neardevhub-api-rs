[
  {
    "id": "1667957237",
    "receipt_id": "CwaFFfX1NkcuNpuAchUw41Gt2GvZ74BAj8HEzb1iZCSV",
    "predecessor_account_id": "devhub.near",
    "receiver_account_id": "social.near",
    "receipt_kind": "ACTION",
    "receipt_block": {
      "block_hash": "Cnq4q2QwZQWL6D2FpjAwDxbaTW6RekMohH4DHsEoow4a",
      "block_height": 107407480,
      "block_timestamp": 1702006627601575700
    },
    "receipt_outcome": {
      "gas_burnt": 8552851922713,
      "tokens_burnt": 855285192271300000000,
      "executor_account_id": "social.near",
      "status": true
    },
    "transaction_hash": "7QSjZ7jzQHFDttWLSPZXRddR4RAi4S9QT5wFJo3Hbywv",
    "included_in_block_hash": "2UPTQ6zVRxc7YMSQ24bnPzMrGQN2e6ceyR4xGzpQbv6e",
    "block_timestamp": "1702006626480491344",
    "block": {
      "block_height": 107407479
    },
    "receipt_conversion_tokens_burnt": "247314723701800000000",
    "actions": [
      {
        "action": "FUNCTION_CALL",
        "method": "set",
        "deposit": 0,
        "fee": 855285192271300000000,
        "args": "{\"data\": {\"devhub.near\": {\"widget\": {\"devhub.entity.post.PostEditor\": {\"\": \"const cleanDescription = (description) => {\\\\\\\\n  return description\\\\\\\\n    ? description.replace(\\\\\\\\n        /###### Requested amount: .+?\\\\\\\\\\\\\\\\n###### Requested sponsor: @[^\\\\\\\\\\\\\\\\s]+\\\\\\\\\\\\\\\\n/g,\\\\\\\\n        \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\"\\\\\\\\n      )\\\\\\\\n    : description;\\\\\\\\n};\\\\\\\\n\\\\\\\\ninitState({\\\\\\\\n  seekingFunding: props.seekingFunding ?? false,\\\\\\\\n  author_id: context.accountId,\\\\\\\\n  // Should be a list of objects with field \\\\\\\\\\\\\\\"name\\\\\\\\\\\\\\\".\\\\\\\\n  labels,\\\\\\\\n  // Should be a list of labels as strings.\\\\\\\\n  // Both of the label structures should be modified together.\\\\\\\\n  labelStrings,\\\\\\\\n  postType,\\\\\\\\n  name: props.name ?? \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\",\\\\\\\\n  description:\\\\\\\\n    (props.postType === \\\\\\\\\\\\\\\"Solution\\\\\\\\\\\\\\\"\\\\\\\\n      ? cleanDescription(props.description)\\\\\\\\n      : props.description) ?? \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\",\\\\\\\\n  amount: props.amount ?? \\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\n  token: props.token ?? \\\\\\\\\\\\\\\"USDT\\\\\\\\\\\\\\\",\\\\\\\\n  supervisor: props.supervisor ?? \\\\\\\\\\\\\\\"neardevdao.near\\\\\\\\\\\\\\\",\\\\\\\\n  githubLink: props.githubLink ?? \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\",\\\\\\\\n  warning: \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\",\\\\\\\\n  draftStateApplied: false,\\\\\\\\n  mentionInput: \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\", // text next to @ tag\\\\\\\\n  mentionsArray: [], // all the mentions in the description\\\\\\\\n});\\\\\\\\n\\\\\\\\n/* INCLUDE: \\\\\\\\\\\\\\\"core/lib/autocomplete\\\\\\\\\\\\\\\" */\\\\\\\\nconst autocompleteEnabled = true;\\\\\\\\n\\\\\\\\nconst AutoComplete = styled.div`\\\\\\\\n  z-index: 5;\\\\\\\\n\\\\\\\\n  > div > div {\\\\\\\\n    padding: calc(var(--padding) / 2);\\\\\\\\n  }\\\\\\\\n`;\\\\\\\\n\\\\\\\\nfunction textareaInputHandler(value) {\\\\\\\\n  const words = value.split(/\\\\\\\\\\\\\\\\s+/);\\\\\\\\n  const allMentiones = words\\\\\\\\n    .filter((word) => word.startsWith(\\\\\\\\\\\\\\\"@\\\\\\\\\\\\\\\"))\\\\\\\\n    .map((mention) => mention.slice(1));\\\\\\\\n  const newMentiones = allMentiones.filter(\\\\\\\\n    (item) => !state.mentionsArray.includes(item)\\\\\\\\n  );\\\\\\\\n\\\\\\\\n  State.update((lastKnownState) => ({\\\\\\\\n    ...lastKnownState,\\\\\\\\n    text: value,\\\\\\\\n    showAccountAutocomplete: newMentiones?.length > 0,\\\\\\\\n    mentionsArray: allMentiones,\\\\\\\\n    mentionInput: newMentiones?.[0] ?? \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\",\\\\\\\\n  }));\\\\\\\\n}\\\\\\\\n\\\\\\\\nfunction autoCompleteAccountId(id) {\\\\\\\\n  // to make sure we update the @ at correct index\\\\\\\\n  let currentIndex = 0;\\\\\\\\n  const updatedDescription = state.description.replace(\\\\\\\\n    /(?:^|\\\\\\\\\\\\\\\\s)(@[^\\\\\\\\\\\\\\\\s]*)/g,\\\\\\\\n    (match) => {\\\\\\\\n      if (currentIndex === state.mentionsArray.indexOf(state.mentionInput)) {\\\\\\\\n        currentIndex++;\\\\\\\\n        return ` @${id}`;\\\\\\\\n      } else {\\\\\\\\n        currentIndex++;\\\\\\\\n        return match;\\\\\\\\n      }\\\\\\\\n    }\\\\\\\\n  );\\\\\\\\n  State.update((lastKnownState) => ({\\\\\\\\n    ...lastKnownState,\\\\\\\\n    handler: \\\\\\\\\\\\\\\"autocompleteSelected\\\\\\\\\\\\\\\",\\\\\\\\n    description: updatedDescription,\\\\\\\\n    showAccountAutocomplete: false,\\\\\\\\n  }));\\\\\\\\n}\\\\\\\\n\\\\\\\\n/* END_INCLUDE: \\\\\\\\\\\\\\\"core/lib/autocomplete\\\\\\\\\\\\\\\" */\\\\\\\\n\\\\\\\\nconst postType = props.postType ?? \\\\\\\\\\\\\\\"Sponsorship\\\\\\\\\\\\\\\";\\\\\\\\nconst parentId = props.parentId ?? null;\\\\\\\\nconst postId = props.postId ?? null;\\\\\\\\nconst mode = props.mode ?? \\\\\\\\\\\\\\\"Create\\\\\\\\\\\\\\\";\\\\\\\\nconst toggleEditor = props.toggleEditor;\\\\\\\\n\\\\\\\\nconst referralLabels = props.referral ? [`referral:${props.referral}`] : [];\\\\\\\\nconst labelStrings = (props.labels ?? []).concat(referralLabels);\\\\\\\\n\\\\\\\\nconst labels = labelStrings.map((s) => {\\\\\\\\n  return { name: s };\\\\\\\\n});\\\\\\\\n\\\\\\\\nif (!state.draftStateApplied && props.draftState) {\\\\\\\\n  State.update({ ...props.draftState, draftStateApplied: true });\\\\\\\\n}\\\\\\\\n\\\\\\\\nlet fields = {\\\\\\\\n  Comment: [\\\\\\\\\\\\\\\"description\\\\\\\\\\\\\\\"],\\\\\\\\n  Idea: [\\\\\\\\\\\\\\\"name\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"description\\\\\\\\\\\\\\\"],\\\\\\\\n  Solution: [\\\\\\\\\\\\\\\"name\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"description\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"fund_raising\\\\\\\\\\\\\\\"],\\\\\\\\n  Attestation: [\\\\\\\\\\\\\\\"name\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"description\\\\\\\\\\\\\\\"],\\\\\\\\n  Sponsorship: [\\\\\\\\n    \\\\\\\\\\\\\\\"name\\\\\\\\\\\\\\\",\\\\\\\\n    \\\\\\\\\\\\\\\"description\\\\\\\\\\\\\\\",\\\\\\\\n    \\\\\\\\\\\\\\\"amount\\\\\\\\\\\\\\\",\\\\\\\\n    \\\\\\\\\\\\\\\"sponsorship_token\\\\\\\\\\\\\\\",\\\\\\\\n    \\\\\\\\\\\\\\\"supervisor\\\\\\\\\\\\\\\",\\\\\\\\n  ],\\\\\\\\n  Github: [\\\\\\\\\\\\\\\"githubLink\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"name\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"description\\\\\\\\\\\\\\\"],\\\\\\\\n}[postType];\\\\\\\\n\\\\\\\\n// This must be outside onClick, because Near.view returns null at first, and when the view call finished, it returns true/false.\\\\\\\\n// If checking this inside onClick, it will give `null` and we cannot tell the result is true or false.\\\\\\\\nlet grantNotify = Near.view(\\\\\\\\\\\\\\\"social.near\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"is_write_permission_granted\\\\\\\\\\\\\\\", {\\\\\\\\n  predecessor_id: \\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\",\\\\\\\\n  key: context.accountId + \\\\\\\\\\\\\\\"/index/notify\\\\\\\\\\\\\\\",\\\\\\\\n});\\\\\\\\nif (grantNotify === null) {\\\\\\\\n  return;\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst tokenMapping = {\\\\\\\\n  NEAR: \\\\\\\\\\\\\\\"NEAR\\\\\\\\\\\\\\\",\\\\\\\\n  USDT: {\\\\\\\\n    NEP141: {\\\\\\\\n      address: \\\\\\\\\\\\\\\"usdt.tether-token.near\\\\\\\\\\\\\\\",\\\\\\\\n    },\\\\\\\\n  },\\\\\\\\n  USDC: {\\\\\\\\n    NEP141: {\\\\\\\\n      address:\\\\\\\\n        \\\\\\\\\\\\\\\"17208628f84f5d6ad33f0da3bbbeb27ffcb398eac501a31bd6ad2011e36133a1\\\\\\\\\\\\\\\",\\\\\\\\n    },\\\\\\\\n  },\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst onSubmit = () => {\\\\\\\\n  let labels = state.labelStrings;\\\\\\\\n  var body = {\\\\\\\\n    Comment: { description: state.description, comment_version: \\\\\\\\\\\\\\\"V2\\\\\\\\\\\\\\\" },\\\\\\\\n    Idea: {\\\\\\\\n      name: state.name,\\\\\\\\n      description: state.description,\\\\\\\\n      idea_version: \\\\\\\\\\\\\\\"V1\\\\\\\\\\\\\\\",\\\\\\\\n    },\\\\\\\\n    Solution: {\\\\\\\\n      name: state.name,\\\\\\\\n      description: generateDescription(\\\\\\\\n        state.description,\\\\\\\\n        state.amount,\\\\\\\\n        state.token,\\\\\\\\n        state.supervisor,\\\\\\\\n        state.seekingFunding\\\\\\\\n      ),\\\\\\\\n      solution_version: \\\\\\\\\\\\\\\"V1\\\\\\\\\\\\\\\",\\\\\\\\n    },\\\\\\\\n    Attestation: {\\\\\\\\n      name: state.name,\\\\\\\\n      description: state.description,\\\\\\\\n      attestation_version: \\\\\\\\\\\\\\\"V1\\\\\\\\\\\\\\\",\\\\\\\\n    },\\\\\\\\n    Sponsorship: {\\\\\\\\n      name: state.name,\\\\\\\\n      description: state.description,\\\\\\\\n      amount: state.amount,\\\\\\\\n      sponsorship_token: tokenMapping[state.token],\\\\\\\\n      supervisor: state.supervisor,\\\\\\\\n      sponsorship_version: \\\\\\\\\\\\\\\"V1\\\\\\\\\\\\\\\",\\\\\\\\n    },\\\\\\\\n    Github: {\\\\\\\\n      name: state.name,\\\\\\\\n      description: state.description,\\\\\\\\n      github_version: \\\\\\\\\\\\\\\"V0\\\\\\\\\\\\\\\",\\\\\\\\n      github_link: state.githubLink,\\\\\\\\n    },\\\\\\\\n  }[postType];\\\\\\\\n  body[\\\\\\\\\\\\\\\"post_type\\\\\\\\\\\\\\\"] = postType;\\\\\\\\n  if (!context.accountId) {\\\\\\\\n    return;\\\\\\\\n  }\\\\\\\\n  let txn = [];\\\\\\\\n  if (mode == \\\\\\\\\\\\\\\"Create\\\\\\\\\\\\\\\") {\\\\\\\\n    props.onDraftStateChange(\\\\\\\\n      Object.assign({}, state, { parent_post_id: parentId })\\\\\\\\n    );\\\\\\\\n    txn.push({\\\\\\\\n      contractName: \\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\",\\\\\\\\n      methodName: \\\\\\\\\\\\\\\"add_post\\\\\\\\\\\\\\\",\\\\\\\\n      args: {\\\\\\\\n        parent_id: parentId,\\\\\\\\n        labels,\\\\\\\\n        body,\\\\\\\\n      },\\\\\\\\n      gas: Big(10).pow(14),\\\\\\\\n    });\\\\\\\\n  } else if (mode == \\\\\\\\\\\\\\\"Edit\\\\\\\\\\\\\\\") {\\\\\\\\n    props.onDraftStateChange(\\\\\\\\n      Object.assign({}, state, { edit_post_id: postId })\\\\\\\\n    );\\\\\\\\n    txn.push({\\\\\\\\n      contractName: \\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\",\\\\\\\\n      methodName: \\\\\\\\\\\\\\\"edit_post\\\\\\\\\\\\\\\",\\\\\\\\n      args: {\\\\\\\\n        id: postId,\\\\\\\\n        labels,\\\\\\\\n        body,\\\\\\\\n      },\\\\\\\\n      gas: Big(10).pow(14),\\\\\\\\n    });\\\\\\\\n  }\\\\\\\\n  if (mode == \\\\\\\\\\\\\\\"Create\\\\\\\\\\\\\\\" || mode == \\\\\\\\\\\\\\\"Edit\\\\\\\\\\\\\\\") {\\\\\\\\n    if (grantNotify === false) {\\\\\\\\n      txn.unshift({\\\\\\\\n        contractName: \\\\\\\\\\\\\\\"social.near\\\\\\\\\\\\\\\",\\\\\\\\n        methodName: \\\\\\\\\\\\\\\"grant_write_permission\\\\\\\\\\\\\\\",\\\\\\\\n        args: {\\\\\\\\n          predecessor_id: \\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\",\\\\\\\\n          keys: [context.accountId + \\\\\\\\\\\\\\\"/index/notify\\\\\\\\\\\\\\\"],\\\\\\\\n        },\\\\\\\\n        gas: Big(10).pow(14),\\\\\\\\n      });\\\\\\\\n    }\\\\\\\\n    Near.call(txn);\\\\\\\\n  }\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst normalizeLabel = (label) =>\\\\\\\\n  label\\\\\\\\n    .replaceAll(/[- \\\\\\\\\\\\\\\\.]/g, \\\\\\\\\\\\\\\"_\\\\\\\\\\\\\\\")\\\\\\\\n    .replaceAll(/[^\\\\\\\\\\\\\\\\w]+/g, \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\")\\\\\\\\n    .replaceAll(/_+/g, \\\\\\\\\\\\\\\"-\\\\\\\\\\\\\\\")\\\\\\\\n    .replace(/^-+/, \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\")\\\\\\\\n    .replace(/-+$/, \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\")\\\\\\\\n    .toLowerCase()\\\\\\\\n    .trim(\\\\\\\\\\\\\\\"-\\\\\\\\\\\\\\\");\\\\\\\\n\\\\\\\\nconst checkLabel = (label) => {\\\\\\\\n  Near.asyncView(\\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"is_allowed_to_use_labels\\\\\\\\\\\\\\\", {\\\\\\\\n    editor: context.accountId,\\\\\\\\n    labels: [label],\\\\\\\\n  }).then((allowed) => {\\\\\\\\n    if (allowed) {\\\\\\\\n      State.update({ warning: \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\" });\\\\\\\\n    } else {\\\\\\\\n      State.update({\\\\\\\\n        warning:\\\\\\\\n          \\\\\\\\\\\\'The label \\\\\\\\\\\\\\\"\\\\\\\\\\\\' +\\\\\\\\n          label +\\\\\\\\n          \\\\\\\\\\\\'\\\\\\\\\\\\\\\" is protected and can only be added by moderators\\\\\\\\\\\\',\\\\\\\\n      });\\\\\\\\n      return;\\\\\\\\n    }\\\\\\\\n  });\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst setLabels = (labels) => {\\\\\\\\n  labels = labels.map((o) => {\\\\\\\\n    o.name = normalizeLabel(o.name);\\\\\\\\n    return o;\\\\\\\\n  });\\\\\\\\n  if (labels.length < state.labels.length) {\\\\\\\\n    let oldLabels = new Set(state.labels.map((label) => label.name));\\\\\\\\n    for (let label of labels) {\\\\\\\\n      oldLabels.delete(label.name);\\\\\\\\n    }\\\\\\\\n    let removed = oldLabels.values().next().value;\\\\\\\\n    Near.asyncView(\\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"is_allowed_to_use_labels\\\\\\\\\\\\\\\", {\\\\\\\\n      editor: context.accountId,\\\\\\\\n      labels: [removed],\\\\\\\\n    }).then((allowed) => {\\\\\\\\n      if (allowed) {\\\\\\\\n        let labelStrings = labels.map(({ name }) => name);\\\\\\\\n        State.update({ labels, labelStrings });\\\\\\\\n      } else {\\\\\\\\n        State.update({\\\\\\\\n          warning:\\\\\\\\n            \\\\\\\\\\\\'The label \\\\\\\\\\\\\\\"\\\\\\\\\\\\' +\\\\\\\\n            removed +\\\\\\\\n            \\\\\\\\\\\\'\\\\\\\\\\\\\\\" is protected and can only be updated by moderators\\\\\\\\\\\\',\\\\\\\\n        });\\\\\\\\n        return;\\\\\\\\n      }\\\\\\\\n    });\\\\\\\\n  } else {\\\\\\\\n    let labelStrings = labels.map((o) => {\\\\\\\\n      return o.name;\\\\\\\\n    });\\\\\\\\n    State.update({ labels, labelStrings });\\\\\\\\n  }\\\\\\\\n};\\\\\\\\nconst existingLabelStrings =\\\\\\\\n  Near.view(\\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"get_all_allowed_labels\\\\\\\\\\\\\\\", {\\\\\\\\n    editor: context.accountId,\\\\\\\\n  }) ?? [];\\\\\\\\nconst existingLabelSet = new Set(existingLabelStrings);\\\\\\\\nconst existingLabels = existingLabelStrings\\\\\\\\n  .filter((it) => it !== \\\\\\\\\\\\\\\"blog\\\\\\\\\\\\\\\") // remove blog label so users cannot publish blogs from feed\\\\\\\\n  .map((s) => {\\\\\\\\n    return { name: s };\\\\\\\\n  });\\\\\\\\n\\\\\\\\nconst labelEditor = (\\\\\\\\n  <div className=\\\\\\\\\\\\\\\"col-lg-12  mb-2\\\\\\\\\\\\\\\">\\\\\\\\n    Labels:\\\\\\\\n    <Typeahead\\\\\\\\n      multiple\\\\\\\\n      labelKey=\\\\\\\\\\\\\\\"name\\\\\\\\\\\\\\\"\\\\\\\\n      onInputChange={checkLabel}\\\\\\\\n      onChange={setLabels}\\\\\\\\n      options={existingLabels}\\\\\\\\n      placeholder=\\\\\\\\\\\\\\\"near.social, widget, NEP, standard, protocol, tool\\\\\\\\\\\\\\\"\\\\\\\\n      selected={state.labels}\\\\\\\\n      positionFixed\\\\\\\\n      allowNew={(results, props) => {\\\\\\\\n        return (\\\\\\\\n          !existingLabelSet.has(props.text) &&\\\\\\\\n          props.text.toLowerCase() !== \\\\\\\\\\\\\\\"blog\\\\\\\\\\\\\\\" && // dont allow adding \\\\\\\\\\\\\\\"Blog\\\\\\\\\\\\\\\"\\\\\\\\n          props.selected.filter((selected) => selected.name === props.text)\\\\\\\\n            .length == 0 &&\\\\\\\\n          Near.view(\\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"is_allowed_to_use_labels\\\\\\\\\\\\\\\", {\\\\\\\\n            editor: context.accountId,\\\\\\\\n            labels: [props.text],\\\\\\\\n          })\\\\\\\\n        );\\\\\\\\n      }}\\\\\\\\n    />\\\\\\\\n  </div>\\\\\\\\n);\\\\\\\\n\\\\\\\\nconst githubLinkDiv = (\\\\\\\\n  <div className=\\\\\\\\\\\\\\\"col-lg-12  mb-2\\\\\\\\\\\\\\\">\\\\\\\\n    Github Issue URL:\\\\\\\\n    <input\\\\\\\\n      type=\\\\\\\\\\\\\\\"text\\\\\\\\\\\\\\\"\\\\\\\\n      value={state.githubLink}\\\\\\\\n      onChange={(event) => State.update({ githubLink: event.target.value })}\\\\\\\\n    />\\\\\\\\n  </div>\\\\\\\\n);\\\\\\\\n\\\\\\\\nconst nameDiv = (\\\\\\\\n  <div className=\\\\\\\\\\\\\\\"col-lg-6  mb-2\\\\\\\\\\\\\\\">\\\\\\\\n    Title:\\\\\\\\n    <input\\\\\\\\n      type=\\\\\\\\\\\\\\\"text\\\\\\\\\\\\\\\"\\\\\\\\n      value={state.name}\\\\\\\\n      onChange={(event) => State.update({ name: event.target.value })}\\\\\\\\n    />\\\\\\\\n  </div>\\\\\\\\n);\\\\\\\\n\\\\\\\\nconst amountDiv = (\\\\\\\\n  <div className=\\\\\\\\\\\\\\\"col-lg-6  mb-2\\\\\\\\\\\\\\\">\\\\\\\\n    Amount:\\\\\\\\n    <input\\\\\\\\n      type=\\\\\\\\\\\\\\\"text\\\\\\\\\\\\\\\"\\\\\\\\n      value={state.amount}\\\\\\\\n      onChange={(event) => State.update({ amount: event.target.value })}\\\\\\\\n    />\\\\\\\\n  </div>\\\\\\\\n);\\\\\\\\n\\\\\\\\nconst tokenDiv = (\\\\\\\\n  <div className=\\\\\\\\\\\\\\\"col-lg-6 mb-2\\\\\\\\\\\\\\\">\\\\\\\\n    Currency\\\\\\\\n    <select\\\\\\\\n      onChange={(event) => State.update({ token: event.target.value })}\\\\\\\\n      class=\\\\\\\\\\\\\\\"form-select\\\\\\\\\\\\\\\"\\\\\\\\n      aria-label=\\\\\\\\\\\\\\\"Select currency\\\\\\\\\\\\\\\"\\\\\\\\n      value={state.token}\\\\\\\\n    >\\\\\\\\n      <option value=\\\\\\\\\\\\\\\"USDT\\\\\\\\\\\\\\\">USDT</option>\\\\\\\\n      <option value=\\\\\\\\\\\\\\\"NEAR\\\\\\\\\\\\\\\">NEAR</option>\\\\\\\\n      <option value=\\\\\\\\\\\\\\\"USDC\\\\\\\\\\\\\\\">USDC</option>\\\\\\\\n    </select>\\\\\\\\n  </div>\\\\\\\\n);\\\\\\\\n\\\\\\\\nconst supervisorDiv = (\\\\\\\\n  <div className=\\\\\\\\\\\\\\\"col-lg-6 mb-2\\\\\\\\\\\\\\\">\\\\\\\\n    Supervisor:\\\\\\\\n    <input\\\\\\\\n      type=\\\\\\\\\\\\\\\"text\\\\\\\\\\\\\\\"\\\\\\\\n      value={state.supervisor}\\\\\\\\n      onChange={(event) => State.update({ supervisor: event.target.value })}\\\\\\\\n    />\\\\\\\\n  </div>\\\\\\\\n);\\\\\\\\n\\\\\\\\nconst callDescriptionDiv = () => {\\\\\\\\n  return (\\\\\\\\n    <div className=\\\\\\\\\\\\\\\"col-lg-12  mb-2\\\\\\\\\\\\\\\">\\\\\\\\n      Description:\\\\\\\\n      <br />\\\\\\\\n      <Widget\\\\\\\\n        src={\\\\\\\\\\\\\\\"devhub.near/widget/devhub.components.molecule.MarkdownEditor\\\\\\\\\\\\\\\"}\\\\\\\\n        props={{\\\\\\\\n          data: { handler: state.handler, content: state.description },\\\\\\\\n          onChange: (content) => {\\\\\\\\n            State.update({ description: content, handler: \\\\\\\\\\\\\\\"update\\\\\\\\\\\\\\\" });\\\\\\\\n            textareaInputHandler(content);\\\\\\\\n          },\\\\\\\\n        }}\\\\\\\\n      />\\\\\\\\n      {autocompleteEnabled && state.showAccountAutocomplete && (\\\\\\\\n        <AutoComplete>\\\\\\\\n          <Widget\\\\\\\\n            src=\\\\\\\\\\\\\\\"devhub.near/widget/devhub.components.molecule.AccountAutocomplete\\\\\\\\\\\\\\\"\\\\\\\\n            props={{\\\\\\\\n              term: state.mentionInput,\\\\\\\\n              onSelect: autoCompleteAccountId,\\\\\\\\n              onClose: () => State.update({ showAccountAutocomplete: false }),\\\\\\\\n            }}\\\\\\\\n          />\\\\\\\\n        </AutoComplete>\\\\\\\\n      )}\\\\\\\\n    </div>\\\\\\\\n  );\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst disclaimer = (\\\\\\\\n  <p>\\\\\\\\n    <i>\\\\\\\\n      * Note, all projects that were granted sponsorships are required to pass\\\\\\\\n      KYC to receive the funding.\\\\\\\\n    </i>\\\\\\\\n  </p>\\\\\\\\n);\\\\\\\\n\\\\\\\\nconst isFundraisingDiv = (\\\\\\\\n  // This is jank with just btns and not radios. But the radios were glitchy af\\\\\\\\n  <>\\\\\\\\n    <div class=\\\\\\\\\\\\\\\"mb-2\\\\\\\\\\\\\\\">\\\\\\\\n      <p class=\\\\\\\\\\\\\\\"fs-6 fw-bold mb-1\\\\\\\\\\\\\\\">\\\\\\\\n        Are you seeking funding for your solution?\\\\\\\\n        <span class=\\\\\\\\\\\\\\\"text-muted fw-normal\\\\\\\\\\\\\\\">(Optional)</span>\\\\\\\\n      </p>\\\\\\\\n      <div class=\\\\\\\\\\\\\\\"form-check form-check-inline\\\\\\\\\\\\\\\">\\\\\\\\n        <label class=\\\\\\\\\\\\\\\"form-check-label\\\\\\\\\\\\\\\">\\\\\\\\n          <button\\\\\\\\n            className=\\\\\\\\\\\\\\\"btn btn-light p-0\\\\\\\\\\\\\\\"\\\\\\\\n            style={{\\\\\\\\n              backgroundColor: state.seekingFunding ? \\\\\\\\\\\\\\\"#0C7283\\\\\\\\\\\\\\\" : \\\\\\\\\\\\\\\"inherit\\\\\\\\\\\\\\\",\\\\\\\\n              color: \\\\\\\\\\\\\\\"#f3f3f3\\\\\\\\\\\\\\\",\\\\\\\\n              border: \\\\\\\\\\\\\\\"solid #D9D9D9\\\\\\\\\\\\\\\",\\\\\\\\n              borderRadius: \\\\\\\\\\\\\\\"100%\\\\\\\\\\\\\\\",\\\\\\\\n              height: \\\\\\\\\\\\\\\"20px\\\\\\\\\\\\\\\",\\\\\\\\n              width: \\\\\\\\\\\\\\\"20px\\\\\\\\\\\\\\\",\\\\\\\\n            }}\\\\\\\\n            onClick={() => State.update({ seekingFunding: true })}\\\\\\\\n          />\\\\\\\\n          Yes\\\\\\\\n        </label>\\\\\\\\n      </div>\\\\\\\\n      <div class=\\\\\\\\\\\\\\\"form-check form-check-inline\\\\\\\\\\\\\\\">\\\\\\\\n        <label class=\\\\\\\\\\\\\\\"form-check-label\\\\\\\\\\\\\\\">\\\\\\\\n          <button\\\\\\\\n            className=\\\\\\\\\\\\\\\"btn btn-light p-0\\\\\\\\\\\\\\\"\\\\\\\\n            style={{\\\\\\\\n              backgroundColor: !state.seekingFunding ? \\\\\\\\\\\\\\\"#0C7283\\\\\\\\\\\\\\\" : \\\\\\\\\\\\\\\"inherit\\\\\\\\\\\\\\\",\\\\\\\\n              color: \\\\\\\\\\\\\\\"#f3f3f3\\\\\\\\\\\\\\\",\\\\\\\\n              border: \\\\\\\\\\\\\\\"solid #D9D9D9\\\\\\\\\\\\\\\",\\\\\\\\n              borderRadius: \\\\\\\\\\\\\\\"100%\\\\\\\\\\\\\\\",\\\\\\\\n              height: \\\\\\\\\\\\\\\"20px\\\\\\\\\\\\\\\",\\\\\\\\n              width: \\\\\\\\\\\\\\\"20px\\\\\\\\\\\\\\\",\\\\\\\\n            }}\\\\\\\\n            onClick={() => State.update({ seekingFunding: false })}\\\\\\\\n          />\\\\\\\\n          No\\\\\\\\n        </label>\\\\\\\\n      </div>\\\\\\\\n    </div>\\\\\\\\n  </>\\\\\\\\n);\\\\\\\\n\\\\\\\\nconst fundraisingDiv = (\\\\\\\\n  <div class=\\\\\\\\\\\\\\\"d-flex flex-column mb-2\\\\\\\\\\\\\\\">\\\\\\\\n    <div className=\\\\\\\\\\\\\\\"col-lg-6 mb-2\\\\\\\\\\\\\\\">\\\\\\\\n      Currency\\\\\\\\n      <select\\\\\\\\n        onChange={(event) => State.update({ token: event.target.value })}\\\\\\\\n        class=\\\\\\\\\\\\\\\"form-select\\\\\\\\\\\\\\\"\\\\\\\\n        aria-label=\\\\\\\\\\\\\\\"Default select example\\\\\\\\\\\\\\\"\\\\\\\\n        value={state.token}\\\\\\\\n      >\\\\\\\\n        <option value=\\\\\\\\\\\\\\\"USDT\\\\\\\\\\\\\\\">USDT</option>\\\\\\\\n        <option value=\\\\\\\\\\\\\\\"NEAR\\\\\\\\\\\\\\\">NEAR</option>\\\\\\\\n        <option value=\\\\\\\\\\\\\\\"USDC\\\\\\\\\\\\\\\">USDC</option>\\\\\\\\n      </select>\\\\\\\\n    </div>\\\\\\\\n    <div className=\\\\\\\\\\\\\\\"col-lg-6 mb-2\\\\\\\\\\\\\\\">\\\\\\\\n      Requested amount\\\\\\\\n      <span class=\\\\\\\\\\\\\\\"text-muted fw-normal\\\\\\\\\\\\\\\">(Numbers Only)</span>\\\\\\\\n      <input\\\\\\\\n        type=\\\\\\\\\\\\\\\"number\\\\\\\\\\\\\\\"\\\\\\\\n        value={parseInt(state.amount) > 0 ? state.amount : \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\"}\\\\\\\\n        min={0}\\\\\\\\n        onChange={(event) => {\\\\\\\\n          State.update({\\\\\\\\n            amount: Number(\\\\\\\\n              event.target.value.toString().replace(/e/g, \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\")\\\\\\\\n            ).toString(),\\\\\\\\n          });\\\\\\\\n        }}\\\\\\\\n      />\\\\\\\\n    </div>\\\\\\\\n    <div className=\\\\\\\\\\\\\\\"col-lg-6 mb-2\\\\\\\\\\\\\\\">\\\\\\\\n      <p class=\\\\\\\\\\\\\\\"mb-1\\\\\\\\\\\\\\\">\\\\\\\\n        Requested sponsor\\\\\\\\n        <span class=\\\\\\\\\\\\\\\"text-muted fw-normal\\\\\\\\\\\\\\\">(Optional)</span>\\\\\\\\n      </p>\\\\\\\\n      <p style={{ fontSize: \\\\\\\\\\\\\\\"13px\\\\\\\\\\\\\\\" }} class=\\\\\\\\\\\\\\\"m-0 text-muted fw-light\\\\\\\\\\\\\\\">\\\\\\\\n        If you are requesting funding from a specific sponsor, please enter\\\\\\\\n        their username.\\\\\\\\n      </p>\\\\\\\\n      <div class=\\\\\\\\\\\\\\\"input-group flex-nowrap\\\\\\\\\\\\\\\">\\\\\\\\n        <span class=\\\\\\\\\\\\\\\"input-group-text\\\\\\\\\\\\\\\" id=\\\\\\\\\\\\\\\"addon-wrapping\\\\\\\\\\\\\\\">\\\\\\\\n          @\\\\\\\\n        </span>\\\\\\\\n        <input\\\\\\\\n          type=\\\\\\\\\\\\\\\"text\\\\\\\\\\\\\\\"\\\\\\\\n          class=\\\\\\\\\\\\\\\"form-control\\\\\\\\\\\\\\\"\\\\\\\\n          placeholder=\\\\\\\\\\\\\\\"Enter username\\\\\\\\\\\\\\\"\\\\\\\\n          value={state.supervisor}\\\\\\\\n          onChange={(event) => State.update({ supervisor: event.target.value })}\\\\\\\\n        />\\\\\\\\n      </div>\\\\\\\\n    </div>\\\\\\\\n  </div>\\\\\\\\n);\\\\\\\\n\\\\\\\\nfunction generateDescription(text, amount, token, supervisor, seekingFunding) {\\\\\\\\n  const fundingText =\\\\\\\\n    amount > 0 && token ? `###### Requested amount: ${amount} ${token}\\\\\\\\\\\\\\\\n` : \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\";\\\\\\\\n  const supervisorText = supervisor\\\\\\\\n    ? `###### Requested sponsor: @${supervisor}\\\\\\\\\\\\\\\\n`\\\\\\\\n    : \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\";\\\\\\\\n  return seekingFunding ? `${fundingText}${supervisorText}${text}` : text;\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst [tab, setTab] = useState(\\\\\\\\\\\\\\\"editor\\\\\\\\\\\\\\\");\\\\\\\\n\\\\\\\\nconst renamedPostType = postType == \\\\\\\\\\\\\\\"Submission\\\\\\\\\\\\\\\" ? \\\\\\\\\\\\\\\"Solution\\\\\\\\\\\\\\\" : postType;\\\\\\\\n// Below there is a weird code with fields.includes(\\\\\\\\\\\\\\\"githubLink\\\\\\\\\\\\\\\") ternary operator.\\\\\\\\n// This is to hack around rendering bug of near.social.\\\\\\\\nreturn (\\\\\\\\n  <div className=\\\\\\\\\\\\\\\"card\\\\\\\\\\\\\\\">\\\\\\\\n    <div className=\\\\\\\\\\\\\\\"card-header\\\\\\\\\\\\\\\">\\\\\\\\n      <div>\\\\\\\\n        <ul class=\\\\\\\\\\\\\\\"nav nav-tabs\\\\\\\\\\\\\\\">\\\\\\\\n          <li class=\\\\\\\\\\\\\\\"nav-item\\\\\\\\\\\\\\\">\\\\\\\\n            <button\\\\\\\\n              class={`nav-link ${tab === \\\\\\\\\\\\\\\"editor\\\\\\\\\\\\\\\" ? \\\\\\\\\\\\\\\"active\\\\\\\\\\\\\\\" : \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\"}`}\\\\\\\\n              onClick={() => setTab(\\\\\\\\\\\\\\\"editor\\\\\\\\\\\\\\\")}\\\\\\\\n            >\\\\\\\\n              Editor\\\\\\\\n            </button>\\\\\\\\n          </li>\\\\\\\\n          <li class=\\\\\\\\\\\\\\\"nav-item\\\\\\\\\\\\\\\">\\\\\\\\n            <button\\\\\\\\n              class={`nav-link ${tab === \\\\\\\\\\\\\\\"preview\\\\\\\\\\\\\\\" ? \\\\\\\\\\\\\\\"active\\\\\\\\\\\\\\\" : \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\"}`}\\\\\\\\n              onClick={() => setTab(\\\\\\\\\\\\\\\"preview\\\\\\\\\\\\\\\")}\\\\\\\\n            >\\\\\\\\n              Preview\\\\\\\\n            </button>\\\\\\\\n          </li>\\\\\\\\n        </ul>\\\\\\\\n      </div>\\\\\\\\n      {tab === \\\\\\\\\\\\\\\"editor\\\\\\\\\\\\\\\" && (\\\\\\\\n        <div className=\\\\\\\\\\\\\\\"my-3\\\\\\\\\\\\\\\">\\\\\\\\n          {mode} {renamedPostType}\\\\\\\\n        </div>\\\\\\\\n      )}\\\\\\\\n      {tab === \\\\\\\\\\\\\\\"preview\\\\\\\\\\\\\\\" && <div className=\\\\\\\\\\\\\\\"my-3\\\\\\\\\\\\\\\">Post Preview</div>}\\\\\\\\n    </div>\\\\\\\\n\\\\\\\\n    {tab === \\\\\\\\\\\\\\\"editor\\\\\\\\\\\\\\\" && (\\\\\\\\n      <div class=\\\\\\\\\\\\\\\"card-body\\\\\\\\\\\\\\\">\\\\\\\\n        {state.warning && (\\\\\\\\n          <div\\\\\\\\n            class=\\\\\\\\\\\\\\\"alert alert-warning alert-dismissible fade show\\\\\\\\\\\\\\\"\\\\\\\\n            role=\\\\\\\\\\\\\\\"alert\\\\\\\\\\\\\\\"\\\\\\\\n          >\\\\\\\\n            {state.warning}\\\\\\\\n            <button\\\\\\\\n              type=\\\\\\\\\\\\\\\"button\\\\\\\\\\\\\\\"\\\\\\\\n              class=\\\\\\\\\\\\\\\"btn-close\\\\\\\\\\\\\\\"\\\\\\\\n              data-bs-dismiss=\\\\\\\\\\\\\\\"alert\\\\\\\\\\\\\\\"\\\\\\\\n              aria-label=\\\\\\\\\\\\\\\"Close\\\\\\\\\\\\\\\"\\\\\\\\n              onClick={() => State.update({ warning: \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\" })}\\\\\\\\n            ></button>\\\\\\\\n          </div>\\\\\\\\n        )}\\\\\\\\n        {/* This statement around the githubLinkDiv creates a weird render bug\\\\\\\\n      where the title renders extra on state change. */}\\\\\\\\n        {fields.includes(\\\\\\\\\\\\\\\"githubLink\\\\\\\\\\\\\\\") ? (\\\\\\\\n          <div className=\\\\\\\\\\\\\\\"row\\\\\\\\\\\\\\\">\\\\\\\\n            {fields.includes(\\\\\\\\\\\\\\\"githubLink\\\\\\\\\\\\\\\") && githubLinkDiv}\\\\\\\\n            {labelEditor}\\\\\\\\n            {fields.includes(\\\\\\\\\\\\\\\"name\\\\\\\\\\\\\\\") && nameDiv}\\\\\\\\n            {fields.includes(\\\\\\\\\\\\\\\"description\\\\\\\\\\\\\\\") && callDescriptionDiv()}\\\\\\\\n          </div>\\\\\\\\n        ) : (\\\\\\\\n          <div className=\\\\\\\\\\\\\\\"row\\\\\\\\\\\\\\\">\\\\\\\\n            {labelEditor}\\\\\\\\n            {fields.includes(\\\\\\\\\\\\\\\"name\\\\\\\\\\\\\\\") && nameDiv}\\\\\\\\n            {fields.includes(\\\\\\\\\\\\\\\"amount\\\\\\\\\\\\\\\") && amountDiv}\\\\\\\\n            {fields.includes(\\\\\\\\\\\\\\\"sponsorship_token\\\\\\\\\\\\\\\") && tokenDiv}\\\\\\\\n            {fields.includes(\\\\\\\\\\\\\\\"supervisor\\\\\\\\\\\\\\\") && supervisorDiv}\\\\\\\\n            {fields.includes(\\\\\\\\\\\\\\\"description\\\\\\\\\\\\\\\") && callDescriptionDiv()}\\\\\\\\n            {fields.includes(\\\\\\\\\\\\\\\"fund_raising\\\\\\\\\\\\\\\") && isFundraisingDiv}\\\\\\\\n            {state.seekingFunding &&\\\\\\\\n              fields.includes(\\\\\\\\\\\\\\\"fund_raising\\\\\\\\\\\\\\\") &&\\\\\\\\n              fundraisingDiv}\\\\\\\\n          </div>\\\\\\\\n        )}\\\\\\\\n        <button\\\\\\\\n          style={{\\\\\\\\n            width: \\\\\\\\\\\\\\\"7rem\\\\\\\\\\\\\\\",\\\\\\\\n            backgroundColor: \\\\\\\\\\\\\\\"#0C7283\\\\\\\\\\\\\\\",\\\\\\\\n            color: \\\\\\\\\\\\\\\"#f3f3f3\\\\\\\\\\\\\\\",\\\\\\\\n          }}\\\\\\\\n          disabled={state.seekingFunding && (!state.amount || state.amount < 1)}\\\\\\\\n          className=\\\\\\\\\\\\\\\"btn btn-light mb-2 p-3\\\\\\\\\\\\\\\"\\\\\\\\n          onClick={onSubmit}\\\\\\\\n        >\\\\\\\\n          Submit\\\\\\\\n        </button>\\\\\\\\n        <button\\\\\\\\n          style={{\\\\\\\\n            width: \\\\\\\\\\\\\\\"7rem\\\\\\\\\\\\\\\",\\\\\\\\n            backgroundColor: \\\\\\\\\\\\\\\"#fff\\\\\\\\\\\\\\\",\\\\\\\\n            color: \\\\\\\\\\\\\\\"#000\\\\\\\\\\\\\\\",\\\\\\\\n          }}\\\\\\\\n          className=\\\\\\\\\\\\\\\"btn btn-light mb-2 p-3\\\\\\\\\\\\\\\"\\\\\\\\n          onClick={toggleEditor}\\\\\\\\n        >\\\\\\\\n          Cancel\\\\\\\\n        </button>\\\\\\\\n        {disclaimer}\\\\\\\\n      </div>\\\\\\\\n    )}\\\\\\\\n    {tab === \\\\\\\\\\\\\\\"preview\\\\\\\\\\\\\\\" && (\\\\\\\\n      <div class=\\\\\\\\\\\\\\\"card-body\\\\\\\\\\\\\\\">\\\\\\\\n        <Widget\\\\\\\\n          src=\\\\\\\\\\\\\\\"devhub.near/widget/devhub.entity.post.Post\\\\\\\\\\\\\\\"\\\\\\\\n          props={{\\\\\\\\n            isPreview: true,\\\\\\\\n            id: 0, // irrelevant\\\\\\\\n            post: {\\\\\\\\n              author_id: state.author_id,\\\\\\\\n              likes: [],\\\\\\\\n              snapshot: {\\\\\\\\n                editor_id: state.editor_id,\\\\\\\\n                labels: state.labelStrings,\\\\\\\\n                post_type: postType,\\\\\\\\n                name: state.name,\\\\\\\\n                description:\\\\\\\\n                  postType == \\\\\\\\\\\\\\\"Solution\\\\\\\\\\\\\\\"\\\\\\\\n                    ? generateDescription(\\\\\\\\n                        state.description,\\\\\\\\n                        state.amount,\\\\\\\\n                        state.token,\\\\\\\\n                        state.supervisor,\\\\\\\\n                        state.seekingFunding\\\\\\\\n                      )\\\\\\\\n                    : state.description,\\\\\\\\n                amount: state.amount,\\\\\\\\n                sponsorship_token: state.token,\\\\\\\\n                supervisor: state.supervisor,\\\\\\\\n                github_link: state.githubLink,\\\\\\\\n              },\\\\\\\\n            },\\\\\\\\n          }}\\\\\\\\n        />\\\\\\\\n      </div>\\\\\\\\n    )}\\\\\\\\n  </div>\\\\\\\\n);\\\\\\\\n\"}}}}}"
      }
    ],
    "actions_agg": {
      "deposit": 0
    },
    "outcomes": {
      "status": true
    },
    "outcomes_agg": {
      "transaction_fee": 1.1025999159731e+21
    }
  },
  {
    "id": "1667957263",
    "receipt_id": "5zuRnA7iCTfc38EnrPRC7pkweSYKFcjvZ9nYqqwERVee",
    "predecessor_account_id": "system",
    "receiver_account_id": "devhub.near",
    "receipt_kind": "ACTION",
    "receipt_block": {
      "block_hash": "GkiMSZEFLuXk9scfY7gMeQFTbWhaxXPSXHRs56pke8xa",
      "block_height": 107407481,
      "block_timestamp": 1702006628334919700
    },
    "receipt_outcome": {
      "gas_burnt": 223182562500,
      "tokens_burnt": 0,
      "executor_account_id": "devhub.near",
      "status": true
    },
    "transaction_hash": "7QSjZ7jzQHFDttWLSPZXRddR4RAi4S9QT5wFJo3Hbywv",
    "included_in_block_hash": "2UPTQ6zVRxc7YMSQ24bnPzMrGQN2e6ceyR4xGzpQbv6e",
    "block_timestamp": "1702006626480491344",
    "block": {
      "block_height": 107407479
    },
    "receipt_conversion_tokens_burnt": "247314723701800000000",
    "actions": [
      {
        "action": "TRANSFER",
        "method": null,
        "deposit": 1.8820258338708204e+23,
        "fee": 0,
        "args": null
      }
    ],
    "actions_agg": {
      "deposit": 0
    },
    "outcomes": {
      "status": true
    },
    "outcomes_agg": {
      "transaction_fee": 1.1025999159731e+21
    }
  },
  {
    "id": "1678662119",
    "receipt_id": "D6XLPUv1yPsByZMcekn3djLrjNaoZobGtsLbnVFg6cSy",
    "predecessor_account_id": "devhub.near",
    "receiver_account_id": "social.near",
    "receipt_kind": "ACTION",
    "receipt_block": {
      "block_hash": "DDrJNQphCuGAgUkQ5oiuN1LYa8DH6wkcuLny9CJ4FvDs",
      "block_height": 107503348,
      "block_timestamp": 1702110907129058800
    },
    "receipt_outcome": {
      "gas_burnt": 12924967356444,
      "tokens_burnt": 1.2924967356444e+21,
      "executor_account_id": "social.near",
      "status": true
    },
    "transaction_hash": "CUiV8ED9nn3A33nDGvw8YggWc3q8yTvurSuuRcWMp2jz",
    "included_in_block_hash": "C7rGAdgurzdMo77z5L6YzF3CLF2q6w6MiZe8NSCSqbSC",
    "block_timestamp": "1702110905995107017",
    "block": {
      "block_height": 107503347
    },
    "receipt_conversion_tokens_burnt": "252015327750000000000",
    "actions": [
      {
        "action": "FUNCTION_CALL",
        "method": "set",
        "deposit": 0,
        "fee": 1.2924967356444e+21,
        "args": "{\"data\": {\"devhub.near\": {\"widget\": {\"devhub.page.create\": {\"\": \"State.init({\\\\\\\\n  seekingFunding: false,\\\\\\\\n  author_id: context.accountId,\\\\\\\\n  // Should be a list of objects with field \\\\\\\\\\\\\\\"name\\\\\\\\\\\\\\\".\\\\\\\\n  labels,\\\\\\\\n  // Should be a list of labels as strings.\\\\\\\\n  // Both of the label structures should be modified together.\\\\\\\\n  labelStrings: [],\\\\\\\\n  postType: \\\\\\\\\\\\\\\"Idea\\\\\\\\\\\\\\\",\\\\\\\\n  name: props.name ?? \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\",\\\\\\\\n  description: props.description ?? \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\",\\\\\\\\n  amount: props.amount ?? \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\",\\\\\\\\n  token: props.token ?? \\\\\\\\\\\\\\\"USDT\\\\\\\\\\\\\\\",\\\\\\\\n  supervisor: props.supervisor ?? \\\\\\\\\\\\\\\"neardevdao.near\\\\\\\\\\\\\\\",\\\\\\\\n  githubLink: props.githubLink ?? \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\",\\\\\\\\n  warning: \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\",\\\\\\\\n  waitForDraftStateRestore: true,\\\\\\\\n  mentionInput: \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\", // text next to @ tag\\\\\\\\n  mentionsArray: [], // all the mentions in the description\\\\\\\\n});\\\\\\\\n\\\\\\\\n/* INCLUDE: \\\\\\\\\\\\\\\"core/lib/autocomplete\\\\\\\\\\\\\\\" */\\\\\\\\n\\\\\\\\nconst autocompleteEnabled = true;\\\\\\\\n\\\\\\\\nconst AutoComplete = styled.div`\\\\\\\\n  z-index: 5;\\\\\\\\n\\\\\\\\n  > div > div {\\\\\\\\n    padding: calc(var(--padding) / 2);\\\\\\\\n  }\\\\\\\\n`;\\\\\\\\n\\\\\\\\nfunction textareaInputHandler(value) {\\\\\\\\n  const words = value.split(/\\\\\\\\\\\\\\\\s+/);\\\\\\\\n  const allMentiones = words\\\\\\\\n    .filter((word) => word.startsWith(\\\\\\\\\\\\\\\"@\\\\\\\\\\\\\\\"))\\\\\\\\n    .map((mention) => mention.slice(1));\\\\\\\\n  const newMentiones = allMentiones.filter(\\\\\\\\n    (item) => !state.mentionsArray.includes(item)\\\\\\\\n  );\\\\\\\\n\\\\\\\\n  State.update((lastKnownState) => ({\\\\\\\\n    ...lastKnownState,\\\\\\\\n    text: value,\\\\\\\\n    showAccountAutocomplete: newMentiones?.length > 0,\\\\\\\\n    mentionsArray: allMentiones,\\\\\\\\n    mentionInput: newMentiones?.[0] ?? \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\",\\\\\\\\n  }));\\\\\\\\n}\\\\\\\\n\\\\\\\\nfunction autoCompleteAccountId(id) {\\\\\\\\n  // to make sure we update the @ at correct index\\\\\\\\n  let currentIndex = 0;\\\\\\\\n  const updatedDescription = state.description.replace(\\\\\\\\n    /(?:^|\\\\\\\\\\\\\\\\s)(@[^\\\\\\\\\\\\\\\\s]*)/g,\\\\\\\\n    (match) => {\\\\\\\\n      if (currentIndex === state.mentionsArray.indexOf(state.mentionInput)) {\\\\\\\\n        currentIndex++;\\\\\\\\n        return ` @${id}`;\\\\\\\\n      } else {\\\\\\\\n        currentIndex++;\\\\\\\\n        return match;\\\\\\\\n      }\\\\\\\\n    }\\\\\\\\n  );\\\\\\\\n\\\\\\\\n  State.update((lastKnownState) => ({\\\\\\\\n    ...lastKnownState,\\\\\\\\n    handler: \\\\\\\\\\\\\\\"autocompleteSelected\\\\\\\\\\\\\\\",\\\\\\\\n    description: updatedDescription,\\\\\\\\n    showAccountAutocomplete: false,\\\\\\\\n  }));\\\\\\\\n}\\\\\\\\n/* END_INCLUDE: \\\\\\\\\\\\\\\"core/lib/autocomplete\\\\\\\\\\\\\\\" */\\\\\\\\n\\\\\\\\nconst { href } = VM.require(\\\\\\\\\\\\\\\"devhub.near/widget/core.lib.url\\\\\\\\\\\\\\\");\\\\\\\\n\\\\\\\\nconst { DRAFT_STATE_STORAGE_KEY, draftState, onDraftStateChange } = VM.require(\\\\\\\\n  \\\\\\\\\\\\\\\"devhub.near/widget/devhub.entity.post.draft\\\\\\\\\\\\\\\"\\\\\\\\n);\\\\\\\\n\\\\\\\\nif (!href) {\\\\\\\\n  return <p>Loading modules...</p>;\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst parentId = props.parentId ?? null;\\\\\\\\nconst postId = props.postId ?? null;\\\\\\\\nconst mode = props.mode ?? \\\\\\\\\\\\\\\"Create\\\\\\\\\\\\\\\";\\\\\\\\n\\\\\\\\nconst referralLabels = props.referral ? [`referral:${props.referral}`] : [];\\\\\\\\nconst labelStrings = (props.labels ? props.labels.split(\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\") : []).concat(\\\\\\\\n  referralLabels\\\\\\\\n);\\\\\\\\nconst labels = labelStrings.map((s) => {\\\\\\\\n  return { name: s };\\\\\\\\n});\\\\\\\\n\\\\\\\\nif (state.waitForDraftStateRestore) {\\\\\\\\n  const draftstatestring = Storage.privateGet(DRAFT_STATE_STORAGE_KEY);\\\\\\\\n  if (draftstatestring != null) {\\\\\\\\n    if (props.transactionHashes) {\\\\\\\\n      State.update({ waitForDraftStateRestore: false });\\\\\\\\n      Storage.privateSet(DRAFT_STATE_STORAGE_KEY, undefined);\\\\\\\\n    } else {\\\\\\\\n      try {\\\\\\\\n        const draftstate = JSON.parse(draftstatestring);\\\\\\\\n        State.update(draftstate);\\\\\\\\n      } catch (e) {\\\\\\\\n        console.error(\\\\\\\\\\\\\\\"error restoring draft\\\\\\\\\\\\\\\", draftstatestring);\\\\\\\\n      }\\\\\\\\n    }\\\\\\\\n    State.update({ waitForDraftStateRestore: false });\\\\\\\\n  }\\\\\\\\n}\\\\\\\\n\\\\\\\\n// This must be outside onClick, because Near.view returns null at first, and when the view call finished, it returns true/false.\\\\\\\\n// If checking this inside onClick, it will give `null` and we cannot tell the result is true or false.\\\\\\\\nlet grantNotify = Near.view(\\\\\\\\\\\\\\\"social.near\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"is_write_permission_granted\\\\\\\\\\\\\\\", {\\\\\\\\n  predecessor_id: \\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\",\\\\\\\\n  key: context.accountId + \\\\\\\\\\\\\\\"/index/notify\\\\\\\\\\\\\\\",\\\\\\\\n});\\\\\\\\nif (grantNotify === null) {\\\\\\\\n  return;\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst onSubmit = () => {\\\\\\\\n  Storage.privateSet(DRAFT_STATE_STORAGE_KEY, JSON.stringify(state));\\\\\\\\n\\\\\\\\n  let labels = state.labelStrings;\\\\\\\\n\\\\\\\\n  let body = {\\\\\\\\n    name: state.name,\\\\\\\\n    description: generateDescription(\\\\\\\\n      state.description,\\\\\\\\n      state.amount,\\\\\\\\n      state.token,\\\\\\\\n      state.supervisor,\\\\\\\\n      state.seekingFunding\\\\\\\\n    ),\\\\\\\\n  };\\\\\\\\n\\\\\\\\n  if (state.postType === \\\\\\\\\\\\\\\"Solution\\\\\\\\\\\\\\\") {\\\\\\\\n    body = {\\\\\\\\n      ...body,\\\\\\\\n      post_type: \\\\\\\\\\\\\\\"Solution\\\\\\\\\\\\\\\",\\\\\\\\n      solution_version: \\\\\\\\\\\\\\\"V1\\\\\\\\\\\\\\\",\\\\\\\\n    };\\\\\\\\n  } else {\\\\\\\\n    // Idea\\\\\\\\n    body = {\\\\\\\\n      ...body,\\\\\\\\n      post_type: \\\\\\\\\\\\\\\"Idea\\\\\\\\\\\\\\\",\\\\\\\\n      idea_version: \\\\\\\\\\\\\\\"V1\\\\\\\\\\\\\\\",\\\\\\\\n    };\\\\\\\\n  }\\\\\\\\n\\\\\\\\n  if (!context.accountId) return;\\\\\\\\n\\\\\\\\n  let txn = [];\\\\\\\\n  if (mode == \\\\\\\\\\\\\\\"Create\\\\\\\\\\\\\\\") {\\\\\\\\n    txn.push({\\\\\\\\n      contractName: \\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\",\\\\\\\\n      methodName: \\\\\\\\\\\\\\\"add_post\\\\\\\\\\\\\\\",\\\\\\\\n      args: {\\\\\\\\n        parent_id: parentId,\\\\\\\\n        labels,\\\\\\\\n        body: body,\\\\\\\\n      },\\\\\\\\n      gas: Big(10).pow(14),\\\\\\\\n    });\\\\\\\\n  } else if (mode == \\\\\\\\\\\\\\\"Edit\\\\\\\\\\\\\\\") {\\\\\\\\n    txn.push({\\\\\\\\n      contractName: \\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\",\\\\\\\\n      methodName: \\\\\\\\\\\\\\\"edit_post\\\\\\\\\\\\\\\",\\\\\\\\n      args: {\\\\\\\\n        id: postId,\\\\\\\\n        labels,\\\\\\\\n        body: body,\\\\\\\\n      },\\\\\\\\n      gas: Big(10).pow(14),\\\\\\\\n    });\\\\\\\\n  }\\\\\\\\n  if (mode == \\\\\\\\\\\\\\\"Create\\\\\\\\\\\\\\\" || mode == \\\\\\\\\\\\\\\"Edit\\\\\\\\\\\\\\\") {\\\\\\\\n    if (grantNotify === false) {\\\\\\\\n      txn.unshift({\\\\\\\\n        contractName: \\\\\\\\\\\\\\\"social.near\\\\\\\\\\\\\\\",\\\\\\\\n        methodName: \\\\\\\\\\\\\\\"grant_write_permission\\\\\\\\\\\\\\\",\\\\\\\\n        args: {\\\\\\\\n          predecessor_id: \\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\",\\\\\\\\n          keys: [context.accountId + \\\\\\\\\\\\\\\"/index/notify\\\\\\\\\\\\\\\"],\\\\\\\\n        },\\\\\\\\n        gas: Big(10).pow(14),\\\\\\\\n      });\\\\\\\\n    }\\\\\\\\n    Near.call(txn);\\\\\\\\n  }\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst onIdeaClick = () => {\\\\\\\\n  State.update({ postType: \\\\\\\\\\\\\\\"Idea\\\\\\\\\\\\\\\", seekingFunding: false });\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst onSolutionClick = () => {\\\\\\\\n  State.update({ postType: \\\\\\\\\\\\\\\"Solution\\\\\\\\\\\\\\\" });\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst normalizeLabel = (label) =>\\\\\\\\n  label\\\\\\\\n    .replaceAll(/[- \\\\\\\\\\\\\\\\.]/g, \\\\\\\\\\\\\\\"_\\\\\\\\\\\\\\\")\\\\\\\\n    .replaceAll(/[^\\\\\\\\\\\\\\\\w]+/g, \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\")\\\\\\\\n    .replaceAll(/_+/g, \\\\\\\\\\\\\\\"-\\\\\\\\\\\\\\\")\\\\\\\\n    .replace(/^-+/, \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\")\\\\\\\\n    .replace(/-+$/, \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\")\\\\\\\\n    .toLowerCase()\\\\\\\\n    .trim(\\\\\\\\\\\\\\\"-\\\\\\\\\\\\\\\");\\\\\\\\n\\\\\\\\nconst checkLabel = (label) => {\\\\\\\\n  Near.asyncView(\\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"is_allowed_to_use_labels\\\\\\\\\\\\\\\", {\\\\\\\\n    editor: context.accountId,\\\\\\\\n    labels: [label],\\\\\\\\n  }).then((allowed) => {\\\\\\\\n    if (allowed) {\\\\\\\\n      State.update({ warning: \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\" });\\\\\\\\n    } else {\\\\\\\\n      State.update({\\\\\\\\n        warning:\\\\\\\\n          \\\\\\\\\\\\'The label \\\\\\\\\\\\\\\"\\\\\\\\\\\\' +\\\\\\\\n          label +\\\\\\\\n          \\\\\\\\\\\\'\\\\\\\\\\\\\\\" is protected and can only be added by moderators\\\\\\\\\\\\',\\\\\\\\n      });\\\\\\\\n      return;\\\\\\\\n    }\\\\\\\\n  });\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst setLabels = (labels) => {\\\\\\\\n  labels = labels.map((o) => {\\\\\\\\n    o.name = normalizeLabel(o.name);\\\\\\\\n    return o;\\\\\\\\n  });\\\\\\\\n  if (labels.length < state.labels.length) {\\\\\\\\n    let oldLabels = new Set(state.labels.map((label) => label.name));\\\\\\\\n    for (let label of labels) {\\\\\\\\n      oldLabels.delete(label.name);\\\\\\\\n    }\\\\\\\\n    let removed = oldLabels.values().next().value;\\\\\\\\n    Near.asyncView(\\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"is_allowed_to_use_labels\\\\\\\\\\\\\\\", {\\\\\\\\n      editor: context.accountId,\\\\\\\\n      labels: [removed],\\\\\\\\n    }).then((allowed) => {\\\\\\\\n      if (allowed) {\\\\\\\\n        let labelStrings = labels.map(({ name }) => name);\\\\\\\\n        State.update({ labels, labelStrings });\\\\\\\\n      } else {\\\\\\\\n        State.update({\\\\\\\\n          warning:\\\\\\\\n            \\\\\\\\\\\\'The label \\\\\\\\\\\\\\\"\\\\\\\\\\\\' +\\\\\\\\n            removed +\\\\\\\\n            \\\\\\\\\\\\'\\\\\\\\\\\\\\\" is protected and can only be updated by moderators\\\\\\\\\\\\',\\\\\\\\n        });\\\\\\\\n        return;\\\\\\\\n      }\\\\\\\\n    });\\\\\\\\n  } else {\\\\\\\\n    let labelStrings = labels.map((o) => {\\\\\\\\n      return o.name;\\\\\\\\n    });\\\\\\\\n    State.update({ labels, labelStrings });\\\\\\\\n  }\\\\\\\\n};\\\\\\\\nconst existingLabelStrings =\\\\\\\\n  Near.view(\\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"get_all_allowed_labels\\\\\\\\\\\\\\\", {\\\\\\\\n    editor: context.accountId,\\\\\\\\n  }) ?? [];\\\\\\\\nconst existingLabelSet = new Set(existingLabelStrings);\\\\\\\\nconst existingLabels = existingLabelStrings\\\\\\\\n  .filter((it) => it !== \\\\\\\\\\\\\\\"blog\\\\\\\\\\\\\\\") // remove blog label so users cannot publish blogs from feed\\\\\\\\n  .map((s) => {\\\\\\\\n    return { name: s };\\\\\\\\n  });\\\\\\\\n\\\\\\\\nconst labelEditor = (\\\\\\\\n  <div className=\\\\\\\\\\\\\\\"col-lg-12 mb-2\\\\\\\\\\\\\\\">\\\\\\\\n    <p className=\\\\\\\\\\\\\\\"fs-6 fw-bold mb-1\\\\\\\\\\\\\\\">Labels</p>\\\\\\\\n    <Typeahead\\\\\\\\n      multiple\\\\\\\\n      labelKey=\\\\\\\\\\\\\\\"name\\\\\\\\\\\\\\\"\\\\\\\\n      onInputChange={checkLabel}\\\\\\\\n      onChange={setLabels}\\\\\\\\n      options={existingLabels}\\\\\\\\n      placeholder=\\\\\\\\\\\\\\\"near.social, widget, NEP, standard, protocol, tool\\\\\\\\\\\\\\\"\\\\\\\\n      selected={state.labels}\\\\\\\\n      positionFixed\\\\\\\\n      allowNew={(results, props) => {\\\\\\\\n        return (\\\\\\\\n          !existingLabelSet.has(props.text) &&\\\\\\\\n          props.text.toLowerCase() !== \\\\\\\\\\\\\\\"blog\\\\\\\\\\\\\\\" && // dont allow adding \\\\\\\\\\\\\\\"Blog\\\\\\\\\\\\\\\"\\\\\\\\n          props.selected.filter((selected) => selected.name === props.text)\\\\\\\\n            .length == 0 &&\\\\\\\\n          Near.view(\\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"is_allowed_to_use_labels\\\\\\\\\\\\\\\", {\\\\\\\\n            editor: context.accountId,\\\\\\\\n            labels: [props.text],\\\\\\\\n          })\\\\\\\\n        );\\\\\\\\n      }}\\\\\\\\n    />\\\\\\\\n  </div>\\\\\\\\n);\\\\\\\\n\\\\\\\\nconst nameDiv = (\\\\\\\\n  <div className=\\\\\\\\\\\\\\\"col-lg-6 mb-2\\\\\\\\\\\\\\\">\\\\\\\\n    <p className=\\\\\\\\\\\\\\\"fs-6 fw-bold mb-1\\\\\\\\\\\\\\\">Title</p>\\\\\\\\n    <input\\\\\\\\n      type=\\\\\\\\\\\\\\\"text\\\\\\\\\\\\\\\"\\\\\\\\n      value={state.name}\\\\\\\\n      onChange={(event) => State.update({ name: event.target.value })}\\\\\\\\n    />\\\\\\\\n  </div>\\\\\\\\n);\\\\\\\\n\\\\\\\\nconst descriptionDiv = (\\\\\\\\n  <div className=\\\\\\\\\\\\\\\"col-lg-12 mb-2\\\\\\\\\\\\\\\">\\\\\\\\n    <p className=\\\\\\\\\\\\\\\"fs-6 fw-bold mb-1\\\\\\\\\\\\\\\">Description</p>\\\\\\\\n    <Widget\\\\\\\\n      src=\\\\\\\\\\\\\\\"devhub.near/widget/devhub.components.molecule.MarkdownEditor\\\\\\\\\\\\\\\"\\\\\\\\n      props={{\\\\\\\\n        data: { handler: state.handler, content: state.description },\\\\\\\\n        onChange: (content) => {\\\\\\\\n          State.update({ description: content, handler: \\\\\\\\\\\\\\\"update\\\\\\\\\\\\\\\" });\\\\\\\\n          textareaInputHandler(content);\\\\\\\\n        },\\\\\\\\n      }}\\\\\\\\n    />\\\\\\\\n    {autocompleteEnabled && state.showAccountAutocomplete && (\\\\\\\\n      <AutoComplete>\\\\\\\\n        <Widget\\\\\\\\n          src=\\\\\\\\\\\\\\\"devhub.near/widget/devhub.components.molecule.AccountAutocomplete\\\\\\\\\\\\\\\"\\\\\\\\n          props={{\\\\\\\\n            term: state.mentionInput,\\\\\\\\n            onSelect: autoCompleteAccountId,\\\\\\\\n            onClose: () => State.update({ showAccountAutocomplete: false }),\\\\\\\\n          }}\\\\\\\\n        />\\\\\\\\n      </AutoComplete>\\\\\\\\n    )}\\\\\\\\n  </div>\\\\\\\\n);\\\\\\\\n\\\\\\\\nconst isFundraisingDiv = (\\\\\\\\n  // This is jank with just btns and not radios. But the radios were glitchy af\\\\\\\\n  <>\\\\\\\\n    <div class=\\\\\\\\\\\\\\\"mb-2\\\\\\\\\\\\\\\">\\\\\\\\n      <p class=\\\\\\\\\\\\\\\"fs-6 fw-bold mb-1\\\\\\\\\\\\\\\">\\\\\\\\n        Are you seeking funding for your solution?\\\\\\\\n        <span class=\\\\\\\\\\\\\\\"text-muted fw-normal\\\\\\\\\\\\\\\">(Optional)</span>\\\\\\\\n      </p>\\\\\\\\n      <div class=\\\\\\\\\\\\\\\"form-check form-check-inline\\\\\\\\\\\\\\\">\\\\\\\\n        <label class=\\\\\\\\\\\\\\\"form-check-label\\\\\\\\\\\\\\\">\\\\\\\\n          <button\\\\\\\\n            className=\\\\\\\\\\\\\\\"btn btn-light p-0\\\\\\\\\\\\\\\"\\\\\\\\n            style={{\\\\\\\\n              backgroundColor: state.seekingFunding ? \\\\\\\\\\\\\\\"#0C7283\\\\\\\\\\\\\\\" : \\\\\\\\\\\\\\\"inherit\\\\\\\\\\\\\\\",\\\\\\\\n              color: \\\\\\\\\\\\\\\"#f3f3f3\\\\\\\\\\\\\\\",\\\\\\\\n              border: \\\\\\\\\\\\\\\"solid #D9D9D9\\\\\\\\\\\\\\\",\\\\\\\\n              borderRadius: \\\\\\\\\\\\\\\"100%\\\\\\\\\\\\\\\",\\\\\\\\n              height: \\\\\\\\\\\\\\\"20px\\\\\\\\\\\\\\\",\\\\\\\\n              width: \\\\\\\\\\\\\\\"20px\\\\\\\\\\\\\\\",\\\\\\\\n            }}\\\\\\\\n            onClick={() => State.update({ seekingFunding: true })}\\\\\\\\n          />\\\\\\\\n          Yes\\\\\\\\n        </label>\\\\\\\\n      </div>\\\\\\\\n      <div class=\\\\\\\\\\\\\\\"form-check form-check-inline\\\\\\\\\\\\\\\">\\\\\\\\n        <label class=\\\\\\\\\\\\\\\"form-check-label\\\\\\\\\\\\\\\">\\\\\\\\n          <button\\\\\\\\n            className=\\\\\\\\\\\\\\\"btn btn-light p-0\\\\\\\\\\\\\\\"\\\\\\\\n            style={{\\\\\\\\n              backgroundColor: !state.seekingFunding ? \\\\\\\\\\\\\\\"#0C7283\\\\\\\\\\\\\\\" : \\\\\\\\\\\\\\\"inherit\\\\\\\\\\\\\\\",\\\\\\\\n              color: \\\\\\\\\\\\\\\"#f3f3f3\\\\\\\\\\\\\\\",\\\\\\\\n              border: \\\\\\\\\\\\\\\"solid #D9D9D9\\\\\\\\\\\\\\\",\\\\\\\\n              borderRadius: \\\\\\\\\\\\\\\"100%\\\\\\\\\\\\\\\",\\\\\\\\n              height: \\\\\\\\\\\\\\\"20px\\\\\\\\\\\\\\\",\\\\\\\\n              width: \\\\\\\\\\\\\\\"20px\\\\\\\\\\\\\\\",\\\\\\\\n            }}\\\\\\\\n            onClick={() => State.update({ seekingFunding: false })}\\\\\\\\n          />\\\\\\\\n          No\\\\\\\\n        </label>\\\\\\\\n      </div>\\\\\\\\n    </div>\\\\\\\\n  </>\\\\\\\\n);\\\\\\\\n\\\\\\\\nconst fundraisingDiv = (\\\\\\\\n  <div class=\\\\\\\\\\\\\\\"d-flex flex-column mb-2\\\\\\\\\\\\\\\">\\\\\\\\n    <div className=\\\\\\\\\\\\\\\"col-lg-6  mb-2\\\\\\\\\\\\\\\">\\\\\\\\n      Currency\\\\\\\\n      <select\\\\\\\\n        onChange={(event) => State.update({ token: event.target.value })}\\\\\\\\n        class=\\\\\\\\\\\\\\\"form-select\\\\\\\\\\\\\\\"\\\\\\\\n        aria-label=\\\\\\\\\\\\\\\"Default select\\\\\\\\\\\\\\\"\\\\\\\\n      >\\\\\\\\n        <option selected value=\\\\\\\\\\\\\\\"USDT\\\\\\\\\\\\\\\">\\\\\\\\n          USDT\\\\\\\\n        </option>\\\\\\\\n        <option value=\\\\\\\\\\\\\\\"NEAR\\\\\\\\\\\\\\\">NEAR</option>\\\\\\\\n        <option value=\\\\\\\\\\\\\\\"USDC\\\\\\\\\\\\\\\">USDC</option>\\\\\\\\n      </select>\\\\\\\\n    </div>\\\\\\\\n    <div className=\\\\\\\\\\\\\\\"col-lg-6 mb-2\\\\\\\\\\\\\\\">\\\\\\\\n      Requested amount <span class=\\\\\\\\\\\\\\\"text-muted fw-normal\\\\\\\\\\\\\\\">(Numbers Only)</span>\\\\\\\\n      <input\\\\\\\\n        type=\\\\\\\\\\\\\\\"number\\\\\\\\\\\\\\\"\\\\\\\\n        value={parseInt(state.amount) > 0 ? state.amount : \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\"}\\\\\\\\n        min={0}\\\\\\\\n        onChange={(event) =>\\\\\\\\n          State.update({\\\\\\\\n            amount: Number(\\\\\\\\n              event.target.value.toString().replace(/e/g, \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\")\\\\\\\\n            ).toString(),\\\\\\\\n          })\\\\\\\\n        }\\\\\\\\n      />\\\\\\\\n    </div>\\\\\\\\n    <div className=\\\\\\\\\\\\\\\"col-lg-6 mb-2\\\\\\\\\\\\\\\">\\\\\\\\n      <p class=\\\\\\\\\\\\\\\"mb-1\\\\\\\\\\\\\\\">\\\\\\\\n        Requested sponsor <span class=\\\\\\\\\\\\\\\"text-muted fw-normal\\\\\\\\\\\\\\\">(Optional)</span>\\\\\\\\n      </p>\\\\\\\\n      <p style={{ fontSize: \\\\\\\\\\\\\\\"13px\\\\\\\\\\\\\\\" }} class=\\\\\\\\\\\\\\\"m-0 text-muted fw-light\\\\\\\\\\\\\\\">\\\\\\\\n        If you are requesting funding from a specific sponsor, please enter\\\\\\\\n        their username.\\\\\\\\n      </p>\\\\\\\\n      <div class=\\\\\\\\\\\\\\\"input-group flex-nowrap\\\\\\\\\\\\\\\">\\\\\\\\n        <span class=\\\\\\\\\\\\\\\"input-group-text\\\\\\\\\\\\\\\" id=\\\\\\\\\\\\\\\"addon-wrapping\\\\\\\\\\\\\\\">\\\\\\\\n          @\\\\\\\\n        </span>\\\\\\\\n        <input\\\\\\\\n          type=\\\\\\\\\\\\\\\"text\\\\\\\\\\\\\\\"\\\\\\\\n          class=\\\\\\\\\\\\\\\"form-control\\\\\\\\\\\\\\\"\\\\\\\\n          placeholder=\\\\\\\\\\\\\\\"Enter username\\\\\\\\\\\\\\\"\\\\\\\\n          value={state.supervisor}\\\\\\\\n          onChange={(event) => State.update({ supervisor: event.target.value })}\\\\\\\\n        />\\\\\\\\n      </div>\\\\\\\\n    </div>\\\\\\\\n  </div>\\\\\\\\n);\\\\\\\\n\\\\\\\\nfunction generateDescription(text, amount, token, supervisor, seekingFunding) {\\\\\\\\n  const fundingText =\\\\\\\\n    amount > 0 && token ? `###### Requested amount: ${amount} ${token}\\\\\\\\\\\\\\\\n` : \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\";\\\\\\\\n  const supervisorText = supervisor\\\\\\\\n    ? `###### Requested sponsor: @${supervisor}\\\\\\\\\\\\\\\\n`\\\\\\\\n    : \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\";\\\\\\\\n  return seekingFunding ? `${fundingText}${supervisorText}${text}` : text;\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst [tab, setTab] = useState(\\\\\\\\\\\\\\\"editor\\\\\\\\\\\\\\\");\\\\\\\\n\\\\\\\\nreturn (\\\\\\\\n  <div class=\\\\\\\\\\\\\\\"bg-light d-flex flex-column flex-grow-1 w-100\\\\\\\\\\\\\\\">\\\\\\\\n    <div class=\\\\\\\\\\\\\\\"mx-5 mb-5\\\\\\\\\\\\\\\">\\\\\\\\n      <div aria-label=\\\\\\\\\\\\\\\"breadcrumb\\\\\\\\\\\\\\\">\\\\\\\\n        <ol class=\\\\\\\\\\\\\\\"breadcrumb\\\\\\\\\\\\\\\">\\\\\\\\n          <li class=\\\\\\\\\\\\\\\"breadcrumb-item\\\\\\\\\\\\\\\">\\\\\\\\n            <Link\\\\\\\\n              style={{\\\\\\\\n                color: \\\\\\\\\\\\\\\"#3252A6\\\\\\\\\\\\\\\",\\\\\\\\n              }}\\\\\\\\n              className=\\\\\\\\\\\\\\\"fw-bold\\\\\\\\\\\\\\\"\\\\\\\\n              to={href({\\\\\\\\n                widgetSrc: \\\\\\\\\\\\\\\"devhub.near/widget/app\\\\\\\\\\\\\\\",\\\\\\\\n                params: { page: \\\\\\\\\\\\\\\"feed\\\\\\\\\\\\\\\" },\\\\\\\\n              })}\\\\\\\\n            >\\\\\\\\n              DevHub\\\\\\\\n            </Link>\\\\\\\\n          </li>\\\\\\\\n          <li class=\\\\\\\\\\\\\\\"breadcrumb-item active\\\\\\\\\\\\\\\" aria-current=\\\\\\\\\\\\\\\"page\\\\\\\\\\\\\\\">\\\\\\\\n            Create new\\\\\\\\n          </li>\\\\\\\\n        </ol>\\\\\\\\n      </div>\\\\\\\\n      {props.transactionHashes ? (\\\\\\\\n        <>\\\\\\\\n          Post created successfully. Back to{\\\\\\\\\\\\\\\" \\\\\\\\\\\\\\\"}\\\\\\\\n          <Link\\\\\\\\n            style={{\\\\\\\\n              color: \\\\\\\\\\\\\\\"#3252A6\\\\\\\\\\\\\\\",\\\\\\\\n            }}\\\\\\\\n            className=\\\\\\\\\\\\\\\"fw-bold\\\\\\\\\\\\\\\"\\\\\\\\n            to={href({\\\\\\\\n              widgetSrc: \\\\\\\\\\\\\\\"devhub.near/widget/app\\\\\\\\\\\\\\\",\\\\\\\\n              params: { page: \\\\\\\\\\\\\\\"feed\\\\\\\\\\\\\\\" },\\\\\\\\n            })}\\\\\\\\n          >\\\\\\\\n            feed\\\\\\\\n          </Link>\\\\\\\\n        </>\\\\\\\\n      ) : (\\\\\\\\n        <>\\\\\\\\n          <div className=\\\\\\\\\\\\\\\"card\\\\\\\\\\\\\\\">\\\\\\\\n            <div className=\\\\\\\\\\\\\\\"card-header\\\\\\\\\\\\\\\">\\\\\\\\n              <div>\\\\\\\\n                <ul class=\\\\\\\\\\\\\\\"nav nav-tabs\\\\\\\\\\\\\\\">\\\\\\\\n                  <li class=\\\\\\\\\\\\\\\"nav-item\\\\\\\\\\\\\\\">\\\\\\\\n                    <button\\\\\\\\n                      class={`nav-link ${tab === \\\\\\\\\\\\\\\"editor\\\\\\\\\\\\\\\" ? \\\\\\\\\\\\\\\"active\\\\\\\\\\\\\\\" : \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\"}`}\\\\\\\\n                      onClick={() => setTab(\\\\\\\\\\\\\\\"editor\\\\\\\\\\\\\\\")}\\\\\\\\n                    >\\\\\\\\n                      Editor\\\\\\\\n                    </button>\\\\\\\\n                  </li>\\\\\\\\n                  <li class=\\\\\\\\\\\\\\\"nav-item\\\\\\\\\\\\\\\">\\\\\\\\n                    <button\\\\\\\\n                      class={`nav-link ${tab === \\\\\\\\\\\\\\\"preview\\\\\\\\\\\\\\\" ? \\\\\\\\\\\\\\\"active\\\\\\\\\\\\\\\" : \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\"}`}\\\\\\\\n                      onClick={() => setTab(\\\\\\\\\\\\\\\"preview\\\\\\\\\\\\\\\")}\\\\\\\\n                    >\\\\\\\\n                      Preview\\\\\\\\n                    </button>\\\\\\\\n                  </li>\\\\\\\\n                </ul>\\\\\\\\n              </div>\\\\\\\\n              {tab === \\\\\\\\\\\\\\\"editor\\\\\\\\\\\\\\\" && (\\\\\\\\n                <div className=\\\\\\\\\\\\\\\"my-3\\\\\\\\\\\\\\\">Create a new post</div>\\\\\\\\n              )}\\\\\\\\n              {tab === \\\\\\\\\\\\\\\"preview\\\\\\\\\\\\\\\" && <div className=\\\\\\\\\\\\\\\"my-3\\\\\\\\\\\\\\\">Post Preview</div>}\\\\\\\\n            </div>\\\\\\\\n            <p>{state.seekingFunding}</p>\\\\\\\\n            <div class=\\\\\\\\\\\\\\\"card border-light\\\\\\\\\\\\\\\">\\\\\\\\n              {tab === \\\\\\\\\\\\\\\"editor\\\\\\\\\\\\\\\" && (\\\\\\\\n                <>\\\\\\\\n                  <div class=\\\\\\\\\\\\\\\"card-body\\\\\\\\\\\\\\\">\\\\\\\\n                    <p class=\\\\\\\\\\\\\\\"card-title fw-bold fs-6\\\\\\\\\\\\\\\">\\\\\\\\n                      What do you want to create?\\\\\\\\n                    </p>\\\\\\\\n                    <div class=\\\\\\\\\\\\\\\"d-flex flex-row gap-2\\\\\\\\\\\\\\\">\\\\\\\\n                      <button\\\\\\\\n                        onClick={onIdeaClick}\\\\\\\\n                        type=\\\\\\\\\\\\\\\"button\\\\\\\\\\\\\\\"\\\\\\\\n                        class={`btn btn-outline-secondary`}\\\\\\\\n                        style={\\\\\\\\n                          state.postType === \\\\\\\\\\\\\\\"Idea\\\\\\\\\\\\\\\"\\\\\\\\n                            ? {\\\\\\\\n                                backgroundColor: \\\\\\\\\\\\\\\"#0C7283\\\\\\\\\\\\\\\",\\\\\\\\n                                color: \\\\\\\\\\\\\\\"#f3f3f3\\\\\\\\\\\\\\\",\\\\\\\\n                              }\\\\\\\\n                            : {}\\\\\\\\n                        }\\\\\\\\n                      >\\\\\\\\n                        <i class=\\\\\\\\\\\\\\\"bi bi-lightbulb\\\\\\\\\\\\\\\"></i>\\\\\\\\n                        Idea\\\\\\\\n                      </button>\\\\\\\\n                      <button\\\\\\\\n                        onClick={onSolutionClick}\\\\\\\\n                        type=\\\\\\\\\\\\\\\"button\\\\\\\\\\\\\\\"\\\\\\\\n                        class={`btn btn-outline-secondary`}\\\\\\\\n                        style={\\\\\\\\n                          state.postType !== \\\\\\\\\\\\\\\"Idea\\\\\\\\\\\\\\\"\\\\\\\\n                            ? {\\\\\\\\n                                backgroundColor: \\\\\\\\\\\\\\\"#0C7283\\\\\\\\\\\\\\\",\\\\\\\\n                                color: \\\\\\\\\\\\\\\"#f3f3f3\\\\\\\\\\\\\\\",\\\\\\\\n                              }\\\\\\\\n                            : {}\\\\\\\\n                        }\\\\\\\\n                      >\\\\\\\\n                        <i class=\\\\\\\\\\\\\\\"bi bi-rocket\\\\\\\\\\\\\\\"></i>\\\\\\\\n                        Solution\\\\\\\\n                      </button>\\\\\\\\n                    </div>\\\\\\\\n                    <p class=\\\\\\\\\\\\\\\"text-muted w-75 my-1\\\\\\\\\\\\\\\">\\\\\\\\n                      {state.postType === \\\\\\\\\\\\\\\"Idea\\\\\\\\\\\\\\\"\\\\\\\\n                        ? \\\\\\\\\\\\\\\"Get feedback from the community about a problem, opportunity, or need.\\\\\\\\\\\\\\\"\\\\\\\\n                        : \\\\\\\\\\\\\\\"Provide a specific proposal or implementation to an idea, optionally requesting funding. If your solution relates to an existing idea, please reply to the original post with a solution.\\\\\\\\\\\\\\\"}\\\\\\\\n                    </p>\\\\\\\\n                    {state.warning && (\\\\\\\\n                      <div\\\\\\\\n                        class=\\\\\\\\\\\\\\\"alert alert-warning alert-dismissible fade show\\\\\\\\\\\\\\\"\\\\\\\\n                        role=\\\\\\\\\\\\\\\"alert\\\\\\\\\\\\\\\"\\\\\\\\n                      >\\\\\\\\n                        {state.warning}\\\\\\\\n                        <button\\\\\\\\n                          type=\\\\\\\\\\\\\\\"button\\\\\\\\\\\\\\\"\\\\\\\\n                          class=\\\\\\\\\\\\\\\"btn-close\\\\\\\\\\\\\\\"\\\\\\\\n                          data-bs-dismiss=\\\\\\\\\\\\\\\"alert\\\\\\\\\\\\\\\"\\\\\\\\n                          aria-label=\\\\\\\\\\\\\\\"Close\\\\\\\\\\\\\\\"\\\\\\\\n                          onClick={() => State.update({ warning: \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\" })}\\\\\\\\n                        ></button>\\\\\\\\n                      </div>\\\\\\\\n                    )}\\\\\\\\n                    <div className=\\\\\\\\\\\\\\\"row\\\\\\\\\\\\\\\">\\\\\\\\n                      {nameDiv}\\\\\\\\n                      {descriptionDiv}\\\\\\\\n                      {labelEditor}\\\\\\\\n                      {state.postType === \\\\\\\\\\\\\\\"Solution\\\\\\\\\\\\\\\" && isFundraisingDiv}\\\\\\\\n                      {state.seekingFunding && fundraisingDiv}\\\\\\\\n                    </div>\\\\\\\\n                    <button\\\\\\\\n                      style={{\\\\\\\\n                        width: \\\\\\\\\\\\\\\"7rem\\\\\\\\\\\\\\\",\\\\\\\\n                        backgroundColor: \\\\\\\\\\\\\\\"#0C7283\\\\\\\\\\\\\\\",\\\\\\\\n                        color: \\\\\\\\\\\\\\\"#f3f3f3\\\\\\\\\\\\\\\",\\\\\\\\n                      }}\\\\\\\\n                      disabled={\\\\\\\\n                        state.seekingFunding &&\\\\\\\\n                        (!state.amount || state.amount < 1)\\\\\\\\n                      }\\\\\\\\n                      className=\\\\\\\\\\\\\\\"btn btn-light mb-2 p-3\\\\\\\\\\\\\\\"\\\\\\\\n                      onClick={onSubmit}\\\\\\\\n                    >\\\\\\\\n                      Submit\\\\\\\\n                    </button>\\\\\\\\n                  </div>\\\\\\\\n                  <div class=\\\\\\\\\\\\\\\"bg-light d-flex flex-row p-1 border-bottom\\\\\\\\\\\\\\\"></div>\\\\\\\\n                </>\\\\\\\\n              )}\\\\\\\\n              {tab === \\\\\\\\\\\\\\\"preview\\\\\\\\\\\\\\\" && (\\\\\\\\n                <div class=\\\\\\\\\\\\\\\"card-body\\\\\\\\\\\\\\\">\\\\\\\\n                  <p class=\\\\\\\\\\\\\\\"text-muted m-0\\\\\\\\\\\\\\\">Preview</p>\\\\\\\\n                  <div>\\\\\\\\n                    <Widget\\\\\\\\n                      src=\\\\\\\\\\\\\\\"devhub.near/widget/devhub.entity.post.Post\\\\\\\\\\\\\\\"\\\\\\\\n                      props={{\\\\\\\\n                        isPreview: true,\\\\\\\\n                        id: 0, // irrelevant\\\\\\\\n                        post: {\\\\\\\\n                          author_id: state.author_id,\\\\\\\\n                          likes: [],\\\\\\\\n                          snapshot: {\\\\\\\\n                            editor_id: state.editor_id,\\\\\\\\n                            labels: state.labelStrings,\\\\\\\\n                            post_type: state.postType,\\\\\\\\n                            name: state.name,\\\\\\\\n                            description: generateDescription(\\\\\\\\n                              state.description,\\\\\\\\n                              state.amount,\\\\\\\\n                              state.token,\\\\\\\\n                              state.supervisor,\\\\\\\\n                              state.seekingFunding\\\\\\\\n                            ),\\\\\\\\n                            github_link: state.githubLink,\\\\\\\\n                          },\\\\\\\\n                        },\\\\\\\\n                      }}\\\\\\\\n                    />\\\\\\\\n                  </div>\\\\\\\\n                </div>\\\\\\\\n              )}\\\\\\\\n            </div>\\\\\\\\n          </div>\\\\\\\\n        </>\\\\\\\\n      )}\\\\\\\\n    </div>\\\\\\\\n  </div>\\\\\\\\n);\\\\\\\\n\"}, \"devhub.entity.post.PostEditor\": {\"\": \"const cleanDescription = (description) => {\\\\\\\\n  return description\\\\\\\\n    ? description.replace(\\\\\\\\n        /###### Requested amount: .+?\\\\\\\\\\\\\\\\n###### Requested sponsor: @[^\\\\\\\\\\\\\\\\s]+\\\\\\\\\\\\\\\\n/g,\\\\\\\\n        \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\"\\\\\\\\n      )\\\\\\\\n    : description;\\\\\\\\n};\\\\\\\\n\\\\\\\\ninitState({\\\\\\\\n  seekingFunding: props.seekingFunding ?? false,\\\\\\\\n  author_id: context.accountId,\\\\\\\\n  // Should be a list of objects with field \\\\\\\\\\\\\\\"name\\\\\\\\\\\\\\\".\\\\\\\\n  labels,\\\\\\\\n  // Should be a list of labels as strings.\\\\\\\\n  // Both of the label structures should be modified together.\\\\\\\\n  labelStrings: [],\\\\\\\\n  postType,\\\\\\\\n  name: props.name ?? \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\",\\\\\\\\n  description:\\\\\\\\n    (props.postType === \\\\\\\\\\\\\\\"Solution\\\\\\\\\\\\\\\"\\\\\\\\n      ? cleanDescription(props.description)\\\\\\\\n      : props.description) ?? \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\",\\\\\\\\n  amount: props.amount ?? \\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\n  token: props.token ?? \\\\\\\\\\\\\\\"USDT\\\\\\\\\\\\\\\",\\\\\\\\n  supervisor: props.supervisor ?? \\\\\\\\\\\\\\\"neardevdao.near\\\\\\\\\\\\\\\",\\\\\\\\n  githubLink: props.githubLink ?? \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\",\\\\\\\\n  warning: \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\",\\\\\\\\n  draftStateApplied: false,\\\\\\\\n  mentionInput: \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\", // text next to @ tag\\\\\\\\n  mentionsArray: [], // all the mentions in the description\\\\\\\\n});\\\\\\\\n\\\\\\\\n/* INCLUDE: \\\\\\\\\\\\\\\"core/lib/autocomplete\\\\\\\\\\\\\\\" */\\\\\\\\nconst autocompleteEnabled = true;\\\\\\\\n\\\\\\\\nconst AutoComplete = styled.div`\\\\\\\\n  z-index: 5;\\\\\\\\n\\\\\\\\n  > div > div {\\\\\\\\n    padding: calc(var(--padding) / 2);\\\\\\\\n  }\\\\\\\\n`;\\\\\\\\n\\\\\\\\nfunction textareaInputHandler(value) {\\\\\\\\n  const words = value.split(/\\\\\\\\\\\\\\\\s+/);\\\\\\\\n  const allMentiones = words\\\\\\\\n    .filter((word) => word.startsWith(\\\\\\\\\\\\\\\"@\\\\\\\\\\\\\\\"))\\\\\\\\n    .map((mention) => mention.slice(1));\\\\\\\\n  const newMentiones = allMentiones.filter(\\\\\\\\n    (item) => !state.mentionsArray.includes(item)\\\\\\\\n  );\\\\\\\\n\\\\\\\\n  State.update((lastKnownState) => ({\\\\\\\\n    ...lastKnownState,\\\\\\\\n    text: value,\\\\\\\\n    showAccountAutocomplete: newMentiones?.length > 0,\\\\\\\\n    mentionsArray: allMentiones,\\\\\\\\n    mentionInput: newMentiones?.[0] ?? \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\",\\\\\\\\n  }));\\\\\\\\n}\\\\\\\\n\\\\\\\\nfunction autoCompleteAccountId(id) {\\\\\\\\n  // to make sure we update the @ at correct index\\\\\\\\n  let currentIndex = 0;\\\\\\\\n  const updatedDescription = state.description.replace(\\\\\\\\n    /(?:^|\\\\\\\\\\\\\\\\s)(@[^\\\\\\\\\\\\\\\\s]*)/g,\\\\\\\\n    (match) => {\\\\\\\\n      if (currentIndex === state.mentionsArray.indexOf(state.mentionInput)) {\\\\\\\\n        currentIndex++;\\\\\\\\n        return ` @${id}`;\\\\\\\\n      } else {\\\\\\\\n        currentIndex++;\\\\\\\\n        return match;\\\\\\\\n      }\\\\\\\\n    }\\\\\\\\n  );\\\\\\\\n  State.update((lastKnownState) => ({\\\\\\\\n    ...lastKnownState,\\\\\\\\n    handler: \\\\\\\\\\\\\\\"autocompleteSelected\\\\\\\\\\\\\\\",\\\\\\\\n    description: updatedDescription,\\\\\\\\n    showAccountAutocomplete: false,\\\\\\\\n  }));\\\\\\\\n}\\\\\\\\n\\\\\\\\n/* END_INCLUDE: \\\\\\\\\\\\\\\"core/lib/autocomplete\\\\\\\\\\\\\\\" */\\\\\\\\n\\\\\\\\nconst postType = props.postType ?? \\\\\\\\\\\\\\\"Sponsorship\\\\\\\\\\\\\\\";\\\\\\\\nconst parentId = props.parentId ?? null;\\\\\\\\nconst postId = props.postId ?? null;\\\\\\\\nconst mode = props.mode ?? \\\\\\\\\\\\\\\"Create\\\\\\\\\\\\\\\";\\\\\\\\nconst toggleEditor = props.toggleEditor;\\\\\\\\n\\\\\\\\nconst referralLabels = props.referral ? [`referral:${props.referral}`] : [];\\\\\\\\nconst labelStrings = (props.labels ?? []).concat(referralLabels);\\\\\\\\n\\\\\\\\nconst labels = labelStrings.map((s) => {\\\\\\\\n  return { name: s };\\\\\\\\n});\\\\\\\\n\\\\\\\\nif (!state.draftStateApplied && props.draftState) {\\\\\\\\n  State.update({ ...props.draftState, draftStateApplied: true });\\\\\\\\n}\\\\\\\\n\\\\\\\\nlet fields = {\\\\\\\\n  Comment: [\\\\\\\\\\\\\\\"description\\\\\\\\\\\\\\\"],\\\\\\\\n  Idea: [\\\\\\\\\\\\\\\"name\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"description\\\\\\\\\\\\\\\"],\\\\\\\\n  Solution: [\\\\\\\\\\\\\\\"name\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"description\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"fund_raising\\\\\\\\\\\\\\\"],\\\\\\\\n  Attestation: [\\\\\\\\\\\\\\\"name\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"description\\\\\\\\\\\\\\\"],\\\\\\\\n  Sponsorship: [\\\\\\\\n    \\\\\\\\\\\\\\\"name\\\\\\\\\\\\\\\",\\\\\\\\n    \\\\\\\\\\\\\\\"description\\\\\\\\\\\\\\\",\\\\\\\\n    \\\\\\\\\\\\\\\"amount\\\\\\\\\\\\\\\",\\\\\\\\n    \\\\\\\\\\\\\\\"sponsorship_token\\\\\\\\\\\\\\\",\\\\\\\\n    \\\\\\\\\\\\\\\"supervisor\\\\\\\\\\\\\\\",\\\\\\\\n  ],\\\\\\\\n  Github: [\\\\\\\\\\\\\\\"githubLink\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"name\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"description\\\\\\\\\\\\\\\"],\\\\\\\\n}[postType];\\\\\\\\n\\\\\\\\n// This must be outside onClick, because Near.view returns null at first, and when the view call finished, it returns true/false.\\\\\\\\n// If checking this inside onClick, it will give `null` and we cannot tell the result is true or false.\\\\\\\\nlet grantNotify = Near.view(\\\\\\\\\\\\\\\"social.near\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"is_write_permission_granted\\\\\\\\\\\\\\\", {\\\\\\\\n  predecessor_id: \\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\",\\\\\\\\n  key: context.accountId + \\\\\\\\\\\\\\\"/index/notify\\\\\\\\\\\\\\\",\\\\\\\\n});\\\\\\\\nif (grantNotify === null) {\\\\\\\\n  return;\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst tokenMapping = {\\\\\\\\n  NEAR: \\\\\\\\\\\\\\\"NEAR\\\\\\\\\\\\\\\",\\\\\\\\n  USDT: {\\\\\\\\n    NEP141: {\\\\\\\\n      address: \\\\\\\\\\\\\\\"usdt.tether-token.near\\\\\\\\\\\\\\\",\\\\\\\\n    },\\\\\\\\n  },\\\\\\\\n  USDC: {\\\\\\\\n    NEP141: {\\\\\\\\n      address:\\\\\\\\n        \\\\\\\\\\\\\\\"17208628f84f5d6ad33f0da3bbbeb27ffcb398eac501a31bd6ad2011e36133a1\\\\\\\\\\\\\\\",\\\\\\\\n    },\\\\\\\\n  },\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst onSubmit = () => {\\\\\\\\n  let labels = state.labelStrings;\\\\\\\\n  var body = {\\\\\\\\n    Comment: { description: state.description, comment_version: \\\\\\\\\\\\\\\"V2\\\\\\\\\\\\\\\" },\\\\\\\\n    Idea: {\\\\\\\\n      name: state.name,\\\\\\\\n      description: state.description,\\\\\\\\n      idea_version: \\\\\\\\\\\\\\\"V1\\\\\\\\\\\\\\\",\\\\\\\\n    },\\\\\\\\n    Solution: {\\\\\\\\n      name: state.name,\\\\\\\\n      description: generateDescription(\\\\\\\\n        state.description,\\\\\\\\n        state.amount,\\\\\\\\n        state.token,\\\\\\\\n        state.supervisor,\\\\\\\\n        state.seekingFunding\\\\\\\\n      ),\\\\\\\\n      solution_version: \\\\\\\\\\\\\\\"V1\\\\\\\\\\\\\\\",\\\\\\\\n    },\\\\\\\\n    Attestation: {\\\\\\\\n      name: state.name,\\\\\\\\n      description: state.description,\\\\\\\\n      attestation_version: \\\\\\\\\\\\\\\"V1\\\\\\\\\\\\\\\",\\\\\\\\n    },\\\\\\\\n    Sponsorship: {\\\\\\\\n      name: state.name,\\\\\\\\n      description: state.description,\\\\\\\\n      amount: state.amount,\\\\\\\\n      sponsorship_token: tokenMapping[state.token],\\\\\\\\n      supervisor: state.supervisor,\\\\\\\\n      sponsorship_version: \\\\\\\\\\\\\\\"V1\\\\\\\\\\\\\\\",\\\\\\\\n    },\\\\\\\\n    Github: {\\\\\\\\n      name: state.name,\\\\\\\\n      description: state.description,\\\\\\\\n      github_version: \\\\\\\\\\\\\\\"V0\\\\\\\\\\\\\\\",\\\\\\\\n      github_link: state.githubLink,\\\\\\\\n    },\\\\\\\\n  }[postType];\\\\\\\\n  body[\\\\\\\\\\\\\\\"post_type\\\\\\\\\\\\\\\"] = postType;\\\\\\\\n  if (!context.accountId) {\\\\\\\\n    return;\\\\\\\\n  }\\\\\\\\n  let txn = [];\\\\\\\\n  if (mode == \\\\\\\\\\\\\\\"Create\\\\\\\\\\\\\\\") {\\\\\\\\n    props.onDraftStateChange(\\\\\\\\n      Object.assign({}, state, { parent_post_id: parentId })\\\\\\\\n    );\\\\\\\\n    txn.push({\\\\\\\\n      contractName: \\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\",\\\\\\\\n      methodName: \\\\\\\\\\\\\\\"add_post\\\\\\\\\\\\\\\",\\\\\\\\n      args: {\\\\\\\\n        parent_id: parentId,\\\\\\\\n        labels,\\\\\\\\n        body,\\\\\\\\n      },\\\\\\\\n      gas: Big(10).pow(14),\\\\\\\\n    });\\\\\\\\n  } else if (mode == \\\\\\\\\\\\\\\"Edit\\\\\\\\\\\\\\\") {\\\\\\\\n    props.onDraftStateChange(\\\\\\\\n      Object.assign({}, state, { edit_post_id: postId })\\\\\\\\n    );\\\\\\\\n    txn.push({\\\\\\\\n      contractName: \\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\",\\\\\\\\n      methodName: \\\\\\\\\\\\\\\"edit_post\\\\\\\\\\\\\\\",\\\\\\\\n      args: {\\\\\\\\n        id: postId,\\\\\\\\n        labels,\\\\\\\\n        body,\\\\\\\\n      },\\\\\\\\n      gas: Big(10).pow(14),\\\\\\\\n    });\\\\\\\\n  }\\\\\\\\n  if (mode == \\\\\\\\\\\\\\\"Create\\\\\\\\\\\\\\\" || mode == \\\\\\\\\\\\\\\"Edit\\\\\\\\\\\\\\\") {\\\\\\\\n    if (grantNotify === false) {\\\\\\\\n      txn.unshift({\\\\\\\\n        contractName: \\\\\\\\\\\\\\\"social.near\\\\\\\\\\\\\\\",\\\\\\\\n        methodName: \\\\\\\\\\\\\\\"grant_write_permission\\\\\\\\\\\\\\\",\\\\\\\\n        args: {\\\\\\\\n          predecessor_id: \\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\",\\\\\\\\n          keys: [context.accountId + \\\\\\\\\\\\\\\"/index/notify\\\\\\\\\\\\\\\"],\\\\\\\\n        },\\\\\\\\n        gas: Big(10).pow(14),\\\\\\\\n      });\\\\\\\\n    }\\\\\\\\n    Near.call(txn);\\\\\\\\n  }\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst normalizeLabel = (label) =>\\\\\\\\n  label\\\\\\\\n    .replaceAll(/[- \\\\\\\\\\\\\\\\.]/g, \\\\\\\\\\\\\\\"_\\\\\\\\\\\\\\\")\\\\\\\\n    .replaceAll(/[^\\\\\\\\\\\\\\\\w]+/g, \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\")\\\\\\\\n    .replaceAll(/_+/g, \\\\\\\\\\\\\\\"-\\\\\\\\\\\\\\\")\\\\\\\\n    .replace(/^-+/, \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\")\\\\\\\\n    .replace(/-+$/, \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\")\\\\\\\\n    .toLowerCase()\\\\\\\\n    .trim(\\\\\\\\\\\\\\\"-\\\\\\\\\\\\\\\");\\\\\\\\n\\\\\\\\nconst checkLabel = (label) => {\\\\\\\\n  Near.asyncView(\\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"is_allowed_to_use_labels\\\\\\\\\\\\\\\", {\\\\\\\\n    editor: context.accountId,\\\\\\\\n    labels: [label],\\\\\\\\n  }).then((allowed) => {\\\\\\\\n    if (allowed) {\\\\\\\\n      State.update({ warning: \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\" });\\\\\\\\n    } else {\\\\\\\\n      State.update({\\\\\\\\n        warning:\\\\\\\\n          \\\\\\\\\\\\'The label \\\\\\\\\\\\\\\"\\\\\\\\\\\\' +\\\\\\\\n          label +\\\\\\\\n          \\\\\\\\\\\\'\\\\\\\\\\\\\\\" is protected and can only be added by moderators\\\\\\\\\\\\',\\\\\\\\n      });\\\\\\\\n      return;\\\\\\\\n    }\\\\\\\\n  });\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst setLabels = (labels) => {\\\\\\\\n  labels = labels.map((o) => {\\\\\\\\n    o.name = normalizeLabel(o.name);\\\\\\\\n    return o;\\\\\\\\n  });\\\\\\\\n  if (labels.length < state.labels.length) {\\\\\\\\n    let oldLabels = new Set(state.labels.map((label) => label.name));\\\\\\\\n    for (let label of labels) {\\\\\\\\n      oldLabels.delete(label.name);\\\\\\\\n    }\\\\\\\\n    let removed = oldLabels.values().next().value;\\\\\\\\n    Near.asyncView(\\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"is_allowed_to_use_labels\\\\\\\\\\\\\\\", {\\\\\\\\n      editor: context.accountId,\\\\\\\\n      labels: [removed],\\\\\\\\n    }).then((allowed) => {\\\\\\\\n      if (allowed) {\\\\\\\\n        let labelStrings = labels.map(({ name }) => name);\\\\\\\\n        State.update({ labels, labelStrings });\\\\\\\\n      } else {\\\\\\\\n        State.update({\\\\\\\\n          warning:\\\\\\\\n            \\\\\\\\\\\\'The label \\\\\\\\\\\\\\\"\\\\\\\\\\\\' +\\\\\\\\n            removed +\\\\\\\\n            \\\\\\\\\\\\'\\\\\\\\\\\\\\\" is protected and can only be updated by moderators\\\\\\\\\\\\',\\\\\\\\n        });\\\\\\\\n        return;\\\\\\\\n      }\\\\\\\\n    });\\\\\\\\n  } else {\\\\\\\\n    let labelStrings = labels.map((o) => {\\\\\\\\n      return o.name;\\\\\\\\n    });\\\\\\\\n    State.update({ labels, labelStrings });\\\\\\\\n  }\\\\\\\\n};\\\\\\\\nconst existingLabelStrings =\\\\\\\\n  Near.view(\\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"get_all_allowed_labels\\\\\\\\\\\\\\\", {\\\\\\\\n    editor: context.accountId,\\\\\\\\n  }) ?? [];\\\\\\\\nconst existingLabelSet = new Set(existingLabelStrings);\\\\\\\\nconst existingLabels = existingLabelStrings\\\\\\\\n  .filter((it) => it !== \\\\\\\\\\\\\\\"blog\\\\\\\\\\\\\\\") // remove blog label so users cannot publish blogs from feed\\\\\\\\n  .map((s) => {\\\\\\\\n    return { name: s };\\\\\\\\n  });\\\\\\\\n\\\\\\\\nconst labelEditor = (\\\\\\\\n  <div className=\\\\\\\\\\\\\\\"col-lg-12  mb-2\\\\\\\\\\\\\\\">\\\\\\\\n    Labels:\\\\\\\\n    <Typeahead\\\\\\\\n      multiple\\\\\\\\n      labelKey=\\\\\\\\\\\\\\\"name\\\\\\\\\\\\\\\"\\\\\\\\n      onInputChange={checkLabel}\\\\\\\\n      onChange={setLabels}\\\\\\\\n      options={existingLabels}\\\\\\\\n      placeholder=\\\\\\\\\\\\\\\"near.social, widget, NEP, standard, protocol, tool\\\\\\\\\\\\\\\"\\\\\\\\n      selected={state.labels}\\\\\\\\n      positionFixed\\\\\\\\n      allowNew={(results, props) => {\\\\\\\\n        return (\\\\\\\\n          !existingLabelSet.has(props.text) &&\\\\\\\\n          props.text.toLowerCase() !== \\\\\\\\\\\\\\\"blog\\\\\\\\\\\\\\\" && // dont allow adding \\\\\\\\\\\\\\\"Blog\\\\\\\\\\\\\\\"\\\\\\\\n          props.selected.filter((selected) => selected.name === props.text)\\\\\\\\n            .length == 0 &&\\\\\\\\n          Near.view(\\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"is_allowed_to_use_labels\\\\\\\\\\\\\\\", {\\\\\\\\n            editor: context.accountId,\\\\\\\\n            labels: [props.text],\\\\\\\\n          })\\\\\\\\n        );\\\\\\\\n      }}\\\\\\\\n    />\\\\\\\\n  </div>\\\\\\\\n);\\\\\\\\n\\\\\\\\nconst githubLinkDiv = (\\\\\\\\n  <div className=\\\\\\\\\\\\\\\"col-lg-12  mb-2\\\\\\\\\\\\\\\">\\\\\\\\n    Github Issue URL:\\\\\\\\n    <input\\\\\\\\n      type=\\\\\\\\\\\\\\\"text\\\\\\\\\\\\\\\"\\\\\\\\n      value={state.githubLink}\\\\\\\\n      onChange={(event) => State.update({ githubLink: event.target.value })}\\\\\\\\n    />\\\\\\\\n  </div>\\\\\\\\n);\\\\\\\\n\\\\\\\\nconst nameDiv = (\\\\\\\\n  <div className=\\\\\\\\\\\\\\\"col-lg-6  mb-2\\\\\\\\\\\\\\\">\\\\\\\\n    Title:\\\\\\\\n    <input\\\\\\\\n      type=\\\\\\\\\\\\\\\"text\\\\\\\\\\\\\\\"\\\\\\\\n      value={state.name}\\\\\\\\n      onChange={(event) => State.update({ name: event.target.value })}\\\\\\\\n    />\\\\\\\\n  </div>\\\\\\\\n);\\\\\\\\n\\\\\\\\nconst amountDiv = (\\\\\\\\n  <div className=\\\\\\\\\\\\\\\"col-lg-6  mb-2\\\\\\\\\\\\\\\">\\\\\\\\n    Amount:\\\\\\\\n    <input\\\\\\\\n      type=\\\\\\\\\\\\\\\"text\\\\\\\\\\\\\\\"\\\\\\\\n      value={state.amount}\\\\\\\\n      onChange={(event) => State.update({ amount: event.target.value })}\\\\\\\\n    />\\\\\\\\n  </div>\\\\\\\\n);\\\\\\\\n\\\\\\\\nconst tokenDiv = (\\\\\\\\n  <div className=\\\\\\\\\\\\\\\"col-lg-6 mb-2\\\\\\\\\\\\\\\">\\\\\\\\n    Currency\\\\\\\\n    <select\\\\\\\\n      onChange={(event) => State.update({ token: event.target.value })}\\\\\\\\n      class=\\\\\\\\\\\\\\\"form-select\\\\\\\\\\\\\\\"\\\\\\\\n      aria-label=\\\\\\\\\\\\\\\"Select currency\\\\\\\\\\\\\\\"\\\\\\\\n      value={state.token}\\\\\\\\n    >\\\\\\\\n      <option value=\\\\\\\\\\\\\\\"USDT\\\\\\\\\\\\\\\">USDT</option>\\\\\\\\n      <option value=\\\\\\\\\\\\\\\"NEAR\\\\\\\\\\\\\\\">NEAR</option>\\\\\\\\n      <option value=\\\\\\\\\\\\\\\"USDC\\\\\\\\\\\\\\\">USDC</option>\\\\\\\\n    </select>\\\\\\\\n  </div>\\\\\\\\n);\\\\\\\\n\\\\\\\\nconst supervisorDiv = (\\\\\\\\n  <div className=\\\\\\\\\\\\\\\"col-lg-6 mb-2\\\\\\\\\\\\\\\">\\\\\\\\n    Supervisor:\\\\\\\\n    <input\\\\\\\\n      type=\\\\\\\\\\\\\\\"text\\\\\\\\\\\\\\\"\\\\\\\\n      value={state.supervisor}\\\\\\\\n      onChange={(event) => State.update({ supervisor: event.target.value })}\\\\\\\\n    />\\\\\\\\n  </div>\\\\\\\\n);\\\\\\\\n\\\\\\\\nconst callDescriptionDiv = () => {\\\\\\\\n  return (\\\\\\\\n    <div className=\\\\\\\\\\\\\\\"col-lg-12  mb-2\\\\\\\\\\\\\\\">\\\\\\\\n      Description:\\\\\\\\n      <br />\\\\\\\\n      <Widget\\\\\\\\n        src={\\\\\\\\\\\\\\\"devhub.near/widget/devhub.components.molecule.MarkdownEditor\\\\\\\\\\\\\\\"}\\\\\\\\n        props={{\\\\\\\\n          data: { handler: state.handler, content: state.description },\\\\\\\\n          onChange: (content) => {\\\\\\\\n            State.update({ description: content, handler: \\\\\\\\\\\\\\\"update\\\\\\\\\\\\\\\" });\\\\\\\\n            textareaInputHandler(content);\\\\\\\\n          },\\\\\\\\n        }}\\\\\\\\n      />\\\\\\\\n      {autocompleteEnabled && state.showAccountAutocomplete && (\\\\\\\\n        <AutoComplete>\\\\\\\\n          <Widget\\\\\\\\n            src=\\\\\\\\\\\\\\\"devhub.near/widget/devhub.components.molecule.AccountAutocomplete\\\\\\\\\\\\\\\"\\\\\\\\n            props={{\\\\\\\\n              term: state.mentionInput,\\\\\\\\n              onSelect: autoCompleteAccountId,\\\\\\\\n              onClose: () => State.update({ showAccountAutocomplete: false }),\\\\\\\\n            }}\\\\\\\\n          />\\\\\\\\n        </AutoComplete>\\\\\\\\n      )}\\\\\\\\n    </div>\\\\\\\\n  );\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst disclaimer = (\\\\\\\\n  <p>\\\\\\\\n    <i>\\\\\\\\n      * Note, all projects that were granted sponsorships are required to pass\\\\\\\\n      KYC to receive the funding.\\\\\\\\n    </i>\\\\\\\\n  </p>\\\\\\\\n);\\\\\\\\n\\\\\\\\nconst isFundraisingDiv = (\\\\\\\\n  // This is jank with just btns and not radios. But the radios were glitchy af\\\\\\\\n  <>\\\\\\\\n    <div class=\\\\\\\\\\\\\\\"mb-2\\\\\\\\\\\\\\\">\\\\\\\\n      <p class=\\\\\\\\\\\\\\\"fs-6 fw-bold mb-1\\\\\\\\\\\\\\\">\\\\\\\\n        Are you seeking funding for your solution?\\\\\\\\n        <span class=\\\\\\\\\\\\\\\"text-muted fw-normal\\\\\\\\\\\\\\\">(Optional)</span>\\\\\\\\n      </p>\\\\\\\\n      <div class=\\\\\\\\\\\\\\\"form-check form-check-inline\\\\\\\\\\\\\\\">\\\\\\\\n        <label class=\\\\\\\\\\\\\\\"form-check-label\\\\\\\\\\\\\\\">\\\\\\\\n          <button\\\\\\\\n            className=\\\\\\\\\\\\\\\"btn btn-light p-0\\\\\\\\\\\\\\\"\\\\\\\\n            style={{\\\\\\\\n              backgroundColor: state.seekingFunding ? \\\\\\\\\\\\\\\"#0C7283\\\\\\\\\\\\\\\" : \\\\\\\\\\\\\\\"inherit\\\\\\\\\\\\\\\",\\\\\\\\n              color: \\\\\\\\\\\\\\\"#f3f3f3\\\\\\\\\\\\\\\",\\\\\\\\n              border: \\\\\\\\\\\\\\\"solid #D9D9D9\\\\\\\\\\\\\\\",\\\\\\\\n              borderRadius: \\\\\\\\\\\\\\\"100%\\\\\\\\\\\\\\\",\\\\\\\\n              height: \\\\\\\\\\\\\\\"20px\\\\\\\\\\\\\\\",\\\\\\\\n              width: \\\\\\\\\\\\\\\"20px\\\\\\\\\\\\\\\",\\\\\\\\n            }}\\\\\\\\n            onClick={() => State.update({ seekingFunding: true })}\\\\\\\\n          />\\\\\\\\n          Yes\\\\\\\\n        </label>\\\\\\\\n      </div>\\\\\\\\n      <div class=\\\\\\\\\\\\\\\"form-check form-check-inline\\\\\\\\\\\\\\\">\\\\\\\\n        <label class=\\\\\\\\\\\\\\\"form-check-label\\\\\\\\\\\\\\\">\\\\\\\\n          <button\\\\\\\\n            className=\\\\\\\\\\\\\\\"btn btn-light p-0\\\\\\\\\\\\\\\"\\\\\\\\n            style={{\\\\\\\\n              backgroundColor: !state.seekingFunding ? \\\\\\\\\\\\\\\"#0C7283\\\\\\\\\\\\\\\" : \\\\\\\\\\\\\\\"inherit\\\\\\\\\\\\\\\",\\\\\\\\n              color: \\\\\\\\\\\\\\\"#f3f3f3\\\\\\\\\\\\\\\",\\\\\\\\n              border: \\\\\\\\\\\\\\\"solid #D9D9D9\\\\\\\\\\\\\\\",\\\\\\\\n              borderRadius: \\\\\\\\\\\\\\\"100%\\\\\\\\\\\\\\\",\\\\\\\\n              height: \\\\\\\\\\\\\\\"20px\\\\\\\\\\\\\\\",\\\\\\\\n              width: \\\\\\\\\\\\\\\"20px\\\\\\\\\\\\\\\",\\\\\\\\n            }}\\\\\\\\n            onClick={() => State.update({ seekingFunding: false })}\\\\\\\\n          />\\\\\\\\n          No\\\\\\\\n        </label>\\\\\\\\n      </div>\\\\\\\\n    </div>\\\\\\\\n  </>\\\\\\\\n);\\\\\\\\n\\\\\\\\nconst fundraisingDiv = (\\\\\\\\n  <div class=\\\\\\\\\\\\\\\"d-flex flex-column mb-2\\\\\\\\\\\\\\\">\\\\\\\\n    <div className=\\\\\\\\\\\\\\\"col-lg-6 mb-2\\\\\\\\\\\\\\\">\\\\\\\\n      Currency\\\\\\\\n      <select\\\\\\\\n        onChange={(event) => State.update({ token: event.target.value })}\\\\\\\\n        class=\\\\\\\\\\\\\\\"form-select\\\\\\\\\\\\\\\"\\\\\\\\n        aria-label=\\\\\\\\\\\\\\\"Default select example\\\\\\\\\\\\\\\"\\\\\\\\n        value={state.token}\\\\\\\\n      >\\\\\\\\n        <option value=\\\\\\\\\\\\\\\"USDT\\\\\\\\\\\\\\\">USDT</option>\\\\\\\\n        <option value=\\\\\\\\\\\\\\\"NEAR\\\\\\\\\\\\\\\">NEAR</option>\\\\\\\\n        <option value=\\\\\\\\\\\\\\\"USDC\\\\\\\\\\\\\\\">USDC</option>\\\\\\\\n      </select>\\\\\\\\n    </div>\\\\\\\\n    <div className=\\\\\\\\\\\\\\\"col-lg-6 mb-2\\\\\\\\\\\\\\\">\\\\\\\\n      Requested amount\\\\\\\\n      <span class=\\\\\\\\\\\\\\\"text-muted fw-normal\\\\\\\\\\\\\\\">(Numbers Only)</span>\\\\\\\\n      <input\\\\\\\\n        type=\\\\\\\\\\\\\\\"number\\\\\\\\\\\\\\\"\\\\\\\\n        value={parseInt(state.amount) > 0 ? state.amount : \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\"}\\\\\\\\n        min={0}\\\\\\\\n        onChange={(event) => {\\\\\\\\n          State.update({\\\\\\\\n            amount: Number(\\\\\\\\n              event.target.value.toString().replace(/e/g, \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\")\\\\\\\\n            ).toString(),\\\\\\\\n          });\\\\\\\\n        }}\\\\\\\\n      />\\\\\\\\n    </div>\\\\\\\\n    <div className=\\\\\\\\\\\\\\\"col-lg-6 mb-2\\\\\\\\\\\\\\\">\\\\\\\\n      <p class=\\\\\\\\\\\\\\\"mb-1\\\\\\\\\\\\\\\">\\\\\\\\n        Requested sponsor\\\\\\\\n        <span class=\\\\\\\\\\\\\\\"text-muted fw-normal\\\\\\\\\\\\\\\">(Optional)</span>\\\\\\\\n      </p>\\\\\\\\n      <p style={{ fontSize: \\\\\\\\\\\\\\\"13px\\\\\\\\\\\\\\\" }} class=\\\\\\\\\\\\\\\"m-0 text-muted fw-light\\\\\\\\\\\\\\\">\\\\\\\\n        If you are requesting funding from a specific sponsor, please enter\\\\\\\\n        their username.\\\\\\\\n      </p>\\\\\\\\n      <div class=\\\\\\\\\\\\\\\"input-group flex-nowrap\\\\\\\\\\\\\\\">\\\\\\\\n        <span class=\\\\\\\\\\\\\\\"input-group-text\\\\\\\\\\\\\\\" id=\\\\\\\\\\\\\\\"addon-wrapping\\\\\\\\\\\\\\\">\\\\\\\\n          @\\\\\\\\n        </span>\\\\\\\\n        <input\\\\\\\\n          type=\\\\\\\\\\\\\\\"text\\\\\\\\\\\\\\\"\\\\\\\\n          class=\\\\\\\\\\\\\\\"form-control\\\\\\\\\\\\\\\"\\\\\\\\n          placeholder=\\\\\\\\\\\\\\\"Enter username\\\\\\\\\\\\\\\"\\\\\\\\n          value={state.supervisor}\\\\\\\\n          onChange={(event) => State.update({ supervisor: event.target.value })}\\\\\\\\n        />\\\\\\\\n      </div>\\\\\\\\n    </div>\\\\\\\\n  </div>\\\\\\\\n);\\\\\\\\n\\\\\\\\nfunction generateDescription(text, amount, token, supervisor, seekingFunding) {\\\\\\\\n  const fundingText =\\\\\\\\n    amount > 0 && token ? `###### Requested amount: ${amount} ${token}\\\\\\\\\\\\\\\\n` : \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\";\\\\\\\\n  const supervisorText = supervisor\\\\\\\\n    ? `###### Requested sponsor: @${supervisor}\\\\\\\\\\\\\\\\n`\\\\\\\\n    : \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\";\\\\\\\\n  return seekingFunding ? `${fundingText}${supervisorText}${text}` : text;\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst [tab, setTab] = useState(\\\\\\\\\\\\\\\"editor\\\\\\\\\\\\\\\");\\\\\\\\n\\\\\\\\nconst renamedPostType = postType == \\\\\\\\\\\\\\\"Submission\\\\\\\\\\\\\\\" ? \\\\\\\\\\\\\\\"Solution\\\\\\\\\\\\\\\" : postType;\\\\\\\\n// Below there is a weird code with fields.includes(\\\\\\\\\\\\\\\"githubLink\\\\\\\\\\\\\\\") ternary operator.\\\\\\\\n// This is to hack around rendering bug of near.social.\\\\\\\\nreturn (\\\\\\\\n  <div className=\\\\\\\\\\\\\\\"card\\\\\\\\\\\\\\\">\\\\\\\\n    <div className=\\\\\\\\\\\\\\\"card-header\\\\\\\\\\\\\\\">\\\\\\\\n      <div>\\\\\\\\n        <ul class=\\\\\\\\\\\\\\\"nav nav-tabs\\\\\\\\\\\\\\\">\\\\\\\\n          <li class=\\\\\\\\\\\\\\\"nav-item\\\\\\\\\\\\\\\">\\\\\\\\n            <button\\\\\\\\n              class={`nav-link ${tab === \\\\\\\\\\\\\\\"editor\\\\\\\\\\\\\\\" ? \\\\\\\\\\\\\\\"active\\\\\\\\\\\\\\\" : \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\"}`}\\\\\\\\n              onClick={() => setTab(\\\\\\\\\\\\\\\"editor\\\\\\\\\\\\\\\")}\\\\\\\\n            >\\\\\\\\n              Editor\\\\\\\\n            </button>\\\\\\\\n          </li>\\\\\\\\n          <li class=\\\\\\\\\\\\\\\"nav-item\\\\\\\\\\\\\\\">\\\\\\\\n            <button\\\\\\\\n              class={`nav-link ${tab === \\\\\\\\\\\\\\\"preview\\\\\\\\\\\\\\\" ? \\\\\\\\\\\\\\\"active\\\\\\\\\\\\\\\" : \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\"}`}\\\\\\\\n              onClick={() => setTab(\\\\\\\\\\\\\\\"preview\\\\\\\\\\\\\\\")}\\\\\\\\n            >\\\\\\\\n              Preview\\\\\\\\n            </button>\\\\\\\\n          </li>\\\\\\\\n        </ul>\\\\\\\\n      </div>\\\\\\\\n      {tab === \\\\\\\\\\\\\\\"editor\\\\\\\\\\\\\\\" && (\\\\\\\\n        <div className=\\\\\\\\\\\\\\\"my-3\\\\\\\\\\\\\\\">\\\\\\\\n          {mode} {renamedPostType}\\\\\\\\n        </div>\\\\\\\\n      )}\\\\\\\\n      {tab === \\\\\\\\\\\\\\\"preview\\\\\\\\\\\\\\\" && <div className=\\\\\\\\\\\\\\\"my-3\\\\\\\\\\\\\\\">Post Preview</div>}\\\\\\\\n    </div>\\\\\\\\n\\\\\\\\n    {tab === \\\\\\\\\\\\\\\"editor\\\\\\\\\\\\\\\" && (\\\\\\\\n      <div class=\\\\\\\\\\\\\\\"card-body\\\\\\\\\\\\\\\">\\\\\\\\n        {state.warning && (\\\\\\\\n          <div\\\\\\\\n            class=\\\\\\\\\\\\\\\"alert alert-warning alert-dismissible fade show\\\\\\\\\\\\\\\"\\\\\\\\n            role=\\\\\\\\\\\\\\\"alert\\\\\\\\\\\\\\\"\\\\\\\\n          >\\\\\\\\n            {state.warning}\\\\\\\\n            <button\\\\\\\\n              type=\\\\\\\\\\\\\\\"button\\\\\\\\\\\\\\\"\\\\\\\\n              class=\\\\\\\\\\\\\\\"btn-close\\\\\\\\\\\\\\\"\\\\\\\\n              data-bs-dismiss=\\\\\\\\\\\\\\\"alert\\\\\\\\\\\\\\\"\\\\\\\\n              aria-label=\\\\\\\\\\\\\\\"Close\\\\\\\\\\\\\\\"\\\\\\\\n              onClick={() => State.update({ warning: \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\" })}\\\\\\\\n            ></button>\\\\\\\\n          </div>\\\\\\\\n        )}\\\\\\\\n        {/* This statement around the githubLinkDiv creates a weird render bug\\\\\\\\n      where the title renders extra on state change. */}\\\\\\\\n        {fields.includes(\\\\\\\\\\\\\\\"githubLink\\\\\\\\\\\\\\\") ? (\\\\\\\\n          <div className=\\\\\\\\\\\\\\\"row\\\\\\\\\\\\\\\">\\\\\\\\n            {fields.includes(\\\\\\\\\\\\\\\"githubLink\\\\\\\\\\\\\\\") && githubLinkDiv}\\\\\\\\n            {labelEditor}\\\\\\\\n            {fields.includes(\\\\\\\\\\\\\\\"name\\\\\\\\\\\\\\\") && nameDiv}\\\\\\\\n            {fields.includes(\\\\\\\\\\\\\\\"description\\\\\\\\\\\\\\\") && callDescriptionDiv()}\\\\\\\\n          </div>\\\\\\\\n        ) : (\\\\\\\\n          <div className=\\\\\\\\\\\\\\\"row\\\\\\\\\\\\\\\">\\\\\\\\n            {labelEditor}\\\\\\\\n            {fields.includes(\\\\\\\\\\\\\\\"name\\\\\\\\\\\\\\\") && nameDiv}\\\\\\\\n            {fields.includes(\\\\\\\\\\\\\\\"amount\\\\\\\\\\\\\\\") && amountDiv}\\\\\\\\n            {fields.includes(\\\\\\\\\\\\\\\"sponsorship_token\\\\\\\\\\\\\\\") && tokenDiv}\\\\\\\\n            {fields.includes(\\\\\\\\\\\\\\\"supervisor\\\\\\\\\\\\\\\") && supervisorDiv}\\\\\\\\n            {fields.includes(\\\\\\\\\\\\\\\"description\\\\\\\\\\\\\\\") && callDescriptionDiv()}\\\\\\\\n            {fields.includes(\\\\\\\\\\\\\\\"fund_raising\\\\\\\\\\\\\\\") && isFundraisingDiv}\\\\\\\\n            {state.seekingFunding &&\\\\\\\\n              fields.includes(\\\\\\\\\\\\\\\"fund_raising\\\\\\\\\\\\\\\") &&\\\\\\\\n              fundraisingDiv}\\\\\\\\n          </div>\\\\\\\\n        )}\\\\\\\\n        <button\\\\\\\\n          style={{\\\\\\\\n            width: \\\\\\\\\\\\\\\"7rem\\\\\\\\\\\\\\\",\\\\\\\\n            backgroundColor: \\\\\\\\\\\\\\\"#0C7283\\\\\\\\\\\\\\\",\\\\\\\\n            color: \\\\\\\\\\\\\\\"#f3f3f3\\\\\\\\\\\\\\\",\\\\\\\\n          }}\\\\\\\\n          disabled={state.seekingFunding && (!state.amount || state.amount < 1)}\\\\\\\\n          className=\\\\\\\\\\\\\\\"btn btn-light mb-2 p-3\\\\\\\\\\\\\\\"\\\\\\\\n          onClick={onSubmit}\\\\\\\\n        >\\\\\\\\n          Submit\\\\\\\\n        </button>\\\\\\\\n        <button\\\\\\\\n          style={{\\\\\\\\n            width: \\\\\\\\\\\\\\\"7rem\\\\\\\\\\\\\\\",\\\\\\\\n            backgroundColor: \\\\\\\\\\\\\\\"#fff\\\\\\\\\\\\\\\",\\\\\\\\n            color: \\\\\\\\\\\\\\\"#000\\\\\\\\\\\\\\\",\\\\\\\\n          }}\\\\\\\\n          className=\\\\\\\\\\\\\\\"btn btn-light mb-2 p-3\\\\\\\\\\\\\\\"\\\\\\\\n          onClick={toggleEditor}\\\\\\\\n        >\\\\\\\\n          Cancel\\\\\\\\n        </button>\\\\\\\\n        {disclaimer}\\\\\\\\n      </div>\\\\\\\\n    )}\\\\\\\\n    {tab === \\\\\\\\\\\\\\\"preview\\\\\\\\\\\\\\\" && (\\\\\\\\n      <div class=\\\\\\\\\\\\\\\"card-body\\\\\\\\\\\\\\\">\\\\\\\\n        <Widget\\\\\\\\n          src=\\\\\\\\\\\\\\\"devhub.near/widget/devhub.entity.post.Post\\\\\\\\\\\\\\\"\\\\\\\\n          props={{\\\\\\\\n            isPreview: true,\\\\\\\\n            id: 0, // irrelevant\\\\\\\\n            post: {\\\\\\\\n              author_id: state.author_id,\\\\\\\\n              likes: [],\\\\\\\\n              snapshot: {\\\\\\\\n                editor_id: state.editor_id,\\\\\\\\n                labels: state.labelStrings,\\\\\\\\n                post_type: postType,\\\\\\\\n                name: state.name,\\\\\\\\n                description:\\\\\\\\n                  postType == \\\\\\\\\\\\\\\"Solution\\\\\\\\\\\\\\\"\\\\\\\\n                    ? generateDescription(\\\\\\\\n                        state.description,\\\\\\\\n                        state.amount,\\\\\\\\n                        state.token,\\\\\\\\n                        state.supervisor,\\\\\\\\n                        state.seekingFunding\\\\\\\\n                      )\\\\\\\\n                    : state.description,\\\\\\\\n                amount: state.amount,\\\\\\\\n                sponsorship_token: state.token,\\\\\\\\n                supervisor: state.supervisor,\\\\\\\\n                github_link: state.githubLink,\\\\\\\\n              },\\\\\\\\n            },\\\\\\\\n          }}\\\\\\\\n        />\\\\\\\\n      </div>\\\\\\\\n    )}\\\\\\\\n  </div>\\\\\\\\n);\\\\\\\\n\"}}}}}"
      }
    ],
    "actions_agg": {
      "deposit": 0
    },
    "outcomes": {
      "status": true
    },
    "outcomes_agg": {
      "transaction_fee": 1.5445120633944e+21
    }
  },
  {
    "id": "1678662170",
    "receipt_id": "2hQ8RkvPrBgoS1ktT88VP3KnxTUzUXXum4qwQozoKzvX",
    "predecessor_account_id": "system",
    "receiver_account_id": "devhub.near",
    "receipt_kind": "ACTION",
    "receipt_block": {
      "block_hash": "7wopr93jhs9KriYVhbc3VCFeKL5rCJ8k8GPt2TUqEEHo",
      "block_height": 107503349,
      "block_timestamp": 1702110908072291600
    },
    "receipt_outcome": {
      "gas_burnt": 223182562500,
      "tokens_burnt": 0,
      "executor_account_id": "devhub.near",
      "status": true
    },
    "transaction_hash": "CUiV8ED9nn3A33nDGvw8YggWc3q8yTvurSuuRcWMp2jz",
    "included_in_block_hash": "C7rGAdgurzdMo77z5L6YzF3CLF2q6w6MiZe8NSCSqbSC",
    "block_timestamp": "1702110905995107017",
    "block": {
      "block_height": 107503347
    },
    "receipt_conversion_tokens_burnt": "252015327750000000000",
    "actions": [
      {
        "action": "TRANSFER",
        "method": null,
        "deposit": 1.8779475250743086e+23,
        "fee": 0,
        "args": null
      }
    ],
    "actions_agg": {
      "deposit": 0
    },
    "outcomes": {
      "status": true
    },
    "outcomes_agg": {
      "transaction_fee": 1.5445120633944e+21
    }
  },
  {
    "id": "1705968214",
    "receipt_id": "G8XZXr5T9SpmwUXKVP21rcnbYW5U8n8gRxpcMujLGtcS",
    "predecessor_account_id": "devhub.near",
    "receiver_account_id": "devhub.near",
    "receipt_kind": "ACTION",
    "receipt_block": {
      "block_hash": "5qbXxr9VvKKjV5gnSdgyW87PRdL3fzJrDjfjid9yd5qS",
      "block_height": 107768845,
      "block_timestamp": 1702394023246300700
    },
    "receipt_outcome": {
      "gas_burnt": 209824625000,
      "tokens_burnt": 20982462500000000000,
      "executor_account_id": "devhub.near",
      "status": true
    },
    "transaction_hash": "DVfgWCCRtg7xzXxogyggFnx2H1XCXZNapZtnKdXCZTjN",
    "included_in_block_hash": "5qbXxr9VvKKjV5gnSdgyW87PRdL3fzJrDjfjid9yd5qS",
    "block_timestamp": "1702394023246300609",
    "block": {
      "block_height": 107768845
    },
    "receipt_conversion_tokens_burnt": "20982462500000000000",
    "actions": [
      {
        "action": "ADD_KEY",
        "method": null,
        "deposit": 0,
        "fee": 20982462500000000000,
        "args": null
      }
    ],
    "actions_agg": {
      "deposit": 0
    },
    "outcomes": {
      "status": true
    },
    "outcomes_agg": {
      "transaction_fee": 41964925000000000000
    }
  },
  {
    "id": "1705968509",
    "receipt_id": "7Qs2n8zB5oH1bnw3BzNZ9Fzrx5geByUDg52sDxCvWzXG",
    "predecessor_account_id": "devhub.near",
    "receiver_account_id": "devhub.near",
    "receipt_kind": "ACTION",
    "receipt_block": {
      "block_hash": "AYeiEN68b3SQQXWSC7SS3aX19QkT88zvFT2ghGpRh51u",
      "block_height": 107768856,
      "block_timestamp": 1702394036134267400
    },
    "receipt_outcome": {
      "gas_burnt": 209824625000,
      "tokens_burnt": 20982462500000000000,
      "executor_account_id": "devhub.near",
      "status": true
    },
    "transaction_hash": "H4mzwvQT8NVMA7DmvaZfKR62wFgtMaQZjVbPTeumrsvQ",
    "included_in_block_hash": "AYeiEN68b3SQQXWSC7SS3aX19QkT88zvFT2ghGpRh51u",
    "block_timestamp": "1702394036134267352",
    "block": {
      "block_height": 107768856
    },
    "receipt_conversion_tokens_burnt": "20982462500000000000",
    "actions": [
      {
        "action": "ADD_KEY",
        "method": null,
        "deposit": 0,
        "fee": 20982462500000000000,
        "args": null
      }
    ],
    "actions_agg": {
      "deposit": 0
    },
    "outcomes": {
      "status": true
    },
    "outcomes_agg": {
      "transaction_fee": 41964925000000000000
    }
  },
  {
    "id": "1706135217",
    "receipt_id": "2nbBgjLtz96wstFVNCKNT4et2jqJKKGYzZfV2T1sCWt1",
    "predecessor_account_id": "devhub.near",
    "receiver_account_id": "mainnet",
    "receipt_kind": "ACTION",
    "receipt_block": {
      "block_hash": "9iTBwuuReAMta6JZPxbTVRkPqdcqBxrqQXAraRqjejVE",
      "block_height": 107770304,
      "block_timestamp": 1702395616149943300
    },
    "receipt_outcome": {
      "gas_burnt": 2428200491750,
      "tokens_burnt": 242820049175000000000,
      "executor_account_id": "mainnet",
      "status": false
    },
    "transaction_hash": "2Y2wZ5yo1h5AM5UPc6hw6EFRmnBwHKKBLRLQv9kswYbq",
    "included_in_block_hash": "A6aHXv1dxMdPKKkRq97J253kU1C64AUCiRKjbT6PCkYg",
    "block_timestamp": "1702395614961563098",
    "block": {
      "block_height": 107770303
    },
    "receipt_conversion_tokens_burnt": "242820049175000000000",
    "actions": [
      {
        "action": "FUNCTION_CALL",
        "method": "create_account",
        "deposit": 1e+23,
        "fee": 242820049175000000000,
        "args": "{\"new_account_id\": \"badges.devhub.near\", \"new_public_key\": \"ed25519:74jAumusUgSxs8VwsEZrv1Tk9XL9yq8MCzLdVycDf4Jx\"}"
      }
    ],
    "actions_agg": {
      "deposit": 1e+23
    },
    "outcomes": {
      "status": false
    },
    "outcomes_agg": {
      "transaction_fee": 485640098350000000000
    }
  },
  {
    "id": "1706135254",
    "receipt_id": "E1FhVEZWxnmds5sdH1mZPNvNe9wf1zXJH8ioTHnJjxEY",
    "predecessor_account_id": "system",
    "receiver_account_id": "devhub.near",
    "receipt_kind": "ACTION",
    "receipt_block": {
      "block_hash": "J59YTFmHsN2uzaphJuUbmNEZybW6NQKtg8UtjedF9QMm",
      "block_height": 107770305,
      "block_timestamp": 1702395617162195200
    },
    "receipt_outcome": {
      "gas_burnt": 223182562500,
      "tokens_burnt": 0,
      "executor_account_id": "devhub.near",
      "status": true
    },
    "transaction_hash": "2Y2wZ5yo1h5AM5UPc6hw6EFRmnBwHKKBLRLQv9kswYbq",
    "included_in_block_hash": "A6aHXv1dxMdPKKkRq97J253kU1C64AUCiRKjbT6PCkYg",
    "block_timestamp": "1702395614961563098",
    "block": {
      "block_height": 107770303
    },
    "receipt_conversion_tokens_burnt": "242820049175000000000",
    "actions": [
      {
        "action": "TRANSFER",
        "method": null,
        "deposit": 1e+23,
        "fee": 0,
        "args": null
      }
    ],
    "actions_agg": {
      "deposit": 1e+23
    },
    "outcomes": {
      "status": false
    },
    "outcomes_agg": {
      "transaction_fee": 485640098350000000000
    }
  },
  {
    "id": "1706135255",
    "receipt_id": "G8Bk4BPNM6TXncY1XBmeMfQb9k3aS1SRweFbeopF4V7P",
    "predecessor_account_id": "system",
    "receiver_account_id": "devhub.near",
    "receipt_kind": "ACTION",
    "receipt_block": {
      "block_hash": "J59YTFmHsN2uzaphJuUbmNEZybW6NQKtg8UtjedF9QMm",
      "block_height": 107770305,
      "block_timestamp": 1702395617162195200
    },
    "receipt_outcome": {
      "gas_burnt": 223182562500,
      "tokens_burnt": 0,
      "executor_account_id": "devhub.near",
      "status": true
    },
    "transaction_hash": "2Y2wZ5yo1h5AM5UPc6hw6EFRmnBwHKKBLRLQv9kswYbq",
    "included_in_block_hash": "A6aHXv1dxMdPKKkRq97J253kU1C64AUCiRKjbT6PCkYg",
    "block_timestamp": "1702395614961563098",
    "block": {
      "block_height": 107770303
    },
    "receipt_conversion_tokens_burnt": "242820049175000000000",
    "actions": [
      {
        "action": "TRANSFER",
        "method": null,
        "deposit": 3.7454395944174475e+21,
        "fee": 0,
        "args": null
      }
    ],
    "actions_agg": {
      "deposit": 1e+23
    },
    "outcomes": {
      "status": false
    },
    "outcomes_agg": {
      "transaction_fee": 485640098350000000000
    }
  },
  {
    "id": "1706136440",
    "receipt_id": "CLqyFCQzhEDHsFVWs4ZocrrC6fkvqhAyfgBJavmzTRMD",
    "predecessor_account_id": "devhub.near",
    "receiver_account_id": "create_account",
    "receipt_kind": "ACTION",
    "receipt_block": {
      "block_hash": "3pfVj4aPv6WgNT9zb1Q4Lh68nwvM6v8h2MKiygy85ZLW",
      "block_height": 107770335,
      "block_timestamp": 1702395648685359000
    },
    "receipt_outcome": {
      "gas_burnt": 2428180368344,
      "tokens_burnt": 242818036834400000000,
      "executor_account_id": "create_account",
      "status": false
    },
    "transaction_hash": "Bw1UJF6zWfhBsPYM2jtjrXPAyiXkPnn362uKkAhTAJk4",
    "included_in_block_hash": "9EX2RiEsV1TXpXNMhkdYeJSQYjUgDkbi8rptmMNWWpFc",
    "block_timestamp": "1702395647734882349",
    "block": {
      "block_height": 107770334
    },
    "receipt_conversion_tokens_burnt": "242818036834400000000",
    "actions": [
      {
        "action": "FUNCTION_CALL",
        "method": "{\\\"new_account_id\\\": \\\"badges.devhub.near\\\", \\\"new_public_key\\\": \\\"ed25519:74jAumusUgSxs8VwsEZrv1Tk9XL9yq8MCzLdVycDf4Jx\\\"}",
        "deposit": 1e+23,
        "fee": 242818036834400000000,
        "args": "{}"
      }
    ],
    "actions_agg": {
      "deposit": 1e+23
    },
    "outcomes": {
      "status": false
    },
    "outcomes_agg": {
      "transaction_fee": 485636073668800000000
    }
  },
  {
    "id": "1706136510",
    "receipt_id": "8FBsqXhrtJccV41yT3mVuEVDY5GPZXERovoUd3kSCkpf",
    "predecessor_account_id": "system",
    "receiver_account_id": "devhub.near",
    "receipt_kind": "ACTION",
    "receipt_block": {
      "block_hash": "DRLekhMkaAMKz22cPheqh5GGAeXWgrb8h5JDWYSe2GY1",
      "block_height": 107770336,
      "block_timestamp": 1702395649671852300
    },
    "receipt_outcome": {
      "gas_burnt": 223182562500,
      "tokens_burnt": 0,
      "executor_account_id": "devhub.near",
      "status": true
    },
    "transaction_hash": "Bw1UJF6zWfhBsPYM2jtjrXPAyiXkPnn362uKkAhTAJk4",
    "included_in_block_hash": "9EX2RiEsV1TXpXNMhkdYeJSQYjUgDkbi8rptmMNWWpFc",
    "block_timestamp": "1702395647734882349",
    "block": {
      "block_height": 107770334
    },
    "receipt_conversion_tokens_burnt": "242818036834400000000",
    "actions": [
      {
        "action": "TRANSFER",
        "method": null,
        "deposit": 1e+23,
        "fee": 0,
        "args": null
      }
    ],
    "actions_agg": {
      "deposit": 1e+23
    },
    "outcomes": {
      "status": false
    },
    "outcomes_agg": {
      "transaction_fee": 485636073668800000000
    }
  },
  {
    "id": "1706136512",
    "receipt_id": "7sRqxUVooQnMxSz5CBxA4kjxwB9T1Hrws76vn9xgQodg",
    "predecessor_account_id": "system",
    "receiver_account_id": "devhub.near",
    "receipt_kind": "ACTION",
    "receipt_block": {
      "block_hash": "DRLekhMkaAMKz22cPheqh5GGAeXWgrb8h5JDWYSe2GY1",
      "block_height": 107770336,
      "block_timestamp": 1702395649671852300
    },
    "receipt_outcome": {
      "gas_burnt": 223182562500,
      "tokens_burnt": 0,
      "executor_account_id": "devhub.near",
      "status": true
    },
    "transaction_hash": "Bw1UJF6zWfhBsPYM2jtjrXPAyiXkPnn362uKkAhTAJk4",
    "included_in_block_hash": "9EX2RiEsV1TXpXNMhkdYeJSQYjUgDkbi8rptmMNWWpFc",
    "block_timestamp": "1702395647734882349",
    "block": {
      "block_height": 107770334
    },
    "receipt_conversion_tokens_burnt": "242818036834400000000",
    "actions": [
      {
        "action": "TRANSFER",
        "method": null,
        "deposit": 3.7454391318329263e+21,
        "fee": 0,
        "args": null
      }
    ],
    "actions_agg": {
      "deposit": 1e+23
    },
    "outcomes": {
      "status": false
    },
    "outcomes_agg": {
      "transaction_fee": 485636073668800000000
    }
  },
  {
    "id": "1706148197",
    "receipt_id": "DrtABWvxeeQenm6bVE6SJuuZkndJmxHWfEfiLrdUsSNm",
    "predecessor_account_id": "devhub.near",
    "receiver_account_id": "badges.devhub.near",
    "receipt_kind": "ACTION",
    "receipt_block": {
      "block_hash": "CAVznAnaUhKLff9HkhaaYvsSaPGNeizjcMti8PuBBrS7",
      "block_height": 107770459,
      "block_timestamp": 1702395780751808500
    },
    "receipt_outcome": {
      "gas_burnt": 4174947687500,
      "tokens_burnt": 417494768750000000000,
      "executor_account_id": "badges.devhub.near",
      "status": true
    },
    "transaction_hash": "BCmNG7RCE6V9vrg4QLSZjqXSRAXW8BwR6u5BoeB5CHaw",
    "included_in_block_hash": "pT6anFLZ1ij1MkD6iwvjFbfAg6MVwSnrm9PAk8Jhzpq",
    "block_timestamp": "1702395779629716841",
    "block": {
      "block_height": 107770458
    },
    "receipt_conversion_tokens_burnt": "417494768750000000000",
    "actions": [
      {
        "action": "CREATE_ACCOUNT",
        "method": null,
        "deposit": 0,
        "fee": 417494768750000000000,
        "args": null
      },
      {
        "action": "TRANSFER",
        "method": null,
        "deposit": 1e+23,
        "fee": 417494768750000000000,
        "args": null
      },
      {
        "action": "ADD_KEY",
        "method": null,
        "deposit": 0,
        "fee": 417494768750000000000,
        "args": null
      }
    ],
    "actions_agg": {
      "deposit": 1e+23
    },
    "outcomes": {
      "status": true
    },
    "outcomes_agg": {
      "transaction_fee": 834989537500000000000
    }
  },
  {
    "id": "1706148385",
    "receipt_id": "95592MfVj6t8Jo9kS8U15i17Hh3aDCu67aUuZDCR9J9u",
    "predecessor_account_id": "system",
    "receiver_account_id": "devhub.near",
    "receipt_kind": "ACTION",
    "receipt_block": {
      "block_hash": "5563NrdEN9Sw43HBpS5C416TSMrjxZ5n7g7GY5KAkXsa",
      "block_height": 107770460,
      "block_timestamp": 1702395781659897300
    },
    "receipt_outcome": {
      "gas_burnt": 223182562500,
      "tokens_burnt": 0,
      "executor_account_id": "devhub.near",
      "status": true
    },
    "transaction_hash": "BCmNG7RCE6V9vrg4QLSZjqXSRAXW8BwR6u5BoeB5CHaw",
    "included_in_block_hash": "pT6anFLZ1ij1MkD6iwvjFbfAg6MVwSnrm9PAk8Jhzpq",
    "block_timestamp": "1702395779629716841",
    "block": {
      "block_height": 107770458
    },
    "receipt_conversion_tokens_burnt": "417494768750000000000",
    "actions": [
      {
        "action": "TRANSFER",
        "method": null,
        "deposit": 12524843062500000000,
        "fee": 0,
        "args": null
      }
    ],
    "actions_agg": {
      "deposit": 1e+23
    },
    "outcomes": {
      "status": true
    },
    "outcomes_agg": {
      "transaction_fee": 834989537500000000000
    }
  },
  {
    "id": "1714299863",
    "receipt_id": "64VzGFwqxwKfDzzT1n62A5BKsysE61wkMrskFu1HHVHT",
    "predecessor_account_id": "devhub.near",
    "receiver_account_id": "devhub.near",
    "receipt_kind": "ACTION",
    "receipt_block": {
      "block_hash": "5MvfwD4yWkMUmAyZHjCNb2eDbbN5GB6feTS7nDQssZqh",
      "block_height": 107851612,
      "block_timestamp": 1702481598693353200
    },
    "receipt_outcome": {
      "gas_burnt": 209824625000,
      "tokens_burnt": 20982462500000000000,
      "executor_account_id": "devhub.near",
      "status": true
    },
    "transaction_hash": "2LSkfSPARY5aHHpGUgGz7KDVCbJPbAKMGHwepG2Fs7QY",
    "included_in_block_hash": "5MvfwD4yWkMUmAyZHjCNb2eDbbN5GB6feTS7nDQssZqh",
    "block_timestamp": "1702481598693353227",
    "block": {
      "block_height": 107851612
    },
    "receipt_conversion_tokens_burnt": "20982462500000000000",
    "actions": [
      {
        "action": "ADD_KEY",
        "method": null,
        "deposit": 0,
        "fee": 20982462500000000000,
        "args": null
      }
    ],
    "actions_agg": {
      "deposit": 0
    },
    "outcomes": {
      "status": true
    },
    "outcomes_agg": {
      "transaction_fee": 41964925000000000000
    }
  },
  {
    "id": "1714480882",
    "receipt_id": "Pwhj5fpGbig32cBk8HQkuB6rh5NMXLokKNuFtv1aQ9R",
    "predecessor_account_id": "devhub.near",
    "receiver_account_id": "social.near",
    "receipt_kind": "ACTION",
    "receipt_block": {
      "block_hash": "7p1nvc1XFLK1QBeLisqXypPJzWDyvuK3575CSpJCaL3a",
      "block_height": 107853329,
      "block_timestamp": 1702483428542176500
    },
    "receipt_outcome": {
      "gas_burnt": 18164174077249,
      "tokens_burnt": 1.8164174077249e+21,
      "executor_account_id": "social.near",
      "status": true
    },
    "transaction_hash": "HTPhsB79ABCmZcRZZs5KKRivocdQ7GrL7DuSMY7WiorY",
    "included_in_block_hash": "2gYqmY9y7AFr83R1VgEWPA7ehW2C2vFAy7hiyzejvJcc",
    "block_timestamp": "1702483427205333645",
    "block": {
      "block_height": 107853328
    },
    "receipt_conversion_tokens_burnt": "257915733982600000000",
    "actions": [
      {
        "action": "FUNCTION_CALL",
        "method": "set",
        "deposit": 0,
        "fee": 1.8164174077249e+21,
        "args": "{\"data\": {\"devhub.near\": {\"widget\": {\"devhub.page.create\": {\"\": \"State.init({\\\\\\\\n  seekingFunding: false,\\\\\\\\n  author_id: context.accountId,\\\\\\\\n  // Should be a list of objects with field \\\\\\\\\\\\\\\"name\\\\\\\\\\\\\\\".\\\\\\\\n  labels,\\\\\\\\n  // Should be a list of labels as strings.\\\\\\\\n  // Both of the label structures should be modified together.\\\\\\\\n  labelStrings: [],\\\\\\\\n  postType: \\\\\\\\\\\\\\\"Idea\\\\\\\\\\\\\\\",\\\\\\\\n  name: props.name ?? \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\",\\\\\\\\n  description: props.description ?? \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\",\\\\\\\\n  amount: props.amount ?? \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\",\\\\\\\\n  token: props.token ?? \\\\\\\\\\\\\\\"USDT\\\\\\\\\\\\\\\",\\\\\\\\n  supervisor: props.supervisor ?? \\\\\\\\\\\\\\\"neardevdao.near\\\\\\\\\\\\\\\",\\\\\\\\n  githubLink: props.githubLink ?? \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\",\\\\\\\\n  warning: \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\",\\\\\\\\n  waitForDraftStateRestore: true,\\\\\\\\n  mentionInput: \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\", // text next to @ tag\\\\\\\\n  mentionsArray: [], // all the mentions in the description\\\\\\\\n});\\\\\\\\n\\\\\\\\n/* INCLUDE: \\\\\\\\\\\\\\\"core/lib/autocomplete\\\\\\\\\\\\\\\" */\\\\\\\\n\\\\\\\\nconst autocompleteEnabled = true;\\\\\\\\n\\\\\\\\nconst AutoComplete = styled.div`\\\\\\\\n  z-index: 5;\\\\\\\\n\\\\\\\\n  > div > div {\\\\\\\\n    padding: calc(var(--padding) / 2);\\\\\\\\n  }\\\\\\\\n`;\\\\\\\\n\\\\\\\\nfunction textareaInputHandler(value) {\\\\\\\\n  const words = value.split(/\\\\\\\\\\\\\\\\s+/);\\\\\\\\n  const allMentiones = words\\\\\\\\n    .filter((word) => word.startsWith(\\\\\\\\\\\\\\\"@\\\\\\\\\\\\\\\"))\\\\\\\\n    .map((mention) => mention.slice(1));\\\\\\\\n  const newMentiones = allMentiones.filter(\\\\\\\\n    (item) => !state.mentionsArray.includes(item)\\\\\\\\n  );\\\\\\\\n\\\\\\\\n  State.update((lastKnownState) => ({\\\\\\\\n    ...lastKnownState,\\\\\\\\n    text: value,\\\\\\\\n    showAccountAutocomplete: newMentiones?.length > 0,\\\\\\\\n    mentionsArray: allMentiones,\\\\\\\\n    mentionInput: newMentiones?.[0] ?? \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\",\\\\\\\\n  }));\\\\\\\\n}\\\\\\\\n\\\\\\\\nfunction autoCompleteAccountId(id) {\\\\\\\\n  // to make sure we update the @ at correct index\\\\\\\\n  let currentIndex = 0;\\\\\\\\n  const updatedDescription = state.description.replace(\\\\\\\\n    /(?:^|\\\\\\\\\\\\\\\\s)(@[^\\\\\\\\\\\\\\\\s]*)/g,\\\\\\\\n    (match) => {\\\\\\\\n      if (currentIndex === state.mentionsArray.indexOf(state.mentionInput)) {\\\\\\\\n        currentIndex++;\\\\\\\\n        return ` @${id}`;\\\\\\\\n      } else {\\\\\\\\n        currentIndex++;\\\\\\\\n        return match;\\\\\\\\n      }\\\\\\\\n    }\\\\\\\\n  );\\\\\\\\n\\\\\\\\n  State.update((lastKnownState) => ({\\\\\\\\n    ...lastKnownState,\\\\\\\\n    handler: \\\\\\\\\\\\\\\"autocompleteSelected\\\\\\\\\\\\\\\",\\\\\\\\n    description: updatedDescription,\\\\\\\\n    showAccountAutocomplete: false,\\\\\\\\n  }));\\\\\\\\n}\\\\\\\\n/* END_INCLUDE: \\\\\\\\\\\\\\\"core/lib/autocomplete\\\\\\\\\\\\\\\" */\\\\\\\\n\\\\\\\\nconst { href } = VM.require(\\\\\\\\\\\\\\\"devhub.near/widget/core.lib.url\\\\\\\\\\\\\\\");\\\\\\\\n\\\\\\\\nconst { DRAFT_STATE_STORAGE_KEY, draftState, onDraftStateChange } = VM.require(\\\\\\\\n  \\\\\\\\\\\\\\\"devhub.near/widget/devhub.entity.post.draft\\\\\\\\\\\\\\\"\\\\\\\\n);\\\\\\\\n\\\\\\\\nif (!href) {\\\\\\\\n  return <p>Loading modules...</p>;\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst parentId = props.parentId ?? null;\\\\\\\\nconst postId = props.postId ?? null;\\\\\\\\nconst mode = props.mode ?? \\\\\\\\\\\\\\\"Create\\\\\\\\\\\\\\\";\\\\\\\\n\\\\\\\\nconst referralLabels = props.referral ? [`referral:${props.referral}`] : [];\\\\\\\\nconst labelStrings = (props.labels ? props.labels.split(\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\") : []).concat(\\\\\\\\n  referralLabels\\\\\\\\n);\\\\\\\\nconst labels = labelStrings.map((s) => {\\\\\\\\n  return { name: s };\\\\\\\\n});\\\\\\\\n\\\\\\\\nif (state.waitForDraftStateRestore) {\\\\\\\\n  const draftstatestring = Storage.privateGet(DRAFT_STATE_STORAGE_KEY);\\\\\\\\n  if (draftstatestring != null) {\\\\\\\\n    if (props.transactionHashes) {\\\\\\\\n      State.update({ waitForDraftStateRestore: false });\\\\\\\\n      Storage.privateSet(DRAFT_STATE_STORAGE_KEY, undefined);\\\\\\\\n    } else {\\\\\\\\n      try {\\\\\\\\n        const draftstate = JSON.parse(draftstatestring);\\\\\\\\n        State.update(draftstate);\\\\\\\\n      } catch (e) {\\\\\\\\n        console.error(\\\\\\\\\\\\\\\"error restoring draft\\\\\\\\\\\\\\\", draftstatestring);\\\\\\\\n      }\\\\\\\\n    }\\\\\\\\n    State.update({ waitForDraftStateRestore: false });\\\\\\\\n  }\\\\\\\\n}\\\\\\\\n\\\\\\\\n// This must be outside onClick, because Near.view returns null at first, and when the view call finished, it returns true/false.\\\\\\\\n// If checking this inside onClick, it will give `null` and we cannot tell the result is true or false.\\\\\\\\nlet grantNotify = Near.view(\\\\\\\\\\\\\\\"social.near\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"is_write_permission_granted\\\\\\\\\\\\\\\", {\\\\\\\\n  predecessor_id: \\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\",\\\\\\\\n  key: context.accountId + \\\\\\\\\\\\\\\"/index/notify\\\\\\\\\\\\\\\",\\\\\\\\n});\\\\\\\\nif (grantNotify === null) {\\\\\\\\n  return;\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst onSubmit = () => {\\\\\\\\n  Storage.privateSet(DRAFT_STATE_STORAGE_KEY, JSON.stringify(state));\\\\\\\\n\\\\\\\\n  let labels = state.labelStrings;\\\\\\\\n\\\\\\\\n  let body = {\\\\\\\\n    name: state.name,\\\\\\\\n    description: generateDescription(\\\\\\\\n      state.description,\\\\\\\\n      state.amount,\\\\\\\\n      state.token,\\\\\\\\n      state.supervisor,\\\\\\\\n      state.seekingFunding\\\\\\\\n    ),\\\\\\\\n  };\\\\\\\\n\\\\\\\\n  if (state.postType === \\\\\\\\\\\\\\\"Solution\\\\\\\\\\\\\\\") {\\\\\\\\n    body = {\\\\\\\\n      ...body,\\\\\\\\n      post_type: \\\\\\\\\\\\\\\"Solution\\\\\\\\\\\\\\\",\\\\\\\\n      solution_version: \\\\\\\\\\\\\\\"V1\\\\\\\\\\\\\\\",\\\\\\\\n    };\\\\\\\\n  } else {\\\\\\\\n    // Idea\\\\\\\\n    body = {\\\\\\\\n      ...body,\\\\\\\\n      post_type: \\\\\\\\\\\\\\\"Idea\\\\\\\\\\\\\\\",\\\\\\\\n      idea_version: \\\\\\\\\\\\\\\"V1\\\\\\\\\\\\\\\",\\\\\\\\n    };\\\\\\\\n  }\\\\\\\\n\\\\\\\\n  if (!context.accountId) return;\\\\\\\\n\\\\\\\\n  let txn = [];\\\\\\\\n  if (mode == \\\\\\\\\\\\\\\"Create\\\\\\\\\\\\\\\") {\\\\\\\\n    txn.push({\\\\\\\\n      contractName: \\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\",\\\\\\\\n      methodName: \\\\\\\\\\\\\\\"add_post\\\\\\\\\\\\\\\",\\\\\\\\n      args: {\\\\\\\\n        parent_id: parentId,\\\\\\\\n        labels,\\\\\\\\n        body: body,\\\\\\\\n      },\\\\\\\\n      gas: Big(10).pow(14),\\\\\\\\n    });\\\\\\\\n  } else if (mode == \\\\\\\\\\\\\\\"Edit\\\\\\\\\\\\\\\") {\\\\\\\\n    txn.push({\\\\\\\\n      contractName: \\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\",\\\\\\\\n      methodName: \\\\\\\\\\\\\\\"edit_post\\\\\\\\\\\\\\\",\\\\\\\\n      args: {\\\\\\\\n        id: postId,\\\\\\\\n        labels,\\\\\\\\n        body: body,\\\\\\\\n      },\\\\\\\\n      gas: Big(10).pow(14),\\\\\\\\n    });\\\\\\\\n  }\\\\\\\\n  if (mode == \\\\\\\\\\\\\\\"Create\\\\\\\\\\\\\\\" || mode == \\\\\\\\\\\\\\\"Edit\\\\\\\\\\\\\\\") {\\\\\\\\n    if (grantNotify === false) {\\\\\\\\n      txn.unshift({\\\\\\\\n        contractName: \\\\\\\\\\\\\\\"social.near\\\\\\\\\\\\\\\",\\\\\\\\n        methodName: \\\\\\\\\\\\\\\"grant_write_permission\\\\\\\\\\\\\\\",\\\\\\\\n        args: {\\\\\\\\n          predecessor_id: \\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\",\\\\\\\\n          keys: [context.accountId + \\\\\\\\\\\\\\\"/index/notify\\\\\\\\\\\\\\\"],\\\\\\\\n        },\\\\\\\\n        gas: Big(10).pow(14),\\\\\\\\n        deposit: Big(10).pow(22),\\\\\\\\n      });\\\\\\\\n    }\\\\\\\\n    Near.call(txn);\\\\\\\\n  }\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst onIdeaClick = () => {\\\\\\\\n  State.update({ postType: \\\\\\\\\\\\\\\"Idea\\\\\\\\\\\\\\\", seekingFunding: false });\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst onSolutionClick = () => {\\\\\\\\n  State.update({ postType: \\\\\\\\\\\\\\\"Solution\\\\\\\\\\\\\\\" });\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst normalizeLabel = (label) =>\\\\\\\\n  label\\\\\\\\n    .replaceAll(/[- \\\\\\\\\\\\\\\\.]/g, \\\\\\\\\\\\\\\"_\\\\\\\\\\\\\\\")\\\\\\\\n    .replaceAll(/[^\\\\\\\\\\\\\\\\w]+/g, \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\")\\\\\\\\n    .replaceAll(/_+/g, \\\\\\\\\\\\\\\"-\\\\\\\\\\\\\\\")\\\\\\\\n    .replace(/^-+/, \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\")\\\\\\\\n    .replace(/-+$/, \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\")\\\\\\\\n    .toLowerCase()\\\\\\\\n    .trim(\\\\\\\\\\\\\\\"-\\\\\\\\\\\\\\\");\\\\\\\\n\\\\\\\\nconst checkLabel = (label) => {\\\\\\\\n  Near.asyncView(\\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"is_allowed_to_use_labels\\\\\\\\\\\\\\\", {\\\\\\\\n    editor: context.accountId,\\\\\\\\n    labels: [label],\\\\\\\\n  }).then((allowed) => {\\\\\\\\n    if (allowed) {\\\\\\\\n      State.update({ warning: \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\" });\\\\\\\\n    } else {\\\\\\\\n      State.update({\\\\\\\\n        warning:\\\\\\\\n          \\\\\\\\\\\\'The label \\\\\\\\\\\\\\\"\\\\\\\\\\\\' +\\\\\\\\n          label +\\\\\\\\n          \\\\\\\\\\\\'\\\\\\\\\\\\\\\" is protected and can only be added by moderators\\\\\\\\\\\\',\\\\\\\\n      });\\\\\\\\n      return;\\\\\\\\n    }\\\\\\\\n  });\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst setLabels = (labels) => {\\\\\\\\n  labels = labels.map((o) => {\\\\\\\\n    o.name = normalizeLabel(o.name);\\\\\\\\n    return o;\\\\\\\\n  });\\\\\\\\n  if (labels.length < state.labels.length) {\\\\\\\\n    let oldLabels = new Set(state.labels.map((label) => label.name));\\\\\\\\n    for (let label of labels) {\\\\\\\\n      oldLabels.delete(label.name);\\\\\\\\n    }\\\\\\\\n    let removed = oldLabels.values().next().value;\\\\\\\\n    Near.asyncView(\\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"is_allowed_to_use_labels\\\\\\\\\\\\\\\", {\\\\\\\\n      editor: context.accountId,\\\\\\\\n      labels: [removed],\\\\\\\\n    }).then((allowed) => {\\\\\\\\n      if (allowed) {\\\\\\\\n        let labelStrings = labels.map(({ name }) => name);\\\\\\\\n        State.update({ labels, labelStrings });\\\\\\\\n      } else {\\\\\\\\n        State.update({\\\\\\\\n          warning:\\\\\\\\n            \\\\\\\\\\\\'The label \\\\\\\\\\\\\\\"\\\\\\\\\\\\' +\\\\\\\\n            removed +\\\\\\\\n            \\\\\\\\\\\\'\\\\\\\\\\\\\\\" is protected and can only be updated by moderators\\\\\\\\\\\\',\\\\\\\\n        });\\\\\\\\n        return;\\\\\\\\n      }\\\\\\\\n    });\\\\\\\\n  } else {\\\\\\\\n    let labelStrings = labels.map((o) => {\\\\\\\\n      return o.name;\\\\\\\\n    });\\\\\\\\n    State.update({ labels, labelStrings });\\\\\\\\n  }\\\\\\\\n};\\\\\\\\nconst existingLabelStrings =\\\\\\\\n  Near.view(\\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"get_all_allowed_labels\\\\\\\\\\\\\\\", {\\\\\\\\n    editor: context.accountId,\\\\\\\\n  }) ?? [];\\\\\\\\nconst existingLabelSet = new Set(existingLabelStrings);\\\\\\\\nconst existingLabels = existingLabelStrings\\\\\\\\n  .filter((it) => it !== \\\\\\\\\\\\\\\"blog\\\\\\\\\\\\\\\") // remove blog label so users cannot publish blogs from feed\\\\\\\\n  .map((s) => {\\\\\\\\n    return { name: s };\\\\\\\\n  });\\\\\\\\n\\\\\\\\nconst labelEditor = (\\\\\\\\n  <div className=\\\\\\\\\\\\\\\"col-lg-12 mb-2\\\\\\\\\\\\\\\">\\\\\\\\n    <p className=\\\\\\\\\\\\\\\"fs-6 fw-bold mb-1\\\\\\\\\\\\\\\">Labels</p>\\\\\\\\n    <Typeahead\\\\\\\\n      multiple\\\\\\\\n      labelKey=\\\\\\\\\\\\\\\"name\\\\\\\\\\\\\\\"\\\\\\\\n      onInputChange={checkLabel}\\\\\\\\n      onChange={setLabels}\\\\\\\\n      options={existingLabels}\\\\\\\\n      placeholder=\\\\\\\\\\\\\\\"near.social, widget, NEP, standard, protocol, tool\\\\\\\\\\\\\\\"\\\\\\\\n      selected={state.labels}\\\\\\\\n      positionFixed\\\\\\\\n      allowNew={(results, props) => {\\\\\\\\n        return (\\\\\\\\n          !existingLabelSet.has(props.text) &&\\\\\\\\n          props.text.toLowerCase() !== \\\\\\\\\\\\\\\"blog\\\\\\\\\\\\\\\" && // dont allow adding \\\\\\\\\\\\\\\"Blog\\\\\\\\\\\\\\\"\\\\\\\\n          props.selected.filter((selected) => selected.name === props.text)\\\\\\\\n            .length == 0 &&\\\\\\\\n          Near.view(\\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"is_allowed_to_use_labels\\\\\\\\\\\\\\\", {\\\\\\\\n            editor: context.accountId,\\\\\\\\n            labels: [props.text],\\\\\\\\n          })\\\\\\\\n        );\\\\\\\\n      }}\\\\\\\\n    />\\\\\\\\n  </div>\\\\\\\\n);\\\\\\\\n\\\\\\\\nconst nameDiv = (\\\\\\\\n  <div className=\\\\\\\\\\\\\\\"col-lg-6 mb-2\\\\\\\\\\\\\\\">\\\\\\\\n    <p className=\\\\\\\\\\\\\\\"fs-6 fw-bold mb-1\\\\\\\\\\\\\\\">Title</p>\\\\\\\\n    <input\\\\\\\\n      type=\\\\\\\\\\\\\\\"text\\\\\\\\\\\\\\\"\\\\\\\\n      value={state.name}\\\\\\\\n      onChange={(event) => State.update({ name: event.target.value })}\\\\\\\\n    />\\\\\\\\n  </div>\\\\\\\\n);\\\\\\\\n\\\\\\\\nconst descriptionDiv = (\\\\\\\\n  <div className=\\\\\\\\\\\\\\\"col-lg-12 mb-2\\\\\\\\\\\\\\\">\\\\\\\\n    <p className=\\\\\\\\\\\\\\\"fs-6 fw-bold mb-1\\\\\\\\\\\\\\\">Description</p>\\\\\\\\n    <Widget\\\\\\\\n      src=\\\\\\\\\\\\\\\"devhub.near/widget/devhub.components.molecule.MarkdownEditor\\\\\\\\\\\\\\\"\\\\\\\\n      props={{\\\\\\\\n        data: { handler: state.handler, content: state.description },\\\\\\\\n        onChange: (content) => {\\\\\\\\n          State.update({ description: content, handler: \\\\\\\\\\\\\\\"update\\\\\\\\\\\\\\\" });\\\\\\\\n          textareaInputHandler(content);\\\\\\\\n        },\\\\\\\\n      }}\\\\\\\\n    />\\\\\\\\n    {autocompleteEnabled && state.showAccountAutocomplete && (\\\\\\\\n      <AutoComplete>\\\\\\\\n        <Widget\\\\\\\\n          src=\\\\\\\\\\\\\\\"devhub.near/widget/devhub.components.molecule.AccountAutocomplete\\\\\\\\\\\\\\\"\\\\\\\\n          props={{\\\\\\\\n            term: state.mentionInput,\\\\\\\\n            onSelect: autoCompleteAccountId,\\\\\\\\n            onClose: () => State.update({ showAccountAutocomplete: false }),\\\\\\\\n          }}\\\\\\\\n        />\\\\\\\\n      </AutoComplete>\\\\\\\\n    )}\\\\\\\\n  </div>\\\\\\\\n);\\\\\\\\n\\\\\\\\nconst isFundraisingDiv = (\\\\\\\\n  // This is jank with just btns and not radios. But the radios were glitchy af\\\\\\\\n  <>\\\\\\\\n    <div class=\\\\\\\\\\\\\\\"mb-2\\\\\\\\\\\\\\\">\\\\\\\\n      <p class=\\\\\\\\\\\\\\\"fs-6 fw-bold mb-1\\\\\\\\\\\\\\\">\\\\\\\\n        Are you seeking funding for your solution?\\\\\\\\n        <span class=\\\\\\\\\\\\\\\"text-muted fw-normal\\\\\\\\\\\\\\\">(Optional)</span>\\\\\\\\n      </p>\\\\\\\\n      <div class=\\\\\\\\\\\\\\\"form-check form-check-inline\\\\\\\\\\\\\\\">\\\\\\\\n        <label class=\\\\\\\\\\\\\\\"form-check-label\\\\\\\\\\\\\\\">\\\\\\\\n          <button\\\\\\\\n            className=\\\\\\\\\\\\\\\"btn btn-light p-0\\\\\\\\\\\\\\\"\\\\\\\\n            style={{\\\\\\\\n              backgroundColor: state.seekingFunding ? \\\\\\\\\\\\\\\"#0C7283\\\\\\\\\\\\\\\" : \\\\\\\\\\\\\\\"inherit\\\\\\\\\\\\\\\",\\\\\\\\n              color: \\\\\\\\\\\\\\\"#f3f3f3\\\\\\\\\\\\\\\",\\\\\\\\n              border: \\\\\\\\\\\\\\\"solid #D9D9D9\\\\\\\\\\\\\\\",\\\\\\\\n              borderRadius: \\\\\\\\\\\\\\\"100%\\\\\\\\\\\\\\\",\\\\\\\\n              height: \\\\\\\\\\\\\\\"20px\\\\\\\\\\\\\\\",\\\\\\\\n              width: \\\\\\\\\\\\\\\"20px\\\\\\\\\\\\\\\",\\\\\\\\n            }}\\\\\\\\n            onClick={() => State.update({ seekingFunding: true })}\\\\\\\\n          />\\\\\\\\n          Yes\\\\\\\\n        </label>\\\\\\\\n      </div>\\\\\\\\n      <div class=\\\\\\\\\\\\\\\"form-check form-check-inline\\\\\\\\\\\\\\\">\\\\\\\\n        <label class=\\\\\\\\\\\\\\\"form-check-label\\\\\\\\\\\\\\\">\\\\\\\\n          <button\\\\\\\\n            className=\\\\\\\\\\\\\\\"btn btn-light p-0\\\\\\\\\\\\\\\"\\\\\\\\n            style={{\\\\\\\\n              backgroundColor: !state.seekingFunding ? \\\\\\\\\\\\\\\"#0C7283\\\\\\\\\\\\\\\" : \\\\\\\\\\\\\\\"inherit\\\\\\\\\\\\\\\",\\\\\\\\n              color: \\\\\\\\\\\\\\\"#f3f3f3\\\\\\\\\\\\\\\",\\\\\\\\n              border: \\\\\\\\\\\\\\\"solid #D9D9D9\\\\\\\\\\\\\\\",\\\\\\\\n              borderRadius: \\\\\\\\\\\\\\\"100%\\\\\\\\\\\\\\\",\\\\\\\\n              height: \\\\\\\\\\\\\\\"20px\\\\\\\\\\\\\\\",\\\\\\\\n              width: \\\\\\\\\\\\\\\"20px\\\\\\\\\\\\\\\",\\\\\\\\n            }}\\\\\\\\n            onClick={() => State.update({ seekingFunding: false })}\\\\\\\\n          />\\\\\\\\n          No\\\\\\\\n        </label>\\\\\\\\n      </div>\\\\\\\\n    </div>\\\\\\\\n  </>\\\\\\\\n);\\\\\\\\n\\\\\\\\nconst fundraisingDiv = (\\\\\\\\n  <div class=\\\\\\\\\\\\\\\"d-flex flex-column mb-2\\\\\\\\\\\\\\\">\\\\\\\\n    <div className=\\\\\\\\\\\\\\\"col-lg-6  mb-2\\\\\\\\\\\\\\\">\\\\\\\\n      Currency\\\\\\\\n      <select\\\\\\\\n        onChange={(event) => State.update({ token: event.target.value })}\\\\\\\\n        class=\\\\\\\\\\\\\\\"form-select\\\\\\\\\\\\\\\"\\\\\\\\n        aria-label=\\\\\\\\\\\\\\\"Default select\\\\\\\\\\\\\\\"\\\\\\\\n      >\\\\\\\\n        <option selected value=\\\\\\\\\\\\\\\"USDT\\\\\\\\\\\\\\\">\\\\\\\\n          USDT\\\\\\\\n        </option>\\\\\\\\n        <option value=\\\\\\\\\\\\\\\"NEAR\\\\\\\\\\\\\\\">NEAR</option>\\\\\\\\n        <option value=\\\\\\\\\\\\\\\"USDC\\\\\\\\\\\\\\\">USDC</option>\\\\\\\\n      </select>\\\\\\\\n    </div>\\\\\\\\n    <div className=\\\\\\\\\\\\\\\"col-lg-6 mb-2\\\\\\\\\\\\\\\">\\\\\\\\n      Requested amount <span class=\\\\\\\\\\\\\\\"text-muted fw-normal\\\\\\\\\\\\\\\">(Numbers Only)</span>\\\\\\\\n      <input\\\\\\\\n        type=\\\\\\\\\\\\\\\"number\\\\\\\\\\\\\\\"\\\\\\\\n        value={parseInt(state.amount) > 0 ? state.amount : \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\"}\\\\\\\\n        min={0}\\\\\\\\n        onChange={(event) =>\\\\\\\\n          State.update({\\\\\\\\n            amount: Number(\\\\\\\\n              event.target.value.toString().replace(/e/g, \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\")\\\\\\\\n            ).toString(),\\\\\\\\n          })\\\\\\\\n        }\\\\\\\\n      />\\\\\\\\n    </div>\\\\\\\\n    <div className=\\\\\\\\\\\\\\\"col-lg-6 mb-2\\\\\\\\\\\\\\\">\\\\\\\\n      <p class=\\\\\\\\\\\\\\\"mb-1\\\\\\\\\\\\\\\">\\\\\\\\n        Requested sponsor <span class=\\\\\\\\\\\\\\\"text-muted fw-normal\\\\\\\\\\\\\\\">(Optional)</span>\\\\\\\\n      </p>\\\\\\\\n      <p style={{ fontSize: \\\\\\\\\\\\\\\"13px\\\\\\\\\\\\\\\" }} class=\\\\\\\\\\\\\\\"m-0 text-muted fw-light\\\\\\\\\\\\\\\">\\\\\\\\n        If you are requesting funding from a specific sponsor, please enter\\\\\\\\n        their username.\\\\\\\\n      </p>\\\\\\\\n      <div class=\\\\\\\\\\\\\\\"input-group flex-nowrap\\\\\\\\\\\\\\\">\\\\\\\\n        <span class=\\\\\\\\\\\\\\\"input-group-text\\\\\\\\\\\\\\\" id=\\\\\\\\\\\\\\\"addon-wrapping\\\\\\\\\\\\\\\">\\\\\\\\n          @\\\\\\\\n        </span>\\\\\\\\n        <input\\\\\\\\n          type=\\\\\\\\\\\\\\\"text\\\\\\\\\\\\\\\"\\\\\\\\n          class=\\\\\\\\\\\\\\\"form-control\\\\\\\\\\\\\\\"\\\\\\\\n          placeholder=\\\\\\\\\\\\\\\"Enter username\\\\\\\\\\\\\\\"\\\\\\\\n          value={state.supervisor}\\\\\\\\n          onChange={(event) => State.update({ supervisor: event.target.value })}\\\\\\\\n        />\\\\\\\\n      </div>\\\\\\\\n    </div>\\\\\\\\n  </div>\\\\\\\\n);\\\\\\\\n\\\\\\\\nfunction generateDescription(text, amount, token, supervisor, seekingFunding) {\\\\\\\\n  const fundingText =\\\\\\\\n    amount > 0 && token ? `###### Requested amount: ${amount} ${token}\\\\\\\\\\\\\\\\n` : \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\";\\\\\\\\n  const supervisorText = supervisor\\\\\\\\n    ? `###### Requested sponsor: @${supervisor}\\\\\\\\\\\\\\\\n`\\\\\\\\n    : \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\";\\\\\\\\n  return seekingFunding ? `${fundingText}${supervisorText}${text}` : text;\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst [tab, setTab] = useState(\\\\\\\\\\\\\\\"editor\\\\\\\\\\\\\\\");\\\\\\\\n\\\\\\\\nreturn (\\\\\\\\n  <div class=\\\\\\\\\\\\\\\"bg-light d-flex flex-column flex-grow-1 w-100\\\\\\\\\\\\\\\">\\\\\\\\n    <div class=\\\\\\\\\\\\\\\"mx-5 mb-5\\\\\\\\\\\\\\\">\\\\\\\\n      <div aria-label=\\\\\\\\\\\\\\\"breadcrumb\\\\\\\\\\\\\\\">\\\\\\\\n        <ol class=\\\\\\\\\\\\\\\"breadcrumb\\\\\\\\\\\\\\\">\\\\\\\\n          <li class=\\\\\\\\\\\\\\\"breadcrumb-item\\\\\\\\\\\\\\\">\\\\\\\\n            <Link\\\\\\\\n              style={{\\\\\\\\n                color: \\\\\\\\\\\\\\\"#3252A6\\\\\\\\\\\\\\\",\\\\\\\\n              }}\\\\\\\\n              className=\\\\\\\\\\\\\\\"fw-bold\\\\\\\\\\\\\\\"\\\\\\\\n              to={href({\\\\\\\\n                widgetSrc: \\\\\\\\\\\\\\\"devhub.near/widget/app\\\\\\\\\\\\\\\",\\\\\\\\n                params: { page: \\\\\\\\\\\\\\\"feed\\\\\\\\\\\\\\\" },\\\\\\\\n              })}\\\\\\\\n            >\\\\\\\\n              DevHub\\\\\\\\n            </Link>\\\\\\\\n          </li>\\\\\\\\n          <li class=\\\\\\\\\\\\\\\"breadcrumb-item active\\\\\\\\\\\\\\\" aria-current=\\\\\\\\\\\\\\\"page\\\\\\\\\\\\\\\">\\\\\\\\n            Create new\\\\\\\\n          </li>\\\\\\\\n        </ol>\\\\\\\\n      </div>\\\\\\\\n      {props.transactionHashes ? (\\\\\\\\n        <>\\\\\\\\n          Post created successfully. Back to{\\\\\\\\\\\\\\\" \\\\\\\\\\\\\\\"}\\\\\\\\n          <Link\\\\\\\\n            style={{\\\\\\\\n              color: \\\\\\\\\\\\\\\"#3252A6\\\\\\\\\\\\\\\",\\\\\\\\n            }}\\\\\\\\n            className=\\\\\\\\\\\\\\\"fw-bold\\\\\\\\\\\\\\\"\\\\\\\\n            to={href({\\\\\\\\n              widgetSrc: \\\\\\\\\\\\\\\"devhub.near/widget/app\\\\\\\\\\\\\\\",\\\\\\\\n              params: { page: \\\\\\\\\\\\\\\"feed\\\\\\\\\\\\\\\" },\\\\\\\\n            })}\\\\\\\\n          >\\\\\\\\n            feed\\\\\\\\n          </Link>\\\\\\\\n        </>\\\\\\\\n      ) : (\\\\\\\\n        <>\\\\\\\\n          <div className=\\\\\\\\\\\\\\\"card\\\\\\\\\\\\\\\">\\\\\\\\n            <div className=\\\\\\\\\\\\\\\"card-header\\\\\\\\\\\\\\\">\\\\\\\\n              <div>\\\\\\\\n                <ul class=\\\\\\\\\\\\\\\"nav nav-tabs\\\\\\\\\\\\\\\">\\\\\\\\n                  <li class=\\\\\\\\\\\\\\\"nav-item\\\\\\\\\\\\\\\">\\\\\\\\n                    <button\\\\\\\\n                      class={`nav-link ${tab === \\\\\\\\\\\\\\\"editor\\\\\\\\\\\\\\\" ? \\\\\\\\\\\\\\\"active\\\\\\\\\\\\\\\" : \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\"}`}\\\\\\\\n                      onClick={() => setTab(\\\\\\\\\\\\\\\"editor\\\\\\\\\\\\\\\")}\\\\\\\\n                    >\\\\\\\\n                      Editor\\\\\\\\n                    </button>\\\\\\\\n                  </li>\\\\\\\\n                  <li class=\\\\\\\\\\\\\\\"nav-item\\\\\\\\\\\\\\\">\\\\\\\\n                    <button\\\\\\\\n                      class={`nav-link ${tab === \\\\\\\\\\\\\\\"preview\\\\\\\\\\\\\\\" ? \\\\\\\\\\\\\\\"active\\\\\\\\\\\\\\\" : \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\"}`}\\\\\\\\n                      onClick={() => setTab(\\\\\\\\\\\\\\\"preview\\\\\\\\\\\\\\\")}\\\\\\\\n                    >\\\\\\\\n                      Preview\\\\\\\\n                    </button>\\\\\\\\n                  </li>\\\\\\\\n                </ul>\\\\\\\\n              </div>\\\\\\\\n              {tab === \\\\\\\\\\\\\\\"editor\\\\\\\\\\\\\\\" && (\\\\\\\\n                <div className=\\\\\\\\\\\\\\\"my-3\\\\\\\\\\\\\\\">Create a new post</div>\\\\\\\\n              )}\\\\\\\\n              {tab === \\\\\\\\\\\\\\\"preview\\\\\\\\\\\\\\\" && <div className=\\\\\\\\\\\\\\\"my-3\\\\\\\\\\\\\\\">Post Preview</div>}\\\\\\\\n            </div>\\\\\\\\n            <p>{state.seekingFunding}</p>\\\\\\\\n            <div class=\\\\\\\\\\\\\\\"card border-light\\\\\\\\\\\\\\\">\\\\\\\\n              {tab === \\\\\\\\\\\\\\\"editor\\\\\\\\\\\\\\\" && (\\\\\\\\n                <>\\\\\\\\n                  <div class=\\\\\\\\\\\\\\\"card-body\\\\\\\\\\\\\\\">\\\\\\\\n                    <p class=\\\\\\\\\\\\\\\"card-title fw-bold fs-6\\\\\\\\\\\\\\\">\\\\\\\\n                      What do you want to create?\\\\\\\\n                    </p>\\\\\\\\n                    <div class=\\\\\\\\\\\\\\\"d-flex flex-row gap-2\\\\\\\\\\\\\\\">\\\\\\\\n                      <button\\\\\\\\n                        onClick={onIdeaClick}\\\\\\\\n                        type=\\\\\\\\\\\\\\\"button\\\\\\\\\\\\\\\"\\\\\\\\n                        class={`btn btn-outline-secondary`}\\\\\\\\n                        style={\\\\\\\\n                          state.postType === \\\\\\\\\\\\\\\"Idea\\\\\\\\\\\\\\\"\\\\\\\\n                            ? {\\\\\\\\n                                backgroundColor: \\\\\\\\\\\\\\\"#0C7283\\\\\\\\\\\\\\\",\\\\\\\\n                                color: \\\\\\\\\\\\\\\"#f3f3f3\\\\\\\\\\\\\\\",\\\\\\\\n                              }\\\\\\\\n                            : {}\\\\\\\\n                        }\\\\\\\\n                      >\\\\\\\\n                        <i class=\\\\\\\\\\\\\\\"bi bi-lightbulb\\\\\\\\\\\\\\\"></i>\\\\\\\\n                        Idea\\\\\\\\n                      </button>\\\\\\\\n                      <button\\\\\\\\n                        onClick={onSolutionClick}\\\\\\\\n                        type=\\\\\\\\\\\\\\\"button\\\\\\\\\\\\\\\"\\\\\\\\n                        class={`btn btn-outline-secondary`}\\\\\\\\n                        style={\\\\\\\\n                          state.postType !== \\\\\\\\\\\\\\\"Idea\\\\\\\\\\\\\\\"\\\\\\\\n                            ? {\\\\\\\\n                                backgroundColor: \\\\\\\\\\\\\\\"#0C7283\\\\\\\\\\\\\\\",\\\\\\\\n                                color: \\\\\\\\\\\\\\\"#f3f3f3\\\\\\\\\\\\\\\",\\\\\\\\n                              }\\\\\\\\n                            : {}\\\\\\\\n                        }\\\\\\\\n                      >\\\\\\\\n                        <i class=\\\\\\\\\\\\\\\"bi bi-rocket\\\\\\\\\\\\\\\"></i>\\\\\\\\n                        Solution\\\\\\\\n                      </button>\\\\\\\\n                    </div>\\\\\\\\n                    <p class=\\\\\\\\\\\\\\\"text-muted w-75 my-1\\\\\\\\\\\\\\\">\\\\\\\\n                      {state.postType === \\\\\\\\\\\\\\\"Idea\\\\\\\\\\\\\\\"\\\\\\\\n                        ? \\\\\\\\\\\\\\\"Get feedback from the community about a problem, opportunity, or need.\\\\\\\\\\\\\\\"\\\\\\\\n                        : \\\\\\\\\\\\\\\"Provide a specific proposal or implementation to an idea, optionally requesting funding. If your solution relates to an existing idea, please reply to the original post with a solution.\\\\\\\\\\\\\\\"}\\\\\\\\n                    </p>\\\\\\\\n                    {state.warning && (\\\\\\\\n                      <div\\\\\\\\n                        class=\\\\\\\\\\\\\\\"alert alert-warning alert-dismissible fade show\\\\\\\\\\\\\\\"\\\\\\\\n                        role=\\\\\\\\\\\\\\\"alert\\\\\\\\\\\\\\\"\\\\\\\\n                      >\\\\\\\\n                        {state.warning}\\\\\\\\n                        <button\\\\\\\\n                          type=\\\\\\\\\\\\\\\"button\\\\\\\\\\\\\\\"\\\\\\\\n                          class=\\\\\\\\\\\\\\\"btn-close\\\\\\\\\\\\\\\"\\\\\\\\n                          data-bs-dismiss=\\\\\\\\\\\\\\\"alert\\\\\\\\\\\\\\\"\\\\\\\\n                          aria-label=\\\\\\\\\\\\\\\"Close\\\\\\\\\\\\\\\"\\\\\\\\n                          onClick={() => State.update({ warning: \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\" })}\\\\\\\\n                        ></button>\\\\\\\\n                      </div>\\\\\\\\n                    )}\\\\\\\\n                    <div className=\\\\\\\\\\\\\\\"row\\\\\\\\\\\\\\\">\\\\\\\\n                      {nameDiv}\\\\\\\\n                      {descriptionDiv}\\\\\\\\n                      {labelEditor}\\\\\\\\n                      {state.postType === \\\\\\\\\\\\\\\"Solution\\\\\\\\\\\\\\\" && isFundraisingDiv}\\\\\\\\n                      {state.seekingFunding && fundraisingDiv}\\\\\\\\n                    </div>\\\\\\\\n                    <button\\\\\\\\n                      style={{\\\\\\\\n                        width: \\\\\\\\\\\\\\\"7rem\\\\\\\\\\\\\\\",\\\\\\\\n                        backgroundColor: \\\\\\\\\\\\\\\"#0C7283\\\\\\\\\\\\\\\",\\\\\\\\n                        color: \\\\\\\\\\\\\\\"#f3f3f3\\\\\\\\\\\\\\\",\\\\\\\\n                      }}\\\\\\\\n                      disabled={\\\\\\\\n                        state.seekingFunding &&\\\\\\\\n                        (!state.amount || state.amount < 1)\\\\\\\\n                      }\\\\\\\\n                      className=\\\\\\\\\\\\\\\"btn btn-light mb-2 p-3\\\\\\\\\\\\\\\"\\\\\\\\n                      onClick={onSubmit}\\\\\\\\n                    >\\\\\\\\n                      Submit\\\\\\\\n                    </button>\\\\\\\\n                  </div>\\\\\\\\n                  <div class=\\\\\\\\\\\\\\\"bg-light d-flex flex-row p-1 border-bottom\\\\\\\\\\\\\\\"></div>\\\\\\\\n                </>\\\\\\\\n              )}\\\\\\\\n              {tab === \\\\\\\\\\\\\\\"preview\\\\\\\\\\\\\\\" && (\\\\\\\\n                <div class=\\\\\\\\\\\\\\\"card-body\\\\\\\\\\\\\\\">\\\\\\\\n                  <p class=\\\\\\\\\\\\\\\"text-muted m-0\\\\\\\\\\\\\\\">Preview</p>\\\\\\\\n                  <div>\\\\\\\\n                    <Widget\\\\\\\\n                      src=\\\\\\\\\\\\\\\"devhub.near/widget/devhub.entity.post.Post\\\\\\\\\\\\\\\"\\\\\\\\n                      props={{\\\\\\\\n                        isPreview: true,\\\\\\\\n                        id: 0, // irrelevant\\\\\\\\n                        post: {\\\\\\\\n                          author_id: state.author_id,\\\\\\\\n                          likes: [],\\\\\\\\n                          snapshot: {\\\\\\\\n                            editor_id: state.editor_id,\\\\\\\\n                            labels: state.labelStrings,\\\\\\\\n                            post_type: state.postType,\\\\\\\\n                            name: state.name,\\\\\\\\n                            description: generateDescription(\\\\\\\\n                              state.description,\\\\\\\\n                              state.amount,\\\\\\\\n                              state.token,\\\\\\\\n                              state.supervisor,\\\\\\\\n                              state.seekingFunding\\\\\\\\n                            ),\\\\\\\\n                            github_link: state.githubLink,\\\\\\\\n                          },\\\\\\\\n                        },\\\\\\\\n                      }}\\\\\\\\n                    />\\\\\\\\n                  </div>\\\\\\\\n                </div>\\\\\\\\n              )}\\\\\\\\n            </div>\\\\\\\\n          </div>\\\\\\\\n        </>\\\\\\\\n      )}\\\\\\\\n    </div>\\\\\\\\n  </div>\\\\\\\\n);\\\\\\\\n\"}, \"devhub.entity.post.Post\": {\"\": \"// Ideally, this would be a page\\\\\\\\n\\\\\\\\nconst { href } = VM.require(\\\\\\\\\\\\\\\"devhub.near/widget/core.lib.url\\\\\\\\\\\\\\\");\\\\\\\\n\\\\\\\\nconst { draftState, onDraftStateChange } = VM.require(\\\\\\\\n  \\\\\\\\\\\\\\\"devhub.near/widget/devhub.entity.post.draft\\\\\\\\\\\\\\\"\\\\\\\\n);\\\\\\\\n\\\\\\\\nif (!href) {\\\\\\\\n  return <p>Loading modules...</p>;\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst ButtonWithHover = styled.button`\\\\\\\\n  background-color: #fff;\\\\\\\\n  transition: all 300ms;\\\\\\\\n  border-radius: 0.5rem;\\\\\\\\n\\\\\\\\n  &:hover {\\\\\\\\n    background-color: #e9ecef;\\\\\\\\n    color: #000;\\\\\\\\n  }\\\\\\\\n\\\\\\\\n  &:disabled {\\\\\\\\n    background-color: #fff;\\\\\\\\n    color: #b7b7b7;\\\\\\\\n  }\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst postId = props.post.id ?? (props.id ? parseInt(props.id) : 0);\\\\\\\\n\\\\\\\\nconst post =\\\\\\\\n  props.post ??\\\\\\\\n  Near.view(\\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"get_post\\\\\\\\\\\\\\\", { post_id: postId });\\\\\\\\n\\\\\\\\nif (!post) {\\\\\\\\n  return <div>Loading ...</div>;\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst referral = props.referral;\\\\\\\\nconst currentTimestamp = props.timestamp ?? post.snapshot.timestamp;\\\\\\\\nconst compareTimestamp = props.compareTimestamp ?? \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\";\\\\\\\\nconst swapTimestamps = currentTimestamp < compareTimestamp;\\\\\\\\n\\\\\\\\nconst snapshotHistory = post.snapshot_history;\\\\\\\\n\\\\\\\\nconst snapshot =\\\\\\\\n  currentTimestamp === post.snapshot.timestamp\\\\\\\\n    ? post.snapshot\\\\\\\\n    : (snapshotHistory &&\\\\\\\\n        snapshotHistory.find((s) => s.timestamp === currentTimestamp)) ??\\\\\\\\n      null;\\\\\\\\n\\\\\\\\nconst compareSnapshot =\\\\\\\\n  compareTimestamp === post.snapshot.timestamp\\\\\\\\n    ? post.snapshot\\\\\\\\n    : (snapshotHistory &&\\\\\\\\n        snapshotHistory.find((s) => s.timestamp === compareTimestamp)) ??\\\\\\\\n      null;\\\\\\\\n\\\\\\\\n// If this post is displayed under another post. Used to limit the size.\\\\\\\\nconst isUnderPost = props.isUnderPost ? true : false;\\\\\\\\n\\\\\\\\nconst parentId = Near.view(\\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"get_parent_id\\\\\\\\\\\\\\\", {\\\\\\\\n  post_id: postId,\\\\\\\\n});\\\\\\\\n\\\\\\\\nconst childPostIdsUnordered =\\\\\\\\n  Near.view(\\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"get_children_ids\\\\\\\\\\\\\\\", {\\\\\\\\n    post_id: postId,\\\\\\\\n  }) ?? [];\\\\\\\\n\\\\\\\\nconst childPostIds = props.isPreview ? [] : childPostIdsUnordered.reverse();\\\\\\\\nconst expandable = props.isPreview ? false : props.expandable ?? false;\\\\\\\\nconst defaultExpanded = expandable ? props.defaultExpanded : true;\\\\\\\\n\\\\\\\\nfunction readableDate(timestamp) {\\\\\\\\n  var a = new Date(timestamp);\\\\\\\\n  return a.toDateString() + \\\\\\\\\\\\\\\" \\\\\\\\\\\\\\\" + a.toLocaleTimeString();\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst timestamp = readableDate(\\\\\\\\n  snapshot.timestamp ? snapshot.timestamp / 1000000 : Date.now()\\\\\\\\n);\\\\\\\\n\\\\\\\\nconst postSearchKeywords = props.searchKeywords ? (\\\\\\\\n  <div style={{ \\\\\\\\\\\\\\\"font-family\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"monospace\\\\\\\\\\\\\\\" }} key=\\\\\\\\\\\\\\\"post-search-keywords\\\\\\\\\\\\\\\">\\\\\\\\n    <span>Found keywords: </span>\\\\\\\\n\\\\\\\\n    {props.searchKeywords.map((tag) => (\\\\\\\\n      <Widget\\\\\\\\n        src={\\\\\\\\\\\\\\\"devhub.near/widget/devhub.components.atom.Tag\\\\\\\\\\\\\\\"}\\\\\\\\n        props={{ linkTo: \\\\\\\\\\\\\\\"Feed\\\\\\\\\\\\\\\", tag }}\\\\\\\\n      />\\\\\\\\n    ))}\\\\\\\\n  </div>\\\\\\\\n) : (\\\\\\\\n  <div key=\\\\\\\\\\\\\\\"post-search-keywords\\\\\\\\\\\\\\\"></div>\\\\\\\\n);\\\\\\\\n\\\\\\\\nconst searchKeywords = props.searchKeywords ? (\\\\\\\\n  <div class=\\\\\\\\\\\\\\\"mb-4\\\\\\\\\\\\\\\" key=\\\\\\\\\\\\\\\"search-keywords\\\\\\\\\\\\\\\">\\\\\\\\n    <small class=\\\\\\\\\\\\\\\"text-muted\\\\\\\\\\\\\\\">{postSearchKeywords}</small>\\\\\\\\n  </div>\\\\\\\\n) : (\\\\\\\\n  <div key=\\\\\\\\\\\\\\\"search-keywords\\\\\\\\\\\\\\\"></div>\\\\\\\\n);\\\\\\\\n\\\\\\\\nconst allowedToEdit =\\\\\\\\n  !props.isPreview &&\\\\\\\\n  Near.view(\\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"is_allowed_to_edit\\\\\\\\\\\\\\\", {\\\\\\\\n    post_id: postId,\\\\\\\\n    editor: context.accountId,\\\\\\\\n  });\\\\\\\\n\\\\\\\\nconst btnEditorWidget = (postType, name) => {\\\\\\\\n  return (\\\\\\\\n    <li>\\\\\\\\n      <a\\\\\\\\n        class=\\\\\\\\\\\\\\\"dropdown-item\\\\\\\\\\\\\\\"\\\\\\\\n        role=\\\\\\\\\\\\\\\"button\\\\\\\\\\\\\\\"\\\\\\\\n        onClick={() =>\\\\\\\\n          State.update({ postType, editorType: \\\\\\\\\\\\\\\"EDIT\\\\\\\\\\\\\\\", showEditor: true })\\\\\\\\n        }\\\\\\\\n      >\\\\\\\\n        {name}\\\\\\\\n      </a>\\\\\\\\n    </li>\\\\\\\\n  );\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst editControl = allowedToEdit ? (\\\\\\\\n  <div class=\\\\\\\\\\\\\\\"btn-group\\\\\\\\\\\\\\\" role=\\\\\\\\\\\\\\\"group\\\\\\\\\\\\\\\">\\\\\\\\n    <a\\\\\\\\n      class=\\\\\\\\\\\\\\\"card-link px-2\\\\\\\\\\\\\\\"\\\\\\\\n      role=\\\\\\\\\\\\\\\"button\\\\\\\\\\\\\\\"\\\\\\\\n      title=\\\\\\\\\\\\\\\"Edit post\\\\\\\\\\\\\\\"\\\\\\\\n      data-bs-toggle=\\\\\\\\\\\\\\\"dropdown\\\\\\\\\\\\\\\"\\\\\\\\n      aria-expanded=\\\\\\\\\\\\\\\"false\\\\\\\\\\\\\\\"\\\\\\\\n      type=\\\\\\\\\\\\\\\"button\\\\\\\\\\\\\\\"\\\\\\\\n    >\\\\\\\\n      <div class=\\\\\\\\\\\\\\\"bi bi-pencil-square\\\\\\\\\\\\\\\"></div>\\\\\\\\n    </a>\\\\\\\\n\\\\\\\\n    <ul class=\\\\\\\\\\\\\\\"dropdown-menu\\\\\\\\\\\\\\\">\\\\\\\\n      {btnEditorWidget(\\\\\\\\\\\\\\\"Idea\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"Edit as an idea\\\\\\\\\\\\\\\")}\\\\\\\\n      {btnEditorWidget(\\\\\\\\\\\\\\\"Solution\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"Edit as a solution\\\\\\\\\\\\\\\")}\\\\\\\\n      {btnEditorWidget(\\\\\\\\\\\\\\\"Attestation\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"Edit as an attestation\\\\\\\\\\\\\\\")}\\\\\\\\n      {btnEditorWidget(\\\\\\\\\\\\\\\"Sponsorship\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"Edit as a sponsorship\\\\\\\\\\\\\\\")}\\\\\\\\n      {btnEditorWidget(\\\\\\\\\\\\\\\"Comment\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"Edit as a comment\\\\\\\\\\\\\\\")}\\\\\\\\n    </ul>\\\\\\\\n  </div>\\\\\\\\n) : (\\\\\\\\n  <div></div>\\\\\\\\n);\\\\\\\\n\\\\\\\\nconst shareButton = props.isPreview ? (\\\\\\\\n  <div></div>\\\\\\\\n) : (\\\\\\\\n  <Link\\\\\\\\n    class=\\\\\\\\\\\\\\\"card-link text-dark\\\\\\\\\\\\\\\"\\\\\\\\n    to={href({\\\\\\\\n      widgetSrc: \\\\\\\\\\\\\\\"devhub.near/widget/app\\\\\\\\\\\\\\\",\\\\\\\\n      params: { page: \\\\\\\\\\\\\\\"post\\\\\\\\\\\\\\\", id: postId },\\\\\\\\n    })}\\\\\\\\n    role=\\\\\\\\\\\\\\\"button\\\\\\\\\\\\\\\"\\\\\\\\n    target=\\\\\\\\\\\\\\\"_blank\\\\\\\\\\\\\\\"\\\\\\\\n    title=\\\\\\\\\\\\\\\"Open in new tab\\\\\\\\\\\\\\\"\\\\\\\\n  >\\\\\\\\n    <div class=\\\\\\\\\\\\\\\"bi bi-share\\\\\\\\\\\\\\\"></div>\\\\\\\\n  </Link>\\\\\\\\n);\\\\\\\\n\\\\\\\\nconst ProfileCardContainer = styled.div`\\\\\\\\n  @media screen and (max-width: 960px) {\\\\\\\\n    width: 100%;\\\\\\\\n  }\\\\\\\\n`;\\\\\\\\n\\\\\\\\n// card-header\\\\\\\\nconst header = (\\\\\\\\n  <div key=\\\\\\\\\\\\\\\"header\\\\\\\\\\\\\\\">\\\\\\\\n    <small class=\\\\\\\\\\\\\\\"text-muted\\\\\\\\\\\\\\\">\\\\\\\\n      <div class=\\\\\\\\\\\\\\\"row justify-content-between\\\\\\\\\\\\\\\">\\\\\\\\n        <div class=\\\\\\\\\\\\\\\"d-flex align-items-center flex-wrap\\\\\\\\\\\\\\\">\\\\\\\\n          <ProfileCardContainer>\\\\\\\\n            <Widget\\\\\\\\n              src={\\\\\\\\n                \\\\\\\\\\\\\\\"devhub.near/widget/devhub.components.molecule.ProfileCard\\\\\\\\\\\\\\\"\\\\\\\\n              }\\\\\\\\n              props={{\\\\\\\\n                accountId: post.author_id,\\\\\\\\n              }}\\\\\\\\n            />\\\\\\\\n          </ProfileCardContainer>\\\\\\\\n\\\\\\\\n          <div class=\\\\\\\\\\\\\\\"d-flex ms-auto\\\\\\\\\\\\\\\">\\\\\\\\n            {editControl}\\\\\\\\n            {timestamp}\\\\\\\\n\\\\\\\\n            <Widget\\\\\\\\n              src={\\\\\\\\\\\\\\\"devhub.near/widget/devhub.entity.post.History\\\\\\\\\\\\\\\"}\\\\\\\\n              props={{\\\\\\\\n                post,\\\\\\\\n                timestamp: currentTimestamp,\\\\\\\\n              }}\\\\\\\\n            />\\\\\\\\n            {shareButton}\\\\\\\\n          </div>\\\\\\\\n        </div>\\\\\\\\n      </div>\\\\\\\\n    </small>\\\\\\\\n  </div>\\\\\\\\n);\\\\\\\\n\\\\\\\\n// const emptyIcons = {\\\\\\\\n//   Idea: \\\\\\\\\\\\\\\"bi-lightbulb\\\\\\\\\\\\\\\",\\\\\\\\n//   Comment: \\\\\\\\\\\\\\\"bi-chat\\\\\\\\\\\\\\\",\\\\\\\\n//   Solution: \\\\\\\\\\\\\\\"bi-rocket\\\\\\\\\\\\\\\",\\\\\\\\n//   Attestation: \\\\\\\\\\\\\\\"bi-check-circle\\\\\\\\\\\\\\\",\\\\\\\\n//   Sponsorship: \\\\\\\\\\\\\\\"bi-cash-coin\\\\\\\\\\\\\\\",\\\\\\\\n//   Github: \\\\\\\\\\\\\\\"bi-github\\\\\\\\\\\\\\\",\\\\\\\\n//   Like: \\\\\\\\\\\\\\\"bi-heart\\\\\\\\\\\\\\\",\\\\\\\\n//   Reply: \\\\\\\\\\\\\\\"bi-reply\\\\\\\\\\\\\\\",\\\\\\\\n// };\\\\\\\\n\\\\\\\\nconst emptyIcons = {\\\\\\\\n  Idea: \\\\\\\\\\\\\\\"\\\\\\\\u{1f4a1}\\\\\\\\\\\\\\\",\\\\\\\\n  Comment: \\\\\\\\\\\\\\\"bi-chat\\\\\\\\\\\\\\\",\\\\\\\\n  Solution: \\\\\\\\\\\\\\\"\\\\\\\\u{1f680}\\\\\\\\\\\\\\\",\\\\\\\\n  Attestation: \\\\\\\\\\\\\\\"\\\\\\\\u{2705}\\\\\\\\\\\\\\\",\\\\\\\\n  Sponsorship: \\\\\\\\\\\\\\\"\\\\\\\\u{1fa99}\\\\\\\\\\\\\\\",\\\\\\\\n  Github: \\\\\\\\\\\\\\\"bi-github\\\\\\\\\\\\\\\",\\\\\\\\n  Like: \\\\\\\\\\\\\\\"bi-heart\\\\\\\\\\\\\\\",\\\\\\\\n  Reply: \\\\\\\\\\\\\\\"bi-reply\\\\\\\\\\\\\\\",\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst fillIcons = {\\\\\\\\n  Idea: \\\\\\\\\\\\\\\"\\\\\\\\u{1f4a1}\\\\\\\\\\\\\\\",\\\\\\\\n  Comment: \\\\\\\\\\\\\\\"bi-chat-fill\\\\\\\\\\\\\\\",\\\\\\\\n  Solution: \\\\\\\\\\\\\\\"\\\\\\\\u{1f680}\\\\\\\\\\\\\\\",\\\\\\\\n  Attestation: \\\\\\\\\\\\\\\"\\\\\\\\u{2705}\\\\\\\\\\\\\\\",\\\\\\\\n  Sponsorship: \\\\\\\\\\\\\\\"\\\\\\\\u{1fa99}\\\\\\\\\\\\\\\",\\\\\\\\n  Github: \\\\\\\\\\\\\\\"bi-github\\\\\\\\\\\\\\\",\\\\\\\\n  Like: \\\\\\\\\\\\\\\"bi-heart-fill\\\\\\\\\\\\\\\",\\\\\\\\n  Reply: \\\\\\\\\\\\\\\"bi-reply-fill\\\\\\\\\\\\\\\",\\\\\\\\n};\\\\\\\\n\\\\\\\\n// Trigger saving this widget.\\\\\\\\n\\\\\\\\nconst borders = {\\\\\\\\n  Idea: \\\\\\\\\\\\\\\"border-light\\\\\\\\\\\\\\\",\\\\\\\\n  Comment: \\\\\\\\\\\\\\\"border-light\\\\\\\\\\\\\\\",\\\\\\\\n  Solution: \\\\\\\\\\\\\\\"border-light\\\\\\\\\\\\\\\",\\\\\\\\n  Attestation: \\\\\\\\\\\\\\\"border-light\\\\\\\\\\\\\\\",\\\\\\\\n  Sponsorship: \\\\\\\\\\\\\\\"border-light\\\\\\\\\\\\\\\",\\\\\\\\n  Github: \\\\\\\\\\\\\\\"border-light\\\\\\\\\\\\\\\",\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst containsLike = props.isPreview\\\\\\\\n  ? false\\\\\\\\n  : post.likes.find((l) => l.author_id == context.accountId);\\\\\\\\nconst likeBtnClass = containsLike ? fillIcons.Like : emptyIcons.Like;\\\\\\\\n// This must be outside onLike, because Near.view returns null at first, and when the view call finished, it returns true/false.\\\\\\\\n// If checking this inside onLike, it will give `null` and we cannot tell the result is true or false.\\\\\\\\nlet grantNotify = Near.view(\\\\\\\\\\\\\\\"social.near\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"is_write_permission_granted\\\\\\\\\\\\\\\", {\\\\\\\\n  predecessor_id: \\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\",\\\\\\\\n  key: context.accountId + \\\\\\\\\\\\\\\"/index/notify\\\\\\\\\\\\\\\",\\\\\\\\n});\\\\\\\\n\\\\\\\\nif (grantNotify === null) {\\\\\\\\n  return;\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst onLike = () => {\\\\\\\\n  if (!context.accountId) {\\\\\\\\n    return;\\\\\\\\n  }\\\\\\\\n\\\\\\\\n  let likeTxn = [\\\\\\\\n    {\\\\\\\\n      contractName: \\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\",\\\\\\\\n      methodName: \\\\\\\\\\\\\\\"add_like\\\\\\\\\\\\\\\",\\\\\\\\n      args: {\\\\\\\\n        post_id: postId,\\\\\\\\n      },\\\\\\\\n      gas: Big(10).pow(14),\\\\\\\\n    },\\\\\\\\n  ];\\\\\\\\n\\\\\\\\n  if (grantNotify === false) {\\\\\\\\n    likeTxn.unshift({\\\\\\\\n      contractName: \\\\\\\\\\\\\\\"social.near\\\\\\\\\\\\\\\",\\\\\\\\n      methodName: \\\\\\\\\\\\\\\"grant_write_permission\\\\\\\\\\\\\\\",\\\\\\\\n      args: {\\\\\\\\n        predecessor_id: \\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\",\\\\\\\\n        keys: [context.accountId + \\\\\\\\\\\\\\\"/index/notify\\\\\\\\\\\\\\\"],\\\\\\\\n      },\\\\\\\\n      gas: Big(10).pow(14),\\\\\\\\n      deposit: Big(10).pow(22),\\\\\\\\n    });\\\\\\\\n  }\\\\\\\\n\\\\\\\\n  Near.call(likeTxn);\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst btnCreatorWidget = (postType, icon, name, desc) => {\\\\\\\\n  return (\\\\\\\\n    <li class=\\\\\\\\\\\\\\\"py-1\\\\\\\\\\\\\\\">\\\\\\\\n      <a\\\\\\\\n        class=\\\\\\\\\\\\\\\"dropdown-item text-decoration-none d-flex align-items-center lh-sm\\\\\\\\\\\\\\\"\\\\\\\\n        style={{ color: \\\\\\\\\\\\\\\"rgb(55,109,137)\\\\\\\\\\\\\\\" }}\\\\\\\\n        role=\\\\\\\\\\\\\\\"button\\\\\\\\\\\\\\\"\\\\\\\\n        onClick={() =>\\\\\\\\n          State.update({ postType, editorType: \\\\\\\\\\\\\\\"CREATE\\\\\\\\\\\\\\\", showEditor: true })\\\\\\\\n        }\\\\\\\\n      >\\\\\\\\n        <i class={`bi ${icon}`} style={{ fontSize: \\\\\\\\\\\\\\\"1.5rem\\\\\\\\\\\\\\\" }}>\\\\\\\\n          {\\\\\\\\\\\\\\\" \\\\\\\\\\\\\\\"}\\\\\\\\n        </i>\\\\\\\\n\\\\\\\\n        <div class=\\\\\\\\\\\\\\\"ps-2 text-wrap\\\\\\\\\\\\\\\" style={{ width: \\\\\\\\\\\\\\\"18rem\\\\\\\\\\\\\\\" }}>\\\\\\\\n          <div>{name}</div>\\\\\\\\n          <small class=\\\\\\\\\\\\\\\"fw-light text-secondary\\\\\\\\\\\\\\\">{desc}</small>\\\\\\\\n        </div>\\\\\\\\n      </a>\\\\\\\\n    </li>\\\\\\\\n  );\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst FooterButtonsContianer = styled.div`\\\\\\\\n  width: 66.66666667%;\\\\\\\\n\\\\\\\\n  @media screen and (max-width: 960px) {\\\\\\\\n    width: 100%;\\\\\\\\n  }\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst buttonsFooter = props.isPreview ? null : (\\\\\\\\n  <div class=\\\\\\\\\\\\\\\"row\\\\\\\\\\\\\\\" key=\\\\\\\\\\\\\\\"buttons-footer\\\\\\\\\\\\\\\">\\\\\\\\n    <FooterButtonsContianer>\\\\\\\\n      <div class=\\\\\\\\\\\\\\\"btn-group\\\\\\\\\\\\\\\" role=\\\\\\\\\\\\\\\"group\\\\\\\\\\\\\\\" aria-label=\\\\\\\\\\\\\\\"Basic outlined example\\\\\\\\\\\\\\\">\\\\\\\\n        <ButtonWithHover\\\\\\\\n          type=\\\\\\\\\\\\\\\"button\\\\\\\\\\\\\\\"\\\\\\\\n          class=\\\\\\\\\\\\\\\"btn d-flex align-items-center\\\\\\\\\\\\\\\"\\\\\\\\n          style={{ border: \\\\\\\\\\\\\\\"0px\\\\\\\\\\\\\\\" }}\\\\\\\\n          onClick={onLike}\\\\\\\\n        >\\\\\\\\n          <i class={`bi ${likeBtnClass}`}> </i>\\\\\\\\n          {post.likes.length == 0 ? (\\\\\\\\n            \\\\\\\\\\\\\\\"Like\\\\\\\\\\\\\\\"\\\\\\\\n          ) : (\\\\\\\\n            <Widget\\\\\\\\n              src=\\\\\\\\\\\\\\\"devhub.near/widget/devhub.components.layout.LikeButton.Faces\\\\\\\\\\\\\\\"\\\\\\\\n              props={{\\\\\\\\n                likesByUsers: Object.fromEntries(\\\\\\\\n                  post.likes.map(({ author_id }) => [author_id, \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\"])\\\\\\\\n                ),\\\\\\\\n              }}\\\\\\\\n            />\\\\\\\\n          )}\\\\\\\\n        </ButtonWithHover>\\\\\\\\n\\\\\\\\n        <div class=\\\\\\\\\\\\\\\"btn-group\\\\\\\\\\\\\\\" role=\\\\\\\\\\\\\\\"group\\\\\\\\\\\\\\\">\\\\\\\\n          <ButtonWithHover\\\\\\\\n            type=\\\\\\\\\\\\\\\"button\\\\\\\\\\\\\\\"\\\\\\\\n            class=\\\\\\\\\\\\\\\"btn\\\\\\\\\\\\\\\"\\\\\\\\n            style={{ border: \\\\\\\\\\\\\\\"0px\\\\\\\\\\\\\\\" }}\\\\\\\\n            data-bs-toggle=\\\\\\\\\\\\\\\"dropdown\\\\\\\\\\\\\\\"\\\\\\\\n            aria-expanded=\\\\\\\\\\\\\\\"false\\\\\\\\\\\\\\\"\\\\\\\\n          >\\\\\\\\n            \\\\\\\\u{21aa} Reply\\\\\\\\n          </ButtonWithHover>\\\\\\\\n          <ul class=\\\\\\\\\\\\\\\"dropdown-menu\\\\\\\\\\\\\\\">\\\\\\\\n            {btnCreatorWidget(\\\\\\\\n              \\\\\\\\\\\\\\\"Idea\\\\\\\\\\\\\\\",\\\\\\\\n              emptyIcons.Idea,\\\\\\\\n              \\\\\\\\\\\\\\\"Idea\\\\\\\\\\\\\\\",\\\\\\\\n              \\\\\\\\\\\\\\\"Get feedback from the community about a problem, opportunity, or need.\\\\\\\\\\\\\\\"\\\\\\\\n            )}\\\\\\\\n            {btnCreatorWidget(\\\\\\\\n              \\\\\\\\\\\\\\\"Solution\\\\\\\\\\\\\\\",\\\\\\\\n              emptyIcons.Solution,\\\\\\\\n              \\\\\\\\\\\\\\\"Solution\\\\\\\\\\\\\\\",\\\\\\\\n              \\\\\\\\\\\\\\\"Provide a specific proposal or implementation to an idea, optionally requesting funding.\\\\\\\\\\\\\\\"\\\\\\\\n            )}\\\\\\\\n            {btnCreatorWidget(\\\\\\\\n              \\\\\\\\\\\\\\\"Attestation\\\\\\\\\\\\\\\",\\\\\\\\n              emptyIcons.Attestation,\\\\\\\\n              \\\\\\\\\\\\\\\"Attestation\\\\\\\\\\\\\\\",\\\\\\\\n              \\\\\\\\\\\\\\\"Formally review or validate a solution as a recognized expert.\\\\\\\\\\\\\\\"\\\\\\\\n            )}\\\\\\\\n            {btnCreatorWidget(\\\\\\\\n              \\\\\\\\\\\\\\\"Sponsorship\\\\\\\\\\\\\\\",\\\\\\\\n              emptyIcons.Sponsorship,\\\\\\\\n              \\\\\\\\\\\\\\\"Sponsorship\\\\\\\\\\\\\\\",\\\\\\\\n              \\\\\\\\\\\\\\\"Offer to fund projects, events, or proposals that match your needs.\\\\\\\\\\\\\\\"\\\\\\\\n            )}\\\\\\\\n            <li>\\\\\\\\n              <hr class=\\\\\\\\\\\\\\\"dropdown-divider\\\\\\\\\\\\\\\" />\\\\\\\\n            </li>\\\\\\\\n            {btnCreatorWidget(\\\\\\\\n              \\\\\\\\\\\\\\\"Comment\\\\\\\\\\\\\\\",\\\\\\\\n              emptyIcons.Comment,\\\\\\\\n              \\\\\\\\\\\\\\\"Comment\\\\\\\\\\\\\\\",\\\\\\\\n              \\\\\\\\\\\\\\\"Ask a question, provide information, or share a resource that is relevant to the thread.\\\\\\\\\\\\\\\"\\\\\\\\n            )}\\\\\\\\n          </ul>\\\\\\\\n        </div>\\\\\\\\n        {childPostIds.length > 0 && (\\\\\\\\n          <ButtonWithHover\\\\\\\\n            type=\\\\\\\\\\\\\\\"button\\\\\\\\\\\\\\\"\\\\\\\\n            class=\\\\\\\\\\\\\\\"btn\\\\\\\\\\\\\\\"\\\\\\\\n            style={{ border: \\\\\\\\\\\\\\\"0px\\\\\\\\\\\\\\\" }}\\\\\\\\n            data-bs-toggle=\\\\\\\\\\\\\\\"collapse\\\\\\\\\\\\\\\"\\\\\\\\n            href={`#collapseChildPosts${postId}`}\\\\\\\\n            aria-expanded={defaultExpanded}\\\\\\\\n            aria-controls={`collapseChildPosts${postId}`}\\\\\\\\n            onClick={() =>\\\\\\\\n              State.update({ expandReplies: !state.expandReplies })\\\\\\\\n            }\\\\\\\\n          >\\\\\\\\n            <i\\\\\\\\n              class={`bi bi-chevron-${state.expandReplies ? \\\\\\\\\\\\\\\"up\\\\\\\\\\\\\\\" : \\\\\\\\\\\\\\\"down\\\\\\\\\\\\\\\"}`}\\\\\\\\n            ></i>{\\\\\\\\\\\\\\\" \\\\\\\\\\\\\\\"}\\\\\\\\n            {`${state.expandReplies ? \\\\\\\\\\\\\\\"Collapse\\\\\\\\\\\\\\\" : \\\\\\\\\\\\\\\"Expand\\\\\\\\\\\\\\\"} Replies (${\\\\\\\\n              childPostIds.length\\\\\\\\n            })`}\\\\\\\\n          </ButtonWithHover>\\\\\\\\n        )}\\\\\\\\n\\\\\\\\n        {isUnderPost || !parentId ? (\\\\\\\\n          <div key=\\\\\\\\\\\\\\\"link-to-parent\\\\\\\\\\\\\\\"></div>\\\\\\\\n        ) : (\\\\\\\\n          <Link\\\\\\\\n            to={href({\\\\\\\\n              widgetSrc: \\\\\\\\\\\\\\\"devhub.near/widget/app\\\\\\\\\\\\\\\",\\\\\\\\n              params: { page: \\\\\\\\\\\\\\\"post\\\\\\\\\\\\\\\", id: parentId },\\\\\\\\n            })}\\\\\\\\n          >\\\\\\\\n            <ButtonWithHover\\\\\\\\n              type=\\\\\\\\\\\\\\\"button\\\\\\\\\\\\\\\"\\\\\\\\n              style={{ border: \\\\\\\\\\\\\\\"0px\\\\\\\\\\\\\\\" }}\\\\\\\\n              className=\\\\\\\\\\\\\\\"btn\\\\\\\\\\\\\\\"\\\\\\\\n              key=\\\\\\\\\\\\\\\"link-to-parent\\\\\\\\\\\\\\\"\\\\\\\\n            >\\\\\\\\n              <i class=\\\\\\\\\\\\\\\"bi bi-arrow-90deg-up\\\\\\\\\\\\\\\"></i>Go to parent\\\\\\\\n            </ButtonWithHover>\\\\\\\\n          </Link>\\\\\\\\n        )}\\\\\\\\n      </div>\\\\\\\\n    </FooterButtonsContianer>\\\\\\\\n  </div>\\\\\\\\n);\\\\\\\\n\\\\\\\\nconst CreatorWidget = (postType) => {\\\\\\\\n  return (\\\\\\\\n    <div\\\\\\\\n      class={`collapse ${\\\\\\\\n        draftState?.parent_post_id == postId && draftState?.postType == postType\\\\\\\\n          ? \\\\\\\\\\\\\\\"show\\\\\\\\\\\\\\\"\\\\\\\\n          : \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\"\\\\\\\\n      }`}\\\\\\\\n      id={`collapse${postType}Creator${postId}`}\\\\\\\\n      data-bs-parent={`#accordion${postId}`}\\\\\\\\n    >\\\\\\\\n      <Widget\\\\\\\\n        src={\\\\\\\\\\\\\\\"devhub.near/widget/devhub.entity.post.PostEditor\\\\\\\\\\\\\\\"}\\\\\\\\n        props={{\\\\\\\\n          postType,\\\\\\\\n          onDraftStateChange,\\\\\\\\n          draftState:\\\\\\\\n            draftState?.parent_post_id == postId ? draftState : undefined,\\\\\\\\n          parentId: postId,\\\\\\\\n          mode: \\\\\\\\\\\\\\\"Create\\\\\\\\\\\\\\\",\\\\\\\\n        }}\\\\\\\\n      />\\\\\\\\n    </div>\\\\\\\\n  );\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst tokenMapping = {\\\\\\\\n  NEAR: \\\\\\\\\\\\\\\"NEAR\\\\\\\\\\\\\\\",\\\\\\\\n  USDT: {\\\\\\\\n    NEP141: {\\\\\\\\n      address: \\\\\\\\\\\\\\\"usdt.tether-token.near\\\\\\\\\\\\\\\",\\\\\\\\n    },\\\\\\\\n  },\\\\\\\\n  USDC: {\\\\\\\\n    NEP141: {\\\\\\\\n      address:\\\\\\\\n        \\\\\\\\\\\\\\\"17208628f84f5d6ad33f0da3bbbeb27ffcb398eac501a31bd6ad2011e36133a1\\\\\\\\\\\\\\\",\\\\\\\\n    },\\\\\\\\n  },\\\\\\\\n  // Add more tokens here as needed\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst reverseTokenMapping = Object.keys(tokenMapping).reduce(\\\\\\\\n  (reverseMap, key) => {\\\\\\\\n    const value = tokenMapping[key];\\\\\\\\n    if (typeof value === \\\\\\\\\\\\\\\"object\\\\\\\\\\\\\\\") {\\\\\\\\n      reverseMap[JSON.stringify(value)] = key;\\\\\\\\n    }\\\\\\\\n    return reverseMap;\\\\\\\\n  },\\\\\\\\n  {}\\\\\\\\n);\\\\\\\\n\\\\\\\\nfunction tokenResolver(token) {\\\\\\\\n  if (typeof token === \\\\\\\\\\\\\\\"string\\\\\\\\\\\\\\\") {\\\\\\\\n    return token;\\\\\\\\n  } else if (typeof token === \\\\\\\\\\\\\\\"object\\\\\\\\\\\\\\\") {\\\\\\\\n    const tokenString = reverseTokenMapping[JSON.stringify(token)];\\\\\\\\n    return tokenString || null;\\\\\\\\n  } else {\\\\\\\\n    return null; // Invalid input\\\\\\\\n  }\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst EditorWidget = (postType) => {\\\\\\\\n  return (\\\\\\\\n    <div\\\\\\\\n      class={`collapse ${\\\\\\\\n        draftState?.edit_post_id == postId && draftState?.postType == postType\\\\\\\\n          ? \\\\\\\\\\\\\\\"show\\\\\\\\\\\\\\\"\\\\\\\\n          : \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\"\\\\\\\\n      }`}\\\\\\\\n      id={`collapse${postType}Editor${postId}`}\\\\\\\\n      data-bs-parent={`#accordion${postId}`}\\\\\\\\n    >\\\\\\\\n      <Widget\\\\\\\\n        src={\\\\\\\\\\\\\\\"devhub.near/widget/devhub.entity.post.PostEditor\\\\\\\\\\\\\\\"}\\\\\\\\n        props={{\\\\\\\\n          postType,\\\\\\\\n          postId,\\\\\\\\n          mode: \\\\\\\\\\\\\\\"Edit\\\\\\\\\\\\\\\",\\\\\\\\n          author_id: post.author_id,\\\\\\\\n          labels: post.snapshot.labels,\\\\\\\\n          name: post.snapshot.name,\\\\\\\\n          description: post.snapshot.description,\\\\\\\\n          amount: post.snapshot.amount,\\\\\\\\n          token: tokenResolver(post.snapshot.sponsorship_token),\\\\\\\\n          supervisor: post.snapshot.supervisor,\\\\\\\\n          githubLink: post.snapshot.github_link,\\\\\\\\n          onDraftStateChange,\\\\\\\\n          draftState:\\\\\\\\n            draftState?.edit_post_id == postId ? draftState : undefined,\\\\\\\\n        }}\\\\\\\\n      />\\\\\\\\n    </div>\\\\\\\\n  );\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst isDraft =\\\\\\\\n  (draftState?.parent_post_id === postId &&\\\\\\\\n    draftState?.postType === state.postType) ||\\\\\\\\n  (draftState?.edit_post_id === postId &&\\\\\\\\n    draftState?.postType === state.postType);\\\\\\\\n\\\\\\\\nconst toggleEditor = () => {\\\\\\\\n  State.update({ showEditor: !state.showEditor });\\\\\\\\n};\\\\\\\\n\\\\\\\\nlet amount = null;\\\\\\\\nlet token = null;\\\\\\\\nlet supervisor = null;\\\\\\\\n\\\\\\\\nif (state.postType === \\\\\\\\\\\\\\\"Solution\\\\\\\\\\\\\\\") {\\\\\\\\n  const amountMatch = post.snapshot.description.match(\\\\\\\\n    /Requested amount: (\\\\\\\\\\\\\\\\d+(\\\\\\\\\\\\\\\\.\\\\\\\\\\\\\\\\d+)?) (\\\\\\\\\\\\\\\\w+)/\\\\\\\\n  );\\\\\\\\n  amount = amountMatch ? parseFloat(amountMatch[1]) : null;\\\\\\\\n  token = amountMatch ? amountMatch[3] : null;\\\\\\\\n\\\\\\\\n  const sponsorMatch = post.snapshot.description.match(\\\\\\\\n    /Requested sponsor: @([^\\\\\\\\\\\\\\\\s]+)/\\\\\\\\n  );\\\\\\\\n  supervisor = sponsorMatch ? sponsorMatch[1] : null;\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst seekingFunding = amount !== null || token !== null || supervisor !== null;\\\\\\\\n\\\\\\\\nfunction Editor() {\\\\\\\\n  return (\\\\\\\\n    <div class=\\\\\\\\\\\\\\\"row\\\\\\\\\\\\\\\" id={`accordion${postId}`} key=\\\\\\\\\\\\\\\"editors-footer\\\\\\\\\\\\\\\">\\\\\\\\n      <div\\\\\\\\n        key={`${state.postType}${state.editorType}${postId}`}\\\\\\\\n        className={\\\\\\\\\\\\\\\"w-100\\\\\\\\\\\\\\\"}\\\\\\\\n      >\\\\\\\\n        {state.editorType === \\\\\\\\\\\\\\\"CREATE\\\\\\\\\\\\\\\" ? (\\\\\\\\n          <>\\\\\\\\n            <Widget\\\\\\\\n              src={\\\\\\\\\\\\\\\"devhub.near/widget/devhub.entity.post.PostEditor\\\\\\\\\\\\\\\"}\\\\\\\\n              props={{\\\\\\\\n                postType: state.postType,\\\\\\\\n                onDraftStateChange,\\\\\\\\n                draftState:\\\\\\\\n                  draftState?.parent_post_id == postId ? draftState : undefined,\\\\\\\\n                parentId: postId,\\\\\\\\n                mode: \\\\\\\\\\\\\\\"Create\\\\\\\\\\\\\\\",\\\\\\\\n                toggleEditor: toggleEditor,\\\\\\\\n              }}\\\\\\\\n            />\\\\\\\\n          </>\\\\\\\\n        ) : (\\\\\\\\n          <>\\\\\\\\n            <Widget\\\\\\\\n              src={\\\\\\\\\\\\\\\"devhub.near/widget/devhub.entity.post.PostEditor\\\\\\\\\\\\\\\"}\\\\\\\\n              props={{\\\\\\\\n                postType: state.postType,\\\\\\\\n                postId,\\\\\\\\n                mode: \\\\\\\\\\\\\\\"Edit\\\\\\\\\\\\\\\",\\\\\\\\n                author_id: post.author_id,\\\\\\\\n                labels: post.snapshot.labels,\\\\\\\\n                name: post.snapshot.name,\\\\\\\\n                description: post.snapshot.description,\\\\\\\\n                amount: post.snapshot.amount || amount,\\\\\\\\n                token: tokenResolver(post.snapshot.sponsorship_token || token),\\\\\\\\n                supervisor:\\\\\\\\n                  post.snapshot.post.snapshot.supervisor || supervisor,\\\\\\\\n                seekingFunding: seekingFunding,\\\\\\\\n                githubLink: post.snapshot.github_link,\\\\\\\\n                onDraftStateChange,\\\\\\\\n                draftState:\\\\\\\\n                  draftState?.edit_post_id == postId ? draftState : undefined,\\\\\\\\n                toggleEditor: toggleEditor,\\\\\\\\n              }}\\\\\\\\n            />\\\\\\\\n          </>\\\\\\\\n        )}\\\\\\\\n      </div>\\\\\\\\n    </div>\\\\\\\\n  );\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst renamedPostType =\\\\\\\\n  snapshot.post_type == \\\\\\\\\\\\\\\"Submission\\\\\\\\\\\\\\\" ? \\\\\\\\\\\\\\\"Solution\\\\\\\\\\\\\\\" : snapshot.post_type;\\\\\\\\n\\\\\\\\nconst tags = post.snapshot.labels ? (\\\\\\\\n  <div\\\\\\\\n    class=\\\\\\\\\\\\\\\"card-title d-flex flex-wrap align-items-center\\\\\\\\\\\\\\\"\\\\\\\\n    style={{ margin: \\\\\\\\\\\\\\\"20px 0\\\\\\\\\\\\\\\" }}\\\\\\\\n    key=\\\\\\\\\\\\\\\"post-labels\\\\\\\\\\\\\\\"\\\\\\\\n  >\\\\\\\\n    {post.snapshot.labels.map((tag, idx) => (\\\\\\\\n      <div className=\\\\\\\\\\\\\\\"d-flex align-items-center my-3 me-3\\\\\\\\\\\\\\\">\\\\\\\\n        <Link\\\\\\\\n          to={href({\\\\\\\\n            widgetSrc: \\\\\\\\\\\\\\\"devhub.near/widget/app\\\\\\\\\\\\\\\",\\\\\\\\n            params: { page: \\\\\\\\\\\\\\\"feed\\\\\\\\\\\\\\\", tag: tag },\\\\\\\\n          })}\\\\\\\\n        >\\\\\\\\n          <div\\\\\\\\n            onClick={() => {\\\\\\\\n              if (typeof props.updateTagInParent === \\\\\\\\\\\\\\\"function\\\\\\\\\\\\\\\") {\\\\\\\\n                props.updateTagInParent(tag);\\\\\\\\n              }\\\\\\\\n            }}\\\\\\\\n            className=\\\\\\\\\\\\\\\"d-flex gap-3 align-items-center\\\\\\\\\\\\\\\"\\\\\\\\n            style={{ cursor: \\\\\\\\\\\\\\\"pointer\\\\\\\\\\\\\\\", textDecoration: \\\\\\\\\\\\\\\"none\\\\\\\\\\\\\\\" }}\\\\\\\\n          >\\\\\\\\n            <Widget\\\\\\\\n              src={\\\\\\\\\\\\\\\"devhub.near/widget/devhub.components.atom.Tag\\\\\\\\\\\\\\\"}\\\\\\\\n              props={{\\\\\\\\n                tag,\\\\\\\\n                black: true,\\\\\\\\n              }}\\\\\\\\n            />\\\\\\\\n          </div>\\\\\\\\n        </Link>\\\\\\\\n        {idx !== post.snapshot.labels.length - 1 && (\\\\\\\\n          <span className=\\\\\\\\\\\\\\\"ms-3\\\\\\\\\\\\\\\">\\\\\\\\u{2022}</span>\\\\\\\\n        )}\\\\\\\\n      </div>\\\\\\\\n    ))}\\\\\\\\n  </div>\\\\\\\\n) : (\\\\\\\\n  <div key=\\\\\\\\\\\\\\\"post-labels\\\\\\\\\\\\\\\"></div>\\\\\\\\n);\\\\\\\\n\\\\\\\\nconst Title = styled.h5`\\\\\\\\n  margin: 1rem 0;\\\\\\\\n\\\\\\\\n  color: #151515;\\\\\\\\n  font-size: 1.15rem;\\\\\\\\n  font-style: normal;\\\\\\\\n  font-weight: 700;\\\\\\\\n  line-height: 1.625rem; /* 55.556% */\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst postTitle =\\\\\\\\n  snapshot.post_type == \\\\\\\\\\\\\\\"Comment\\\\\\\\\\\\\\\" ? (\\\\\\\\n    <div key=\\\\\\\\\\\\\\\"post-title\\\\\\\\\\\\\\\"></div>\\\\\\\\n  ) : (\\\\\\\\n    <Title key=\\\\\\\\\\\\\\\"post-title\\\\\\\\\\\\\\\">\\\\\\\\n      {emptyIcons[snapshot.post_type]} {renamedPostType}: {snapshot.name}\\\\\\\\n    </Title>\\\\\\\\n  );\\\\\\\\n\\\\\\\\nconst postExtra =\\\\\\\\n  snapshot.post_type == \\\\\\\\\\\\\\\"Sponsorship\\\\\\\\\\\\\\\" ? (\\\\\\\\n    <div key=\\\\\\\\\\\\\\\"post-extra\\\\\\\\\\\\\\\">\\\\\\\\n      <h6 class=\\\\\\\\\\\\\\\"card-subtitle mb-2 text-muted\\\\\\\\\\\\\\\">\\\\\\\\n        Maximum amount: {snapshot.amount}{\\\\\\\\\\\\\\\" \\\\\\\\\\\\\\\"}\\\\\\\\n        {tokenResolver(snapshot.sponsorship_token)}\\\\\\\\n      </h6>\\\\\\\\n      <h6 class=\\\\\\\\\\\\\\\"card-subtitle mb-2 text-muted\\\\\\\\\\\\\\\">\\\\\\\\n        Supervisor:{\\\\\\\\\\\\\\\" \\\\\\\\\\\\\\\"}\\\\\\\\n        <Widget\\\\\\\\n          src={\\\\\\\\\\\\\\\"neardevgov.near/widget/ProfileLine\\\\\\\\\\\\\\\"}\\\\\\\\n          props={{ accountId: snapshot.supervisor }}\\\\\\\\n        />\\\\\\\\n      </h6>\\\\\\\\n    </div>\\\\\\\\n  ) : (\\\\\\\\n    <div></div>\\\\\\\\n  );\\\\\\\\n\\\\\\\\nconst childPostHasDraft = childPostIds.find(\\\\\\\\n  (childId) =>\\\\\\\\n    childId == draftState?.edit_post_id || childId == draftState?.parent_post_id\\\\\\\\n);\\\\\\\\nif (\\\\\\\\n  (childPostHasDraft || state.childrenOfChildPostsHasDraft) &&\\\\\\\\n  props.expandParent\\\\\\\\n) {\\\\\\\\n  props.expandParent();\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst postsList =\\\\\\\\n  props.isPreview || childPostIds.length == 0 ? (\\\\\\\\n    <div key=\\\\\\\\\\\\\\\"posts-list\\\\\\\\\\\\\\\"></div>\\\\\\\\n  ) : (\\\\\\\\n    <div class=\\\\\\\\\\\\\\\"row\\\\\\\\\\\\\\\" key=\\\\\\\\\\\\\\\"posts-list\\\\\\\\\\\\\\\">\\\\\\\\n      <div\\\\\\\\n        class={`collapse mt-3 ${\\\\\\\\n          defaultExpanded ||\\\\\\\\n          childPostHasDraft ||\\\\\\\\n          state.childrenOfChildPostsHasDraft\\\\\\\\n            ? \\\\\\\\\\\\\\\"show\\\\\\\\\\\\\\\"\\\\\\\\n            : \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\"\\\\\\\\n        }`}\\\\\\\\n        id={`collapseChildPosts${postId}`}\\\\\\\\n      >\\\\\\\\n        {childPostIds.map((childId) => (\\\\\\\\n          <div key={childId} style={{ marginBottom: \\\\\\\\\\\\\\\"0.5rem\\\\\\\\\\\\\\\" }}>\\\\\\\\n            <Widget\\\\\\\\n              src=\\\\\\\\\\\\\\\"devhub.near/widget/devhub.entity.post.Post\\\\\\\\\\\\\\\"\\\\\\\\n              props={{\\\\\\\\n                id: childId,\\\\\\\\n                isUnderPost: true,\\\\\\\\n                onDraftStateChange,\\\\\\\\n                draftState,\\\\\\\\n                expandParent: () =>\\\\\\\\n                  State.update({ childrenOfChildPostsHasDraft: true }),\\\\\\\\n                referral: `subpost${childId}of${postId}`,\\\\\\\\n              }}\\\\\\\\n            />\\\\\\\\n          </div>\\\\\\\\n        ))}\\\\\\\\n      </div>\\\\\\\\n    </div>\\\\\\\\n  );\\\\\\\\n\\\\\\\\nconst LimitedMarkdown = styled.div`\\\\\\\\n  max-height: 20em;\\\\\\\\n`;\\\\\\\\n\\\\\\\\n// Determine if located in the post page.\\\\\\\\nconst isInList = props.isInList;\\\\\\\\nconst contentArray = snapshot.description.split(\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\");\\\\\\\\nconst needClamp = isInList && contentArray.length > 5;\\\\\\\\n\\\\\\\\ninitState({\\\\\\\\n  clamp: needClamp,\\\\\\\\n  expandReplies: defaultExpanded,\\\\\\\\n});\\\\\\\\n\\\\\\\\nconst clampedContent = needClamp\\\\\\\\n  ? contentArray.slice(0, 3).join(\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\")\\\\\\\\n  : snapshot.description;\\\\\\\\n\\\\\\\\n// Should make sure the posts under the currently top viewed post are limited in size.\\\\\\\\nconst descriptionArea = isUnderPost ? (\\\\\\\\n  <LimitedMarkdown className=\\\\\\\\\\\\\\\"overflow-auto\\\\\\\\\\\\\\\" key=\\\\\\\\\\\\\\\"description-area\\\\\\\\\\\\\\\">\\\\\\\\n    {/* {widget(\\\\\\\\\\\\\\\"components.molecule.markdown-viewer\\\\\\\\\\\\\\\", {\\\\\\\\n      text: snapshot.description,\\\\\\\\n    })} */}\\\\\\\\n    <Widget\\\\\\\\n      src={\\\\\\\\\\\\\\\"devhub.near/widget/devhub.components.molecule.MarkdownViewer\\\\\\\\\\\\\\\"}\\\\\\\\n      props={{\\\\\\\\n        text: snapshot.description,\\\\\\\\n      }}\\\\\\\\n    />\\\\\\\\n  </LimitedMarkdown>\\\\\\\\n) : (\\\\\\\\n  <div className=\\\\\\\\\\\\\\\"w-100 overflow-auto\\\\\\\\\\\\\\\">\\\\\\\\n    <div class={state.clamp ? \\\\\\\\\\\\\\\"clamp\\\\\\\\\\\\\\\" : \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\"}>\\\\\\\\n      {/* {widget(\\\\\\\\\\\\\\\"components.molecule.markdown-viewer\\\\\\\\\\\\\\\", {\\\\\\\\n        text: state.clamp ? clampedContent : snapshot.description,\\\\\\\\n      })} */}\\\\\\\\n      <Widget\\\\\\\\n        src={\\\\\\\\\\\\\\\"devhub.near/widget/devhub.components.molecule.MarkdownViewer\\\\\\\\\\\\\\\"}\\\\\\\\n        props={{\\\\\\\\n          text: state.clamp ? clampedContent : snapshot.description,\\\\\\\\n        }}\\\\\\\\n      />\\\\\\\\n    </div>\\\\\\\\n    {state.clamp ? (\\\\\\\\n      <div class=\\\\\\\\\\\\\\\"d-flex justify-content-start\\\\\\\\\\\\\\\">\\\\\\\\n        <a\\\\\\\\n          style={{ cursor: \\\\\\\\\\\\\\\"pointer\\\\\\\\\\\\\\\", color: \\\\\\\\\\\\\\\"#00ec97\\\\\\\\\\\\\\\" }}\\\\\\\\n          class=\\\\\\\\\\\\\\\"btn-link text-dark fw-bold text-decoration-none\\\\\\\\\\\\\\\"\\\\\\\\n          onClick={() => State.update({ clamp: false })}\\\\\\\\n        >\\\\\\\\n          See more\\\\\\\\n        </a>\\\\\\\\n      </div>\\\\\\\\n    ) : (\\\\\\\\n      <></>\\\\\\\\n    )}\\\\\\\\n  </div>\\\\\\\\n);\\\\\\\\n\\\\\\\\nconst timestampElement = (_snapshot) => {\\\\\\\\n  return (\\\\\\\\n    <Link\\\\\\\\n      class=\\\\\\\\\\\\\\\"text-muted\\\\\\\\\\\\\\\"\\\\\\\\n      href={href({\\\\\\\\n        widgetSrc: \\\\\\\\\\\\\\\"devhub.near/widget/app\\\\\\\\\\\\\\\",\\\\\\\\n        params: {\\\\\\\\n          page: \\\\\\\\\\\\\\\"post\\\\\\\\\\\\\\\",\\\\\\\\n          id: postId,\\\\\\\\n          timestamp: _snapshot.timestamp,\\\\\\\\n          compareTimestamp: null,\\\\\\\\n          referral,\\\\\\\\n        },\\\\\\\\n      })}\\\\\\\\n    >\\\\\\\\n      {readableDate(_snapshot.timestamp / 1000000).substring(4)}\\\\\\\\n\\\\\\\\n      <Widget\\\\\\\\n        src=\\\\\\\\\\\\\\\"mob.near/widget/ProfileImage\\\\\\\\\\\\\\\"\\\\\\\\n        props={{\\\\\\\\n          accountId: _snapshot.editor_id,\\\\\\\\n          style: {\\\\\\\\n            width: \\\\\\\\\\\\\\\"1.25em\\\\\\\\\\\\\\\",\\\\\\\\n            height: \\\\\\\\\\\\\\\"1.25em\\\\\\\\\\\\\\\",\\\\\\\\n          },\\\\\\\\n          imageStyle: {\\\\\\\\n            transform: \\\\\\\\\\\\\\\"translateY(-12.5%)\\\\\\\\\\\\\\\",\\\\\\\\n          },\\\\\\\\n        }}\\\\\\\\n      />\\\\\\\\n      {_snapshot.editor_id.substring(0, 8)}\\\\\\\\n    </Link>\\\\\\\\n  );\\\\\\\\n};\\\\\\\\n\\\\\\\\nfunction combineText(_snapshot) {\\\\\\\\n  return (\\\\\\\\n    \\\\\\\\\\\\\\\"## \\\\\\\\\\\\\\\" +\\\\\\\\n    _snapshot.post_type +\\\\\\\\n    \\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\" +\\\\\\\\n    _snapshot.name +\\\\\\\\n    \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\" +\\\\\\\\n    _snapshot.description\\\\\\\\n  );\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst CardContainer = styled.div`\\\\\\\\n  padding: 1.5rem 3rem !important;\\\\\\\\n  border-radius: 16px !important;\\\\\\\\n  border: 1px solid rgba(129, 129, 129, 0.3) !important;\\\\\\\\n  background: #fffefe !important;\\\\\\\\n\\\\\\\\n  @media screen and (max-width: 960px) {\\\\\\\\n    padding: 1rem !important;\\\\\\\\n  }\\\\\\\\n`;\\\\\\\\n\\\\\\\\nreturn (\\\\\\\\n  <CardContainer className={`card ${borders[snapshot.post_type]} attractable`}>\\\\\\\\n    {header}\\\\\\\\n    <div className=\\\\\\\\\\\\\\\"card-body\\\\\\\\\\\\\\\" style={{ padding: 0 }}>\\\\\\\\n      {searchKeywords}\\\\\\\\n      {compareSnapshot ? (\\\\\\\\n        <div\\\\\\\\n          class=\\\\\\\\\\\\\\\"border rounded\\\\\\\\\\\\\\\"\\\\\\\\n          style={{ marginTop: \\\\\\\\\\\\\\\"16px\\\\\\\\\\\\\\\", marginBottom: \\\\\\\\\\\\\\\"16px\\\\\\\\\\\\\\\" }}\\\\\\\\n        >\\\\\\\\n          <div class=\\\\\\\\\\\\\\\"d-flex justify-content-end\\\\\\\\\\\\\\\" style={{ fontSize: \\\\\\\\\\\\\\\"12px\\\\\\\\\\\\\\\" }}>\\\\\\\\n            <div class=\\\\\\\\\\\\\\\"d-flex w-50 justify-content-end mt-1 me-2\\\\\\\\\\\\\\\">\\\\\\\\n              {timestampElement(snapshot)}\\\\\\\\n              {snapshot !== compareSnapshot && (\\\\\\\\n                <>\\\\\\\\n                  <div class=\\\\\\\\\\\\\\\"mx-1 align-self-center\\\\\\\\\\\\\\\">\\\\\\\\n                    <i class=\\\\\\\\\\\\\\\"bi bi-file-earmark-diff\\\\\\\\\\\\\\\" />\\\\\\\\n                  </div>\\\\\\\\n                  {timestampElement(compareSnapshot)}\\\\\\\\n                </>\\\\\\\\n              )}\\\\\\\\n            </div>\\\\\\\\n          </div>\\\\\\\\n          <div className=\\\\\\\\\\\\\\\"w-100 overflow-auto\\\\\\\\\\\\\\\">\\\\\\\\n            <Widget\\\\\\\\n              src=\\\\\\\\\\\\\\\"markeljan.near/widget/MarkdownDiff\\\\\\\\\\\\\\\"\\\\\\\\n              props={{\\\\\\\\n                post: post,\\\\\\\\n                currentCode: combineText(\\\\\\\\n                  swapTimestamps ? compareSnapshot : snapshot\\\\\\\\n                ),\\\\\\\\n                prevCode: combineText(\\\\\\\\n                  swapTimestamps ? snapshot : compareSnapshot\\\\\\\\n                ),\\\\\\\\n                showLineNumber: true,\\\\\\\\n              }}\\\\\\\\n            />\\\\\\\\n          </div>\\\\\\\\n        </div>\\\\\\\\n      ) : (\\\\\\\\n        <>\\\\\\\\n          {postTitle}\\\\\\\\n          {postExtra}\\\\\\\\n          {descriptionArea}\\\\\\\\n        </>\\\\\\\\n      )}\\\\\\\\n      {tags}\\\\\\\\n      {buttonsFooter}\\\\\\\\n      {!props.isPreview && (isDraft || state.showEditor) && <Editor />}\\\\\\\\n      {postsList}\\\\\\\\n    </div>\\\\\\\\n  </CardContainer>\\\\\\\\n);\\\\\\\\n\"}, \"devhub.entity.post.PostEditor\": {\"\": \"const cleanDescription = (description) => {\\\\\\\\n  return description\\\\\\\\n    ? description.replace(\\\\\\\\n        /###### Requested amount: .+?\\\\\\\\\\\\\\\\n###### Requested sponsor: @[^\\\\\\\\\\\\\\\\s]+\\\\\\\\\\\\\\\\n/g,\\\\\\\\n        \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\"\\\\\\\\n      )\\\\\\\\n    : description;\\\\\\\\n};\\\\\\\\n\\\\\\\\ninitState({\\\\\\\\n  seekingFunding: props.seekingFunding ?? false,\\\\\\\\n  author_id: context.accountId,\\\\\\\\n  // Should be a list of objects with field \\\\\\\\\\\\\\\"name\\\\\\\\\\\\\\\".\\\\\\\\n  labels,\\\\\\\\n  // Should be a list of labels as strings.\\\\\\\\n  // Both of the label structures should be modified together.\\\\\\\\n  labelStrings: [],\\\\\\\\n  postType,\\\\\\\\n  name: props.name ?? \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\",\\\\\\\\n  description:\\\\\\\\n    (props.postType === \\\\\\\\\\\\\\\"Solution\\\\\\\\\\\\\\\"\\\\\\\\n      ? cleanDescription(props.description)\\\\\\\\n      : props.description) ?? \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\",\\\\\\\\n  amount: props.amount ?? \\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\n  token: props.token ?? \\\\\\\\\\\\\\\"USDT\\\\\\\\\\\\\\\",\\\\\\\\n  supervisor: props.supervisor ?? \\\\\\\\\\\\\\\"neardevdao.near\\\\\\\\\\\\\\\",\\\\\\\\n  githubLink: props.githubLink ?? \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\",\\\\\\\\n  warning: \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\",\\\\\\\\n  draftStateApplied: false,\\\\\\\\n  mentionInput: \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\", // text next to @ tag\\\\\\\\n  mentionsArray: [], // all the mentions in the description\\\\\\\\n});\\\\\\\\n\\\\\\\\n/* INCLUDE: \\\\\\\\\\\\\\\"core/lib/autocomplete\\\\\\\\\\\\\\\" */\\\\\\\\nconst autocompleteEnabled = true;\\\\\\\\n\\\\\\\\nconst AutoComplete = styled.div`\\\\\\\\n  z-index: 5;\\\\\\\\n\\\\\\\\n  > div > div {\\\\\\\\n    padding: calc(var(--padding) / 2);\\\\\\\\n  }\\\\\\\\n`;\\\\\\\\n\\\\\\\\nfunction textareaInputHandler(value) {\\\\\\\\n  const words = value.split(/\\\\\\\\\\\\\\\\s+/);\\\\\\\\n  const allMentiones = words\\\\\\\\n    .filter((word) => word.startsWith(\\\\\\\\\\\\\\\"@\\\\\\\\\\\\\\\"))\\\\\\\\n    .map((mention) => mention.slice(1));\\\\\\\\n  const newMentiones = allMentiones.filter(\\\\\\\\n    (item) => !state.mentionsArray.includes(item)\\\\\\\\n  );\\\\\\\\n\\\\\\\\n  State.update((lastKnownState) => ({\\\\\\\\n    ...lastKnownState,\\\\\\\\n    text: value,\\\\\\\\n    showAccountAutocomplete: newMentiones?.length > 0,\\\\\\\\n    mentionsArray: allMentiones,\\\\\\\\n    mentionInput: newMentiones?.[0] ?? \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\",\\\\\\\\n  }));\\\\\\\\n}\\\\\\\\n\\\\\\\\nfunction autoCompleteAccountId(id) {\\\\\\\\n  // to make sure we update the @ at correct index\\\\\\\\n  let currentIndex = 0;\\\\\\\\n  const updatedDescription = state.description.replace(\\\\\\\\n    /(?:^|\\\\\\\\\\\\\\\\s)(@[^\\\\\\\\\\\\\\\\s]*)/g,\\\\\\\\n    (match) => {\\\\\\\\n      if (currentIndex === state.mentionsArray.indexOf(state.mentionInput)) {\\\\\\\\n        currentIndex++;\\\\\\\\n        return ` @${id}`;\\\\\\\\n      } else {\\\\\\\\n        currentIndex++;\\\\\\\\n        return match;\\\\\\\\n      }\\\\\\\\n    }\\\\\\\\n  );\\\\\\\\n  State.update((lastKnownState) => ({\\\\\\\\n    ...lastKnownState,\\\\\\\\n    handler: \\\\\\\\\\\\\\\"autocompleteSelected\\\\\\\\\\\\\\\",\\\\\\\\n    description: updatedDescription,\\\\\\\\n    showAccountAutocomplete: false,\\\\\\\\n  }));\\\\\\\\n}\\\\\\\\n\\\\\\\\n/* END_INCLUDE: \\\\\\\\\\\\\\\"core/lib/autocomplete\\\\\\\\\\\\\\\" */\\\\\\\\n\\\\\\\\nconst postType = props.postType ?? \\\\\\\\\\\\\\\"Sponsorship\\\\\\\\\\\\\\\";\\\\\\\\nconst parentId = props.parentId ?? null;\\\\\\\\nconst postId = props.postId ?? null;\\\\\\\\nconst mode = props.mode ?? \\\\\\\\\\\\\\\"Create\\\\\\\\\\\\\\\";\\\\\\\\nconst toggleEditor = props.toggleEditor;\\\\\\\\n\\\\\\\\nconst referralLabels = props.referral ? [`referral:${props.referral}`] : [];\\\\\\\\nconst labelStrings = (props.labels ?? []).concat(referralLabels);\\\\\\\\n\\\\\\\\nconst labels = labelStrings.map((s) => {\\\\\\\\n  return { name: s };\\\\\\\\n});\\\\\\\\n\\\\\\\\nif (!state.draftStateApplied && props.draftState) {\\\\\\\\n  State.update({ ...props.draftState, draftStateApplied: true });\\\\\\\\n}\\\\\\\\n\\\\\\\\nlet fields = {\\\\\\\\n  Comment: [\\\\\\\\\\\\\\\"description\\\\\\\\\\\\\\\"],\\\\\\\\n  Idea: [\\\\\\\\\\\\\\\"name\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"description\\\\\\\\\\\\\\\"],\\\\\\\\n  Solution: [\\\\\\\\\\\\\\\"name\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"description\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"fund_raising\\\\\\\\\\\\\\\"],\\\\\\\\n  Attestation: [\\\\\\\\\\\\\\\"name\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"description\\\\\\\\\\\\\\\"],\\\\\\\\n  Sponsorship: [\\\\\\\\n    \\\\\\\\\\\\\\\"name\\\\\\\\\\\\\\\",\\\\\\\\n    \\\\\\\\\\\\\\\"description\\\\\\\\\\\\\\\",\\\\\\\\n    \\\\\\\\\\\\\\\"amount\\\\\\\\\\\\\\\",\\\\\\\\n    \\\\\\\\\\\\\\\"sponsorship_token\\\\\\\\\\\\\\\",\\\\\\\\n    \\\\\\\\\\\\\\\"supervisor\\\\\\\\\\\\\\\",\\\\\\\\n  ],\\\\\\\\n  Github: [\\\\\\\\\\\\\\\"githubLink\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"name\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"description\\\\\\\\\\\\\\\"],\\\\\\\\n}[postType];\\\\\\\\n\\\\\\\\n// This must be outside onClick, because Near.view returns null at first, and when the view call finished, it returns true/false.\\\\\\\\n// If checking this inside onClick, it will give `null` and we cannot tell the result is true or false.\\\\\\\\nlet grantNotify = Near.view(\\\\\\\\\\\\\\\"social.near\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"is_write_permission_granted\\\\\\\\\\\\\\\", {\\\\\\\\n  predecessor_id: \\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\",\\\\\\\\n  key: context.accountId + \\\\\\\\\\\\\\\"/index/notify\\\\\\\\\\\\\\\",\\\\\\\\n});\\\\\\\\nif (grantNotify === null) {\\\\\\\\n  return;\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst tokenMapping = {\\\\\\\\n  NEAR: \\\\\\\\\\\\\\\"NEAR\\\\\\\\\\\\\\\",\\\\\\\\n  USDT: {\\\\\\\\n    NEP141: {\\\\\\\\n      address: \\\\\\\\\\\\\\\"usdt.tether-token.near\\\\\\\\\\\\\\\",\\\\\\\\n    },\\\\\\\\n  },\\\\\\\\n  USDC: {\\\\\\\\n    NEP141: {\\\\\\\\n      address:\\\\\\\\n        \\\\\\\\\\\\\\\"17208628f84f5d6ad33f0da3bbbeb27ffcb398eac501a31bd6ad2011e36133a1\\\\\\\\\\\\\\\",\\\\\\\\n    },\\\\\\\\n  },\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst onSubmit = () => {\\\\\\\\n  let labels = state.labelStrings;\\\\\\\\n  var body = {\\\\\\\\n    Comment: { description: state.description, comment_version: \\\\\\\\\\\\\\\"V2\\\\\\\\\\\\\\\" },\\\\\\\\n    Idea: {\\\\\\\\n      name: state.name,\\\\\\\\n      description: state.description,\\\\\\\\n      idea_version: \\\\\\\\\\\\\\\"V1\\\\\\\\\\\\\\\",\\\\\\\\n    },\\\\\\\\n    Solution: {\\\\\\\\n      name: state.name,\\\\\\\\n      description: generateDescription(\\\\\\\\n        state.description,\\\\\\\\n        state.amount,\\\\\\\\n        state.token,\\\\\\\\n        state.supervisor,\\\\\\\\n        state.seekingFunding\\\\\\\\n      ),\\\\\\\\n      solution_version: \\\\\\\\\\\\\\\"V1\\\\\\\\\\\\\\\",\\\\\\\\n    },\\\\\\\\n    Attestation: {\\\\\\\\n      name: state.name,\\\\\\\\n      description: state.description,\\\\\\\\n      attestation_version: \\\\\\\\\\\\\\\"V1\\\\\\\\\\\\\\\",\\\\\\\\n    },\\\\\\\\n    Sponsorship: {\\\\\\\\n      name: state.name,\\\\\\\\n      description: state.description,\\\\\\\\n      amount: state.amount,\\\\\\\\n      sponsorship_token: tokenMapping[state.token],\\\\\\\\n      supervisor: state.supervisor,\\\\\\\\n      sponsorship_version: \\\\\\\\\\\\\\\"V1\\\\\\\\\\\\\\\",\\\\\\\\n    },\\\\\\\\n    Github: {\\\\\\\\n      name: state.name,\\\\\\\\n      description: state.description,\\\\\\\\n      github_version: \\\\\\\\\\\\\\\"V0\\\\\\\\\\\\\\\",\\\\\\\\n      github_link: state.githubLink,\\\\\\\\n    },\\\\\\\\n  }[postType];\\\\\\\\n  body[\\\\\\\\\\\\\\\"post_type\\\\\\\\\\\\\\\"] = postType;\\\\\\\\n  if (!context.accountId) {\\\\\\\\n    return;\\\\\\\\n  }\\\\\\\\n  let txn = [];\\\\\\\\n  if (mode == \\\\\\\\\\\\\\\"Create\\\\\\\\\\\\\\\") {\\\\\\\\n    props.onDraftStateChange(\\\\\\\\n      Object.assign({}, state, { parent_post_id: parentId })\\\\\\\\n    );\\\\\\\\n    txn.push({\\\\\\\\n      contractName: \\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\",\\\\\\\\n      methodName: \\\\\\\\\\\\\\\"add_post\\\\\\\\\\\\\\\",\\\\\\\\n      args: {\\\\\\\\n        parent_id: parentId,\\\\\\\\n        labels,\\\\\\\\n        body,\\\\\\\\n      },\\\\\\\\n      gas: Big(10).pow(14),\\\\\\\\n    });\\\\\\\\n  } else if (mode == \\\\\\\\\\\\\\\"Edit\\\\\\\\\\\\\\\") {\\\\\\\\n    props.onDraftStateChange(\\\\\\\\n      Object.assign({}, state, { edit_post_id: postId })\\\\\\\\n    );\\\\\\\\n    txn.push({\\\\\\\\n      contractName: \\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\",\\\\\\\\n      methodName: \\\\\\\\\\\\\\\"edit_post\\\\\\\\\\\\\\\",\\\\\\\\n      args: {\\\\\\\\n        id: postId,\\\\\\\\n        labels,\\\\\\\\n        body,\\\\\\\\n      },\\\\\\\\n      gas: Big(10).pow(14),\\\\\\\\n    });\\\\\\\\n  }\\\\\\\\n  if (mode == \\\\\\\\\\\\\\\"Create\\\\\\\\\\\\\\\" || mode == \\\\\\\\\\\\\\\"Edit\\\\\\\\\\\\\\\") {\\\\\\\\n    if (grantNotify === false) {\\\\\\\\n      txn.unshift({\\\\\\\\n        contractName: \\\\\\\\\\\\\\\"social.near\\\\\\\\\\\\\\\",\\\\\\\\n        methodName: \\\\\\\\\\\\\\\"grant_write_permission\\\\\\\\\\\\\\\",\\\\\\\\n        args: {\\\\\\\\n          predecessor_id: \\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\",\\\\\\\\n          keys: [context.accountId + \\\\\\\\\\\\\\\"/index/notify\\\\\\\\\\\\\\\"],\\\\\\\\n        },\\\\\\\\n        gas: Big(10).pow(14),\\\\\\\\n        deposit: Big(10).pow(22),\\\\\\\\n      });\\\\\\\\n    }\\\\\\\\n    Near.call(txn);\\\\\\\\n  }\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst normalizeLabel = (label) =>\\\\\\\\n  label\\\\\\\\n    .replaceAll(/[- \\\\\\\\\\\\\\\\.]/g, \\\\\\\\\\\\\\\"_\\\\\\\\\\\\\\\")\\\\\\\\n    .replaceAll(/[^\\\\\\\\\\\\\\\\w]+/g, \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\")\\\\\\\\n    .replaceAll(/_+/g, \\\\\\\\\\\\\\\"-\\\\\\\\\\\\\\\")\\\\\\\\n    .replace(/^-+/, \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\")\\\\\\\\n    .replace(/-+$/, \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\")\\\\\\\\n    .toLowerCase()\\\\\\\\n    .trim(\\\\\\\\\\\\\\\"-\\\\\\\\\\\\\\\");\\\\\\\\n\\\\\\\\nconst checkLabel = (label) => {\\\\\\\\n  Near.asyncView(\\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"is_allowed_to_use_labels\\\\\\\\\\\\\\\", {\\\\\\\\n    editor: context.accountId,\\\\\\\\n    labels: [label],\\\\\\\\n  }).then((allowed) => {\\\\\\\\n    if (allowed) {\\\\\\\\n      State.update({ warning: \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\" });\\\\\\\\n    } else {\\\\\\\\n      State.update({\\\\\\\\n        warning:\\\\\\\\n          \\\\\\\\\\\\'The label \\\\\\\\\\\\\\\"\\\\\\\\\\\\' +\\\\\\\\n          label +\\\\\\\\n          \\\\\\\\\\\\'\\\\\\\\\\\\\\\" is protected and can only be added by moderators\\\\\\\\\\\\',\\\\\\\\n      });\\\\\\\\n      return;\\\\\\\\n    }\\\\\\\\n  });\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst setLabels = (labels) => {\\\\\\\\n  labels = labels.map((o) => {\\\\\\\\n    o.name = normalizeLabel(o.name);\\\\\\\\n    return o;\\\\\\\\n  });\\\\\\\\n  if (labels.length < state.labels.length) {\\\\\\\\n    let oldLabels = new Set(state.labels.map((label) => label.name));\\\\\\\\n    for (let label of labels) {\\\\\\\\n      oldLabels.delete(label.name);\\\\\\\\n    }\\\\\\\\n    let removed = oldLabels.values().next().value;\\\\\\\\n    Near.asyncView(\\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"is_allowed_to_use_labels\\\\\\\\\\\\\\\", {\\\\\\\\n      editor: context.accountId,\\\\\\\\n      labels: [removed],\\\\\\\\n    }).then((allowed) => {\\\\\\\\n      if (allowed) {\\\\\\\\n        let labelStrings = labels.map(({ name }) => name);\\\\\\\\n        State.update({ labels, labelStrings });\\\\\\\\n      } else {\\\\\\\\n        State.update({\\\\\\\\n          warning:\\\\\\\\n            \\\\\\\\\\\\'The label \\\\\\\\\\\\\\\"\\\\\\\\\\\\' +\\\\\\\\n            removed +\\\\\\\\n            \\\\\\\\\\\\'\\\\\\\\\\\\\\\" is protected and can only be updated by moderators\\\\\\\\\\\\',\\\\\\\\n        });\\\\\\\\n        return;\\\\\\\\n      }\\\\\\\\n    });\\\\\\\\n  } else {\\\\\\\\n    let labelStrings = labels.map((o) => {\\\\\\\\n      return o.name;\\\\\\\\n    });\\\\\\\\n    State.update({ labels, labelStrings });\\\\\\\\n  }\\\\\\\\n};\\\\\\\\nconst existingLabelStrings =\\\\\\\\n  Near.view(\\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"get_all_allowed_labels\\\\\\\\\\\\\\\", {\\\\\\\\n    editor: context.accountId,\\\\\\\\n  }) ?? [];\\\\\\\\nconst existingLabelSet = new Set(existingLabelStrings);\\\\\\\\nconst existingLabels = existingLabelStrings\\\\\\\\n  .filter((it) => it !== \\\\\\\\\\\\\\\"blog\\\\\\\\\\\\\\\") // remove blog label so users cannot publish blogs from feed\\\\\\\\n  .map((s) => {\\\\\\\\n    return { name: s };\\\\\\\\n  });\\\\\\\\n\\\\\\\\nconst labelEditor = (\\\\\\\\n  <div className=\\\\\\\\\\\\\\\"col-lg-12  mb-2\\\\\\\\\\\\\\\">\\\\\\\\n    Labels:\\\\\\\\n    <Typeahead\\\\\\\\n      multiple\\\\\\\\n      labelKey=\\\\\\\\\\\\\\\"name\\\\\\\\\\\\\\\"\\\\\\\\n      onInputChange={checkLabel}\\\\\\\\n      onChange={setLabels}\\\\\\\\n      options={existingLabels}\\\\\\\\n      placeholder=\\\\\\\\\\\\\\\"near.social, widget, NEP, standard, protocol, tool\\\\\\\\\\\\\\\"\\\\\\\\n      selected={state.labels}\\\\\\\\n      positionFixed\\\\\\\\n      allowNew={(results, props) => {\\\\\\\\n        return (\\\\\\\\n          !existingLabelSet.has(props.text) &&\\\\\\\\n          props.text.toLowerCase() !== \\\\\\\\\\\\\\\"blog\\\\\\\\\\\\\\\" && // dont allow adding \\\\\\\\\\\\\\\"Blog\\\\\\\\\\\\\\\"\\\\\\\\n          props.selected.filter((selected) => selected.name === props.text)\\\\\\\\n            .length == 0 &&\\\\\\\\n          Near.view(\\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"is_allowed_to_use_labels\\\\\\\\\\\\\\\", {\\\\\\\\n            editor: context.accountId,\\\\\\\\n            labels: [props.text],\\\\\\\\n          })\\\\\\\\n        );\\\\\\\\n      }}\\\\\\\\n    />\\\\\\\\n  </div>\\\\\\\\n);\\\\\\\\n\\\\\\\\nconst githubLinkDiv = (\\\\\\\\n  <div className=\\\\\\\\\\\\\\\"col-lg-12  mb-2\\\\\\\\\\\\\\\">\\\\\\\\n    Github Issue URL:\\\\\\\\n    <input\\\\\\\\n      type=\\\\\\\\\\\\\\\"text\\\\\\\\\\\\\\\"\\\\\\\\n      value={state.githubLink}\\\\\\\\n      onChange={(event) => State.update({ githubLink: event.target.value })}\\\\\\\\n    />\\\\\\\\n  </div>\\\\\\\\n);\\\\\\\\n\\\\\\\\nconst nameDiv = (\\\\\\\\n  <div className=\\\\\\\\\\\\\\\"col-lg-6  mb-2\\\\\\\\\\\\\\\">\\\\\\\\n    Title:\\\\\\\\n    <input\\\\\\\\n      type=\\\\\\\\\\\\\\\"text\\\\\\\\\\\\\\\"\\\\\\\\n      value={state.name}\\\\\\\\n      onChange={(event) => State.update({ name: event.target.value })}\\\\\\\\n    />\\\\\\\\n  </div>\\\\\\\\n);\\\\\\\\n\\\\\\\\nconst amountDiv = (\\\\\\\\n  <div className=\\\\\\\\\\\\\\\"col-lg-6  mb-2\\\\\\\\\\\\\\\">\\\\\\\\n    Amount:\\\\\\\\n    <input\\\\\\\\n      type=\\\\\\\\\\\\\\\"text\\\\\\\\\\\\\\\"\\\\\\\\n      value={state.amount}\\\\\\\\n      onChange={(event) => State.update({ amount: event.target.value })}\\\\\\\\n    />\\\\\\\\n  </div>\\\\\\\\n);\\\\\\\\n\\\\\\\\nconst tokenDiv = (\\\\\\\\n  <div className=\\\\\\\\\\\\\\\"col-lg-6 mb-2\\\\\\\\\\\\\\\">\\\\\\\\n    Currency\\\\\\\\n    <select\\\\\\\\n      onChange={(event) => State.update({ token: event.target.value })}\\\\\\\\n      class=\\\\\\\\\\\\\\\"form-select\\\\\\\\\\\\\\\"\\\\\\\\n      aria-label=\\\\\\\\\\\\\\\"Select currency\\\\\\\\\\\\\\\"\\\\\\\\n      value={state.token}\\\\\\\\n    >\\\\\\\\n      <option value=\\\\\\\\\\\\\\\"USDT\\\\\\\\\\\\\\\">USDT</option>\\\\\\\\n      <option value=\\\\\\\\\\\\\\\"NEAR\\\\\\\\\\\\\\\">NEAR</option>\\\\\\\\n      <option value=\\\\\\\\\\\\\\\"USDC\\\\\\\\\\\\\\\">USDC</option>\\\\\\\\n    </select>\\\\\\\\n  </div>\\\\\\\\n);\\\\\\\\n\\\\\\\\nconst supervisorDiv = (\\\\\\\\n  <div className=\\\\\\\\\\\\\\\"col-lg-6 mb-2\\\\\\\\\\\\\\\">\\\\\\\\n    Supervisor:\\\\\\\\n    <input\\\\\\\\n      type=\\\\\\\\\\\\\\\"text\\\\\\\\\\\\\\\"\\\\\\\\n      value={state.supervisor}\\\\\\\\n      onChange={(event) => State.update({ supervisor: event.target.value })}\\\\\\\\n    />\\\\\\\\n  </div>\\\\\\\\n);\\\\\\\\n\\\\\\\\nconst callDescriptionDiv = () => {\\\\\\\\n  return (\\\\\\\\n    <div className=\\\\\\\\\\\\\\\"col-lg-12  mb-2\\\\\\\\\\\\\\\">\\\\\\\\n      Description:\\\\\\\\n      <br />\\\\\\\\n      <Widget\\\\\\\\n        src={\\\\\\\\\\\\\\\"devhub.near/widget/devhub.components.molecule.MarkdownEditor\\\\\\\\\\\\\\\"}\\\\\\\\n        props={{\\\\\\\\n          data: { handler: state.handler, content: state.description },\\\\\\\\n          onChange: (content) => {\\\\\\\\n            State.update({ description: content, handler: \\\\\\\\\\\\\\\"update\\\\\\\\\\\\\\\" });\\\\\\\\n            textareaInputHandler(content);\\\\\\\\n          },\\\\\\\\n        }}\\\\\\\\n      />\\\\\\\\n      {autocompleteEnabled && state.showAccountAutocomplete && (\\\\\\\\n        <AutoComplete>\\\\\\\\n          <Widget\\\\\\\\n            src=\\\\\\\\\\\\\\\"devhub.near/widget/devhub.components.molecule.AccountAutocomplete\\\\\\\\\\\\\\\"\\\\\\\\n            props={{\\\\\\\\n              term: state.mentionInput,\\\\\\\\n              onSelect: autoCompleteAccountId,\\\\\\\\n              onClose: () => State.update({ showAccountAutocomplete: false }),\\\\\\\\n            }}\\\\\\\\n          />\\\\\\\\n        </AutoComplete>\\\\\\\\n      )}\\\\\\\\n    </div>\\\\\\\\n  );\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst disclaimer = (\\\\\\\\n  <p>\\\\\\\\n    <i>\\\\\\\\n      * Note, all projects that were granted sponsorships are required to pass\\\\\\\\n      KYC to receive the funding.\\\\\\\\n    </i>\\\\\\\\n  </p>\\\\\\\\n);\\\\\\\\n\\\\\\\\nconst isFundraisingDiv = (\\\\\\\\n  // This is jank with just btns and not radios. But the radios were glitchy af\\\\\\\\n  <>\\\\\\\\n    <div class=\\\\\\\\\\\\\\\"mb-2\\\\\\\\\\\\\\\">\\\\\\\\n      <p class=\\\\\\\\\\\\\\\"fs-6 fw-bold mb-1\\\\\\\\\\\\\\\">\\\\\\\\n        Are you seeking funding for your solution?\\\\\\\\n        <span class=\\\\\\\\\\\\\\\"text-muted fw-normal\\\\\\\\\\\\\\\">(Optional)</span>\\\\\\\\n      </p>\\\\\\\\n      <div class=\\\\\\\\\\\\\\\"form-check form-check-inline\\\\\\\\\\\\\\\">\\\\\\\\n        <label class=\\\\\\\\\\\\\\\"form-check-label\\\\\\\\\\\\\\\">\\\\\\\\n          <button\\\\\\\\n            className=\\\\\\\\\\\\\\\"btn btn-light p-0\\\\\\\\\\\\\\\"\\\\\\\\n            style={{\\\\\\\\n              backgroundColor: state.seekingFunding ? \\\\\\\\\\\\\\\"#0C7283\\\\\\\\\\\\\\\" : \\\\\\\\\\\\\\\"inherit\\\\\\\\\\\\\\\",\\\\\\\\n              color: \\\\\\\\\\\\\\\"#f3f3f3\\\\\\\\\\\\\\\",\\\\\\\\n              border: \\\\\\\\\\\\\\\"solid #D9D9D9\\\\\\\\\\\\\\\",\\\\\\\\n              borderRadius: \\\\\\\\\\\\\\\"100%\\\\\\\\\\\\\\\",\\\\\\\\n              height: \\\\\\\\\\\\\\\"20px\\\\\\\\\\\\\\\",\\\\\\\\n              width: \\\\\\\\\\\\\\\"20px\\\\\\\\\\\\\\\",\\\\\\\\n            }}\\\\\\\\n            onClick={() => State.update({ seekingFunding: true })}\\\\\\\\n          />\\\\\\\\n          Yes\\\\\\\\n        </label>\\\\\\\\n      </div>\\\\\\\\n      <div class=\\\\\\\\\\\\\\\"form-check form-check-inline\\\\\\\\\\\\\\\">\\\\\\\\n        <label class=\\\\\\\\\\\\\\\"form-check-label\\\\\\\\\\\\\\\">\\\\\\\\n          <button\\\\\\\\n            className=\\\\\\\\\\\\\\\"btn btn-light p-0\\\\\\\\\\\\\\\"\\\\\\\\n            style={{\\\\\\\\n              backgroundColor: !state.seekingFunding ? \\\\\\\\\\\\\\\"#0C7283\\\\\\\\\\\\\\\" : \\\\\\\\\\\\\\\"inherit\\\\\\\\\\\\\\\",\\\\\\\\n              color: \\\\\\\\\\\\\\\"#f3f3f3\\\\\\\\\\\\\\\",\\\\\\\\n              border: \\\\\\\\\\\\\\\"solid #D9D9D9\\\\\\\\\\\\\\\",\\\\\\\\n              borderRadius: \\\\\\\\\\\\\\\"100%\\\\\\\\\\\\\\\",\\\\\\\\n              height: \\\\\\\\\\\\\\\"20px\\\\\\\\\\\\\\\",\\\\\\\\n              width: \\\\\\\\\\\\\\\"20px\\\\\\\\\\\\\\\",\\\\\\\\n            }}\\\\\\\\n            onClick={() => State.update({ seekingFunding: false })}\\\\\\\\n          />\\\\\\\\n          No\\\\\\\\n        </label>\\\\\\\\n      </div>\\\\\\\\n    </div>\\\\\\\\n  </>\\\\\\\\n);\\\\\\\\n\\\\\\\\nconst fundraisingDiv = (\\\\\\\\n  <div class=\\\\\\\\\\\\\\\"d-flex flex-column mb-2\\\\\\\\\\\\\\\">\\\\\\\\n    <div className=\\\\\\\\\\\\\\\"col-lg-6 mb-2\\\\\\\\\\\\\\\">\\\\\\\\n      Currency\\\\\\\\n      <select\\\\\\\\n        onChange={(event) => State.update({ token: event.target.value })}\\\\\\\\n        class=\\\\\\\\\\\\\\\"form-select\\\\\\\\\\\\\\\"\\\\\\\\n        aria-label=\\\\\\\\\\\\\\\"Default select example\\\\\\\\\\\\\\\"\\\\\\\\n        value={state.token}\\\\\\\\n      >\\\\\\\\n        <option value=\\\\\\\\\\\\\\\"USDT\\\\\\\\\\\\\\\">USDT</option>\\\\\\\\n        <option value=\\\\\\\\\\\\\\\"NEAR\\\\\\\\\\\\\\\">NEAR</option>\\\\\\\\n        <option value=\\\\\\\\\\\\\\\"USDC\\\\\\\\\\\\\\\">USDC</option>\\\\\\\\n      </select>\\\\\\\\n    </div>\\\\\\\\n    <div className=\\\\\\\\\\\\\\\"col-lg-6 mb-2\\\\\\\\\\\\\\\">\\\\\\\\n      Requested amount\\\\\\\\n      <span class=\\\\\\\\\\\\\\\"text-muted fw-normal\\\\\\\\\\\\\\\">(Numbers Only)</span>\\\\\\\\n      <input\\\\\\\\n        type=\\\\\\\\\\\\\\\"number\\\\\\\\\\\\\\\"\\\\\\\\n        value={parseInt(state.amount) > 0 ? state.amount : \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\"}\\\\\\\\n        min={0}\\\\\\\\n        onChange={(event) => {\\\\\\\\n          State.update({\\\\\\\\n            amount: Number(\\\\\\\\n              event.target.value.toString().replace(/e/g, \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\")\\\\\\\\n            ).toString(),\\\\\\\\n          });\\\\\\\\n        }}\\\\\\\\n      />\\\\\\\\n    </div>\\\\\\\\n    <div className=\\\\\\\\\\\\\\\"col-lg-6 mb-2\\\\\\\\\\\\\\\">\\\\\\\\n      <p class=\\\\\\\\\\\\\\\"mb-1\\\\\\\\\\\\\\\">\\\\\\\\n        Requested sponsor\\\\\\\\n        <span class=\\\\\\\\\\\\\\\"text-muted fw-normal\\\\\\\\\\\\\\\">(Optional)</span>\\\\\\\\n      </p>\\\\\\\\n      <p style={{ fontSize: \\\\\\\\\\\\\\\"13px\\\\\\\\\\\\\\\" }} class=\\\\\\\\\\\\\\\"m-0 text-muted fw-light\\\\\\\\\\\\\\\">\\\\\\\\n        If you are requesting funding from a specific sponsor, please enter\\\\\\\\n        their username.\\\\\\\\n      </p>\\\\\\\\n      <div class=\\\\\\\\\\\\\\\"input-group flex-nowrap\\\\\\\\\\\\\\\">\\\\\\\\n        <span class=\\\\\\\\\\\\\\\"input-group-text\\\\\\\\\\\\\\\" id=\\\\\\\\\\\\\\\"addon-wrapping\\\\\\\\\\\\\\\">\\\\\\\\n          @\\\\\\\\n        </span>\\\\\\\\n        <input\\\\\\\\n          type=\\\\\\\\\\\\\\\"text\\\\\\\\\\\\\\\"\\\\\\\\n          class=\\\\\\\\\\\\\\\"form-control\\\\\\\\\\\\\\\"\\\\\\\\n          placeholder=\\\\\\\\\\\\\\\"Enter username\\\\\\\\\\\\\\\"\\\\\\\\n          value={state.supervisor}\\\\\\\\n          onChange={(event) => State.update({ supervisor: event.target.value })}\\\\\\\\n        />\\\\\\\\n      </div>\\\\\\\\n    </div>\\\\\\\\n  </div>\\\\\\\\n);\\\\\\\\n\\\\\\\\nfunction generateDescription(text, amount, token, supervisor, seekingFunding) {\\\\\\\\n  const fundingText =\\\\\\\\n    amount > 0 && token ? `###### Requested amount: ${amount} ${token}\\\\\\\\\\\\\\\\n` : \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\";\\\\\\\\n  const supervisorText = supervisor\\\\\\\\n    ? `###### Requested sponsor: @${supervisor}\\\\\\\\\\\\\\\\n`\\\\\\\\n    : \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\";\\\\\\\\n  return seekingFunding ? `${fundingText}${supervisorText}${text}` : text;\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst [tab, setTab] = useState(\\\\\\\\\\\\\\\"editor\\\\\\\\\\\\\\\");\\\\\\\\n\\\\\\\\nconst renamedPostType = postType == \\\\\\\\\\\\\\\"Submission\\\\\\\\\\\\\\\" ? \\\\\\\\\\\\\\\"Solution\\\\\\\\\\\\\\\" : postType;\\\\\\\\n// Below there is a weird code with fields.includes(\\\\\\\\\\\\\\\"githubLink\\\\\\\\\\\\\\\") ternary operator.\\\\\\\\n// This is to hack around rendering bug of near.social.\\\\\\\\nreturn (\\\\\\\\n  <div className=\\\\\\\\\\\\\\\"card\\\\\\\\\\\\\\\">\\\\\\\\n    <div className=\\\\\\\\\\\\\\\"card-header\\\\\\\\\\\\\\\">\\\\\\\\n      <div>\\\\\\\\n        <ul class=\\\\\\\\\\\\\\\"nav nav-tabs\\\\\\\\\\\\\\\">\\\\\\\\n          <li class=\\\\\\\\\\\\\\\"nav-item\\\\\\\\\\\\\\\">\\\\\\\\n            <button\\\\\\\\n              class={`nav-link ${tab === \\\\\\\\\\\\\\\"editor\\\\\\\\\\\\\\\" ? \\\\\\\\\\\\\\\"active\\\\\\\\\\\\\\\" : \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\"}`}\\\\\\\\n              onClick={() => setTab(\\\\\\\\\\\\\\\"editor\\\\\\\\\\\\\\\")}\\\\\\\\n            >\\\\\\\\n              Editor\\\\\\\\n            </button>\\\\\\\\n          </li>\\\\\\\\n          <li class=\\\\\\\\\\\\\\\"nav-item\\\\\\\\\\\\\\\">\\\\\\\\n            <button\\\\\\\\n              class={`nav-link ${tab === \\\\\\\\\\\\\\\"preview\\\\\\\\\\\\\\\" ? \\\\\\\\\\\\\\\"active\\\\\\\\\\\\\\\" : \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\"}`}\\\\\\\\n              onClick={() => setTab(\\\\\\\\\\\\\\\"preview\\\\\\\\\\\\\\\")}\\\\\\\\n            >\\\\\\\\n              Preview\\\\\\\\n            </button>\\\\\\\\n          </li>\\\\\\\\n        </ul>\\\\\\\\n      </div>\\\\\\\\n      {tab === \\\\\\\\\\\\\\\"editor\\\\\\\\\\\\\\\" && (\\\\\\\\n        <div className=\\\\\\\\\\\\\\\"my-3\\\\\\\\\\\\\\\">\\\\\\\\n          {mode} {renamedPostType}\\\\\\\\n        </div>\\\\\\\\n      )}\\\\\\\\n      {tab === \\\\\\\\\\\\\\\"preview\\\\\\\\\\\\\\\" && <div className=\\\\\\\\\\\\\\\"my-3\\\\\\\\\\\\\\\">Post Preview</div>}\\\\\\\\n    </div>\\\\\\\\n\\\\\\\\n    {tab === \\\\\\\\\\\\\\\"editor\\\\\\\\\\\\\\\" && (\\\\\\\\n      <div class=\\\\\\\\\\\\\\\"card-body\\\\\\\\\\\\\\\">\\\\\\\\n        {state.warning && (\\\\\\\\n          <div\\\\\\\\n            class=\\\\\\\\\\\\\\\"alert alert-warning alert-dismissible fade show\\\\\\\\\\\\\\\"\\\\\\\\n            role=\\\\\\\\\\\\\\\"alert\\\\\\\\\\\\\\\"\\\\\\\\n          >\\\\\\\\n            {state.warning}\\\\\\\\n            <button\\\\\\\\n              type=\\\\\\\\\\\\\\\"button\\\\\\\\\\\\\\\"\\\\\\\\n              class=\\\\\\\\\\\\\\\"btn-close\\\\\\\\\\\\\\\"\\\\\\\\n              data-bs-dismiss=\\\\\\\\\\\\\\\"alert\\\\\\\\\\\\\\\"\\\\\\\\n              aria-label=\\\\\\\\\\\\\\\"Close\\\\\\\\\\\\\\\"\\\\\\\\n              onClick={() => State.update({ warning: \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\" })}\\\\\\\\n            ></button>\\\\\\\\n          </div>\\\\\\\\n        )}\\\\\\\\n        {/* This statement around the githubLinkDiv creates a weird render bug\\\\\\\\n      where the title renders extra on state change. */}\\\\\\\\n        {fields.includes(\\\\\\\\\\\\\\\"githubLink\\\\\\\\\\\\\\\") ? (\\\\\\\\n          <div className=\\\\\\\\\\\\\\\"row\\\\\\\\\\\\\\\">\\\\\\\\n            {fields.includes(\\\\\\\\\\\\\\\"githubLink\\\\\\\\\\\\\\\") && githubLinkDiv}\\\\\\\\n            {labelEditor}\\\\\\\\n            {fields.includes(\\\\\\\\\\\\\\\"name\\\\\\\\\\\\\\\") && nameDiv}\\\\\\\\n            {fields.includes(\\\\\\\\\\\\\\\"description\\\\\\\\\\\\\\\") && callDescriptionDiv()}\\\\\\\\n          </div>\\\\\\\\n        ) : (\\\\\\\\n          <div className=\\\\\\\\\\\\\\\"row\\\\\\\\\\\\\\\">\\\\\\\\n            {labelEditor}\\\\\\\\n            {fields.includes(\\\\\\\\\\\\\\\"name\\\\\\\\\\\\\\\") && nameDiv}\\\\\\\\n            {fields.includes(\\\\\\\\\\\\\\\"amount\\\\\\\\\\\\\\\") && amountDiv}\\\\\\\\n            {fields.includes(\\\\\\\\\\\\\\\"sponsorship_token\\\\\\\\\\\\\\\") && tokenDiv}\\\\\\\\n            {fields.includes(\\\\\\\\\\\\\\\"supervisor\\\\\\\\\\\\\\\") && supervisorDiv}\\\\\\\\n            {fields.includes(\\\\\\\\\\\\\\\"description\\\\\\\\\\\\\\\") && callDescriptionDiv()}\\\\\\\\n            {fields.includes(\\\\\\\\\\\\\\\"fund_raising\\\\\\\\\\\\\\\") && isFundraisingDiv}\\\\\\\\n            {state.seekingFunding &&\\\\\\\\n              fields.includes(\\\\\\\\\\\\\\\"fund_raising\\\\\\\\\\\\\\\") &&\\\\\\\\n              fundraisingDiv}\\\\\\\\n          </div>\\\\\\\\n        )}\\\\\\\\n        <button\\\\\\\\n          style={{\\\\\\\\n            width: \\\\\\\\\\\\\\\"7rem\\\\\\\\\\\\\\\",\\\\\\\\n            backgroundColor: \\\\\\\\\\\\\\\"#0C7283\\\\\\\\\\\\\\\",\\\\\\\\n            color: \\\\\\\\\\\\\\\"#f3f3f3\\\\\\\\\\\\\\\",\\\\\\\\n          }}\\\\\\\\n          disabled={state.seekingFunding && (!state.amount || state.amount < 1)}\\\\\\\\n          className=\\\\\\\\\\\\\\\"btn btn-light mb-2 p-3\\\\\\\\\\\\\\\"\\\\\\\\n          onClick={onSubmit}\\\\\\\\n        >\\\\\\\\n          Submit\\\\\\\\n        </button>\\\\\\\\n        <button\\\\\\\\n          style={{\\\\\\\\n            width: \\\\\\\\\\\\\\\"7rem\\\\\\\\\\\\\\\",\\\\\\\\n            backgroundColor: \\\\\\\\\\\\\\\"#fff\\\\\\\\\\\\\\\",\\\\\\\\n            color: \\\\\\\\\\\\\\\"#000\\\\\\\\\\\\\\\",\\\\\\\\n          }}\\\\\\\\n          className=\\\\\\\\\\\\\\\"btn btn-light mb-2 p-3\\\\\\\\\\\\\\\"\\\\\\\\n          onClick={toggleEditor}\\\\\\\\n        >\\\\\\\\n          Cancel\\\\\\\\n        </button>\\\\\\\\n        {disclaimer}\\\\\\\\n      </div>\\\\\\\\n    )}\\\\\\\\n    {tab === \\\\\\\\\\\\\\\"preview\\\\\\\\\\\\\\\" && (\\\\\\\\n      <div class=\\\\\\\\\\\\\\\"card-body\\\\\\\\\\\\\\\">\\\\\\\\n        <Widget\\\\\\\\n          src=\\\\\\\\\\\\\\\"devhub.near/widget/devhub.entity.post.Post\\\\\\\\\\\\\\\"\\\\\\\\n          props={{\\\\\\\\n            isPreview: true,\\\\\\\\n            id: 0, // irrelevant\\\\\\\\n            post: {\\\\\\\\n              author_id: state.author_id,\\\\\\\\n              likes: [],\\\\\\\\n              snapshot: {\\\\\\\\n                editor_id: state.editor_id,\\\\\\\\n                labels: state.labelStrings,\\\\\\\\n                post_type: postType,\\\\\\\\n                name: state.name,\\\\\\\\n                description:\\\\\\\\n                  postType == \\\\\\\\\\\\\\\"Solution\\\\\\\\\\\\\\\"\\\\\\\\n                    ? generateDescription(\\\\\\\\n                        state.description,\\\\\\\\n                        state.amount,\\\\\\\\n                        state.token,\\\\\\\\n                        state.supervisor,\\\\\\\\n                        state.seekingFunding\\\\\\\\n                      )\\\\\\\\n                    : state.description,\\\\\\\\n                amount: state.amount,\\\\\\\\n                sponsorship_token: state.token,\\\\\\\\n                supervisor: state.supervisor,\\\\\\\\n                github_link: state.githubLink,\\\\\\\\n              },\\\\\\\\n            },\\\\\\\\n          }}\\\\\\\\n        />\\\\\\\\n      </div>\\\\\\\\n    )}\\\\\\\\n  </div>\\\\\\\\n);\\\\\\\\n\"}}}}}"
      }
    ],
    "actions_agg": {
      "deposit": 0
    },
    "outcomes": {
      "status": true
    },
    "outcomes_agg": {
      "transaction_fee": 2.0743331417075e+21
    }
  },
  {
    "id": "1714480985",
    "receipt_id": "BVyiaPWRskuwWEa2rvYAp3dwcioDyfwxSEGKqti7Ge7A",
    "predecessor_account_id": "system",
    "receiver_account_id": "devhub.near",
    "receipt_kind": "ACTION",
    "receipt_block": {
      "block_hash": "2FUtCmtYjshwFYzEaEWHJpdpn4zy5AJEvw2acPeYsABz",
      "block_height": 107853330,
      "block_timestamp": 1702483429658457900
    },
    "receipt_outcome": {
      "gas_burnt": 223182562500,
      "tokens_burnt": 0,
      "executor_account_id": "devhub.near",
      "status": true
    },
    "transaction_hash": "HTPhsB79ABCmZcRZZs5KKRivocdQ7GrL7DuSMY7WiorY",
    "included_in_block_hash": "2gYqmY9y7AFr83R1VgEWPA7ehW2C2vFAy7hiyzejvJcc",
    "block_timestamp": "1702483427205333645",
    "block": {
      "block_height": 107853328
    },
    "receipt_conversion_tokens_burnt": "257915733982600000000",
    "actions": [
      {
        "action": "TRANSFER",
        "method": null,
        "deposit": 1.8730771174473332e+23,
        "fee": 0,
        "args": null
      }
    ],
    "actions_agg": {
      "deposit": 0
    },
    "outcomes": {
      "status": true
    },
    "outcomes_agg": {
      "transaction_fee": 2.0743331417075e+21
    }
  },
  {
    "id": "1762584104",
    "receipt_id": "DK781vJPPECR8RjZrcBxNcyf1M4KHjatECbMEQiKUFMP",
    "predecessor_account_id": "devhub.near",
    "receiver_account_id": "social.near",
    "receipt_kind": "ACTION",
    "receipt_block": {
      "block_hash": "9uDSJpdqoB5TdLUirFtRGaXQzkAu1bmrvRQpSxXtrKVw",
      "block_height": 108254332,
      "block_timestamp": 1702907022173637600
    },
    "receipt_outcome": {
      "gas_burnt": 12375805267013,
      "tokens_burnt": 1.2375805267013e+21,
      "executor_account_id": "social.near",
      "status": true
    },
    "transaction_hash": "DN1z5XTEtZAKhELRzaa1JAQJ7hUpwMuGukHLs715XHch",
    "included_in_block_hash": "Ep7bagdbJq8LBnYvcyw5huTQvgktn22dwf8xbXBppqge",
    "block_timestamp": "1702907021359461349",
    "block": {
      "block_height": 108254331
    },
    "receipt_conversion_tokens_burnt": "250168446266000000000",
    "actions": [
      {
        "action": "FUNCTION_CALL",
        "method": "set",
        "deposit": 0,
        "fee": 1.2375805267013e+21,
        "args": "{\"data\": {\"devhub.near\": {\"widget\": {\"devhub.page.create\": {\"\": \"State.init({\\\\\\\\n  seekingFunding: false,\\\\\\\\n  author_id: context.accountId,\\\\\\\\n  // Should be a list of objects with field \\\\\\\\\\\\\\\"name\\\\\\\\\\\\\\\".\\\\\\\\n  labels: [],\\\\\\\\n  // Should be a list of labels as strings.\\\\\\\\n  // Both of the label structures should be modified together.\\\\\\\\n  labelStrings: [],\\\\\\\\n  postType: \\\\\\\\\\\\\\\"Idea\\\\\\\\\\\\\\\",\\\\\\\\n  name: props.name ?? \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\",\\\\\\\\n  description: props.description ?? \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\",\\\\\\\\n  amount: props.amount ?? \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\",\\\\\\\\n  token: props.token ?? \\\\\\\\\\\\\\\"USDT\\\\\\\\\\\\\\\",\\\\\\\\n  supervisor: props.supervisor ?? \\\\\\\\\\\\\\\"neardevdao.near\\\\\\\\\\\\\\\",\\\\\\\\n  githubLink: props.githubLink ?? \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\",\\\\\\\\n  warning: \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\",\\\\\\\\n  waitForDraftStateRestore: true,\\\\\\\\n  mentionInput: \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\", // text next to @ tag\\\\\\\\n  mentionsArray: [], // all the mentions in the description\\\\\\\\n});\\\\\\\\n\\\\\\\\n/* INCLUDE: \\\\\\\\\\\\\\\"core/lib/autocomplete\\\\\\\\\\\\\\\" */\\\\\\\\n\\\\\\\\nconst autocompleteEnabled = true;\\\\\\\\n\\\\\\\\nconst AutoComplete = styled.div`\\\\\\\\n  z-index: 5;\\\\\\\\n\\\\\\\\n  > div > div {\\\\\\\\n    padding: calc(var(--padding) / 2);\\\\\\\\n  }\\\\\\\\n`;\\\\\\\\n\\\\\\\\nfunction textareaInputHandler(value) {\\\\\\\\n  const words = value.split(/\\\\\\\\\\\\\\\\s+/);\\\\\\\\n  const allMentiones = words\\\\\\\\n    .filter((word) => word.startsWith(\\\\\\\\\\\\\\\"@\\\\\\\\\\\\\\\"))\\\\\\\\n    .map((mention) => mention.slice(1));\\\\\\\\n  const newMentiones = allMentiones.filter(\\\\\\\\n    (item) => !state.mentionsArray.includes(item)\\\\\\\\n  );\\\\\\\\n\\\\\\\\n  State.update((lastKnownState) => ({\\\\\\\\n    ...lastKnownState,\\\\\\\\n    text: value,\\\\\\\\n    showAccountAutocomplete: newMentiones?.length > 0,\\\\\\\\n    mentionsArray: allMentiones,\\\\\\\\n    mentionInput: newMentiones?.[0] ?? \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\",\\\\\\\\n  }));\\\\\\\\n}\\\\\\\\n\\\\\\\\nfunction autoCompleteAccountId(id) {\\\\\\\\n  // to make sure we update the @ at correct index\\\\\\\\n  let currentIndex = 0;\\\\\\\\n  const updatedDescription = state.description.replace(\\\\\\\\n    /(?:^|\\\\\\\\\\\\\\\\s)(@[^\\\\\\\\\\\\\\\\s]*)/g,\\\\\\\\n    (match) => {\\\\\\\\n      if (currentIndex === state.mentionsArray.indexOf(state.mentionInput)) {\\\\\\\\n        currentIndex++;\\\\\\\\n        return ` @${id}`;\\\\\\\\n      } else {\\\\\\\\n        currentIndex++;\\\\\\\\n        return match;\\\\\\\\n      }\\\\\\\\n    }\\\\\\\\n  );\\\\\\\\n\\\\\\\\n  State.update((lastKnownState) => ({\\\\\\\\n    ...lastKnownState,\\\\\\\\n    handler: \\\\\\\\\\\\\\\"autocompleteSelected\\\\\\\\\\\\\\\",\\\\\\\\n    description: updatedDescription,\\\\\\\\n    showAccountAutocomplete: false,\\\\\\\\n  }));\\\\\\\\n}\\\\\\\\n/* END_INCLUDE: \\\\\\\\\\\\\\\"core/lib/autocomplete\\\\\\\\\\\\\\\" */\\\\\\\\n\\\\\\\\nconst { href } = VM.require(\\\\\\\\\\\\\\\"devhub.near/widget/core.lib.url\\\\\\\\\\\\\\\");\\\\\\\\n\\\\\\\\nconst { DRAFT_STATE_STORAGE_KEY, draftState, onDraftStateChange } = VM.require(\\\\\\\\n  \\\\\\\\\\\\\\\"devhub.near/widget/devhub.entity.post.draft\\\\\\\\\\\\\\\"\\\\\\\\n);\\\\\\\\n\\\\\\\\nif (!href) {\\\\\\\\n  return <p>Loading modules...</p>;\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst parentId = props.parentId ?? null;\\\\\\\\nconst postId = props.postId ?? null;\\\\\\\\nconst mode = props.mode ?? \\\\\\\\\\\\\\\"Create\\\\\\\\\\\\\\\";\\\\\\\\n\\\\\\\\nconst referralLabels = props.referral ? [`referral:${props.referral}`] : [];\\\\\\\\nconst labelStrings = (props.labels ? props.labels.split(\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\") : []).concat(\\\\\\\\n  referralLabels\\\\\\\\n);\\\\\\\\nconst labels = labelStrings.map((s) => {\\\\\\\\n  return { name: s };\\\\\\\\n});\\\\\\\\n\\\\\\\\nState.update({\\\\\\\\n  labels,\\\\\\\\n});\\\\\\\\n\\\\\\\\nif (state.waitForDraftStateRestore) {\\\\\\\\n  const draftstatestring = Storage.privateGet(DRAFT_STATE_STORAGE_KEY);\\\\\\\\n  if (draftstatestring != null) {\\\\\\\\n    if (props.transactionHashes) {\\\\\\\\n      State.update({ waitForDraftStateRestore: false });\\\\\\\\n      Storage.privateSet(DRAFT_STATE_STORAGE_KEY, undefined);\\\\\\\\n    } else {\\\\\\\\n      try {\\\\\\\\n        const draftstate = JSON.parse(draftstatestring);\\\\\\\\n        State.update(draftstate);\\\\\\\\n      } catch (e) {\\\\\\\\n        console.error(\\\\\\\\\\\\\\\"error restoring draft\\\\\\\\\\\\\\\", draftstatestring);\\\\\\\\n      }\\\\\\\\n    }\\\\\\\\n    State.update({ waitForDraftStateRestore: false });\\\\\\\\n  }\\\\\\\\n}\\\\\\\\n\\\\\\\\n// This must be outside onClick, because Near.view returns null at first, and when the view call finished, it returns true/false.\\\\\\\\n// If checking this inside onClick, it will give `null` and we cannot tell the result is true or false.\\\\\\\\nlet grantNotify = Near.view(\\\\\\\\\\\\\\\"social.near\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"is_write_permission_granted\\\\\\\\\\\\\\\", {\\\\\\\\n  predecessor_id: \\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\",\\\\\\\\n  key: context.accountId + \\\\\\\\\\\\\\\"/index/notify\\\\\\\\\\\\\\\",\\\\\\\\n});\\\\\\\\nif (grantNotify === null) {\\\\\\\\n  return;\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst onSubmit = () => {\\\\\\\\n  Storage.privateSet(DRAFT_STATE_STORAGE_KEY, JSON.stringify(state));\\\\\\\\n\\\\\\\\n  let labels = state.labelStrings;\\\\\\\\n\\\\\\\\n  let body = {\\\\\\\\n    name: state.name,\\\\\\\\n    description: generateDescription(\\\\\\\\n      state.description,\\\\\\\\n      state.amount,\\\\\\\\n      state.token,\\\\\\\\n      state.supervisor,\\\\\\\\n      state.seekingFunding\\\\\\\\n    ),\\\\\\\\n  };\\\\\\\\n\\\\\\\\n  if (state.postType === \\\\\\\\\\\\\\\"Solution\\\\\\\\\\\\\\\") {\\\\\\\\n    body = {\\\\\\\\n      ...body,\\\\\\\\n      post_type: \\\\\\\\\\\\\\\"Solution\\\\\\\\\\\\\\\",\\\\\\\\n      solution_version: \\\\\\\\\\\\\\\"V1\\\\\\\\\\\\\\\",\\\\\\\\n    };\\\\\\\\n  } else {\\\\\\\\n    // Idea\\\\\\\\n    body = {\\\\\\\\n      ...body,\\\\\\\\n      post_type: \\\\\\\\\\\\\\\"Idea\\\\\\\\\\\\\\\",\\\\\\\\n      idea_version: \\\\\\\\\\\\\\\"V1\\\\\\\\\\\\\\\",\\\\\\\\n    };\\\\\\\\n  }\\\\\\\\n\\\\\\\\n  if (!context.accountId) return;\\\\\\\\n\\\\\\\\n  let txn = [];\\\\\\\\n  if (mode == \\\\\\\\\\\\\\\"Create\\\\\\\\\\\\\\\") {\\\\\\\\n    txn.push({\\\\\\\\n      contractName: \\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\",\\\\\\\\n      methodName: \\\\\\\\\\\\\\\"add_post\\\\\\\\\\\\\\\",\\\\\\\\n      args: {\\\\\\\\n        parent_id: parentId,\\\\\\\\n        labels,\\\\\\\\n        body: body,\\\\\\\\n      },\\\\\\\\n      gas: Big(10).pow(14),\\\\\\\\n    });\\\\\\\\n  } else if (mode == \\\\\\\\\\\\\\\"Edit\\\\\\\\\\\\\\\") {\\\\\\\\n    txn.push({\\\\\\\\n      contractName: \\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\",\\\\\\\\n      methodName: \\\\\\\\\\\\\\\"edit_post\\\\\\\\\\\\\\\",\\\\\\\\n      args: {\\\\\\\\n        id: postId,\\\\\\\\n        labels,\\\\\\\\n        body: body,\\\\\\\\n      },\\\\\\\\n      gas: Big(10).pow(14),\\\\\\\\n    });\\\\\\\\n  }\\\\\\\\n  if (mode == \\\\\\\\\\\\\\\"Create\\\\\\\\\\\\\\\" || mode == \\\\\\\\\\\\\\\"Edit\\\\\\\\\\\\\\\") {\\\\\\\\n    if (grantNotify === false) {\\\\\\\\n      txn.unshift({\\\\\\\\n        contractName: \\\\\\\\\\\\\\\"social.near\\\\\\\\\\\\\\\",\\\\\\\\n        methodName: \\\\\\\\\\\\\\\"grant_write_permission\\\\\\\\\\\\\\\",\\\\\\\\n        args: {\\\\\\\\n          predecessor_id: \\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\",\\\\\\\\n          keys: [context.accountId + \\\\\\\\\\\\\\\"/index/notify\\\\\\\\\\\\\\\"],\\\\\\\\n        },\\\\\\\\n        gas: Big(10).pow(14),\\\\\\\\n        deposit: Big(10).pow(22),\\\\\\\\n      });\\\\\\\\n    }\\\\\\\\n    Near.call(txn);\\\\\\\\n  }\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst onIdeaClick = () => {\\\\\\\\n  State.update({ postType: \\\\\\\\\\\\\\\"Idea\\\\\\\\\\\\\\\", seekingFunding: false });\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst onSolutionClick = () => {\\\\\\\\n  State.update({ postType: \\\\\\\\\\\\\\\"Solution\\\\\\\\\\\\\\\" });\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst normalizeLabel = (label) =>\\\\\\\\n  label\\\\\\\\n    .replaceAll(/[- \\\\\\\\\\\\\\\\.]/g, \\\\\\\\\\\\\\\"_\\\\\\\\\\\\\\\")\\\\\\\\n    .replaceAll(/[^\\\\\\\\\\\\\\\\w]+/g, \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\")\\\\\\\\n    .replaceAll(/_+/g, \\\\\\\\\\\\\\\"-\\\\\\\\\\\\\\\")\\\\\\\\n    .replace(/^-+/, \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\")\\\\\\\\n    .replace(/-+$/, \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\")\\\\\\\\n    .toLowerCase()\\\\\\\\n    .trim(\\\\\\\\\\\\\\\"-\\\\\\\\\\\\\\\");\\\\\\\\n\\\\\\\\nconst checkLabel = (label) => {\\\\\\\\n  Near.asyncView(\\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"is_allowed_to_use_labels\\\\\\\\\\\\\\\", {\\\\\\\\n    editor: context.accountId,\\\\\\\\n    labels: [label],\\\\\\\\n  }).then((allowed) => {\\\\\\\\n    if (allowed) {\\\\\\\\n      State.update({ warning: \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\" });\\\\\\\\n    } else {\\\\\\\\n      State.update({\\\\\\\\n        warning:\\\\\\\\n          \\\\\\\\\\\\'The label \\\\\\\\\\\\\\\"\\\\\\\\\\\\' +\\\\\\\\n          label +\\\\\\\\n          \\\\\\\\\\\\'\\\\\\\\\\\\\\\" is protected and can only be added by moderators\\\\\\\\\\\\',\\\\\\\\n      });\\\\\\\\n      return;\\\\\\\\n    }\\\\\\\\n  });\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst setLabels = (labels) => {\\\\\\\\n  labels = labels.map((o) => {\\\\\\\\n    o.name = normalizeLabel(o.name);\\\\\\\\n    return o;\\\\\\\\n  });\\\\\\\\n  if (labels.length < state.labels.length) {\\\\\\\\n    let oldLabels = new Set(state.labels.map((label) => label.name));\\\\\\\\n    for (let label of labels) {\\\\\\\\n      oldLabels.delete(label.name);\\\\\\\\n    }\\\\\\\\n    let removed = oldLabels.values().next().value;\\\\\\\\n    Near.asyncView(\\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"is_allowed_to_use_labels\\\\\\\\\\\\\\\", {\\\\\\\\n      editor: context.accountId,\\\\\\\\n      labels: [removed],\\\\\\\\n    }).then((allowed) => {\\\\\\\\n      if (allowed) {\\\\\\\\n        let labelStrings = labels.map(({ name }) => name);\\\\\\\\n        State.update({ labels, labelStrings });\\\\\\\\n      } else {\\\\\\\\n        State.update({\\\\\\\\n          warning:\\\\\\\\n            \\\\\\\\\\\\'The label \\\\\\\\\\\\\\\"\\\\\\\\\\\\' +\\\\\\\\n            removed +\\\\\\\\n            \\\\\\\\\\\\'\\\\\\\\\\\\\\\" is protected and can only be updated by moderators\\\\\\\\\\\\',\\\\\\\\n        });\\\\\\\\n        return;\\\\\\\\n      }\\\\\\\\n    });\\\\\\\\n  } else {\\\\\\\\n    let labelStrings = labels.map((o) => {\\\\\\\\n      return o.name;\\\\\\\\n    });\\\\\\\\n    State.update({ labels, labelStrings });\\\\\\\\n  }\\\\\\\\n};\\\\\\\\nconst existingLabelStrings =\\\\\\\\n  Near.view(\\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"get_all_allowed_labels\\\\\\\\\\\\\\\", {\\\\\\\\n    editor: context.accountId,\\\\\\\\n  }) ?? [];\\\\\\\\nconst existingLabelSet = new Set(existingLabelStrings);\\\\\\\\nconst existingLabels = existingLabelStrings\\\\\\\\n  .filter((it) => it !== \\\\\\\\\\\\\\\"blog\\\\\\\\\\\\\\\") // remove blog label so users cannot publish blogs from feed\\\\\\\\n  .map((s) => {\\\\\\\\n    return { name: s };\\\\\\\\n  });\\\\\\\\n\\\\\\\\nconst labelEditor = (\\\\\\\\n  <div className=\\\\\\\\\\\\\\\"col-lg-12 mb-2\\\\\\\\\\\\\\\">\\\\\\\\n    <p className=\\\\\\\\\\\\\\\"fs-6 fw-bold mb-1\\\\\\\\\\\\\\\">Labels</p>\\\\\\\\n    <Typeahead\\\\\\\\n      multiple\\\\\\\\n      labelKey=\\\\\\\\\\\\\\\"name\\\\\\\\\\\\\\\"\\\\\\\\n      onInputChange={checkLabel}\\\\\\\\n      onChange={setLabels}\\\\\\\\n      options={existingLabels}\\\\\\\\n      placeholder=\\\\\\\\\\\\\\\"near.social, widget, NEP, standard, protocol, tool\\\\\\\\\\\\\\\"\\\\\\\\n      selected={state.labels}\\\\\\\\n      positionFixed\\\\\\\\n      allowNew={(results, props) => {\\\\\\\\n        return (\\\\\\\\n          !existingLabelSet.has(props.text) &&\\\\\\\\n          props.text.toLowerCase() !== \\\\\\\\\\\\\\\"blog\\\\\\\\\\\\\\\" && // dont allow adding \\\\\\\\\\\\\\\"Blog\\\\\\\\\\\\\\\"\\\\\\\\n          props.selected.filter((selected) => selected.name === props.text)\\\\\\\\n            .length == 0 &&\\\\\\\\n          Near.view(\\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"is_allowed_to_use_labels\\\\\\\\\\\\\\\", {\\\\\\\\n            editor: context.accountId,\\\\\\\\n            labels: [props.text],\\\\\\\\n          })\\\\\\\\n        );\\\\\\\\n      }}\\\\\\\\n    />\\\\\\\\n  </div>\\\\\\\\n);\\\\\\\\n\\\\\\\\nconst nameDiv = (\\\\\\\\n  <div className=\\\\\\\\\\\\\\\"col-lg-6 mb-2\\\\\\\\\\\\\\\">\\\\\\\\n    <p className=\\\\\\\\\\\\\\\"fs-6 fw-bold mb-1\\\\\\\\\\\\\\\">Title</p>\\\\\\\\n    <input\\\\\\\\n      type=\\\\\\\\\\\\\\\"text\\\\\\\\\\\\\\\"\\\\\\\\n      value={state.name}\\\\\\\\n      onChange={(event) => State.update({ name: event.target.value })}\\\\\\\\n    />\\\\\\\\n  </div>\\\\\\\\n);\\\\\\\\n\\\\\\\\nconst descriptionDiv = (\\\\\\\\n  <div className=\\\\\\\\\\\\\\\"col-lg-12 mb-2\\\\\\\\\\\\\\\">\\\\\\\\n    <p className=\\\\\\\\\\\\\\\"fs-6 fw-bold mb-1\\\\\\\\\\\\\\\">Description</p>\\\\\\\\n    <Widget\\\\\\\\n      src=\\\\\\\\\\\\\\\"devhub.near/widget/devhub.components.molecule.MarkdownEditor\\\\\\\\\\\\\\\"\\\\\\\\n      props={{\\\\\\\\n        data: { handler: state.handler, content: state.description },\\\\\\\\n        onChange: (content) => {\\\\\\\\n          State.update({ description: content, handler: \\\\\\\\\\\\\\\"update\\\\\\\\\\\\\\\" });\\\\\\\\n          textareaInputHandler(content);\\\\\\\\n        },\\\\\\\\n      }}\\\\\\\\n    />\\\\\\\\n    {autocompleteEnabled && state.showAccountAutocomplete && (\\\\\\\\n      <AutoComplete>\\\\\\\\n        <Widget\\\\\\\\n          src=\\\\\\\\\\\\\\\"devhub.near/widget/devhub.components.molecule.AccountAutocomplete\\\\\\\\\\\\\\\"\\\\\\\\n          props={{\\\\\\\\n            term: state.mentionInput,\\\\\\\\n            onSelect: autoCompleteAccountId,\\\\\\\\n            onClose: () => State.update({ showAccountAutocomplete: false }),\\\\\\\\n          }}\\\\\\\\n        />\\\\\\\\n      </AutoComplete>\\\\\\\\n    )}\\\\\\\\n  </div>\\\\\\\\n);\\\\\\\\n\\\\\\\\nconst isFundraisingDiv = (\\\\\\\\n  // This is jank with just btns and not radios. But the radios were glitchy af\\\\\\\\n  <>\\\\\\\\n    <div class=\\\\\\\\\\\\\\\"mb-2\\\\\\\\\\\\\\\">\\\\\\\\n      <p class=\\\\\\\\\\\\\\\"fs-6 fw-bold mb-1\\\\\\\\\\\\\\\">\\\\\\\\n        Are you seeking funding for your solution?\\\\\\\\n        <span class=\\\\\\\\\\\\\\\"text-muted fw-normal\\\\\\\\\\\\\\\">(Optional)</span>\\\\\\\\n      </p>\\\\\\\\n      <div class=\\\\\\\\\\\\\\\"form-check form-check-inline\\\\\\\\\\\\\\\">\\\\\\\\n        <label class=\\\\\\\\\\\\\\\"form-check-label\\\\\\\\\\\\\\\">\\\\\\\\n          <button\\\\\\\\n            className=\\\\\\\\\\\\\\\"btn btn-light p-0\\\\\\\\\\\\\\\"\\\\\\\\n            style={{\\\\\\\\n              backgroundColor: state.seekingFunding ? \\\\\\\\\\\\\\\"#0C7283\\\\\\\\\\\\\\\" : \\\\\\\\\\\\\\\"inherit\\\\\\\\\\\\\\\",\\\\\\\\n              color: \\\\\\\\\\\\\\\"#f3f3f3\\\\\\\\\\\\\\\",\\\\\\\\n              border: \\\\\\\\\\\\\\\"solid #D9D9D9\\\\\\\\\\\\\\\",\\\\\\\\n              borderRadius: \\\\\\\\\\\\\\\"100%\\\\\\\\\\\\\\\",\\\\\\\\n              height: \\\\\\\\\\\\\\\"20px\\\\\\\\\\\\\\\",\\\\\\\\n              width: \\\\\\\\\\\\\\\"20px\\\\\\\\\\\\\\\",\\\\\\\\n            }}\\\\\\\\n            onClick={() => State.update({ seekingFunding: true })}\\\\\\\\n          />\\\\\\\\n          Yes\\\\\\\\n        </label>\\\\\\\\n      </div>\\\\\\\\n      <div class=\\\\\\\\\\\\\\\"form-check form-check-inline\\\\\\\\\\\\\\\">\\\\\\\\n        <label class=\\\\\\\\\\\\\\\"form-check-label\\\\\\\\\\\\\\\">\\\\\\\\n          <button\\\\\\\\n            className=\\\\\\\\\\\\\\\"btn btn-light p-0\\\\\\\\\\\\\\\"\\\\\\\\n            style={{\\\\\\\\n              backgroundColor: !state.seekingFunding ? \\\\\\\\\\\\\\\"#0C7283\\\\\\\\\\\\\\\" : \\\\\\\\\\\\\\\"inherit\\\\\\\\\\\\\\\",\\\\\\\\n              color: \\\\\\\\\\\\\\\"#f3f3f3\\\\\\\\\\\\\\\",\\\\\\\\n              border: \\\\\\\\\\\\\\\"solid #D9D9D9\\\\\\\\\\\\\\\",\\\\\\\\n              borderRadius: \\\\\\\\\\\\\\\"100%\\\\\\\\\\\\\\\",\\\\\\\\n              height: \\\\\\\\\\\\\\\"20px\\\\\\\\\\\\\\\",\\\\\\\\n              width: \\\\\\\\\\\\\\\"20px\\\\\\\\\\\\\\\",\\\\\\\\n            }}\\\\\\\\n            onClick={() => State.update({ seekingFunding: false })}\\\\\\\\n          />\\\\\\\\n          No\\\\\\\\n        </label>\\\\\\\\n      </div>\\\\\\\\n    </div>\\\\\\\\n  </>\\\\\\\\n);\\\\\\\\n\\\\\\\\nconst fundraisingDiv = (\\\\\\\\n  <div class=\\\\\\\\\\\\\\\"d-flex flex-column mb-2\\\\\\\\\\\\\\\">\\\\\\\\n    <div className=\\\\\\\\\\\\\\\"col-lg-6  mb-2\\\\\\\\\\\\\\\">\\\\\\\\n      Currency\\\\\\\\n      <select\\\\\\\\n        onChange={(event) => State.update({ token: event.target.value })}\\\\\\\\n        class=\\\\\\\\\\\\\\\"form-select\\\\\\\\\\\\\\\"\\\\\\\\n        aria-label=\\\\\\\\\\\\\\\"Default select\\\\\\\\\\\\\\\"\\\\\\\\n      >\\\\\\\\n        <option selected value=\\\\\\\\\\\\\\\"USDT\\\\\\\\\\\\\\\">\\\\\\\\n          USDT\\\\\\\\n        </option>\\\\\\\\n        <option value=\\\\\\\\\\\\\\\"NEAR\\\\\\\\\\\\\\\">NEAR</option>\\\\\\\\n        <option value=\\\\\\\\\\\\\\\"USDC\\\\\\\\\\\\\\\">USDC</option>\\\\\\\\n      </select>\\\\\\\\n    </div>\\\\\\\\n    <div className=\\\\\\\\\\\\\\\"col-lg-6 mb-2\\\\\\\\\\\\\\\">\\\\\\\\n      Requested amount <span class=\\\\\\\\\\\\\\\"text-muted fw-normal\\\\\\\\\\\\\\\">(Numbers Only)</span>\\\\\\\\n      <input\\\\\\\\n        type=\\\\\\\\\\\\\\\"number\\\\\\\\\\\\\\\"\\\\\\\\n        value={parseInt(state.amount) > 0 ? state.amount : \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\"}\\\\\\\\n        min={0}\\\\\\\\n        onChange={(event) =>\\\\\\\\n          State.update({\\\\\\\\n            amount: Number(\\\\\\\\n              event.target.value.toString().replace(/e/g, \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\")\\\\\\\\n            ).toString(),\\\\\\\\n          })\\\\\\\\n        }\\\\\\\\n      />\\\\\\\\n    </div>\\\\\\\\n    <div className=\\\\\\\\\\\\\\\"col-lg-6 mb-2\\\\\\\\\\\\\\\">\\\\\\\\n      <p class=\\\\\\\\\\\\\\\"mb-1\\\\\\\\\\\\\\\">\\\\\\\\n        Requested sponsor <span class=\\\\\\\\\\\\\\\"text-muted fw-normal\\\\\\\\\\\\\\\">(Optional)</span>\\\\\\\\n      </p>\\\\\\\\n      <p style={{ fontSize: \\\\\\\\\\\\\\\"13px\\\\\\\\\\\\\\\" }} class=\\\\\\\\\\\\\\\"m-0 text-muted fw-light\\\\\\\\\\\\\\\">\\\\\\\\n        If you are requesting funding from a specific sponsor, please enter\\\\\\\\n        their username.\\\\\\\\n      </p>\\\\\\\\n      <div class=\\\\\\\\\\\\\\\"input-group flex-nowrap\\\\\\\\\\\\\\\">\\\\\\\\n        <span class=\\\\\\\\\\\\\\\"input-group-text\\\\\\\\\\\\\\\" id=\\\\\\\\\\\\\\\"addon-wrapping\\\\\\\\\\\\\\\">\\\\\\\\n          @\\\\\\\\n        </span>\\\\\\\\n        <input\\\\\\\\n          type=\\\\\\\\\\\\\\\"text\\\\\\\\\\\\\\\"\\\\\\\\n          class=\\\\\\\\\\\\\\\"form-control\\\\\\\\\\\\\\\"\\\\\\\\n          placeholder=\\\\\\\\\\\\\\\"Enter username\\\\\\\\\\\\\\\"\\\\\\\\n          value={state.supervisor}\\\\\\\\n          onChange={(event) => State.update({ supervisor: event.target.value })}\\\\\\\\n        />\\\\\\\\n      </div>\\\\\\\\n    </div>\\\\\\\\n  </div>\\\\\\\\n);\\\\\\\\n\\\\\\\\nfunction generateDescription(text, amount, token, supervisor, seekingFunding) {\\\\\\\\n  const fundingText =\\\\\\\\n    amount > 0 && token ? `###### Requested amount: ${amount} ${token}\\\\\\\\\\\\\\\\n` : \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\";\\\\\\\\n  const supervisorText = supervisor\\\\\\\\n    ? `###### Requested sponsor: @${supervisor}\\\\\\\\\\\\\\\\n`\\\\\\\\n    : \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\";\\\\\\\\n  return seekingFunding ? `${fundingText}${supervisorText}${text}` : text;\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst [tab, setTab] = useState(\\\\\\\\\\\\\\\"editor\\\\\\\\\\\\\\\");\\\\\\\\n\\\\\\\\nreturn (\\\\\\\\n  <div class=\\\\\\\\\\\\\\\"bg-light d-flex flex-column flex-grow-1 w-100\\\\\\\\\\\\\\\">\\\\\\\\n    <div class=\\\\\\\\\\\\\\\"mx-5 mb-5\\\\\\\\\\\\\\\">\\\\\\\\n      <div aria-label=\\\\\\\\\\\\\\\"breadcrumb\\\\\\\\\\\\\\\">\\\\\\\\n        <ol class=\\\\\\\\\\\\\\\"breadcrumb\\\\\\\\\\\\\\\">\\\\\\\\n          <li class=\\\\\\\\\\\\\\\"breadcrumb-item\\\\\\\\\\\\\\\">\\\\\\\\n            <Link\\\\\\\\n              style={{\\\\\\\\n                color: \\\\\\\\\\\\\\\"#3252A6\\\\\\\\\\\\\\\",\\\\\\\\n              }}\\\\\\\\n              className=\\\\\\\\\\\\\\\"fw-bold\\\\\\\\\\\\\\\"\\\\\\\\n              to={href({\\\\\\\\n                widgetSrc: \\\\\\\\\\\\\\\"devhub.near/widget/app\\\\\\\\\\\\\\\",\\\\\\\\n                params: { page: \\\\\\\\\\\\\\\"feed\\\\\\\\\\\\\\\" },\\\\\\\\n              })}\\\\\\\\n            >\\\\\\\\n              DevHub\\\\\\\\n            </Link>\\\\\\\\n          </li>\\\\\\\\n          <li class=\\\\\\\\\\\\\\\"breadcrumb-item active\\\\\\\\\\\\\\\" aria-current=\\\\\\\\\\\\\\\"page\\\\\\\\\\\\\\\">\\\\\\\\n            Create new\\\\\\\\n          </li>\\\\\\\\n        </ol>\\\\\\\\n      </div>\\\\\\\\n      {props.transactionHashes ? (\\\\\\\\n        <>\\\\\\\\n          Post created successfully. Back to{\\\\\\\\\\\\\\\" \\\\\\\\\\\\\\\"}\\\\\\\\n          <Link\\\\\\\\n            style={{\\\\\\\\n              color: \\\\\\\\\\\\\\\"#3252A6\\\\\\\\\\\\\\\",\\\\\\\\n            }}\\\\\\\\n            className=\\\\\\\\\\\\\\\"fw-bold\\\\\\\\\\\\\\\"\\\\\\\\n            to={href({\\\\\\\\n              widgetSrc: \\\\\\\\\\\\\\\"devhub.near/widget/app\\\\\\\\\\\\\\\",\\\\\\\\n              params: { page: \\\\\\\\\\\\\\\"feed\\\\\\\\\\\\\\\" },\\\\\\\\n            })}\\\\\\\\n          >\\\\\\\\n            feed\\\\\\\\n          </Link>\\\\\\\\n        </>\\\\\\\\n      ) : (\\\\\\\\n        <>\\\\\\\\n          <div className=\\\\\\\\\\\\\\\"card\\\\\\\\\\\\\\\">\\\\\\\\n            <div className=\\\\\\\\\\\\\\\"card-header\\\\\\\\\\\\\\\">\\\\\\\\n              <div>\\\\\\\\n                <ul class=\\\\\\\\\\\\\\\"nav nav-tabs\\\\\\\\\\\\\\\">\\\\\\\\n                  <li class=\\\\\\\\\\\\\\\"nav-item\\\\\\\\\\\\\\\">\\\\\\\\n                    <button\\\\\\\\n                      class={`nav-link ${tab === \\\\\\\\\\\\\\\"editor\\\\\\\\\\\\\\\" ? \\\\\\\\\\\\\\\"active\\\\\\\\\\\\\\\" : \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\"}`}\\\\\\\\n                      onClick={() => setTab(\\\\\\\\\\\\\\\"editor\\\\\\\\\\\\\\\")}\\\\\\\\n                    >\\\\\\\\n                      Editor\\\\\\\\n                    </button>\\\\\\\\n                  </li>\\\\\\\\n                  <li class=\\\\\\\\\\\\\\\"nav-item\\\\\\\\\\\\\\\">\\\\\\\\n                    <button\\\\\\\\n                      class={`nav-link ${tab === \\\\\\\\\\\\\\\"preview\\\\\\\\\\\\\\\" ? \\\\\\\\\\\\\\\"active\\\\\\\\\\\\\\\" : \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\"}`}\\\\\\\\n                      onClick={() => setTab(\\\\\\\\\\\\\\\"preview\\\\\\\\\\\\\\\")}\\\\\\\\n                    >\\\\\\\\n                      Preview\\\\\\\\n                    </button>\\\\\\\\n                  </li>\\\\\\\\n                </ul>\\\\\\\\n              </div>\\\\\\\\n              {tab === \\\\\\\\\\\\\\\"editor\\\\\\\\\\\\\\\" && (\\\\\\\\n                <div className=\\\\\\\\\\\\\\\"my-3\\\\\\\\\\\\\\\">Create a new post</div>\\\\\\\\n              )}\\\\\\\\n              {tab === \\\\\\\\\\\\\\\"preview\\\\\\\\\\\\\\\" && <div className=\\\\\\\\\\\\\\\"my-3\\\\\\\\\\\\\\\">Post Preview</div>}\\\\\\\\n            </div>\\\\\\\\n            <p>{state.seekingFunding}</p>\\\\\\\\n            <div class=\\\\\\\\\\\\\\\"card border-light\\\\\\\\\\\\\\\">\\\\\\\\n              {tab === \\\\\\\\\\\\\\\"editor\\\\\\\\\\\\\\\" && (\\\\\\\\n                <>\\\\\\\\n                  <div class=\\\\\\\\\\\\\\\"card-body\\\\\\\\\\\\\\\">\\\\\\\\n                    <p class=\\\\\\\\\\\\\\\"card-title fw-bold fs-6\\\\\\\\\\\\\\\">\\\\\\\\n                      What do you want to create?\\\\\\\\n                    </p>\\\\\\\\n                    <div class=\\\\\\\\\\\\\\\"d-flex flex-row gap-2\\\\\\\\\\\\\\\">\\\\\\\\n                      <button\\\\\\\\n                        onClick={onIdeaClick}\\\\\\\\n                        type=\\\\\\\\\\\\\\\"button\\\\\\\\\\\\\\\"\\\\\\\\n                        class={`btn btn-outline-secondary`}\\\\\\\\n                        style={\\\\\\\\n                          state.postType === \\\\\\\\\\\\\\\"Idea\\\\\\\\\\\\\\\"\\\\\\\\n                            ? {\\\\\\\\n                                backgroundColor: \\\\\\\\\\\\\\\"#0C7283\\\\\\\\\\\\\\\",\\\\\\\\n                                color: \\\\\\\\\\\\\\\"#f3f3f3\\\\\\\\\\\\\\\",\\\\\\\\n                              }\\\\\\\\n                            : {}\\\\\\\\n                        }\\\\\\\\n                      >\\\\\\\\n                        <i class=\\\\\\\\\\\\\\\"bi bi-lightbulb\\\\\\\\\\\\\\\"></i>\\\\\\\\n                        Idea\\\\\\\\n                      </button>\\\\\\\\n                      <button\\\\\\\\n                        onClick={onSolutionClick}\\\\\\\\n                        type=\\\\\\\\\\\\\\\"button\\\\\\\\\\\\\\\"\\\\\\\\n                        class={`btn btn-outline-secondary`}\\\\\\\\n                        style={\\\\\\\\n                          state.postType !== \\\\\\\\\\\\\\\"Idea\\\\\\\\\\\\\\\"\\\\\\\\n                            ? {\\\\\\\\n                                backgroundColor: \\\\\\\\\\\\\\\"#0C7283\\\\\\\\\\\\\\\",\\\\\\\\n                                color: \\\\\\\\\\\\\\\"#f3f3f3\\\\\\\\\\\\\\\",\\\\\\\\n                              }\\\\\\\\n                            : {}\\\\\\\\n                        }\\\\\\\\n                      >\\\\\\\\n                        <i class=\\\\\\\\\\\\\\\"bi bi-rocket\\\\\\\\\\\\\\\"></i>\\\\\\\\n                        Solution\\\\\\\\n                      </button>\\\\\\\\n                    </div>\\\\\\\\n                    <p class=\\\\\\\\\\\\\\\"text-muted w-75 my-1\\\\\\\\\\\\\\\">\\\\\\\\n                      {state.postType === \\\\\\\\\\\\\\\"Idea\\\\\\\\\\\\\\\"\\\\\\\\n                        ? \\\\\\\\\\\\\\\"Get feedback from the community about a problem, opportunity, or need.\\\\\\\\\\\\\\\"\\\\\\\\n                        : \\\\\\\\\\\\\\\"Provide a specific proposal or implementation to an idea, optionally requesting funding. If your solution relates to an existing idea, please reply to the original post with a solution.\\\\\\\\\\\\\\\"}\\\\\\\\n                    </p>\\\\\\\\n                    {state.warning && (\\\\\\\\n                      <div\\\\\\\\n                        class=\\\\\\\\\\\\\\\"alert alert-warning alert-dismissible fade show\\\\\\\\\\\\\\\"\\\\\\\\n                        role=\\\\\\\\\\\\\\\"alert\\\\\\\\\\\\\\\"\\\\\\\\n                      >\\\\\\\\n                        {state.warning}\\\\\\\\n                        <button\\\\\\\\n                          type=\\\\\\\\\\\\\\\"button\\\\\\\\\\\\\\\"\\\\\\\\n                          class=\\\\\\\\\\\\\\\"btn-close\\\\\\\\\\\\\\\"\\\\\\\\n                          data-bs-dismiss=\\\\\\\\\\\\\\\"alert\\\\\\\\\\\\\\\"\\\\\\\\n                          aria-label=\\\\\\\\\\\\\\\"Close\\\\\\\\\\\\\\\"\\\\\\\\n                          onClick={() => State.update({ warning: \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\" })}\\\\\\\\n                        ></button>\\\\\\\\n                      </div>\\\\\\\\n                    )}\\\\\\\\n                    <div className=\\\\\\\\\\\\\\\"row\\\\\\\\\\\\\\\">\\\\\\\\n                      {nameDiv}\\\\\\\\n                      {descriptionDiv}\\\\\\\\n                      {labelEditor}\\\\\\\\n                      {state.postType === \\\\\\\\\\\\\\\"Solution\\\\\\\\\\\\\\\" && isFundraisingDiv}\\\\\\\\n                      {state.seekingFunding && fundraisingDiv}\\\\\\\\n                    </div>\\\\\\\\n                    <button\\\\\\\\n                      style={{\\\\\\\\n                        width: \\\\\\\\\\\\\\\"7rem\\\\\\\\\\\\\\\",\\\\\\\\n                        backgroundColor: \\\\\\\\\\\\\\\"#0C7283\\\\\\\\\\\\\\\",\\\\\\\\n                        color: \\\\\\\\\\\\\\\"#f3f3f3\\\\\\\\\\\\\\\",\\\\\\\\n                      }}\\\\\\\\n                      disabled={\\\\\\\\n                        state.seekingFunding &&\\\\\\\\n                        (!state.amount || state.amount < 1)\\\\\\\\n                      }\\\\\\\\n                      className=\\\\\\\\\\\\\\\"btn btn-light mb-2 p-3\\\\\\\\\\\\\\\"\\\\\\\\n                      onClick={onSubmit}\\\\\\\\n                    >\\\\\\\\n                      Submit\\\\\\\\n                    </button>\\\\\\\\n                  </div>\\\\\\\\n                  <div class=\\\\\\\\\\\\\\\"bg-light d-flex flex-row p-1 border-bottom\\\\\\\\\\\\\\\"></div>\\\\\\\\n                </>\\\\\\\\n              )}\\\\\\\\n              {tab === \\\\\\\\\\\\\\\"preview\\\\\\\\\\\\\\\" && (\\\\\\\\n                <div class=\\\\\\\\\\\\\\\"card-body\\\\\\\\\\\\\\\">\\\\\\\\n                  <p class=\\\\\\\\\\\\\\\"text-muted m-0\\\\\\\\\\\\\\\">Preview</p>\\\\\\\\n                  <div>\\\\\\\\n                    <Widget\\\\\\\\n                      src=\\\\\\\\\\\\\\\"devhub.near/widget/devhub.entity.post.Post\\\\\\\\\\\\\\\"\\\\\\\\n                      props={{\\\\\\\\n                        isPreview: true,\\\\\\\\n                        id: 0, // irrelevant\\\\\\\\n                        post: {\\\\\\\\n                          author_id: state.author_id,\\\\\\\\n                          likes: [],\\\\\\\\n                          snapshot: {\\\\\\\\n                            editor_id: state.editor_id,\\\\\\\\n                            labels: state.labelStrings,\\\\\\\\n                            post_type: state.postType,\\\\\\\\n                            name: state.name,\\\\\\\\n                            description: generateDescription(\\\\\\\\n                              state.description,\\\\\\\\n                              state.amount,\\\\\\\\n                              state.token,\\\\\\\\n                              state.supervisor,\\\\\\\\n                              state.seekingFunding\\\\\\\\n                            ),\\\\\\\\n                            github_link: state.githubLink,\\\\\\\\n                          },\\\\\\\\n                        },\\\\\\\\n                      }}\\\\\\\\n                    />\\\\\\\\n                  </div>\\\\\\\\n                </div>\\\\\\\\n              )}\\\\\\\\n            </div>\\\\\\\\n          </div>\\\\\\\\n        </>\\\\\\\\n      )}\\\\\\\\n    </div>\\\\\\\\n  </div>\\\\\\\\n);\\\\\\\\n\"}, \"devhub.page.community.index\": {\"\": \"const Button = styled.button`\\\\\\\\n  height: 40px;\\\\\\\\n  font-size: 14px;\\\\\\\\n  border-color: #e3e3e0;\\\\\\\\n  background-color: #ffffff;\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst Banner = styled.div`\\\\\\\\n  max-width: 100%;\\\\\\\\n  min-height: 240px;\\\\\\\\n  height: 240px;\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst CenteredMessage = styled.div`\\\\\\\\n  display: flex;\\\\\\\\n  flex-direction: column;\\\\\\\\n  justify-content: center;\\\\\\\\n  align-items: center;\\\\\\\\n  width: 100%;\\\\\\\\n  height: ${(p) => p.height ?? \\\\\\\\\\\\\\\"100%\\\\\\\\\\\\\\\"};\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst NavUnderline = styled.ul`\\\\\\\\n  cursor: pointer;\\\\\\\\n  a {\\\\\\\\n    color: #151515;\\\\\\\\n    text-decoration: none;\\\\\\\\n  }\\\\\\\\n\\\\\\\\n  a.active {\\\\\\\\n    font-weight: bold;\\\\\\\\n    border-bottom: 4px solid #00ec97;\\\\\\\\n  }\\\\\\\\n  border-bottom: 1px solid #cccccc;\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst { tab, permissions, community, view } = props;\\\\\\\\n\\\\\\\\nconst { href } = VM.require(\\\\\\\\\\\\\\\"devhub.near/widget/core.lib.url\\\\\\\\\\\\\\\");\\\\\\\\n\\\\\\\\nif (!href) {\\\\\\\\n  return <></>;\\\\\\\\n}\\\\\\\\n\\\\\\\\nif (!tab) {\\\\\\\\n  tab = \\\\\\\\\\\\\\\"Activity\\\\\\\\\\\\\\\";\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst [isLinkCopied, setLinkCopied] = useState(false);\\\\\\\\n\\\\\\\\nconst tabs = [\\\\\\\\n  {\\\\\\\\n    title: \\\\\\\\\\\\\\\"Activity\\\\\\\\\\\\\\\",\\\\\\\\n    view: \\\\\\\\\\\\\\\"devhub.near/widget/devhub.entity.community.Activity\\\\\\\\\\\\\\\",\\\\\\\\n    params: {\\\\\\\\n      handle: community.handle,\\\\\\\\n    },\\\\\\\\n  },\\\\\\\\n  {\\\\\\\\n    title: \\\\\\\\\\\\\\\"Teams\\\\\\\\\\\\\\\",\\\\\\\\n    view: \\\\\\\\\\\\\\\"devhub.near/widget/devhub.entity.community.Teams\\\\\\\\\\\\\\\",\\\\\\\\n    params: {\\\\\\\\n      handle: community.handle,\\\\\\\\n    },\\\\\\\\n  },\\\\\\\\n];\\\\\\\\n\\\\\\\\n(community.addons || []).map((addon) => {\\\\\\\\n  addon.enabled &&\\\\\\\\n    tabs.push({\\\\\\\\n      title: addon.display_name,\\\\\\\\n      view: \\\\\\\\\\\\\\\"devhub.near/widget/devhub.page.addon\\\\\\\\\\\\\\\",\\\\\\\\n      params: { addon },\\\\\\\\n    });\\\\\\\\n});\\\\\\\\n\\\\\\\\nconst onShareClick = () =>\\\\\\\\n  clipboard\\\\\\\\n    .writeText(\\\\\\\\n      href({\\\\\\\\n        gateway: \\\\\\\\\\\\\\\"near.social\\\\\\\\\\\\\\\",\\\\\\\\n        widgetSrc: \\\\\\\\\\\\\\\"devhub.near/widget/app\\\\\\\\\\\\\\\",\\\\\\\\n        params: { page: \\\\\\\\\\\\\\\"community\\\\\\\\\\\\\\\", handle: community.handle },\\\\\\\\n      })\\\\\\\\n    )\\\\\\\\n    .then(setLinkCopied(true));\\\\\\\\n\\\\\\\\nlet currentTab = tabs.find((it) => it.title === tab);\\\\\\\\n\\\\\\\\nconst CommunityName = styled.span`\\\\\\\\n  color: #151515;\\\\\\\\n  font-size: 2.25rem;\\\\\\\\n  font-style: normal;\\\\\\\\n  font-weight: 700;\\\\\\\\n  line-height: 100%; /* 48px */\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst CommunityDetails = styled.span`\\\\\\\\n  color: #818181;\\\\\\\\n  font-size: 1rem;\\\\\\\\n  font-style: normal;\\\\\\\\n  font-weight: 400;\\\\\\\\n  line-height: 120%; /* 28.8px */\\\\\\\\n`;\\\\\\\\n\\\\\\\\nfunction trimHttps(url) {\\\\\\\\n  if (url.startsWith(\\\\\\\\\\\\\\\"https://\\\\\\\\\\\\\\\")) {\\\\\\\\n    return url.substring(8);\\\\\\\\n  }\\\\\\\\n  return url;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// some communties have url as handle (eg: devhub platform) while others has correct handle\\\\\\\\nfunction checkTelegramHandle(tg) {\\\\\\\\n  const pattern = /https:\\\\\\\\\\\\\\\\/\\\\\\\\\\\\\\\\/t.me\\\\\\\\\\\\\\\\/(.*)/;\\\\\\\\n  const includesHttp = tg.match(pattern);\\\\\\\\n  const handle = includesHttp ? includesHttp[1] : tg;\\\\\\\\n  return { handle, url: \\\\\\\\\\\\\\\"https://t.me/\\\\\\\\\\\\\\\" + handle };\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst socialLinks = [\\\\\\\\n  ...((community.website_url?.length ?? 0) > 0\\\\\\\\n    ? [\\\\\\\\n        {\\\\\\\\n          href: `https://${trimHttps(community.website_url)}`,\\\\\\\\n          iconClass: \\\\\\\\\\\\\\\"bi bi-globe\\\\\\\\\\\\\\\",\\\\\\\\n          name: trimHttps(community.website_url),\\\\\\\\n        },\\\\\\\\n      ]\\\\\\\\n    : []),\\\\\\\\n\\\\\\\\n  ...((community.github_handle?.length ?? 0) > 0\\\\\\\\n    ? [\\\\\\\\n        {\\\\\\\\n          href: `https://github.com/${community.github_handle}`,\\\\\\\\n          iconClass: \\\\\\\\\\\\\\\"bi bi-github\\\\\\\\\\\\\\\",\\\\\\\\n          name: community.github_handle,\\\\\\\\n        },\\\\\\\\n      ]\\\\\\\\n    : []),\\\\\\\\n\\\\\\\\n  ...((community.twitter_handle?.length ?? 0) > 0\\\\\\\\n    ? [\\\\\\\\n        {\\\\\\\\n          href: `https://twitter.com/${community.twitter_handle}`,\\\\\\\\n          iconClass: \\\\\\\\\\\\\\\"bi bi-twitter\\\\\\\\\\\\\\\",\\\\\\\\n          name: community.twitter_handle,\\\\\\\\n        },\\\\\\\\n      ]\\\\\\\\n    : []),\\\\\\\\n\\\\\\\\n  ...(community.telegram_handle?.length > 0\\\\\\\\n    ? [\\\\\\\\n        {\\\\\\\\n          href: checkTelegramHandle(community.telegram_handle).url,\\\\\\\\n          iconClass: \\\\\\\\\\\\\\\"bi bi-telegram\\\\\\\\\\\\\\\",\\\\\\\\n          name: checkTelegramHandle(community.telegram_handle).handle,\\\\\\\\n        },\\\\\\\\n      ]\\\\\\\\n    : []),\\\\\\\\n];\\\\\\\\n\\\\\\\\nconst NavlinksContainer = styled.div`\\\\\\\\n  //background: white;\\\\\\\\n  padding: 0 3rem;\\\\\\\\n\\\\\\\\n  @media screen and (max-width: 960px) {\\\\\\\\n    padding: 0 1rem;\\\\\\\\n  }\\\\\\\\n`;\\\\\\\\n\\\\\\\\nreturn (\\\\\\\\n  <div\\\\\\\\n    className=\\\\\\\\\\\\\\\"d-flex flex-column gap-3 w-100\\\\\\\\\\\\\\\"\\\\\\\\n    style={{ background: \\\\\\\\\\\\\\\"#F4F4F4\\\\\\\\\\\\\\\" }}\\\\\\\\n  >\\\\\\\\n    <Banner\\\\\\\\n      className=\\\\\\\\\\\\\\\"object-fit-cover\\\\\\\\\\\\\\\"\\\\\\\\n      style={{\\\\\\\\n        background: `center / cover no-repeat url(${community.banner_url})`,\\\\\\\\n      }}\\\\\\\\n    />\\\\\\\\n\\\\\\\\n    <div className=\\\\\\\\\\\\\\\"container d-flex flex-wrap justify-content-between align-items-center align-items-md-start gap-4\\\\\\\\\\\\\\\">\\\\\\\\n      <div className=\\\\\\\\\\\\\\\"d-flex flex-column ms-3\\\\\\\\\\\\\\\">\\\\\\\\n        <div className=\\\\\\\\\\\\\\\"position-relative\\\\\\\\\\\\\\\">\\\\\\\\n          <div style={{ width: 150, height: 45 }}>\\\\\\\\n            <img\\\\\\\\n              alt=\\\\\\\\\\\\\\\"Loading logo...\\\\\\\\\\\\\\\"\\\\\\\\n              className=\\\\\\\\\\\\\\\"rounded-circle position-absolute\\\\\\\\\\\\\\\"\\\\\\\\n              width=\\\\\\\\\\\\\\\"160\\\\\\\\\\\\\\\"\\\\\\\\n              height=\\\\\\\\\\\\\\\"160\\\\\\\\\\\\\\\"\\\\\\\\n              src={community.logo_url}\\\\\\\\n              style={{ top: -124 }}\\\\\\\\n            />\\\\\\\\n          </div>\\\\\\\\n        </div>\\\\\\\\n\\\\\\\\n        <div className=\\\\\\\\\\\\\\\"d-flex flex-column gap-3 ps-md-3 pt-md-3 pb-md-2\\\\\\\\\\\\\\\">\\\\\\\\n          <CommunityName className=\\\\\\\\\\\\\\\"text-nowrap\\\\\\\\\\\\\\\">\\\\\\\\n            {community.name}\\\\\\\\n          </CommunityName>\\\\\\\\n          <CommunityDetails>{community.description}</CommunityDetails>\\\\\\\\n        </div>\\\\\\\\n\\\\\\\\n        <div className=\\\\\\\\\\\\\\\"mt-3 ps-3 d-flex gap-3 align-items-center\\\\\\\\\\\\\\\">\\\\\\\\n          {socialLinks.map((link, index) => (\\\\\\\\n            <a\\\\\\\\n              href={link.href}\\\\\\\\n              style={{\\\\\\\\n                marginLeft: index !== 0 ? \\\\\\\\\\\\\\\"0px\\\\\\\\\\\\\\\" : \\\\\\\\\\\\\\\"0px\\\\\\\\\\\\\\\",\\\\\\\\n                color: \\\\\\\\\\\\\\\"#818181\\\\\\\\\\\\\\\",\\\\\\\\n              }}\\\\\\\\n              key={link.href}\\\\\\\\n              target=\\\\\\\\\\\\\\\"_blank\\\\\\\\\\\\\\\"\\\\\\\\n            >\\\\\\\\n              <i className={link.iconClass}></i>\\\\\\\\n            </a>\\\\\\\\n          ))}\\\\\\\\n        </div>\\\\\\\\n      </div>\\\\\\\\n\\\\\\\\n      <div className=\\\\\\\\\\\\\\\"d-flex align-items-end gap-3 ms-auto mb-md-5 me-4\\\\\\\\\\\\\\\">\\\\\\\\n        {permissions.can_configure && (\\\\\\\\n          <Link\\\\\\\\n            to={`/devhub.near/widget/app?page=community.configuration&handle=${community.handle}`}\\\\\\\\n          >\\\\\\\\n            <Widget\\\\\\\\n              src={\\\\\\\\\\\\\\\"devhub.near/widget/devhub.components.molecule.Button\\\\\\\\\\\\\\\"}\\\\\\\\n              props={{\\\\\\\\n                classNames: { root: \\\\\\\\\\\\\\\"btn-outline-light text-dark shadow-none\\\\\\\\\\\\\\\" },\\\\\\\\n                notRounded: true,\\\\\\\\n                style: {\\\\\\\\n                  display: \\\\\\\\\\\\\\\"flex\\\\\\\\\\\\\\\",\\\\\\\\n                  padding: \\\\\\\\\\\\\\\"0.75rem 1rem\\\\\\\\\\\\\\\",\\\\\\\\n                  alignItems: \\\\\\\\\\\\\\\"center\\\\\\\\\\\\\\\",\\\\\\\\n                  gap: \\\\\\\\\\\\\\\"16px\\\\\\\\\\\\\\\",\\\\\\\\n\\\\\\\\n                  borderRadius: \\\\\\\\\\\\\\\"4px\\\\\\\\\\\\\\\",\\\\\\\\n                  border: \\\\\\\\\\\\\\\"1px solid #00EC97\\\\\\\\\\\\\\\",\\\\\\\\n                  background: \\\\\\\\\\\\\\\"rgba(129, 129, 129, 0.00)\\\\\\\\\\\\\\\",\\\\\\\\n                },\\\\\\\\n                icon: {\\\\\\\\n                  type: \\\\\\\\\\\\\\\"bootstrap_icon\\\\\\\\\\\\\\\",\\\\\\\\n                  variant: \\\\\\\\\\\\\\\"bi-gear-wide-connected\\\\\\\\\\\\\\\",\\\\\\\\n                },\\\\\\\\n                label: \\\\\\\\\\\\\\\"Configure community\\\\\\\\\\\\\\\",\\\\\\\\n              }}\\\\\\\\n            />\\\\\\\\n          </Link>\\\\\\\\n        )}\\\\\\\\n        <Widget\\\\\\\\n          src={\\\\\\\\\\\\\\\"devhub.near/widget/devhub.components.molecule.Button\\\\\\\\\\\\\\\"}\\\\\\\\n          props={{\\\\\\\\n            classNames: { root: \\\\\\\\\\\\\\\"btn-outline-light text-dark shadow-none\\\\\\\\\\\\\\\" },\\\\\\\\n            notRounded: true,\\\\\\\\n            style: {\\\\\\\\n              display: \\\\\\\\\\\\\\\"flex\\\\\\\\\\\\\\\",\\\\\\\\n              padding: \\\\\\\\\\\\\\\"0.75rem 1rem\\\\\\\\\\\\\\\",\\\\\\\\n              alignItems: \\\\\\\\\\\\\\\"center\\\\\\\\\\\\\\\",\\\\\\\\n              gap: \\\\\\\\\\\\\\\"16px\\\\\\\\\\\\\\\",\\\\\\\\n\\\\\\\\n              borderRadius: \\\\\\\\\\\\\\\"4px\\\\\\\\\\\\\\\",\\\\\\\\n              border: \\\\\\\\\\\\\\\"1px solid #00EC97\\\\\\\\\\\\\\\",\\\\\\\\n              background: \\\\\\\\\\\\\\\"rgba(129, 129, 129, 0.00)\\\\\\\\\\\\\\\",\\\\\\\\n            },\\\\\\\\n            label: \\\\\\\\\\\\\\\"Share \\\\\\\\u{2197}\\\\\\\\\\\\\\\",\\\\\\\\n            onClick: onShareClick,\\\\\\\\n            onMouseLeave: () => setLinkCopied(false),\\\\\\\\n            title: \\\\\\\\\\\\\\\"Copy link to clipboard\\\\\\\\\\\\\\\",\\\\\\\\n          }}\\\\\\\\n        />\\\\\\\\n      </div>\\\\\\\\n    </div>\\\\\\\\n    <NavlinksContainer>\\\\\\\\n      <NavUnderline className=\\\\\\\\\\\\\\\"nav gap-4 my-4\\\\\\\\\\\\\\\">\\\\\\\\n        {tabs.map(\\\\\\\\n          ({ title }) =>\\\\\\\\n            title && (\\\\\\\\n              <li className=\\\\\\\\\\\\\\\"nav-item\\\\\\\\\\\\\\\" key={title}>\\\\\\\\n                <Link\\\\\\\\n                  to={href({\\\\\\\\n                    widgetSrc: \\\\\\\\\\\\\\\"devhub.near/widget/app\\\\\\\\\\\\\\\",\\\\\\\\n                    params: {\\\\\\\\n                      page: \\\\\\\\\\\\\\\"community\\\\\\\\\\\\\\\",\\\\\\\\n                      handle: community.handle,\\\\\\\\n                      tab: title,\\\\\\\\n                    },\\\\\\\\n                  })}\\\\\\\\n                  aria-current={tab === title && \\\\\\\\\\\\\\\"page\\\\\\\\\\\\\\\"}\\\\\\\\n                  className={[\\\\\\\\n                    \\\\\\\\\\\\\\\"d-inline-flex gap-2\\\\\\\\\\\\\\\",\\\\\\\\n                    tab === title ? \\\\\\\\\\\\\\\"nav-link active\\\\\\\\\\\\\\\" : \\\\\\\\\\\\\\\"nav-link\\\\\\\\\\\\\\\",\\\\\\\\n                  ].join(\\\\\\\\\\\\\\\" \\\\\\\\\\\\\\\")}\\\\\\\\n                >\\\\\\\\n                  <span>{title}</span>\\\\\\\\n                </Link>\\\\\\\\n              </li>\\\\\\\\n            )\\\\\\\\n        )}\\\\\\\\n      </NavUnderline>\\\\\\\\n      {currentTab.title === \\\\\\\\\\\\\\\"Activity\\\\\\\\\\\\\\\" && (\\\\\\\\n        <div\\\\\\\\n          className=\\\\\\\\\\\\\\\"my-4 d-flex align-items-center justify-content-between\\\\\\\\\\\\\\\"\\\\\\\\n          style={{ gap: \\\\\\\\\\\\\\\"2.5rem\\\\\\\\\\\\\\\" }}\\\\\\\\n        >\\\\\\\\n          <div class=\\\\\\\\\\\\\\\"d-flex align-items-center justify-content-between\\\\\\\\\\\\\\\">\\\\\\\\n            <small class=\\\\\\\\\\\\\\\"text-muted\\\\\\\\\\\\\\\">\\\\\\\\n              <span>Required tags:</span>\\\\\\\\n              <Link\\\\\\\\n                to={href({\\\\\\\\n                  widgetSrc: \\\\\\\\\\\\\\\"devhub.near/widget/app\\\\\\\\\\\\\\\",\\\\\\\\n                  params: { page: \\\\\\\\\\\\\\\"feed\\\\\\\\\\\\\\\", tag: community.tag },\\\\\\\\n                })}\\\\\\\\n              >\\\\\\\\n                <Widget\\\\\\\\n                  src={\\\\\\\\\\\\\\\"devhub.near/widget/devhub.components.atom.Tag\\\\\\\\\\\\\\\"}\\\\\\\\n                  props={{\\\\\\\\n                    tag: community.tag,\\\\\\\\n                  }}\\\\\\\\n                />\\\\\\\\n              </Link>\\\\\\\\n            </small>\\\\\\\\n          </div>\\\\\\\\n          {context.accountId && (\\\\\\\\n            <Widget\\\\\\\\n              src={\\\\\\\\n                \\\\\\\\\\\\\\\"devhub.near/widget/devhub.components.molecule.PostControls\\\\\\\\\\\\\\\"\\\\\\\\n              }\\\\\\\\n              props={{\\\\\\\\n                title: \\\\\\\\\\\\\\\"Post\\\\\\\\\\\\\\\",\\\\\\\\n                href: href({\\\\\\\\n                  widgetSrc: \\\\\\\\\\\\\\\"devhub.near/widget/app\\\\\\\\\\\\\\\",\\\\\\\\n                  params: {\\\\\\\\n                    page: \\\\\\\\\\\\\\\"create\\\\\\\\\\\\\\\",\\\\\\\\n                    labels: [community.tag],\\\\\\\\n                  },\\\\\\\\n                }),\\\\\\\\n              }}\\\\\\\\n            />\\\\\\\\n          )}\\\\\\\\n        </div>\\\\\\\\n      )}\\\\\\\\n    </NavlinksContainer>\\\\\\\\n    {currentTab && (\\\\\\\\n      <div className=\\\\\\\\\\\\\\\"d-flex w-100 h-100\\\\\\\\\\\\\\\" key={currentTab.title}>\\\\\\\\n        <Widget\\\\\\\\n          src={currentTab.view}\\\\\\\\n          props={{\\\\\\\\n            ...currentTab.params,\\\\\\\\n            view, // default view for an addon, can come as a prop from a community or from a direct link to page.addon\\\\\\\\n\\\\\\\\n            // below is temporary prop drilling until kanban and github are migrated\\\\\\\\n            permissions,\\\\\\\\n            handle: community.handle,\\\\\\\\n          }}\\\\\\\\n        />\\\\\\\\n      </div>\\\\\\\\n    )}\\\\\\\\n  </div>\\\\\\\\n);\\\\\\\\n\"}, \"devhub.entity.addon.telegram.Viewer\": {\"\": \"const { handles } = props;\\\\\\\\n\\\\\\\\nconst CenteredMessage = styled.div`\\\\\\\\n  display: flex;\\\\\\\\n  flex-direction: column;\\\\\\\\n  justify-content: center;\\\\\\\\n  align-items: center;\\\\\\\\n  width: 100%;\\\\\\\\n  height: ${(p) => p.height ?? \\\\\\\\\\\\\\\"100%\\\\\\\\\\\\\\\"};\\\\\\\\n`;\\\\\\\\n\\\\\\\\nif (!handles || handles.length === 0) {\\\\\\\\n  return (\\\\\\\\n    <CenteredMessage height={\\\\\\\\\\\\\\\"384px\\\\\\\\\\\\\\\"}>\\\\\\\\n      <h2>No Telegram Configured</h2>\\\\\\\\n    </CenteredMessage>\\\\\\\\n  );\\\\\\\\n} else {\\\\\\\\n  return (\\\\\\\\n    <div>\\\\\\\\n      {(handles || []).map((tg) => {\\\\\\\\n        const pattern = /https:\\\\\\\\\\\\\\\\/\\\\\\\\\\\\\\\\/t.me\\\\\\\\\\\\\\\\/(.*)/;\\\\\\\\n        const includesHttp = tg.match(pattern);\\\\\\\\n        const handle = includesHttp ? includesHttp[1] : tg;\\\\\\\\n        return (\\\\\\\\n          <>\\\\\\\\n            <iframe\\\\\\\\n              iframeResizer\\\\\\\\n              src={\\\\\\\\n                \\\\\\\\\\\\\\\"https://j96g3uepe0.execute-api.us-east-1.amazonaws.com/groups-ui/\\\\\\\\\\\\\\\" +\\\\\\\\n                handle\\\\\\\\n              }\\\\\\\\n              frameborder=\\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\"\\\\\\\\n              // width and minWidth required by iframeResizer\\\\\\\\n              style={{\\\\\\\\n                width: \\\\\\\\\\\\\\\"1px\\\\\\\\\\\\\\\",\\\\\\\\n                minWidth: \\\\\\\\\\\\\\\"100%\\\\\\\\\\\\\\\",\\\\\\\\n                marginTop: \\\\\\\\\\\\\\\"20px\\\\\\\\\\\\\\\",\\\\\\\\n              }}\\\\\\\\n            ></iframe>\\\\\\\\n\\\\\\\\n            <a href={includesHttp ? tg : \\\\\\\\\\\\\\\"https://t.me/\\\\\\\\\\\\\\\" + tg} target=\\\\\\\\\\\\\\\"_blank\\\\\\\\\\\\\\\">\\\\\\\\n              <Widget\\\\\\\\n                src={\\\\\\\\\\\\\\\"devhub.near/widget/devhub.components.molecule.Button\\\\\\\\\\\\\\\"}\\\\\\\\n                props={{\\\\\\\\n                  classNames: { root: \\\\\\\\\\\\\\\"btn-primary\\\\\\\\\\\\\\\" },\\\\\\\\n                  label: \\\\\\\\\\\\\\\"View More\\\\\\\\\\\\\\\",\\\\\\\\n                }}\\\\\\\\n              />\\\\\\\\n            </a>\\\\\\\\n          </>\\\\\\\\n        );\\\\\\\\n      })}\\\\\\\\n    </div>\\\\\\\\n  );\\\\\\\\n}\\\\\\\\n\"}}}}}"
      }
    ],
    "actions_agg": {
      "deposit": 0
    },
    "outcomes": {
      "status": true
    },
    "outcomes_agg": {
      "transaction_fee": 1.4877489729673e+21
    }
  },
  {
    "id": "1762584181",
    "receipt_id": "6t7exg5S6a16DEqdbByYSLZSS88nrNAVmMH5DnB9eByu",
    "predecessor_account_id": "system",
    "receiver_account_id": "devhub.near",
    "receipt_kind": "ACTION",
    "receipt_block": {
      "block_hash": "HNm53MVusMJeJ7fVymN3vJFgRJ4yHWKs6cJBgRWcpiUn",
      "block_height": 108254333,
      "block_timestamp": 1702907023284093400
    },
    "receipt_outcome": {
      "gas_burnt": 223182562500,
      "tokens_burnt": 0,
      "executor_account_id": "devhub.near",
      "status": true
    },
    "transaction_hash": "DN1z5XTEtZAKhELRzaa1JAQJ7hUpwMuGukHLs715XHch",
    "included_in_block_hash": "Ep7bagdbJq8LBnYvcyw5huTQvgktn22dwf8xbXBppqge",
    "block_timestamp": "1702907021359461349",
    "block": {
      "block_height": 108254331
    },
    "receipt_conversion_tokens_burnt": "250168446266000000000",
    "actions": [
      {
        "action": "TRANSFER",
        "method": null,
        "deposit": 1.878381249651328e+23,
        "fee": 0,
        "args": null
      }
    ],
    "actions_agg": {
      "deposit": 0
    },
    "outcomes": {
      "status": true
    },
    "outcomes_agg": {
      "transaction_fee": 1.4877489729673e+21
    }
  },
  {
    "id": "1763249611",
    "receipt_id": "Fp3fDcFKLoD7MhQsPEYLbk7z2U3g4GgXpYQrKKQbVqS1",
    "predecessor_account_id": "previewthomas.near",
    "receiver_account_id": "devhub.near",
    "receipt_kind": "ACTION",
    "receipt_block": {
      "block_hash": "5cbLD8D7rWsKprDMxqmHZEGm2ELjGPcBBCxxgCV6QQiZ",
      "block_height": 108258606,
      "block_timestamp": 1702911654461064700
    },
    "receipt_outcome": {
      "gas_burnt": 2428032796700,
      "tokens_burnt": 242803279670000000000,
      "executor_account_id": "devhub.near",
      "status": false
    },
    "transaction_hash": "9BtHdQdGE5o5DJDnzCeL5Gxw7v7skDpfQPob8UhEeW1Z",
    "included_in_block_hash": "4xEaDhsWJwdjhUcFzg8roh5KVpJtLwLv1NDc4KUHkW4k",
    "block_timestamp": "1702911653874825942",
    "block": {
      "block_height": 108258605
    },
    "receipt_conversion_tokens_burnt": "242803279670000000000",
    "actions": [
      {
        "action": "FUNCTION_CALL",
        "method": "storage_deposit",
        "deposit": 1e+24,
        "fee": 242803279670000000000,
        "args": "{\"account_id\": \"previewthomas.near\"}"
      }
    ],
    "actions_agg": {
      "deposit": 1e+24
    },
    "outcomes": {
      "status": false
    },
    "outcomes_agg": {
      "transaction_fee": 485606559340000000000
    }
  },
  {
    "id": "1766057411",
    "receipt_id": "9G7TT92biRbZ2oMu52SYUvk73LL19sgaC9TyraiGDRph",
    "predecessor_account_id": "devhub.near",
    "receiver_account_id": "social.near",
    "receipt_kind": "ACTION",
    "receipt_block": {
      "block_hash": "B2Hou94YgQXpcUCQsXjKoa8SiGr7tzTFrHhRib1aJg23",
      "block_height": 108274795,
      "block_timestamp": 1702929170770560300
    },
    "receipt_outcome": {
      "gas_burnt": 22021116852573,
      "tokens_burnt": 2.2021116852573e+21,
      "executor_account_id": "social.near",
      "status": true
    },
    "transaction_hash": "7jTfh2WV6GwPFgvBwM79qmA1jThq8auj3VdMUtSNiF3K",
    "included_in_block_hash": "4TPAPQVMzcQbW5XWdgA5gNf3TM8S28LAgTsMSuHJVPb7",
    "block_timestamp": "1702929169859375921",
    "block": {
      "block_height": 108274794
    },
    "receipt_conversion_tokens_burnt": "253355546589600000000",
    "actions": [
      {
        "action": "FUNCTION_CALL",
        "method": "set",
        "deposit": 0,
        "fee": 2.2021116852573e+21,
        "args": "{\"data\": {\"devhub.near\": {\"widget\": {\"devhub.page.addon\": {\"\": \"const Container = styled.div`\\\\\\\\n  display: flex;\\\\\\\\n  flex-direction: column;\\\\\\\\n  height: 100%;\\\\\\\\n  width: 100%;\\\\\\\\n  position: relative;\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst Content = styled.div`\\\\\\\\n  flex: 1;\\\\\\\\n  padding: 20px;\\\\\\\\n  overflow: auto;\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst SettingsButton = styled.button`\\\\\\\\n  position: absolute;\\\\\\\\n  top: 10px;\\\\\\\\n  right: 10px;\\\\\\\\n\\\\\\\\n  background-color: #fff;\\\\\\\\n  display: flex;\\\\\\\\n  padding: 14px 16px;\\\\\\\\n  align-items: center;\\\\\\\\n  gap: 16px;\\\\\\\\n  width: 50px;\\\\\\\\n  height: 50px;\\\\\\\\n\\\\\\\\n  border-radius: 4px;\\\\\\\\n  border: 1px solid #00ec97;\\\\\\\\n\\\\\\\\n  z-index: 10;\\\\\\\\n\\\\\\\\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);\\\\\\\\n\\\\\\\\n  &:hover {\\\\\\\\n    transform: translateY(2px);\\\\\\\\n    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);\\\\\\\\n  }\\\\\\\\n\\\\\\\\n  &:active {\\\\\\\\n    transform: translateY(0);\\\\\\\\n    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);\\\\\\\\n  }\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst CenteredMessage = styled.div`\\\\\\\\n  display: flex;\\\\\\\\n  flex-direction: column;\\\\\\\\n  justify-content: center;\\\\\\\\n  align-items: center;\\\\\\\\n  width: 100%;\\\\\\\\n  height: ${(p) => p.height ?? \\\\\\\\\\\\\\\"100%\\\\\\\\\\\\\\\"};\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst { addon, permissions, handle } = props;\\\\\\\\n\\\\\\\\nconst { getAllAddons, setCommunityAddon } = VM.require(\\\\\\\\n  \\\\\\\\\\\\\\\"devhub.near/widget/core.adapter.devhub-contract\\\\\\\\\\\\\\\"\\\\\\\\n);\\\\\\\\n\\\\\\\\nif (!getAllAddons || !setCommunityAddon) {\\\\\\\\n  return <p>Loading modules...</p>;\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst availableAddons = getAllAddons();\\\\\\\\n\\\\\\\\nif (!availableAddons) {\\\\\\\\n  return <p>Loading addons...</p>;\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst addonMatch = availableAddons.find((it) => it.id === addon.addon_id);\\\\\\\\n\\\\\\\\nif (!addonMatch) {\\\\\\\\n  return (\\\\\\\\n    <CenteredMessage height={\\\\\\\\\\\\\\\"384px\\\\\\\\\\\\\\\"}>\\\\\\\\n      <h2>Addon with id: \\\\\\\\\\\\\\\"{addon.addon_id}\\\\\\\\\\\\\\\" not found.</h2>\\\\\\\\n    </CenteredMessage>\\\\\\\\n  );\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst config = JSON.parse(addon.parameters || \\\\\\\\\\\\\\\"null\\\\\\\\\\\\\\\");\\\\\\\\n\\\\\\\\nconst ButtonRow = styled.div`\\\\\\\\n  display: flex;\\\\\\\\n  justify-content: space-between;\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst [view, setView] = useState(props.view || \\\\\\\\\\\\\\\"viewer\\\\\\\\\\\\\\\");\\\\\\\\n\\\\\\\\nconst checkFullyRefactored = (addon_id) => {\\\\\\\\n  switch (addon_id) {\\\\\\\\n    case \\\\\\\\\\\\\\\"kanban\\\\\\\\\\\\\\\":\\\\\\\\n    case \\\\\\\\\\\\\\\"github\\\\\\\\\\\\\\\":\\\\\\\\n      return false;\\\\\\\\n    default:\\\\\\\\n      return true;\\\\\\\\n  }\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst isFullyRefactored = checkFullyRefactored(addon.addon_id);\\\\\\\\n\\\\\\\\nreturn (\\\\\\\\n  <Container>\\\\\\\\n    {isFullyRefactored && // Unfully refactored addons have the configurator built in.\\\\\\\\n      // So we hide the header\\\\\\\\n      permissions.can_configure && (\\\\\\\\n        <SettingsButton\\\\\\\\n          onClick={() => setView(view === \\\\\\\\\\\\\\\"configure\\\\\\\\\\\\\\\" ? \\\\\\\\\\\\\\\"view\\\\\\\\\\\\\\\" : \\\\\\\\\\\\\\\"configure\\\\\\\\\\\\\\\")}\\\\\\\\n        >\\\\\\\\n          {view === \\\\\\\\\\\\\\\"configure\\\\\\\\\\\\\\\" ? (\\\\\\\\n            <span className=\\\\\\\\\\\\\\\"bi bi-x\\\\\\\\\\\\\\\"></span>\\\\\\\\n          ) : (\\\\\\\\n            <span className=\\\\\\\\\\\\\\\"bi bi-gear\\\\\\\\\\\\\\\"></span>\\\\\\\\n          )}\\\\\\\\n        </SettingsButton>\\\\\\\\n      )}\\\\\\\\n    <Content>\\\\\\\\n      {/* We hide in order to prevent a reload when we switch between two views */}\\\\\\\\n      <div className={`${view !== \\\\\\\\\\\\\\\"configure\\\\\\\\\\\\\\\" ? \\\\\\\\\\\\\\\"d-none\\\\\\\\\\\\\\\" : \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\"}`}>\\\\\\\\n        <Widget\\\\\\\\n          src={addonMatch.configurator_widget}\\\\\\\\n          props={{\\\\\\\\n            data: config,\\\\\\\\n            onSubmit: (data) => {\\\\\\\\n              setCommunityAddon({\\\\\\\\n                handle,\\\\\\\\n                addon: {\\\\\\\\n                  ...addon,\\\\\\\\n                  parameters: JSON.stringify(data),\\\\\\\\n                },\\\\\\\\n              });\\\\\\\\n            },\\\\\\\\n\\\\\\\\n            handle, // this is temporary prop drilling until kanban and github are migrated\\\\\\\\n            permissions,\\\\\\\\n          }}\\\\\\\\n        />\\\\\\\\n      </div>\\\\\\\\n      <div className={`${view === \\\\\\\\\\\\\\\"configure\\\\\\\\\\\\\\\" ? \\\\\\\\\\\\\\\"d-none\\\\\\\\\\\\\\\" : \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\"}`}>\\\\\\\\n        <Widget\\\\\\\\n          src={addonMatch.view_widget}\\\\\\\\n          props={{\\\\\\\\n            ...config,\\\\\\\\n            // temporary prop drilling\\\\\\\\n            handle,\\\\\\\\n            permissions,\\\\\\\\n          }}\\\\\\\\n        />\\\\\\\\n      </div>\\\\\\\\n    </Content>\\\\\\\\n  </Container>\\\\\\\\n);\\\\\\\\n\"}, \"devhub.entity.team.LabelRow\": {\"\": \"/**\\\\\\\\n * In the context of the contract, a group is essentially a member identified\\\\\\\\n * by the prefix \\\\\\\\\\\\'team:\\\\\\\\\\\\'; therefore, on the front end, we also employ \\\\\\\\\\\\'team,\\\\\\\\\\\\'\\\\\\\\n * with the user interface displaying \\\\\\\\\\\\'group\\\\\\\\\\\\' for clarity.\\\\\\\\n */\\\\\\\\n\\\\\\\\nconst { getAccessControlInfo, getRootMembers, removeMember } = VM.require(\\\\\\\\n  \\\\\\\\\\\\\\\"devhub.near/widget/core.adapter.devhub-contract\\\\\\\\\\\\\\\"\\\\\\\\n);\\\\\\\\n\\\\\\\\nif (!getAccessControlInfo || !getRootMembers || !removeMember) {\\\\\\\\n  return <p>Loading modules...</p>;\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst accessControlInfo = getAccessControlInfo();\\\\\\\\nconst rootMembers = getRootMembers();\\\\\\\\nconst allTeamNames = Object.keys(rootMembers || {});\\\\\\\\n\\\\\\\\nif (!accessControlInfo || !rootMembers) {\\\\\\\\n  return <p>Loading access control info...</p>;\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst { teamName } = props;\\\\\\\\nconst teamModerators = teamName == \\\\\\\\\\\\\\\"team:moderators\\\\\\\\\\\\\\\";\\\\\\\\nconst label = Object.keys(rootMembers[teamName].permissions)[0] || \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\";\\\\\\\\nconst metadata = accessControlInfo.members_list[teamName];\\\\\\\\nconst editPost = rootMembers[teamName].permissions[label].includes(\\\\\\\\\\\\\\\"edit-post\\\\\\\\\\\\\\\");\\\\\\\\nconst useLabels =\\\\\\\\n  rootMembers[teamName].permissions[label].includes(\\\\\\\\\\\\\\\"use-labels\\\\\\\\\\\\\\\");\\\\\\\\nconst members = rootMembers[teamName].children || [];\\\\\\\\n\\\\\\\\nconst configuratorData = {\\\\\\\\n  teamName: teamName,\\\\\\\\n  label: label,\\\\\\\\n  members,\\\\\\\\n  editPost,\\\\\\\\n  useLabels,\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst [editMode, setEditMode] = useState(false);\\\\\\\\nconst [alertMessage, setAlertMessage] = useState(\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\");\\\\\\\\n\\\\\\\\nfunction arrayEq(arr1, arr2) {\\\\\\\\n  if (arr1.length !== arr2.length) {\\\\\\\\n    return false;\\\\\\\\n  }\\\\\\\\n  const sortedArr1 = arr1.slice().sort();\\\\\\\\n  const sortedArr2 = arr2.slice().sort();\\\\\\\\n  for (let i = 0; i < sortedArr1.length; i++) {\\\\\\\\n    if (sortedArr1[i] !== sortedArr2[i]) {\\\\\\\\n      return false;\\\\\\\\n    }\\\\\\\\n  }\\\\\\\\n\\\\\\\\n  return true;\\\\\\\\n}\\\\\\\\n\\\\\\\\nfunction editTeam({\\\\\\\\n  teamName: tmnm,\\\\\\\\n  label: lbl,\\\\\\\\n  editPost: edtpst,\\\\\\\\n  useLabels: uslbls,\\\\\\\\n  members: mmbrs,\\\\\\\\n}) {\\\\\\\\n  let txn = [];\\\\\\\\n  let numberOfChanges = 0;\\\\\\\\n\\\\\\\\n  if (backwardsCompatibleTeam(teamName) !== tmnm) {\\\\\\\\n    numberOfChanges++;\\\\\\\\n    if (allTeamNames.includes(`team:${tmnm}`)) {\\\\\\\\n      return setAlertMessage(\\\\\\\\\\\\\\\"This team name already exists\\\\\\\\\\\\\\\");\\\\\\\\n    }\\\\\\\\n  }\\\\\\\\n\\\\\\\\n  console.log(label, lbl);\\\\\\\\n  if (label !== lbl) {\\\\\\\\n    const allLabels = Object.keys(accessControlInfo.rules_list);\\\\\\\\n    if (allLabels.includes(lbl)) {\\\\\\\\n      return setAlertMessage(\\\\\\\\n        \\\\\\\\\\\\\\\"This label is already restricted by another team\\\\\\\\\\\\\\\"\\\\\\\\n      );\\\\\\\\n    }\\\\\\\\n  }\\\\\\\\n\\\\\\\\n  if (editPost !== edtpst || useLabels !== uslbls) {\\\\\\\\n    numberOfChanges++;\\\\\\\\n  }\\\\\\\\n\\\\\\\\n  if (!arrayEq(members, mmbrs)) {\\\\\\\\n    numberOfChanges++;\\\\\\\\n    let membersAndTeams = Object.keys(accessControlInfo.members_list);\\\\\\\\n\\\\\\\\n    mmbrs.forEach((member) => {\\\\\\\\n      if (!membersAndTeams.includes(member)) {\\\\\\\\n        // Contract panic member does not exist in the members_list yet.\\\\\\\\n        txn.push({\\\\\\\\n          contractName: \\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\",\\\\\\\\n          methodName: \\\\\\\\\\\\\\\"add_member\\\\\\\\\\\\\\\",\\\\\\\\n          args: {\\\\\\\\n            member: member,\\\\\\\\n            metadata: {\\\\\\\\n              member_metadata_version: \\\\\\\\\\\\\\\"V0\\\\\\\\\\\\\\\",\\\\\\\\n              description: \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\",\\\\\\\\n              permissions: {},\\\\\\\\n              children: [],\\\\\\\\n              parents: [],\\\\\\\\n            },\\\\\\\\n          },\\\\\\\\n          gas: Big(10).pow(14),\\\\\\\\n        });\\\\\\\\n      }\\\\\\\\n    });\\\\\\\\n  }\\\\\\\\n\\\\\\\\n  if (numberOfChanges < 1) {\\\\\\\\n    return setAlertMessage(\\\\\\\\\\\\\\\"No changes found.\\\\\\\\\\\\\\\");\\\\\\\\n  }\\\\\\\\n\\\\\\\\n  Near.call([\\\\\\\\n    ...txn,\\\\\\\\n    {\\\\\\\\n      contractName: \\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\",\\\\\\\\n      methodName: \\\\\\\\\\\\\\\"edit_member\\\\\\\\\\\\\\\",\\\\\\\\n      args: {\\\\\\\\n        member: `team:${tmnm}`,\\\\\\\\n        metadata: {\\\\\\\\n          member_metadata_version: \\\\\\\\\\\\\\\"V0\\\\\\\\\\\\\\\",\\\\\\\\n          description: \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\",\\\\\\\\n          permissions: {\\\\\\\\n            [lbl]: [\\\\\\\\n              ...(edtpst ? [\\\\\\\\\\\\\\\"edit-post\\\\\\\\\\\\\\\"] : []),\\\\\\\\n              ...(uslbls ? [\\\\\\\\\\\\\\\"use-labels\\\\\\\\\\\\\\\"] : []),\\\\\\\\n            ],\\\\\\\\n          },\\\\\\\\n          children: mmbrs,\\\\\\\\n          parents: [],\\\\\\\\n        },\\\\\\\\n      },\\\\\\\\n      gas: Big(10).pow(14),\\\\\\\\n    },\\\\\\\\n  ]);\\\\\\\\n}\\\\\\\\n\\\\\\\\nfunction deleteLabel() {\\\\\\\\n  // contract side this is called a team / member\\\\\\\\n  removeMember(teamName);\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst backwardsCompatibleLabel = (oldLabel) => {\\\\\\\\n  if (typeof oldLabel === \\\\\\\\\\\\\\\"string\\\\\\\\\\\\\\\")\\\\\\\\n    return oldLabel.startsWith(\\\\\\\\\\\\\\\"starts-with:\\\\\\\\\\\\\\\") ? oldLabel.slice(12) : oldLabel;\\\\\\\\n  else return \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\";\\\\\\\\n};\\\\\\\\n// Teams are saved in contract by their prefix \\\\\\\\\\\\'team:\\\\\\\\\\\\'\\\\\\\\n// This function makes the teamName display friendly.\\\\\\\\nconst backwardsCompatibleTeam = (oldTeam) =>\\\\\\\\n  oldTeam.startsWith(\\\\\\\\\\\\\\\"team:\\\\\\\\\\\\\\\") ? oldTeam.slice(5) : oldTeam;\\\\\\\\n\\\\\\\\nreturn (\\\\\\\\n  <>\\\\\\\\n    <tr>\\\\\\\\n      <th scope=\\\\\\\\\\\\\\\"row\\\\\\\\\\\\\\\" class=\\\\\\\\\\\\\\\" justify-content-center align-items-center p-3\\\\\\\\\\\\\\\">\\\\\\\\n        <Widget\\\\\\\\n          src={\\\\\\\\\\\\\\\"devhub.near/widget/devhub.components.atom.Tag\\\\\\\\\\\\\\\"}\\\\\\\\n          props={{\\\\\\\\n            tag: backwardsCompatibleLabel(label),\\\\\\\\n          }}\\\\\\\\n        />\\\\\\\\n      </th>\\\\\\\\n      <td class=\\\\\\\\\\\\\\\" justify-content-center align-items-center p-3\\\\\\\\\\\\\\\">\\\\\\\\n        {(label || \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\").startsWith(\\\\\\\\\\\\\\\"starts-with:\\\\\\\\\\\\\\\")\\\\\\\\n          ? \\\\\\\\\\\\\\\"Multiple labels with common prefix\\\\\\\\\\\\\\\"\\\\\\\\n          : \\\\\\\\\\\\\\\"Single label\\\\\\\\\\\\\\\"}\\\\\\\\n      </td>\\\\\\\\n      <td class=\\\\\\\\\\\\\\\" justify-content-center align-items-center p-3\\\\\\\\\\\\\\\">\\\\\\\\n        {metadata.children && (\\\\\\\\n          <div class=\\\\\\\\\\\\\\\"vstack\\\\\\\\\\\\\\\">\\\\\\\\n            {metadata.children.length ? (\\\\\\\\n              metadata.children.map((child) => <p>{child}</p>)\\\\\\\\n            ) : (\\\\\\\\n              <div>No members in this group</div>\\\\\\\\n            )}\\\\\\\\n          </div>\\\\\\\\n        )}\\\\\\\\n      </td>\\\\\\\\n      <td class=\\\\\\\\\\\\\\\" justify-content-center align-items-center p-3\\\\\\\\\\\\\\\">\\\\\\\\n        <div class=\\\\\\\\\\\\\\\"form-check\\\\\\\\\\\\\\\">\\\\\\\\n          <input\\\\\\\\n            class=\\\\\\\\\\\\\\\"form-check-input\\\\\\\\\\\\\\\"\\\\\\\\n            type=\\\\\\\\\\\\\\\"checkbox\\\\\\\\\\\\\\\"\\\\\\\\n            value={useLabels}\\\\\\\\n            id={`useLabelsCheckbox${identifier}`}\\\\\\\\n            checked={useLabels}\\\\\\\\n            onChange={() => setUseLabels(!useLabels)}\\\\\\\\n            disabled={disabled}\\\\\\\\n          />\\\\\\\\n        </div>\\\\\\\\n      </td>\\\\\\\\n      <td class=\\\\\\\\\\\\\\\" justify-content-center align-items-center p-3\\\\\\\\\\\\\\\">\\\\\\\\n        <div class=\\\\\\\\\\\\\\\"form-check\\\\\\\\\\\\\\\">\\\\\\\\n          <input\\\\\\\\n            class=\\\\\\\\\\\\\\\"form-check-input\\\\\\\\\\\\\\\"\\\\\\\\n            type=\\\\\\\\\\\\\\\"checkbox\\\\\\\\\\\\\\\"\\\\\\\\n            value={editPost}\\\\\\\\n            id={`editPostCheckbox${identifier}`}\\\\\\\\n            checked={editPost}\\\\\\\\n            onChange={() => setEditPost(!editPost)}\\\\\\\\n            disabled={disabled}\\\\\\\\n          />\\\\\\\\n        </div>\\\\\\\\n      </td>\\\\\\\\n      <td class=\\\\\\\\\\\\\\\" justify-content-center align-items-center p-3\\\\\\\\\\\\\\\">\\\\\\\\n        {editMode ? (\\\\\\\\n          <Widget\\\\\\\\n            src={\\\\\\\\\\\\\\\"devhub.near/widget/devhub.components.molecule.Button\\\\\\\\\\\\\\\"}\\\\\\\\n            props={{\\\\\\\\n              classNames: { root: \\\\\\\\\\\\\\\"btn-outline-danger\\\\\\\\\\\\\\\" },\\\\\\\\n              icon: {\\\\\\\\n                type: \\\\\\\\\\\\\\\"bootstrap_icon\\\\\\\\\\\\\\\",\\\\\\\\n                variant: \\\\\\\\\\\\\\\"bi-trash\\\\\\\\\\\\\\\",\\\\\\\\n              },\\\\\\\\n              label: \\\\\\\\\\\\\\\"Delete\\\\\\\\\\\\\\\",\\\\\\\\n              onClick: deleteLabel,\\\\\\\\n            }}\\\\\\\\n          />\\\\\\\\n        ) : (\\\\\\\\n          <Widget\\\\\\\\n            src={\\\\\\\\\\\\\\\"devhub.near/widget/devhub.components.molecule.Button\\\\\\\\\\\\\\\"}\\\\\\\\n            props={{\\\\\\\\n              classNames: { root: \\\\\\\\\\\\\\\"btn-outline-light text-dark\\\\\\\\\\\\\\\" },\\\\\\\\n              icon: {\\\\\\\\n                type: \\\\\\\\\\\\\\\"bootstrap_icon\\\\\\\\\\\\\\\",\\\\\\\\n                variant: \\\\\\\\\\\\\\\"bi-gear-wide-connected\\\\\\\\\\\\\\\",\\\\\\\\n              },\\\\\\\\n              label: \\\\\\\\\\\\\\\"Edit\\\\\\\\\\\\\\\",\\\\\\\\n              onClick: () => setEditMode(true),\\\\\\\\n            }}\\\\\\\\n          />\\\\\\\\n        )}\\\\\\\\n      </td>\\\\\\\\n    </tr>\\\\\\\\n    {editMode && (\\\\\\\\n      <tr>\\\\\\\\n        <th scope=\\\\\\\\\\\\\\\"row\\\\\\\\\\\\\\\" colspan=\\\\\\\\\\\\\\\"6\\\\\\\\\\\\\\\">\\\\\\\\n          <Widget\\\\\\\\n            src={\\\\\\\\\\\\\\\"devhub.near/widget/devhub.entity.team.Configurator\\\\\\\\\\\\\\\"}\\\\\\\\n            props={{\\\\\\\\n              data: configuratorData,\\\\\\\\n              onCancel: () => setEditMode(false),\\\\\\\\n              onSubmit: (params) => editTeam(params),\\\\\\\\n            }}\\\\\\\\n          />\\\\\\\\n          <Widget\\\\\\\\n            src=\\\\\\\\\\\\\\\"devhub.near/widget/devhub.components.atom.Alert\\\\\\\\\\\\\\\"\\\\\\\\n            props={{\\\\\\\\n              onClose: () => setAlertMessage(\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\"),\\\\\\\\n              message: alertMessage,\\\\\\\\n            }}\\\\\\\\n          />\\\\\\\\n        </th>\\\\\\\\n      </tr>\\\\\\\\n    )}\\\\\\\\n  </>\\\\\\\\n);\\\\\\\\n\"}, \"devhub.entity.community.Teams\": {\"\": \"const { handle } = props;\\\\\\\\n\\\\\\\\nconst { Tile } =\\\\\\\\n  VM.require(\\\\\\\\\\\\\\\"devhub.near/widget/devhub.components.molecule.Tile\\\\\\\\\\\\\\\") ||\\\\\\\\n  (() => <></>);\\\\\\\\n\\\\\\\\nif (!Tile) {\\\\\\\\n  return <div>Loading...</div>;\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst { getCommunity } = VM.require(\\\\\\\\n  \\\\\\\\\\\\\\\"devhub.near/widget/core.adapter.devhub-contract\\\\\\\\\\\\\\\"\\\\\\\\n);\\\\\\\\n\\\\\\\\nconst communityData = getCommunity({ handle });\\\\\\\\n\\\\\\\\nif (communityData === null) {\\\\\\\\n  return <div>Loading...</div>;\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst UserList = ({ name, users }) => (\\\\\\\\n  <div>\\\\\\\\n    {(users ?? []).map((user, i) => (\\\\\\\\n      <div className={`row ${i < users.length - 1 ? \\\\\\\\\\\\\\\"mb-3\\\\\\\\\\\\\\\" : \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\"}`}>\\\\\\\\n        <div class=\\\\\\\\\\\\\\\"col-3\\\\\\\\\\\\\\\">\\\\\\\\n          <b>{name + \\\\\\\\\\\\\\\" #\\\\\\\\\\\\\\\" + (i + 1)}</b>\\\\\\\\n        </div>\\\\\\\\n\\\\\\\\n        <div class=\\\\\\\\\\\\\\\"col-9\\\\\\\\\\\\\\\">\\\\\\\\n          <span\\\\\\\\n            key={user}\\\\\\\\n            className=\\\\\\\\\\\\\\\"d-inline-flex\\\\\\\\\\\\\\\"\\\\\\\\n            style={{ fontWeight: 500 }}\\\\\\\\n          >\\\\\\\\n            <Widget\\\\\\\\n              src=\\\\\\\\\\\\\\\"neardevgov.near/widget/ProfileLine\\\\\\\\\\\\\\\"\\\\\\\\n              props={{ accountId: user, hideAccountId: true, tooltip: true }}\\\\\\\\n            />\\\\\\\\n          </span>\\\\\\\\n        </div>\\\\\\\\n      </div>\\\\\\\\n    ))}\\\\\\\\n  </div>\\\\\\\\n);\\\\\\\\n\\\\\\\\nreturn (\\\\\\\\n  <div className=\\\\\\\\\\\\\\\"d-flex flex-column align-items-center gap-4 w-100\\\\\\\\\\\\\\\">\\\\\\\\n    <Tile className=\\\\\\\\\\\\\\\"p-3 w-100 bg-white mb-3\\\\\\\\\\\\\\\" style={{ maxWidth: 960 }}>\\\\\\\\n      <div>\\\\\\\\n        <div\\\\\\\\n          className=\\\\\\\\\\\\\\\"d-flex align-items-center justify-content-between w-100 pb-3\\\\\\\\\\\\\\\"\\\\\\\\n          style={{ minHeight: 30 }}\\\\\\\\n        >\\\\\\\\n          <h5 className=\\\\\\\\\\\\\\\"h5 d-inline-flex gap-2 m-0\\\\\\\\\\\\\\\">\\\\\\\\n            <span>Community Admins</span>\\\\\\\\n          </h5>\\\\\\\\n        </div>\\\\\\\\n        <UserList name=\\\\\\\\\\\\\\\"Admin\\\\\\\\\\\\\\\" users={communityData.admins} />\\\\\\\\n      </div>\\\\\\\\n    </Tile>\\\\\\\\n  </div>\\\\\\\\n);\\\\\\\\n\"}, \"devhub.page.admin.homepageTab\": {\"\": \"const {\\\\\\\\n  getFeaturedCommunities,\\\\\\\\n  setFeaturedCommunities,\\\\\\\\n  getAllCommunitiesMetadata,\\\\\\\\n} = VM.require(\\\\\\\\\\\\\\\"devhub.near/widget/core.adapter.devhub-contract\\\\\\\\\\\\\\\");\\\\\\\\n\\\\\\\\nconst { Tile } =\\\\\\\\n  VM.require(\\\\\\\\\\\\\\\"devhub.near/widget/devhub.components.molecule.Tile\\\\\\\\\\\\\\\") ||\\\\\\\\n  (() => <></>);\\\\\\\\n\\\\\\\\nif (\\\\\\\\n  !getFeaturedCommunities ||\\\\\\\\n  !setFeaturedCommunities ||\\\\\\\\n  !getAllCommunitiesMetadata ||\\\\\\\\n  !Tile\\\\\\\\n) {\\\\\\\\n  return <p>Loading modules...</p>;\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst fc = getFeaturedCommunities();\\\\\\\\n// The state will stay empty even after the data right data has been retrieved\\\\\\\\nif (!fc) {\\\\\\\\n  return <p>Loading featured communities...</p>;\\\\\\\\n}\\\\\\\\nconst featuredCommunityList = fc || [];\\\\\\\\n\\\\\\\\nconst allCommunities = getAllCommunitiesMetadata();\\\\\\\\n\\\\\\\\nconst [communityMessage, setCommunityMessage] = useState(\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\");\\\\\\\\nconst [previewConnect, setPreviewConnect] = useState(false);\\\\\\\\n\\\\\\\\nconst [communityHandles, setCommunityHandles] = useState(\\\\\\\\n  featuredCommunityList.map(({ handle }) => handle)\\\\\\\\n);\\\\\\\\nconst handleResetItems = () => {\\\\\\\\n  setCommunityHandles(featuredCommunityList.map(({ handle }) => handle));\\\\\\\\n};\\\\\\\\n\\\\\\\\nfunction handleSubmit() {\\\\\\\\n  if (communityHandles.length < 4) {\\\\\\\\n    return setCommunityMessage(\\\\\\\\\\\\\\\"Can\\\\\\\\\\\\'t set fewer than 4 communities\\\\\\\\\\\\\\\");\\\\\\\\n  }\\\\\\\\n  setFeaturedCommunities({ handles: communityHandles });\\\\\\\\n}\\\\\\\\n\\\\\\\\nreturn (\\\\\\\\n  <>\\\\\\\\n    <Widget\\\\\\\\n      src=\\\\\\\\\\\\\\\"devhub.near/widget/devhub.components.atom.Alert\\\\\\\\\\\\\\\"\\\\\\\\n      props={{\\\\\\\\n        onClose: () => setCommunityMessage(\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\"),\\\\\\\\n        message: communityMessage,\\\\\\\\n      }}\\\\\\\\n    />\\\\\\\\n    <Tile className=\\\\\\\\\\\\\\\"p-3 mb-3\\\\\\\\\\\\\\\">\\\\\\\\n      <h3> Manage featured communities</h3>\\\\\\\\n      <Widget\\\\\\\\n        src=\\\\\\\\\\\\\\\"devhub.near/widget/devhub.components.molecule.ListEditor\\\\\\\\\\\\\\\"\\\\\\\\n        props={{\\\\\\\\n          data: {\\\\\\\\n            maxLength: 5,\\\\\\\\n            placeholder: \\\\\\\\\\\\\\\"Community handle\\\\\\\\\\\\\\\",\\\\\\\\n            prefix: \\\\\\\\\\\\\\\"Community handle\\\\\\\\\\\\\\\",\\\\\\\\n            list: communityHandles,\\\\\\\\n          },\\\\\\\\n          setList: setCommunityHandles,\\\\\\\\n          validate: (newItem) => {\\\\\\\\n            return allCommunities.map(({ handle }) => handle).includes(newItem);\\\\\\\\n          },\\\\\\\\n          invalidate: () =>\\\\\\\\n            setCommunityMessage(\\\\\\\\n              \\\\\\\\\\\\\\\"This community handle does not exist, make sure you use an existing handle.\\\\\\\\\\\\\\\"\\\\\\\\n            ),\\\\\\\\n        }}\\\\\\\\n      />\\\\\\\\n\\\\\\\\n      <div\\\\\\\\n        className={\\\\\\\\\\\\\\\"d-flex align-items-center justify-content-end gap-3 mt-4\\\\\\\\\\\\\\\"}\\\\\\\\n      >\\\\\\\\n        <Widget\\\\\\\\n          src={\\\\\\\\\\\\\\\"devhub.near/widget/devhub.components.molecule.Button\\\\\\\\\\\\\\\"}\\\\\\\\n          props={{\\\\\\\\n            classNames: {\\\\\\\\n              root: \\\\\\\\\\\\\\\"btn-outline-danger shadow-none border-0\\\\\\\\\\\\\\\",\\\\\\\\n            },\\\\\\\\n            label: \\\\\\\\\\\\\\\"Cancel\\\\\\\\\\\\\\\",\\\\\\\\n            onClick: handleResetItems,\\\\\\\\n          }}\\\\\\\\n        />\\\\\\\\n        <Widget\\\\\\\\n          src={\\\\\\\\\\\\\\\"devhub.near/widget/devhub.components.molecule.Button\\\\\\\\\\\\\\\"}\\\\\\\\n          props={{\\\\\\\\n            classNames: { root: \\\\\\\\\\\\\\\"btn\\\\\\\\\\\\\\\" },\\\\\\\\n            icon: {\\\\\\\\n              type: \\\\\\\\\\\\\\\"bootstrap_icon\\\\\\\\\\\\\\\",\\\\\\\\n              variant: \\\\\\\\\\\\\\\"bi-check-circle-fill\\\\\\\\\\\\\\\",\\\\\\\\n            },\\\\\\\\n            label: \\\\\\\\\\\\\\\"Submit\\\\\\\\\\\\\\\",\\\\\\\\n            onClick: handleSubmit,\\\\\\\\n          }}\\\\\\\\n        />\\\\\\\\n      </div>\\\\\\\\n    </Tile>\\\\\\\\n    <Widget\\\\\\\\n      src={\\\\\\\\\\\\\\\"devhub.near/widget/devhub.components.molecule.PostControls\\\\\\\\\\\\\\\"}\\\\\\\\n      props={{\\\\\\\\n        onClick: () => setPreviewConnect(!previewConnect),\\\\\\\\n        icon: previewConnect ? \\\\\\\\\\\\\\\"bi bi-toggle-on\\\\\\\\\\\\\\\" : \\\\\\\\\\\\\\\"bi bi-toggle-off\\\\\\\\\\\\\\\",\\\\\\\\n        title: \\\\\\\\\\\\\\\"Preview homepage\\\\\\\\\\\\\\\",\\\\\\\\n        testId: \\\\\\\\\\\\\\\"preview-homepage\\\\\\\\\\\\\\\",\\\\\\\\n      }}\\\\\\\\n    />\\\\\\\\n    <div class=\\\\\\\\\\\\\\\"mt-3\\\\\\\\\\\\\\\">\\\\\\\\n      {previewConnect && (\\\\\\\\n        <Widget\\\\\\\\n          src=\\\\\\\\\\\\\\\"devhub.near/widget/devhub.components.island.connect\\\\\\\\\\\\\\\"\\\\\\\\n          props={{ ...props }}\\\\\\\\n        />\\\\\\\\n      )}\\\\\\\\n    </div>\\\\\\\\n  </>\\\\\\\\n);\\\\\\\\n\"}, \"devhub.entity.team.Configurator\": {\"\": \"const { Tile } =\\\\\\\\n  VM.require(\\\\\\\\\\\\\\\"devhub.near/widget/devhub.components.molecule.Tile\\\\\\\\\\\\\\\") ||\\\\\\\\n  (() => <></>);\\\\\\\\n\\\\\\\\nif (!Tile) {\\\\\\\\n  return <div>Loading...</div>;\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst { data, onSubmit, onCancel } = props;\\\\\\\\n\\\\\\\\nconst Container = styled.div`\\\\\\\\n  display: flex;\\\\\\\\n  flex-direction: column;\\\\\\\\n  width: 100%;\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst Item = styled.div`\\\\\\\\n  padding: 10px;\\\\\\\\n  margin: 5px;\\\\\\\\n  display: flex;\\\\\\\\n  align-items: center;\\\\\\\\n  flex-direction: row;\\\\\\\\n  gap: 10px;\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst backwardsCompatibleLabel = (oldLabel) => {\\\\\\\\n  if (typeof oldLabel === \\\\\\\\\\\\\\\"string\\\\\\\\\\\\\\\")\\\\\\\\n    return oldLabel.startsWith(\\\\\\\\\\\\\\\"starts-with:\\\\\\\\\\\\\\\") ? oldLabel.slice(12) : oldLabel;\\\\\\\\n  else return \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\";\\\\\\\\n};\\\\\\\\nconst backwardsCompatibleTeam = (oldTeam) => {\\\\\\\\n  if (typeof oldTeam === \\\\\\\\\\\\\\\"string\\\\\\\\\\\\\\\")\\\\\\\\n    return oldTeam.startsWith(\\\\\\\\\\\\\\\"team:\\\\\\\\\\\\\\\") ? oldTeam.slice(5) : oldTeam;\\\\\\\\n  else return \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\";\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst initialData = data.members || [];\\\\\\\\nconst [newItem, setNewItem] = useState(\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\");\\\\\\\\nconst [teamName, setTeamName] = useState(\\\\\\\\n  backwardsCompatibleTeam(data.teamName) || \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\"\\\\\\\\n);\\\\\\\\nconst [label, setLabel] = useState(data.label || \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\");\\\\\\\\nconst [labelType, setLabelType] = useState(\\\\\\\\n  (data.label || \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\").startsWith(\\\\\\\\\\\\\\\"starts-with:\\\\\\\\\\\\\\\") ? \\\\\\\\\\\\\\\"starts-with:\\\\\\\\\\\\\\\" : \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\"\\\\\\\\n);\\\\\\\\nconst [editPost, setEditPost] = useState(data.editPost || false);\\\\\\\\nconst [useLabels, setUseLabels] = useState(data.useLabels || false);\\\\\\\\nconst [members, setMembers] = useState(initialData || []);\\\\\\\\n\\\\\\\\nconst [showPreview, setShowPreview] = useState(data.showPreview || []);\\\\\\\\n\\\\\\\\nconst [warning, setWarning] = useState(\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\");\\\\\\\\n\\\\\\\\nconst handleAddItem = () => {\\\\\\\\n  if (newItem) {\\\\\\\\n    setMembers([...members, newItem]);\\\\\\\\n    setNewItem(\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\");\\\\\\\\n  }\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst handleDeleteItem = (index) => {\\\\\\\\n  const updatedData = [...members];\\\\\\\\n  updatedData.splice(index, 1);\\\\\\\\n  setMembers(updatedData);\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst handleSubmit = () => {\\\\\\\\n  if (newItem !== \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\") {\\\\\\\\n    return setWarning(\\\\\\\\n      \\\\\\\\\\\\\\\"Don\\\\\\\\\\\\'t forget to add the last member or clear the field to get rid of this warning.\\\\\\\\\\\\\\\"\\\\\\\\n    );\\\\\\\\n  }\\\\\\\\n  if (teamName && teamName.startsWith(\\\\\\\\\\\\\\\"team:\\\\\\\\\\\\\\\")) {\\\\\\\\n    return setWarning(\\\\\\\\\\\\\\\"The team name can\\\\\\\\\\\\'t start with \\\\\\\\\\\\'team:\\\\\\\\\\\\'\\\\\\\\\\\\\\\");\\\\\\\\n  }\\\\\\\\n  if (\\\\\\\\n    !backwardsCompatibleLabel(label) ||\\\\\\\\n    !label.trim() ||\\\\\\\\n    label === \\\\\\\\\\\\\\\"starts-with:\\\\\\\\\\\\\\\"\\\\\\\\n  ) {\\\\\\\\n    return setWarning(\\\\\\\\\\\\\\\"Invalid label, make sure it\\\\\\\\\\\\'s not taken\\\\\\\\\\\\\\\");\\\\\\\\n  }\\\\\\\\n  if (members.length < 1) {\\\\\\\\n    return setWarning(\\\\\\\\\\\\\\\"Add at least one member to the team\\\\\\\\\\\\\\\");\\\\\\\\n  }\\\\\\\\n\\\\\\\\n  onSubmit({\\\\\\\\n    teamName,\\\\\\\\n    label: labelType + backwardsCompatibleLabel(label),\\\\\\\\n    editPost,\\\\\\\\n    useLabels,\\\\\\\\n    members: members.map((member) => member.trim()),\\\\\\\\n  });\\\\\\\\n};\\\\\\\\n\\\\\\\\nreturn (\\\\\\\\n  <Tile className=\\\\\\\\\\\\\\\"p-3\\\\\\\\\\\\\\\">\\\\\\\\n    <Container>\\\\\\\\n      <h3>{data.teamName == \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\" ? \\\\\\\\\\\\\\\"Edit label\\\\\\\\\\\\\\\" : \\\\\\\\\\\\\\\"Create label\\\\\\\\\\\\\\\"}</h3>\\\\\\\\n      <Widget\\\\\\\\n        src=\\\\\\\\\\\\\\\"devhub.near/widget/devhub.components.atom.Alert\\\\\\\\\\\\\\\"\\\\\\\\n        props={{\\\\\\\\n          onClose: () => setWarning(\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\"),\\\\\\\\n          message: warning,\\\\\\\\n        }}\\\\\\\\n      />\\\\\\\\n      {/* Moderators is only editable through the CLI except for the members property */}\\\\\\\\n      {teamName !== \\\\\\\\\\\\\\\"moderators\\\\\\\\\\\\\\\" && (\\\\\\\\n        <>\\\\\\\\n          <div className=\\\\\\\\\\\\\\\"flex-grow-1\\\\\\\\\\\\\\\">\\\\\\\\n            <span>Group name</span>\\\\\\\\n            <Widget\\\\\\\\n              src=\\\\\\\\\\\\\\\"devhub.near/widget/devhub.components.molecule.Input\\\\\\\\\\\\\\\"\\\\\\\\n              props={{\\\\\\\\n                className: \\\\\\\\\\\\\\\"flex-grow-1\\\\\\\\\\\\\\\",\\\\\\\\n                skipPaddingGap: true,\\\\\\\\n                onChange: (e) => setTeamName(e.target.value),\\\\\\\\n                value: teamName,\\\\\\\\n                placeholder: \\\\\\\\\\\\\\\"Team name\\\\\\\\\\\\\\\",\\\\\\\\n              }}\\\\\\\\n            />\\\\\\\\n          </div>\\\\\\\\n\\\\\\\\n          <div className=\\\\\\\\\\\\\\\"flex-grow-1\\\\\\\\\\\\\\\">\\\\\\\\n            <div>\\\\\\\\n              Would you like this group to limit their restrictions to a single\\\\\\\\n              label, or would you prefer them to restrict it with any label that\\\\\\\\n              follows a similar convention?\\\\\\\\n            </div>\\\\\\\\n            <div className=\\\\\\\\\\\\\\\"col-lg-6 mb-2\\\\\\\\\\\\\\\">\\\\\\\\n              <select\\\\\\\\n                onChange={(event) => setLabelType(event.target.value)}\\\\\\\\n                class=\\\\\\\\\\\\\\\"form-select\\\\\\\\\\\\\\\"\\\\\\\\n                aria-label=\\\\\\\\\\\\\\\"Select type\\\\\\\\\\\\\\\"\\\\\\\\n                value={labelType}\\\\\\\\n              >\\\\\\\\n                <option value=\\\\\\\\\\\\\\\"starts-with:\\\\\\\\\\\\\\\">\\\\\\\\n                  Restrict multiple labels with a common prefix\\\\\\\\n                </option>\\\\\\\\n                <option value=\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\">Restrict a single label</option>\\\\\\\\n              </select>\\\\\\\\n              <div>What would you like the restricted label to be?</div>\\\\\\\\n              <Widget\\\\\\\\n                src=\\\\\\\\\\\\\\\"devhub.near/widget/devhub.components.molecule.Input\\\\\\\\\\\\\\\"\\\\\\\\n                props={{\\\\\\\\n                  className: \\\\\\\\\\\\\\\"flex-grow-1\\\\\\\\\\\\\\\",\\\\\\\\n                  onChange: (e) => setLabel(e.target.value),\\\\\\\\n                  value: backwardsCompatibleLabel(label),\\\\\\\\n                  skipPaddingGap: true,\\\\\\\\n                  placeholder: \\\\\\\\\\\\\\\"label\\\\\\\\\\\\\\\",\\\\\\\\n                  inputProps: {\\\\\\\\n                    prefix: labelType,\\\\\\\\n                  },\\\\\\\\n                }}\\\\\\\\n              />\\\\\\\\n              <div>Select label permissions</div>\\\\\\\\n              <Widget\\\\\\\\n                src=\\\\\\\\\\\\\\\"devhub.near/widget/devhub.entity.team.LabelPermissions\\\\\\\\\\\\\\\"\\\\\\\\n                props={{\\\\\\\\n                  identifier: data.teamName,\\\\\\\\n                  editPost,\\\\\\\\n                  setEditPost,\\\\\\\\n                  useLabels,\\\\\\\\n                  setUseLabels,\\\\\\\\n                  disabled: false,\\\\\\\\n                }}\\\\\\\\n              />\\\\\\\\n            </div>\\\\\\\\n          </div>\\\\\\\\n        </>\\\\\\\\n      )}\\\\\\\\n      {members.map((item, index) => (\\\\\\\\n        <Item key={index}>\\\\\\\\n          <div className=\\\\\\\\\\\\\\\"flex-grow-1\\\\\\\\\\\\\\\">\\\\\\\\n            <Widget\\\\\\\\n              src=\\\\\\\\\\\\\\\"devhub.near/widget/devhub.components.molecule.Input\\\\\\\\\\\\\\\"\\\\\\\\n              props={{\\\\\\\\n                className: \\\\\\\\\\\\\\\"flex-grow-1\\\\\\\\\\\\\\\",\\\\\\\\n                value: item,\\\\\\\\n                skipPaddingGap: true,\\\\\\\\n                placeholder: \\\\\\\\\\\\\\\"member\\\\\\\\\\\\\\\",\\\\\\\\n                inputProps: {\\\\\\\\n                  prefix: \\\\\\\\\\\\\\\"member\\\\\\\\\\\\\\\",\\\\\\\\n                  disabled: true,\\\\\\\\n                },\\\\\\\\n              }}\\\\\\\\n            />\\\\\\\\n          </div>\\\\\\\\n          <button\\\\\\\\n            className=\\\\\\\\\\\\\\\"btn btn-outline-danger\\\\\\\\\\\\\\\"\\\\\\\\n            onClick={() => handleDeleteItem(index)}\\\\\\\\n          >\\\\\\\\n            <i className=\\\\\\\\\\\\\\\"bi bi-trash-fill\\\\\\\\\\\\\\\" />\\\\\\\\n          </button>\\\\\\\\n        </Item>\\\\\\\\n      ))}\\\\\\\\n      <Item>\\\\\\\\n        <div className=\\\\\\\\\\\\\\\"flex-grow-1\\\\\\\\\\\\\\\">\\\\\\\\n          <Widget\\\\\\\\n            src=\\\\\\\\\\\\\\\"devhub.near/widget/devhub.components.molecule.Input\\\\\\\\\\\\\\\"\\\\\\\\n            props={{\\\\\\\\n              className: \\\\\\\\\\\\\\\"flex-grow-1\\\\\\\\\\\\\\\",\\\\\\\\n              skipPaddingGap: true,\\\\\\\\n              onChange: (e) => setNewItem(e.target.value),\\\\\\\\n              value: newItem,\\\\\\\\n              placeholder: \\\\\\\\\\\\\\\"member\\\\\\\\\\\\\\\",\\\\\\\\n              inputProps: {\\\\\\\\n                prefix: \\\\\\\\\\\\\\\"member\\\\\\\\\\\\\\\",\\\\\\\\n              },\\\\\\\\n            }}\\\\\\\\n          />\\\\\\\\n        </div>\\\\\\\\n        <button\\\\\\\\n          className=\\\\\\\\\\\\\\\"btn btn-success add-member\\\\\\\\\\\\\\\"\\\\\\\\n          onClick={handleAddItem}\\\\\\\\n          disabled={newItem === \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\"}\\\\\\\\n        >\\\\\\\\n          <i className=\\\\\\\\\\\\\\\"bi bi-plus\\\\\\\\\\\\\\\" />\\\\\\\\n        </button>\\\\\\\\n      </Item>\\\\\\\\n      <div\\\\\\\\n        className={\\\\\\\\\\\\\\\"d-flex align-items-center justify-content-end gap-3 mt-4\\\\\\\\\\\\\\\"}\\\\\\\\n      >\\\\\\\\n        <Widget\\\\\\\\n          src={\\\\\\\\\\\\\\\"devhub.near/widget/devhub.components.molecule.Button\\\\\\\\\\\\\\\"}\\\\\\\\n          props={{\\\\\\\\n            classNames: { root: \\\\\\\\\\\\\\\"btn-outline-danger shadow-none border-0\\\\\\\\\\\\\\\" },\\\\\\\\n            label: \\\\\\\\\\\\\\\"Cancel\\\\\\\\\\\\\\\",\\\\\\\\n            onClick: () => onCancel(),\\\\\\\\n          }}\\\\\\\\n        />\\\\\\\\n        <Widget\\\\\\\\n          src={\\\\\\\\\\\\\\\"devhub.near/widget/devhub.components.molecule.Button\\\\\\\\\\\\\\\"}\\\\\\\\n          props={{\\\\\\\\n            classNames: { root: \\\\\\\\\\\\\\\"btn-success\\\\\\\\\\\\\\\" },\\\\\\\\n            icon: {\\\\\\\\n              type: \\\\\\\\\\\\\\\"bootstrap_icon\\\\\\\\\\\\\\\",\\\\\\\\n              variant: \\\\\\\\\\\\\\\"bi-check-circle-fill\\\\\\\\\\\\\\\",\\\\\\\\n            },\\\\\\\\n            label: \\\\\\\\\\\\\\\"Submit\\\\\\\\\\\\\\\",\\\\\\\\n            onClick: handleSubmit,\\\\\\\\n          }}\\\\\\\\n        />\\\\\\\\n      </div>\\\\\\\\n    </Container>\\\\\\\\n  </Tile>\\\\\\\\n);\\\\\\\\n\"}, \"devhub.page.admin.moderatorsTab\": {\"\": \"const { accessControlInfo, createEditTeam } = props;\\\\\\\\n\\\\\\\\nconst { Tile } =\\\\\\\\n  VM.require(\\\\\\\\\\\\\\\"devhub.near/widget/devhub.components.molecule.Tile\\\\\\\\\\\\\\\") ||\\\\\\\\n  (() => <></>);\\\\\\\\n\\\\\\\\nif (!Tile) {\\\\\\\\n  return <div>Loading...</div>;\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst [editModerators, setEditModerators] = useState(false);\\\\\\\\nconst [moderators, setModerators] = useState(\\\\\\\\n  accessControlInfo.members_list[\\\\\\\\\\\\\\\"team:moderators\\\\\\\\\\\\\\\"].children || []\\\\\\\\n);\\\\\\\\n\\\\\\\\nconst handleEditModerators = () => {\\\\\\\\n  createEditTeam({\\\\\\\\n    teamName: \\\\\\\\\\\\\\\"moderators\\\\\\\\\\\\\\\",\\\\\\\\n    description:\\\\\\\\n      \\\\\\\\\\\\\\\"The moderator group has permissions to edit any posts and apply all labels, including restricted ones.\\\\\\\\\\\\\\\",\\\\\\\\n    label: \\\\\\\\\\\\\\\"any\\\\\\\\\\\\\\\",\\\\\\\\n    editPost: true,\\\\\\\\n    useLabels: true,\\\\\\\\n    members: moderators,\\\\\\\\n    contractCall: \\\\\\\\\\\\\\\"edit_member\\\\\\\\\\\\\\\",\\\\\\\\n  });\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst handleCancelModerators = () => {\\\\\\\\n  setEditModerators(false);\\\\\\\\n  setModerators(accessControlInfo.members_list[\\\\\\\\\\\\\\\"team:moderators\\\\\\\\\\\\\\\"].children);\\\\\\\\n};\\\\\\\\n\\\\\\\\nreturn (\\\\\\\\n  <>\\\\\\\\n    <h1>Moderators</h1>\\\\\\\\n    <div className=\\\\\\\\\\\\\\\"card-body\\\\\\\\\\\\\\\">\\\\\\\\n      <h5>\\\\\\\\n        The moderator group has permissions to edit any posts and apply all\\\\\\\\n        labels, including restricted ones.\\\\\\\\n      </h5>\\\\\\\\n      <Widget\\\\\\\\n        src={\\\\\\\\\\\\\\\"devhub.near/widget/devhub.components.molecule.PostControls\\\\\\\\\\\\\\\"}\\\\\\\\n        props={{\\\\\\\\n          icon: \\\\\\\\\\\\\\\"bi bi-gear-wide-connected\\\\\\\\\\\\\\\",\\\\\\\\n          className: \\\\\\\\\\\\\\\"mb-3\\\\\\\\\\\\\\\",\\\\\\\\n\\\\\\\\n          title: \\\\\\\\\\\\\\\"Edit members\\\\\\\\\\\\\\\",\\\\\\\\n          onClick: () => setEditModerators(!editModerators),\\\\\\\\n          testId: \\\\\\\\\\\\\\\"edit-members\\\\\\\\\\\\\\\",\\\\\\\\n        }}\\\\\\\\n      />\\\\\\\\n    </div>\\\\\\\\n    <Tile className=\\\\\\\\\\\\\\\"p-3\\\\\\\\\\\\\\\">\\\\\\\\n      {editModerators ? (\\\\\\\\n        <>\\\\\\\\n          <Widget\\\\\\\\n            src=\\\\\\\\\\\\\\\"devhub.near/widget/devhub.components.molecule.ListEditor\\\\\\\\\\\\\\\"\\\\\\\\n            props={{\\\\\\\\n              data: {\\\\\\\\n                maxLength: 100,\\\\\\\\n                placeholder: \\\\\\\\\\\\\\\"member.near\\\\\\\\\\\\\\\",\\\\\\\\n                prefix: \\\\\\\\\\\\\\\"member\\\\\\\\\\\\\\\",\\\\\\\\n                list: moderators,\\\\\\\\n              },\\\\\\\\n              setList: setModerators,\\\\\\\\n              // Could add a check to see if it is an valid account id.\\\\\\\\n              validate: (newItem) => true,\\\\\\\\n              invalidate: () => null,\\\\\\\\n            }}\\\\\\\\n          />\\\\\\\\n          <div\\\\\\\\n            className={\\\\\\\\n              \\\\\\\\\\\\\\\"d-flex align-items-center justify-content-end gap-3 mt-4\\\\\\\\\\\\\\\"\\\\\\\\n            }\\\\\\\\n          >\\\\\\\\n            <Widget\\\\\\\\n              src={\\\\\\\\\\\\\\\"devhub.near/widget/devhub.components.molecule.Button\\\\\\\\\\\\\\\"}\\\\\\\\n              props={{\\\\\\\\n                classNames: {\\\\\\\\n                  root: \\\\\\\\\\\\\\\"btn-outline-danger shadow-none border-0\\\\\\\\\\\\\\\",\\\\\\\\n                },\\\\\\\\n                label: \\\\\\\\\\\\\\\"Cancel\\\\\\\\\\\\\\\",\\\\\\\\n                onClick: handleCancelModerators,\\\\\\\\n              }}\\\\\\\\n            />\\\\\\\\n            <Widget\\\\\\\\n              src={\\\\\\\\\\\\\\\"devhub.near/widget/devhub.components.molecule.Button\\\\\\\\\\\\\\\"}\\\\\\\\n              props={{\\\\\\\\n                classNames: { root: \\\\\\\\\\\\\\\"btn\\\\\\\\\\\\\\\" },\\\\\\\\n                icon: {\\\\\\\\n                  type: \\\\\\\\\\\\\\\"bootstrap_icon\\\\\\\\\\\\\\\",\\\\\\\\n                  variant: \\\\\\\\\\\\\\\"bi-check-circle-fill\\\\\\\\\\\\\\\",\\\\\\\\n                },\\\\\\\\n                label: \\\\\\\\\\\\\\\"Submit\\\\\\\\\\\\\\\",\\\\\\\\n                onClick: handleEditModerators,\\\\\\\\n              }}\\\\\\\\n            />\\\\\\\\n          </div>\\\\\\\\n        </>\\\\\\\\n      ) : (\\\\\\\\n        <>\\\\\\\\n          <div class=\\\\\\\\\\\\\\\"pt-4\\\\\\\\\\\\\\\">Members</div>\\\\\\\\n\\\\\\\\n          {moderators && (\\\\\\\\n            <div class=\\\\\\\\\\\\\\\"vstack\\\\\\\\\\\\\\\">\\\\\\\\n              {moderators.length ? (\\\\\\\\n                moderators.map((child) => (\\\\\\\\n                  <Tile className=\\\\\\\\\\\\\\\"w-25 p-3 m-1\\\\\\\\\\\\\\\" minHeight={10}>\\\\\\\\n                    <Widget\\\\\\\\n                      src={`neardevgov.near/widget/ProfileLine`}\\\\\\\\n                      props={{ accountId: child }}\\\\\\\\n                    />\\\\\\\\n                  </Tile>\\\\\\\\n                ))\\\\\\\\n              ) : (\\\\\\\\n                <div>No moderators</div>\\\\\\\\n              )}\\\\\\\\n            </div>\\\\\\\\n          )}\\\\\\\\n        </>\\\\\\\\n      )}\\\\\\\\n    </Tile>\\\\\\\\n  </>\\\\\\\\n);\\\\\\\\n\"}, \"devhub.components.island.connect\": {\"\": \"const { getFeaturedCommunities } = VM.require(\\\\\\\\n  \\\\\\\\\\\\\\\"devhub.near/widget/core.adapter.devhub-contract\\\\\\\\\\\\\\\"\\\\\\\\n);\\\\\\\\n\\\\\\\\nif (!getFeaturedCommunities) {\\\\\\\\n  return <p>Loading modules...</p>;\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst communities = getFeaturedCommunities();\\\\\\\\n\\\\\\\\nif (!communities) {\\\\\\\\n  return <p>Loading communities...</p>;\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst [startIndex, setStartIndex] = useState(0);\\\\\\\\nconst [endIndex, setEndIndex] = useState(2);\\\\\\\\n\\\\\\\\nconst DescriptionHeader = styled.h2`\\\\\\\\n  color: #f4f4f4;\\\\\\\\n  font-size: 1.75rem;\\\\\\\\n  font-style: normal;\\\\\\\\n  font-weight: 700;\\\\\\\\n  line-height: 120%; /* 43.2px */\\\\\\\\n\\\\\\\\n  @media screen and (max-width: 786px) {\\\\\\\\n    font-size: 1.5rem;\\\\\\\\n  }\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst Description = styled.p`\\\\\\\\n  color: #f4f4f4;\\\\\\\\n  text-shadow: 0px 4px 4px rgba(0, 0, 0, 0.25);\\\\\\\\n  font-size: 1.25rem;\\\\\\\\n  font-style: normal;\\\\\\\\n  font-weight: 400;\\\\\\\\n  line-height: 120%; /* 28.8px */\\\\\\\\n\\\\\\\\n  @media screen and (max-width: 786px) {\\\\\\\\n    font-size: 1rem;\\\\\\\\n  }\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst imageSource =\\\\\\\\n  \\\\\\\\\\\\\\\"https://ipfs.near.social/ipfs/bafkreic7wxhocbnxoo63uh6n2ur3otykbzouymobt3ebgd2b4dmdiu3764\\\\\\\\\\\\\\\";\\\\\\\\n\\\\\\\\nconst CardBody = styled.div`\\\\\\\\n  border-radius: 1rem;\\\\\\\\n  border: 1px solid #00ec97;\\\\\\\\n  background: #3f4040;\\\\\\\\n\\\\\\\\n  display: flex;\\\\\\\\n  max-width: 31.5%;\\\\\\\\n  height: 12rem;\\\\\\\\n  padding: 1.5rem;\\\\\\\\n  flex-direction: column;\\\\\\\\n  justify-content: center;\\\\\\\\n  align-items: flex-start;\\\\\\\\n  gap: 0.5rem;\\\\\\\\n  flex-shrink: 0;\\\\\\\\n  align-self: stretch;\\\\\\\\n\\\\\\\\n  h3 {\\\\\\\\n    color: #00ec97;\\\\\\\\n    font-size: 1.5rem;\\\\\\\\n    font-style: normal;\\\\\\\\n    font-weight: 700;\\\\\\\\n    line-height: 100%; /* 40px */\\\\\\\\n  }\\\\\\\\n\\\\\\\\n  p {\\\\\\\\n    color: #818181;\\\\\\\\n    font-size: 1.125rem;\\\\\\\\n    font-style: normal;\\\\\\\\n    font-weight: 400;\\\\\\\\n    line-height: 120%; /* 28.8px */\\\\\\\\n  }\\\\\\\\n\\\\\\\\n  a {\\\\\\\\n    color: #00ec97;\\\\\\\\n    font-size: 1.25rem;\\\\\\\\n    font-style: normal;\\\\\\\\n    font-weight: 700;\\\\\\\\n    line-height: 120%; /* 28.8px */\\\\\\\\n\\\\\\\\n    &:hover {\\\\\\\\n      text-decoration: none;\\\\\\\\n    }\\\\\\\\n  }\\\\\\\\n\\\\\\\\n  @media screen and (max-width: 768px) {\\\\\\\\n    max-width: 80%;\\\\\\\\n  }\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst Card = ({ title, description, href }) => {\\\\\\\\n  return (\\\\\\\\n    <CardBody>\\\\\\\\n      <h3>{title}</h3>\\\\\\\\n      <p>{description}</p>\\\\\\\\n      <a href={href}>Learn more \\\\\\\\u{2192}</a>\\\\\\\\n    </CardBody>\\\\\\\\n  );\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst Cards = communities.map((com) => {\\\\\\\\n  return {\\\\\\\\n    title: com.name,\\\\\\\\n    description: com.description,\\\\\\\\n    href: \\\\\\\\\\\\\\\"/devhub.near/widget/app?page=community&handle=\\\\\\\\\\\\\\\" + com.handle,\\\\\\\\n  };\\\\\\\\n});\\\\\\\\n\\\\\\\\nconst ForwardButton = styled.button`\\\\\\\\n  all: unset;\\\\\\\\n  position: absolute;\\\\\\\\n  right: 0;\\\\\\\\n\\\\\\\\n  margin: 1rem;\\\\\\\\n\\\\\\\\n  &:hover,\\\\\\\\n  &:active {\\\\\\\\n    border: none;\\\\\\\\n    outline: none;\\\\\\\\n  }\\\\\\\\n\\\\\\\\n  ${endIndex >= Cards.length - 1 && \\\\\\\\\\\\\\\"svg {transform: rotate(180deg);}\\\\\\\\\\\\\\\"}\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst handleForward = () => {\\\\\\\\n  if (endIndex <= Cards.length - 1) {\\\\\\\\n    setStartIndex(endIndex + 1);\\\\\\\\n    setEndIndex(endIndex + 3);\\\\\\\\n  } else {\\\\\\\\n    setStartIndex(0);\\\\\\\\n    setEndIndex(2);\\\\\\\\n  }\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst CTA = styled.a`\\\\\\\\n  color: #00ec97 !important;\\\\\\\\n  font-size: 1.5rem;\\\\\\\\n  font-style: normal;\\\\\\\\n  font-weight: 700;\\\\\\\\n  line-height: 120%; /* 28.8px */\\\\\\\\n\\\\\\\\n  @media screen and (max-width: 768px) {\\\\\\\\n    font-size: 1.25rem;\\\\\\\\n  }\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst Subheading = styled.h3`\\\\\\\\n  color: #8a8e93;\\\\\\\\n  font-size: 2.25rem;\\\\\\\\n  font-style: normal;\\\\\\\\n  font-weight: 700;\\\\\\\\n  line-height: 120%; /* 43.2px */\\\\\\\\n\\\\\\\\n  padding: 3rem;\\\\\\\\n  padding-top: 0;\\\\\\\\n\\\\\\\\n  @media screen and (max-width: 786px) {\\\\\\\\n    padding: 1rem;\\\\\\\\n    padding-top: 0;\\\\\\\\n    font-size: 1.5rem;\\\\\\\\n  }\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst Container = styled.div`\\\\\\\\n  width: 100%;\\\\\\\\n  display: flex;\\\\\\\\n  position: relative;\\\\\\\\n  align-items: center;\\\\\\\\n\\\\\\\\n  @media screen and (max-width: 768px) {\\\\\\\\n    flex-direction: column;\\\\\\\\n  }\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst DescriptionContainer = styled.div`\\\\\\\\n  padding: 3rem;\\\\\\\\n  width: 55%;\\\\\\\\n\\\\\\\\n  @media screen and (max-width: 768px) {\\\\\\\\n    padding: 1rem;\\\\\\\\n    width: 100%;\\\\\\\\n  }\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst ImageContainer = styled.div`\\\\\\\\n  position: absolute;\\\\\\\\n  top: 25%;\\\\\\\\n  right: 0;\\\\\\\\n\\\\\\\\n  width: 50%;\\\\\\\\n  height: 65%;\\\\\\\\n\\\\\\\\n  @media screen and (max-width: 768px) {\\\\\\\\n    position: relative;\\\\\\\\n    padding: 0 1rem;\\\\\\\\n\\\\\\\\n    height: 225px;\\\\\\\\n    width: 100%;\\\\\\\\n  }\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst Image = styled.img`\\\\\\\\n  width: 100%;\\\\\\\\n  height: 90%;\\\\\\\\n  object-fit: cover;\\\\\\\\n  clip-path: polygon(15% 0, 100% 0%, 100% 100%, 0% 100%);\\\\\\\\n\\\\\\\\n  @media screen and (max-width: 768px) {\\\\\\\\n    clip-path: none;\\\\\\\\n  }\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst CardsContainer = styled.div`\\\\\\\\n  padding: 3rem;\\\\\\\\n  padding-top: 0;\\\\\\\\n\\\\\\\\n  position: relative;\\\\\\\\n  display: flex;\\\\\\\\n  flex-direction: row;\\\\\\\\n  gap: 1rem;\\\\\\\\n  width: 100%;\\\\\\\\n  align-items: center;\\\\\\\\n\\\\\\\\n  @media screen and (max-width: 768px) {\\\\\\\\n    display: none;\\\\\\\\n  }\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst ArrowIcon = () => {\\\\\\\\n  return (\\\\\\\\n    <svg\\\\\\\\n      xmlns=\\\\\\\\\\\\\\\"http://www.w3.org/2000/svg\\\\\\\\\\\\\\\"\\\\\\\\n      width=\\\\\\\\\\\\\\\"48\\\\\\\\\\\\\\\"\\\\\\\\n      height=\\\\\\\\\\\\\\\"49\\\\\\\\\\\\\\\"\\\\\\\\n      viewBox=\\\\\\\\\\\\\\\"0 0 48 49\\\\\\\\\\\\\\\"\\\\\\\\n      fill=\\\\\\\\\\\\\\\"none\\\\\\\\\\\\\\\"\\\\\\\\n    >\\\\\\\\n      <path\\\\\\\\n        fill-rule=\\\\\\\\\\\\\\\"evenodd\\\\\\\\\\\\\\\"\\\\\\\\n        clip-rule=\\\\\\\\\\\\\\\"evenodd\\\\\\\\\\\\\\\"\\\\\\\\n        d=\\\\\\\\\\\\\\\"M32.9999 24.5L17.9999 39.5L15.8999 37.4L28.7999 24.5L15.8999 11.6L17.9999 9.5L32.9999 24.5Z\\\\\\\\\\\\\\\"\\\\\\\\n        fill=\\\\\\\\\\\\\\\"#00EC97\\\\\\\\\\\\\\\"\\\\\\\\n      />\\\\\\\\n    </svg>\\\\\\\\n  );\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst CTAContainer = styled.div`\\\\\\\\n  padding: 3rem;\\\\\\\\n  padding-top: 0;\\\\\\\\n\\\\\\\\n  @media screen and (max-width: 786px) {\\\\\\\\n    padding: 1rem;\\\\\\\\n    padding-top: 0;\\\\\\\\n  }\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst MobileCards = styled.div`\\\\\\\\n  display: none;\\\\\\\\n\\\\\\\\n  @media screen and (max-width: 768px) {\\\\\\\\n    display: flex;\\\\\\\\n    padding: 1rem;\\\\\\\\n    flex-direction: row;\\\\\\\\n    overflow-x: auto;\\\\\\\\n    gap: 1rem;\\\\\\\\n  }\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst Content = (\\\\\\\\n  <>\\\\\\\\n    <Container>\\\\\\\\n      <DescriptionContainer>\\\\\\\\n        <DescriptionHeader>\\\\\\\\n          Communities are the lifeblood of /dev/hub\\\\\\\\n        </DescriptionHeader>\\\\\\\\n        <Description>\\\\\\\\n          We believe that communities are the foundation of a decentralized\\\\\\\\n          ecosystem. Explore and engage with our diverse range of communities\\\\\\\\n          today.\\\\\\\\n        </Description>\\\\\\\\n      </DescriptionContainer>\\\\\\\\n      <ImageContainer>\\\\\\\\n        <Image src={imageSource} />\\\\\\\\n      </ImageContainer>\\\\\\\\n    </Container>\\\\\\\\n    <Subheading>Featured Communities</Subheading>\\\\\\\\n    <CardsContainer>\\\\\\\\n      {Cards.slice(startIndex, endIndex + 1).map((card, idx) => (\\\\\\\\n        <Card\\\\\\\\n          title={card.title}\\\\\\\\n          description={card.description}\\\\\\\\n          href={card.href}\\\\\\\\n          key={`project-card-${idx}`}\\\\\\\\n        />\\\\\\\\n      ))}\\\\\\\\n      <ForwardButton onClick={handleForward}>\\\\\\\\n        <ArrowIcon />\\\\\\\\n      </ForwardButton>\\\\\\\\n    </CardsContainer>\\\\\\\\n    <MobileCards>\\\\\\\\n      {Cards.map((card, idx) => (\\\\\\\\n        <Card\\\\\\\\n          title={card.title}\\\\\\\\n          description={card.description}\\\\\\\\n          href={card.href}\\\\\\\\n          key={`mobile-card-${idx}`}\\\\\\\\n        />\\\\\\\\n      ))}\\\\\\\\n    </MobileCards>\\\\\\\\n    <CTAContainer>\\\\\\\\n      <CTA href=\\\\\\\\\\\\\\\"/devhub.near/widget/app?page=communities\\\\\\\\\\\\\\\">\\\\\\\\n        Explore all communities \\\\\\\\u{2192}\\\\\\\\n      </CTA>\\\\\\\\n    </CTAContainer>\\\\\\\\n  </>\\\\\\\\n);\\\\\\\\n\\\\\\\\nreturn (\\\\\\\\n  <Widget\\\\\\\\n    src=\\\\\\\\\\\\\\\"devhub.near/widget/devhub.components.island.home-section\\\\\\\\\\\\\\\"\\\\\\\\n    props={{\\\\\\\\n      title: \\\\\\\\\\\\\\\"/connect\\\\\\\\\\\\\\\",\\\\\\\\n      children: Content,\\\\\\\\n      background: true,\\\\\\\\n    }}\\\\\\\\n  />\\\\\\\\n);\\\\\\\\n\"}, \"devhub.page.community.configuration\": {\"\": \"const { Tile } =\\\\\\\\n  VM.require(\\\\\\\\\\\\\\\"devhub.near/widget/devhub.components.molecule.Tile\\\\\\\\\\\\\\\") ||\\\\\\\\n  (() => <></>);\\\\\\\\n\\\\\\\\nif (!Tile) {\\\\\\\\n  return <div>Loading...</div>;\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst {\\\\\\\\n  permissions,\\\\\\\\n  handle,\\\\\\\\n  community,\\\\\\\\n  setCommunityAddons,\\\\\\\\n  deleteCommunity,\\\\\\\\n  updateCommunity,\\\\\\\\n} = props;\\\\\\\\n\\\\\\\\nconst [communityData, setCommunityData] = useState(community || {});\\\\\\\\nconst [selectedAddon, setSelectedAddon] = useState(null);\\\\\\\\nconst [hasUnsavedChanges, setHasUnsavedChanges] = useState(false);\\\\\\\\n\\\\\\\\nconst sectionSubmit = (sectionData) => {\\\\\\\\n  const updatedCommunityData = {\\\\\\\\n    ...Object.entries(sectionData).reduce(\\\\\\\\n      (update, [propertyKey, propertyValue]) => ({\\\\\\\\n        ...update,\\\\\\\\n\\\\\\\\n        [propertyKey]:\\\\\\\\n          typeof propertyValue !== \\\\\\\\\\\\\\\"string\\\\\\\\\\\\\\\" || (propertyValue?.length ?? 0) > 0\\\\\\\\n            ? propertyValue ?? null\\\\\\\\n            : null,\\\\\\\\n      }),\\\\\\\\n\\\\\\\\n      communityData\\\\\\\\n    ),\\\\\\\\n  };\\\\\\\\n  setCommunityData(updatedCommunityData);\\\\\\\\n  setHasUnsavedChanges(true);\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst hasConfigurePermissions = permissions.can_configure;\\\\\\\\nconst hasDeletePermissions = permissions.can_delete;\\\\\\\\n\\\\\\\\nreturn (\\\\\\\\n  <div\\\\\\\\n    className=\\\\\\\\\\\\\\\"d-flex flex-column align-items-center gap-4 w-100 p-4\\\\\\\\\\\\\\\"\\\\\\\\n    style={{ maxWidth: 960, marginBottom: \\\\\\\\\\\\\\\"60px\\\\\\\\\\\\\\\" }}\\\\\\\\n  >\\\\\\\\n    <Tile className={\\\\\\\\\\\\\\\"bg-white\\\\\\\\\\\\\\\"}>\\\\\\\\n      <Widget\\\\\\\\n        src={\\\\\\\\n          \\\\\\\\\\\\\\\"devhub.near/widget/devhub.entity.community.configuration.BrandingConfigurator\\\\\\\\\\\\\\\"\\\\\\\\n        }\\\\\\\\n        props={{\\\\\\\\n          onSubmit: sectionSubmit,\\\\\\\\n          data: communityData,\\\\\\\\n          hasConfigurePermissions,\\\\\\\\n          link: `/devhub.near/widget/app?page=community&handle=${handle}`,\\\\\\\\n        }}\\\\\\\\n      />\\\\\\\\n    </Tile>\\\\\\\\n    <Tile className={\\\\\\\\\\\\\\\"p-3 bg-white\\\\\\\\\\\\\\\"}>\\\\\\\\n      <Widget\\\\\\\\n        src={\\\\\\\\n          \\\\\\\\\\\\\\\"devhub.near/widget/devhub.entity.community.configuration.ConfigurationSection\\\\\\\\\\\\\\\"\\\\\\\\n        }\\\\\\\\n        props={{\\\\\\\\n          title: \\\\\\\\\\\\\\\"Community Information\\\\\\\\\\\\\\\",\\\\\\\\n          hasConfigurePermissions,\\\\\\\\n          Configurator: (p) => (\\\\\\\\n            <Widget\\\\\\\\n              src={\\\\\\\\n                \\\\\\\\\\\\\\\"devhub.near/widget/devhub.entity.community.configuration.InformationConfigurator\\\\\\\\\\\\\\\"\\\\\\\\n              }\\\\\\\\n              props={{\\\\\\\\n                data: communityData,\\\\\\\\n                onSubmit: sectionSubmit,\\\\\\\\n                ...p,\\\\\\\\n              }}\\\\\\\\n            />\\\\\\\\n          ),\\\\\\\\n        }}\\\\\\\\n      />\\\\\\\\n    </Tile>\\\\\\\\n    <Tile className={\\\\\\\\\\\\\\\"p-3 bg-white\\\\\\\\\\\\\\\"}>\\\\\\\\n      <Widget\\\\\\\\n        src={\\\\\\\\n          \\\\\\\\\\\\\\\"devhub.near/widget/devhub.entity.community.configuration.ConfigurationSection\\\\\\\\\\\\\\\"\\\\\\\\n        }\\\\\\\\n        props={{\\\\\\\\n          title: \\\\\\\\\\\\\\\"About\\\\\\\\\\\\\\\",\\\\\\\\n          hasConfigurePermissions,\\\\\\\\n          Configurator: (p) => (\\\\\\\\n            <Widget\\\\\\\\n              src={\\\\\\\\n                \\\\\\\\\\\\\\\"devhub.near/widget/devhub.entity.community.configuration.AboutConfigurator\\\\\\\\\\\\\\\"\\\\\\\\n              }\\\\\\\\n              props={{\\\\\\\\n                data: communityData,\\\\\\\\n                onSubmit: sectionSubmit,\\\\\\\\n                ...p,\\\\\\\\n              }}\\\\\\\\n            />\\\\\\\\n          ),\\\\\\\\n        }}\\\\\\\\n      />\\\\\\\\n    </Tile>\\\\\\\\n    <Tile className={\\\\\\\\\\\\\\\"p-3 bg-white\\\\\\\\\\\\\\\"}>\\\\\\\\n      <Widget\\\\\\\\n        src={\\\\\\\\n          \\\\\\\\\\\\\\\"devhub.near/widget/devhub.entity.community.configuration.ConfigurationSection\\\\\\\\\\\\\\\"\\\\\\\\n        }\\\\\\\\n        props={{\\\\\\\\n          title: \\\\\\\\\\\\\\\"Community Admins\\\\\\\\\\\\\\\",\\\\\\\\n          hasConfigurePermissions,\\\\\\\\n          Configurator: (p) => (\\\\\\\\n            <Widget\\\\\\\\n              src={\\\\\\\\n                \\\\\\\\\\\\\\\"devhub.near/widget/devhub.entity.community.configuration.AccessControlConfigurator\\\\\\\\\\\\\\\"\\\\\\\\n              }\\\\\\\\n              props={{\\\\\\\\n                data: communityData,\\\\\\\\n                onSubmit: sectionSubmit,\\\\\\\\n                ...p,\\\\\\\\n              }}\\\\\\\\n            />\\\\\\\\n          ),\\\\\\\\n        }}\\\\\\\\n      />\\\\\\\\n    </Tile>\\\\\\\\n    {hasConfigurePermissions && (\\\\\\\\n      <Tile className={\\\\\\\\\\\\\\\"p-3 bg-white\\\\\\\\\\\\\\\"}>\\\\\\\\n        <Widget\\\\\\\\n          src={\\\\\\\\n            \\\\\\\\\\\\\\\"devhub.near/widget/devhub.entity.community.configuration.ConfigurationSection\\\\\\\\\\\\\\\"\\\\\\\\n          }\\\\\\\\n          props={{\\\\\\\\n            title: \\\\\\\\\\\\\\\"Add-Ons\\\\\\\\\\\\\\\",\\\\\\\\n            hasConfigurePermissions,\\\\\\\\n            Configurator: (p) => (\\\\\\\\n              <Widget\\\\\\\\n                src={\\\\\\\\n                  \\\\\\\\\\\\\\\"devhub.near/widget/devhub.entity.community.configuration.AddonsConfigurator\\\\\\\\\\\\\\\"\\\\\\\\n                }\\\\\\\\n                props={{\\\\\\\\n                  data: communityData.addons || [],\\\\\\\\n                  onSubmit: (v) => setCommunityAddons({ handle, addons: v }),\\\\\\\\n                  ...p,\\\\\\\\n                }}\\\\\\\\n              />\\\\\\\\n            ),\\\\\\\\n          }}\\\\\\\\n        />\\\\\\\\n      </Tile>\\\\\\\\n    )}\\\\\\\\n    {hasDeletePermissions && (\\\\\\\\n      <div\\\\\\\\n        className=\\\\\\\\\\\\\\\"d-flex justify-content-center gap-4 p-4 w-100\\\\\\\\\\\\\\\"\\\\\\\\n        style={{ maxWidth: 896 }}\\\\\\\\n      >\\\\\\\\n        <Widget\\\\\\\\n          src={\\\\\\\\\\\\\\\"devhub.near/widget/devhub.components.molecule.Button\\\\\\\\\\\\\\\"}\\\\\\\\n          props={{\\\\\\\\n            classNames: { root: \\\\\\\\\\\\\\\"btn-lg btn-outline-danger border-none\\\\\\\\\\\\\\\" },\\\\\\\\n            label: \\\\\\\\\\\\\\\"Delete community\\\\\\\\\\\\\\\",\\\\\\\\n            onClick: () => deleteCommunity({ handle }),\\\\\\\\n          }}\\\\\\\\n        />\\\\\\\\n      </div>\\\\\\\\n    )}\\\\\\\\n    {hasConfigurePermissions && hasUnsavedChanges && (\\\\\\\\n      <div\\\\\\\\n        className=\\\\\\\\\\\\\\\"position-fixed end-0 bottom-0 bg-transparent pe-4 pb-4\\\\\\\\\\\\\\\"\\\\\\\\n        style={{ borderTopLeftRadius: \\\\\\\\\\\\\\\"100%\\\\\\\\\\\\\\\" }}\\\\\\\\n      >\\\\\\\\n        <Widget\\\\\\\\n          src={\\\\\\\\\\\\\\\"devhub.near/widget/devhub.components.molecule.Button\\\\\\\\\\\\\\\"}\\\\\\\\n          props={{\\\\\\\\n            classNames: { root: \\\\\\\\\\\\\\\"btn-lg btn-success\\\\\\\\\\\\\\\" },\\\\\\\\n            icon: { type: \\\\\\\\\\\\\\\"svg_icon\\\\\\\\\\\\\\\", variant: \\\\\\\\\\\\\\\"floppy_drive\\\\\\\\\\\\\\\" },\\\\\\\\n            label: \\\\\\\\\\\\\\\"Save\\\\\\\\\\\\\\\",\\\\\\\\n            onClick: () =>\\\\\\\\n              updateCommunity({ handle, community: communityData }), // TODO : Track changes in State\\\\\\\\n          }}\\\\\\\\n        />\\\\\\\\n      </div>\\\\\\\\n    )}\\\\\\\\n  </div>\\\\\\\\n);\\\\\\\\n\"}, \"devhub.components.molecule.ListEditor\": {\"\": \"const { data, setList, validate, invalidate } = props;\\\\\\\\n\\\\\\\\nconst [newItem, setNewItem] = useState(\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\");\\\\\\\\n\\\\\\\\nconst handleAddItem = () => {\\\\\\\\n  if (validate(newItem)) {\\\\\\\\n    setList([...data.list, newItem]);\\\\\\\\n    setNewItem(\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\");\\\\\\\\n  } else {\\\\\\\\n    return invalidate();\\\\\\\\n  }\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst handleDeleteItem = (index) => {\\\\\\\\n  const updatedData = [...data.list];\\\\\\\\n  updatedData.splice(index, 1);\\\\\\\\n  setList(updatedData);\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst Item = styled.div`\\\\\\\\n  padding: 10px;\\\\\\\\n  margin: 5px;\\\\\\\\n  display: flex;\\\\\\\\n  align-items: center;\\\\\\\\n  flex-direction: row;\\\\\\\\n  gap: 10px;\\\\\\\\n`;\\\\\\\\n\\\\\\\\nreturn (\\\\\\\\n  <>\\\\\\\\n    {data.list.map((item, index) => (\\\\\\\\n      <Item key={index}>\\\\\\\\n        <div className=\\\\\\\\\\\\\\\"flex-grow-1\\\\\\\\\\\\\\\">\\\\\\\\n          <Widget\\\\\\\\n            src=\\\\\\\\\\\\\\\"devhub.near/widget/devhub.components.molecule.Input\\\\\\\\\\\\\\\"\\\\\\\\n            props={{\\\\\\\\n              className: \\\\\\\\\\\\\\\"flex-grow-1\\\\\\\\\\\\\\\",\\\\\\\\n              value: item,\\\\\\\\n              skipPaddingGap: true,\\\\\\\\n              placeholder: data.placeholder,\\\\\\\\n              inputProps: {\\\\\\\\n                prefix: data.prefix,\\\\\\\\n                disabled: true,\\\\\\\\n              },\\\\\\\\n            }}\\\\\\\\n          />\\\\\\\\n        </div>\\\\\\\\n        <button\\\\\\\\n          className=\\\\\\\\\\\\\\\"btn btn-outline-danger\\\\\\\\\\\\\\\"\\\\\\\\n          onClick={() => handleDeleteItem(index)}\\\\\\\\n        >\\\\\\\\n          <i className=\\\\\\\\\\\\\\\"bi bi-trash-fill\\\\\\\\\\\\\\\" />\\\\\\\\n        </button>\\\\\\\\n      </Item>\\\\\\\\n    ))}\\\\\\\\n    {data.list.length < data.maxLength && (\\\\\\\\n      <Item>\\\\\\\\n        <div className=\\\\\\\\\\\\\\\"flex-grow-1\\\\\\\\\\\\\\\">\\\\\\\\n          <Widget\\\\\\\\n            src=\\\\\\\\\\\\\\\"devhub.near/widget/devhub.components.molecule.Input\\\\\\\\\\\\\\\"\\\\\\\\n            props={{\\\\\\\\n              className: \\\\\\\\\\\\\\\"flex-grow-1\\\\\\\\\\\\\\\",\\\\\\\\n              skipPaddingGap: true,\\\\\\\\n              onChange: (e) => setNewItem(e.target.value),\\\\\\\\n              value: newItem,\\\\\\\\n              placeholder: data.placeholder,\\\\\\\\n              inputProps: {\\\\\\\\n                prefix: data.prefix,\\\\\\\\n              },\\\\\\\\n            }}\\\\\\\\n          />\\\\\\\\n        </div>\\\\\\\\n        <button\\\\\\\\n          className=\\\\\\\\\\\\\\\"btn btn-success add-member\\\\\\\\\\\\\\\"\\\\\\\\n          onClick={handleAddItem}\\\\\\\\n          disabled={newItem === \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\"}\\\\\\\\n          data-testid=\\\\\\\\\\\\\\\"add-to-list\\\\\\\\\\\\\\\"\\\\\\\\n        >\\\\\\\\n          <i className=\\\\\\\\\\\\\\\"bi bi-plus\\\\\\\\\\\\\\\" />\\\\\\\\n        </button>\\\\\\\\n      </Item>\\\\\\\\n    )}\\\\\\\\n  </>\\\\\\\\n);\\\\\\\\n\"}, \"devhub.entity.addon.blog.Configurator\": {\"\": \"const { data, handle, onSubmit } = props;\\\\\\\\n\\\\\\\\nconst { Tile } =\\\\\\\\n  VM.require(\\\\\\\\\\\\\\\"devhub.near/widget/devhub.components.molecule.Tile\\\\\\\\\\\\\\\") ||\\\\\\\\n  (() => <></>);\\\\\\\\n\\\\\\\\nif (!Tile) {\\\\\\\\n  return <div>Loading...</div>;\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst Container = styled.div`\\\\\\\\n  display: flex;\\\\\\\\n  flex-direction: column;\\\\\\\\n  width: 100%;\\\\\\\\n  padding: 20px;\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst Item = styled.div`\\\\\\\\n  padding: 10px;\\\\\\\\n  margin: 5px;\\\\\\\\n  display: flex;\\\\\\\\n  align-items: center;\\\\\\\\n  flex-direction: row;\\\\\\\\n  gap: 10px;\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst EditableField = styled.input`\\\\\\\\n  flex: 1;\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst initialData = data;\\\\\\\\n\\\\\\\\nreturn (\\\\\\\\n  <Tile className=\\\\\\\\\\\\\\\"p-3 bg-white\\\\\\\\\\\\\\\">\\\\\\\\n    <Container>\\\\\\\\n      <Widget\\\\\\\\n        src={\\\\\\\\\\\\\\\"devhub.near/widget/devhub.entity.addon.blog.editor.index\\\\\\\\\\\\\\\"}\\\\\\\\n        props={{\\\\\\\\n          data,\\\\\\\\n          handle,\\\\\\\\n        }}\\\\\\\\n      />\\\\\\\\n    </Container>\\\\\\\\n  </Tile>\\\\\\\\n);\\\\\\\\n\"}, \"devhub.entity.addon.telegram.Configurator\": {\"\": \"const { Tile } =\\\\\\\\n  VM.require(\\\\\\\\\\\\\\\"devhub.near/widget/devhub.components.molecule.Tile\\\\\\\\\\\\\\\") ||\\\\\\\\n  (() => <></>);\\\\\\\\n\\\\\\\\nif (!Tile) {\\\\\\\\n  return <div>Loading...</div>;\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst { data, onSubmit } = props;\\\\\\\\n\\\\\\\\nconst Container = styled.div`\\\\\\\\n  display: flex;\\\\\\\\n  flex-direction: column;\\\\\\\\n  width: 100%;\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst Item = styled.div`\\\\\\\\n  padding: 10px;\\\\\\\\n  margin: 5px;\\\\\\\\n  display: flex;\\\\\\\\n  align-items: center;\\\\\\\\n  flex-direction: row;\\\\\\\\n  gap: 10px;\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst EditableField = styled.input`\\\\\\\\n  flex: 1;\\\\\\\\n`;\\\\\\\\nconst initialData = data.handles;\\\\\\\\nconst [handles, setHandles] = useState(initialData || []);\\\\\\\\nconst [newItem, setNewItem] = useState(\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\");\\\\\\\\n\\\\\\\\nconst handleAddItem = () => {\\\\\\\\n  if (newItem) {\\\\\\\\n    setHandles([...handles, newItem]);\\\\\\\\n    setNewItem(\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\");\\\\\\\\n  }\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst handleDeleteItem = (index) => {\\\\\\\\n  const updatedData = [...handles];\\\\\\\\n  updatedData.splice(index, 1);\\\\\\\\n  setHandles(updatedData);\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst handleSubmit = () => {\\\\\\\\n  onSubmit({ handles: handles.map((handle) => handle.trim()) });\\\\\\\\n};\\\\\\\\n\\\\\\\\nreturn (\\\\\\\\n  <Tile className=\\\\\\\\\\\\\\\"p-3\\\\\\\\\\\\\\\">\\\\\\\\n    <Container>\\\\\\\\n      {handles.map((item, index) => (\\\\\\\\n        <Item key={index}>\\\\\\\\n          <div className=\\\\\\\\\\\\\\\"flex-grow-1\\\\\\\\\\\\\\\">\\\\\\\\n            <Widget\\\\\\\\n              src=\\\\\\\\\\\\\\\"devhub.near/widget/devhub.components.molecule.Input\\\\\\\\\\\\\\\"\\\\\\\\n              props={{\\\\\\\\n                className: \\\\\\\\\\\\\\\"flex-grow-1\\\\\\\\\\\\\\\",\\\\\\\\n                value: item,\\\\\\\\n                placeholder: \\\\\\\\\\\\\\\"Telegram Handle\\\\\\\\\\\\\\\",\\\\\\\\n                inputProps: {\\\\\\\\n                  prefix: \\\\\\\\\\\\\\\"https://t.me/\\\\\\\\\\\\\\\",\\\\\\\\n                  disabled: true,\\\\\\\\n                },\\\\\\\\n              }}\\\\\\\\n            />\\\\\\\\n          </div>\\\\\\\\n          <button\\\\\\\\n            className=\\\\\\\\\\\\\\\"btn btn-outline-danger\\\\\\\\\\\\\\\"\\\\\\\\n            onClick={() => handleDeleteItem(index)}\\\\\\\\n          >\\\\\\\\n            <i className=\\\\\\\\\\\\\\\"bi bi-trash-fill\\\\\\\\\\\\\\\" />\\\\\\\\n          </button>\\\\\\\\n        </Item>\\\\\\\\n      ))}\\\\\\\\n      <Item>\\\\\\\\n        <div className=\\\\\\\\\\\\\\\"flex-grow-1\\\\\\\\\\\\\\\">\\\\\\\\n          <Widget\\\\\\\\n            src=\\\\\\\\\\\\\\\"devhub.near/widget/devhub.components.molecule.Input\\\\\\\\\\\\\\\"\\\\\\\\n            props={{\\\\\\\\n              className: \\\\\\\\\\\\\\\"flex-grow-1\\\\\\\\\\\\\\\",\\\\\\\\n              onChange: (e) => setNewItem(e.target.value),\\\\\\\\n              value: newItem,\\\\\\\\n              placeholder: \\\\\\\\\\\\\\\"Telegram Handle\\\\\\\\\\\\\\\",\\\\\\\\n              inputProps: {\\\\\\\\n                prefix: \\\\\\\\\\\\\\\"https://t.me/\\\\\\\\\\\\\\\",\\\\\\\\n              },\\\\\\\\n            }}\\\\\\\\n          />\\\\\\\\n        </div>\\\\\\\\n        <button\\\\\\\\n          className=\\\\\\\\\\\\\\\"btn btn-success\\\\\\\\\\\\\\\"\\\\\\\\n          onClick={handleAddItem}\\\\\\\\n          disabled={newItem === \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\"}\\\\\\\\n        >\\\\\\\\n          <i className=\\\\\\\\\\\\\\\"bi bi-plus\\\\\\\\\\\\\\\" />\\\\\\\\n        </button>\\\\\\\\n      </Item>\\\\\\\\n      <div\\\\\\\\n        className={\\\\\\\\\\\\\\\"d-flex align-items-center justify-content-end gap-3 mt-4\\\\\\\\\\\\\\\"}\\\\\\\\n      >\\\\\\\\n        <Widget\\\\\\\\n          src={\\\\\\\\\\\\\\\"devhub.near/widget/devhub.components.molecule.Button\\\\\\\\\\\\\\\"}\\\\\\\\n          props={{\\\\\\\\n            classNames: { root: \\\\\\\\\\\\\\\"btn-success\\\\\\\\\\\\\\\" },\\\\\\\\n            disabled: initialData === handles,\\\\\\\\n            icon: {\\\\\\\\n              type: \\\\\\\\\\\\\\\"bootstrap_icon\\\\\\\\\\\\\\\",\\\\\\\\n              variant: \\\\\\\\\\\\\\\"bi-check-circle-fill\\\\\\\\\\\\\\\",\\\\\\\\n            },\\\\\\\\n            label: \\\\\\\\\\\\\\\"Submit\\\\\\\\\\\\\\\",\\\\\\\\n            onClick: handleSubmit,\\\\\\\\n          }}\\\\\\\\n        />\\\\\\\\n      </div>\\\\\\\\n    </Container>\\\\\\\\n  </Tile>\\\\\\\\n);\\\\\\\\n\"}}}}}"
      }
    ],
    "actions_agg": {
      "deposit": 0
    },
    "outcomes": {
      "status": true
    },
    "outcomes_agg": {
      "transaction_fee": 2.4554672318469e+21
    }
  },
  {
    "id": "1766057465",
    "receipt_id": "56vbHgNuZERABdWgAK9hnF91byCtxZt15qZC97xCMznD",
    "predecessor_account_id": "system",
    "receiver_account_id": "devhub.near",
    "receipt_kind": "ACTION",
    "receipt_block": {
      "block_hash": "474WCqUvooaZ7p5ppco7bChT2NbTgxXCVvfavnbnifDY",
      "block_height": 108274796,
      "block_timestamp": 1702929171993421800
    },
    "receipt_outcome": {
      "gas_burnt": 223182562500,
      "tokens_burnt": 0,
      "executor_account_id": "devhub.near",
      "status": true
    },
    "transaction_hash": "7jTfh2WV6GwPFgvBwM79qmA1jThq8auj3VdMUtSNiF3K",
    "included_in_block_hash": "4TPAPQVMzcQbW5XWdgA5gNf3TM8S28LAgTsMSuHJVPb7",
    "block_timestamp": "1702929169859375921",
    "block": {
      "block_height": 108274794
    },
    "receipt_conversion_tokens_burnt": "253355546589600000000",
    "actions": [
      {
        "action": "TRANSFER",
        "method": null,
        "deposit": 1.8689351446398497e+23,
        "fee": 0,
        "args": null
      }
    ],
    "actions_agg": {
      "deposit": 0
    },
    "outcomes": {
      "status": true
    },
    "outcomes_agg": {
      "transaction_fee": 2.4554672318469e+21
    }
  },
  {
    "id": "1776665927",
    "receipt_id": "HA7FW4qU9pCwP2MTFCfrrAaDq6Zg9HxLhuiKVwR2prsx",
    "predecessor_account_id": "devhub.near",
    "receiver_account_id": "social.near",
    "receipt_kind": "ACTION",
    "receipt_block": {
      "block_hash": "AV591oFogyaiubsArhQYtajeCWFMhgENuXtMoa1qK6zV",
      "block_height": 108339538,
      "block_timestamp": 1703002065639334400
    },
    "receipt_outcome": {
      "gas_burnt": 6724670447520,
      "tokens_burnt": 672467044752000000000,
      "executor_account_id": "social.near",
      "status": true
    },
    "transaction_hash": "HPjDhcs8teyXJuxQxEZXJLEGa8JMseR6QYjFxXJRSufP",
    "included_in_block_hash": "BVKd6LgJmQQLB4TXUdekhhs8DgjYxZjPQtH6WMiVZno1",
    "block_timestamp": "1703002064380459589",
    "block": {
      "block_height": 108339537
    },
    "receipt_conversion_tokens_burnt": "244161833168400000000",
    "actions": [
      {
        "action": "FUNCTION_CALL",
        "method": "set",
        "deposit": 0,
        "fee": 672467044752000000000,
        "args": "{\"data\": {\"devhub.near\": {\"widget\": {\"devhub.components.molecule.Input\": {\"\": \"const TextInput = ({\\\\\\\\n  className,\\\\\\\\n  format,\\\\\\\\n  inputProps: { className: inputClassName, ...inputProps },\\\\\\\\n  key,\\\\\\\\n  label,\\\\\\\\n  multiline,\\\\\\\\n  onChange,\\\\\\\\n  placeholder,\\\\\\\\n  type,\\\\\\\\n  value,\\\\\\\\n  skipPaddingGap,\\\\\\\\n  style,\\\\\\\\n  ...otherProps\\\\\\\\n}) => {\\\\\\\\n  const typeAttribute =\\\\\\\\n    type === \\\\\\\\\\\\\\\"text\\\\\\\\\\\\\\\" ||\\\\\\\\n    type === \\\\\\\\\\\\\\\"password\\\\\\\\\\\\\\\" ||\\\\\\\\n    type === \\\\\\\\\\\\\\\"number\\\\\\\\\\\\\\\" ||\\\\\\\\n    type === \\\\\\\\\\\\\\\"date\\\\\\\\\\\\\\\"\\\\\\\\n      ? type\\\\\\\\n      : \\\\\\\\\\\\\\\"text\\\\\\\\\\\\\\\";\\\\\\\\n\\\\\\\\n  const isValid = () => {\\\\\\\\n    if (!value || value.length === 0) {\\\\\\\\n      return !inputProps.required;\\\\\\\\n    } else if (inputProps.min && inputProps.min > value?.length) {\\\\\\\\n      return false;\\\\\\\\n    } else if (inputProps.max && inputProps.max < value?.length) {\\\\\\\\n      return false;\\\\\\\\n    } else if (\\\\\\\\n      inputProps.allowCommaAndSpace === false &&\\\\\\\\n      /^[^,\\\\\\\\\\\\\\\\s]*$/.test(value) === false\\\\\\\\n    ) {\\\\\\\\n      return false;\\\\\\\\n    } else if (\\\\\\\\n      inputProps.validUrl === true &&\\\\\\\\n      /^(www\\\\\\\\\\\\\\\\.)?[-a-zA-Z0-9@:%._\\\\\\\\\\\\\\\\+~#=]{2,256}\\\\\\\\\\\\\\\\.[a-z]{2,6}\\\\\\\\\\\\\\\\b([-a-zA-Z0-9@:%_\\\\\\\\\\\\\\\\+.~#?&//=]*)$/.test(\\\\\\\\n        value\\\\\\\\n      ) === false\\\\\\\\n    ) {\\\\\\\\n      return false;\\\\\\\\n    }\\\\\\\\n    return true;\\\\\\\\n  };\\\\\\\\n\\\\\\\\n  const renderedLabels = [\\\\\\\\n    (label?.length ?? 0) > 0 ? (\\\\\\\\n      <span className=\\\\\\\\\\\\\\\"d-inline-flex gap-1 text-wrap\\\\\\\\\\\\\\\">\\\\\\\\n        <span>{label}</span>\\\\\\\\n\\\\\\\\n        {inputProps.required ? <span className=\\\\\\\\\\\\\\\"text-danger\\\\\\\\\\\\\\\">*</span> : null}\\\\\\\\n      </span>\\\\\\\\n    ) : null,\\\\\\\\n\\\\\\\\n    format === \\\\\\\\\\\\\\\"markdown\\\\\\\\\\\\\\\" ? (\\\\\\\\n      <i class=\\\\\\\\\\\\\\\"bi bi-markdown text-muted\\\\\\\\\\\\\\\" title=\\\\\\\\\\\\\\\"Markdown\\\\\\\\\\\\\\\" />\\\\\\\\n    ) : null,\\\\\\\\n\\\\\\\\n    format === \\\\\\\\\\\\\\\"comma-separated\\\\\\\\\\\\\\\" ? (\\\\\\\\n      <span\\\\\\\\n        className={`d-inline-flex align-items-center ${\\\\\\\\n          isValid() ? \\\\\\\\\\\\\\\"text-muted\\\\\\\\\\\\\\\" : \\\\\\\\\\\\\\\"text-danger\\\\\\\\\\\\\\\"\\\\\\\\n        }`}\\\\\\\\n        style={{ fontSize: 12 }}\\\\\\\\n      >\\\\\\\\n        {format}\\\\\\\\n      </span>\\\\\\\\n    ) : null,\\\\\\\\n\\\\\\\\n    (inputProps.max ?? null) !== null ? (\\\\\\\\n      <span\\\\\\\\n        className={`d-inline-flex ${isValid() ? \\\\\\\\\\\\\\\"text-muted\\\\\\\\\\\\\\\" : \\\\\\\\\\\\\\\"text-danger\\\\\\\\\\\\\\\"}`}\\\\\\\\n        style={{ fontSize: 12 }}\\\\\\\\n      >{`${value?.length ?? 0} / ${inputProps.max}`}</span>\\\\\\\\n    ) : null,\\\\\\\\n  ].filter((label) => label !== null);\\\\\\\\n\\\\\\\\n  return (\\\\\\\\n    <div\\\\\\\\n      className={[\\\\\\\\n        \\\\\\\\\\\\\\\"d-flex flex-column flex-1 align-items-start justify-content-evenly\\\\\\\\\\\\\\\",\\\\\\\\n        skipPaddingGap ? \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\" : \\\\\\\\\\\\\\\"gap-1 p-2\\\\\\\\\\\\\\\",\\\\\\\\n        className ?? \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\",\\\\\\\\n      ].join(\\\\\\\\\\\\\\\" \\\\\\\\\\\\\\\")}\\\\\\\\n      style={style}\\\\\\\\n      {...otherProps}\\\\\\\\n    >\\\\\\\\n      {renderedLabels.length > 0 ? (\\\\\\\\n        <span\\\\\\\\n          className=\\\\\\\\\\\\\\\"d-flex justify-content-between align-items-center gap-3 w-100\\\\\\\\\\\\\\\"\\\\\\\\n          id={key}\\\\\\\\n        >\\\\\\\\n          {renderedLabels.map((label) => label)}\\\\\\\\n        </span>\\\\\\\\n      ) : null}\\\\\\\\n\\\\\\\\n      {!multiline ? (\\\\\\\\n        <div className=\\\\\\\\\\\\\\\"input-group\\\\\\\\\\\\\\\">\\\\\\\\n          {inputProps.prefix && (\\\\\\\\n            <span className=\\\\\\\\\\\\\\\"input-group-text\\\\\\\\\\\\\\\">{inputProps.prefix}</span>\\\\\\\\n          )}\\\\\\\\n          <input\\\\\\\\n            aria-describedby={key}\\\\\\\\n            data-testid={key}\\\\\\\\n            aria-label={label}\\\\\\\\n            className={[\\\\\\\\\\\\\\\"form-control border border-2\\\\\\\\\\\\\\\", inputClassName].join(\\\\\\\\n              \\\\\\\\\\\\\\\" \\\\\\\\\\\\\\\"\\\\\\\\n            )}\\\\\\\\n            type={typeAttribute}\\\\\\\\n            maxLength={inputProps.max}\\\\\\\\n            {...{ onChange, placeholder, value, ...inputProps }}\\\\\\\\n          />\\\\\\\\n        </div>\\\\\\\\n      ) : (\\\\\\\\n        <textarea\\\\\\\\n          aria-describedby={key}\\\\\\\\n          data-testid={key}\\\\\\\\n          aria-label={label}\\\\\\\\n          className={[\\\\\\\\\\\\\\\"form-control border border-2\\\\\\\\\\\\\\\", inputClassName].join(\\\\\\\\\\\\\\\" \\\\\\\\\\\\\\\")}\\\\\\\\n          placeholder={\\\\\\\\n            placeholder + (inputProps.required ? \\\\\\\\\\\\\\\" ( required )\\\\\\\\\\\\\\\" : \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\")\\\\\\\\n          }\\\\\\\\n          style={{ resize: inputProps.resize ?? \\\\\\\\\\\\\\\"vertical\\\\\\\\\\\\\\\" }}\\\\\\\\n          type={typeAttribute}\\\\\\\\n          maxLength={inputProps.max}\\\\\\\\n          {...{ onChange, placeholder, value, ...inputProps }}\\\\\\\\n        />\\\\\\\\n      )}\\\\\\\\n    </div>\\\\\\\\n  );\\\\\\\\n};\\\\\\\\n\\\\\\\\nreturn TextInput(props);\\\\\\\\n\"}, \"devhub.components.molecule.ListEditor\": {\"\": \"const { data, setList, validate, invalidate } = props;\\\\\\\\n\\\\\\\\nconst [newItem, setNewItem] = useState(\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\");\\\\\\\\n\\\\\\\\nconst handleAddItem = () => {\\\\\\\\n  if (validate(newItem)) {\\\\\\\\n    setList([...data.list, newItem]);\\\\\\\\n    setNewItem(\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\");\\\\\\\\n  } else {\\\\\\\\n    return invalidate();\\\\\\\\n  }\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst handleDeleteItem = (index) => {\\\\\\\\n  const updatedData = [...data.list];\\\\\\\\n  updatedData.splice(index, 1);\\\\\\\\n  setList(updatedData);\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst Item = styled.div`\\\\\\\\n  padding: 10px;\\\\\\\\n  margin: 5px;\\\\\\\\n  display: flex;\\\\\\\\n  align-items: center;\\\\\\\\n  flex-direction: row;\\\\\\\\n  gap: 10px;\\\\\\\\n`;\\\\\\\\n\\\\\\\\nreturn (\\\\\\\\n  <>\\\\\\\\n    {data.list.map((item, index) => (\\\\\\\\n      <Item key={index}>\\\\\\\\n        <div className=\\\\\\\\\\\\\\\"flex-grow-1\\\\\\\\\\\\\\\">\\\\\\\\n          <Widget\\\\\\\\n            src=\\\\\\\\\\\\\\\"devhub.near/widget/devhub.components.molecule.Input\\\\\\\\\\\\\\\"\\\\\\\\n            props={{\\\\\\\\n              className: \\\\\\\\\\\\\\\"flex-grow-1\\\\\\\\\\\\\\\",\\\\\\\\n              value: item,\\\\\\\\n              skipPaddingGap: true,\\\\\\\\n              placeholder: data.placeholder,\\\\\\\\n              inputProps: {\\\\\\\\n                prefix: data.prefix,\\\\\\\\n                disabled: true,\\\\\\\\n              },\\\\\\\\n            }}\\\\\\\\n          />\\\\\\\\n        </div>\\\\\\\\n        <button\\\\\\\\n          className=\\\\\\\\\\\\\\\"btn btn-outline-danger\\\\\\\\\\\\\\\"\\\\\\\\n          onClick={() => handleDeleteItem(index)}\\\\\\\\n        >\\\\\\\\n          <i className=\\\\\\\\\\\\\\\"bi bi-trash-fill\\\\\\\\\\\\\\\" />\\\\\\\\n        </button>\\\\\\\\n      </Item>\\\\\\\\n    ))}\\\\\\\\n    {data.list.length < data.maxLength && (\\\\\\\\n      <Item>\\\\\\\\n        <div className=\\\\\\\\\\\\\\\"flex-grow-1\\\\\\\\\\\\\\\">\\\\\\\\n          <Widget\\\\\\\\n            src=\\\\\\\\\\\\\\\"devhub.near/widget/devhub.components.molecule.Input\\\\\\\\\\\\\\\"\\\\\\\\n            props={{\\\\\\\\n              className: \\\\\\\\\\\\\\\"flex-grow-1\\\\\\\\\\\\\\\",\\\\\\\\n              skipPaddingGap: true,\\\\\\\\n              onChange: (e) => setNewItem(e.target.value),\\\\\\\\n              value: newItem,\\\\\\\\n              placeholder: data.placeholder,\\\\\\\\n              inputProps: {\\\\\\\\n                prefix: data.prefix,\\\\\\\\n              },\\\\\\\\n              key: data.prefix + \\\\\\\\\\\\\\\"new-list-item\\\\\\\\\\\\\\\",\\\\\\\\n            }}\\\\\\\\n          />\\\\\\\\n        </div>\\\\\\\\n        <button\\\\\\\\n          className=\\\\\\\\\\\\\\\"btn btn-success add-member\\\\\\\\\\\\\\\"\\\\\\\\n          onClick={handleAddItem}\\\\\\\\n          disabled={newItem === \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\"}\\\\\\\\n          data-testid=\\\\\\\\\\\\\\\"add-to-list\\\\\\\\\\\\\\\"\\\\\\\\n        >\\\\\\\\n          <i className=\\\\\\\\\\\\\\\"bi bi-plus\\\\\\\\\\\\\\\" />\\\\\\\\n        </button>\\\\\\\\n      </Item>\\\\\\\\n    )}\\\\\\\\n  </>\\\\\\\\n);\\\\\\\\n\"}}}}}"
      }
    ],
    "actions_agg": {
      "deposit": 0
    },
    "outcomes": {
      "status": true
    },
    "outcomes_agg": {
      "transaction_fee": 916628877920400000000
    }
  },
  {
    "id": "1776666013",
    "receipt_id": "C13W9kx6FbbjpKBo1bEcLwUjaybLib4GqxjwoNrKFnAN",
    "predecessor_account_id": "system",
    "receiver_account_id": "devhub.near",
    "receipt_kind": "ACTION",
    "receipt_block": {
      "block_hash": "HNeQPP5sQEEVS1cybymMbs1h5CNoixozJXLTpeAZ8smY",
      "block_height": 108339539,
      "block_timestamp": 1703002066854592300
    },
    "receipt_outcome": {
      "gas_burnt": 223182562500,
      "tokens_burnt": 0,
      "executor_account_id": "devhub.near",
      "status": true
    },
    "transaction_hash": "HPjDhcs8teyXJuxQxEZXJLEGa8JMseR6QYjFxXJRSufP",
    "included_in_block_hash": "BVKd6LgJmQQLB4TXUdekhhs8DgjYxZjPQtH6WMiVZno1",
    "block_timestamp": "1703002064380459589",
    "block": {
      "block_height": 108339537
    },
    "receipt_conversion_tokens_burnt": "244161833168400000000",
    "actions": [
      {
        "action": "TRANSFER",
        "method": null,
        "deposit": 1.8836569470212536e+23,
        "fee": 0,
        "args": null
      }
    ],
    "actions_agg": {
      "deposit": 0
    },
    "outcomes": {
      "status": true
    },
    "outcomes_agg": {
      "transaction_fee": 916628877920400000000
    }
  },
  {
    "id": "1813075824",
    "receipt_id": "43h9EmGr1Ayva3zErayNKdWtGuam3mhN6notfw2SZPAF",
    "predecessor_account_id": "devhub.near",
    "receiver_account_id": "devhub.near",
    "receipt_kind": "ACTION",
    "receipt_block": {
      "block_hash": "FrKsLpoTXrU862Zhv7XjuhriD3yzyn9jqZYcZxSscvSJ",
      "block_height": 108513213,
      "block_timestamp": 1703202604525789000
    },
    "receipt_outcome": {
      "gas_burnt": 210356063571,
      "tokens_burnt": 21035606357100000000,
      "executor_account_id": "devhub.near",
      "status": true
    },
    "transaction_hash": "EmcSHn41pXeFu4jRnPzsAzsErskHpUc8GT3Wgj1QrKFn",
    "included_in_block_hash": "FrKsLpoTXrU862Zhv7XjuhriD3yzyn9jqZYcZxSscvSJ",
    "block_timestamp": "1703202604525788899",
    "block": {
      "block_height": 108513213
    },
    "receipt_conversion_tokens_burnt": "21035606357100000000",
    "actions": [
      {
        "action": "ADD_KEY",
        "method": null,
        "deposit": 0,
        "fee": 21035606357100000000,
        "args": null
      }
    ],
    "actions_agg": {
      "deposit": 0
    },
    "outcomes": {
      "status": true
    },
    "outcomes_agg": {
      "transaction_fee": 42071212714200000000
    }
  }
]