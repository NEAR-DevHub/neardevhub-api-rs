[
  {
    "id": "1336760509",
    "receipt_id": "grDN3M7fGAJRQYKGHg3EzFZWwppemikzbAtHkdr7Bdr",
    "predecessor_account_id": "devhub.near",
    "receiver_account_id": "social.near",
    "receipt_kind": "ACTION",
    "receipt_block": {
      "block_hash": "AjQnx19JiMUVSThYGp8QnCeMGopM9RXu7bSUVNtLjwfL",
      "block_height": 104865499,
      "block_timestamp": 1699043596636488700
    },
    "receipt_outcome": {
      "gas_burnt": 9317505703373,
      "tokens_burnt": 931750570337300000000,
      "executor_account_id": "social.near",
      "status": true
    },
    "transaction_hash": "J1QPzUaBtcxVR3ZFHnzAwrrWzkzimqA4JuxuqcyqSnXu",
    "included_in_block_hash": "62peRCbYnPFecD2M6KtoCUhKNU5WNy8wWs2uRb7doqyM",
    "block_timestamp": "1699043595899960212",
    "block": {
      "block_height": 104865498
    },
    "receipt_conversion_tokens_burnt": "248377463132000000000",
    "actions": [
      {
        "action": "FUNCTION_CALL",
        "method": "set",
        "deposit": 0,
        "fee": 931750570337300000000,
        "args": "{\"data\": {\"devhub.near\": {\"widget\": {\"devhub.entity.post.Post\": {\"\": \"// Ideally, this would be a page\\\\\\\\n\\\\\\\\nconst { href } = VM.require(\\\\\\\\\\\\\\\"devhub.near/widget/core.lib.url\\\\\\\\\\\\\\\");\\\\\\\\n\\\\\\\\nhref || (href = () => {});\\\\\\\\n\\\\\\\\nconst ButtonWithHover = styled.button`\\\\\\\\n  background-color: #fff;\\\\\\\\n  &:hover {\\\\\\\\n    background-color: #e9ecef;\\\\\\\\n    color: #000;\\\\\\\\n  }\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst postId = props.post.id ?? (props.id ? parseInt(props.id) : 0);\\\\\\\\nconst post =\\\\\\\\n  props.post ??\\\\\\\\n  Near.view(\\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"get_post\\\\\\\\\\\\\\\", { post_id: postId });\\\\\\\\nif (!post) {\\\\\\\\n  return <div>Loading ...</div>;\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst referral = props.referral;\\\\\\\\nconst currentTimestamp = props.timestamp ?? post.snapshot.timestamp;\\\\\\\\nconst compareTimestamp = props.compareTimestamp ?? \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\";\\\\\\\\nconst swapTimestamps = currentTimestamp < compareTimestamp;\\\\\\\\n\\\\\\\\nconst snapshotHistory = post.snapshot_history;\\\\\\\\nconst snapshot =\\\\\\\\n  currentTimestamp === post.snapshot.timestamp\\\\\\\\n    ? post.snapshot\\\\\\\\n    : (snapshotHistory &&\\\\\\\\n        snapshotHistory.find((s) => s.timestamp === currentTimestamp)) ??\\\\\\\\n      null;\\\\\\\\nconst compareSnapshot =\\\\\\\\n  compareTimestamp === post.snapshot.timestamp\\\\\\\\n    ? post.snapshot\\\\\\\\n    : (snapshotHistory &&\\\\\\\\n        snapshotHistory.find((s) => s.timestamp === compareTimestamp)) ??\\\\\\\\n      null;\\\\\\\\n\\\\\\\\n// If this post is displayed under another post. Used to limit the size.\\\\\\\\nconst isUnderPost = props.isUnderPost ? true : false;\\\\\\\\nconst parentId = Near.view(\\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"get_parent_id\\\\\\\\\\\\\\\", {\\\\\\\\n  post_id: postId,\\\\\\\\n});\\\\\\\\n\\\\\\\\nconst childPostIdsUnordered =\\\\\\\\n  Near.view(\\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"get_children_ids\\\\\\\\\\\\\\\", {\\\\\\\\n    post_id: postId,\\\\\\\\n  }) ?? [];\\\\\\\\n\\\\\\\\nconst childPostIds = props.isPreview ? [] : childPostIdsUnordered.reverse();\\\\\\\\nconst expandable = props.isPreview ? false : props.expandable ?? false;\\\\\\\\nconst defaultExpanded = expandable ? props.defaultExpanded : true;\\\\\\\\n\\\\\\\\nconst draftState = props.draftState;\\\\\\\\n\\\\\\\\nfunction readableDate(timestamp) {\\\\\\\\n  var a = new Date(timestamp);\\\\\\\\n  return a.toDateString() + \\\\\\\\\\\\\\\" \\\\\\\\\\\\\\\" + a.toLocaleTimeString();\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst timestamp = readableDate(\\\\\\\\n  snapshot.timestamp ? snapshot.timestamp / 1000000 : Date.now()\\\\\\\\n);\\\\\\\\n\\\\\\\\nconst postSearchKeywords = props.searchKeywords ? (\\\\\\\\n  <div style={{ \\\\\\\\\\\\\\\"font-family\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"monospace\\\\\\\\\\\\\\\" }} key=\\\\\\\\\\\\\\\"post-search-keywords\\\\\\\\\\\\\\\">\\\\\\\\n    <span>Found keywords: </span>\\\\\\\\n    {props.searchKeywords.map((tag) => (\\\\\\\\n      <Widget\\\\\\\\n        src={\\\\\\\\\\\\\\\"devhub.near/widget/devhub.components.atom.Tag\\\\\\\\\\\\\\\"}\\\\\\\\n        props={{ linkTo: \\\\\\\\\\\\\\\"Feed\\\\\\\\\\\\\\\", tag }}\\\\\\\\n      />\\\\\\\\n    ))}\\\\\\\\n  </div>\\\\\\\\n) : (\\\\\\\\n  <div key=\\\\\\\\\\\\\\\"post-search-keywords\\\\\\\\\\\\\\\"></div>\\\\\\\\n);\\\\\\\\n\\\\\\\\nconst searchKeywords = props.searchKeywords ? (\\\\\\\\n  <div class=\\\\\\\\\\\\\\\"mb-4\\\\\\\\\\\\\\\" key=\\\\\\\\\\\\\\\"search-keywords\\\\\\\\\\\\\\\">\\\\\\\\n    <small class=\\\\\\\\\\\\\\\"text-muted\\\\\\\\\\\\\\\">{postSearchKeywords}</small>\\\\\\\\n  </div>\\\\\\\\n) : (\\\\\\\\n  <div key=\\\\\\\\\\\\\\\"search-keywords\\\\\\\\\\\\\\\"></div>\\\\\\\\n);\\\\\\\\n\\\\\\\\nconst allowedToEdit =\\\\\\\\n  !props.isPreview &&\\\\\\\\n  Near.view(\\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"is_allowed_to_edit\\\\\\\\\\\\\\\", {\\\\\\\\n    post_id: postId,\\\\\\\\n    editor: context.accountId,\\\\\\\\n  });\\\\\\\\n\\\\\\\\nconst btnEditorWidget = (postType, name) => {\\\\\\\\n  return (\\\\\\\\n    <li>\\\\\\\\n      <a\\\\\\\\n        class=\\\\\\\\\\\\\\\"dropdown-item\\\\\\\\\\\\\\\"\\\\\\\\n        role=\\\\\\\\\\\\\\\"button\\\\\\\\\\\\\\\"\\\\\\\\n        onClick={() =>\\\\\\\\n          State.update({ postType, editorType: \\\\\\\\\\\\\\\"EDIT\\\\\\\\\\\\\\\", showEditor: true })\\\\\\\\n        }\\\\\\\\n      >\\\\\\\\n        {name}\\\\\\\\n      </a>\\\\\\\\n    </li>\\\\\\\\n  );\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst editControl = allowedToEdit ? (\\\\\\\\n  <div class=\\\\\\\\\\\\\\\"btn-group\\\\\\\\\\\\\\\" role=\\\\\\\\\\\\\\\"group\\\\\\\\\\\\\\\">\\\\\\\\n    <a\\\\\\\\n      class=\\\\\\\\\\\\\\\"card-link px-2\\\\\\\\\\\\\\\"\\\\\\\\n      role=\\\\\\\\\\\\\\\"button\\\\\\\\\\\\\\\"\\\\\\\\n      title=\\\\\\\\\\\\\\\"Edit post\\\\\\\\\\\\\\\"\\\\\\\\n      data-bs-toggle=\\\\\\\\\\\\\\\"dropdown\\\\\\\\\\\\\\\"\\\\\\\\n      aria-expanded=\\\\\\\\\\\\\\\"false\\\\\\\\\\\\\\\"\\\\\\\\n      type=\\\\\\\\\\\\\\\"button\\\\\\\\\\\\\\\"\\\\\\\\n    >\\\\\\\\n      <div class=\\\\\\\\\\\\\\\"bi bi-pencil-square\\\\\\\\\\\\\\\"></div>\\\\\\\\n    </a>\\\\\\\\n    <ul class=\\\\\\\\\\\\\\\"dropdown-menu\\\\\\\\\\\\\\\">\\\\\\\\n      {btnEditorWidget(\\\\\\\\\\\\\\\"Idea\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"Edit as an idea\\\\\\\\\\\\\\\")}\\\\\\\\n      {btnEditorWidget(\\\\\\\\\\\\\\\"Solution\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"Edit as a solution\\\\\\\\\\\\\\\")}\\\\\\\\n      {btnEditorWidget(\\\\\\\\\\\\\\\"Attestation\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"Edit as an attestation\\\\\\\\\\\\\\\")}\\\\\\\\n      {btnEditorWidget(\\\\\\\\\\\\\\\"Sponsorship\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"Edit as a sponsorship\\\\\\\\\\\\\\\")}\\\\\\\\n      {btnEditorWidget(\\\\\\\\\\\\\\\"Comment\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"Edit as a comment\\\\\\\\\\\\\\\")}\\\\\\\\n    </ul>\\\\\\\\n  </div>\\\\\\\\n) : (\\\\\\\\n  <div></div>\\\\\\\\n);\\\\\\\\n\\\\\\\\nconst shareButton = props.isPreview ? (\\\\\\\\n  <div></div>\\\\\\\\n) : (\\\\\\\\n  <Link\\\\\\\\n    class=\\\\\\\\\\\\\\\"card-link text-dark\\\\\\\\\\\\\\\"\\\\\\\\n    to={href({\\\\\\\\n      gateway: \\\\\\\\\\\\\\\"near.org\\\\\\\\\\\\\\\",\\\\\\\\n      widgetSrc: \\\\\\\\\\\\\\\"devhub.near/widget/app\\\\\\\\\\\\\\\",\\\\\\\\n      params: { page: \\\\\\\\\\\\\\\"post\\\\\\\\\\\\\\\", id: postId },\\\\\\\\n    })}\\\\\\\\n    role=\\\\\\\\\\\\\\\"button\\\\\\\\\\\\\\\"\\\\\\\\n    target=\\\\\\\\\\\\\\\"_blank\\\\\\\\\\\\\\\"\\\\\\\\n    title=\\\\\\\\\\\\\\\"Open in new tab\\\\\\\\\\\\\\\"\\\\\\\\n  >\\\\\\\\n    <div class=\\\\\\\\\\\\\\\"bi bi-share\\\\\\\\\\\\\\\"></div>\\\\\\\\n  </Link>\\\\\\\\n);\\\\\\\\n\\\\\\\\nconst ProfileCardContainer = styled.div`\\\\\\\\n  @media screen and (max-width: 960px) {\\\\\\\\n    width: 100%;\\\\\\\\n  }\\\\\\\\n`;\\\\\\\\n\\\\\\\\n// card-header\\\\\\\\nconst header = (\\\\\\\\n  <div key=\\\\\\\\\\\\\\\"header\\\\\\\\\\\\\\\">\\\\\\\\n    <small class=\\\\\\\\\\\\\\\"text-muted\\\\\\\\\\\\\\\">\\\\\\\\n      <div class=\\\\\\\\\\\\\\\"row justify-content-between\\\\\\\\\\\\\\\">\\\\\\\\n        <div class=\\\\\\\\\\\\\\\"d-flex align-items-center flex-wrap\\\\\\\\\\\\\\\">\\\\\\\\n          <ProfileCardContainer>\\\\\\\\n            <Widget\\\\\\\\n              src={\\\\\\\\n                \\\\\\\\\\\\\\\"devhub.near/widget/devhub.components.molecule.ProfileCard\\\\\\\\\\\\\\\"\\\\\\\\n              }\\\\\\\\n              props={{\\\\\\\\n                accountId: post.author_id,\\\\\\\\n                nearDevGovGigsWidgetsAccountId: \\\\\\\\\\\\\\\"devhub.near\\\\\\\\\\\\\\\",\\\\\\\\n              }}\\\\\\\\n            />\\\\\\\\n          </ProfileCardContainer>\\\\\\\\n          <div class=\\\\\\\\\\\\\\\"d-flex ms-auto\\\\\\\\\\\\\\\">\\\\\\\\n            {editControl}\\\\\\\\n            {timestamp}\\\\\\\\n            <Widget\\\\\\\\n              src={\\\\\\\\\\\\\\\"devhub.near/widget/devhub.entity.post.History\\\\\\\\\\\\\\\"}\\\\\\\\n              props={{\\\\\\\\n                post,\\\\\\\\n                timestamp: currentTimestamp,\\\\\\\\n              }}\\\\\\\\n            />\\\\\\\\n            {shareButton}\\\\\\\\n          </div>\\\\\\\\n        </div>\\\\\\\\n      </div>\\\\\\\\n    </small>\\\\\\\\n  </div>\\\\\\\\n);\\\\\\\\n\\\\\\\\n// const emptyIcons = {\\\\\\\\n//   Idea: \\\\\\\\\\\\\\\"bi-lightbulb\\\\\\\\\\\\\\\",\\\\\\\\n//   Comment: \\\\\\\\\\\\\\\"bi-chat\\\\\\\\\\\\\\\",\\\\\\\\n//   Solution: \\\\\\\\\\\\\\\"bi-rocket\\\\\\\\\\\\\\\",\\\\\\\\n//   Attestation: \\\\\\\\\\\\\\\"bi-check-circle\\\\\\\\\\\\\\\",\\\\\\\\n//   Sponsorship: \\\\\\\\\\\\\\\"bi-cash-coin\\\\\\\\\\\\\\\",\\\\\\\\n//   Github: \\\\\\\\\\\\\\\"bi-github\\\\\\\\\\\\\\\",\\\\\\\\n//   Like: \\\\\\\\\\\\\\\"bi-heart\\\\\\\\\\\\\\\",\\\\\\\\n//   Reply: \\\\\\\\\\\\\\\"bi-reply\\\\\\\\\\\\\\\",\\\\\\\\n// };\\\\\\\\n\\\\\\\\nconst emptyIcons = {\\\\\\\\n  Idea: \\\\\\\\\\\\\\\"\\\\\\\\u{1f4a1}\\\\\\\\\\\\\\\",\\\\\\\\n  Comment: \\\\\\\\\\\\\\\"bi-chat\\\\\\\\\\\\\\\",\\\\\\\\n  Solution: \\\\\\\\\\\\\\\"\\\\\\\\u{1f680}\\\\\\\\\\\\\\\",\\\\\\\\n  Attestation: \\\\\\\\\\\\\\\"\\\\\\\\u{2705}\\\\\\\\\\\\\\\",\\\\\\\\n  Sponsorship: \\\\\\\\\\\\\\\"\\\\\\\\u{1fa99}\\\\\\\\\\\\\\\",\\\\\\\\n  Github: \\\\\\\\\\\\\\\"bi-github\\\\\\\\\\\\\\\",\\\\\\\\n  Like: \\\\\\\\\\\\\\\"bi-heart\\\\\\\\\\\\\\\",\\\\\\\\n  Reply: \\\\\\\\\\\\\\\"bi-reply\\\\\\\\\\\\\\\",\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst fillIcons = {\\\\\\\\n  Idea: \\\\\\\\\\\\\\\"\\\\\\\\u{1f4a1}\\\\\\\\\\\\\\\",\\\\\\\\n  Comment: \\\\\\\\\\\\\\\"bi-chat-fill\\\\\\\\\\\\\\\",\\\\\\\\n  Solution: \\\\\\\\\\\\\\\"\\\\\\\\u{1f680}\\\\\\\\\\\\\\\",\\\\\\\\n  Attestation: \\\\\\\\\\\\\\\"\\\\\\\\u{2705}\\\\\\\\\\\\\\\",\\\\\\\\n  Sponsorship: \\\\\\\\\\\\\\\"\\\\\\\\u{1fa99}\\\\\\\\\\\\\\\",\\\\\\\\n  Github: \\\\\\\\\\\\\\\"bi-github\\\\\\\\\\\\\\\",\\\\\\\\n  Like: \\\\\\\\\\\\\\\"bi-heart-fill\\\\\\\\\\\\\\\",\\\\\\\\n  Reply: \\\\\\\\\\\\\\\"bi-reply-fill\\\\\\\\\\\\\\\",\\\\\\\\n};\\\\\\\\n\\\\\\\\n// Trigger saving this widget.\\\\\\\\n\\\\\\\\nconst borders = {\\\\\\\\n  Idea: \\\\\\\\\\\\\\\"border-light\\\\\\\\\\\\\\\",\\\\\\\\n  Comment: \\\\\\\\\\\\\\\"border-light\\\\\\\\\\\\\\\",\\\\\\\\n  Solution: \\\\\\\\\\\\\\\"border-light\\\\\\\\\\\\\\\",\\\\\\\\n  Attestation: \\\\\\\\\\\\\\\"border-light\\\\\\\\\\\\\\\",\\\\\\\\n  Sponsorship: \\\\\\\\\\\\\\\"border-light\\\\\\\\\\\\\\\",\\\\\\\\n  Github: \\\\\\\\\\\\\\\"border-light\\\\\\\\\\\\\\\",\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst containsLike = props.isPreview\\\\\\\\n  ? false\\\\\\\\n  : post.likes.find((l) => l.author_id == context.accountId);\\\\\\\\nconst likeBtnClass = containsLike ? fillIcons.Like : emptyIcons.Like;\\\\\\\\n// This must be outside onLike, because Near.view returns null at first, and when the view call finished, it returns true/false.\\\\\\\\n// If checking this inside onLike, it will give `null` and we cannot tell the result is true or false.\\\\\\\\nlet grantNotify = Near.view(\\\\\\\\\\\\\\\"social.near\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"is_write_permission_granted\\\\\\\\\\\\\\\", {\\\\\\\\n  predecessor_id: \\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\",\\\\\\\\n  key: context.accountId + \\\\\\\\\\\\\\\"/index/notify\\\\\\\\\\\\\\\",\\\\\\\\n});\\\\\\\\nif (grantNotify === null) {\\\\\\\\n  return;\\\\\\\\n}\\\\\\\\nconst onLike = () => {\\\\\\\\n  if (!context.accountId) {\\\\\\\\n    return;\\\\\\\\n  }\\\\\\\\n  let likeTxn = [\\\\\\\\n    {\\\\\\\\n      contractName: \\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\",\\\\\\\\n      methodName: \\\\\\\\\\\\\\\"add_like\\\\\\\\\\\\\\\",\\\\\\\\n      args: {\\\\\\\\n        post_id: postId,\\\\\\\\n      },\\\\\\\\n      deposit: Big(10).pow(21).mul(2),\\\\\\\\n      gas: Big(10).pow(12).mul(100),\\\\\\\\n    },\\\\\\\\n  ];\\\\\\\\n\\\\\\\\n  if (grantNotify === false) {\\\\\\\\n    likeTxn.unshift({\\\\\\\\n      contractName: \\\\\\\\\\\\\\\"social.near\\\\\\\\\\\\\\\",\\\\\\\\n      methodName: \\\\\\\\\\\\\\\"grant_write_permission\\\\\\\\\\\\\\\",\\\\\\\\n      args: {\\\\\\\\n        predecessor_id: \\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\",\\\\\\\\n        keys: [context.accountId + \\\\\\\\\\\\\\\"/index/notify\\\\\\\\\\\\\\\"],\\\\\\\\n      },\\\\\\\\n      deposit: Big(10).pow(23),\\\\\\\\n      gas: Big(10).pow(12).mul(30),\\\\\\\\n    });\\\\\\\\n  }\\\\\\\\n  Near.call(likeTxn);\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst btnCreatorWidget = (postType, icon, name, desc) => {\\\\\\\\n  return (\\\\\\\\n    <li class=\\\\\\\\\\\\\\\"py-1\\\\\\\\\\\\\\\">\\\\\\\\n      <a\\\\\\\\n        class=\\\\\\\\\\\\\\\"dropdown-item text-decoration-none d-flex align-items-center lh-sm\\\\\\\\\\\\\\\"\\\\\\\\n        style={{ color: \\\\\\\\\\\\\\\"rgb(55,109,137)\\\\\\\\\\\\\\\" }}\\\\\\\\n        role=\\\\\\\\\\\\\\\"button\\\\\\\\\\\\\\\"\\\\\\\\n        onClick={() =>\\\\\\\\n          State.update({ postType, editorType: \\\\\\\\\\\\\\\"CREATE\\\\\\\\\\\\\\\", showEditor: true })\\\\\\\\n        }\\\\\\\\n      >\\\\\\\\n        <i class={`bi ${icon}`} style={{ fontSize: \\\\\\\\\\\\\\\"1.5rem\\\\\\\\\\\\\\\" }}>\\\\\\\\n          {\\\\\\\\\\\\\\\" \\\\\\\\\\\\\\\"}\\\\\\\\n        </i>\\\\\\\\n        <div class=\\\\\\\\\\\\\\\"ps-2 text-wrap\\\\\\\\\\\\\\\" style={{ width: \\\\\\\\\\\\\\\"18rem\\\\\\\\\\\\\\\" }}>\\\\\\\\n          <div>{name}</div>\\\\\\\\n          <small class=\\\\\\\\\\\\\\\"fw-light text-secondary\\\\\\\\\\\\\\\">{desc}</small>\\\\\\\\n        </div>\\\\\\\\n      </a>\\\\\\\\n    </li>\\\\\\\\n  );\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst FooterButtonsContianer = styled.div`\\\\\\\\n  width: 66.66666667%;\\\\\\\\n\\\\\\\\n  @media screen and (max-width: 960px) {\\\\\\\\n    width: 100%;\\\\\\\\n  }\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst buttonsFooter = props.isPreview ? null : (\\\\\\\\n  <div class=\\\\\\\\\\\\\\\"row\\\\\\\\\\\\\\\" key=\\\\\\\\\\\\\\\"buttons-footer\\\\\\\\\\\\\\\">\\\\\\\\n    <FooterButtonsContianer>\\\\\\\\n      <div class=\\\\\\\\\\\\\\\"btn-group\\\\\\\\\\\\\\\" role=\\\\\\\\\\\\\\\"group\\\\\\\\\\\\\\\" aria-label=\\\\\\\\\\\\\\\"Basic outlined example\\\\\\\\\\\\\\\">\\\\\\\\n        <ButtonWithHover\\\\\\\\n          type=\\\\\\\\\\\\\\\"button\\\\\\\\\\\\\\\"\\\\\\\\n          class=\\\\\\\\\\\\\\\"btn d-flex align-items-center\\\\\\\\\\\\\\\"\\\\\\\\n          style={{ border: \\\\\\\\\\\\\\\"0px\\\\\\\\\\\\\\\" }}\\\\\\\\n          onClick={onLike}\\\\\\\\n        >\\\\\\\\n          <i class={`bi ${likeBtnClass}`}> </i>\\\\\\\\n          {post.likes.length == 0 ? (\\\\\\\\n            \\\\\\\\\\\\\\\"Like\\\\\\\\\\\\\\\"\\\\\\\\n          ) : (\\\\\\\\n            <Widget\\\\\\\\n              // TODO: LEGACY.\\\\\\\\n              src=\\\\\\\\\\\\\\\"devgovgigs.near/widget/gigs-board.components.layout.LikeButton.Faces\\\\\\\\\\\\\\\"\\\\\\\\n              props={{\\\\\\\\n                likesByUsers: Object.fromEntries(\\\\\\\\n                  post.likes.map(({ author_id }) => [author_id, \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\"])\\\\\\\\n                ),\\\\\\\\n              }}\\\\\\\\n            />\\\\\\\\n          )}\\\\\\\\n        </ButtonWithHover>\\\\\\\\n        <div class=\\\\\\\\\\\\\\\"btn-group\\\\\\\\\\\\\\\" role=\\\\\\\\\\\\\\\"group\\\\\\\\\\\\\\\">\\\\\\\\n          <ButtonWithHover\\\\\\\\n            type=\\\\\\\\\\\\\\\"button\\\\\\\\\\\\\\\"\\\\\\\\n            class=\\\\\\\\\\\\\\\"btn\\\\\\\\\\\\\\\"\\\\\\\\n            style={{ border: \\\\\\\\\\\\\\\"0px\\\\\\\\\\\\\\\" }}\\\\\\\\n            data-bs-toggle=\\\\\\\\\\\\\\\"dropdown\\\\\\\\\\\\\\\"\\\\\\\\n            aria-expanded=\\\\\\\\\\\\\\\"false\\\\\\\\\\\\\\\"\\\\\\\\n          >\\\\\\\\n            \\\\\\\\u{21aa} Reply\\\\\\\\n          </ButtonWithHover>\\\\\\\\n          <ul class=\\\\\\\\\\\\\\\"dropdown-menu\\\\\\\\\\\\\\\">\\\\\\\\n            {btnCreatorWidget(\\\\\\\\n              \\\\\\\\\\\\\\\"Idea\\\\\\\\\\\\\\\",\\\\\\\\n              emptyIcons.Idea,\\\\\\\\n              \\\\\\\\\\\\\\\"Idea\\\\\\\\\\\\\\\",\\\\\\\\n              \\\\\\\\\\\\\\\"Get feedback from the community about a problem, opportunity, or need.\\\\\\\\\\\\\\\"\\\\\\\\n            )}\\\\\\\\n            {btnCreatorWidget(\\\\\\\\n              \\\\\\\\\\\\\\\"Solution\\\\\\\\\\\\\\\",\\\\\\\\n              emptyIcons.Solution,\\\\\\\\n              \\\\\\\\\\\\\\\"Solution\\\\\\\\\\\\\\\",\\\\\\\\n              \\\\\\\\\\\\\\\"Provide a specific proposal or implementation to an idea, optionally requesting funding.\\\\\\\\\\\\\\\"\\\\\\\\n            )}\\\\\\\\n            {btnCreatorWidget(\\\\\\\\n              \\\\\\\\\\\\\\\"Attestation\\\\\\\\\\\\\\\",\\\\\\\\n              emptyIcons.Attestation,\\\\\\\\n              \\\\\\\\\\\\\\\"Attestation\\\\\\\\\\\\\\\",\\\\\\\\n              \\\\\\\\\\\\\\\"Formally review or validate a solution as a recognized expert.\\\\\\\\\\\\\\\"\\\\\\\\n            )}\\\\\\\\n            {btnCreatorWidget(\\\\\\\\n              \\\\\\\\\\\\\\\"Sponsorship\\\\\\\\\\\\\\\",\\\\\\\\n              emptyIcons.Sponsorship,\\\\\\\\n              \\\\\\\\\\\\\\\"Sponsorship\\\\\\\\\\\\\\\",\\\\\\\\n              \\\\\\\\\\\\\\\"Offer to fund projects, events, or proposals that match your needs.\\\\\\\\\\\\\\\"\\\\\\\\n            )}\\\\\\\\n            <li>\\\\\\\\n              <hr class=\\\\\\\\\\\\\\\"dropdown-divider\\\\\\\\\\\\\\\" />\\\\\\\\n            </li>\\\\\\\\n            {btnCreatorWidget(\\\\\\\\n              \\\\\\\\\\\\\\\"Comment\\\\\\\\\\\\\\\",\\\\\\\\n              emptyIcons.Comment,\\\\\\\\n              \\\\\\\\\\\\\\\"Comment\\\\\\\\\\\\\\\",\\\\\\\\n              \\\\\\\\\\\\\\\"Ask a question, provide information, or share a resource that is relevant to the thread.\\\\\\\\\\\\\\\"\\\\\\\\n            )}\\\\\\\\n          </ul>\\\\\\\\n        </div>\\\\\\\\n        <ButtonWithHover\\\\\\\\n          type=\\\\\\\\\\\\\\\"button\\\\\\\\\\\\\\\"\\\\\\\\n          class=\\\\\\\\\\\\\\\"btn\\\\\\\\\\\\\\\"\\\\\\\\n          style={{ border: \\\\\\\\\\\\\\\"0px\\\\\\\\\\\\\\\" }}\\\\\\\\n          data-bs-toggle=\\\\\\\\\\\\\\\"collapse\\\\\\\\\\\\\\\"\\\\\\\\n          href={`#collapseChildPosts${postId}`}\\\\\\\\n          aria-expanded={defaultExpanded}\\\\\\\\n          aria-controls={`collapseChildPosts${postId}`}\\\\\\\\n        >\\\\\\\\n          <i class=\\\\\\\\\\\\\\\"bi bi-chevron-down\\\\\\\\\\\\\\\"> </i>{\\\\\\\\\\\\\\\" \\\\\\\\\\\\\\\"}\\\\\\\\n          {`Expand Replies (${childPostIds.length})`}\\\\\\\\n        </ButtonWithHover>\\\\\\\\n\\\\\\\\n        {isUnderPost || !parentId ? (\\\\\\\\n          <div key=\\\\\\\\\\\\\\\"link-to-parent\\\\\\\\\\\\\\\"></div>\\\\\\\\n        ) : (\\\\\\\\n          <Link\\\\\\\\n            to={href({\\\\\\\\n              gateway: \\\\\\\\\\\\\\\"near.org\\\\\\\\\\\\\\\",\\\\\\\\n              widgetSrc: \\\\\\\\\\\\\\\"devhub.near/widget/app\\\\\\\\\\\\\\\",\\\\\\\\n              params: { page: \\\\\\\\\\\\\\\"post\\\\\\\\\\\\\\\", id: parentId },\\\\\\\\n            })}\\\\\\\\n          >\\\\\\\\n            <ButtonWithHover\\\\\\\\n              type=\\\\\\\\\\\\\\\"button\\\\\\\\\\\\\\\"\\\\\\\\n              style={{ border: \\\\\\\\\\\\\\\"0px\\\\\\\\\\\\\\\" }}\\\\\\\\n              className=\\\\\\\\\\\\\\\"btn\\\\\\\\\\\\\\\"\\\\\\\\n              key=\\\\\\\\\\\\\\\"link-to-parent\\\\\\\\\\\\\\\"\\\\\\\\n            >\\\\\\\\n              <i class=\\\\\\\\\\\\\\\"bi bi-arrow-90deg-up\\\\\\\\\\\\\\\"></i>Go to parent\\\\\\\\n            </ButtonWithHover>\\\\\\\\n          </Link>\\\\\\\\n        )}\\\\\\\\n      </div>\\\\\\\\n    </FooterButtonsContianer>\\\\\\\\n  </div>\\\\\\\\n);\\\\\\\\n\\\\\\\\nconst CreatorWidget = (postType) => {\\\\\\\\n  return (\\\\\\\\n    <div\\\\\\\\n      class={`collapse ${\\\\\\\\n        draftState?.parent_post_id == postId && draftState?.postType == postType\\\\\\\\n          ? \\\\\\\\\\\\\\\"show\\\\\\\\\\\\\\\"\\\\\\\\n          : \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\"\\\\\\\\n      }`}\\\\\\\\n      id={`collapse${postType}Creator${postId}`}\\\\\\\\n      data-bs-parent={`#accordion${postId}`}\\\\\\\\n    >\\\\\\\\n      <Widget\\\\\\\\n        src={\\\\\\\\\\\\\\\"devhub.near/widget/devhub.entity.post.PostEditor\\\\\\\\\\\\\\\"}\\\\\\\\n        props={{\\\\\\\\n          postType,\\\\\\\\n          onDraftStateChange: props.onDraftStateChange,\\\\\\\\n          draftState:\\\\\\\\n            draftState?.parent_post_id == postId ? draftState : undefined,\\\\\\\\n          parentId: postId,\\\\\\\\n          mode: \\\\\\\\\\\\\\\"Create\\\\\\\\\\\\\\\",\\\\\\\\n        }}\\\\\\\\n      />\\\\\\\\n    </div>\\\\\\\\n  );\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst tokenMapping = {\\\\\\\\n  NEAR: \\\\\\\\\\\\\\\"NEAR\\\\\\\\\\\\\\\",\\\\\\\\n  USDT: {\\\\\\\\n    NEP141: {\\\\\\\\n      address: \\\\\\\\\\\\\\\"usdt.tether-token.near\\\\\\\\\\\\\\\",\\\\\\\\n    },\\\\\\\\n  },\\\\\\\\n  USDC: {\\\\\\\\n    NEP141: {\\\\\\\\n      address:\\\\\\\\n        \\\\\\\\\\\\\\\"17208628f84f5d6ad33f0da3bbbeb27ffcb398eac501a31bd6ad2011e36133a1\\\\\\\\\\\\\\\",\\\\\\\\n    },\\\\\\\\n  },\\\\\\\\n  // Add more tokens here as needed\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst reverseTokenMapping = Object.keys(tokenMapping).reduce(\\\\\\\\n  (reverseMap, key) => {\\\\\\\\n    const value = tokenMapping[key];\\\\\\\\n    if (typeof value === \\\\\\\\\\\\\\\"object\\\\\\\\\\\\\\\") {\\\\\\\\n      reverseMap[JSON.stringify(value)] = key;\\\\\\\\n    }\\\\\\\\n    return reverseMap;\\\\\\\\n  },\\\\\\\\n  {}\\\\\\\\n);\\\\\\\\n\\\\\\\\nfunction tokenResolver(token) {\\\\\\\\n  if (typeof token === \\\\\\\\\\\\\\\"string\\\\\\\\\\\\\\\") {\\\\\\\\n    return token;\\\\\\\\n  } else if (typeof token === \\\\\\\\\\\\\\\"object\\\\\\\\\\\\\\\") {\\\\\\\\n    const tokenString = reverseTokenMapping[JSON.stringify(token)];\\\\\\\\n    return tokenString || null;\\\\\\\\n  } else {\\\\\\\\n    return null; // Invalid input\\\\\\\\n  }\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst EditorWidget = (postType) => {\\\\\\\\n  return (\\\\\\\\n    <div\\\\\\\\n      class={`collapse ${\\\\\\\\n        draftState?.edit_post_id == postId && draftState?.postType == postType\\\\\\\\n          ? \\\\\\\\\\\\\\\"show\\\\\\\\\\\\\\\"\\\\\\\\n          : \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\"\\\\\\\\n      }`}\\\\\\\\n      id={`collapse${postType}Editor${postId}`}\\\\\\\\n      data-bs-parent={`#accordion${postId}`}\\\\\\\\n    >\\\\\\\\n      <Widget\\\\\\\\n        src={\\\\\\\\\\\\\\\"devhub.near/widget/devhub.entity.post.PostEditor\\\\\\\\\\\\\\\"}\\\\\\\\n        props={{\\\\\\\\n          postType,\\\\\\\\n          postId,\\\\\\\\n          mode: \\\\\\\\\\\\\\\"Edit\\\\\\\\\\\\\\\",\\\\\\\\n          author_id: post.author_id,\\\\\\\\n          labels: post.snapshot.labels,\\\\\\\\n          name: post.snapshot.name,\\\\\\\\n          description: post.snapshot.description,\\\\\\\\n          amount: post.snapshot.amount,\\\\\\\\n          token: tokenResolver(post.snapshot.sponsorship_token),\\\\\\\\n          supervisor: post.snapshot.supervisor,\\\\\\\\n          githubLink: post.snapshot.github_link,\\\\\\\\n          onDraftStateChange: props.onDraftStateChange,\\\\\\\\n          draftState:\\\\\\\\n            draftState?.edit_post_id == postId ? draftState : undefined,\\\\\\\\n        }}\\\\\\\\n      />\\\\\\\\n    </div>\\\\\\\\n  );\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst isDraft =\\\\\\\\n  (draftState?.parent_post_id === postId &&\\\\\\\\n    draftState?.postType === state.postType) ||\\\\\\\\n  (draftState?.edit_post_id === postId &&\\\\\\\\n    draftState?.postType === state.postType);\\\\\\\\n\\\\\\\\nfunction Editor() {\\\\\\\\n  return (\\\\\\\\n    <div class=\\\\\\\\\\\\\\\"row\\\\\\\\\\\\\\\" id={`accordion${postId}`} key=\\\\\\\\\\\\\\\"editors-footer\\\\\\\\\\\\\\\">\\\\\\\\n      <div\\\\\\\\n        key={`${state.postType}${state.editorType}${postId}`}\\\\\\\\n        className={\\\\\\\\\\\\\\\"w-100\\\\\\\\\\\\\\\"}\\\\\\\\n      >\\\\\\\\n        {state.editorType === \\\\\\\\\\\\\\\"CREATE\\\\\\\\\\\\\\\" ? (\\\\\\\\n          <>\\\\\\\\n            <Widget\\\\\\\\n              src={\\\\\\\\\\\\\\\"devhub.near/widget/devhub.entity.post.PostEditor\\\\\\\\\\\\\\\"}\\\\\\\\n              props={{\\\\\\\\n                postType: state.postType,\\\\\\\\n                onDraftStateChange: props.onDraftStateChange,\\\\\\\\n                draftState:\\\\\\\\n                  draftState?.parent_post_id == postId ? draftState : undefined,\\\\\\\\n                parentId: postId,\\\\\\\\n                mode: \\\\\\\\\\\\\\\"Create\\\\\\\\\\\\\\\",\\\\\\\\n              }}\\\\\\\\n            />\\\\\\\\n          </>\\\\\\\\n        ) : (\\\\\\\\n          <>\\\\\\\\n            <Widget\\\\\\\\n              src={\\\\\\\\\\\\\\\"devhub.near/widget/devhub.entity.post.PostEditor\\\\\\\\\\\\\\\"}\\\\\\\\n              props={{\\\\\\\\n                postType: state.postType,\\\\\\\\n                postId,\\\\\\\\n                mode: \\\\\\\\\\\\\\\"Edit\\\\\\\\\\\\\\\",\\\\\\\\n                author_id: post.author_id,\\\\\\\\n                labels: post.snapshot.labels,\\\\\\\\n                name: post.snapshot.name,\\\\\\\\n                description: post.snapshot.description,\\\\\\\\n                amount: post.snapshot.amount,\\\\\\\\n                token: tokenResolver(post.snapshot.sponsorship_token),\\\\\\\\n                supervisor: post.snapshot.supervisor,\\\\\\\\n                githubLink: post.snapshot.github_link,\\\\\\\\n                onDraftStateChange: props.onDraftStateChange,\\\\\\\\n                draftState:\\\\\\\\n                  draftState?.edit_post_id == postId ? draftState : undefined,\\\\\\\\n              }}\\\\\\\\n            />\\\\\\\\n          </>\\\\\\\\n        )}\\\\\\\\n      </div>\\\\\\\\n    </div>\\\\\\\\n  );\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst renamedPostType =\\\\\\\\n  snapshot.post_type == \\\\\\\\\\\\\\\"Submission\\\\\\\\\\\\\\\" ? \\\\\\\\\\\\\\\"Solution\\\\\\\\\\\\\\\" : snapshot.post_type;\\\\\\\\n\\\\\\\\nconst tags = post.snapshot.labels ? (\\\\\\\\n  <div\\\\\\\\n    class=\\\\\\\\\\\\\\\"card-title d-flex flex-wrap align-items-center\\\\\\\\\\\\\\\"\\\\\\\\n    style={{ margin: \\\\\\\\\\\\\\\"20px 0\\\\\\\\\\\\\\\" }}\\\\\\\\n    key=\\\\\\\\\\\\\\\"post-labels\\\\\\\\\\\\\\\"\\\\\\\\n  >\\\\\\\\n    {post.snapshot.labels.map((tag, idx) => (\\\\\\\\n      <div className=\\\\\\\\\\\\\\\"d-flex align-items-center my-3 me-3\\\\\\\\\\\\\\\">\\\\\\\\n        <Link\\\\\\\\n          to={href({\\\\\\\\n            widgetSrc: \\\\\\\\\\\\\\\"devhub.near/widget/app\\\\\\\\\\\\\\\",\\\\\\\\n            params: { page: \\\\\\\\\\\\\\\"feed\\\\\\\\\\\\\\\", tag: tag },\\\\\\\\n          })}\\\\\\\\n        >\\\\\\\\n          <div\\\\\\\\n            className=\\\\\\\\\\\\\\\"d-flex gap-3 align-items-center\\\\\\\\\\\\\\\"\\\\\\\\n            style={{ cursor: \\\\\\\\\\\\\\\"pointer\\\\\\\\\\\\\\\", textDecoration: \\\\\\\\\\\\\\\"none\\\\\\\\\\\\\\\" }}\\\\\\\\n          >\\\\\\\\n            <Widget\\\\\\\\n              src={\\\\\\\\\\\\\\\"devhub.near/widget/devhub.components.atom.Tag\\\\\\\\\\\\\\\"}\\\\\\\\n              props={{\\\\\\\\n                tag,\\\\\\\\n                black: true,\\\\\\\\n              }}\\\\\\\\n            />\\\\\\\\n          </div>\\\\\\\\n        </Link>\\\\\\\\n        {idx !== post.snapshot.labels.length - 1 && (\\\\\\\\n          <span className=\\\\\\\\\\\\\\\"ms-3\\\\\\\\\\\\\\\">\\\\\\\\u{2022}</span>\\\\\\\\n        )}\\\\\\\\n      </div>\\\\\\\\n    ))}\\\\\\\\n  </div>\\\\\\\\n) : (\\\\\\\\n  <div key=\\\\\\\\\\\\\\\"post-labels\\\\\\\\\\\\\\\"></div>\\\\\\\\n);\\\\\\\\n\\\\\\\\nconst Title = styled.h5`\\\\\\\\n  margin: 1rem 0;\\\\\\\\n\\\\\\\\n  color: #151515;\\\\\\\\n  font-size: 1.15rem;\\\\\\\\n  font-style: normal;\\\\\\\\n  font-weight: 700;\\\\\\\\n  line-height: 1.625rem; /* 55.556% */\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst postTitle =\\\\\\\\n  snapshot.post_type == \\\\\\\\\\\\\\\"Comment\\\\\\\\\\\\\\\" ? (\\\\\\\\n    <div key=\\\\\\\\\\\\\\\"post-title\\\\\\\\\\\\\\\"></div>\\\\\\\\n  ) : (\\\\\\\\n    <Title key=\\\\\\\\\\\\\\\"post-title\\\\\\\\\\\\\\\">\\\\\\\\n      {emptyIcons[snapshot.post_type]} {renamedPostType}: {snapshot.name}\\\\\\\\n    </Title>\\\\\\\\n  );\\\\\\\\n\\\\\\\\nconst postExtra =\\\\\\\\n  snapshot.post_type == \\\\\\\\\\\\\\\"Sponsorship\\\\\\\\\\\\\\\" ? (\\\\\\\\n    <div key=\\\\\\\\\\\\\\\"post-extra\\\\\\\\\\\\\\\">\\\\\\\\n      <h6 class=\\\\\\\\\\\\\\\"card-subtitle mb-2 text-muted\\\\\\\\\\\\\\\">\\\\\\\\n        Maximum amount: {snapshot.amount}{\\\\\\\\\\\\\\\" \\\\\\\\\\\\\\\"}\\\\\\\\n        {tokenResolver(snapshot.sponsorship_token)}\\\\\\\\n      </h6>\\\\\\\\n      <h6 class=\\\\\\\\\\\\\\\"card-subtitle mb-2 text-muted\\\\\\\\\\\\\\\">\\\\\\\\n        Supervisor:{\\\\\\\\\\\\\\\" \\\\\\\\\\\\\\\"}\\\\\\\\n        <Widget\\\\\\\\n          src={\\\\\\\\\\\\\\\"neardevgov.near/widget/ProfileLine\\\\\\\\\\\\\\\"}\\\\\\\\n          props={{ accountId: snapshot.supervisor }}\\\\\\\\n        />\\\\\\\\n      </h6>\\\\\\\\n    </div>\\\\\\\\n  ) : (\\\\\\\\n    <div></div>\\\\\\\\n  );\\\\\\\\n\\\\\\\\nconst childPostHasDraft = childPostIds.find(\\\\\\\\n  (childId) =>\\\\\\\\n    childId == draftState?.edit_post_id || childId == draftState?.parent_post_id\\\\\\\\n);\\\\\\\\nif (\\\\\\\\n  (childPostHasDraft || state.childrenOfChildPostsHasDraft) &&\\\\\\\\n  props.expandParent\\\\\\\\n) {\\\\\\\\n  props.expandParent();\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst postsList =\\\\\\\\n  props.isPreview || childPostIds.length == 0 ? (\\\\\\\\n    <div key=\\\\\\\\\\\\\\\"posts-list\\\\\\\\\\\\\\\"></div>\\\\\\\\n  ) : (\\\\\\\\n    <div class=\\\\\\\\\\\\\\\"row\\\\\\\\\\\\\\\" key=\\\\\\\\\\\\\\\"posts-list\\\\\\\\\\\\\\\">\\\\\\\\n      <div\\\\\\\\n        class={`collapse mt-3 ${\\\\\\\\n          defaultExpanded ||\\\\\\\\n          childPostHasDraft ||\\\\\\\\n          state.childrenOfChildPostsHasDraft\\\\\\\\n            ? \\\\\\\\\\\\\\\"show\\\\\\\\\\\\\\\"\\\\\\\\n            : \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\"\\\\\\\\n        }`}\\\\\\\\n        id={`collapseChildPosts${postId}`}\\\\\\\\n      >\\\\\\\\n        {childPostIds.map((childId) => (\\\\\\\\n          <Widget\\\\\\\\n            src=\\\\\\\\\\\\\\\"devhub.near/widget/devhub.entity.post.Post\\\\\\\\\\\\\\\"\\\\\\\\n            props={{\\\\\\\\n              id: childId,\\\\\\\\n              isUnderPost: true,\\\\\\\\n              onDraftStateChange: props.onDraftStateChange,\\\\\\\\n              draftState,\\\\\\\\n              expandParent: () =>\\\\\\\\n                State.update({ childrenOfChildPostsHasDraft: true }),\\\\\\\\n              referral: `subpost${childId}of${postId}`,\\\\\\\\n            }}\\\\\\\\n          />\\\\\\\\n        ))}\\\\\\\\n      </div>\\\\\\\\n    </div>\\\\\\\\n  );\\\\\\\\n\\\\\\\\nconst LimitedMarkdown = styled.div`\\\\\\\\n  max-height: 20em;\\\\\\\\n`;\\\\\\\\n\\\\\\\\n// Determine if located in the post page.\\\\\\\\nconst isInList = props.isInList;\\\\\\\\nconst contentArray = snapshot.description.split(\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\");\\\\\\\\nconst needClamp = isInList && contentArray.length > 5;\\\\\\\\n\\\\\\\\ninitState({\\\\\\\\n  clamp: needClamp,\\\\\\\\n});\\\\\\\\n\\\\\\\\nconst clampedContent = needClamp\\\\\\\\n  ? contentArray.slice(0, 3).join(\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\")\\\\\\\\n  : snapshot.description;\\\\\\\\n\\\\\\\\n// Should make sure the posts under the currently top viewed post are limited in size.\\\\\\\\nconst descriptionArea = isUnderPost ? (\\\\\\\\n  <LimitedMarkdown className=\\\\\\\\\\\\\\\"overflow-auto\\\\\\\\\\\\\\\" key=\\\\\\\\\\\\\\\"description-area\\\\\\\\\\\\\\\">\\\\\\\\n    {/* {widget(\\\\\\\\\\\\\\\"components.molecule.markdown-viewer\\\\\\\\\\\\\\\", {\\\\\\\\n      text: snapshot.description,\\\\\\\\n    })} */}\\\\\\\\n    <Widget\\\\\\\\n      src={\\\\\\\\\\\\\\\"devhub.near/widget/devhub.components.molecule.MarkdownViewer\\\\\\\\\\\\\\\"}\\\\\\\\n      props={{\\\\\\\\n        text: snapshot.description,\\\\\\\\n      }}\\\\\\\\n    />\\\\\\\\n  </LimitedMarkdown>\\\\\\\\n) : (\\\\\\\\n  <div className=\\\\\\\\\\\\\\\"w-100 overflow-auto\\\\\\\\\\\\\\\">\\\\\\\\n    <div class={state.clamp ? \\\\\\\\\\\\\\\"clamp\\\\\\\\\\\\\\\" : \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\"}>\\\\\\\\n      {/* {widget(\\\\\\\\\\\\\\\"components.molecule.markdown-viewer\\\\\\\\\\\\\\\", {\\\\\\\\n        text: state.clamp ? clampedContent : snapshot.description,\\\\\\\\n      })} */}\\\\\\\\n      <Widget\\\\\\\\n        src={\\\\\\\\\\\\\\\"devhub.near/widget/devhub.components.molecule.MarkdownViewer\\\\\\\\\\\\\\\"}\\\\\\\\n        props={{\\\\\\\\n          text: state.clamp ? clampedContent : snapshot.description,\\\\\\\\n        }}\\\\\\\\n      />\\\\\\\\n    </div>\\\\\\\\n    {state.clamp ? (\\\\\\\\n      <div class=\\\\\\\\\\\\\\\"d-flex justify-content-start\\\\\\\\\\\\\\\">\\\\\\\\n        <a\\\\\\\\n          style={{ cursor: \\\\\\\\\\\\\\\"pointer\\\\\\\\\\\\\\\", color: \\\\\\\\\\\\\\\"#00ec97\\\\\\\\\\\\\\\" }}\\\\\\\\n          class=\\\\\\\\\\\\\\\"btn-link text-dark fw-bold text-decoration-none\\\\\\\\\\\\\\\"\\\\\\\\n          onClick={() => State.update({ clamp: false })}\\\\\\\\n        >\\\\\\\\n          See more\\\\\\\\n        </a>\\\\\\\\n      </div>\\\\\\\\n    ) : (\\\\\\\\n      <></>\\\\\\\\n    )}\\\\\\\\n  </div>\\\\\\\\n);\\\\\\\\n\\\\\\\\nconst timestampElement = (_snapshot) => {\\\\\\\\n  return (\\\\\\\\n    <Link\\\\\\\\n      class=\\\\\\\\\\\\\\\"text-muted\\\\\\\\\\\\\\\"\\\\\\\\n      href={href({\\\\\\\\n        gateway: \\\\\\\\\\\\\\\"near.org\\\\\\\\\\\\\\\",\\\\\\\\n        widgetSrc: \\\\\\\\\\\\\\\"devhub.near/widget/app\\\\\\\\\\\\\\\",\\\\\\\\n        params: {\\\\\\\\n          page: \\\\\\\\\\\\\\\"post\\\\\\\\\\\\\\\",\\\\\\\\n          id: postId,\\\\\\\\n          timestamp: _snapshot.timestamp,\\\\\\\\n          compareTimestamp: null,\\\\\\\\n          referral,\\\\\\\\n        },\\\\\\\\n      })}\\\\\\\\n    >\\\\\\\\n      {readableDate(_snapshot.timestamp / 1000000).substring(4)}\\\\\\\\n\\\\\\\\n      <Widget\\\\\\\\n        src=\\\\\\\\\\\\\\\"mob.near/widget/ProfileImage\\\\\\\\\\\\\\\"\\\\\\\\n        props={{\\\\\\\\n          accountId: _snapshot.editor_id,\\\\\\\\n          style: {\\\\\\\\n            width: \\\\\\\\\\\\\\\"1.25em\\\\\\\\\\\\\\\",\\\\\\\\n            height: \\\\\\\\\\\\\\\"1.25em\\\\\\\\\\\\\\\",\\\\\\\\n          },\\\\\\\\n          imageStyle: {\\\\\\\\n            transform: \\\\\\\\\\\\\\\"translateY(-12.5%)\\\\\\\\\\\\\\\",\\\\\\\\n          },\\\\\\\\n        }}\\\\\\\\n      />\\\\\\\\n      {_snapshot.editor_id.substring(0, 8)}\\\\\\\\n    </Link>\\\\\\\\n  );\\\\\\\\n};\\\\\\\\n\\\\\\\\nfunction combineText(_snapshot) {\\\\\\\\n  return (\\\\\\\\n    \\\\\\\\\\\\\\\"## \\\\\\\\\\\\\\\" +\\\\\\\\n    _snapshot.post_type +\\\\\\\\n    \\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\" +\\\\\\\\n    _snapshot.name +\\\\\\\\n    \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\" +\\\\\\\\n    _snapshot.description\\\\\\\\n  );\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst CardContainer = styled.div`\\\\\\\\n  padding: 1.5rem 3rem !important;\\\\\\\\n  border-radius: 16px !important;\\\\\\\\n  border: 1px solid rgba(129, 129, 129, 0.3) !important;\\\\\\\\n  background: #fffefe !important;\\\\\\\\n\\\\\\\\n  @media screen and (max-width: 960px) {\\\\\\\\n    padding: 1rem !important;\\\\\\\\n  }\\\\\\\\n`;\\\\\\\\n\\\\\\\\nreturn (\\\\\\\\n  <CardContainer className={`card ${borders[snapshot.post_type]} attractable`}>\\\\\\\\n    {header}\\\\\\\\n    <div className=\\\\\\\\\\\\\\\"card-body\\\\\\\\\\\\\\\" style={{ padding: 0 }}>\\\\\\\\n      {searchKeywords}\\\\\\\\n      {compareSnapshot ? (\\\\\\\\n        <div\\\\\\\\n          class=\\\\\\\\\\\\\\\"border rounded\\\\\\\\\\\\\\\"\\\\\\\\n          style={{ marginTop: \\\\\\\\\\\\\\\"16px\\\\\\\\\\\\\\\", marginBottom: \\\\\\\\\\\\\\\"16px\\\\\\\\\\\\\\\" }}\\\\\\\\n        >\\\\\\\\n          <div class=\\\\\\\\\\\\\\\"d-flex justify-content-end\\\\\\\\\\\\\\\" style={{ fontSize: \\\\\\\\\\\\\\\"12px\\\\\\\\\\\\\\\" }}>\\\\\\\\n            <div class=\\\\\\\\\\\\\\\"d-flex w-50 justify-content-end mt-1 me-2\\\\\\\\\\\\\\\">\\\\\\\\n              {timestampElement(snapshot)}\\\\\\\\n              {snapshot !== compareSnapshot && (\\\\\\\\n                <>\\\\\\\\n                  <div class=\\\\\\\\\\\\\\\"mx-1 align-self-center\\\\\\\\\\\\\\\">\\\\\\\\n                    <i class=\\\\\\\\\\\\\\\"bi bi-file-earmark-diff\\\\\\\\\\\\\\\" />\\\\\\\\n                  </div>\\\\\\\\n                  {timestampElement(compareSnapshot)}\\\\\\\\n                </>\\\\\\\\n              )}\\\\\\\\n            </div>\\\\\\\\n          </div>\\\\\\\\n          <div className=\\\\\\\\\\\\\\\"w-100 overflow-auto\\\\\\\\\\\\\\\">\\\\\\\\n            <Widget\\\\\\\\n              src=\\\\\\\\\\\\\\\"markeljan.near/widget/MarkdownDiff\\\\\\\\\\\\\\\"\\\\\\\\n              props={{\\\\\\\\n                post: post,\\\\\\\\n                currentCode: combineText(\\\\\\\\n                  swapTimestamps ? compareSnapshot : snapshot\\\\\\\\n                ),\\\\\\\\n                prevCode: combineText(\\\\\\\\n                  swapTimestamps ? snapshot : compareSnapshot\\\\\\\\n                ),\\\\\\\\n                showLineNumber: true,\\\\\\\\n              }}\\\\\\\\n            />\\\\\\\\n          </div>\\\\\\\\n        </div>\\\\\\\\n      ) : (\\\\\\\\n        <>\\\\\\\\n          {postTitle}\\\\\\\\n          {postExtra}\\\\\\\\n          {descriptionArea}\\\\\\\\n        </>\\\\\\\\n      )}\\\\\\\\n      {tags}\\\\\\\\n      {buttonsFooter}\\\\\\\\n      {!props.isPreview && (isDraft || state.showEditor) && <Editor />}\\\\\\\\n      {postsList}\\\\\\\\n    </div>\\\\\\\\n  </CardContainer>\\\\\\\\n);\\\\\\\\n\"}}}}}"
      }
    ],
    "actions_agg": {
      "deposit": 0
    },
    "outcomes": {
      "status": true
    },
    "outcomes_agg": {
      "transaction_fee": 1.1801280334693e+21
    }
  },
  {
    "id": "1336760549",
    "receipt_id": "6XLGYXksJ6dwVadu6Fq3jkhFqoirZFnemPxF4BvG3zdu",
    "predecessor_account_id": "system",
    "receiver_account_id": "devhub.near",
    "receipt_kind": "ACTION",
    "receipt_block": {
      "block_hash": "22ejA9R8RB44rN52n6f4Y69fnhZpKW5YmaKfqbmEFiVu",
      "block_height": 104865500,
      "block_timestamp": 1699043597683219000
    },
    "receipt_outcome": {
      "gas_burnt": 223182562500,
      "tokens_burnt": 0,
      "executor_account_id": "devhub.near",
      "status": true
    },
    "transaction_hash": "J1QPzUaBtcxVR3ZFHnzAwrrWzkzimqA4JuxuqcyqSnXu",
    "included_in_block_hash": "62peRCbYnPFecD2M6KtoCUhKNU5WNy8wWs2uRb7doqyM",
    "block_timestamp": "1699043595899960212",
    "block": {
      "block_height": 104865498
    },
    "receipt_conversion_tokens_burnt": "248377463132000000000",
    "actions": [
      {
        "action": "TRANSFER",
        "method": null,
        "deposit": 1.8813276055739974e+23,
        "fee": 0,
        "args": null
      }
    ],
    "actions_agg": {
      "deposit": 0
    },
    "outcomes": {
      "status": true
    },
    "outcomes_agg": {
      "transaction_fee": 1.1801280334693e+21
    }
  },
  {
    "id": "1336761830",
    "receipt_id": "3Xf635R5sG3f7qZaKwNCyqAEUuvGCukSw2SQxjCT1CeC",
    "predecessor_account_id": "devhub.near",
    "receiver_account_id": "social.near",
    "receipt_kind": "ACTION",
    "receipt_block": {
      "block_hash": "8ZfeCcsBv863Pa15sj7Bb3oEFz79Yo45ngTmFSNSSvnR",
      "block_height": 104865566,
      "block_timestamp": 1699043669918006500
    },
    "receipt_outcome": {
      "gas_burnt": 10997481731966,
      "tokens_burnt": 1.0997481731966e+21,
      "executor_account_id": "social.near",
      "status": true
    },
    "transaction_hash": "2TvHc1EjqDs9AGAiEy7yST6S1HxfJnZ2VT4ucMetYFtq",
    "included_in_block_hash": "FEUS9jyJbwuMJansG6S8pTSe4L3qY8NJ7qkGFpsZQ3Xc",
    "block_timestamp": "1699043668759864356",
    "block": {
      "block_height": 104865565
    },
    "receipt_conversion_tokens_burnt": "249347411301200000000",
    "actions": [
      {
        "action": "FUNCTION_CALL",
        "method": "set",
        "deposit": 1,
        "fee": 1.0997481731966e+21,
        "args": "{\"data\": {\"devhub.near\": {\"widget\": {\"app\": {\"\": \"/**\\\\\\\\n\\\\\\\\n* This is the main entry point for the DevHub application.\\\\\\\\n * Page route gets passed in through params, along with all other page props.\\\\\\\\n */\\\\\\\\n\\\\\\\\nconst { page, ...passProps } = props;\\\\\\\\n\\\\\\\\n// Import our modules\\\\\\\\nconst { AppLayout } = VM.require(\\\\\\\\n  \\\\\\\\\\\\\\\"devhub.near/widget/devhub.components.templates.AppLayout\\\\\\\\\\\\\\\"\\\\\\\\n);\\\\\\\\n\\\\\\\\nif (!AppLayout) {\\\\\\\\n  return <p>Loading modules...</p>;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// CSS styles to be used across the app.\\\\\\\\n// Define fonts here, as well as any other global styles.\\\\\\\\nconst Theme = styled.div`\\\\\\\\n  a {\\\\\\\\n    color: inherit;\\\\\\\\n  }\\\\\\\\n\\\\\\\\n  .attractable {\\\\\\\\n    box-shadow: 0 0.125rem 0.25rem rgba(0, 0, 0, 0.075) !important;\\\\\\\\n    transition: box-shadow 0.6s;\\\\\\\\n\\\\\\\\n    &:hover {\\\\\\\\n      box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.15) !important;\\\\\\\\n    }\\\\\\\\n  }\\\\\\\\n`;\\\\\\\\n\\\\\\\\nif (!page) {\\\\\\\\n  // If no page is specified, we default to the feed page TEMP\\\\\\\\n  page = \\\\\\\\\\\\\\\"home\\\\\\\\\\\\\\\";\\\\\\\\n}\\\\\\\\n\\\\\\\\n// This is our navigation, rendering the page based on the page parameter\\\\\\\\nfunction Page() {\\\\\\\\n  const routes = page.split(\\\\\\\\\\\\\\\".\\\\\\\\\\\\\\\");\\\\\\\\n  switch (routes[0]) {\\\\\\\\n    case \\\\\\\\\\\\\\\"home\\\\\\\\\\\\\\\": {\\\\\\\\n      return (\\\\\\\\n        <Widget\\\\\\\\n          src=\\\\\\\\\\\\\\\"devhub.near/widget/devhub.page.home\\\\\\\\\\\\\\\"\\\\\\\\n          props={passProps}\\\\\\\\n        />\\\\\\\\n      );\\\\\\\\n    }\\\\\\\\n    // ?page=communities\\\\\\\\n    case \\\\\\\\\\\\\\\"communities\\\\\\\\\\\\\\\": {\\\\\\\\n      return (\\\\\\\\n        <Widget\\\\\\\\n          src={\\\\\\\\\\\\\\\"devhub.near/widget/devhub.page.communities\\\\\\\\\\\\\\\"}\\\\\\\\n          props={passProps}\\\\\\\\n        />\\\\\\\\n      );\\\\\\\\n    }\\\\\\\\n    // ?page=community\\\\\\\\n    case \\\\\\\\\\\\\\\"community\\\\\\\\\\\\\\\": {\\\\\\\\n      return (\\\\\\\\n        // Considering to consolsidate this into a single widget,\\\\\\\\n        // where each level handles its own routing.\\\\\\\\n        // Modularizing a page just like we do with addons\\\\\\\\n        <Widget\\\\\\\\n          src={\\\\\\\\\\\\\\\"devhub.near/widget/devhub.entity.community.Provider\\\\\\\\\\\\\\\"}\\\\\\\\n          props={{\\\\\\\\n            ...passProps,\\\\\\\\n            Children: (p) => {\\\\\\\\n              // passing props from the Provider into the Children\\\\\\\\n              switch (routes[1]) {\\\\\\\\n                // ?page=community.configuration\\\\\\\\n                case \\\\\\\\\\\\\\\"configuration\\\\\\\\\\\\\\\": {\\\\\\\\n                  return (\\\\\\\\n                    <Widget\\\\\\\\n                      src={\\\\\\\\n                        \\\\\\\\\\\\\\\"devhub.near/widget/devhub.page.community.configuration\\\\\\\\\\\\\\\"\\\\\\\\n                      }\\\\\\\\n                      props={{\\\\\\\\n                        ...passProps,\\\\\\\\n                        ...p,\\\\\\\\n                      }}\\\\\\\\n                    />\\\\\\\\n                  );\\\\\\\\n                }\\\\\\\\n                // ?page=community\\\\\\\\n                default: {\\\\\\\\n                  return (\\\\\\\\n                    <Widget\\\\\\\\n                      src={\\\\\\\\\\\\\\\"devhub.near/widget/devhub.page.community.index\\\\\\\\\\\\\\\"}\\\\\\\\n                      props={{\\\\\\\\n                        ...passProps,\\\\\\\\n                        ...p,\\\\\\\\n                      }}\\\\\\\\n                    />\\\\\\\\n                  );\\\\\\\\n                }\\\\\\\\n              }\\\\\\\\n            },\\\\\\\\n          }}\\\\\\\\n        />\\\\\\\\n      );\\\\\\\\n    }\\\\\\\\n    // ?page=feed\\\\\\\\n    case \\\\\\\\\\\\\\\"feed\\\\\\\\\\\\\\\": {\\\\\\\\n      return (\\\\\\\\n        <Widget\\\\\\\\n          src={\\\\\\\\\\\\\\\"devhub.near/widget/devhub.page.feed\\\\\\\\\\\\\\\"}\\\\\\\\n          props={passProps}\\\\\\\\n        />\\\\\\\\n      );\\\\\\\\n    }\\\\\\\\n    // ?page=create\\\\\\\\n    case \\\\\\\\\\\\\\\"create\\\\\\\\\\\\\\\": {\\\\\\\\n      return (\\\\\\\\n        <Widget\\\\\\\\n          src={\\\\\\\\\\\\\\\"devhub.near/widget/devhub.page.create\\\\\\\\\\\\\\\"}\\\\\\\\n          props={passProps}\\\\\\\\n        />\\\\\\\\n      );\\\\\\\\n    }\\\\\\\\n    // ?page=about\\\\\\\\n    case \\\\\\\\\\\\\\\"about\\\\\\\\\\\\\\\": {\\\\\\\\n      return (\\\\\\\\n        <Widget\\\\\\\\n          src={\\\\\\\\\\\\\\\"devhub.near/widget/devhub.page.about\\\\\\\\\\\\\\\"}\\\\\\\\n          props={passProps}\\\\\\\\n        />\\\\\\\\n      );\\\\\\\\n    }\\\\\\\\n    case \\\\\\\\\\\\\\\"contribute\\\\\\\\\\\\\\\": {\\\\\\\\n      return (\\\\\\\\n        <Widget\\\\\\\\n          src={\\\\\\\\\\\\\\\"devhub.near/widget/devhub.page.contribute\\\\\\\\\\\\\\\"}\\\\\\\\n          props={passProps}\\\\\\\\n        />\\\\\\\\n      );\\\\\\\\n    }\\\\\\\\n    case \\\\\\\\\\\\\\\"profile\\\\\\\\\\\\\\\": {\\\\\\\\n      return (\\\\\\\\n        <Widget\\\\\\\\n          src={\\\\\\\\\\\\\\\"devhub.near/widget/devhub.page.profile\\\\\\\\\\\\\\\"}\\\\\\\\n          props={passProps}\\\\\\\\n        />\\\\\\\\n      );\\\\\\\\n    }\\\\\\\\n    // ?page=blog\\\\\\\\n    case \\\\\\\\\\\\\\\"blog\\\\\\\\\\\\\\\": {\\\\\\\\n      return (\\\\\\\\n        <Widget\\\\\\\\n          src={\\\\\\\\\\\\\\\"devhub.near/widget/devhub.page.blog\\\\\\\\\\\\\\\"}\\\\\\\\n          props={passProps}\\\\\\\\n        />\\\\\\\\n      );\\\\\\\\n    }\\\\\\\\n    case \\\\\\\\\\\\\\\"post\\\\\\\\\\\\\\\": {\\\\\\\\n      return (\\\\\\\\n        <Widget\\\\\\\\n          src={\\\\\\\\\\\\\\\"devhub.near/widget/devhub.page.post\\\\\\\\\\\\\\\"}\\\\\\\\n          props={passProps}\\\\\\\\n        />\\\\\\\\n      );\\\\\\\\n    }\\\\\\\\n\\\\\\\\n    default: {\\\\\\\\n      // TODO: 404 page\\\\\\\\n      return <p>404</p>;\\\\\\\\n    }\\\\\\\\n  }\\\\\\\\n}\\\\\\\\n\\\\\\\\nreturn (\\\\\\\\n  <Theme>\\\\\\\\n    <AppLayout page={page}>\\\\\\\\n      <Page />\\\\\\\\n    </AppLayout>\\\\\\\\n  </Theme>\\\\\\\\n);\\\\\\\\n\"}, \"devhub.entity.post.Post\": {\"\": \"// Ideally, this would be a page\\\\\\\\n\\\\\\\\nconst { href } = VM.require(\\\\\\\\\\\\\\\"devhub.near/widget/core.lib.url\\\\\\\\\\\\\\\");\\\\\\\\n\\\\\\\\nhref || (href = () => {});\\\\\\\\n\\\\\\\\nconst ButtonWithHover = styled.button`\\\\\\\\n  background-color: #fff;\\\\\\\\n  &:hover {\\\\\\\\n    background-color: #e9ecef;\\\\\\\\n    color: #000;\\\\\\\\n  }\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst postId = props.post.id ?? (props.id ? parseInt(props.id) : 0);\\\\\\\\nconst post =\\\\\\\\n  props.post ??\\\\\\\\n  Near.view(\\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"get_post\\\\\\\\\\\\\\\", { post_id: postId });\\\\\\\\nif (!post) {\\\\\\\\n  return <div>Loading ...</div>;\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst referral = props.referral;\\\\\\\\nconst currentTimestamp = props.timestamp ?? post.snapshot.timestamp;\\\\\\\\nconst compareTimestamp = props.compareTimestamp ?? \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\";\\\\\\\\nconst swapTimestamps = currentTimestamp < compareTimestamp;\\\\\\\\n\\\\\\\\nconst snapshotHistory = post.snapshot_history;\\\\\\\\nconst snapshot =\\\\\\\\n  currentTimestamp === post.snapshot.timestamp\\\\\\\\n    ? post.snapshot\\\\\\\\n    : (snapshotHistory &&\\\\\\\\n        snapshotHistory.find((s) => s.timestamp === currentTimestamp)) ??\\\\\\\\n      null;\\\\\\\\nconst compareSnapshot =\\\\\\\\n  compareTimestamp === post.snapshot.timestamp\\\\\\\\n    ? post.snapshot\\\\\\\\n    : (snapshotHistory &&\\\\\\\\n        snapshotHistory.find((s) => s.timestamp === compareTimestamp)) ??\\\\\\\\n      null;\\\\\\\\n\\\\\\\\n// If this post is displayed under another post. Used to limit the size.\\\\\\\\nconst isUnderPost = props.isUnderPost ? true : false;\\\\\\\\nconst parentId = Near.view(\\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"get_parent_id\\\\\\\\\\\\\\\", {\\\\\\\\n  post_id: postId,\\\\\\\\n});\\\\\\\\n\\\\\\\\nconst childPostIdsUnordered =\\\\\\\\n  Near.view(\\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"get_children_ids\\\\\\\\\\\\\\\", {\\\\\\\\n    post_id: postId,\\\\\\\\n  }) ?? [];\\\\\\\\n\\\\\\\\nconst childPostIds = props.isPreview ? [] : childPostIdsUnordered.reverse();\\\\\\\\nconst expandable = props.isPreview ? false : props.expandable ?? false;\\\\\\\\nconst defaultExpanded = expandable ? props.defaultExpanded : true;\\\\\\\\n\\\\\\\\nconst draftState = props.draftState;\\\\\\\\n\\\\\\\\nfunction readableDate(timestamp) {\\\\\\\\n  var a = new Date(timestamp);\\\\\\\\n  return a.toDateString() + \\\\\\\\\\\\\\\" \\\\\\\\\\\\\\\" + a.toLocaleTimeString();\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst timestamp = readableDate(\\\\\\\\n  snapshot.timestamp ? snapshot.timestamp / 1000000 : Date.now()\\\\\\\\n);\\\\\\\\n\\\\\\\\nconst postSearchKeywords = props.searchKeywords ? (\\\\\\\\n  <div style={{ \\\\\\\\\\\\\\\"font-family\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"monospace\\\\\\\\\\\\\\\" }} key=\\\\\\\\\\\\\\\"post-search-keywords\\\\\\\\\\\\\\\">\\\\\\\\n    <span>Found keywords: </span>\\\\\\\\n    {props.searchKeywords.map((tag) => (\\\\\\\\n      <Widget\\\\\\\\n        src={\\\\\\\\\\\\\\\"devhub.near/widget/devhub.components.atom.Tag\\\\\\\\\\\\\\\"}\\\\\\\\n        props={{ linkTo: \\\\\\\\\\\\\\\"Feed\\\\\\\\\\\\\\\", tag }}\\\\\\\\n      />\\\\\\\\n    ))}\\\\\\\\n  </div>\\\\\\\\n) : (\\\\\\\\n  <div key=\\\\\\\\\\\\\\\"post-search-keywords\\\\\\\\\\\\\\\"></div>\\\\\\\\n);\\\\\\\\n\\\\\\\\nconst searchKeywords = props.searchKeywords ? (\\\\\\\\n  <div class=\\\\\\\\\\\\\\\"mb-4\\\\\\\\\\\\\\\" key=\\\\\\\\\\\\\\\"search-keywords\\\\\\\\\\\\\\\">\\\\\\\\n    <small class=\\\\\\\\\\\\\\\"text-muted\\\\\\\\\\\\\\\">{postSearchKeywords}</small>\\\\\\\\n  </div>\\\\\\\\n) : (\\\\\\\\n  <div key=\\\\\\\\\\\\\\\"search-keywords\\\\\\\\\\\\\\\"></div>\\\\\\\\n);\\\\\\\\n\\\\\\\\nconst allowedToEdit =\\\\\\\\n  !props.isPreview &&\\\\\\\\n  Near.view(\\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"is_allowed_to_edit\\\\\\\\\\\\\\\", {\\\\\\\\n    post_id: postId,\\\\\\\\n    editor: context.accountId,\\\\\\\\n  });\\\\\\\\n\\\\\\\\nconst btnEditorWidget = (postType, name) => {\\\\\\\\n  return (\\\\\\\\n    <li>\\\\\\\\n      <a\\\\\\\\n        class=\\\\\\\\\\\\\\\"dropdown-item\\\\\\\\\\\\\\\"\\\\\\\\n        role=\\\\\\\\\\\\\\\"button\\\\\\\\\\\\\\\"\\\\\\\\n        onClick={() =>\\\\\\\\n          State.update({ postType, editorType: \\\\\\\\\\\\\\\"EDIT\\\\\\\\\\\\\\\", showEditor: true })\\\\\\\\n        }\\\\\\\\n      >\\\\\\\\n        {name}\\\\\\\\n      </a>\\\\\\\\n    </li>\\\\\\\\n  );\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst editControl = allowedToEdit ? (\\\\\\\\n  <div class=\\\\\\\\\\\\\\\"btn-group\\\\\\\\\\\\\\\" role=\\\\\\\\\\\\\\\"group\\\\\\\\\\\\\\\">\\\\\\\\n    <a\\\\\\\\n      class=\\\\\\\\\\\\\\\"card-link px-2\\\\\\\\\\\\\\\"\\\\\\\\n      role=\\\\\\\\\\\\\\\"button\\\\\\\\\\\\\\\"\\\\\\\\n      title=\\\\\\\\\\\\\\\"Edit post\\\\\\\\\\\\\\\"\\\\\\\\n      data-bs-toggle=\\\\\\\\\\\\\\\"dropdown\\\\\\\\\\\\\\\"\\\\\\\\n      aria-expanded=\\\\\\\\\\\\\\\"false\\\\\\\\\\\\\\\"\\\\\\\\n      type=\\\\\\\\\\\\\\\"button\\\\\\\\\\\\\\\"\\\\\\\\n    >\\\\\\\\n      <div class=\\\\\\\\\\\\\\\"bi bi-pencil-square\\\\\\\\\\\\\\\"></div>\\\\\\\\n    </a>\\\\\\\\n    <ul class=\\\\\\\\\\\\\\\"dropdown-menu\\\\\\\\\\\\\\\">\\\\\\\\n      {btnEditorWidget(\\\\\\\\\\\\\\\"Idea\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"Edit as an idea\\\\\\\\\\\\\\\")}\\\\\\\\n      {btnEditorWidget(\\\\\\\\\\\\\\\"Solution\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"Edit as a solution\\\\\\\\\\\\\\\")}\\\\\\\\n      {btnEditorWidget(\\\\\\\\\\\\\\\"Attestation\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"Edit as an attestation\\\\\\\\\\\\\\\")}\\\\\\\\n      {btnEditorWidget(\\\\\\\\\\\\\\\"Sponsorship\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"Edit as a sponsorship\\\\\\\\\\\\\\\")}\\\\\\\\n      {btnEditorWidget(\\\\\\\\\\\\\\\"Comment\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"Edit as a comment\\\\\\\\\\\\\\\")}\\\\\\\\n    </ul>\\\\\\\\n  </div>\\\\\\\\n) : (\\\\\\\\n  <div></div>\\\\\\\\n);\\\\\\\\n\\\\\\\\nconst shareButton = props.isPreview ? (\\\\\\\\n  <div></div>\\\\\\\\n) : (\\\\\\\\n  <Link\\\\\\\\n    class=\\\\\\\\\\\\\\\"card-link text-dark\\\\\\\\\\\\\\\"\\\\\\\\n    to={href({\\\\\\\\n      widgetSrc: \\\\\\\\\\\\\\\"devhub.near/widget/app\\\\\\\\\\\\\\\",\\\\\\\\n      params: { page: \\\\\\\\\\\\\\\"post\\\\\\\\\\\\\\\", id: postId },\\\\\\\\n    })}\\\\\\\\n    role=\\\\\\\\\\\\\\\"button\\\\\\\\\\\\\\\"\\\\\\\\n    target=\\\\\\\\\\\\\\\"_blank\\\\\\\\\\\\\\\"\\\\\\\\n    title=\\\\\\\\\\\\\\\"Open in new tab\\\\\\\\\\\\\\\"\\\\\\\\n  >\\\\\\\\n    <div class=\\\\\\\\\\\\\\\"bi bi-share\\\\\\\\\\\\\\\"></div>\\\\\\\\n  </Link>\\\\\\\\n);\\\\\\\\n\\\\\\\\nconst ProfileCardContainer = styled.div`\\\\\\\\n  @media screen and (max-width: 960px) {\\\\\\\\n    width: 100%;\\\\\\\\n  }\\\\\\\\n`;\\\\\\\\n\\\\\\\\n// card-header\\\\\\\\nconst header = (\\\\\\\\n  <div key=\\\\\\\\\\\\\\\"header\\\\\\\\\\\\\\\">\\\\\\\\n    <small class=\\\\\\\\\\\\\\\"text-muted\\\\\\\\\\\\\\\">\\\\\\\\n      <div class=\\\\\\\\\\\\\\\"row justify-content-between\\\\\\\\\\\\\\\">\\\\\\\\n        <div class=\\\\\\\\\\\\\\\"d-flex align-items-center flex-wrap\\\\\\\\\\\\\\\">\\\\\\\\n          <ProfileCardContainer>\\\\\\\\n            <Widget\\\\\\\\n              src={\\\\\\\\n                \\\\\\\\\\\\\\\"devhub.near/widget/devhub.components.molecule.ProfileCard\\\\\\\\\\\\\\\"\\\\\\\\n              }\\\\\\\\n              props={{\\\\\\\\n                accountId: post.author_id,\\\\\\\\n                nearDevGovGigsWidgetsAccountId: \\\\\\\\\\\\\\\"devhub.near\\\\\\\\\\\\\\\",\\\\\\\\n              }}\\\\\\\\n            />\\\\\\\\n          </ProfileCardContainer>\\\\\\\\n          <div class=\\\\\\\\\\\\\\\"d-flex ms-auto\\\\\\\\\\\\\\\">\\\\\\\\n            {editControl}\\\\\\\\n            {timestamp}\\\\\\\\n            <Widget\\\\\\\\n              src={\\\\\\\\\\\\\\\"devhub.near/widget/devhub.entity.post.History\\\\\\\\\\\\\\\"}\\\\\\\\n              props={{\\\\\\\\n                post,\\\\\\\\n                timestamp: currentTimestamp,\\\\\\\\n              }}\\\\\\\\n            />\\\\\\\\n            {shareButton}\\\\\\\\n          </div>\\\\\\\\n        </div>\\\\\\\\n      </div>\\\\\\\\n    </small>\\\\\\\\n  </div>\\\\\\\\n);\\\\\\\\n\\\\\\\\n// const emptyIcons = {\\\\\\\\n//   Idea: \\\\\\\\\\\\\\\"bi-lightbulb\\\\\\\\\\\\\\\",\\\\\\\\n//   Comment: \\\\\\\\\\\\\\\"bi-chat\\\\\\\\\\\\\\\",\\\\\\\\n//   Solution: \\\\\\\\\\\\\\\"bi-rocket\\\\\\\\\\\\\\\",\\\\\\\\n//   Attestation: \\\\\\\\\\\\\\\"bi-check-circle\\\\\\\\\\\\\\\",\\\\\\\\n//   Sponsorship: \\\\\\\\\\\\\\\"bi-cash-coin\\\\\\\\\\\\\\\",\\\\\\\\n//   Github: \\\\\\\\\\\\\\\"bi-github\\\\\\\\\\\\\\\",\\\\\\\\n//   Like: \\\\\\\\\\\\\\\"bi-heart\\\\\\\\\\\\\\\",\\\\\\\\n//   Reply: \\\\\\\\\\\\\\\"bi-reply\\\\\\\\\\\\\\\",\\\\\\\\n// };\\\\\\\\n\\\\\\\\nconst emptyIcons = {\\\\\\\\n  Idea: \\\\\\\\\\\\\\\"\\\\\\\\u{1f4a1}\\\\\\\\\\\\\\\",\\\\\\\\n  Comment: \\\\\\\\\\\\\\\"bi-chat\\\\\\\\\\\\\\\",\\\\\\\\n  Solution: \\\\\\\\\\\\\\\"\\\\\\\\u{1f680}\\\\\\\\\\\\\\\",\\\\\\\\n  Attestation: \\\\\\\\\\\\\\\"\\\\\\\\u{2705}\\\\\\\\\\\\\\\",\\\\\\\\n  Sponsorship: \\\\\\\\\\\\\\\"\\\\\\\\u{1fa99}\\\\\\\\\\\\\\\",\\\\\\\\n  Github: \\\\\\\\\\\\\\\"bi-github\\\\\\\\\\\\\\\",\\\\\\\\n  Like: \\\\\\\\\\\\\\\"bi-heart\\\\\\\\\\\\\\\",\\\\\\\\n  Reply: \\\\\\\\\\\\\\\"bi-reply\\\\\\\\\\\\\\\",\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst fillIcons = {\\\\\\\\n  Idea: \\\\\\\\\\\\\\\"\\\\\\\\u{1f4a1}\\\\\\\\\\\\\\\",\\\\\\\\n  Comment: \\\\\\\\\\\\\\\"bi-chat-fill\\\\\\\\\\\\\\\",\\\\\\\\n  Solution: \\\\\\\\\\\\\\\"\\\\\\\\u{1f680}\\\\\\\\\\\\\\\",\\\\\\\\n  Attestation: \\\\\\\\\\\\\\\"\\\\\\\\u{2705}\\\\\\\\\\\\\\\",\\\\\\\\n  Sponsorship: \\\\\\\\\\\\\\\"\\\\\\\\u{1fa99}\\\\\\\\\\\\\\\",\\\\\\\\n  Github: \\\\\\\\\\\\\\\"bi-github\\\\\\\\\\\\\\\",\\\\\\\\n  Like: \\\\\\\\\\\\\\\"bi-heart-fill\\\\\\\\\\\\\\\",\\\\\\\\n  Reply: \\\\\\\\\\\\\\\"bi-reply-fill\\\\\\\\\\\\\\\",\\\\\\\\n};\\\\\\\\n\\\\\\\\n// Trigger saving this widget.\\\\\\\\n\\\\\\\\nconst borders = {\\\\\\\\n  Idea: \\\\\\\\\\\\\\\"border-light\\\\\\\\\\\\\\\",\\\\\\\\n  Comment: \\\\\\\\\\\\\\\"border-light\\\\\\\\\\\\\\\",\\\\\\\\n  Solution: \\\\\\\\\\\\\\\"border-light\\\\\\\\\\\\\\\",\\\\\\\\n  Attestation: \\\\\\\\\\\\\\\"border-light\\\\\\\\\\\\\\\",\\\\\\\\n  Sponsorship: \\\\\\\\\\\\\\\"border-light\\\\\\\\\\\\\\\",\\\\\\\\n  Github: \\\\\\\\\\\\\\\"border-light\\\\\\\\\\\\\\\",\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst containsLike = props.isPreview\\\\\\\\n  ? false\\\\\\\\n  : post.likes.find((l) => l.author_id == context.accountId);\\\\\\\\nconst likeBtnClass = containsLike ? fillIcons.Like : emptyIcons.Like;\\\\\\\\n// This must be outside onLike, because Near.view returns null at first, and when the view call finished, it returns true/false.\\\\\\\\n// If checking this inside onLike, it will give `null` and we cannot tell the result is true or false.\\\\\\\\nlet grantNotify = Near.view(\\\\\\\\\\\\\\\"social.near\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"is_write_permission_granted\\\\\\\\\\\\\\\", {\\\\\\\\n  predecessor_id: \\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\",\\\\\\\\n  key: context.accountId + \\\\\\\\\\\\\\\"/index/notify\\\\\\\\\\\\\\\",\\\\\\\\n});\\\\\\\\nif (grantNotify === null) {\\\\\\\\n  return;\\\\\\\\n}\\\\\\\\nconst onLike = () => {\\\\\\\\n  if (!context.accountId) {\\\\\\\\n    return;\\\\\\\\n  }\\\\\\\\n  let likeTxn = [\\\\\\\\n    {\\\\\\\\n      contractName: \\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\",\\\\\\\\n      methodName: \\\\\\\\\\\\\\\"add_like\\\\\\\\\\\\\\\",\\\\\\\\n      args: {\\\\\\\\n        post_id: postId,\\\\\\\\n      },\\\\\\\\n      deposit: Big(10).pow(21).mul(2),\\\\\\\\n      gas: Big(10).pow(12).mul(100),\\\\\\\\n    },\\\\\\\\n  ];\\\\\\\\n\\\\\\\\n  if (grantNotify === false) {\\\\\\\\n    likeTxn.unshift({\\\\\\\\n      contractName: \\\\\\\\\\\\\\\"social.near\\\\\\\\\\\\\\\",\\\\\\\\n      methodName: \\\\\\\\\\\\\\\"grant_write_permission\\\\\\\\\\\\\\\",\\\\\\\\n      args: {\\\\\\\\n        predecessor_id: \\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\",\\\\\\\\n        keys: [context.accountId + \\\\\\\\\\\\\\\"/index/notify\\\\\\\\\\\\\\\"],\\\\\\\\n      },\\\\\\\\n      deposit: Big(10).pow(23),\\\\\\\\n      gas: Big(10).pow(12).mul(30),\\\\\\\\n    });\\\\\\\\n  }\\\\\\\\n  Near.call(likeTxn);\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst btnCreatorWidget = (postType, icon, name, desc) => {\\\\\\\\n  return (\\\\\\\\n    <li class=\\\\\\\\\\\\\\\"py-1\\\\\\\\\\\\\\\">\\\\\\\\n      <a\\\\\\\\n        class=\\\\\\\\\\\\\\\"dropdown-item text-decoration-none d-flex align-items-center lh-sm\\\\\\\\\\\\\\\"\\\\\\\\n        style={{ color: \\\\\\\\\\\\\\\"rgb(55,109,137)\\\\\\\\\\\\\\\" }}\\\\\\\\n        role=\\\\\\\\\\\\\\\"button\\\\\\\\\\\\\\\"\\\\\\\\n        onClick={() =>\\\\\\\\n          State.update({ postType, editorType: \\\\\\\\\\\\\\\"CREATE\\\\\\\\\\\\\\\", showEditor: true })\\\\\\\\n        }\\\\\\\\n      >\\\\\\\\n        <i class={`bi ${icon}`} style={{ fontSize: \\\\\\\\\\\\\\\"1.5rem\\\\\\\\\\\\\\\" }}>\\\\\\\\n          {\\\\\\\\\\\\\\\" \\\\\\\\\\\\\\\"}\\\\\\\\n        </i>\\\\\\\\n        <div class=\\\\\\\\\\\\\\\"ps-2 text-wrap\\\\\\\\\\\\\\\" style={{ width: \\\\\\\\\\\\\\\"18rem\\\\\\\\\\\\\\\" }}>\\\\\\\\n          <div>{name}</div>\\\\\\\\n          <small class=\\\\\\\\\\\\\\\"fw-light text-secondary\\\\\\\\\\\\\\\">{desc}</small>\\\\\\\\n        </div>\\\\\\\\n      </a>\\\\\\\\n    </li>\\\\\\\\n  );\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst FooterButtonsContianer = styled.div`\\\\\\\\n  width: 66.66666667%;\\\\\\\\n\\\\\\\\n  @media screen and (max-width: 960px) {\\\\\\\\n    width: 100%;\\\\\\\\n  }\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst buttonsFooter = props.isPreview ? null : (\\\\\\\\n  <div class=\\\\\\\\\\\\\\\"row\\\\\\\\\\\\\\\" key=\\\\\\\\\\\\\\\"buttons-footer\\\\\\\\\\\\\\\">\\\\\\\\n    <FooterButtonsContianer>\\\\\\\\n      <div class=\\\\\\\\\\\\\\\"btn-group\\\\\\\\\\\\\\\" role=\\\\\\\\\\\\\\\"group\\\\\\\\\\\\\\\" aria-label=\\\\\\\\\\\\\\\"Basic outlined example\\\\\\\\\\\\\\\">\\\\\\\\n        <ButtonWithHover\\\\\\\\n          type=\\\\\\\\\\\\\\\"button\\\\\\\\\\\\\\\"\\\\\\\\n          class=\\\\\\\\\\\\\\\"btn d-flex align-items-center\\\\\\\\\\\\\\\"\\\\\\\\n          style={{ border: \\\\\\\\\\\\\\\"0px\\\\\\\\\\\\\\\" }}\\\\\\\\n          onClick={onLike}\\\\\\\\n        >\\\\\\\\n          <i class={`bi ${likeBtnClass}`}> </i>\\\\\\\\n          {post.likes.length == 0 ? (\\\\\\\\n            \\\\\\\\\\\\\\\"Like\\\\\\\\\\\\\\\"\\\\\\\\n          ) : (\\\\\\\\n            <Widget\\\\\\\\n              // TODO: LEGACY.\\\\\\\\n              src=\\\\\\\\\\\\\\\"devgovgigs.near/widget/gigs-board.components.layout.LikeButton.Faces\\\\\\\\\\\\\\\"\\\\\\\\n              props={{\\\\\\\\n                likesByUsers: Object.fromEntries(\\\\\\\\n                  post.likes.map(({ author_id }) => [author_id, \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\"])\\\\\\\\n                ),\\\\\\\\n              }}\\\\\\\\n            />\\\\\\\\n          )}\\\\\\\\n        </ButtonWithHover>\\\\\\\\n        <div class=\\\\\\\\\\\\\\\"btn-group\\\\\\\\\\\\\\\" role=\\\\\\\\\\\\\\\"group\\\\\\\\\\\\\\\">\\\\\\\\n          <ButtonWithHover\\\\\\\\n            type=\\\\\\\\\\\\\\\"button\\\\\\\\\\\\\\\"\\\\\\\\n            class=\\\\\\\\\\\\\\\"btn\\\\\\\\\\\\\\\"\\\\\\\\n            style={{ border: \\\\\\\\\\\\\\\"0px\\\\\\\\\\\\\\\" }}\\\\\\\\n            data-bs-toggle=\\\\\\\\\\\\\\\"dropdown\\\\\\\\\\\\\\\"\\\\\\\\n            aria-expanded=\\\\\\\\\\\\\\\"false\\\\\\\\\\\\\\\"\\\\\\\\n          >\\\\\\\\n            \\\\\\\\u{21aa} Reply\\\\\\\\n          </ButtonWithHover>\\\\\\\\n          <ul class=\\\\\\\\\\\\\\\"dropdown-menu\\\\\\\\\\\\\\\">\\\\\\\\n            {btnCreatorWidget(\\\\\\\\n              \\\\\\\\\\\\\\\"Idea\\\\\\\\\\\\\\\",\\\\\\\\n              emptyIcons.Idea,\\\\\\\\n              \\\\\\\\\\\\\\\"Idea\\\\\\\\\\\\\\\",\\\\\\\\n              \\\\\\\\\\\\\\\"Get feedback from the community about a problem, opportunity, or need.\\\\\\\\\\\\\\\"\\\\\\\\n            )}\\\\\\\\n            {btnCreatorWidget(\\\\\\\\n              \\\\\\\\\\\\\\\"Solution\\\\\\\\\\\\\\\",\\\\\\\\n              emptyIcons.Solution,\\\\\\\\n              \\\\\\\\\\\\\\\"Solution\\\\\\\\\\\\\\\",\\\\\\\\n              \\\\\\\\\\\\\\\"Provide a specific proposal or implementation to an idea, optionally requesting funding.\\\\\\\\\\\\\\\"\\\\\\\\n            )}\\\\\\\\n            {btnCreatorWidget(\\\\\\\\n              \\\\\\\\\\\\\\\"Attestation\\\\\\\\\\\\\\\",\\\\\\\\n              emptyIcons.Attestation,\\\\\\\\n              \\\\\\\\\\\\\\\"Attestation\\\\\\\\\\\\\\\",\\\\\\\\n              \\\\\\\\\\\\\\\"Formally review or validate a solution as a recognized expert.\\\\\\\\\\\\\\\"\\\\\\\\n            )}\\\\\\\\n            {btnCreatorWidget(\\\\\\\\n              \\\\\\\\\\\\\\\"Sponsorship\\\\\\\\\\\\\\\",\\\\\\\\n              emptyIcons.Sponsorship,\\\\\\\\n              \\\\\\\\\\\\\\\"Sponsorship\\\\\\\\\\\\\\\",\\\\\\\\n              \\\\\\\\\\\\\\\"Offer to fund projects, events, or proposals that match your needs.\\\\\\\\\\\\\\\"\\\\\\\\n            )}\\\\\\\\n            <li>\\\\\\\\n              <hr class=\\\\\\\\\\\\\\\"dropdown-divider\\\\\\\\\\\\\\\" />\\\\\\\\n            </li>\\\\\\\\n            {btnCreatorWidget(\\\\\\\\n              \\\\\\\\\\\\\\\"Comment\\\\\\\\\\\\\\\",\\\\\\\\n              emptyIcons.Comment,\\\\\\\\n              \\\\\\\\\\\\\\\"Comment\\\\\\\\\\\\\\\",\\\\\\\\n              \\\\\\\\\\\\\\\"Ask a question, provide information, or share a resource that is relevant to the thread.\\\\\\\\\\\\\\\"\\\\\\\\n            )}\\\\\\\\n          </ul>\\\\\\\\n        </div>\\\\\\\\n        <ButtonWithHover\\\\\\\\n          type=\\\\\\\\\\\\\\\"button\\\\\\\\\\\\\\\"\\\\\\\\n          class=\\\\\\\\\\\\\\\"btn\\\\\\\\\\\\\\\"\\\\\\\\n          style={{ border: \\\\\\\\\\\\\\\"0px\\\\\\\\\\\\\\\" }}\\\\\\\\n          data-bs-toggle=\\\\\\\\\\\\\\\"collapse\\\\\\\\\\\\\\\"\\\\\\\\n          href={`#collapseChildPosts${postId}`}\\\\\\\\n          aria-expanded={defaultExpanded}\\\\\\\\n          aria-controls={`collapseChildPosts${postId}`}\\\\\\\\n        >\\\\\\\\n          <i class=\\\\\\\\\\\\\\\"bi bi-chevron-down\\\\\\\\\\\\\\\"> </i>{\\\\\\\\\\\\\\\" \\\\\\\\\\\\\\\"}\\\\\\\\n          {`Expand Replies (${childPostIds.length})`}\\\\\\\\n        </ButtonWithHover>\\\\\\\\n\\\\\\\\n        {isUnderPost || !parentId ? (\\\\\\\\n          <div key=\\\\\\\\\\\\\\\"link-to-parent\\\\\\\\\\\\\\\"></div>\\\\\\\\n        ) : (\\\\\\\\n          <Link\\\\\\\\n            to={href({\\\\\\\\n              gateway: \\\\\\\\\\\\\\\"near.org\\\\\\\\\\\\\\\",\\\\\\\\n              widgetSrc: \\\\\\\\\\\\\\\"devhub.near/widget/app\\\\\\\\\\\\\\\",\\\\\\\\n              params: { page: \\\\\\\\\\\\\\\"post\\\\\\\\\\\\\\\", id: parentId },\\\\\\\\n            })}\\\\\\\\n          >\\\\\\\\n            <ButtonWithHover\\\\\\\\n              type=\\\\\\\\\\\\\\\"button\\\\\\\\\\\\\\\"\\\\\\\\n              style={{ border: \\\\\\\\\\\\\\\"0px\\\\\\\\\\\\\\\" }}\\\\\\\\n              className=\\\\\\\\\\\\\\\"btn\\\\\\\\\\\\\\\"\\\\\\\\n              key=\\\\\\\\\\\\\\\"link-to-parent\\\\\\\\\\\\\\\"\\\\\\\\n            >\\\\\\\\n              <i class=\\\\\\\\\\\\\\\"bi bi-arrow-90deg-up\\\\\\\\\\\\\\\"></i>Go to parent\\\\\\\\n            </ButtonWithHover>\\\\\\\\n          </Link>\\\\\\\\n        )}\\\\\\\\n      </div>\\\\\\\\n    </FooterButtonsContianer>\\\\\\\\n  </div>\\\\\\\\n);\\\\\\\\n\\\\\\\\nconst CreatorWidget = (postType) => {\\\\\\\\n  return (\\\\\\\\n    <div\\\\\\\\n      class={`collapse ${\\\\\\\\n        draftState?.parent_post_id == postId && draftState?.postType == postType\\\\\\\\n          ? \\\\\\\\\\\\\\\"show\\\\\\\\\\\\\\\"\\\\\\\\n          : \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\"\\\\\\\\n      }`}\\\\\\\\n      id={`collapse${postType}Creator${postId}`}\\\\\\\\n      data-bs-parent={`#accordion${postId}`}\\\\\\\\n    >\\\\\\\\n      <Widget\\\\\\\\n        src={\\\\\\\\\\\\\\\"devhub.near/widget/devhub.entity.post.PostEditor\\\\\\\\\\\\\\\"}\\\\\\\\n        props={{\\\\\\\\n          postType,\\\\\\\\n          onDraftStateChange: props.onDraftStateChange,\\\\\\\\n          draftState:\\\\\\\\n            draftState?.parent_post_id == postId ? draftState : undefined,\\\\\\\\n          parentId: postId,\\\\\\\\n          mode: \\\\\\\\\\\\\\\"Create\\\\\\\\\\\\\\\",\\\\\\\\n        }}\\\\\\\\n      />\\\\\\\\n    </div>\\\\\\\\n  );\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst tokenMapping = {\\\\\\\\n  NEAR: \\\\\\\\\\\\\\\"NEAR\\\\\\\\\\\\\\\",\\\\\\\\n  USDT: {\\\\\\\\n    NEP141: {\\\\\\\\n      address: \\\\\\\\\\\\\\\"usdt.tether-token.near\\\\\\\\\\\\\\\",\\\\\\\\n    },\\\\\\\\n  },\\\\\\\\n  USDC: {\\\\\\\\n    NEP141: {\\\\\\\\n      address:\\\\\\\\n        \\\\\\\\\\\\\\\"17208628f84f5d6ad33f0da3bbbeb27ffcb398eac501a31bd6ad2011e36133a1\\\\\\\\\\\\\\\",\\\\\\\\n    },\\\\\\\\n  },\\\\\\\\n  // Add more tokens here as needed\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst reverseTokenMapping = Object.keys(tokenMapping).reduce(\\\\\\\\n  (reverseMap, key) => {\\\\\\\\n    const value = tokenMapping[key];\\\\\\\\n    if (typeof value === \\\\\\\\\\\\\\\"object\\\\\\\\\\\\\\\") {\\\\\\\\n      reverseMap[JSON.stringify(value)] = key;\\\\\\\\n    }\\\\\\\\n    return reverseMap;\\\\\\\\n  },\\\\\\\\n  {}\\\\\\\\n);\\\\\\\\n\\\\\\\\nfunction tokenResolver(token) {\\\\\\\\n  if (typeof token === \\\\\\\\\\\\\\\"string\\\\\\\\\\\\\\\") {\\\\\\\\n    return token;\\\\\\\\n  } else if (typeof token === \\\\\\\\\\\\\\\"object\\\\\\\\\\\\\\\") {\\\\\\\\n    const tokenString = reverseTokenMapping[JSON.stringify(token)];\\\\\\\\n    return tokenString || null;\\\\\\\\n  } else {\\\\\\\\n    return null; // Invalid input\\\\\\\\n  }\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst EditorWidget = (postType) => {\\\\\\\\n  return (\\\\\\\\n    <div\\\\\\\\n      class={`collapse ${\\\\\\\\n        draftState?.edit_post_id == postId && draftState?.postType == postType\\\\\\\\n          ? \\\\\\\\\\\\\\\"show\\\\\\\\\\\\\\\"\\\\\\\\n          : \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\"\\\\\\\\n      }`}\\\\\\\\n      id={`collapse${postType}Editor${postId}`}\\\\\\\\n      data-bs-parent={`#accordion${postId}`}\\\\\\\\n    >\\\\\\\\n      <Widget\\\\\\\\n        src={\\\\\\\\\\\\\\\"devhub.near/widget/devhub.entity.post.PostEditor\\\\\\\\\\\\\\\"}\\\\\\\\n        props={{\\\\\\\\n          postType,\\\\\\\\n          postId,\\\\\\\\n          mode: \\\\\\\\\\\\\\\"Edit\\\\\\\\\\\\\\\",\\\\\\\\n          author_id: post.author_id,\\\\\\\\n          labels: post.snapshot.labels,\\\\\\\\n          name: post.snapshot.name,\\\\\\\\n          description: post.snapshot.description,\\\\\\\\n          amount: post.snapshot.amount,\\\\\\\\n          token: tokenResolver(post.snapshot.sponsorship_token),\\\\\\\\n          supervisor: post.snapshot.supervisor,\\\\\\\\n          githubLink: post.snapshot.github_link,\\\\\\\\n          onDraftStateChange: props.onDraftStateChange,\\\\\\\\n          draftState:\\\\\\\\n            draftState?.edit_post_id == postId ? draftState : undefined,\\\\\\\\n        }}\\\\\\\\n      />\\\\\\\\n    </div>\\\\\\\\n  );\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst isDraft =\\\\\\\\n  (draftState?.parent_post_id === postId &&\\\\\\\\n    draftState?.postType === state.postType) ||\\\\\\\\n  (draftState?.edit_post_id === postId &&\\\\\\\\n    draftState?.postType === state.postType);\\\\\\\\n\\\\\\\\nfunction Editor() {\\\\\\\\n  return (\\\\\\\\n    <div class=\\\\\\\\\\\\\\\"row\\\\\\\\\\\\\\\" id={`accordion${postId}`} key=\\\\\\\\\\\\\\\"editors-footer\\\\\\\\\\\\\\\">\\\\\\\\n      <div\\\\\\\\n        key={`${state.postType}${state.editorType}${postId}`}\\\\\\\\n        className={\\\\\\\\\\\\\\\"w-100\\\\\\\\\\\\\\\"}\\\\\\\\n      >\\\\\\\\n        {state.editorType === \\\\\\\\\\\\\\\"CREATE\\\\\\\\\\\\\\\" ? (\\\\\\\\n          <>\\\\\\\\n            <Widget\\\\\\\\n              src={\\\\\\\\\\\\\\\"devhub.near/widget/devhub.entity.post.PostEditor\\\\\\\\\\\\\\\"}\\\\\\\\n              props={{\\\\\\\\n                postType: state.postType,\\\\\\\\n                onDraftStateChange: props.onDraftStateChange,\\\\\\\\n                draftState:\\\\\\\\n                  draftState?.parent_post_id == postId ? draftState : undefined,\\\\\\\\n                parentId: postId,\\\\\\\\n                mode: \\\\\\\\\\\\\\\"Create\\\\\\\\\\\\\\\",\\\\\\\\n              }}\\\\\\\\n            />\\\\\\\\n          </>\\\\\\\\n        ) : (\\\\\\\\n          <>\\\\\\\\n            <Widget\\\\\\\\n              src={\\\\\\\\\\\\\\\"devhub.near/widget/devhub.entity.post.PostEditor\\\\\\\\\\\\\\\"}\\\\\\\\n              props={{\\\\\\\\n                postType: state.postType,\\\\\\\\n                postId,\\\\\\\\n                mode: \\\\\\\\\\\\\\\"Edit\\\\\\\\\\\\\\\",\\\\\\\\n                author_id: post.author_id,\\\\\\\\n                labels: post.snapshot.labels,\\\\\\\\n                name: post.snapshot.name,\\\\\\\\n                description: post.snapshot.description,\\\\\\\\n                amount: post.snapshot.amount,\\\\\\\\n                token: tokenResolver(post.snapshot.sponsorship_token),\\\\\\\\n                supervisor: post.snapshot.supervisor,\\\\\\\\n                githubLink: post.snapshot.github_link,\\\\\\\\n                onDraftStateChange: props.onDraftStateChange,\\\\\\\\n                draftState:\\\\\\\\n                  draftState?.edit_post_id == postId ? draftState : undefined,\\\\\\\\n              }}\\\\\\\\n            />\\\\\\\\n          </>\\\\\\\\n        )}\\\\\\\\n      </div>\\\\\\\\n    </div>\\\\\\\\n  );\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst renamedPostType =\\\\\\\\n  snapshot.post_type == \\\\\\\\\\\\\\\"Submission\\\\\\\\\\\\\\\" ? \\\\\\\\\\\\\\\"Solution\\\\\\\\\\\\\\\" : snapshot.post_type;\\\\\\\\n\\\\\\\\nconst tags = post.snapshot.labels ? (\\\\\\\\n  <div\\\\\\\\n    class=\\\\\\\\\\\\\\\"card-title d-flex flex-wrap align-items-center\\\\\\\\\\\\\\\"\\\\\\\\n    style={{ margin: \\\\\\\\\\\\\\\"20px 0\\\\\\\\\\\\\\\" }}\\\\\\\\n    key=\\\\\\\\\\\\\\\"post-labels\\\\\\\\\\\\\\\"\\\\\\\\n  >\\\\\\\\n    {post.snapshot.labels.map((tag, idx) => (\\\\\\\\n      <div className=\\\\\\\\\\\\\\\"d-flex align-items-center my-3 me-3\\\\\\\\\\\\\\\">\\\\\\\\n        <Link\\\\\\\\n          to={href({\\\\\\\\n            widgetSrc: \\\\\\\\\\\\\\\"devhub.near/widget/app\\\\\\\\\\\\\\\",\\\\\\\\n            params: { page: \\\\\\\\\\\\\\\"feed\\\\\\\\\\\\\\\", tag: tag },\\\\\\\\n          })}\\\\\\\\n        >\\\\\\\\n          <div\\\\\\\\n            className=\\\\\\\\\\\\\\\"d-flex gap-3 align-items-center\\\\\\\\\\\\\\\"\\\\\\\\n            style={{ cursor: \\\\\\\\\\\\\\\"pointer\\\\\\\\\\\\\\\", textDecoration: \\\\\\\\\\\\\\\"none\\\\\\\\\\\\\\\" }}\\\\\\\\n          >\\\\\\\\n            <Widget\\\\\\\\n              src={\\\\\\\\\\\\\\\"devhub.near/widget/devhub.components.atom.Tag\\\\\\\\\\\\\\\"}\\\\\\\\n              props={{\\\\\\\\n                tag,\\\\\\\\n                black: true,\\\\\\\\n              }}\\\\\\\\n            />\\\\\\\\n          </div>\\\\\\\\n        </Link>\\\\\\\\n        {idx !== post.snapshot.labels.length - 1 && (\\\\\\\\n          <span className=\\\\\\\\\\\\\\\"ms-3\\\\\\\\\\\\\\\">\\\\\\\\u{2022}</span>\\\\\\\\n        )}\\\\\\\\n      </div>\\\\\\\\n    ))}\\\\\\\\n  </div>\\\\\\\\n) : (\\\\\\\\n  <div key=\\\\\\\\\\\\\\\"post-labels\\\\\\\\\\\\\\\"></div>\\\\\\\\n);\\\\\\\\n\\\\\\\\nconst Title = styled.h5`\\\\\\\\n  margin: 1rem 0;\\\\\\\\n\\\\\\\\n  color: #151515;\\\\\\\\n  font-size: 1.15rem;\\\\\\\\n  font-style: normal;\\\\\\\\n  font-weight: 700;\\\\\\\\n  line-height: 1.625rem; /* 55.556% */\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst postTitle =\\\\\\\\n  snapshot.post_type == \\\\\\\\\\\\\\\"Comment\\\\\\\\\\\\\\\" ? (\\\\\\\\n    <div key=\\\\\\\\\\\\\\\"post-title\\\\\\\\\\\\\\\"></div>\\\\\\\\n  ) : (\\\\\\\\n    <Title key=\\\\\\\\\\\\\\\"post-title\\\\\\\\\\\\\\\">\\\\\\\\n      {emptyIcons[snapshot.post_type]} {renamedPostType}: {snapshot.name}\\\\\\\\n    </Title>\\\\\\\\n  );\\\\\\\\n\\\\\\\\nconst postExtra =\\\\\\\\n  snapshot.post_type == \\\\\\\\\\\\\\\"Sponsorship\\\\\\\\\\\\\\\" ? (\\\\\\\\n    <div key=\\\\\\\\\\\\\\\"post-extra\\\\\\\\\\\\\\\">\\\\\\\\n      <h6 class=\\\\\\\\\\\\\\\"card-subtitle mb-2 text-muted\\\\\\\\\\\\\\\">\\\\\\\\n        Maximum amount: {snapshot.amount}{\\\\\\\\\\\\\\\" \\\\\\\\\\\\\\\"}\\\\\\\\n        {tokenResolver(snapshot.sponsorship_token)}\\\\\\\\n      </h6>\\\\\\\\n      <h6 class=\\\\\\\\\\\\\\\"card-subtitle mb-2 text-muted\\\\\\\\\\\\\\\">\\\\\\\\n        Supervisor:{\\\\\\\\\\\\\\\" \\\\\\\\\\\\\\\"}\\\\\\\\n        <Widget\\\\\\\\n          src={\\\\\\\\\\\\\\\"neardevgov.near/widget/ProfileLine\\\\\\\\\\\\\\\"}\\\\\\\\n          props={{ accountId: snapshot.supervisor }}\\\\\\\\n        />\\\\\\\\n      </h6>\\\\\\\\n    </div>\\\\\\\\n  ) : (\\\\\\\\n    <div></div>\\\\\\\\n  );\\\\\\\\n\\\\\\\\nconst childPostHasDraft = childPostIds.find(\\\\\\\\n  (childId) =>\\\\\\\\n    childId == draftState?.edit_post_id || childId == draftState?.parent_post_id\\\\\\\\n);\\\\\\\\nif (\\\\\\\\n  (childPostHasDraft || state.childrenOfChildPostsHasDraft) &&\\\\\\\\n  props.expandParent\\\\\\\\n) {\\\\\\\\n  props.expandParent();\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst postsList =\\\\\\\\n  props.isPreview || childPostIds.length == 0 ? (\\\\\\\\n    <div key=\\\\\\\\\\\\\\\"posts-list\\\\\\\\\\\\\\\"></div>\\\\\\\\n  ) : (\\\\\\\\n    <div class=\\\\\\\\\\\\\\\"row\\\\\\\\\\\\\\\" key=\\\\\\\\\\\\\\\"posts-list\\\\\\\\\\\\\\\">\\\\\\\\n      <div\\\\\\\\n        class={`collapse mt-3 ${\\\\\\\\n          defaultExpanded ||\\\\\\\\n          childPostHasDraft ||\\\\\\\\n          state.childrenOfChildPostsHasDraft\\\\\\\\n            ? \\\\\\\\\\\\\\\"show\\\\\\\\\\\\\\\"\\\\\\\\n            : \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\"\\\\\\\\n        }`}\\\\\\\\n        id={`collapseChildPosts${postId}`}\\\\\\\\n      >\\\\\\\\n        {childPostIds.map((childId) => (\\\\\\\\n          <Widget\\\\\\\\n            src=\\\\\\\\\\\\\\\"devhub.near/widget/devhub.entity.post.Post\\\\\\\\\\\\\\\"\\\\\\\\n            props={{\\\\\\\\n              id: childId,\\\\\\\\n              isUnderPost: true,\\\\\\\\n              onDraftStateChange: props.onDraftStateChange,\\\\\\\\n              draftState,\\\\\\\\n              expandParent: () =>\\\\\\\\n                State.update({ childrenOfChildPostsHasDraft: true }),\\\\\\\\n              referral: `subpost${childId}of${postId}`,\\\\\\\\n            }}\\\\\\\\n          />\\\\\\\\n        ))}\\\\\\\\n      </div>\\\\\\\\n    </div>\\\\\\\\n  );\\\\\\\\n\\\\\\\\nconst LimitedMarkdown = styled.div`\\\\\\\\n  max-height: 20em;\\\\\\\\n`;\\\\\\\\n\\\\\\\\n// Determine if located in the post page.\\\\\\\\nconst isInList = props.isInList;\\\\\\\\nconst contentArray = snapshot.description.split(\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\");\\\\\\\\nconst needClamp = isInList && contentArray.length > 5;\\\\\\\\n\\\\\\\\ninitState({\\\\\\\\n  clamp: needClamp,\\\\\\\\n});\\\\\\\\n\\\\\\\\nconst clampedContent = needClamp\\\\\\\\n  ? contentArray.slice(0, 3).join(\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\")\\\\\\\\n  : snapshot.description;\\\\\\\\n\\\\\\\\n// Should make sure the posts under the currently top viewed post are limited in size.\\\\\\\\nconst descriptionArea = isUnderPost ? (\\\\\\\\n  <LimitedMarkdown className=\\\\\\\\\\\\\\\"overflow-auto\\\\\\\\\\\\\\\" key=\\\\\\\\\\\\\\\"description-area\\\\\\\\\\\\\\\">\\\\\\\\n    {/* {widget(\\\\\\\\\\\\\\\"components.molecule.markdown-viewer\\\\\\\\\\\\\\\", {\\\\\\\\n      text: snapshot.description,\\\\\\\\n    })} */}\\\\\\\\n    <Widget\\\\\\\\n      src={\\\\\\\\\\\\\\\"devhub.near/widget/devhub.components.molecule.MarkdownViewer\\\\\\\\\\\\\\\"}\\\\\\\\n      props={{\\\\\\\\n        text: snapshot.description,\\\\\\\\n      }}\\\\\\\\n    />\\\\\\\\n  </LimitedMarkdown>\\\\\\\\n) : (\\\\\\\\n  <div className=\\\\\\\\\\\\\\\"w-100 overflow-auto\\\\\\\\\\\\\\\">\\\\\\\\n    <div class={state.clamp ? \\\\\\\\\\\\\\\"clamp\\\\\\\\\\\\\\\" : \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\"}>\\\\\\\\n      {/* {widget(\\\\\\\\\\\\\\\"components.molecule.markdown-viewer\\\\\\\\\\\\\\\", {\\\\\\\\n        text: state.clamp ? clampedContent : snapshot.description,\\\\\\\\n      })} */}\\\\\\\\n      <Widget\\\\\\\\n        src={\\\\\\\\\\\\\\\"devhub.near/widget/devhub.components.molecule.MarkdownViewer\\\\\\\\\\\\\\\"}\\\\\\\\n        props={{\\\\\\\\n          text: state.clamp ? clampedContent : snapshot.description,\\\\\\\\n        }}\\\\\\\\n      />\\\\\\\\n    </div>\\\\\\\\n    {state.clamp ? (\\\\\\\\n      <div class=\\\\\\\\\\\\\\\"d-flex justify-content-start\\\\\\\\\\\\\\\">\\\\\\\\n        <a\\\\\\\\n          style={{ cursor: \\\\\\\\\\\\\\\"pointer\\\\\\\\\\\\\\\", color: \\\\\\\\\\\\\\\"#00ec97\\\\\\\\\\\\\\\" }}\\\\\\\\n          class=\\\\\\\\\\\\\\\"btn-link text-dark fw-bold text-decoration-none\\\\\\\\\\\\\\\"\\\\\\\\n          onClick={() => State.update({ clamp: false })}\\\\\\\\n        >\\\\\\\\n          See more\\\\\\\\n        </a>\\\\\\\\n      </div>\\\\\\\\n    ) : (\\\\\\\\n      <></>\\\\\\\\n    )}\\\\\\\\n  </div>\\\\\\\\n);\\\\\\\\n\\\\\\\\nconst timestampElement = (_snapshot) => {\\\\\\\\n  return (\\\\\\\\n    <Link\\\\\\\\n      class=\\\\\\\\\\\\\\\"text-muted\\\\\\\\\\\\\\\"\\\\\\\\n      href={href({\\\\\\\\n        gateway: \\\\\\\\\\\\\\\"near.org\\\\\\\\\\\\\\\",\\\\\\\\n        widgetSrc: \\\\\\\\\\\\\\\"devhub.near/widget/app\\\\\\\\\\\\\\\",\\\\\\\\n        params: {\\\\\\\\n          page: \\\\\\\\\\\\\\\"post\\\\\\\\\\\\\\\",\\\\\\\\n          id: postId,\\\\\\\\n          timestamp: _snapshot.timestamp,\\\\\\\\n          compareTimestamp: null,\\\\\\\\n          referral,\\\\\\\\n        },\\\\\\\\n      })}\\\\\\\\n    >\\\\\\\\n      {readableDate(_snapshot.timestamp / 1000000).substring(4)}\\\\\\\\n\\\\\\\\n      <Widget\\\\\\\\n        src=\\\\\\\\\\\\\\\"mob.near/widget/ProfileImage\\\\\\\\\\\\\\\"\\\\\\\\n        props={{\\\\\\\\n          accountId: _snapshot.editor_id,\\\\\\\\n          style: {\\\\\\\\n            width: \\\\\\\\\\\\\\\"1.25em\\\\\\\\\\\\\\\",\\\\\\\\n            height: \\\\\\\\\\\\\\\"1.25em\\\\\\\\\\\\\\\",\\\\\\\\n          },\\\\\\\\n          imageStyle: {\\\\\\\\n            transform: \\\\\\\\\\\\\\\"translateY(-12.5%)\\\\\\\\\\\\\\\",\\\\\\\\n          },\\\\\\\\n        }}\\\\\\\\n      />\\\\\\\\n      {_snapshot.editor_id.substring(0, 8)}\\\\\\\\n    </Link>\\\\\\\\n  );\\\\\\\\n};\\\\\\\\n\\\\\\\\nfunction combineText(_snapshot) {\\\\\\\\n  return (\\\\\\\\n    \\\\\\\\\\\\\\\"## \\\\\\\\\\\\\\\" +\\\\\\\\n    _snapshot.post_type +\\\\\\\\n    \\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\" +\\\\\\\\n    _snapshot.name +\\\\\\\\n    \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\" +\\\\\\\\n    _snapshot.description\\\\\\\\n  );\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst CardContainer = styled.div`\\\\\\\\n  padding: 1.5rem 3rem !important;\\\\\\\\n  border-radius: 16px !important;\\\\\\\\n  border: 1px solid rgba(129, 129, 129, 0.3) !important;\\\\\\\\n  background: #fffefe !important;\\\\\\\\n\\\\\\\\n  @media screen and (max-width: 960px) {\\\\\\\\n    padding: 1rem !important;\\\\\\\\n  }\\\\\\\\n`;\\\\\\\\n\\\\\\\\nreturn (\\\\\\\\n  <CardContainer className={`card ${borders[snapshot.post_type]} attractable`}>\\\\\\\\n    {header}\\\\\\\\n    <div className=\\\\\\\\\\\\\\\"card-body\\\\\\\\\\\\\\\" style={{ padding: 0 }}>\\\\\\\\n      {searchKeywords}\\\\\\\\n      {compareSnapshot ? (\\\\\\\\n        <div\\\\\\\\n          class=\\\\\\\\\\\\\\\"border rounded\\\\\\\\\\\\\\\"\\\\\\\\n          style={{ marginTop: \\\\\\\\\\\\\\\"16px\\\\\\\\\\\\\\\", marginBottom: \\\\\\\\\\\\\\\"16px\\\\\\\\\\\\\\\" }}\\\\\\\\n        >\\\\\\\\n          <div class=\\\\\\\\\\\\\\\"d-flex justify-content-end\\\\\\\\\\\\\\\" style={{ fontSize: \\\\\\\\\\\\\\\"12px\\\\\\\\\\\\\\\" }}>\\\\\\\\n            <div class=\\\\\\\\\\\\\\\"d-flex w-50 justify-content-end mt-1 me-2\\\\\\\\\\\\\\\">\\\\\\\\n              {timestampElement(snapshot)}\\\\\\\\n              {snapshot !== compareSnapshot && (\\\\\\\\n                <>\\\\\\\\n                  <div class=\\\\\\\\\\\\\\\"mx-1 align-self-center\\\\\\\\\\\\\\\">\\\\\\\\n                    <i class=\\\\\\\\\\\\\\\"bi bi-file-earmark-diff\\\\\\\\\\\\\\\" />\\\\\\\\n                  </div>\\\\\\\\n                  {timestampElement(compareSnapshot)}\\\\\\\\n                </>\\\\\\\\n              )}\\\\\\\\n            </div>\\\\\\\\n          </div>\\\\\\\\n          <div className=\\\\\\\\\\\\\\\"w-100 overflow-auto\\\\\\\\\\\\\\\">\\\\\\\\n            <Widget\\\\\\\\n              src=\\\\\\\\\\\\\\\"markeljan.near/widget/MarkdownDiff\\\\\\\\\\\\\\\"\\\\\\\\n              props={{\\\\\\\\n                post: post,\\\\\\\\n                currentCode: combineText(\\\\\\\\n                  swapTimestamps ? compareSnapshot : snapshot\\\\\\\\n                ),\\\\\\\\n                prevCode: combineText(\\\\\\\\n                  swapTimestamps ? snapshot : compareSnapshot\\\\\\\\n                ),\\\\\\\\n                showLineNumber: true,\\\\\\\\n              }}\\\\\\\\n            />\\\\\\\\n          </div>\\\\\\\\n        </div>\\\\\\\\n      ) : (\\\\\\\\n        <>\\\\\\\\n          {postTitle}\\\\\\\\n          {postExtra}\\\\\\\\n          {descriptionArea}\\\\\\\\n        </>\\\\\\\\n      )}\\\\\\\\n      {tags}\\\\\\\\n      {buttonsFooter}\\\\\\\\n      {!props.isPreview && (isDraft || state.showEditor) && <Editor />}\\\\\\\\n      {postsList}\\\\\\\\n    </div>\\\\\\\\n  </CardContainer>\\\\\\\\n);\\\\\\\\n\"}}}}}"
      }
    ],
    "actions_agg": {
      "deposit": 1
    },
    "outcomes": {
      "status": true
    },
    "outcomes_agg": {
      "transaction_fee": 1.3490955844978e+21
    }
  },
  {
    "id": "1336761867",
    "receipt_id": "DHuhsFH369x7ctd1Q15RGU8zYSTroDNT6u2xrsfZBKzb",
    "predecessor_account_id": "system",
    "receiver_account_id": "devhub.near",
    "receipt_kind": "ACTION",
    "receipt_block": {
      "block_hash": "4qSAggV8VTH2Lv1VAgkAyyc5LTaMsuyHncpgscQzCmRN",
      "block_height": 104865567,
      "block_timestamp": 1699043670882637000
    },
    "receipt_outcome": {
      "gas_burnt": 223182562500,
      "tokens_burnt": 0,
      "executor_account_id": "devhub.near",
      "status": true
    },
    "transaction_hash": "2TvHc1EjqDs9AGAiEy7yST6S1HxfJnZ2VT4ucMetYFtq",
    "included_in_block_hash": "FEUS9jyJbwuMJansG6S8pTSe4L3qY8NJ7qkGFpsZQ3Xc",
    "block_timestamp": "1699043668759864356",
    "block": {
      "block_height": 104865565
    },
    "receipt_conversion_tokens_burnt": "249347411301200000000",
    "actions": [
      {
        "action": "TRANSFER",
        "method": null,
        "deposit": 1.879708255202649e+23,
        "fee": 0,
        "args": null
      }
    ],
    "actions_agg": {
      "deposit": 1
    },
    "outcomes": {
      "status": true
    },
    "outcomes_agg": {
      "transaction_fee": 1.3490955844978e+21
    }
  },
  {
    "id": "1336762237",
    "receipt_id": "A6Gwsvhdx6BFm9uLbSwvm5DGu8NGDxRvc4aAYrz4kscn",
    "predecessor_account_id": "devhub.near",
    "receiver_account_id": "social.near",
    "receipt_kind": "ACTION",
    "receipt_block": {
      "block_hash": "HTQeVjBnE3HnYqNopdsvyYCBuZxNXzccnkBBMf4BwsNQ",
      "block_height": 104865591,
      "block_timestamp": 1699043696878963000
    },
    "receipt_outcome": {
      "gas_burnt": 5906261723529,
      "tokens_burnt": 590626172352900000000,
      "executor_account_id": "social.near",
      "status": true
    },
    "transaction_hash": "6CYKHgoC2TN8kvGM51bEmYvhPMmeHCPZe6bg8uPKMjB1",
    "included_in_block_hash": "2UUDtHGbhd5wpX2oAXhiN49HyFVt1fpgXBksPpCvuUm4",
    "block_timestamp": "1699043695709276928",
    "block": {
      "block_height": 104865590
    },
    "receipt_conversion_tokens_burnt": "243777476113800000000",
    "actions": [
      {
        "action": "FUNCTION_CALL",
        "method": "set",
        "deposit": 0,
        "fee": 590626172352900000000,
        "args": "{\"data\": {\"devhub.near\": {\"widget\": {\"app\": {\"\": \"/**\\\\\\\\n * This is the main entry point for the DevHub application.\\\\\\\\n * Page route gets passed in through params, along with all other page props.\\\\\\\\n */\\\\\\\\n\\\\\\\\nconst { page, ...passProps } = props;\\\\\\\\n\\\\\\\\n// Import our modules\\\\\\\\nconst { AppLayout } = VM.require(\\\\\\\\n  \\\\\\\\\\\\\\\"devhub.near/widget/devhub.components.templates.AppLayout\\\\\\\\\\\\\\\"\\\\\\\\n);\\\\\\\\n\\\\\\\\nif (!AppLayout) {\\\\\\\\n  return <p>Loading modules...</p>;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// CSS styles to be used across the app.\\\\\\\\n// Define fonts here, as well as any other global styles.\\\\\\\\nconst Theme = styled.div`\\\\\\\\n  a {\\\\\\\\n    color: inherit;\\\\\\\\n  }\\\\\\\\n\\\\\\\\n  .attractable {\\\\\\\\n    box-shadow: 0 0.125rem 0.25rem rgba(0, 0, 0, 0.075) !important;\\\\\\\\n    transition: box-shadow 0.6s;\\\\\\\\n\\\\\\\\n    &:hover {\\\\\\\\n      box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.15) !important;\\\\\\\\n    }\\\\\\\\n  }\\\\\\\\n`;\\\\\\\\n\\\\\\\\nif (!page) {\\\\\\\\n  // If no page is specified, we default to the feed page TEMP\\\\\\\\n  page = \\\\\\\\\\\\\\\"home\\\\\\\\\\\\\\\";\\\\\\\\n}\\\\\\\\n\\\\\\\\n// This is our navigation, rendering the page based on the page parameter\\\\\\\\nfunction Page() {\\\\\\\\n  const routes = page.split(\\\\\\\\\\\\\\\".\\\\\\\\\\\\\\\");\\\\\\\\n  switch (routes[0]) {\\\\\\\\n    case \\\\\\\\\\\\\\\"home\\\\\\\\\\\\\\\": {\\\\\\\\n      return (\\\\\\\\n        <Widget\\\\\\\\n          src=\\\\\\\\\\\\\\\"devhub.near/widget/devhub.page.home\\\\\\\\\\\\\\\"\\\\\\\\n          props={passProps}\\\\\\\\n        />\\\\\\\\n      );\\\\\\\\n    }\\\\\\\\n    // ?page=communities\\\\\\\\n    case \\\\\\\\\\\\\\\"communities\\\\\\\\\\\\\\\": {\\\\\\\\n      return (\\\\\\\\n        <Widget\\\\\\\\n          src={\\\\\\\\\\\\\\\"devhub.near/widget/devhub.page.communities\\\\\\\\\\\\\\\"}\\\\\\\\n          props={passProps}\\\\\\\\n        />\\\\\\\\n      );\\\\\\\\n    }\\\\\\\\n    // ?page=community\\\\\\\\n    case \\\\\\\\\\\\\\\"community\\\\\\\\\\\\\\\": {\\\\\\\\n      return (\\\\\\\\n        // Considering to consolsidate this into a single widget,\\\\\\\\n        // where each level handles its own routing.\\\\\\\\n        // Modularizing a page just like we do with addons\\\\\\\\n        <Widget\\\\\\\\n          src={\\\\\\\\\\\\\\\"devhub.near/widget/devhub.entity.community.Provider\\\\\\\\\\\\\\\"}\\\\\\\\n          props={{\\\\\\\\n            ...passProps,\\\\\\\\n            Children: (p) => {\\\\\\\\n              // passing props from the Provider into the Children\\\\\\\\n              switch (routes[1]) {\\\\\\\\n                // ?page=community.configuration\\\\\\\\n                case \\\\\\\\\\\\\\\"configuration\\\\\\\\\\\\\\\": {\\\\\\\\n                  return (\\\\\\\\n                    <Widget\\\\\\\\n                      src={\\\\\\\\n                        \\\\\\\\\\\\\\\"devhub.near/widget/devhub.page.community.configuration\\\\\\\\\\\\\\\"\\\\\\\\n                      }\\\\\\\\n                      props={{\\\\\\\\n                        ...passProps,\\\\\\\\n                        ...p,\\\\\\\\n                      }}\\\\\\\\n                    />\\\\\\\\n                  );\\\\\\\\n                }\\\\\\\\n                // ?page=community\\\\\\\\n                default: {\\\\\\\\n                  return (\\\\\\\\n                    <Widget\\\\\\\\n                      src={\\\\\\\\\\\\\\\"devhub.near/widget/devhub.page.community.index\\\\\\\\\\\\\\\"}\\\\\\\\n                      props={{\\\\\\\\n                        ...passProps,\\\\\\\\n                        ...p,\\\\\\\\n                      }}\\\\\\\\n                    />\\\\\\\\n                  );\\\\\\\\n                }\\\\\\\\n              }\\\\\\\\n            },\\\\\\\\n          }}\\\\\\\\n        />\\\\\\\\n      );\\\\\\\\n    }\\\\\\\\n    // ?page=feed\\\\\\\\n    case \\\\\\\\\\\\\\\"feed\\\\\\\\\\\\\\\": {\\\\\\\\n      return (\\\\\\\\n        <Widget\\\\\\\\n          src={\\\\\\\\\\\\\\\"devhub.near/widget/devhub.page.feed\\\\\\\\\\\\\\\"}\\\\\\\\n          props={passProps}\\\\\\\\n        />\\\\\\\\n      );\\\\\\\\n    }\\\\\\\\n    // ?page=create\\\\\\\\n    case \\\\\\\\\\\\\\\"create\\\\\\\\\\\\\\\": {\\\\\\\\n      return (\\\\\\\\n        <Widget\\\\\\\\n          src={\\\\\\\\\\\\\\\"devhub.near/widget/devhub.page.create\\\\\\\\\\\\\\\"}\\\\\\\\n          props={passProps}\\\\\\\\n        />\\\\\\\\n      );\\\\\\\\n    }\\\\\\\\n    // ?page=about\\\\\\\\n    case \\\\\\\\\\\\\\\"about\\\\\\\\\\\\\\\": {\\\\\\\\n      return (\\\\\\\\n        <Widget\\\\\\\\n          src={\\\\\\\\\\\\\\\"devhub.near/widget/devhub.page.about\\\\\\\\\\\\\\\"}\\\\\\\\n          props={passProps}\\\\\\\\n        />\\\\\\\\n      );\\\\\\\\n    }\\\\\\\\n    case \\\\\\\\\\\\\\\"contribute\\\\\\\\\\\\\\\": {\\\\\\\\n      return (\\\\\\\\n        <Widget\\\\\\\\n          src={\\\\\\\\\\\\\\\"devhub.near/widget/devhub.page.contribute\\\\\\\\\\\\\\\"}\\\\\\\\n          props={passProps}\\\\\\\\n        />\\\\\\\\n      );\\\\\\\\n    }\\\\\\\\n    case \\\\\\\\\\\\\\\"profile\\\\\\\\\\\\\\\": {\\\\\\\\n      return (\\\\\\\\n        <Widget\\\\\\\\n          src={\\\\\\\\\\\\\\\"devhub.near/widget/devhub.page.profile\\\\\\\\\\\\\\\"}\\\\\\\\n          props={passProps}\\\\\\\\n        />\\\\\\\\n      );\\\\\\\\n    }\\\\\\\\n    // ?page=blog\\\\\\\\n    case \\\\\\\\\\\\\\\"blog\\\\\\\\\\\\\\\": {\\\\\\\\n      return (\\\\\\\\n        <Widget\\\\\\\\n          src={\\\\\\\\\\\\\\\"devhub.near/widget/devhub.page.blog\\\\\\\\\\\\\\\"}\\\\\\\\n          props={passProps}\\\\\\\\n        />\\\\\\\\n      );\\\\\\\\n    }\\\\\\\\n    case \\\\\\\\\\\\\\\"post\\\\\\\\\\\\\\\": {\\\\\\\\n      return (\\\\\\\\n        <Widget\\\\\\\\n          src={\\\\\\\\\\\\\\\"devhub.near/widget/devhub.page.post\\\\\\\\\\\\\\\"}\\\\\\\\n          props={passProps}\\\\\\\\n        />\\\\\\\\n      );\\\\\\\\n    }\\\\\\\\n\\\\\\\\n    default: {\\\\\\\\n      // TODO: 404 page\\\\\\\\n      return <p>404</p>;\\\\\\\\n    }\\\\\\\\n  }\\\\\\\\n}\\\\\\\\n\\\\\\\\nreturn (\\\\\\\\n  <Theme>\\\\\\\\n    <AppLayout page={page}>\\\\\\\\n      <Page />\\\\\\\\n    </AppLayout>\\\\\\\\n  </Theme>\\\\\\\\n);\\\\\\\\n\"}}}}}"
      }
    ],
    "actions_agg": {
      "deposit": 0
    },
    "outcomes": {
      "status": true
    },
    "outcomes_agg": {
      "transaction_fee": 834403648466700000000
    }
  },
  {
    "id": "1336762273",
    "receipt_id": "5Q7uShm2ncSiQt7tMSsWDEdL3NmyVEntYzapXNQ7qG34",
    "predecessor_account_id": "system",
    "receiver_account_id": "devhub.near",
    "receipt_kind": "ACTION",
    "receipt_block": {
      "block_hash": "3mUoQdcKHFYqLs5vKHjw9h5zs3YMXupP9PoQuCPsmzsY",
      "block_height": 104865592,
      "block_timestamp": 1699043698034371600
    },
    "receipt_outcome": {
      "gas_burnt": 223182562500,
      "tokens_burnt": 0,
      "executor_account_id": "devhub.near",
      "status": true
    },
    "transaction_hash": "6CYKHgoC2TN8kvGM51bEmYvhPMmeHCPZe6bg8uPKMjB1",
    "included_in_block_hash": "2UUDtHGbhd5wpX2oAXhiN49HyFVt1fpgXBksPpCvuUm4",
    "block_timestamp": "1699043695709276928",
    "block": {
      "block_height": 104865590
    },
    "receipt_conversion_tokens_burnt": "243777476113800000000",
    "actions": [
      {
        "action": "TRANSFER",
        "method": null,
        "deposit": 1.884451331885216e+23,
        "fee": 0,
        "args": null
      }
    ],
    "actions_agg": {
      "deposit": 0
    },
    "outcomes": {
      "status": true
    },
    "outcomes_agg": {
      "transaction_fee": 834403648466700000000
    }
  },
  {
    "id": "1336778769",
    "receipt_id": "BjFRRwMWpNAsbsj8qYgZuttGGQK8GENjs6tm7xUeEJkk",
    "predecessor_account_id": "devhub.near",
    "receiver_account_id": "social.near",
    "receipt_kind": "ACTION",
    "receipt_block": {
      "block_hash": "DF6CdE4paDNHHwMrYqKPvJypzF8VfKdD5KWW3EzX6G28",
      "block_height": 104866249,
      "block_timestamp": 1699044409173225000
    },
    "receipt_outcome": {
      "gas_burnt": 14704532295102,
      "tokens_burnt": 1.4704532295102e+21,
      "executor_account_id": "social.near",
      "status": true
    },
    "transaction_hash": "J2zRoNpNHu7DtmhKZ9CF7RtnSPNSYpSQUrNThYRFQNe",
    "included_in_block_hash": "4onueZrDi2eFmRjJn5RP4zjCcKWaEoMZFj9hQp2u9cdH",
    "block_timestamp": "1699044408092482904",
    "block": {
      "block_height": 104866248
    },
    "receipt_conversion_tokens_burnt": "242949733347000000000",
    "actions": [
      {
        "action": "FUNCTION_CALL",
        "method": "set",
        "deposit": 1,
        "fee": 1.4704532295102e+21,
        "args": "{\"data\": {\"devhub.near\": {\"profile\": {\"name\": \"DevHub\", \"tags\": {\"devhub\": \"\", \"developer-governance\": \"\"}, \"image\": {\"ipfs_cid\": \"bafkreido4srg4aj7l7yg2tz22nbu3ytdidjczdvottfr5ek6gqorwg6v74\"}, \"linktree\": {\"github\": \"near/neardevhub-widgets/\", \"twitter\": \"NEARDevHub\", \"website\": \"neardevhub.org\", \"telegram\": \"NEARDevHub\"}, \"backgroundImage\": {\"ipfs_cid\": \"bafkreiggwajains3kbgc7h2s5yr73dvmgmmhe2afyatxrkihqcisrbe56i\"}}, \"settings\": {\"near.social\": {\"MyPage\": \"devhub.near/widget/app\"}}}}}"
      }
    ],
    "actions_agg": {
      "deposit": 1
    },
    "outcomes": {
      "status": true
    },
    "outcomes_agg": {
      "transaction_fee": 1.7134029628572e+21
    }
  },
  {
    "id": "1336778799",
    "receipt_id": "zz7nGneYiENrgacKhhxxQoK1NgzwM7ECHF8MTgLJRmM",
    "predecessor_account_id": "system",
    "receiver_account_id": "devhub.near",
    "receipt_kind": "ACTION",
    "receipt_block": {
      "block_hash": "7wiDYqfkRAfpsHxEXRKte5BZsZ2BcLuz3qrRXmUYy1Pv",
      "block_height": 104866250,
      "block_timestamp": 1699044410286861800
    },
    "receipt_outcome": {
      "gas_burnt": 223182562500,
      "tokens_burnt": 0,
      "executor_account_id": "devhub.near",
      "status": true
    },
    "transaction_hash": "J2zRoNpNHu7DtmhKZ9CF7RtnSPNSYpSQUrNThYRFQNe",
    "included_in_block_hash": "4onueZrDi2eFmRjJn5RP4zjCcKWaEoMZFj9hQp2u9cdH",
    "block_timestamp": "1699044408092482904",
    "block": {
      "block_height": 104866248
    },
    "receipt_conversion_tokens_burnt": "242949733347000000000",
    "actions": [
      {
        "action": "TRANSFER",
        "method": null,
        "deposit": 1.758445064264767e+22,
        "fee": 0,
        "args": null
      }
    ],
    "actions_agg": {
      "deposit": 1
    },
    "outcomes": {
      "status": true
    },
    "outcomes_agg": {
      "transaction_fee": 1.7134029628572e+21
    }
  },
  {
    "id": "1336886018",
    "receipt_id": "HTmDQtyc6H7etUzRqH2DwGUHCpW733kkhc1W1A7FsJRe",
    "predecessor_account_id": "devhub.near",
    "receiver_account_id": "social.near",
    "receipt_kind": "ACTION",
    "receipt_block": {
      "block_hash": "AGekVWBEzhGkKyWrQuRb7xrvJQRbLEWtB5DNMUtpLj9A",
      "block_height": 104869798,
      "block_timestamp": 1699048284180202000
    },
    "receipt_outcome": {
      "gas_burnt": 13205287075096,
      "tokens_burnt": 1.3205287075096e+21,
      "executor_account_id": "social.near",
      "status": true
    },
    "transaction_hash": "F1WAWjJEfFNR8ZgYUPynP5yyjFkpHJ2xyVhVWkeZ3etL",
    "included_in_block_hash": "8wgTMRhBGan4xTDt6cvYRauNgayZgMGjK1SbUPZ8qtX3",
    "block_timestamp": "1699048283250803787",
    "block": {
      "block_height": 104869797
    },
    "receipt_conversion_tokens_burnt": "243061977233800000000",
    "actions": [
      {
        "action": "FUNCTION_CALL",
        "method": "set",
        "deposit": 1,
        "fee": 1.3205287075096e+21,
        "args": "{\"data\": {\"devhub.near\": {\"profile\": {\"name\": \"DevHub\", \"tags\": {\"devhub\": \"\", \"community\": \"\", \"open-source\": \"\", \"developer-governance\": \"\"}, \"image\": {\"ipfs_cid\": \"bafkreido4srg4aj7l7yg2tz22nbu3ytdidjczdvottfr5ek6gqorwg6v74\"}, \"linktree\": {\"github\": \"near/neardevhub-widgets/\", \"twitter\": \"NEARDevHub\", \"website\": \"neardevhub.org\", \"telegram\": \"NEARDevHub\"}, \"description\": \"DevHub brings together individuals, projects, and organizations to build a decentralized NEAR developer ecosystem. We provide social structure and tools to fuel innovation, collaboration, and community within the NEAR ecosystem. Whether you\\\\\\\\u{2019}re a blockchain developer or advocate for the open web, DevHub is your gateway to making a meaningful impact on NEAR and beyond.\\\\\\\\n\\\\\\\\nVisit [DevHub](/devhub.near/widget/app) now!\", \"backgroundImage\": {\"ipfs_cid\": \"bafkreiggwajains3kbgc7h2s5yr73dvmgmmhe2afyatxrkihqcisrbe56i\"}}, \"settings\": {\"near.social\": {\"MyPage\": \"devhub.near/widget/app\"}}}}}"
      }
    ],
    "actions_agg": {
      "deposit": 1
    },
    "outcomes": {
      "status": true
    },
    "outcomes_agg": {
      "transaction_fee": 1.5635906847434e+21
    }
  },
  {
    "id": "1336886039",
    "receipt_id": "DxZEgUrxwyHA5y9Y86e1QjgXFEyJKLNFUhdsNv4Ze2zp",
    "predecessor_account_id": "system",
    "receiver_account_id": "devhub.near",
    "receipt_kind": "ACTION",
    "receipt_block": {
      "block_hash": "3W4wLR2gpjfCTgDXbMNF9jWSirK5GsG65WZXNsC5SDi2",
      "block_height": 104869799,
      "block_timestamp": 1699048285289279500
    },
    "receipt_outcome": {
      "gas_burnt": 223182562500,
      "tokens_burnt": 0,
      "executor_account_id": "devhub.near",
      "status": true
    },
    "transaction_hash": "F1WAWjJEfFNR8ZgYUPynP5yyjFkpHJ2xyVhVWkeZ3etL",
    "included_in_block_hash": "8wgTMRhBGan4xTDt6cvYRauNgayZgMGjK1SbUPZ8qtX3",
    "block_timestamp": "1699048283250803787",
    "block": {
      "block_height": 104869797
    },
    "receipt_conversion_tokens_burnt": "243061977233800000000",
    "actions": [
      {
        "action": "TRANSFER",
        "method": null,
        "deposit": 1.7734583971342522e+22,
        "fee": 0,
        "args": null
      }
    ],
    "actions_agg": {
      "deposit": 1
    },
    "outcomes": {
      "status": true
    },
    "outcomes_agg": {
      "transaction_fee": 1.5635906847434e+21
    }
  },
  {
    "id": "1342317584",
    "receipt_id": "AwNVC5NTzWnzmiJwbCUK8Aotp2PL6MobNjGHepQHKPYV",
    "predecessor_account_id": "devhub.near",
    "receiver_account_id": "social.near",
    "receipt_kind": "ACTION",
    "receipt_block": {
      "block_hash": "8ChTP72n8MRsEq6Zs9TC6nwE58BHWb9fA72yJtJ1TPgM",
      "block_height": 104913413,
      "block_timestamp": 1699097584148386800
    },
    "receipt_outcome": {
      "gas_burnt": 6872226923761,
      "tokens_burnt": 687222692376100000000,
      "executor_account_id": "social.near",
      "status": true
    },
    "transaction_hash": "BqM1dusAvKx2XxNfxaFf8DJfxrLKVir7i5msPiWaPzH5",
    "included_in_block_hash": "35Kruqcmjk4x5c6NRVmo99pACfTXpB7HomW3LCa2oCRq",
    "block_timestamp": "1699097583483136648",
    "block": {
      "block_height": 104913412
    },
    "receipt_conversion_tokens_burnt": "245189021248000000000",
    "actions": [
      {
        "action": "FUNCTION_CALL",
        "method": "set",
        "deposit": 0,
        "fee": 687222692376100000000,
        "args": "{\"data\": {\"devhub.near\": {\"widget\": {\"devhub.components.organism.Navbar\": {\"\": \"const page = props.page;\\\\\\\\n\\\\\\\\nconst [showMenu, setShowMenu] = useState(false);\\\\\\\\n\\\\\\\\nconst { href: linkHref } = VM.require(\\\\\\\\\\\\\\\"devhub.near/widget/core.lib.url\\\\\\\\\\\\\\\");\\\\\\\\n\\\\\\\\nlinkHref || (linkHref = () => {});\\\\\\\\n\\\\\\\\nconst Logo = () => {\\\\\\\\n  const Wrapper = styled.div`\\\\\\\\n    @media screen and (max-width: 768px) {\\\\\\\\n      svg {\\\\\\\\n        width: 90px;\\\\\\\\n        height: 12px;\\\\\\\\n        transform: scale(1.5);\\\\\\\\n        margin-left: 1rem;\\\\\\\\n      }\\\\\\\\n    }\\\\\\\\n  `;\\\\\\\\n\\\\\\\\n  return (\\\\\\\\n    <Wrapper>\\\\\\\\n      <Link\\\\\\\\n        to={linkHref({\\\\\\\\n          widgetSrc: \\\\\\\\\\\\\\\"devhub.near/widget/app\\\\\\\\\\\\\\\",\\\\\\\\n          params: { page: \\\\\\\\\\\\\\\"home\\\\\\\\\\\\\\\" },\\\\\\\\n        })}\\\\\\\\n      >\\\\\\\\n        <svg\\\\\\\\n          xmlns=\\\\\\\\\\\\\\\"http://www.w3.org/2000/svg\\\\\\\\\\\\\\\"\\\\\\\\n          width=\\\\\\\\\\\\\\\"180\\\\\\\\\\\\\\\"\\\\\\\\n          height=\\\\\\\\\\\\\\\"24\\\\\\\\\\\\\\\"\\\\\\\\n          viewBox=\\\\\\\\\\\\\\\"0 0 180 24\\\\\\\\\\\\\\\"\\\\\\\\n          fill=\\\\\\\\\\\\\\\"none\\\\\\\\\\\\\\\"\\\\\\\\n        >\\\\\\\\n          <g clip-path=\\\\\\\\\\\\\\\"url(#clip0_530_29)\\\\\\\\\\\\\\\">\\\\\\\\n            <path\\\\\\\\n              d=\\\\\\\\\\\\\\\"M8.62185 6.09766C11.8428 6.09766 14.5995 7.77588 14.5995 12.7821V20.8888H10.508V13.1803C10.508 10.7057 9.55041 9.39721 7.49016 9.39721C5.37187 9.39721 4.15313 10.8763 4.15313 13.4079V20.8888H0.0616455V6.26832H3.63081L4.00804 8.08877C4.96563 6.95099 6.32945 6.09766 8.62185 6.09766ZM23.911 21.0594C18.9489 21.0594 15.9601 18.1297 15.9601 13.607C15.9601 9.05588 19.007 6.09766 23.6208 6.09766C28.0895 6.09766 31.1073 8.82832 31.1654 13.1234C31.1654 13.5501 31.1364 14.0337 31.0493 14.4888H20.2257V14.6879C20.3128 16.7643 21.6766 18.0159 23.7369 18.0159C25.3909 18.0159 26.5516 17.3048 26.8998 15.9394H30.9332C30.4689 18.7839 27.8864 21.0594 23.911 21.0594ZM20.3128 11.8719H27.0449C26.7547 10.0799 25.5069 9.08432 23.6498 9.08432C21.8797 9.08432 20.5449 10.1368 20.3128 11.8719ZM47.0396 17.5039H47.5039V20.8888H45.4146C43.2963 20.8888 42.6289 19.8932 42.6579 18.4994C41.6133 20.1208 40.1044 21.0594 37.783 21.0594C34.562 21.0594 32.2406 19.5519 32.2406 16.7643C32.2406 13.6639 34.6201 11.9003 39.0888 11.9003H42.0486V11.1892C42.0486 9.88077 41.091 9.02743 39.3789 9.02743C37.783 9.02743 36.7093 9.73854 36.5352 10.8194H32.5888C32.879 7.97499 35.5486 6.09766 39.495 6.09766C43.6736 6.09766 46.082 7.9181 46.082 11.4168V16.5937C46.082 17.3617 46.4012 17.5039 47.0396 17.5039ZM42.0486 14.8585V14.5741H39.0598C37.3477 14.5741 36.3611 15.2568 36.3611 16.4799C36.3611 17.5039 37.2026 18.1581 38.5665 18.1581C40.7138 18.1581 42.0196 16.8497 42.0486 14.8585ZM56.8924 6.26832H57.5889V9.90921H55.9639C53.5264 9.90921 52.5978 11.5021 52.5978 13.7208V20.8888H48.5064V6.26832H52.2206L52.5978 8.45854C53.4103 7.1501 54.571 6.26832 56.8924 6.26832Z\\\\\\\\\\\\\\\"\\\\\\\\n              fill=\\\\\\\\\\\\\\\"#00EC97\\\\\\\\\\\\\\\"\\\\\\\\n            />\\\\\\\\n            <path\\\\\\\\n              d=\\\\\\\\\\\\\\\"M60.7221 23.961H59.2422L67.4542 0.124512H68.9341L60.7221 23.961ZM82.8081 8.08896V0.977843H86.8996V20.889H83.3304L82.9242 18.8694C81.9376 20.121 80.4867 21.0596 78.3394 21.0596C74.335 21.0596 71.4042 18.1867 71.4042 13.5503C71.4042 9.02762 74.335 6.09785 78.3104 6.09785C80.3706 6.09785 81.8505 6.89429 82.8081 8.08896ZM79.239 17.7885C81.4733 17.7885 82.8662 16.0818 82.8662 13.6072C82.8662 11.1041 81.4733 9.36896 79.239 9.36896C77.0046 9.36896 75.5827 11.0756 75.5827 13.5787C75.5827 16.0818 77.0046 17.7885 79.239 17.7885ZM96.2521 21.0596C91.2901 21.0596 88.3013 18.1298 88.3013 13.6072C88.3013 9.05607 91.3482 6.09785 95.962 6.09785C100.431 6.09785 103.449 8.82851 103.507 13.1236C103.507 13.5503 103.478 14.0338 103.39 14.489H92.5669V14.6881C92.6539 16.7645 94.0178 18.0161 96.078 18.0161C97.732 18.0161 98.8927 17.305 99.2409 15.9396H103.274C102.81 18.7841 100.228 21.0596 96.2521 21.0596ZM92.6539 11.8721H99.386C99.0959 10.0801 97.8481 9.08451 95.991 9.08451C94.2209 9.08451 92.8861 10.137 92.6539 11.8721ZM108.081 20.889L102.713 6.26851H107.094L110.692 16.793L114.233 6.26851H118.527L113.159 20.889H108.081ZM120.906 23.961H119.427L127.639 0.124512H129.118L120.906 23.961ZM140.671 6.09785C143.979 6.09785 146.707 7.83296 146.707 12.7823V20.889H142.615V13.1236C142.615 10.7343 141.629 9.3974 139.597 9.3974C137.508 9.3974 136.26 10.8765 136.26 13.3796V20.889H132.169V0.977843H136.26V8.06051C137.218 6.92273 138.553 6.09785 140.671 6.09785ZM158.367 13.5787V6.26851H162.459V20.889H158.832L158.454 19.1254C157.497 20.2632 156.191 21.0596 154.073 21.0596C150.997 21.0596 148.153 19.5521 148.153 14.3752V6.26851H152.245V13.8347C152.245 16.4516 153.115 17.7316 155.146 17.7316C157.178 17.7316 158.367 16.281 158.367 13.5787ZM173.022 6.09785C177.027 6.09785 179.928 8.91385 179.928 13.5503C179.928 18.073 177.027 21.0596 172.993 21.0596C170.846 21.0596 169.366 20.1494 168.408 18.8978L168.002 20.889H164.433V0.977843H168.524V8.1174C169.511 6.95118 170.962 6.09785 173.022 6.09785ZM172.094 17.7885C174.328 17.7885 175.779 16.0818 175.779 13.5787C175.779 11.0756 174.328 9.36896 172.094 9.36896C169.859 9.36896 168.466 11.0756 168.466 13.5503C168.466 16.0534 169.859 17.7885 172.094 17.7885Z\\\\\\\\\\\\\\\"\\\\\\\\n              fill=\\\\\\\\\\\\\\\"#151515\\\\\\\\\\\\\\\"\\\\\\\\n            />\\\\\\\\n          </g>\\\\\\\\n          <defs>\\\\\\\\n            <clipPath id=\\\\\\\\\\\\\\\"clip0_530_29\\\\\\\\\\\\\\\">\\\\\\\\n              <rect width=\\\\\\\\\\\\\\\"180\\\\\\\\\\\\\\\" height=\\\\\\\\\\\\\\\"24\\\\\\\\\\\\\\\" fill=\\\\\\\\\\\\\\\"white\\\\\\\\\\\\\\\" />\\\\\\\\n            </clipPath>\\\\\\\\n          </defs>\\\\\\\\n        </svg>\\\\\\\\n      </Link>\\\\\\\\n    </Wrapper>\\\\\\\\n  );\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst ProfileIcon = () => {\\\\\\\\n  const Wrapper = styled.svg`\\\\\\\\n    padding: 0.25rem;\\\\\\\\n    @media screen and (max-width: 768px) {\\\\\\\\n      display: none;\\\\\\\\n    }\\\\\\\\n  `;\\\\\\\\n  return (\\\\\\\\n    <Link\\\\\\\\n      to={linkHref({\\\\\\\\n        widgetSrc: \\\\\\\\\\\\\\\"devhub.near/widget/app\\\\\\\\\\\\\\\",\\\\\\\\n        params: { page: \\\\\\\\\\\\\\\"profile\\\\\\\\\\\\\\\", accountId: context.accountId },\\\\\\\\n      })}\\\\\\\\n    >\\\\\\\\n      <Widget\\\\\\\\n        src=\\\\\\\\\\\\\\\"devhub.near/widget/devhub.components.molecule.ProfileCard\\\\\\\\\\\\\\\"\\\\\\\\n        props={{ iconOnly: true, accountId: context.accountId || null }}\\\\\\\\n      />\\\\\\\\n    </Link>\\\\\\\\n  );\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst MenuIcon = () => (\\\\\\\\n  <svg\\\\\\\\n    xmlns=\\\\\\\\\\\\\\\"http://www.w3.org/2000/svg\\\\\\\\\\\\\\\"\\\\\\\\n    width=\\\\\\\\\\\\\\\"16\\\\\\\\\\\\\\\"\\\\\\\\n    height=\\\\\\\\\\\\\\\"16\\\\\\\\\\\\\\\"\\\\\\\\n    viewBox=\\\\\\\\\\\\\\\"0 0 16 16\\\\\\\\\\\\\\\"\\\\\\\\n    fill=\\\\\\\\\\\\\\\"none\\\\\\\\\\\\\\\"\\\\\\\\n    style={{ height: 20, width: 20 }}\\\\\\\\n  >\\\\\\\\n    <path\\\\\\\\n      fill-rule=\\\\\\\\\\\\\\\"evenodd\\\\\\\\\\\\\\\"\\\\\\\\n      clip-rule=\\\\\\\\\\\\\\\"evenodd\\\\\\\\\\\\\\\"\\\\\\\\n      d=\\\\\\\\\\\\\\\"M2 12.2986H14V13.3732H2V12.2986ZM2 9.07471H14V10.1493H2V9.07471ZM2 5.85083H14V6.92546H2V5.85083ZM2 2.62695H14V3.70158H2V2.62695Z\\\\\\\\\\\\\\\"\\\\\\\\n      fill=\\\\\\\\\\\\\\\"#818181\\\\\\\\\\\\\\\"\\\\\\\\n    />\\\\\\\\n  </svg>\\\\\\\\n);\\\\\\\\n\\\\\\\\nconst Navbar = styled.div`\\\\\\\\n  padding: 1.5rem 3rem;\\\\\\\\n\\\\\\\\n  display: flex;\\\\\\\\n  flex-direction: row;\\\\\\\\n  justify-content: space-between;\\\\\\\\n  align-items: center;\\\\\\\\n\\\\\\\\n  background: #f4f4f4;\\\\\\\\n\\\\\\\\n  @media screen and (max-width: 768px) {\\\\\\\\n    padding: 1.875rem 1.375rem;\\\\\\\\n  }\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst LinksContainer = styled.div`\\\\\\\\n  display: flex;\\\\\\\\n  flex-direction: row;\\\\\\\\n  align-items: center;\\\\\\\\n  gap: 1.5rem;\\\\\\\\n\\\\\\\\n  @media screen and (max-width: 768px) {\\\\\\\\n    display: none;\\\\\\\\n  }\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst MobileMenu = styled.button`\\\\\\\\n  all: unset;\\\\\\\\n  display: none;\\\\\\\\n\\\\\\\\n  @media screen and (max-width: 768px) {\\\\\\\\n    display: block;\\\\\\\\n  }\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst links = [\\\\\\\\n  {\\\\\\\\n    title: \\\\\\\\\\\\\\\"/communities\\\\\\\\\\\\\\\",\\\\\\\\n    href: \\\\\\\\\\\\\\\"communities\\\\\\\\\\\\\\\",\\\\\\\\n    links: [],\\\\\\\\n  },\\\\\\\\n  {\\\\\\\\n    title: \\\\\\\\\\\\\\\"/activity feed\\\\\\\\\\\\\\\",\\\\\\\\n    href: \\\\\\\\\\\\\\\"feed\\\\\\\\\\\\\\\",\\\\\\\\n    links: [],\\\\\\\\n  },\\\\\\\\n  {\\\\\\\\n    title: \\\\\\\\\\\\\\\"/about\\\\\\\\\\\\\\\",\\\\\\\\n    links: [\\\\\\\\n      { title: \\\\\\\\\\\\\\\"mission\\\\\\\\\\\\\\\", href: \\\\\\\\\\\\\\\"about\\\\\\\\\\\\\\\" },\\\\\\\\n      { title: \\\\\\\\\\\\\\\"blog\\\\\\\\\\\\\\\", href: \\\\\\\\\\\\\\\"blog\\\\\\\\\\\\\\\" },\\\\\\\\n      { title: \\\\\\\\\\\\\\\"newsletter\\\\\\\\\\\\\\\", href: \\\\\\\\\\\\\\\"https://newsletter.neardevhub.org\\\\\\\\\\\\\\\" },\\\\\\\\n      {\\\\\\\\n        title: \\\\\\\\\\\\\\\"calendar\\\\\\\\\\\\\\\",\\\\\\\\n        href: \\\\\\\\\\\\\\\"https://calendar.google.com/calendar/embed?height=600&wkst=2&bgcolor=%23ffffff&ctz=UTC&title&showNav=1&showDate=1&mode=AGENDA&showPrint=0&src=Y19mNTRlZDM3ZmQ5MjMyN2FjZGM3ZTQzNDNmZTQwNzIyYWU1Nzk3YjZjODI5MjliYTkzZTlmM2E4OWM2OTY1N2FiQGdyb3VwLmNhbGVuZGFyLmdvb2dsZS5jb20&color=%23616161\\\\\\\\\\\\\\\",\\\\\\\\n      },\\\\\\\\n      {\\\\\\\\n        title: \\\\\\\\\\\\\\\"brand kit\\\\\\\\\\\\\\\",\\\\\\\\n        href: \\\\\\\\\\\\\\\"https://drive.google.com/drive/folders/1C0GMmGq3MzbVPpxvf9807IU-7kpc2_v5?usp=sharing\\\\\\\\\\\\\\\",\\\\\\\\n      },\\\\\\\\n    ],\\\\\\\\n  },\\\\\\\\n];\\\\\\\\n\\\\\\\\nconst MobileNav = styled.div`\\\\\\\\n  display: none;\\\\\\\\n\\\\\\\\n  @media screen and (max-width: 768px) {\\\\\\\\n    display: flex;\\\\\\\\n  }\\\\\\\\n\\\\\\\\n  position: absolute;\\\\\\\\n  top: 0;\\\\\\\\n  right: 0;\\\\\\\\n\\\\\\\\n  width: 207px;\\\\\\\\n\\\\\\\\n  padding: 24px 36px 36px 16px;\\\\\\\\n  flex-direction: column;\\\\\\\\n  align-items: flex-end;\\\\\\\\n  gap: 2.5rem;\\\\\\\\n  flex-shrink: 0;\\\\\\\\n\\\\\\\\n  border-radius: 0px 0px 0px 16px;\\\\\\\\n  background: rgba(41, 41, 41, 0.6);\\\\\\\\n  backdrop-filter: blur(5px);\\\\\\\\n\\\\\\\\n  z-index: 50;\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst MobileLink = styled.a`\\\\\\\\n  color: #f4f4f4 !important;\\\\\\\\n  font-size: 20px;\\\\\\\\n  font-style: normal;\\\\\\\\n  font-weight: 400;\\\\\\\\n  line-height: 20px; /* 100% */\\\\\\\\n  margin-bottom: 1rem;\\\\\\\\n\\\\\\\\n  &.active {\\\\\\\\n    color: #00ec97 !important;\\\\\\\\n  }\\\\\\\\n\\\\\\\\n  &:hover {\\\\\\\\n    text-decoration: none;\\\\\\\\n    color: #00ec97 !important;\\\\\\\\n  }\\\\\\\\n`;\\\\\\\\n\\\\\\\\nreturn (\\\\\\\\n  <Navbar className=\\\\\\\\\\\\\\\"position-relative\\\\\\\\\\\\\\\">\\\\\\\\n    <Logo />\\\\\\\\n    <div className=\\\\\\\\\\\\\\\"d-flex gap-3 align-items-center\\\\\\\\\\\\\\\">\\\\\\\\n      <LinksContainer>\\\\\\\\n        {links.map((link) => (\\\\\\\\n          <Widget\\\\\\\\n            src=\\\\\\\\\\\\\\\"devhub.near/widget/devhub.components.molecule.NavbarDropdown\\\\\\\\\\\\\\\"\\\\\\\\n            props={{\\\\\\\\n              title: link.title,\\\\\\\\n              href: link.href,\\\\\\\\n              links: link.links,\\\\\\\\n              page: page,\\\\\\\\n            }}\\\\\\\\n          />\\\\\\\\n        ))}\\\\\\\\n      </LinksContainer>\\\\\\\\n      {context.accountId && <ProfileIcon />}\\\\\\\\n      <MobileMenu onClick={() => setShowMenu(!showMenu)}>\\\\\\\\n        <MenuIcon />\\\\\\\\n      </MobileMenu>\\\\\\\\n    </div>\\\\\\\\n    {showMenu && (\\\\\\\\n      <MobileNav>\\\\\\\\n        <div\\\\\\\\n          onClick={() => setShowMenu(!showMenu)}\\\\\\\\n          style={{ cursor: \\\\\\\\\\\\\\\"pointer\\\\\\\\\\\\\\\" }}\\\\\\\\n        >\\\\\\\\n          <i className=\\\\\\\\\\\\\\\"bi bi-x\\\\\\\\\\\\\\\" style={{ fontSize: 20, color: \\\\\\\\\\\\\\\"#F4F4F4\\\\\\\\\\\\\\\" }}></i>\\\\\\\\n        </div>\\\\\\\\n        <div className=\\\\\\\\\\\\\\\"d-flex flex-column gap-2\\\\\\\\\\\\\\\">\\\\\\\\n          {links.map((link, idx) =>\\\\\\\\n            link.href ? (\\\\\\\\n              <MobileLink\\\\\\\\n                key={`mobile-link-${idx}`}\\\\\\\\n                className={link.href === props.page && \\\\\\\\\\\\\\\"active\\\\\\\\\\\\\\\"}\\\\\\\\n                href={`/devhub.near/widget/app?page=${link.href}`}\\\\\\\\n              >\\\\\\\\n                {link.title}\\\\\\\\n              </MobileLink>\\\\\\\\n            ) : (\\\\\\\\n              link.links.map((it, idx) =>\\\\\\\\n                it.href.startsWith(\\\\\\\\\\\\\\\"http://\\\\\\\\\\\\\\\") ||\\\\\\\\n                it.href.startsWith(\\\\\\\\\\\\\\\"https://\\\\\\\\\\\\\\\") ? (\\\\\\\\n                  <MobileLink\\\\\\\\n                    key={`nested-link-${idx}`}\\\\\\\\n                    className={link.href === props.page && \\\\\\\\\\\\\\\"active\\\\\\\\\\\\\\\"}\\\\\\\\n                    href={it.href}\\\\\\\\n                    target=\\\\\\\\\\\\\\\"no_blank\\\\\\\\\\\\\\\"\\\\\\\\n                  >\\\\\\\\n                    /{it.title}\\\\\\\\n                  </MobileLink>\\\\\\\\n                ) : (\\\\\\\\n                  <MobileLink\\\\\\\\n                    key={`nested-link-${idx}`}\\\\\\\\n                    className={link.href === props.page && \\\\\\\\\\\\\\\"active\\\\\\\\\\\\\\\"}\\\\\\\\n                    href={`/devhub.near/widget/app?page=${it.href}`}\\\\\\\\n                  >\\\\\\\\n                    /{it.title}\\\\\\\\n                  </MobileLink>\\\\\\\\n                )\\\\\\\\n              )\\\\\\\\n            )\\\\\\\\n          )}\\\\\\\\n        </div>\\\\\\\\n      </MobileNav>\\\\\\\\n    )}\\\\\\\\n  </Navbar>\\\\\\\\n);\\\\\\\\n\"}}}}}"
      }
    ],
    "actions_agg": {
      "deposit": 0
    },
    "outcomes": {
      "status": true
    },
    "outcomes_agg": {
      "transaction_fee": 932411713624100000000
    }
  },
  {
    "id": "1342317600",
    "receipt_id": "HbXvHXehywK1njrLRBWTn8EpEQvoTJghxTrpi4B7PR95",
    "predecessor_account_id": "system",
    "receiver_account_id": "devhub.near",
    "receipt_kind": "ACTION",
    "receipt_block": {
      "block_hash": "CPvdME7p3hXgSsPyd2DwWHbDnt2CnyTrGuH8weh2tPB2",
      "block_height": 104913414,
      "block_timestamp": 1699097585412246800
    },
    "receipt_outcome": {
      "gas_burnt": 223182562500,
      "tokens_burnt": 0,
      "executor_account_id": "devhub.near",
      "status": true
    },
    "transaction_hash": "BqM1dusAvKx2XxNfxaFf8DJfxrLKVir7i5msPiWaPzH5",
    "included_in_block_hash": "35Kruqcmjk4x5c6NRVmo99pACfTXpB7HomW3LCa2oCRq",
    "block_timestamp": "1699097583483136648",
    "block": {
      "block_height": 104913412
    },
    "receipt_conversion_tokens_burnt": "245189021248000000000",
    "actions": [
      {
        "action": "TRANSFER",
        "method": null,
        "deposit": 1.883573593926613e+23,
        "fee": 0,
        "args": null
      }
    ],
    "actions_agg": {
      "deposit": 0
    },
    "outcomes": {
      "status": true
    },
    "outcomes_agg": {
      "transaction_fee": 932411713624100000000
    }
  },
  {
    "id": "1343954055",
    "receipt_id": "6uGPryXw1beBn2aXKr14fykpDLbadhq2eujAdsrCp9xh",
    "predecessor_account_id": "devhub.near",
    "receiver_account_id": "social.near",
    "receipt_kind": "ACTION",
    "receipt_block": {
      "block_hash": "2onzs6RoAx3t5RkrHaH31in8MXNrFUJ56PCkoDQ3vK11",
      "block_height": 104941153,
      "block_timestamp": 1699128212560295000
    },
    "receipt_outcome": {
      "gas_burnt": 14001680441806,
      "tokens_burnt": 1.4001680441806e+21,
      "executor_account_id": "social.near",
      "status": true
    },
    "transaction_hash": "7dnFdeDgiafcqYDbV8qYo6awmTtX5gNtw3wq4W2iCkwv",
    "included_in_block_hash": "CKrjNfVQnS6xPmTdjfdWB66CrCT6BY4JdGaaNSKVdo58",
    "block_timestamp": "1699128211262309747",
    "block": {
      "block_height": 104941152
    },
    "receipt_conversion_tokens_burnt": "250979866714600000000",
    "actions": [
      {
        "action": "FUNCTION_CALL",
        "method": "set",
        "deposit": 0,
        "fee": 1.4001680441806e+21,
        "args": "{\"data\": {\"devhub.near\": {\"widget\": {\"devhub.entity.post.Post\": {\"\": \"// Ideally, this would be a page\\\\\\\\n\\\\\\\\nconst { href } = VM.require(\\\\\\\\\\\\\\\"devhub.near/widget/core.lib.url\\\\\\\\\\\\\\\");\\\\\\\\n\\\\\\\\nhref || (href = () => {});\\\\\\\\n\\\\\\\\nconst ButtonWithHover = styled.button`\\\\\\\\n  background-color: #fff;\\\\\\\\n  &:hover {\\\\\\\\n    background-color: #e9ecef;\\\\\\\\n    color: #000;\\\\\\\\n  }\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst postId = props.post.id ?? (props.id ? parseInt(props.id) : 0);\\\\\\\\nconst post =\\\\\\\\n  props.post ??\\\\\\\\n  Near.view(\\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"get_post\\\\\\\\\\\\\\\", { post_id: postId });\\\\\\\\nif (!post) {\\\\\\\\n  return <div>Loading ...</div>;\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst referral = props.referral;\\\\\\\\nconst currentTimestamp = props.timestamp ?? post.snapshot.timestamp;\\\\\\\\nconst compareTimestamp = props.compareTimestamp ?? \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\";\\\\\\\\nconst swapTimestamps = currentTimestamp < compareTimestamp;\\\\\\\\n\\\\\\\\nconst snapshotHistory = post.snapshot_history;\\\\\\\\nconst snapshot =\\\\\\\\n  currentTimestamp === post.snapshot.timestamp\\\\\\\\n    ? post.snapshot\\\\\\\\n    : (snapshotHistory &&\\\\\\\\n        snapshotHistory.find((s) => s.timestamp === currentTimestamp)) ??\\\\\\\\n      null;\\\\\\\\nconst compareSnapshot =\\\\\\\\n  compareTimestamp === post.snapshot.timestamp\\\\\\\\n    ? post.snapshot\\\\\\\\n    : (snapshotHistory &&\\\\\\\\n        snapshotHistory.find((s) => s.timestamp === compareTimestamp)) ??\\\\\\\\n      null;\\\\\\\\n\\\\\\\\n// If this post is displayed under another post. Used to limit the size.\\\\\\\\nconst isUnderPost = props.isUnderPost ? true : false;\\\\\\\\nconst parentId = Near.view(\\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"get_parent_id\\\\\\\\\\\\\\\", {\\\\\\\\n  post_id: postId,\\\\\\\\n});\\\\\\\\n\\\\\\\\nconst childPostIdsUnordered =\\\\\\\\n  Near.view(\\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"get_children_ids\\\\\\\\\\\\\\\", {\\\\\\\\n    post_id: postId,\\\\\\\\n  }) ?? [];\\\\\\\\n\\\\\\\\nconst childPostIds = props.isPreview ? [] : childPostIdsUnordered.reverse();\\\\\\\\nconst expandable = props.isPreview ? false : props.expandable ?? false;\\\\\\\\nconst defaultExpanded = expandable ? props.defaultExpanded : true;\\\\\\\\n\\\\\\\\nconst draftState = props.draftState;\\\\\\\\n\\\\\\\\nfunction readableDate(timestamp) {\\\\\\\\n  var a = new Date(timestamp);\\\\\\\\n  return a.toDateString() + \\\\\\\\\\\\\\\" \\\\\\\\\\\\\\\" + a.toLocaleTimeString();\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst timestamp = readableDate(\\\\\\\\n  snapshot.timestamp ? snapshot.timestamp / 1000000 : Date.now()\\\\\\\\n);\\\\\\\\n\\\\\\\\nconst postSearchKeywords = props.searchKeywords ? (\\\\\\\\n  <div style={{ \\\\\\\\\\\\\\\"font-family\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"monospace\\\\\\\\\\\\\\\" }} key=\\\\\\\\\\\\\\\"post-search-keywords\\\\\\\\\\\\\\\">\\\\\\\\n    <span>Found keywords: </span>\\\\\\\\n    {props.searchKeywords.map((tag) => (\\\\\\\\n      <Widget\\\\\\\\n        src={\\\\\\\\\\\\\\\"devhub.near/widget/devhub.components.atom.Tag\\\\\\\\\\\\\\\"}\\\\\\\\n        props={{ linkTo: \\\\\\\\\\\\\\\"Feed\\\\\\\\\\\\\\\", tag }}\\\\\\\\n      />\\\\\\\\n    ))}\\\\\\\\n  </div>\\\\\\\\n) : (\\\\\\\\n  <div key=\\\\\\\\\\\\\\\"post-search-keywords\\\\\\\\\\\\\\\"></div>\\\\\\\\n);\\\\\\\\n\\\\\\\\nconst searchKeywords = props.searchKeywords ? (\\\\\\\\n  <div class=\\\\\\\\\\\\\\\"mb-4\\\\\\\\\\\\\\\" key=\\\\\\\\\\\\\\\"search-keywords\\\\\\\\\\\\\\\">\\\\\\\\n    <small class=\\\\\\\\\\\\\\\"text-muted\\\\\\\\\\\\\\\">{postSearchKeywords}</small>\\\\\\\\n  </div>\\\\\\\\n) : (\\\\\\\\n  <div key=\\\\\\\\\\\\\\\"search-keywords\\\\\\\\\\\\\\\"></div>\\\\\\\\n);\\\\\\\\n\\\\\\\\nconst allowedToEdit =\\\\\\\\n  !props.isPreview &&\\\\\\\\n  Near.view(\\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"is_allowed_to_edit\\\\\\\\\\\\\\\", {\\\\\\\\n    post_id: postId,\\\\\\\\n    editor: context.accountId,\\\\\\\\n  });\\\\\\\\n\\\\\\\\nconst btnEditorWidget = (postType, name) => {\\\\\\\\n  return (\\\\\\\\n    <li>\\\\\\\\n      <a\\\\\\\\n        class=\\\\\\\\\\\\\\\"dropdown-item\\\\\\\\\\\\\\\"\\\\\\\\n        role=\\\\\\\\\\\\\\\"button\\\\\\\\\\\\\\\"\\\\\\\\n        onClick={() =>\\\\\\\\n          State.update({ postType, editorType: \\\\\\\\\\\\\\\"EDIT\\\\\\\\\\\\\\\", showEditor: true })\\\\\\\\n        }\\\\\\\\n      >\\\\\\\\n        {name}\\\\\\\\n      </a>\\\\\\\\n    </li>\\\\\\\\n  );\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst editControl = allowedToEdit ? (\\\\\\\\n  <div class=\\\\\\\\\\\\\\\"btn-group\\\\\\\\\\\\\\\" role=\\\\\\\\\\\\\\\"group\\\\\\\\\\\\\\\">\\\\\\\\n    <a\\\\\\\\n      class=\\\\\\\\\\\\\\\"card-link px-2\\\\\\\\\\\\\\\"\\\\\\\\n      role=\\\\\\\\\\\\\\\"button\\\\\\\\\\\\\\\"\\\\\\\\n      title=\\\\\\\\\\\\\\\"Edit post\\\\\\\\\\\\\\\"\\\\\\\\n      data-bs-toggle=\\\\\\\\\\\\\\\"dropdown\\\\\\\\\\\\\\\"\\\\\\\\n      aria-expanded=\\\\\\\\\\\\\\\"false\\\\\\\\\\\\\\\"\\\\\\\\n      type=\\\\\\\\\\\\\\\"button\\\\\\\\\\\\\\\"\\\\\\\\n    >\\\\\\\\n      <div class=\\\\\\\\\\\\\\\"bi bi-pencil-square\\\\\\\\\\\\\\\"></div>\\\\\\\\n    </a>\\\\\\\\n    <ul class=\\\\\\\\\\\\\\\"dropdown-menu\\\\\\\\\\\\\\\">\\\\\\\\n      {btnEditorWidget(\\\\\\\\\\\\\\\"Idea\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"Edit as an idea\\\\\\\\\\\\\\\")}\\\\\\\\n      {btnEditorWidget(\\\\\\\\\\\\\\\"Solution\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"Edit as a solution\\\\\\\\\\\\\\\")}\\\\\\\\n      {btnEditorWidget(\\\\\\\\\\\\\\\"Attestation\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"Edit as an attestation\\\\\\\\\\\\\\\")}\\\\\\\\n      {btnEditorWidget(\\\\\\\\\\\\\\\"Sponsorship\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"Edit as a sponsorship\\\\\\\\\\\\\\\")}\\\\\\\\n      {btnEditorWidget(\\\\\\\\\\\\\\\"Comment\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"Edit as a comment\\\\\\\\\\\\\\\")}\\\\\\\\n    </ul>\\\\\\\\n  </div>\\\\\\\\n) : (\\\\\\\\n  <div></div>\\\\\\\\n);\\\\\\\\n\\\\\\\\nconst shareButton = props.isPreview ? (\\\\\\\\n  <div></div>\\\\\\\\n) : (\\\\\\\\n  <Link\\\\\\\\n    class=\\\\\\\\\\\\\\\"card-link text-dark\\\\\\\\\\\\\\\"\\\\\\\\n    to={href({\\\\\\\\n      widgetSrc: \\\\\\\\\\\\\\\"devhub.near/widget/app\\\\\\\\\\\\\\\",\\\\\\\\n      params: { page: \\\\\\\\\\\\\\\"post\\\\\\\\\\\\\\\", id: postId },\\\\\\\\n    })}\\\\\\\\n    role=\\\\\\\\\\\\\\\"button\\\\\\\\\\\\\\\"\\\\\\\\n    target=\\\\\\\\\\\\\\\"_blank\\\\\\\\\\\\\\\"\\\\\\\\n    title=\\\\\\\\\\\\\\\"Open in new tab\\\\\\\\\\\\\\\"\\\\\\\\n  >\\\\\\\\n    <div class=\\\\\\\\\\\\\\\"bi bi-share\\\\\\\\\\\\\\\"></div>\\\\\\\\n  </Link>\\\\\\\\n);\\\\\\\\n\\\\\\\\nconst ProfileCardContainer = styled.div`\\\\\\\\n  @media screen and (max-width: 960px) {\\\\\\\\n    width: 100%;\\\\\\\\n  }\\\\\\\\n`;\\\\\\\\n\\\\\\\\n// card-header\\\\\\\\nconst header = (\\\\\\\\n  <div key=\\\\\\\\\\\\\\\"header\\\\\\\\\\\\\\\">\\\\\\\\n    <small class=\\\\\\\\\\\\\\\"text-muted\\\\\\\\\\\\\\\">\\\\\\\\n      <div class=\\\\\\\\\\\\\\\"row justify-content-between\\\\\\\\\\\\\\\">\\\\\\\\n        <div class=\\\\\\\\\\\\\\\"d-flex align-items-center flex-wrap\\\\\\\\\\\\\\\">\\\\\\\\n          <ProfileCardContainer>\\\\\\\\n            <Widget\\\\\\\\n              src={\\\\\\\\n                \\\\\\\\\\\\\\\"devhub.near/widget/devhub.components.molecule.ProfileCard\\\\\\\\\\\\\\\"\\\\\\\\n              }\\\\\\\\n              props={{\\\\\\\\n                accountId: post.author_id,\\\\\\\\n                nearDevGovGigsWidgetsAccountId: \\\\\\\\\\\\\\\"devhub.near\\\\\\\\\\\\\\\",\\\\\\\\n              }}\\\\\\\\n            />\\\\\\\\n          </ProfileCardContainer>\\\\\\\\n          <div class=\\\\\\\\\\\\\\\"d-flex ms-auto\\\\\\\\\\\\\\\">\\\\\\\\n            {editControl}\\\\\\\\n            {timestamp}\\\\\\\\n            <Widget\\\\\\\\n              src={\\\\\\\\\\\\\\\"devhub.near/widget/devhub.entity.post.History\\\\\\\\\\\\\\\"}\\\\\\\\n              props={{\\\\\\\\n                post,\\\\\\\\n                timestamp: currentTimestamp,\\\\\\\\n              }}\\\\\\\\n            />\\\\\\\\n            {shareButton}\\\\\\\\n          </div>\\\\\\\\n        </div>\\\\\\\\n      </div>\\\\\\\\n    </small>\\\\\\\\n  </div>\\\\\\\\n);\\\\\\\\n\\\\\\\\n// const emptyIcons = {\\\\\\\\n//   Idea: \\\\\\\\\\\\\\\"bi-lightbulb\\\\\\\\\\\\\\\",\\\\\\\\n//   Comment: \\\\\\\\\\\\\\\"bi-chat\\\\\\\\\\\\\\\",\\\\\\\\n//   Solution: \\\\\\\\\\\\\\\"bi-rocket\\\\\\\\\\\\\\\",\\\\\\\\n//   Attestation: \\\\\\\\\\\\\\\"bi-check-circle\\\\\\\\\\\\\\\",\\\\\\\\n//   Sponsorship: \\\\\\\\\\\\\\\"bi-cash-coin\\\\\\\\\\\\\\\",\\\\\\\\n//   Github: \\\\\\\\\\\\\\\"bi-github\\\\\\\\\\\\\\\",\\\\\\\\n//   Like: \\\\\\\\\\\\\\\"bi-heart\\\\\\\\\\\\\\\",\\\\\\\\n//   Reply: \\\\\\\\\\\\\\\"bi-reply\\\\\\\\\\\\\\\",\\\\\\\\n// };\\\\\\\\n\\\\\\\\nconst emptyIcons = {\\\\\\\\n  Idea: \\\\\\\\\\\\\\\"\\\\\\\\u{1f4a1}\\\\\\\\\\\\\\\",\\\\\\\\n  Comment: \\\\\\\\\\\\\\\"bi-chat\\\\\\\\\\\\\\\",\\\\\\\\n  Solution: \\\\\\\\\\\\\\\"\\\\\\\\u{1f680}\\\\\\\\\\\\\\\",\\\\\\\\n  Attestation: \\\\\\\\\\\\\\\"\\\\\\\\u{2705}\\\\\\\\\\\\\\\",\\\\\\\\n  Sponsorship: \\\\\\\\\\\\\\\"\\\\\\\\u{1fa99}\\\\\\\\\\\\\\\",\\\\\\\\n  Github: \\\\\\\\\\\\\\\"bi-github\\\\\\\\\\\\\\\",\\\\\\\\n  Like: \\\\\\\\\\\\\\\"bi-heart\\\\\\\\\\\\\\\",\\\\\\\\n  Reply: \\\\\\\\\\\\\\\"bi-reply\\\\\\\\\\\\\\\",\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst fillIcons = {\\\\\\\\n  Idea: \\\\\\\\\\\\\\\"\\\\\\\\u{1f4a1}\\\\\\\\\\\\\\\",\\\\\\\\n  Comment: \\\\\\\\\\\\\\\"bi-chat-fill\\\\\\\\\\\\\\\",\\\\\\\\n  Solution: \\\\\\\\\\\\\\\"\\\\\\\\u{1f680}\\\\\\\\\\\\\\\",\\\\\\\\n  Attestation: \\\\\\\\\\\\\\\"\\\\\\\\u{2705}\\\\\\\\\\\\\\\",\\\\\\\\n  Sponsorship: \\\\\\\\\\\\\\\"\\\\\\\\u{1fa99}\\\\\\\\\\\\\\\",\\\\\\\\n  Github: \\\\\\\\\\\\\\\"bi-github\\\\\\\\\\\\\\\",\\\\\\\\n  Like: \\\\\\\\\\\\\\\"bi-heart-fill\\\\\\\\\\\\\\\",\\\\\\\\n  Reply: \\\\\\\\\\\\\\\"bi-reply-fill\\\\\\\\\\\\\\\",\\\\\\\\n};\\\\\\\\n\\\\\\\\n// Trigger saving this widget.\\\\\\\\n\\\\\\\\nconst borders = {\\\\\\\\n  Idea: \\\\\\\\\\\\\\\"border-light\\\\\\\\\\\\\\\",\\\\\\\\n  Comment: \\\\\\\\\\\\\\\"border-light\\\\\\\\\\\\\\\",\\\\\\\\n  Solution: \\\\\\\\\\\\\\\"border-light\\\\\\\\\\\\\\\",\\\\\\\\n  Attestation: \\\\\\\\\\\\\\\"border-light\\\\\\\\\\\\\\\",\\\\\\\\n  Sponsorship: \\\\\\\\\\\\\\\"border-light\\\\\\\\\\\\\\\",\\\\\\\\n  Github: \\\\\\\\\\\\\\\"border-light\\\\\\\\\\\\\\\",\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst containsLike = props.isPreview\\\\\\\\n  ? false\\\\\\\\n  : post.likes.find((l) => l.author_id == context.accountId);\\\\\\\\nconst likeBtnClass = containsLike ? fillIcons.Like : emptyIcons.Like;\\\\\\\\n// This must be outside onLike, because Near.view returns null at first, and when the view call finished, it returns true/false.\\\\\\\\n// If checking this inside onLike, it will give `null` and we cannot tell the result is true or false.\\\\\\\\nlet grantNotify = Near.view(\\\\\\\\\\\\\\\"social.near\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"is_write_permission_granted\\\\\\\\\\\\\\\", {\\\\\\\\n  predecessor_id: \\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\",\\\\\\\\n  key: context.accountId + \\\\\\\\\\\\\\\"/index/notify\\\\\\\\\\\\\\\",\\\\\\\\n});\\\\\\\\nif (grantNotify === null) {\\\\\\\\n  return;\\\\\\\\n}\\\\\\\\nconst onLike = () => {\\\\\\\\n  if (!context.accountId) {\\\\\\\\n    return;\\\\\\\\n  }\\\\\\\\n  let likeTxn = [\\\\\\\\n    {\\\\\\\\n      contractName: \\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\",\\\\\\\\n      methodName: \\\\\\\\\\\\\\\"add_like\\\\\\\\\\\\\\\",\\\\\\\\n      args: {\\\\\\\\n        post_id: postId,\\\\\\\\n      },\\\\\\\\n      deposit: Big(10).pow(21).mul(2),\\\\\\\\n      gas: Big(10).pow(12).mul(100),\\\\\\\\n    },\\\\\\\\n  ];\\\\\\\\n\\\\\\\\n  if (grantNotify === false) {\\\\\\\\n    likeTxn.unshift({\\\\\\\\n      contractName: \\\\\\\\\\\\\\\"social.near\\\\\\\\\\\\\\\",\\\\\\\\n      methodName: \\\\\\\\\\\\\\\"grant_write_permission\\\\\\\\\\\\\\\",\\\\\\\\n      args: {\\\\\\\\n        predecessor_id: \\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\",\\\\\\\\n        keys: [context.accountId + \\\\\\\\\\\\\\\"/index/notify\\\\\\\\\\\\\\\"],\\\\\\\\n      },\\\\\\\\n      deposit: Big(10).pow(23),\\\\\\\\n      gas: Big(10).pow(12).mul(30),\\\\\\\\n    });\\\\\\\\n  }\\\\\\\\n  Near.call(likeTxn);\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst btnCreatorWidget = (postType, icon, name, desc) => {\\\\\\\\n  return (\\\\\\\\n    <li class=\\\\\\\\\\\\\\\"py-1\\\\\\\\\\\\\\\">\\\\\\\\n      <a\\\\\\\\n        class=\\\\\\\\\\\\\\\"dropdown-item text-decoration-none d-flex align-items-center lh-sm\\\\\\\\\\\\\\\"\\\\\\\\n        style={{ color: \\\\\\\\\\\\\\\"rgb(55,109,137)\\\\\\\\\\\\\\\" }}\\\\\\\\n        role=\\\\\\\\\\\\\\\"button\\\\\\\\\\\\\\\"\\\\\\\\n        onClick={() =>\\\\\\\\n          State.update({ postType, editorType: \\\\\\\\\\\\\\\"CREATE\\\\\\\\\\\\\\\", showEditor: true })\\\\\\\\n        }\\\\\\\\n      >\\\\\\\\n        <i class={`bi ${icon}`} style={{ fontSize: \\\\\\\\\\\\\\\"1.5rem\\\\\\\\\\\\\\\" }}>\\\\\\\\n          {\\\\\\\\\\\\\\\" \\\\\\\\\\\\\\\"}\\\\\\\\n        </i>\\\\\\\\n        <div class=\\\\\\\\\\\\\\\"ps-2 text-wrap\\\\\\\\\\\\\\\" style={{ width: \\\\\\\\\\\\\\\"18rem\\\\\\\\\\\\\\\" }}>\\\\\\\\n          <div>{name}</div>\\\\\\\\n          <small class=\\\\\\\\\\\\\\\"fw-light text-secondary\\\\\\\\\\\\\\\">{desc}</small>\\\\\\\\n        </div>\\\\\\\\n      </a>\\\\\\\\n    </li>\\\\\\\\n  );\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst FooterButtonsContianer = styled.div`\\\\\\\\n  width: 66.66666667%;\\\\\\\\n\\\\\\\\n  @media screen and (max-width: 960px) {\\\\\\\\n    width: 100%;\\\\\\\\n  }\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst buttonsFooter = props.isPreview ? null : (\\\\\\\\n  <div class=\\\\\\\\\\\\\\\"row\\\\\\\\\\\\\\\" key=\\\\\\\\\\\\\\\"buttons-footer\\\\\\\\\\\\\\\">\\\\\\\\n    <FooterButtonsContianer>\\\\\\\\n      <div class=\\\\\\\\\\\\\\\"btn-group\\\\\\\\\\\\\\\" role=\\\\\\\\\\\\\\\"group\\\\\\\\\\\\\\\" aria-label=\\\\\\\\\\\\\\\"Basic outlined example\\\\\\\\\\\\\\\">\\\\\\\\n        <ButtonWithHover\\\\\\\\n          type=\\\\\\\\\\\\\\\"button\\\\\\\\\\\\\\\"\\\\\\\\n          class=\\\\\\\\\\\\\\\"btn d-flex align-items-center\\\\\\\\\\\\\\\"\\\\\\\\n          style={{ border: \\\\\\\\\\\\\\\"0px\\\\\\\\\\\\\\\" }}\\\\\\\\n          onClick={onLike}\\\\\\\\n        >\\\\\\\\n          <i class={`bi ${likeBtnClass}`}> </i>\\\\\\\\n          {post.likes.length == 0 ? (\\\\\\\\n            \\\\\\\\\\\\\\\"Like\\\\\\\\\\\\\\\"\\\\\\\\n          ) : (\\\\\\\\n            <Widget\\\\\\\\n              // TODO: LEGACY.\\\\\\\\n              src=\\\\\\\\\\\\\\\"devgovgigs.near/widget/gigs-board.components.layout.LikeButton.Faces\\\\\\\\\\\\\\\"\\\\\\\\n              props={{\\\\\\\\n                likesByUsers: Object.fromEntries(\\\\\\\\n                  post.likes.map(({ author_id }) => [author_id, \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\"])\\\\\\\\n                ),\\\\\\\\n              }}\\\\\\\\n            />\\\\\\\\n          )}\\\\\\\\n        </ButtonWithHover>\\\\\\\\n        <div class=\\\\\\\\\\\\\\\"btn-group\\\\\\\\\\\\\\\" role=\\\\\\\\\\\\\\\"group\\\\\\\\\\\\\\\">\\\\\\\\n          <ButtonWithHover\\\\\\\\n            type=\\\\\\\\\\\\\\\"button\\\\\\\\\\\\\\\"\\\\\\\\n            class=\\\\\\\\\\\\\\\"btn\\\\\\\\\\\\\\\"\\\\\\\\n            style={{ border: \\\\\\\\\\\\\\\"0px\\\\\\\\\\\\\\\" }}\\\\\\\\n            data-bs-toggle=\\\\\\\\\\\\\\\"dropdown\\\\\\\\\\\\\\\"\\\\\\\\n            aria-expanded=\\\\\\\\\\\\\\\"false\\\\\\\\\\\\\\\"\\\\\\\\n          >\\\\\\\\n            \\\\\\\\u{21aa} Reply\\\\\\\\n          </ButtonWithHover>\\\\\\\\n          <ul class=\\\\\\\\\\\\\\\"dropdown-menu\\\\\\\\\\\\\\\">\\\\\\\\n            {btnCreatorWidget(\\\\\\\\n              \\\\\\\\\\\\\\\"Idea\\\\\\\\\\\\\\\",\\\\\\\\n              emptyIcons.Idea,\\\\\\\\n              \\\\\\\\\\\\\\\"Idea\\\\\\\\\\\\\\\",\\\\\\\\n              \\\\\\\\\\\\\\\"Get feedback from the community about a problem, opportunity, or need.\\\\\\\\\\\\\\\"\\\\\\\\n            )}\\\\\\\\n            {btnCreatorWidget(\\\\\\\\n              \\\\\\\\\\\\\\\"Solution\\\\\\\\\\\\\\\",\\\\\\\\n              emptyIcons.Solution,\\\\\\\\n              \\\\\\\\\\\\\\\"Solution\\\\\\\\\\\\\\\",\\\\\\\\n              \\\\\\\\\\\\\\\"Provide a specific proposal or implementation to an idea, optionally requesting funding.\\\\\\\\\\\\\\\"\\\\\\\\n            )}\\\\\\\\n            {btnCreatorWidget(\\\\\\\\n              \\\\\\\\\\\\\\\"Attestation\\\\\\\\\\\\\\\",\\\\\\\\n              emptyIcons.Attestation,\\\\\\\\n              \\\\\\\\\\\\\\\"Attestation\\\\\\\\\\\\\\\",\\\\\\\\n              \\\\\\\\\\\\\\\"Formally review or validate a solution as a recognized expert.\\\\\\\\\\\\\\\"\\\\\\\\n            )}\\\\\\\\n            {btnCreatorWidget(\\\\\\\\n              \\\\\\\\\\\\\\\"Sponsorship\\\\\\\\\\\\\\\",\\\\\\\\n              emptyIcons.Sponsorship,\\\\\\\\n              \\\\\\\\\\\\\\\"Sponsorship\\\\\\\\\\\\\\\",\\\\\\\\n              \\\\\\\\\\\\\\\"Offer to fund projects, events, or proposals that match your needs.\\\\\\\\\\\\\\\"\\\\\\\\n            )}\\\\\\\\n            <li>\\\\\\\\n              <hr class=\\\\\\\\\\\\\\\"dropdown-divider\\\\\\\\\\\\\\\" />\\\\\\\\n            </li>\\\\\\\\n            {btnCreatorWidget(\\\\\\\\n              \\\\\\\\\\\\\\\"Comment\\\\\\\\\\\\\\\",\\\\\\\\n              emptyIcons.Comment,\\\\\\\\n              \\\\\\\\\\\\\\\"Comment\\\\\\\\\\\\\\\",\\\\\\\\n              \\\\\\\\\\\\\\\"Ask a question, provide information, or share a resource that is relevant to the thread.\\\\\\\\\\\\\\\"\\\\\\\\n            )}\\\\\\\\n          </ul>\\\\\\\\n        </div>\\\\\\\\n        <ButtonWithHover\\\\\\\\n          type=\\\\\\\\\\\\\\\"button\\\\\\\\\\\\\\\"\\\\\\\\n          class=\\\\\\\\\\\\\\\"btn\\\\\\\\\\\\\\\"\\\\\\\\n          style={{ border: \\\\\\\\\\\\\\\"0px\\\\\\\\\\\\\\\" }}\\\\\\\\n          data-bs-toggle=\\\\\\\\\\\\\\\"collapse\\\\\\\\\\\\\\\"\\\\\\\\n          href={`#collapseChildPosts${postId}`}\\\\\\\\n          aria-expanded={defaultExpanded}\\\\\\\\n          aria-controls={`collapseChildPosts${postId}`}\\\\\\\\n        >\\\\\\\\n          <i class=\\\\\\\\\\\\\\\"bi bi-chevron-down\\\\\\\\\\\\\\\"> </i>{\\\\\\\\\\\\\\\" \\\\\\\\\\\\\\\"}\\\\\\\\n          {`Expand Replies (${childPostIds.length})`}\\\\\\\\n        </ButtonWithHover>\\\\\\\\n\\\\\\\\n        {isUnderPost || !parentId ? (\\\\\\\\n          <div key=\\\\\\\\\\\\\\\"link-to-parent\\\\\\\\\\\\\\\"></div>\\\\\\\\n        ) : (\\\\\\\\n          <Link\\\\\\\\n            to={href({\\\\\\\\n              widgetSrc: \\\\\\\\\\\\\\\"devhub.near/widget/app\\\\\\\\\\\\\\\",\\\\\\\\n              params: { page: \\\\\\\\\\\\\\\"post\\\\\\\\\\\\\\\", id: parentId },\\\\\\\\n            })}\\\\\\\\n          >\\\\\\\\n            <ButtonWithHover\\\\\\\\n              type=\\\\\\\\\\\\\\\"button\\\\\\\\\\\\\\\"\\\\\\\\n              style={{ border: \\\\\\\\\\\\\\\"0px\\\\\\\\\\\\\\\" }}\\\\\\\\n              className=\\\\\\\\\\\\\\\"btn\\\\\\\\\\\\\\\"\\\\\\\\n              key=\\\\\\\\\\\\\\\"link-to-parent\\\\\\\\\\\\\\\"\\\\\\\\n            >\\\\\\\\n              <i class=\\\\\\\\\\\\\\\"bi bi-arrow-90deg-up\\\\\\\\\\\\\\\"></i>Go to parent\\\\\\\\n            </ButtonWithHover>\\\\\\\\n          </Link>\\\\\\\\n        )}\\\\\\\\n      </div>\\\\\\\\n    </FooterButtonsContianer>\\\\\\\\n  </div>\\\\\\\\n);\\\\\\\\n\\\\\\\\nconst CreatorWidget = (postType) => {\\\\\\\\n  return (\\\\\\\\n    <div\\\\\\\\n      class={`collapse ${\\\\\\\\n        draftState?.parent_post_id == postId && draftState?.postType == postType\\\\\\\\n          ? \\\\\\\\\\\\\\\"show\\\\\\\\\\\\\\\"\\\\\\\\n          : \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\"\\\\\\\\n      }`}\\\\\\\\n      id={`collapse${postType}Creator${postId}`}\\\\\\\\n      data-bs-parent={`#accordion${postId}`}\\\\\\\\n    >\\\\\\\\n      <Widget\\\\\\\\n        src={\\\\\\\\\\\\\\\"devhub.near/widget/devhub.entity.post.PostEditor\\\\\\\\\\\\\\\"}\\\\\\\\n        props={{\\\\\\\\n          postType,\\\\\\\\n          onDraftStateChange: props.onDraftStateChange,\\\\\\\\n          draftState:\\\\\\\\n            draftState?.parent_post_id == postId ? draftState : undefined,\\\\\\\\n          parentId: postId,\\\\\\\\n          mode: \\\\\\\\\\\\\\\"Create\\\\\\\\\\\\\\\",\\\\\\\\n        }}\\\\\\\\n      />\\\\\\\\n    </div>\\\\\\\\n  );\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst tokenMapping = {\\\\\\\\n  NEAR: \\\\\\\\\\\\\\\"NEAR\\\\\\\\\\\\\\\",\\\\\\\\n  USDT: {\\\\\\\\n    NEP141: {\\\\\\\\n      address: \\\\\\\\\\\\\\\"usdt.tether-token.near\\\\\\\\\\\\\\\",\\\\\\\\n    },\\\\\\\\n  },\\\\\\\\n  USDC: {\\\\\\\\n    NEP141: {\\\\\\\\n      address:\\\\\\\\n        \\\\\\\\\\\\\\\"17208628f84f5d6ad33f0da3bbbeb27ffcb398eac501a31bd6ad2011e36133a1\\\\\\\\\\\\\\\",\\\\\\\\n    },\\\\\\\\n  },\\\\\\\\n  // Add more tokens here as needed\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst reverseTokenMapping = Object.keys(tokenMapping).reduce(\\\\\\\\n  (reverseMap, key) => {\\\\\\\\n    const value = tokenMapping[key];\\\\\\\\n    if (typeof value === \\\\\\\\\\\\\\\"object\\\\\\\\\\\\\\\") {\\\\\\\\n      reverseMap[JSON.stringify(value)] = key;\\\\\\\\n    }\\\\\\\\n    return reverseMap;\\\\\\\\n  },\\\\\\\\n  {}\\\\\\\\n);\\\\\\\\n\\\\\\\\nfunction tokenResolver(token) {\\\\\\\\n  if (typeof token === \\\\\\\\\\\\\\\"string\\\\\\\\\\\\\\\") {\\\\\\\\n    return token;\\\\\\\\n  } else if (typeof token === \\\\\\\\\\\\\\\"object\\\\\\\\\\\\\\\") {\\\\\\\\n    const tokenString = reverseTokenMapping[JSON.stringify(token)];\\\\\\\\n    return tokenString || null;\\\\\\\\n  } else {\\\\\\\\n    return null; // Invalid input\\\\\\\\n  }\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst EditorWidget = (postType) => {\\\\\\\\n  return (\\\\\\\\n    <div\\\\\\\\n      class={`collapse ${\\\\\\\\n        draftState?.edit_post_id == postId && draftState?.postType == postType\\\\\\\\n          ? \\\\\\\\\\\\\\\"show\\\\\\\\\\\\\\\"\\\\\\\\n          : \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\"\\\\\\\\n      }`}\\\\\\\\n      id={`collapse${postType}Editor${postId}`}\\\\\\\\n      data-bs-parent={`#accordion${postId}`}\\\\\\\\n    >\\\\\\\\n      <Widget\\\\\\\\n        src={\\\\\\\\\\\\\\\"devhub.near/widget/devhub.entity.post.PostEditor\\\\\\\\\\\\\\\"}\\\\\\\\n        props={{\\\\\\\\n          postType,\\\\\\\\n          postId,\\\\\\\\n          mode: \\\\\\\\\\\\\\\"Edit\\\\\\\\\\\\\\\",\\\\\\\\n          author_id: post.author_id,\\\\\\\\n          labels: post.snapshot.labels,\\\\\\\\n          name: post.snapshot.name,\\\\\\\\n          description: post.snapshot.description,\\\\\\\\n          amount: post.snapshot.amount,\\\\\\\\n          token: tokenResolver(post.snapshot.sponsorship_token),\\\\\\\\n          supervisor: post.snapshot.supervisor,\\\\\\\\n          githubLink: post.snapshot.github_link,\\\\\\\\n          onDraftStateChange: props.onDraftStateChange,\\\\\\\\n          draftState:\\\\\\\\n            draftState?.edit_post_id == postId ? draftState : undefined,\\\\\\\\n        }}\\\\\\\\n      />\\\\\\\\n    </div>\\\\\\\\n  );\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst isDraft =\\\\\\\\n  (draftState?.parent_post_id === postId &&\\\\\\\\n    draftState?.postType === state.postType) ||\\\\\\\\n  (draftState?.edit_post_id === postId &&\\\\\\\\n    draftState?.postType === state.postType);\\\\\\\\n\\\\\\\\nfunction Editor() {\\\\\\\\n  return (\\\\\\\\n    <div class=\\\\\\\\\\\\\\\"row\\\\\\\\\\\\\\\" id={`accordion${postId}`} key=\\\\\\\\\\\\\\\"editors-footer\\\\\\\\\\\\\\\">\\\\\\\\n      <div\\\\\\\\n        key={`${state.postType}${state.editorType}${postId}`}\\\\\\\\n        className={\\\\\\\\\\\\\\\"w-100\\\\\\\\\\\\\\\"}\\\\\\\\n      >\\\\\\\\n        {state.editorType === \\\\\\\\\\\\\\\"CREATE\\\\\\\\\\\\\\\" ? (\\\\\\\\n          <>\\\\\\\\n            <Widget\\\\\\\\n              src={\\\\\\\\\\\\\\\"devhub.near/widget/devhub.entity.post.PostEditor\\\\\\\\\\\\\\\"}\\\\\\\\n              props={{\\\\\\\\n                postType: state.postType,\\\\\\\\n                onDraftStateChange: props.onDraftStateChange,\\\\\\\\n                draftState:\\\\\\\\n                  draftState?.parent_post_id == postId ? draftState : undefined,\\\\\\\\n                parentId: postId,\\\\\\\\n                mode: \\\\\\\\\\\\\\\"Create\\\\\\\\\\\\\\\",\\\\\\\\n              }}\\\\\\\\n            />\\\\\\\\n          </>\\\\\\\\n        ) : (\\\\\\\\n          <>\\\\\\\\n            <Widget\\\\\\\\n              src={\\\\\\\\\\\\\\\"devhub.near/widget/devhub.entity.post.PostEditor\\\\\\\\\\\\\\\"}\\\\\\\\n              props={{\\\\\\\\n                postType: state.postType,\\\\\\\\n                postId,\\\\\\\\n                mode: \\\\\\\\\\\\\\\"Edit\\\\\\\\\\\\\\\",\\\\\\\\n                author_id: post.author_id,\\\\\\\\n                labels: post.snapshot.labels,\\\\\\\\n                name: post.snapshot.name,\\\\\\\\n                description: post.snapshot.description,\\\\\\\\n                amount: post.snapshot.amount,\\\\\\\\n                token: tokenResolver(post.snapshot.sponsorship_token),\\\\\\\\n                supervisor: post.snapshot.supervisor,\\\\\\\\n                githubLink: post.snapshot.github_link,\\\\\\\\n                onDraftStateChange: props.onDraftStateChange,\\\\\\\\n                draftState:\\\\\\\\n                  draftState?.edit_post_id == postId ? draftState : undefined,\\\\\\\\n              }}\\\\\\\\n            />\\\\\\\\n          </>\\\\\\\\n        )}\\\\\\\\n      </div>\\\\\\\\n    </div>\\\\\\\\n  );\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst renamedPostType =\\\\\\\\n  snapshot.post_type == \\\\\\\\\\\\\\\"Submission\\\\\\\\\\\\\\\" ? \\\\\\\\\\\\\\\"Solution\\\\\\\\\\\\\\\" : snapshot.post_type;\\\\\\\\n\\\\\\\\nconst tags = post.snapshot.labels ? (\\\\\\\\n  <div\\\\\\\\n    class=\\\\\\\\\\\\\\\"card-title d-flex flex-wrap align-items-center\\\\\\\\\\\\\\\"\\\\\\\\n    style={{ margin: \\\\\\\\\\\\\\\"20px 0\\\\\\\\\\\\\\\" }}\\\\\\\\n    key=\\\\\\\\\\\\\\\"post-labels\\\\\\\\\\\\\\\"\\\\\\\\n  >\\\\\\\\n    {post.snapshot.labels.map((tag, idx) => (\\\\\\\\n      <div className=\\\\\\\\\\\\\\\"d-flex align-items-center my-3 me-3\\\\\\\\\\\\\\\">\\\\\\\\n        <Link\\\\\\\\n          to={href({\\\\\\\\n            widgetSrc: \\\\\\\\\\\\\\\"devhub.near/widget/app\\\\\\\\\\\\\\\",\\\\\\\\n            params: { page: \\\\\\\\\\\\\\\"feed\\\\\\\\\\\\\\\", tag: tag },\\\\\\\\n          })}\\\\\\\\n        >\\\\\\\\n          <div\\\\\\\\n            className=\\\\\\\\\\\\\\\"d-flex gap-3 align-items-center\\\\\\\\\\\\\\\"\\\\\\\\n            style={{ cursor: \\\\\\\\\\\\\\\"pointer\\\\\\\\\\\\\\\", textDecoration: \\\\\\\\\\\\\\\"none\\\\\\\\\\\\\\\" }}\\\\\\\\n          >\\\\\\\\n            <Widget\\\\\\\\n              src={\\\\\\\\\\\\\\\"devhub.near/widget/devhub.components.atom.Tag\\\\\\\\\\\\\\\"}\\\\\\\\n              props={{\\\\\\\\n                tag,\\\\\\\\n                black: true,\\\\\\\\n              }}\\\\\\\\n            />\\\\\\\\n          </div>\\\\\\\\n        </Link>\\\\\\\\n        {idx !== post.snapshot.labels.length - 1 && (\\\\\\\\n          <span className=\\\\\\\\\\\\\\\"ms-3\\\\\\\\\\\\\\\">\\\\\\\\u{2022}</span>\\\\\\\\n        )}\\\\\\\\n      </div>\\\\\\\\n    ))}\\\\\\\\n  </div>\\\\\\\\n) : (\\\\\\\\n  <div key=\\\\\\\\\\\\\\\"post-labels\\\\\\\\\\\\\\\"></div>\\\\\\\\n);\\\\\\\\n\\\\\\\\nconst Title = styled.h5`\\\\\\\\n  margin: 1rem 0;\\\\\\\\n\\\\\\\\n  color: #151515;\\\\\\\\n  font-size: 1.15rem;\\\\\\\\n  font-style: normal;\\\\\\\\n  font-weight: 700;\\\\\\\\n  line-height: 1.625rem; /* 55.556% */\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst postTitle =\\\\\\\\n  snapshot.post_type == \\\\\\\\\\\\\\\"Comment\\\\\\\\\\\\\\\" ? (\\\\\\\\n    <div key=\\\\\\\\\\\\\\\"post-title\\\\\\\\\\\\\\\"></div>\\\\\\\\n  ) : (\\\\\\\\n    <Title key=\\\\\\\\\\\\\\\"post-title\\\\\\\\\\\\\\\">\\\\\\\\n      {emptyIcons[snapshot.post_type]} {renamedPostType}: {snapshot.name}\\\\\\\\n    </Title>\\\\\\\\n  );\\\\\\\\n\\\\\\\\nconst postExtra =\\\\\\\\n  snapshot.post_type == \\\\\\\\\\\\\\\"Sponsorship\\\\\\\\\\\\\\\" ? (\\\\\\\\n    <div key=\\\\\\\\\\\\\\\"post-extra\\\\\\\\\\\\\\\">\\\\\\\\n      <h6 class=\\\\\\\\\\\\\\\"card-subtitle mb-2 text-muted\\\\\\\\\\\\\\\">\\\\\\\\n        Maximum amount: {snapshot.amount}{\\\\\\\\\\\\\\\" \\\\\\\\\\\\\\\"}\\\\\\\\n        {tokenResolver(snapshot.sponsorship_token)}\\\\\\\\n      </h6>\\\\\\\\n      <h6 class=\\\\\\\\\\\\\\\"card-subtitle mb-2 text-muted\\\\\\\\\\\\\\\">\\\\\\\\n        Supervisor:{\\\\\\\\\\\\\\\" \\\\\\\\\\\\\\\"}\\\\\\\\n        <Widget\\\\\\\\n          src={\\\\\\\\\\\\\\\"neardevgov.near/widget/ProfileLine\\\\\\\\\\\\\\\"}\\\\\\\\n          props={{ accountId: snapshot.supervisor }}\\\\\\\\n        />\\\\\\\\n      </h6>\\\\\\\\n    </div>\\\\\\\\n  ) : (\\\\\\\\n    <div></div>\\\\\\\\n  );\\\\\\\\n\\\\\\\\nconst childPostHasDraft = childPostIds.find(\\\\\\\\n  (childId) =>\\\\\\\\n    childId == draftState?.edit_post_id || childId == draftState?.parent_post_id\\\\\\\\n);\\\\\\\\nif (\\\\\\\\n  (childPostHasDraft || state.childrenOfChildPostsHasDraft) &&\\\\\\\\n  props.expandParent\\\\\\\\n) {\\\\\\\\n  props.expandParent();\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst postsList =\\\\\\\\n  props.isPreview || childPostIds.length == 0 ? (\\\\\\\\n    <div key=\\\\\\\\\\\\\\\"posts-list\\\\\\\\\\\\\\\"></div>\\\\\\\\n  ) : (\\\\\\\\n    <div class=\\\\\\\\\\\\\\\"row\\\\\\\\\\\\\\\" key=\\\\\\\\\\\\\\\"posts-list\\\\\\\\\\\\\\\">\\\\\\\\n      <div\\\\\\\\n        class={`collapse mt-3 ${\\\\\\\\n          defaultExpanded ||\\\\\\\\n          childPostHasDraft ||\\\\\\\\n          state.childrenOfChildPostsHasDraft\\\\\\\\n            ? \\\\\\\\\\\\\\\"show\\\\\\\\\\\\\\\"\\\\\\\\n            : \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\"\\\\\\\\n        }`}\\\\\\\\n        id={`collapseChildPosts${postId}`}\\\\\\\\n      >\\\\\\\\n        {childPostIds.map((childId) => (\\\\\\\\n          <Widget\\\\\\\\n            src=\\\\\\\\\\\\\\\"devhub.near/widget/devhub.entity.post.Post\\\\\\\\\\\\\\\"\\\\\\\\n            props={{\\\\\\\\n              id: childId,\\\\\\\\n              isUnderPost: true,\\\\\\\\n              onDraftStateChange: props.onDraftStateChange,\\\\\\\\n              draftState,\\\\\\\\n              expandParent: () =>\\\\\\\\n                State.update({ childrenOfChildPostsHasDraft: true }),\\\\\\\\n              referral: `subpost${childId}of${postId}`,\\\\\\\\n            }}\\\\\\\\n          />\\\\\\\\n        ))}\\\\\\\\n      </div>\\\\\\\\n    </div>\\\\\\\\n  );\\\\\\\\n\\\\\\\\nconst LimitedMarkdown = styled.div`\\\\\\\\n  max-height: 20em;\\\\\\\\n`;\\\\\\\\n\\\\\\\\n// Determine if located in the post page.\\\\\\\\nconst isInList = props.isInList;\\\\\\\\nconst contentArray = snapshot.description.split(\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\");\\\\\\\\nconst needClamp = isInList && contentArray.length > 5;\\\\\\\\n\\\\\\\\ninitState({\\\\\\\\n  clamp: needClamp,\\\\\\\\n});\\\\\\\\n\\\\\\\\nconst clampedContent = needClamp\\\\\\\\n  ? contentArray.slice(0, 3).join(\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\")\\\\\\\\n  : snapshot.description;\\\\\\\\n\\\\\\\\n// Should make sure the posts under the currently top viewed post are limited in size.\\\\\\\\nconst descriptionArea = isUnderPost ? (\\\\\\\\n  <LimitedMarkdown className=\\\\\\\\\\\\\\\"overflow-auto\\\\\\\\\\\\\\\" key=\\\\\\\\\\\\\\\"description-area\\\\\\\\\\\\\\\">\\\\\\\\n    {/* {widget(\\\\\\\\\\\\\\\"components.molecule.markdown-viewer\\\\\\\\\\\\\\\", {\\\\\\\\n      text: snapshot.description,\\\\\\\\n    })} */}\\\\\\\\n    <Widget\\\\\\\\n      src={\\\\\\\\\\\\\\\"devhub.near/widget/devhub.components.molecule.MarkdownViewer\\\\\\\\\\\\\\\"}\\\\\\\\n      props={{\\\\\\\\n        text: snapshot.description,\\\\\\\\n      }}\\\\\\\\n    />\\\\\\\\n  </LimitedMarkdown>\\\\\\\\n) : (\\\\\\\\n  <div className=\\\\\\\\\\\\\\\"w-100 overflow-auto\\\\\\\\\\\\\\\">\\\\\\\\n    <div class={state.clamp ? \\\\\\\\\\\\\\\"clamp\\\\\\\\\\\\\\\" : \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\"}>\\\\\\\\n      {/* {widget(\\\\\\\\\\\\\\\"components.molecule.markdown-viewer\\\\\\\\\\\\\\\", {\\\\\\\\n        text: state.clamp ? clampedContent : snapshot.description,\\\\\\\\n      })} */}\\\\\\\\n      <Widget\\\\\\\\n        src={\\\\\\\\\\\\\\\"devhub.near/widget/devhub.components.molecule.MarkdownViewer\\\\\\\\\\\\\\\"}\\\\\\\\n        props={{\\\\\\\\n          text: state.clamp ? clampedContent : snapshot.description,\\\\\\\\n        }}\\\\\\\\n      />\\\\\\\\n    </div>\\\\\\\\n    {state.clamp ? (\\\\\\\\n      <div class=\\\\\\\\\\\\\\\"d-flex justify-content-start\\\\\\\\\\\\\\\">\\\\\\\\n        <a\\\\\\\\n          style={{ cursor: \\\\\\\\\\\\\\\"pointer\\\\\\\\\\\\\\\", color: \\\\\\\\\\\\\\\"#00ec97\\\\\\\\\\\\\\\" }}\\\\\\\\n          class=\\\\\\\\\\\\\\\"btn-link text-dark fw-bold text-decoration-none\\\\\\\\\\\\\\\"\\\\\\\\n          onClick={() => State.update({ clamp: false })}\\\\\\\\n        >\\\\\\\\n          See more\\\\\\\\n        </a>\\\\\\\\n      </div>\\\\\\\\n    ) : (\\\\\\\\n      <></>\\\\\\\\n    )}\\\\\\\\n  </div>\\\\\\\\n);\\\\\\\\n\\\\\\\\nconst timestampElement = (_snapshot) => {\\\\\\\\n  return (\\\\\\\\n    <Link\\\\\\\\n      class=\\\\\\\\\\\\\\\"text-muted\\\\\\\\\\\\\\\"\\\\\\\\n      href={href({\\\\\\\\n        widgetSrc: \\\\\\\\\\\\\\\"devhub.near/widget/app\\\\\\\\\\\\\\\",\\\\\\\\n        params: {\\\\\\\\n          page: \\\\\\\\\\\\\\\"post\\\\\\\\\\\\\\\",\\\\\\\\n          id: postId,\\\\\\\\n          timestamp: _snapshot.timestamp,\\\\\\\\n          compareTimestamp: null,\\\\\\\\n          referral,\\\\\\\\n        },\\\\\\\\n      })}\\\\\\\\n    >\\\\\\\\n      {readableDate(_snapshot.timestamp / 1000000).substring(4)}\\\\\\\\n\\\\\\\\n      <Widget\\\\\\\\n        src=\\\\\\\\\\\\\\\"mob.near/widget/ProfileImage\\\\\\\\\\\\\\\"\\\\\\\\n        props={{\\\\\\\\n          accountId: _snapshot.editor_id,\\\\\\\\n          style: {\\\\\\\\n            width: \\\\\\\\\\\\\\\"1.25em\\\\\\\\\\\\\\\",\\\\\\\\n            height: \\\\\\\\\\\\\\\"1.25em\\\\\\\\\\\\\\\",\\\\\\\\n          },\\\\\\\\n          imageStyle: {\\\\\\\\n            transform: \\\\\\\\\\\\\\\"translateY(-12.5%)\\\\\\\\\\\\\\\",\\\\\\\\n          },\\\\\\\\n        }}\\\\\\\\n      />\\\\\\\\n      {_snapshot.editor_id.substring(0, 8)}\\\\\\\\n    </Link>\\\\\\\\n  );\\\\\\\\n};\\\\\\\\n\\\\\\\\nfunction combineText(_snapshot) {\\\\\\\\n  return (\\\\\\\\n    \\\\\\\\\\\\\\\"## \\\\\\\\\\\\\\\" +\\\\\\\\n    _snapshot.post_type +\\\\\\\\n    \\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\" +\\\\\\\\n    _snapshot.name +\\\\\\\\n    \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\" +\\\\\\\\n    _snapshot.description\\\\\\\\n  );\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst CardContainer = styled.div`\\\\\\\\n  padding: 1.5rem 3rem !important;\\\\\\\\n  border-radius: 16px !important;\\\\\\\\n  border: 1px solid rgba(129, 129, 129, 0.3) !important;\\\\\\\\n  background: #fffefe !important;\\\\\\\\n\\\\\\\\n  @media screen and (max-width: 960px) {\\\\\\\\n    padding: 1rem !important;\\\\\\\\n  }\\\\\\\\n`;\\\\\\\\n\\\\\\\\nreturn (\\\\\\\\n  <CardContainer className={`card ${borders[snapshot.post_type]} attractable`}>\\\\\\\\n    {header}\\\\\\\\n    <div className=\\\\\\\\\\\\\\\"card-body\\\\\\\\\\\\\\\" style={{ padding: 0 }}>\\\\\\\\n      {searchKeywords}\\\\\\\\n      {compareSnapshot ? (\\\\\\\\n        <div\\\\\\\\n          class=\\\\\\\\\\\\\\\"border rounded\\\\\\\\\\\\\\\"\\\\\\\\n          style={{ marginTop: \\\\\\\\\\\\\\\"16px\\\\\\\\\\\\\\\", marginBottom: \\\\\\\\\\\\\\\"16px\\\\\\\\\\\\\\\" }}\\\\\\\\n        >\\\\\\\\n          <div class=\\\\\\\\\\\\\\\"d-flex justify-content-end\\\\\\\\\\\\\\\" style={{ fontSize: \\\\\\\\\\\\\\\"12px\\\\\\\\\\\\\\\" }}>\\\\\\\\n            <div class=\\\\\\\\\\\\\\\"d-flex w-50 justify-content-end mt-1 me-2\\\\\\\\\\\\\\\">\\\\\\\\n              {timestampElement(snapshot)}\\\\\\\\n              {snapshot !== compareSnapshot && (\\\\\\\\n                <>\\\\\\\\n                  <div class=\\\\\\\\\\\\\\\"mx-1 align-self-center\\\\\\\\\\\\\\\">\\\\\\\\n                    <i class=\\\\\\\\\\\\\\\"bi bi-file-earmark-diff\\\\\\\\\\\\\\\" />\\\\\\\\n                  </div>\\\\\\\\n                  {timestampElement(compareSnapshot)}\\\\\\\\n                </>\\\\\\\\n              )}\\\\\\\\n            </div>\\\\\\\\n          </div>\\\\\\\\n          <div className=\\\\\\\\\\\\\\\"w-100 overflow-auto\\\\\\\\\\\\\\\">\\\\\\\\n            <Widget\\\\\\\\n              src=\\\\\\\\\\\\\\\"markeljan.near/widget/MarkdownDiff\\\\\\\\\\\\\\\"\\\\\\\\n              props={{\\\\\\\\n                post: post,\\\\\\\\n                currentCode: combineText(\\\\\\\\n                  swapTimestamps ? compareSnapshot : snapshot\\\\\\\\n                ),\\\\\\\\n                prevCode: combineText(\\\\\\\\n                  swapTimestamps ? snapshot : compareSnapshot\\\\\\\\n                ),\\\\\\\\n                showLineNumber: true,\\\\\\\\n              }}\\\\\\\\n            />\\\\\\\\n          </div>\\\\\\\\n        </div>\\\\\\\\n      ) : (\\\\\\\\n        <>\\\\\\\\n          {postTitle}\\\\\\\\n          {postExtra}\\\\\\\\n          {descriptionArea}\\\\\\\\n        </>\\\\\\\\n      )}\\\\\\\\n      {tags}\\\\\\\\n      {buttonsFooter}\\\\\\\\n      {!props.isPreview && (isDraft || state.showEditor) && <Editor />}\\\\\\\\n      {postsList}\\\\\\\\n    </div>\\\\\\\\n  </CardContainer>\\\\\\\\n);\\\\\\\\n\"}, \"devhub.page.community.index\": {\"\": \"const Button = styled.button`\\\\\\\\n  height: 40px;\\\\\\\\n  font-size: 14px;\\\\\\\\n  border-color: #e3e3e0;\\\\\\\\n  background-color: #ffffff;\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst Banner = styled.div`\\\\\\\\n  max-width: 100%;\\\\\\\\n  min-height: 240px;\\\\\\\\n  height: 240px;\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst CenteredMessage = styled.div`\\\\\\\\n  display: flex;\\\\\\\\n  flex-direction: column;\\\\\\\\n  justify-content: center;\\\\\\\\n  align-items: center;\\\\\\\\n  width: 100%;\\\\\\\\n  height: ${(p) => p.height ?? \\\\\\\\\\\\\\\"100%\\\\\\\\\\\\\\\"};\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst NavUnderline = styled.ul`\\\\\\\\n  cursor: pointer;\\\\\\\\n  a {\\\\\\\\n    color: #151515;\\\\\\\\n    text-decoration: none;\\\\\\\\n  }\\\\\\\\n\\\\\\\\n  a.active {\\\\\\\\n    font-weight: bold;\\\\\\\\n    border-bottom: 4px solid #00ec97;\\\\\\\\n  }\\\\\\\\n  border-bottom: 1px solid #cccccc;\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst { tab, permissions, community, view } = props;\\\\\\\\n\\\\\\\\nconst { href } = VM.require(\\\\\\\\\\\\\\\"devhub.near/widget/core.lib.url\\\\\\\\\\\\\\\");\\\\\\\\n\\\\\\\\nif (!href) {\\\\\\\\n  return <></>;\\\\\\\\n}\\\\\\\\n\\\\\\\\nif (!tab) {\\\\\\\\n  tab = \\\\\\\\\\\\\\\"Activity\\\\\\\\\\\\\\\";\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst [isLinkCopied, setLinkCopied] = useState(false);\\\\\\\\n\\\\\\\\nconst tabs = [\\\\\\\\n  {\\\\\\\\n    title: \\\\\\\\\\\\\\\"Activity\\\\\\\\\\\\\\\",\\\\\\\\n    view: \\\\\\\\\\\\\\\"devhub.near/widget/devhub.entity.community.Activity\\\\\\\\\\\\\\\",\\\\\\\\n    params: {\\\\\\\\n      handle: community.handle,\\\\\\\\n    },\\\\\\\\n  },\\\\\\\\n  {\\\\\\\\n    title: \\\\\\\\\\\\\\\"Teams\\\\\\\\\\\\\\\",\\\\\\\\n    view: \\\\\\\\\\\\\\\"devhub.near/widget/devhub.entity.community.Teams\\\\\\\\\\\\\\\",\\\\\\\\n    params: {\\\\\\\\n      handle: community.handle,\\\\\\\\n    },\\\\\\\\n  },\\\\\\\\n];\\\\\\\\n\\\\\\\\n(community.addons || []).map((addon) => {\\\\\\\\n  addon.enabled &&\\\\\\\\n    tabs.push({\\\\\\\\n      title: addon.display_name,\\\\\\\\n      view: \\\\\\\\\\\\\\\"devhub.near/widget/devhub.page.addon\\\\\\\\\\\\\\\",\\\\\\\\n      params: { addon },\\\\\\\\n    });\\\\\\\\n});\\\\\\\\n\\\\\\\\nconst onShareClick = () =>\\\\\\\\n  clipboard\\\\\\\\n    .writeText(\\\\\\\\n      href({\\\\\\\\n        gateway: \\\\\\\\\\\\\\\"near.social\\\\\\\\\\\\\\\",\\\\\\\\n        widgetSrc: \\\\\\\\\\\\\\\"devhub.near/widget/app\\\\\\\\\\\\\\\",\\\\\\\\n        params: { page: \\\\\\\\\\\\\\\"community\\\\\\\\\\\\\\\", handle: community.handle },\\\\\\\\n      })\\\\\\\\n    )\\\\\\\\n    .then(setLinkCopied(true));\\\\\\\\n\\\\\\\\nlet currentTab = tabs.find((it) => it.title === tab);\\\\\\\\n\\\\\\\\nconst CommunityName = styled.span`\\\\\\\\n  color: #151515;\\\\\\\\n  font-size: 2.25rem;\\\\\\\\n  font-style: normal;\\\\\\\\n  font-weight: 700;\\\\\\\\n  line-height: 100%; /* 48px */\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst CommunityDetails = styled.span`\\\\\\\\n  color: #818181;\\\\\\\\n  font-size: 1rem;\\\\\\\\n  font-style: normal;\\\\\\\\n  font-weight: 400;\\\\\\\\n  line-height: 120%; /* 28.8px */\\\\\\\\n`;\\\\\\\\n\\\\\\\\nfunction trimHttps(url) {\\\\\\\\n  if (url.startsWith(\\\\\\\\\\\\\\\"https://\\\\\\\\\\\\\\\")) {\\\\\\\\n    return url.substring(8);\\\\\\\\n  }\\\\\\\\n  return url;\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst socialLinks = [\\\\\\\\n  ...((community.website_url?.length ?? 0) > 0\\\\\\\\n    ? [\\\\\\\\n        {\\\\\\\\n          href: `https://${trimHttps(community.website_url)}`,\\\\\\\\n          iconClass: \\\\\\\\\\\\\\\"bi bi-globe\\\\\\\\\\\\\\\",\\\\\\\\n          name: trimHttps(community.website_url),\\\\\\\\n        },\\\\\\\\n      ]\\\\\\\\n    : []),\\\\\\\\n\\\\\\\\n  ...((community.github_handle?.length ?? 0) > 0\\\\\\\\n    ? [\\\\\\\\n        {\\\\\\\\n          href: `https://github.com/${community.github_handle}`,\\\\\\\\n          iconClass: \\\\\\\\\\\\\\\"bi bi-github\\\\\\\\\\\\\\\",\\\\\\\\n          name: community.github_handle,\\\\\\\\n        },\\\\\\\\n      ]\\\\\\\\n    : []),\\\\\\\\n\\\\\\\\n  ...((community.twitter_handle?.length ?? 0) > 0\\\\\\\\n    ? [\\\\\\\\n        {\\\\\\\\n          href: `https://twitter.com/${community.twitter_handle}`,\\\\\\\\n          iconClass: \\\\\\\\\\\\\\\"bi bi-twitter\\\\\\\\\\\\\\\",\\\\\\\\n          name: community.twitter_handle,\\\\\\\\n        },\\\\\\\\n      ]\\\\\\\\n    : []),\\\\\\\\n\\\\\\\\n  ...(community.telegram_handle.length > 0\\\\\\\\n    ? community.telegram_handle.map((telegram_handle) => ({\\\\\\\\n        href: `https://t.me/${telegram_handle}`,\\\\\\\\n        iconClass: \\\\\\\\\\\\\\\"bi bi-telegram\\\\\\\\\\\\\\\",\\\\\\\\n        name: telegram_handle,\\\\\\\\n      }))\\\\\\\\n    : []),\\\\\\\\n];\\\\\\\\n\\\\\\\\nconst NavlinksContainer = styled.div`\\\\\\\\n  //background: white;\\\\\\\\n  padding: 0 3rem;\\\\\\\\n\\\\\\\\n  @media screen and (max-width: 960px) {\\\\\\\\n    padding: 0 1rem;\\\\\\\\n  }\\\\\\\\n`;\\\\\\\\n\\\\\\\\nreturn (\\\\\\\\n  <div\\\\\\\\n    className=\\\\\\\\\\\\\\\"d-flex flex-column gap-3 w-100\\\\\\\\\\\\\\\"\\\\\\\\n    style={{ background: \\\\\\\\\\\\\\\"#F4F4F4\\\\\\\\\\\\\\\" }}\\\\\\\\n  >\\\\\\\\n    <Banner\\\\\\\\n      className=\\\\\\\\\\\\\\\"object-fit-cover\\\\\\\\\\\\\\\"\\\\\\\\n      style={{\\\\\\\\n        background: `center / cover no-repeat url(${community.banner_url})`,\\\\\\\\n      }}\\\\\\\\n    />\\\\\\\\n\\\\\\\\n    <div className=\\\\\\\\\\\\\\\"container d-flex flex-wrap justify-content-between align-items-center align-items-md-start gap-4\\\\\\\\\\\\\\\">\\\\\\\\n      <div className=\\\\\\\\\\\\\\\"d-flex flex-column ms-3\\\\\\\\\\\\\\\">\\\\\\\\n        <div className=\\\\\\\\\\\\\\\"position-relative\\\\\\\\\\\\\\\">\\\\\\\\n          <div style={{ width: 150, height: 45 }}>\\\\\\\\n            <img\\\\\\\\n              alt=\\\\\\\\\\\\\\\"Loading logo...\\\\\\\\\\\\\\\"\\\\\\\\n              className=\\\\\\\\\\\\\\\"rounded-circle position-absolute\\\\\\\\\\\\\\\"\\\\\\\\n              width=\\\\\\\\\\\\\\\"160\\\\\\\\\\\\\\\"\\\\\\\\n              height=\\\\\\\\\\\\\\\"160\\\\\\\\\\\\\\\"\\\\\\\\n              src={community.logo_url}\\\\\\\\n              style={{ top: -124 }}\\\\\\\\n            />\\\\\\\\n          </div>\\\\\\\\n        </div>\\\\\\\\n\\\\\\\\n        <div className=\\\\\\\\\\\\\\\"d-flex flex-column gap-3 ps-md-3 pt-md-3 pb-md-2\\\\\\\\\\\\\\\">\\\\\\\\n          <CommunityName className=\\\\\\\\\\\\\\\"text-nowrap\\\\\\\\\\\\\\\">\\\\\\\\n            {community.name}\\\\\\\\n          </CommunityName>\\\\\\\\n          <CommunityDetails>{community.description}</CommunityDetails>\\\\\\\\n        </div>\\\\\\\\n\\\\\\\\n        <div className=\\\\\\\\\\\\\\\"mt-3 ps-3 d-flex gap-3 align-items-center\\\\\\\\\\\\\\\">\\\\\\\\n          {socialLinks.map((link, index) => (\\\\\\\\n            <a\\\\\\\\n              href={link.href}\\\\\\\\n              style={{\\\\\\\\n                marginLeft: index !== 0 ? \\\\\\\\\\\\\\\"0px\\\\\\\\\\\\\\\" : \\\\\\\\\\\\\\\"0px\\\\\\\\\\\\\\\",\\\\\\\\n                color: \\\\\\\\\\\\\\\"#818181\\\\\\\\\\\\\\\",\\\\\\\\n              }}\\\\\\\\n              key={link.href}\\\\\\\\n              target=\\\\\\\\\\\\\\\"_blank\\\\\\\\\\\\\\\"\\\\\\\\n            >\\\\\\\\n              <i className={link.iconClass}></i>\\\\\\\\n            </a>\\\\\\\\n          ))}\\\\\\\\n        </div>\\\\\\\\n      </div>\\\\\\\\n\\\\\\\\n      <div className=\\\\\\\\\\\\\\\"d-flex align-items-end gap-3 ms-auto mb-md-5 me-4\\\\\\\\\\\\\\\">\\\\\\\\n        {permissions.can_configure && (\\\\\\\\n          <Link\\\\\\\\n            to={`/devhub.near/widget/app?page=community.configuration&handle=${community.handle}`}\\\\\\\\n          >\\\\\\\\n            <Widget\\\\\\\\n              src={\\\\\\\\\\\\\\\"devhub.near/widget/devhub.components.molecule.Button\\\\\\\\\\\\\\\"}\\\\\\\\n              props={{\\\\\\\\n                classNames: { root: \\\\\\\\\\\\\\\"btn-outline-light text-dark shadow-none\\\\\\\\\\\\\\\" },\\\\\\\\n                notRounded: true,\\\\\\\\n                style: {\\\\\\\\n                  display: \\\\\\\\\\\\\\\"flex\\\\\\\\\\\\\\\",\\\\\\\\n                  padding: \\\\\\\\\\\\\\\"0.75rem 1rem\\\\\\\\\\\\\\\",\\\\\\\\n                  alignItems: \\\\\\\\\\\\\\\"center\\\\\\\\\\\\\\\",\\\\\\\\n                  gap: \\\\\\\\\\\\\\\"16px\\\\\\\\\\\\\\\",\\\\\\\\n\\\\\\\\n                  borderRadius: \\\\\\\\\\\\\\\"4px\\\\\\\\\\\\\\\",\\\\\\\\n                  border: \\\\\\\\\\\\\\\"1px solid #00EC97\\\\\\\\\\\\\\\",\\\\\\\\n                  background: \\\\\\\\\\\\\\\"rgba(129, 129, 129, 0.00)\\\\\\\\\\\\\\\",\\\\\\\\n                },\\\\\\\\n                icon: {\\\\\\\\n                  type: \\\\\\\\\\\\\\\"bootstrap_icon\\\\\\\\\\\\\\\",\\\\\\\\n                  variant: \\\\\\\\\\\\\\\"bi-gear-wide-connected\\\\\\\\\\\\\\\",\\\\\\\\n                },\\\\\\\\n                label: \\\\\\\\\\\\\\\"Configure community\\\\\\\\\\\\\\\",\\\\\\\\n              }}\\\\\\\\n            />\\\\\\\\n          </Link>\\\\\\\\n        )}\\\\\\\\n        <Widget\\\\\\\\n          src={\\\\\\\\\\\\\\\"devhub.near/widget/devhub.components.molecule.Button\\\\\\\\\\\\\\\"}\\\\\\\\n          props={{\\\\\\\\n            classNames: { root: \\\\\\\\\\\\\\\"btn-outline-light text-dark shadow-none\\\\\\\\\\\\\\\" },\\\\\\\\n            notRounded: true,\\\\\\\\n            style: {\\\\\\\\n              display: \\\\\\\\\\\\\\\"flex\\\\\\\\\\\\\\\",\\\\\\\\n              padding: \\\\\\\\\\\\\\\"0.75rem 1rem\\\\\\\\\\\\\\\",\\\\\\\\n              alignItems: \\\\\\\\\\\\\\\"center\\\\\\\\\\\\\\\",\\\\\\\\n              gap: \\\\\\\\\\\\\\\"16px\\\\\\\\\\\\\\\",\\\\\\\\n\\\\\\\\n              borderRadius: \\\\\\\\\\\\\\\"4px\\\\\\\\\\\\\\\",\\\\\\\\n              border: \\\\\\\\\\\\\\\"1px solid #00EC97\\\\\\\\\\\\\\\",\\\\\\\\n              background: \\\\\\\\\\\\\\\"rgba(129, 129, 129, 0.00)\\\\\\\\\\\\\\\",\\\\\\\\n            },\\\\\\\\n            label: \\\\\\\\\\\\\\\"Share \\\\\\\\u{2197}\\\\\\\\\\\\\\\",\\\\\\\\n            onClick: onShareClick,\\\\\\\\n            onMouseLeave: () => setLinkCopied(false),\\\\\\\\n            title: \\\\\\\\\\\\\\\"Copy link to clipboard\\\\\\\\\\\\\\\",\\\\\\\\n          }}\\\\\\\\n        />\\\\\\\\n      </div>\\\\\\\\n    </div>\\\\\\\\n    <NavlinksContainer>\\\\\\\\n      <NavUnderline className=\\\\\\\\\\\\\\\"nav gap-4 my-4\\\\\\\\\\\\\\\">\\\\\\\\n        {tabs.map(\\\\\\\\n          ({ title }) =>\\\\\\\\n            title && (\\\\\\\\n              <li className=\\\\\\\\\\\\\\\"nav-item\\\\\\\\\\\\\\\" key={title}>\\\\\\\\n                <Link\\\\\\\\n                  to={href({\\\\\\\\n                    widgetSrc: \\\\\\\\\\\\\\\"devhub.near/widget/app\\\\\\\\\\\\\\\",\\\\\\\\n                    params: {\\\\\\\\n                      page: \\\\\\\\\\\\\\\"community\\\\\\\\\\\\\\\",\\\\\\\\n                      handle: community.handle,\\\\\\\\n                      tab: title,\\\\\\\\n                    },\\\\\\\\n                  })}\\\\\\\\n                  aria-current={tab === title && \\\\\\\\\\\\\\\"page\\\\\\\\\\\\\\\"}\\\\\\\\n                  className={[\\\\\\\\n                    \\\\\\\\\\\\\\\"d-inline-flex gap-2\\\\\\\\\\\\\\\",\\\\\\\\n                    tab === title ? \\\\\\\\\\\\\\\"nav-link active\\\\\\\\\\\\\\\" : \\\\\\\\\\\\\\\"nav-link\\\\\\\\\\\\\\\",\\\\\\\\n                  ].join(\\\\\\\\\\\\\\\" \\\\\\\\\\\\\\\")}\\\\\\\\n                >\\\\\\\\n                  <span>{title}</span>\\\\\\\\n                </Link>\\\\\\\\n              </li>\\\\\\\\n            )\\\\\\\\n        )}\\\\\\\\n      </NavUnderline>\\\\\\\\n      {currentTab.title === \\\\\\\\\\\\\\\"Activity\\\\\\\\\\\\\\\" && (\\\\\\\\n        <div\\\\\\\\n          className=\\\\\\\\\\\\\\\"my-4 d-flex align-items-center justify-content-between\\\\\\\\\\\\\\\"\\\\\\\\n          style={{ gap: \\\\\\\\\\\\\\\"2.5rem\\\\\\\\\\\\\\\" }}\\\\\\\\n        >\\\\\\\\n          <div class=\\\\\\\\\\\\\\\"d-flex align-items-center justify-content-between\\\\\\\\\\\\\\\">\\\\\\\\n            <small class=\\\\\\\\\\\\\\\"text-muted\\\\\\\\\\\\\\\">\\\\\\\\n              <span>Required tags:</span>\\\\\\\\n              <Link\\\\\\\\n                to={href({\\\\\\\\n                  widgetSrc: \\\\\\\\\\\\\\\"devhub.near/widget/app\\\\\\\\\\\\\\\",\\\\\\\\n                  params: { page: \\\\\\\\\\\\\\\"feed\\\\\\\\\\\\\\\", tag: community.tag },\\\\\\\\n                })}\\\\\\\\n              >\\\\\\\\n                <Widget\\\\\\\\n                  src={\\\\\\\\\\\\\\\"devhub.near/widget/devhub.components.atom.Tag\\\\\\\\\\\\\\\"}\\\\\\\\n                  props={{\\\\\\\\n                    tag: community.tag,\\\\\\\\n                  }}\\\\\\\\n                />\\\\\\\\n              </Link>\\\\\\\\n            </small>\\\\\\\\n          </div>\\\\\\\\n          {context.accountId && (\\\\\\\\n            <Widget\\\\\\\\n              src={\\\\\\\\n                \\\\\\\\\\\\\\\"devhub.near/widget/devhub.components.molecule.PostControls\\\\\\\\\\\\\\\"\\\\\\\\n              }\\\\\\\\n              props={{\\\\\\\\n                title: \\\\\\\\\\\\\\\"Post\\\\\\\\\\\\\\\",\\\\\\\\n                href: href({\\\\\\\\n                  widgetSrc: \\\\\\\\\\\\\\\"devhub.near/widget/app\\\\\\\\\\\\\\\",\\\\\\\\n                  params: {\\\\\\\\n                    page: \\\\\\\\\\\\\\\"create\\\\\\\\\\\\\\\",\\\\\\\\n                    labels: [community.tag],\\\\\\\\n                  },\\\\\\\\n                }),\\\\\\\\n              }}\\\\\\\\n            />\\\\\\\\n          )}\\\\\\\\n        </div>\\\\\\\\n      )}\\\\\\\\n    </NavlinksContainer>\\\\\\\\n    {currentTab && (\\\\\\\\n      <div className=\\\\\\\\\\\\\\\"d-flex w-100 h-100\\\\\\\\\\\\\\\" key={currentTab.title}>\\\\\\\\n        <Widget\\\\\\\\n          src={currentTab.view}\\\\\\\\n          props={{\\\\\\\\n            ...currentTab.params,\\\\\\\\n            view, // default view for an addon, can come as a prop from a community or from a direct link to page.addon\\\\\\\\n\\\\\\\\n            // below is temporary prop drilling until kanban and github are migrated\\\\\\\\n            permissions,\\\\\\\\n            handle: community.handle,\\\\\\\\n          }}\\\\\\\\n        />\\\\\\\\n      </div>\\\\\\\\n    )}\\\\\\\\n  </div>\\\\\\\\n);\\\\\\\\n\"}, \"devhub.entity.addon.github.Viewer\": {\"\": \"const { href } = VM.require(\\\\\\\\\\\\\\\"devhub.near/widget/core.lib.url\\\\\\\\\\\\\\\");\\\\\\\\n\\\\\\\\nhref || (href = () => {});\\\\\\\\n\\\\\\\\nconst { kanbanBoards, handle, permissions } = props;\\\\\\\\n// TODO: Convert this viewer to display the provided data via kanbanBoards\\\\\\\\n\\\\\\\\nreturn (\\\\\\\\n  <Widget\\\\\\\\n    // TODO: LEGACY.\\\\\\\\n    src=\\\\\\\\\\\\\\\"devgovgigs.near/widget/gigs-board.entity.workspace.view.github.configurator\\\\\\\\\\\\\\\"\\\\\\\\n    props={{\\\\\\\\n      communityHandle: handle, // rather than fetching again via the handle\\\\\\\\n      link: href({\\\\\\\\n        // do we need a link?\\\\\\\\n        widgetSrc: \\\\\\\\\\\\\\\"devhub.near/widget/app\\\\\\\\\\\\\\\",\\\\\\\\n        params: { page: \\\\\\\\\\\\\\\"community\\\\\\\\\\\\\\\", handle },\\\\\\\\n      }),\\\\\\\\n      permissions,\\\\\\\\n      // TODO: REMOVE AFTER MIGRATION.\\\\\\\\n      nearDevGovGigsWidgetsAccountId: \\\\\\\\\\\\\\\"devhub.near\\\\\\\\\\\\\\\",\\\\\\\\n      nearDevGovGigsWidgetsAccountId: \\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\",\\\\\\\\n    }}\\\\\\\\n  />\\\\\\\\n);\\\\\\\\n\"}, \"devhub.entity.addon.kanban.Viewer\": {\"\": \"const { href } = VM.require(\\\\\\\\\\\\\\\"devhub.near/widget/core.lib.url\\\\\\\\\\\\\\\");\\\\\\\\n\\\\\\\\nhref || (href = () => {});\\\\\\\\n\\\\\\\\nconst { metadata, payload, handle, permissions } = props;\\\\\\\\n// TODO: Convert this viewer to display the provided data via metadata, payload\\\\\\\\n\\\\\\\\nconst CommunityBoardPage = ({ handle, permissions }) => {\\\\\\\\n  return (\\\\\\\\n    <Widget\\\\\\\\n      // TODO: LEGACY.\\\\\\\\n      src=\\\\\\\\\\\\\\\"devgovgigs.near/widget/gigs-board.entity.workspace.view.kanban.configurator\\\\\\\\\\\\\\\"\\\\\\\\n      props={{\\\\\\\\n        communityHandle: handle, // rather than fetching again via the handle\\\\\\\\n        link: href({\\\\\\\\n          // do we need a link?\\\\\\\\n          widgetSrc: \\\\\\\\\\\\\\\"devhub.near/widget/app\\\\\\\\\\\\\\\",\\\\\\\\n          params: { page: \\\\\\\\\\\\\\\"community\\\\\\\\\\\\\\\", handle },\\\\\\\\n        }),\\\\\\\\n        permissions,\\\\\\\\n        // TODO: REMOVE AFTER MIGRATION.\\\\\\\\n        nearDevGovGigsWidgetsAccountId: \\\\\\\\\\\\\\\"devhub.near\\\\\\\\\\\\\\\",\\\\\\\\n        nearDevGovGigsWidgetsAccountId: \\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\",\\\\\\\\n      }}\\\\\\\\n    />\\\\\\\\n  );\\\\\\\\n};\\\\\\\\n\\\\\\\\nreturn CommunityBoardPage(props);\\\\\\\\n\"}}}}}"
      }
    ],
    "actions_agg": {
      "deposit": 0
    },
    "outcomes": {
      "status": true
    },
    "outcomes_agg": {
      "transaction_fee": 1.6511479108952e+21
    }
  },
  {
    "id": "1343954501",
    "receipt_id": "5TkCKzAy5LzA4irLNpg3SngppMaWEvMFRxaMhBEy3cNJ",
    "predecessor_account_id": "system",
    "receiver_account_id": "devhub.near",
    "receipt_kind": "ACTION",
    "receipt_block": {
      "block_hash": "FAdbnnfWh95htDtSDH9z6aeUFsQhu16ptwjupNBFGUqW",
      "block_height": 104941155,
      "block_timestamp": 1699128215069040600
    },
    "receipt_outcome": {
      "gas_burnt": 223182562500,
      "tokens_burnt": 0,
      "executor_account_id": "devhub.near",
      "status": true
    },
    "transaction_hash": "7dnFdeDgiafcqYDbV8qYo6awmTtX5gNtw3wq4W2iCkwv",
    "included_in_block_hash": "CKrjNfVQnS6xPmTdjfdWB66CrCT6BY4JdGaaNSKVdo58",
    "block_timestamp": "1699128211262309747",
    "block": {
      "block_height": 104941152
    },
    "receipt_conversion_tokens_burnt": "250979866714600000000",
    "actions": [
      {
        "action": "TRANSFER",
        "method": null,
        "deposit": 1.876806091514373e+23,
        "fee": 0,
        "args": null
      }
    ],
    "actions_agg": {
      "deposit": 0
    },
    "outcomes": {
      "status": true
    },
    "outcomes_agg": {
      "transaction_fee": 1.6511479108952e+21
    }
  },
  {
    "id": "1343983548",
    "receipt_id": "6MNfWTtC3YsKCcfPZHhTEKi4FJnQRr9k7r34ydznQ3BY",
    "predecessor_account_id": "devhub.near",
    "receiver_account_id": "social.near",
    "receipt_kind": "ACTION",
    "receipt_block": {
      "block_hash": "5vktTV9KbWtv1zrHgGdcQWRGqphD9KcAzpPZ3i1Y6kX4",
      "block_height": 104941444,
      "block_timestamp": 1699128539000647700
    },
    "receipt_outcome": {
      "gas_burnt": 5974453542471,
      "tokens_burnt": 597445354247100000000,
      "executor_account_id": "social.near",
      "status": true
    },
    "transaction_hash": "7LWuAxdqDKKPDGz8PxEA22HZgEYxpVYDEWNpAPZoTSYa",
    "included_in_block_hash": "6xiq89ELMHv2dwp1UP9fSzCEbj6jViBksA5UWeq2Va65",
    "block_timestamp": "1699128537853316623",
    "block": {
      "block_height": 104941443
    },
    "receipt_conversion_tokens_burnt": "243912973714200000000",
    "actions": [
      {
        "action": "FUNCTION_CALL",
        "method": "set",
        "deposit": 0,
        "fee": 597445354247100000000,
        "args": "{\"data\": {\"devhub.near\": {\"widget\": {\"devhub.entity.post.History\": {\"\": \"/*\\\\\\\\n---props---\\\\\\\\nprops.post: {};\\\\\\\\nprops.id: number;\\\\\\\\nprops.newTab: boolean;\\\\\\\\nprops.timestamp: number;\\\\\\\\nprops.referral: any;\\\\\\\\n*/\\\\\\\\n\\\\\\\\n/* INCLUDE: \\\\\\\\\\\\\\\"common.jsx\\\\\\\\\\\\\\\" */\\\\\\\\nconst nearDevGovGigsContractAccountId =\\\\\\\\n  props.nearDevGovGigsContractAccountId ||\\\\\\\\n  (context.widgetSrc ?? \\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\").split(\\\\\\\\\\\\\\\"/\\\\\\\\\\\\\\\", 1)[0];\\\\\\\\n\\\\\\\\nconst nearDevGovGigsWidgetsAccountId =\\\\\\\\n  props.nearDevGovGigsWidgetsAccountId || \\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\";\\\\\\\\n\\\\\\\\nfunction widget(widgetName, widgetProps, key) {\\\\\\\\n  widgetProps = {\\\\\\\\n    ...widgetProps,\\\\\\\\n    nearDevGovGigsContractAccountId: props.nearDevGovGigsContractAccountId,\\\\\\\\n    nearDevGovGigsWidgetsAccountId: props.nearDevGovGigsWidgetsAccountId,\\\\\\\\n    referral: props.referral,\\\\\\\\n  };\\\\\\\\n\\\\\\\\n  return (\\\\\\\\n    <Widget\\\\\\\\n      src={`${nearDevGovGigsWidgetsAccountId}/widget/gigs-board.${widgetName}`}\\\\\\\\n      props={widgetProps}\\\\\\\\n      key={key}\\\\\\\\n    />\\\\\\\\n  );\\\\\\\\n}\\\\\\\\n\\\\\\\\nfunction href(widgetName, linkProps) {\\\\\\\\n  linkProps = { ...linkProps };\\\\\\\\n\\\\\\\\n  if (props.nearDevGovGigsContractAccountId) {\\\\\\\\n    linkProps.nearDevGovGigsContractAccountId =\\\\\\\\n      props.nearDevGovGigsContractAccountId;\\\\\\\\n  }\\\\\\\\n\\\\\\\\n  if (props.nearDevGovGigsWidgetsAccountId) {\\\\\\\\n    linkProps.nearDevGovGigsWidgetsAccountId =\\\\\\\\n      props.nearDevGovGigsWidgetsAccountId;\\\\\\\\n  }\\\\\\\\n\\\\\\\\n  if (props.referral) {\\\\\\\\n    linkProps.referral = props.referral;\\\\\\\\n  }\\\\\\\\n\\\\\\\\n  const linkPropsQuery = Object.entries(linkProps)\\\\\\\\n    .filter(([_key, nullable]) => (nullable ?? null) !== null)\\\\\\\\n    .map(([key, value]) => `${key}=${value}`)\\\\\\\\n    .join(\\\\\\\\\\\\\\\"&\\\\\\\\\\\\\\\");\\\\\\\\n\\\\\\\\n  return `/${nearDevGovGigsWidgetsAccountId}/widget/gigs-board.pages.${widgetName}${\\\\\\\\n    linkPropsQuery ? \\\\\\\\\\\\\\\"?\\\\\\\\\\\\\\\" : \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\"\\\\\\\\n  }${linkPropsQuery}`;\\\\\\\\n}\\\\\\\\n/* END_INCLUDE: \\\\\\\\\\\\\\\"common.jsx\\\\\\\\\\\\\\\" */\\\\\\\\n\\\\\\\\nconst postId = props.post.id ?? (props.id ? parseInt(props.id) : 0);\\\\\\\\nconst post =\\\\\\\\n  props.post ??\\\\\\\\n  Near.view(nearDevGovGigsContractAccountId, \\\\\\\\\\\\\\\"get_post\\\\\\\\\\\\\\\", {\\\\\\\\n    post_id: postId,\\\\\\\\n  });\\\\\\\\nif (!post || !post.snapshot_history) {\\\\\\\\n  return <div class=\\\\\\\\\\\\\\\"bi bi-clock-history px-2\\\\\\\\\\\\\\\"></div>;\\\\\\\\n}\\\\\\\\nconst referral = props.referral;\\\\\\\\n\\\\\\\\nfunction readableDate(timestamp) {\\\\\\\\n  var a = new Date(timestamp);\\\\\\\\n  return (\\\\\\\\n    a.toDateString() +\\\\\\\\n    \\\\\\\\\\\\\\\" \\\\\\\\\\\\\\\" +\\\\\\\\n    a.toLocaleTimeString([], { hour: \\\\\\\\\\\\\\\"2-digit\\\\\\\\\\\\\\\", minute: \\\\\\\\\\\\\\\"2-digit\\\\\\\\\\\\\\\" })\\\\\\\\n  ).substring(4);\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst currentTimestamp = props.timestamp ?? post.snapshot.timestamp;\\\\\\\\nconst snapshot = post.snapshot;\\\\\\\\nconst snapshotHistory = post.snapshot_history\\\\\\\\n  ? Array.from(post.snapshot_history)\\\\\\\\n  : [];\\\\\\\\n\\\\\\\\nsnapshotHistory.push(snapshot);\\\\\\\\nsnapshotHistory.reverse();\\\\\\\\n\\\\\\\\nconst history = (\\\\\\\\n  <div class=\\\\\\\\\\\\\\\"btn-group\\\\\\\\\\\\\\\" role=\\\\\\\\\\\\\\\"group\\\\\\\\\\\\\\\">\\\\\\\\n    <a\\\\\\\\n      class=\\\\\\\\\\\\\\\"card-link\\\\\\\\\\\\\\\"\\\\\\\\n      role=\\\\\\\\\\\\\\\"button\\\\\\\\\\\\\\\"\\\\\\\\n      title=\\\\\\\\\\\\\\\"Post History\\\\\\\\\\\\\\\"\\\\\\\\n      data-bs-toggle=\\\\\\\\\\\\\\\"dropdown\\\\\\\\\\\\\\\"\\\\\\\\n      aria-expanded=\\\\\\\\\\\\\\\"false\\\\\\\\\\\\\\\"\\\\\\\\n      type=\\\\\\\\\\\\\\\"button\\\\\\\\\\\\\\\"\\\\\\\\n    >\\\\\\\\n      <div class=\\\\\\\\\\\\\\\"bi bi-clock-history px-2\\\\\\\\\\\\\\\"></div>\\\\\\\\n    </a>\\\\\\\\n    <ul class=\\\\\\\\\\\\\\\"dropdown-menu\\\\\\\\\\\\\\\">\\\\\\\\n      <a\\\\\\\\n        class=\\\\\\\\\\\\\\\"d-flex text-muted\\\\\\\\\\\\\\\"\\\\\\\\n        style={{ fontSize: \\\\\\\\\\\\\\\"12px\\\\\\\\\\\\\\\", textDecoration: \\\\\\\\\\\\\\\"none\\\\\\\\\\\\\\\", cursor: \\\\\\\\\\\\\\\"default\\\\\\\\\\\\\\\" }}\\\\\\\\n      >\\\\\\\\n        <a\\\\\\\\n          style={{\\\\\\\\n            textAlign: \\\\\\\\\\\\\\\"center\\\\\\\\\\\\\\\",\\\\\\\\n            minWidth: \\\\\\\\\\\\\\\"290px\\\\\\\\\\\\\\\",\\\\\\\\n            maxWidth: \\\\\\\\\\\\\\\"290px\\\\\\\\\\\\\\\",\\\\\\\\n          }}\\\\\\\\n        >\\\\\\\\n          Edit History\\\\\\\\n        </a>\\\\\\\\n        <a style={{ marginRight: \\\\\\\\\\\\\\\"8px\\\\\\\\\\\\\\\" }}>Compare</a>\\\\\\\\n      </a>\\\\\\\\n      {snapshotHistory.map((item) => {\\\\\\\\n        if (item === undefined) return;\\\\\\\\n        return (\\\\\\\\n          <li style={{ display: \\\\\\\\\\\\\\\"flex\\\\\\\\\\\\\\\" }}>\\\\\\\\n            <div\\\\\\\\n              style={{\\\\\\\\n                minWidth: \\\\\\\\\\\\\\\"290px\\\\\\\\\\\\\\\",\\\\\\\\n                maxWidth: \\\\\\\\\\\\\\\"290px\\\\\\\\\\\\\\\",\\\\\\\\n              }}\\\\\\\\n            >\\\\\\\\n              <a\\\\\\\\n                class=\\\\\\\\\\\\\\\"dropdown-item\\\\\\\\\\\\\\\"\\\\\\\\n                href={href(\\\\\\\\\\\\\\\"Post\\\\\\\\\\\\\\\", {\\\\\\\\n                  id: postId,\\\\\\\\n                  timestamp: item.timestamp,\\\\\\\\n                  compareTimestamp: null,\\\\\\\\n                  referral,\\\\\\\\n                })}\\\\\\\\n                target={props.newTab ? \\\\\\\\\\\\\\\"_blank\\\\\\\\\\\\\\\" : undefined}\\\\\\\\n              >\\\\\\\\n                {readableDate(item.timestamp / 1000000)}\\\\\\\\n\\\\\\\\n                <Widget\\\\\\\\n                  src=\\\\\\\\\\\\\\\"mob.near/widget/ProfileImage\\\\\\\\\\\\\\\"\\\\\\\\n                  props={{\\\\\\\\n                    accountId: item.editor_id,\\\\\\\\n                    style: {\\\\\\\\n                      width: \\\\\\\\\\\\\\\"1.25em\\\\\\\\\\\\\\\",\\\\\\\\n                      height: \\\\\\\\\\\\\\\"1.25em\\\\\\\\\\\\\\\",\\\\\\\\n                    },\\\\\\\\n                    imageStyle: {\\\\\\\\n                      transform: \\\\\\\\\\\\\\\"translateY(-12.5%)\\\\\\\\\\\\\\\",\\\\\\\\n                    },\\\\\\\\n                  }}\\\\\\\\n                />\\\\\\\\n                {post.author_id.substring(0, 8)}\\\\\\\\n              </a>\\\\\\\\n            </div>\\\\\\\\n            <a\\\\\\\\n              class=\\\\\\\\\\\\\\\"dropdown-item\\\\\\\\\\\\\\\"\\\\\\\\n              href={href(\\\\\\\\\\\\\\\"Post\\\\\\\\\\\\\\\", {\\\\\\\\n                id: postId,\\\\\\\\n                timestamp: currentTimestamp,\\\\\\\\n                compareTimestamp: item.timestamp,\\\\\\\\n                referral,\\\\\\\\n              })}\\\\\\\\n            >\\\\\\\\n              <i class=\\\\\\\\\\\\\\\"bi bi-file-earmark-diff\\\\\\\\\\\\\\\" />\\\\\\\\n            </a>\\\\\\\\n          </li>\\\\\\\\n        );\\\\\\\\n      })}\\\\\\\\n    </ul>\\\\\\\\n  </div>\\\\\\\\n);\\\\\\\\n\\\\\\\\nreturn history;\\\\\\\\n\"}}}}}"
      }
    ],
    "actions_agg": {
      "deposit": 0
    },
    "outcomes": {
      "status": true
    },
    "outcomes_agg": {
      "transaction_fee": 841358327961300000000
    }
  },
  {
    "id": "1343983650",
    "receipt_id": "Cvx7t8ss28nZU4UsjGA2QXuf5vQYyHakFG8BHpW33PjL",
    "predecessor_account_id": "system",
    "receiver_account_id": "devhub.near",
    "receipt_kind": "ACTION",
    "receipt_block": {
      "block_hash": "GfJbf2MpkUbXqnEihwW7Rs277b8sa89tLQCrnWamFDCY",
      "block_height": 104941445,
      "block_timestamp": 1699128540137966300
    },
    "receipt_outcome": {
      "gas_burnt": 223182562500,
      "tokens_burnt": 0,
      "executor_account_id": "devhub.near",
      "status": true
    },
    "transaction_hash": "7LWuAxdqDKKPDGz8PxEA22HZgEYxpVYDEWNpAPZoTSYa",
    "included_in_block_hash": "6xiq89ELMHv2dwp1UP9fSzCEbj6jViBksA5UWeq2Va65",
    "block_timestamp": "1699128537853316623",
    "block": {
      "block_height": 104941443
    },
    "receipt_conversion_tokens_burnt": "243912973714200000000",
    "actions": [
      {
        "action": "TRANSFER",
        "method": null,
        "deposit": 1.884391609210647e+23,
        "fee": 0,
        "args": null
      }
    ],
    "actions_agg": {
      "deposit": 0
    },
    "outcomes": {
      "status": true
    },
    "outcomes_agg": {
      "transaction_fee": 841358327961300000000
    }
  },
  {
    "id": "1371681187",
    "receipt_id": "2jtH8KYVwSTf5xFUEoGYefob4Q1nFageAuJ7KfGxvecV",
    "predecessor_account_id": "devhub.near",
    "receiver_account_id": "social.near",
    "receipt_kind": "ACTION",
    "receipt_block": {
      "block_hash": "2SBpJf2EuWzG3YioCAZMzk9E6cd6dWWW3Aaxsqun6UnU",
      "block_height": 105245636,
      "block_timestamp": 1699475563160181000
    },
    "receipt_outcome": {
      "gas_burnt": 10019222406475,
      "tokens_burnt": 1.0019222406475e+21,
      "executor_account_id": "social.near",
      "status": true
    },
    "transaction_hash": "G3vUYwtwAbQSRLJ4w37mNsKa1anCrx7A31a3DRsDyJto",
    "included_in_block_hash": "4CXKCS2BkwEyjTAWz82iCZXnkvtGrSSphHeR233YP8sn",
    "block_timestamp": "1699475561841393821",
    "block": {
      "block_height": 105245635
    },
    "receipt_conversion_tokens_burnt": "246821700254800000000",
    "actions": [
      {
        "action": "FUNCTION_CALL",
        "method": "set",
        "deposit": 0,
        "fee": 1.0019222406475e+21,
        "args": "{\"data\": {\"devhub.near\": {\"widget\": {\"devhub.page.contribute\": {\"\": \"const Header = styled.div`\\\\\\\\n  //background: white;\\\\\\\\n  padding: 1rem 3.125rem;\\\\\\\\n  width: 100%;\\\\\\\\n  margin: 24px;\\\\\\\\n\\\\\\\\n  @media screen and (max-width: 768px) {\\\\\\\\n    margin: 1rem 0;\\\\\\\\n    padding: 1rem;\\\\\\\\n  }\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst PageHeader = styled.h1`\\\\\\\\n  color: #555555;\\\\\\\\n  font-size: 1.5rem;\\\\\\\\n  font-style: normal;\\\\\\\\n  font-weight: 500;\\\\\\\\n  line-height: 120%; /* 28.8px */\\\\\\\\n  letter-spacing: -0.24px;\\\\\\\\n  margin: 0;\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst Lead = styled.h5`\\\\\\\\n  color: #151515;\\\\\\\\n  font-size: 2.5rem;\\\\\\\\n  font-style: normal;\\\\\\\\n  font-weight: 700;\\\\\\\\n  line-height: 120%; /* 48px */\\\\\\\\n  margin: 2.25rem 8rem;\\\\\\\\n  margin-top: 0;\\\\\\\\n\\\\\\\\n  @media screen and (max-width: 768px) {\\\\\\\\n    font-size: 1.75rem;\\\\\\\\n    margin: 1rem;\\\\\\\\n    margin-top: 0;\\\\\\\\n  }\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst Container = styled.div`\\\\\\\\n  padding: 2.25rem 8rem;\\\\\\\\n  width: 100%;\\\\\\\\n  //background-color: white;\\\\\\\\n\\\\\\\\n  @media screen and (max-width: 768px) {\\\\\\\\n    padding: 1rem;\\\\\\\\n  }\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst actions = [\\\\\\\\n  {\\\\\\\\n    title: \\\\\\\\\\\\\\\"Ideate on DevHub\\\\\\\\\\\\\\\",\\\\\\\\n    description:\\\\\\\\n      \\\\\\\\\\\\\\\"The first step in any NEAR ecosystem project is ideation. It is crucial to have a way to find people to share and explore ideas with, partly because it can save a lot of time based on prior discussions. But also because it can you gauge support from a diversity of stakeholders.\\\\\\\\\\\\\\\",\\\\\\\\n    ctaAction: \\\\\\\\\\\\\\\"Learn More \\\\\\\\u{2192}\\\\\\\\\\\\\\\",\\\\\\\\n    ctaLink: \\\\\\\\\\\\\\\"/devhub.near/widget/app?page=blog&id=2029\\\\\\\\\\\\\\\",\\\\\\\\n  },\\\\\\\\n  {\\\\\\\\n    title: \\\\\\\\\\\\\\\"Post a Proposal\\\\\\\\\\\\\\\",\\\\\\\\n    description:\\\\\\\\n      \\\\\\\\\\\\\\\"If you have already nurtured and refined your idea, you\\\\\\\\\\\\'re ready to draft and post your funding proposal.This guide is here to help you craft a compelling, convincing, and concise proposal that will capture the interest of potential funders.\\\\\\\\\\\\\\\",\\\\\\\\n    ctaAction: \\\\\\\\\\\\\\\"Learn More \\\\\\\\u{2192}\\\\\\\\\\\\\\\",\\\\\\\\n    ctaLink: \\\\\\\\\\\\\\\"/devhub.near/widget/app?page=blog&id=2035\\\\\\\\\\\\\\\",\\\\\\\\n  },\\\\\\\\n  {\\\\\\\\n    title: \\\\\\\\\\\\\\\"Host an Event\\\\\\\\\\\\\\\",\\\\\\\\n    description:\\\\\\\\n      \\\\\\\\\\\\\\\"We are always on the lookout for events that align with our mission and provide value to the NEAR ecosystem. If you are organizing such an event, we would love to hear from you! Below is a guide on how to submit a sponsorship proposal to us.\\\\\\\\\\\\\\\",\\\\\\\\n    ctaAction: \\\\\\\\\\\\\\\"Learn More \\\\\\\\u{2192}\\\\\\\\\\\\\\\",\\\\\\\\n    ctaLink: \\\\\\\\\\\\\\\"/devhub.near/widget/app?page=community&handle=hacks&tab=Wiki%202\\\\\\\\\\\\\\\",\\\\\\\\n  },\\\\\\\\n  {\\\\\\\\n    title: \\\\\\\\\\\\\\\"Improve NEAR Docs\\\\\\\\\\\\\\\",\\\\\\\\n    description:\\\\\\\\n      \\\\\\\\\\\\\\\"NEAR documentation is an open source repository that anyone can fork, extend and contribute to by creating pull requests. To get started, head over to our github repository and checkout how you can make your first contribution. \\\\\\\\\\\\\\\",\\\\\\\\n    ctaAction: \\\\\\\\\\\\\\\"Learn More \\\\\\\\u{2192}\\\\\\\\\\\\\\\",\\\\\\\\n    ctaLink: \\\\\\\\\\\\\\\"https://github.com/near/docs\\\\\\\\\\\\\\\",\\\\\\\\n  },\\\\\\\\n  {\\\\\\\\n    title: \\\\\\\\\\\\\\\"Join the Fellowship\\\\\\\\\\\\\\\",\\\\\\\\n    description:\\\\\\\\n      \\\\\\\\\\\\\\\"As the NEAR ecosystem grows rapidly, there is an increasing need to improve developer productivity. The DevDAO NEAR Platform Fellowship Program aims to solve this issue by providing guidance to new contributors from experienced developers.\\\\\\\\\\\\\\\",\\\\\\\\n    ctaAction: \\\\\\\\\\\\\\\"Learn More \\\\\\\\u{2192}\\\\\\\\\\\\\\\",\\\\\\\\n    ctaLink:\\\\\\\\n      \\\\\\\\\\\\\\\"/devhub.near/widget/app?page=community&handle=fellowship&tab=Wiki 1\\\\\\\\\\\\\\\",\\\\\\\\n  },\\\\\\\\n  {\\\\\\\\n    title: \\\\\\\\\\\\\\\"Join NEAR Campus\\\\\\\\\\\\\\\",\\\\\\\\n    description:\\\\\\\\n      \\\\\\\\\\\\\\\"DevHub\\\\\\\\u{2019}s NEAR Campus supports existing student clubs, researchers, and faculties in blockchain technologies, enhancing both curricular and extracurricular activities. We aim to merge blockchain education with mainstream academics.\\\\\\\\\\\\\\\",\\\\\\\\n    ctaAction: \\\\\\\\\\\\\\\"Learn More \\\\\\\\u{2192}\\\\\\\\\\\\\\\",\\\\\\\\n    ctaLink: \\\\\\\\\\\\\\\"/devhub.near/widget/app?page=community&handle=near-campus\\\\\\\\\\\\\\\",\\\\\\\\n  },\\\\\\\\n  {\\\\\\\\n    title: \\\\\\\\\\\\\\\"Dive into Hackbox\\\\\\\\\\\\\\\",\\\\\\\\n    description:\\\\\\\\n      \\\\\\\\\\\\\\\"Hackbox is a revolutionary plug-and-play solution designed to empower local leads and community stewards in hosting hackathons easily and efficiently.\\\\\\\\\\\\\\\",\\\\\\\\n    ctaAction: \\\\\\\\\\\\\\\"Learn More \\\\\\\\u{2192}\\\\\\\\\\\\\\\",\\\\\\\\n    ctaLink: \\\\\\\\\\\\\\\"/hackbox.near/widget/home\\\\\\\\\\\\\\\",\\\\\\\\n  },\\\\\\\\n];\\\\\\\\n\\\\\\\\nconst Card = styled.div`\\\\\\\\n  display: flex;\\\\\\\\n  flex-direction: column;\\\\\\\\n  gap: 0.5rem;\\\\\\\\n\\\\\\\\n  h5 {\\\\\\\\n    color: #151515;\\\\\\\\n    font-size: 1.75rem;\\\\\\\\n    font-style: normal;\\\\\\\\n    font-weight: 400;\\\\\\\\n    line-height: 120%; /* 43.2px */\\\\\\\\n\\\\\\\\n    display: flex;\\\\\\\\n    align-items: center;\\\\\\\\n  }\\\\\\\\n\\\\\\\\n  p {\\\\\\\\n    color: #000;\\\\\\\\n    font-size: 1rem;\\\\\\\\n    font-style: normal;\\\\\\\\n    font-weight: 400;\\\\\\\\n    line-height: 120%; /* 28.8px */\\\\\\\\n  }\\\\\\\\n\\\\\\\\n  a {\\\\\\\\n    color: #f4f4f4;\\\\\\\\n    font-size: 1rem;\\\\\\\\n    font-style: normal;\\\\\\\\n    font-weight: 700;\\\\\\\\n    line-height: 120%; /* 28.8px */\\\\\\\\n    letter-spacing: -0.48px;\\\\\\\\n\\\\\\\\n    display: flex;\\\\\\\\n    padding: 0.5rem 1rem;\\\\\\\\n    align-items: center;\\\\\\\\n    gap: 8px;\\\\\\\\n\\\\\\\\n    border-radius: 0.5rem;\\\\\\\\n    background: #00ec97;\\\\\\\\n\\\\\\\\n    width: max-content;\\\\\\\\n  }\\\\\\\\n`;\\\\\\\\nconst ActionCard = ({ action, index }) => {\\\\\\\\n  return (\\\\\\\\n    <Card>\\\\\\\\n      <h5>\\\\\\\\n        <span\\\\\\\\n          style={{\\\\\\\\n            color: \\\\\\\\\\\\\\\"#151515\\\\\\\\\\\\\\\",\\\\\\\\n            border: \\\\\\\\\\\\\\\"2px #151515 solid\\\\\\\\\\\\\\\",\\\\\\\\n            fontSize: 12,\\\\\\\\n            padding: 4,\\\\\\\\n            width: 22,\\\\\\\\n            height: 22,\\\\\\\\n          }}\\\\\\\\n          className=\\\\\\\\\\\\\\\"rounded-circle d-flex align-items-center justify-content-center me-1\\\\\\\\\\\\\\\"\\\\\\\\n        >\\\\\\\\n          {index + 1}\\\\\\\\n        </span>\\\\\\\\n        {action.title}\\\\\\\\n      </h5>\\\\\\\\n      <p>{action.description}</p>\\\\\\\\n      <a href={action.ctaLink} target=\\\\\\\\\\\\\\\"no_blank\\\\\\\\\\\\\\\">\\\\\\\\n        {action.ctaAction}\\\\\\\\n      </a>\\\\\\\\n    </Card>\\\\\\\\n  );\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst ActionContainer = styled.div`\\\\\\\\n  display: grid;\\\\\\\\n  grid-template-columns: repeat(2, 1fr);\\\\\\\\n  justify-content: center;\\\\\\\\n  column-gap: 1rem;\\\\\\\\n  row-gap: 2rem;\\\\\\\\n\\\\\\\\n  width: 100%;\\\\\\\\n\\\\\\\\n  @media screen and (max-width: 768px) {\\\\\\\\n    display: flex;\\\\\\\\n    flex-direction: column;\\\\\\\\n  }\\\\\\\\n`;\\\\\\\\n\\\\\\\\nreturn (\\\\\\\\n  <>\\\\\\\\n    <Widget src={`devhub.near/widget/devhub.components.island.banner`} />\\\\\\\\n    <Header>\\\\\\\\n      <PageHeader>Contribute</PageHeader>\\\\\\\\n    </Header>\\\\\\\\n    <Lead>\\\\\\\\n      There are many ways to start your contribution journey. You can:\\\\\\\\n    </Lead>\\\\\\\\n    <Container>\\\\\\\\n      <ActionContainer>\\\\\\\\n        {actions.map((action, index) => (\\\\\\\\n          <ActionCard action={action} index={index} />\\\\\\\\n        ))}\\\\\\\\n      </ActionContainer>\\\\\\\\n    </Container>\\\\\\\\n  </>\\\\\\\\n);\\\\\\\\n\"}, \"devhub.components.island.connect\": {\"\": \"const [startIndex, setStartIndex] = useState(0);\\\\\\\\nconst [endIndex, setEndIndex] = useState(2);\\\\\\\\n\\\\\\\\nconst DescriptionHeader = styled.h2`\\\\\\\\n  color: #f4f4f4;\\\\\\\\n  font-size: 1.75rem;\\\\\\\\n  font-style: normal;\\\\\\\\n  font-weight: 700;\\\\\\\\n  line-height: 120%; /* 43.2px */\\\\\\\\n\\\\\\\\n  @media screen and (max-width: 786px) {\\\\\\\\n    font-size: 1.5rem;\\\\\\\\n  }\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst Description = styled.p`\\\\\\\\n  color: #f4f4f4;\\\\\\\\n  text-shadow: 0px 4px 4px rgba(0, 0, 0, 0.25);\\\\\\\\n  font-size: 1.25rem;\\\\\\\\n  font-style: normal;\\\\\\\\n  font-weight: 400;\\\\\\\\n  line-height: 120%; /* 28.8px */\\\\\\\\n\\\\\\\\n  @media screen and (max-width: 786px) {\\\\\\\\n    font-size: 1rem;\\\\\\\\n  }\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst imageSource =\\\\\\\\n  \\\\\\\\\\\\\\\"https://ipfs.near.social/ipfs/bafkreic7wxhocbnxoo63uh6n2ur3otykbzouymobt3ebgd2b4dmdiu3764\\\\\\\\\\\\\\\";\\\\\\\\n\\\\\\\\nconst CardBody = styled.div`\\\\\\\\n  border-radius: 1rem;\\\\\\\\n  border: 1px solid #00ec97;\\\\\\\\n  background: #3f4040;\\\\\\\\n\\\\\\\\n  display: flex;\\\\\\\\n  max-width: 31.5%;\\\\\\\\n  height: 12rem;\\\\\\\\n  padding: 1.5rem;\\\\\\\\n  flex-direction: column;\\\\\\\\n  justify-content: center;\\\\\\\\n  align-items: flex-start;\\\\\\\\n  gap: 0.5rem;\\\\\\\\n  flex-shrink: 0;\\\\\\\\n  align-self: stretch;\\\\\\\\n\\\\\\\\n  h3 {\\\\\\\\n    color: #00ec97;\\\\\\\\n    font-size: 1.5rem;\\\\\\\\n    font-style: normal;\\\\\\\\n    font-weight: 700;\\\\\\\\n    line-height: 100%; /* 40px */\\\\\\\\n  }\\\\\\\\n\\\\\\\\n  p {\\\\\\\\n    color: #818181;\\\\\\\\n    font-size: 1.125rem;\\\\\\\\n    font-style: normal;\\\\\\\\n    font-weight: 400;\\\\\\\\n    line-height: 120%; /* 28.8px */\\\\\\\\n  }\\\\\\\\n\\\\\\\\n  a {\\\\\\\\n    color: #00ec97;\\\\\\\\n    font-size: 1.25rem;\\\\\\\\n    font-style: normal;\\\\\\\\n    font-weight: 700;\\\\\\\\n    line-height: 120%; /* 28.8px */\\\\\\\\n\\\\\\\\n    &:hover {\\\\\\\\n      text-decoration: none;\\\\\\\\n    }\\\\\\\\n  }\\\\\\\\n\\\\\\\\n  @media screen and (max-width: 768px) {\\\\\\\\n    max-width: 80%;\\\\\\\\n  }\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst Card = ({ title, description, href }) => {\\\\\\\\n  return (\\\\\\\\n    <CardBody>\\\\\\\\n      <h3>{title}</h3>\\\\\\\\n      <p>{description}</p>\\\\\\\\n      <a href={href}>Learn more \\\\\\\\u{2192}</a>\\\\\\\\n    </CardBody>\\\\\\\\n  );\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst Cards = [\\\\\\\\n  {\\\\\\\\n    title: \\\\\\\\\\\\\\\"DevHub Hacks\\\\\\\\\\\\\\\",\\\\\\\\n    description: \\\\\\\\\\\\\\\"Host and support developer focused events around the globe.\\\\\\\\\\\\\\\",\\\\\\\\n    href: \\\\\\\\\\\\\\\"/devhub.near/widget/app?page=community&handle=hacks\\\\\\\\\\\\\\\",\\\\\\\\n  },\\\\\\\\n  {\\\\\\\\n    title: \\\\\\\\\\\\\\\"NEAR Platform Fellowship\\\\\\\\\\\\\\\",\\\\\\\\n    description: \\\\\\\\\\\\\\\"Improve the NEAR dev experience with guidance & funding.\\\\\\\\\\\\\\\",\\\\\\\\n    href: \\\\\\\\\\\\\\\"/devhub.near/widget/app?page=community&handle=fellowship\\\\\\\\\\\\\\\",\\\\\\\\n  },\\\\\\\\n  {\\\\\\\\n    title: \\\\\\\\\\\\\\\"Protocol\\\\\\\\\\\\\\\",\\\\\\\\n    description: \\\\\\\\\\\\\\\"Support the ongoing innovation of the NEAR protocol.\\\\\\\\\\\\\\\",\\\\\\\\n    href: \\\\\\\\\\\\\\\"/devhub.near/widget/app?page=community&handle=protocol\\\\\\\\\\\\\\\",\\\\\\\\n  },\\\\\\\\n  {\\\\\\\\n    title: \\\\\\\\\\\\\\\"Zero Knowledge\\\\\\\\\\\\\\\",\\\\\\\\n    description: \\\\\\\\\\\\\\\"Build a Zero Knowledge ecosystem on NEAR.\\\\\\\\\\\\\\\",\\\\\\\\n    href: \\\\\\\\\\\\\\\"/devhub.near/widget/app?page=community&handle=zero-knowledge\\\\\\\\\\\\\\\",\\\\\\\\n  },\\\\\\\\n  {\\\\\\\\n    title: \\\\\\\\\\\\\\\"Contract Standards\\\\\\\\\\\\\\\",\\\\\\\\n    description: \\\\\\\\\\\\\\\"Coordinate the contribution to the NEAR dapp standards.\\\\\\\\\\\\\\\",\\\\\\\\n    href: \\\\\\\\\\\\\\\"/devhub.near/widget/app?page=community&handle=contract-standards\\\\\\\\\\\\\\\",\\\\\\\\n  },\\\\\\\\n];\\\\\\\\n\\\\\\\\nconst ForwardButton = styled.button`\\\\\\\\n  all: unset;\\\\\\\\n  position: absolute;\\\\\\\\n  right: 0;\\\\\\\\n\\\\\\\\n  margin: 1rem;\\\\\\\\n\\\\\\\\n  &:hover,\\\\\\\\n  &:active {\\\\\\\\n    border: none;\\\\\\\\n    outline: none;\\\\\\\\n  }\\\\\\\\n\\\\\\\\n  ${endIndex >= Cards.length - 1 && \\\\\\\\\\\\\\\"svg {transform: rotate(180deg);}\\\\\\\\\\\\\\\"}\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst handleForward = () => {\\\\\\\\n  if (endIndex <= Cards.length - 1) {\\\\\\\\n    setStartIndex(endIndex + 1);\\\\\\\\n    setEndIndex(endIndex + 3);\\\\\\\\n  } else {\\\\\\\\n    setStartIndex(0);\\\\\\\\n    setEndIndex(2);\\\\\\\\n  }\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst CTA = styled.a`\\\\\\\\n  color: #00ec97 !important;\\\\\\\\n  font-size: 1.5rem;\\\\\\\\n  font-style: normal;\\\\\\\\n  font-weight: 700;\\\\\\\\n  line-height: 120%; /* 28.8px */\\\\\\\\n\\\\\\\\n  @media screen and (max-width: 768px) {\\\\\\\\n    font-size: 1.25rem;\\\\\\\\n  }\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst Subheading = styled.h3`\\\\\\\\n  color: #8a8e93;\\\\\\\\n  font-size: 2.25rem;\\\\\\\\n  font-style: normal;\\\\\\\\n  font-weight: 700;\\\\\\\\n  line-height: 120%; /* 43.2px */\\\\\\\\n\\\\\\\\n  padding: 3rem;\\\\\\\\n  padding-top: 0;\\\\\\\\n\\\\\\\\n  @media screen and (max-width: 786px) {\\\\\\\\n    padding: 1rem;\\\\\\\\n    padding-top: 0;\\\\\\\\n    font-size: 1.5rem;\\\\\\\\n  }\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst Container = styled.div`\\\\\\\\n  width: 100%;\\\\\\\\n  display: flex;\\\\\\\\n  position: relative;\\\\\\\\n  align-items: center;\\\\\\\\n\\\\\\\\n  @media screen and (max-width: 768px) {\\\\\\\\n    flex-direction: column;\\\\\\\\n  }\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst DescriptionContainer = styled.div`\\\\\\\\n  padding: 3rem;\\\\\\\\n  width: 55%;\\\\\\\\n\\\\\\\\n  @media screen and (max-width: 768px) {\\\\\\\\n    padding: 1rem;\\\\\\\\n    width: 100%;\\\\\\\\n  }\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst ImageContainer = styled.div`\\\\\\\\n  position: absolute;\\\\\\\\n  top: 25%;\\\\\\\\n  right: 0;\\\\\\\\n\\\\\\\\n  width: 50%;\\\\\\\\n  height: 65%;\\\\\\\\n\\\\\\\\n  @media screen and (max-width: 768px) {\\\\\\\\n    position: relative;\\\\\\\\n    padding: 0 1rem;\\\\\\\\n\\\\\\\\n    height: 225px;\\\\\\\\n    width: 100%;\\\\\\\\n  }\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst Image = styled.img`\\\\\\\\n  width: 100%;\\\\\\\\n  height: 90%;\\\\\\\\n  object-fit: cover;\\\\\\\\n  clip-path: polygon(15% 0, 100% 0%, 100% 100%, 0% 100%);\\\\\\\\n\\\\\\\\n  @media screen and (max-width: 768px) {\\\\\\\\n    clip-path: none;\\\\\\\\n  }\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst CardsContainer = styled.div`\\\\\\\\n  padding: 3rem;\\\\\\\\n  padding-top: 0;\\\\\\\\n\\\\\\\\n  position: relative;\\\\\\\\n  display: flex;\\\\\\\\n  flex-direction: row;\\\\\\\\n  gap: 1rem;\\\\\\\\n  width: 100%;\\\\\\\\n  align-items: center;\\\\\\\\n\\\\\\\\n  @media screen and (max-width: 768px) {\\\\\\\\n    display: none;\\\\\\\\n  }\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst ArrowIcon = () => {\\\\\\\\n  return (\\\\\\\\n    <svg\\\\\\\\n      xmlns=\\\\\\\\\\\\\\\"http://www.w3.org/2000/svg\\\\\\\\\\\\\\\"\\\\\\\\n      width=\\\\\\\\\\\\\\\"48\\\\\\\\\\\\\\\"\\\\\\\\n      height=\\\\\\\\\\\\\\\"49\\\\\\\\\\\\\\\"\\\\\\\\n      viewBox=\\\\\\\\\\\\\\\"0 0 48 49\\\\\\\\\\\\\\\"\\\\\\\\n      fill=\\\\\\\\\\\\\\\"none\\\\\\\\\\\\\\\"\\\\\\\\n    >\\\\\\\\n      <path\\\\\\\\n        fill-rule=\\\\\\\\\\\\\\\"evenodd\\\\\\\\\\\\\\\"\\\\\\\\n        clip-rule=\\\\\\\\\\\\\\\"evenodd\\\\\\\\\\\\\\\"\\\\\\\\n        d=\\\\\\\\\\\\\\\"M32.9999 24.5L17.9999 39.5L15.8999 37.4L28.7999 24.5L15.8999 11.6L17.9999 9.5L32.9999 24.5Z\\\\\\\\\\\\\\\"\\\\\\\\n        fill=\\\\\\\\\\\\\\\"#00EC97\\\\\\\\\\\\\\\"\\\\\\\\n      />\\\\\\\\n    </svg>\\\\\\\\n  );\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst CTAContainer = styled.div`\\\\\\\\n  padding: 3rem;\\\\\\\\n  padding-top: 0;\\\\\\\\n\\\\\\\\n  @media screen and (max-width: 786px) {\\\\\\\\n    padding: 1rem;\\\\\\\\n    padding-top: 0;\\\\\\\\n  }\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst MobileCards = styled.div`\\\\\\\\n  display: none;\\\\\\\\n\\\\\\\\n  @media screen and (max-width: 768px) {\\\\\\\\n    display: flex;\\\\\\\\n    padding: 1rem;\\\\\\\\n    flex-direction: row;\\\\\\\\n    overflow-x: auto;\\\\\\\\n    gap: 1rem;\\\\\\\\n  }\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst Content = (\\\\\\\\n  <>\\\\\\\\n    <Container>\\\\\\\\n      <DescriptionContainer>\\\\\\\\n        <DescriptionHeader>\\\\\\\\n          Communities are the lifeblood of /dev/hub\\\\\\\\n        </DescriptionHeader>\\\\\\\\n        <Description>\\\\\\\\n          We believe that communities are the foundation of a decentralized\\\\\\\\n          ecosystem. Explore and engage with our diverse range of communities\\\\\\\\n          today.\\\\\\\\n        </Description>\\\\\\\\n      </DescriptionContainer>\\\\\\\\n      <ImageContainer>\\\\\\\\n        <Image src={imageSource} />\\\\\\\\n      </ImageContainer>\\\\\\\\n    </Container>\\\\\\\\n    <Subheading>Featured Communities</Subheading>\\\\\\\\n    <CardsContainer>\\\\\\\\n      {Cards.slice(startIndex, endIndex + 1).map((card, idx) => (\\\\\\\\n        <Card\\\\\\\\n          title={card.title}\\\\\\\\n          description={card.description}\\\\\\\\n          href={card.href}\\\\\\\\n          key={`project-card-${idx}`}\\\\\\\\n        />\\\\\\\\n      ))}\\\\\\\\n      <ForwardButton onClick={handleForward}>\\\\\\\\n        <ArrowIcon />\\\\\\\\n      </ForwardButton>\\\\\\\\n    </CardsContainer>\\\\\\\\n    <MobileCards>\\\\\\\\n      {Cards.map((card, idx) => (\\\\\\\\n        <Card\\\\\\\\n          title={card.title}\\\\\\\\n          description={card.description}\\\\\\\\n          href={card.href}\\\\\\\\n          key={`mobile-card-${idx}`}\\\\\\\\n        />\\\\\\\\n      ))}\\\\\\\\n    </MobileCards>\\\\\\\\n    <CTAContainer>\\\\\\\\n      <CTA href=\\\\\\\\\\\\\\\"/devhub.near/widget/app?page=communities\\\\\\\\\\\\\\\">\\\\\\\\n        Explore all communities \\\\\\\\u{2192}\\\\\\\\n      </CTA>\\\\\\\\n    </CTAContainer>\\\\\\\\n  </>\\\\\\\\n);\\\\\\\\n\\\\\\\\nreturn (\\\\\\\\n  <Widget\\\\\\\\n    src=\\\\\\\\\\\\\\\"devhub.near/widget/devhub.components.island.home-section\\\\\\\\\\\\\\\"\\\\\\\\n    props={{\\\\\\\\n      title: \\\\\\\\\\\\\\\"/connect\\\\\\\\\\\\\\\",\\\\\\\\n      children: Content,\\\\\\\\n      background: true,\\\\\\\\n    }}\\\\\\\\n  />\\\\\\\\n);\\\\\\\\n\"}, \"devhub.components.island.participate\": {\"\": \"const { href } = VM.require(\\\\\\\\\\\\\\\"devhub.near/widget/core.lib.url\\\\\\\\\\\\\\\");\\\\\\\\n\\\\\\\\nhref || (href = () => {});\\\\\\\\n\\\\\\\\nconst Container = styled.div`\\\\\\\\n  margin-top: 2.25rem;\\\\\\\\n\\\\\\\\n  display: flex;\\\\\\\\n  flex-direction: row;\\\\\\\\n  justify-content: space-between;\\\\\\\\n  width: 100%;\\\\\\\\n\\\\\\\\n  @media screen and (max-width: 768px) {\\\\\\\\n    flex-direction: column;\\\\\\\\n    margin-top: 0;\\\\\\\\n  }\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst LinkItem = styled.a`\\\\\\\\n  color: #00ec97;\\\\\\\\n  font-size: 1.25rem;\\\\\\\\n  font-style: normal;\\\\\\\\n  font-weight: 400;\\\\\\\\n  line-height: 120%; /* 28.8px */\\\\\\\\n\\\\\\\\n  display: flex;\\\\\\\\n  align-items: center;\\\\\\\\n\\\\\\\\n  &:hover {\\\\\\\\n    text-decoration: none;\\\\\\\\n    color: #096d50;\\\\\\\\n  }\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst Links = [\\\\\\\\n  {\\\\\\\\n    links: [\\\\\\\\n      {\\\\\\\\n        title: \\\\\\\\\\\\\\\"Ideate on DevHub\\\\\\\\\\\\\\\",\\\\\\\\n        href: \\\\\\\\\\\\\\\"/devhub.near/widget/app?page=blog&id=2029\\\\\\\\\\\\\\\",\\\\\\\\n        count: 1,\\\\\\\\n      },\\\\\\\\n      {\\\\\\\\n        title: \\\\\\\\\\\\\\\"Post a Proposal\\\\\\\\\\\\\\\",\\\\\\\\n        href: \\\\\\\\\\\\\\\"/devhub.near/widget/app?page=blog&id=2035\\\\\\\\\\\\\\\",\\\\\\\\n        count: 2,\\\\\\\\n      },\\\\\\\\n      {\\\\\\\\n        title: \\\\\\\\\\\\\\\"Host an Event\\\\\\\\\\\\\\\",\\\\\\\\n        href: \\\\\\\\\\\\\\\"/devhub.near/widget/app?page=community&handle=hacks&tab=Wiki%202\\\\\\\\\\\\\\\",\\\\\\\\n        count: 3,\\\\\\\\n      },\\\\\\\\n    ],\\\\\\\\n  },\\\\\\\\n  {\\\\\\\\n    links: [\\\\\\\\n      {\\\\\\\\n        title: \\\\\\\\\\\\\\\"Improve NEAR Docs\\\\\\\\\\\\\\\",\\\\\\\\n        href: \\\\\\\\\\\\\\\"https://github.com/near/docs\\\\\\\\\\\\\\\",\\\\\\\\n        count: 4,\\\\\\\\n      },\\\\\\\\n      {\\\\\\\\n        title: \\\\\\\\\\\\\\\"Join the Fellowship\\\\\\\\\\\\\\\",\\\\\\\\n        href: \\\\\\\\\\\\\\\"/devhub.near/widget/app?page=community&handle=fellowship&tab=Wiki%201\\\\\\\\\\\\\\\",\\\\\\\\n        count: 5,\\\\\\\\n      },\\\\\\\\n      {\\\\\\\\n        title: \\\\\\\\\\\\\\\"Join NEAR Campus\\\\\\\\\\\\\\\",\\\\\\\\n        href: \\\\\\\\\\\\\\\"/devhub.near/widget/app?page=community&handle=near-campus\\\\\\\\\\\\\\\",\\\\\\\\n        count: 6,\\\\\\\\n      },\\\\\\\\n    ],\\\\\\\\n  },\\\\\\\\n  {\\\\\\\\n    links: [\\\\\\\\n      {\\\\\\\\n        title: \\\\\\\\\\\\\\\"Dive into Hackbox\\\\\\\\\\\\\\\",\\\\\\\\n        href: \\\\\\\\\\\\\\\"/hackbox.near/widget/home\\\\\\\\\\\\\\\",\\\\\\\\n        count: 7,\\\\\\\\n      },\\\\\\\\n    ],\\\\\\\\n  },\\\\\\\\n];\\\\\\\\n\\\\\\\\nconst CTA = styled.a`\\\\\\\\n  display: flex;\\\\\\\\n  padding: 0.875rem 1rem;\\\\\\\\n  align-items: center;\\\\\\\\n  gap: 0.5rem;\\\\\\\\n\\\\\\\\n  border-radius: 1rem;\\\\\\\\n  background: #00ec97;\\\\\\\\n\\\\\\\\n  color: #f4f4f4 !important;\\\\\\\\n  font-size: 1.5rem;\\\\\\\\n  font-style: normal;\\\\\\\\n  font-weight: 700;\\\\\\\\n  line-height: 120%; /* 28.8px */\\\\\\\\n  letter-spacing: -0.03rem;\\\\\\\\n\\\\\\\\n  width: max-content;\\\\\\\\n  margin-top: 1.5rem;\\\\\\\\n\\\\\\\\n  &:hover {\\\\\\\\n    background: #555555;\\\\\\\\n    text-decoration: none !important;\\\\\\\\n  }\\\\\\\\n\\\\\\\\n  @media screen and (max-width: 768px) {\\\\\\\\n    color: #f4f4f4 !important;\\\\\\\\n    font-size: 20px;\\\\\\\\n    font-style: normal;\\\\\\\\n    font-weight: 700;\\\\\\\\n    line-height: 120%; /* 24px */\\\\\\\\n\\\\\\\\n    display: flex;\\\\\\\\n    padding: 14px 16px;\\\\\\\\n    align-items: center;\\\\\\\\n    gap: 8px;\\\\\\\\n\\\\\\\\n    border-radius: 16px;\\\\\\\\n    background: #555555;\\\\\\\\n\\\\\\\\n    &:hover {\\\\\\\\n      //background: #555555;\\\\\\\\n      text-decoration: none;\\\\\\\\n    }\\\\\\\\n  }\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst SectionPadding = styled.div`\\\\\\\\n  padding: 3rem;\\\\\\\\n  padding-top: 0;\\\\\\\\n\\\\\\\\n  display: flex;\\\\\\\\n  flex-direction: column;\\\\\\\\n\\\\\\\\n  @media screen and (max-width: 768px) {\\\\\\\\n    padding: 1rem;\\\\\\\\n    padding-top: 0;\\\\\\\\n  }\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst LinksContainer = styled.div`\\\\\\\\n  width: 30%;\\\\\\\\n\\\\\\\\n  @media screen and (max-width: 768px) {\\\\\\\\n    width: 100%;\\\\\\\\n    margin-bottom: 1rem;\\\\\\\\n  }\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst Content = (\\\\\\\\n  <SectionPadding>\\\\\\\\n    <Container>\\\\\\\\n      {Links.map((it) => (\\\\\\\\n        <LinksContainer key={Math.random()}>\\\\\\\\n          <div className=\\\\\\\\\\\\\\\"d-flex flex-column gap-3 gap-md-2\\\\\\\\\\\\\\\">\\\\\\\\n            {it.links.map((link) => (\\\\\\\\n              <div className=\\\\\\\\\\\\\\\"d-flex flex-row\\\\\\\\\\\\\\\">\\\\\\\\n                <span\\\\\\\\n                  style={{\\\\\\\\n                    color: \\\\\\\\\\\\\\\"#555555\\\\\\\\\\\\\\\",\\\\\\\\n                    border: \\\\\\\\\\\\\\\"2px #555555 solid\\\\\\\\\\\\\\\",\\\\\\\\n                    fontSize: 12,\\\\\\\\n                    padding: 4,\\\\\\\\n                    width: 22,\\\\\\\\n                    height: 22,\\\\\\\\n                  }}\\\\\\\\n                  className=\\\\\\\\\\\\\\\"rounded-circle d-flex align-items-center justify-content-center me-1\\\\\\\\\\\\\\\"\\\\\\\\n                >\\\\\\\\n                  {link.count}\\\\\\\\n                </span>{\\\\\\\\\\\\\\\" \\\\\\\\\\\\\\\"}\\\\\\\\n                <LinkItem href={link.href} target=\\\\\\\\\\\\\\\"no_blank\\\\\\\\\\\\\\\">\\\\\\\\n                  {link.title}\\\\\\\\n                </LinkItem>\\\\\\\\n              </div>\\\\\\\\n            ))}\\\\\\\\n          </div>\\\\\\\\n        </LinksContainer>\\\\\\\\n      ))}\\\\\\\\n    </Container>\\\\\\\\n\\\\\\\\n    <Link\\\\\\\\n      to={href({\\\\\\\\n        widgetSrc: \\\\\\\\\\\\\\\"devhub.near/widget/app\\\\\\\\\\\\\\\",\\\\\\\\n        params: { page: \\\\\\\\\\\\\\\"contribute\\\\\\\\\\\\\\\" },\\\\\\\\n      })}\\\\\\\\n      style={{ textDecoration: \\\\\\\\\\\\\\\"none\\\\\\\\\\\\\\\" }}\\\\\\\\n    >\\\\\\\\n      <CTA>Learn more \\\\\\\\u{2192}</CTA>\\\\\\\\n    </Link>\\\\\\\\n  </SectionPadding>\\\\\\\\n);\\\\\\\\n\\\\\\\\nreturn (\\\\\\\\n  <Widget\\\\\\\\n    src=\\\\\\\\\\\\\\\"devhub.near/widget/devhub.components.island.home-section\\\\\\\\\\\\\\\"\\\\\\\\n    props={{\\\\\\\\n      title: \\\\\\\\\\\\\\\"/participate\\\\\\\\\\\\\\\",\\\\\\\\n      titleColor: \\\\\\\\\\\\\\\"#555555\\\\\\\\\\\\\\\",\\\\\\\\n      description:\\\\\\\\n        \\\\\\\\\\\\\\\"There are many ways to start your contribution journey. You can:\\\\\\\\\\\\\\\",\\\\\\\\n      children: Content,\\\\\\\\n    }}\\\\\\\\n  />\\\\\\\\n);\\\\\\\\n\"}}}}}"
      }
    ],
    "actions_agg": {
      "deposit": 0
    },
    "outcomes": {
      "status": true
    },
    "outcomes_agg": {
      "transaction_fee": 1.2487439409023e+21
    }
  },
  {
    "id": "1371681230",
    "receipt_id": "EVctNMpt1cS1ARcArMMzZKQhr4Q75QMvjgBZgED3hHC2",
    "predecessor_account_id": "system",
    "receiver_account_id": "devhub.near",
    "receipt_kind": "ACTION",
    "receipt_block": {
      "block_hash": "xZjmiVqwBVsyf4vERmHSgx6TGtm73BAGb1LhaLS1QxZ",
      "block_height": 105245637,
      "block_timestamp": 1699475564445009200
    },
    "receipt_outcome": {
      "gas_burnt": 223182562500,
      "tokens_burnt": 0,
      "executor_account_id": "devhub.near",
      "status": true
    },
    "transaction_hash": "G3vUYwtwAbQSRLJ4w37mNsKa1anCrx7A31a3DRsDyJto",
    "included_in_block_hash": "4CXKCS2BkwEyjTAWz82iCZXnkvtGrSSphHeR233YP8sn",
    "block_timestamp": "1699475561841393821",
    "block": {
      "block_height": 105245635
    },
    "receipt_conversion_tokens_burnt": "246821700254800000000",
    "actions": [
      {
        "action": "TRANSFER",
        "method": null,
        "deposit": 1.8805286474409487e+23,
        "fee": 0,
        "args": null
      }
    ],
    "actions_agg": {
      "deposit": 0
    },
    "outcomes": {
      "status": true
    },
    "outcomes_agg": {
      "transaction_fee": 1.2487439409023e+21
    }
  },
  {
    "id": "1371681521",
    "receipt_id": "D59PZ91rm1frfxVbtQtY2YokmptrbdCyWdCzH7dvm5X1",
    "predecessor_account_id": "devhub.near",
    "receiver_account_id": "social.near",
    "receipt_kind": "ACTION",
    "receipt_block": {
      "block_hash": "F8ZUsm58HDuVMxtVVa6gZcUPqCw67UsgTJ8ixytzNQZY",
      "block_height": 105245650,
      "block_timestamp": 1699475578170400800
    },
    "receipt_outcome": {
      "gas_burnt": 5188877146555,
      "tokens_burnt": 518887714655500000000,
      "executor_account_id": "social.near",
      "status": true
    },
    "transaction_hash": "EZt4VwxHseGvppb8smBq9z8Z7Xkk1cfziVkh7kem4AKs",
    "included_in_block_hash": "AncycfyzbmgMfgRrvgmZ86MTvGE8wTrrSco493DQYcsy",
    "block_timestamp": "1699475577011262518",
    "block": {
      "block_height": 105245649
    },
    "receipt_conversion_tokens_burnt": "242886232821400000000",
    "actions": [
      {
        "action": "FUNCTION_CALL",
        "method": "set",
        "deposit": 0,
        "fee": 518887714655500000000,
        "args": "{\"data\": {\"devhub.near\": {\"widget\": {\"devhub.page.post\": {\"\": \"const { id } = props;\\\\\\\\n\\\\\\\\nconst Container = styled.div`\\\\\\\\n  padding: 0 3rem 3rem 3rem;\\\\\\\\n  width: 100%;\\\\\\\\n\\\\\\\\n  @media screen and (max-width: 768px) {\\\\\\\\n    padding: 0 1rem 1rem 1rem;\\\\\\\\n  }\\\\\\\\n`;\\\\\\\\n\\\\\\\\nreturn (\\\\\\\\n  <Container>\\\\\\\\n    <Widget\\\\\\\\n      src={\\\\\\\\\\\\\\\"devhub.near/widget/devhub.entity.post.Post\\\\\\\\\\\\\\\"}\\\\\\\\n      props={{\\\\\\\\n        id,\\\\\\\\n      }}\\\\\\\\n    />\\\\\\\\n  </Container>\\\\\\\\n);\\\\\\\\n\"}}}}}"
      }
    ],
    "actions_agg": {
      "deposit": 0
    },
    "outcomes": {
      "status": true
    },
    "outcomes_agg": {
      "transaction_fee": 761773947476900000000
    }
  },
  {
    "id": "1371681546",
    "receipt_id": "9Ae6dxu6HgsP9z22yKDKzoF2Kv4ND3eEnPLBgVpHnPfL",
    "predecessor_account_id": "system",
    "receiver_account_id": "devhub.near",
    "receipt_kind": "ACTION",
    "receipt_block": {
      "block_hash": "6eXfTpq1jKqyknbwsc9f7FEcTNFZNmFjSgysj5giPCCo",
      "block_height": 105245651,
      "block_timestamp": 1699475579178694700
    },
    "receipt_outcome": {
      "gas_burnt": 223182562500,
      "tokens_burnt": 0,
      "executor_account_id": "devhub.near",
      "status": true
    },
    "transaction_hash": "EZt4VwxHseGvppb8smBq9z8Z7Xkk1cfziVkh7kem4AKs",
    "included_in_block_hash": "AncycfyzbmgMfgRrvgmZ86MTvGE8wTrrSco493DQYcsy",
    "block_timestamp": "1699475577011262518",
    "block": {
      "block_height": 105245649
    },
    "receipt_conversion_tokens_burnt": "242886232821400000000",
    "actions": [
      {
        "action": "TRANSFER",
        "method": null,
        "deposit": 1.8851130101759344e+23,
        "fee": 0,
        "args": null
      }
    ],
    "actions_agg": {
      "deposit": 0
    },
    "outcomes": {
      "status": true
    },
    "outcomes_agg": {
      "transaction_fee": 761773947476900000000
    }
  },
  {
    "id": "1404025263",
    "receipt_id": "D6ZqFYR3qCzkmnQxpYE7d6Qp6qYvheex3mh2jTSn2aGm",
    "predecessor_account_id": "devhub.near",
    "receiver_account_id": "social.near",
    "receipt_kind": "ACTION",
    "receipt_block": {
      "block_hash": "9eW1DU4y1PPa5fbWvGdtykZ6meSKyZX8sHRnftpgpNXu",
      "block_height": 105601742,
      "block_timestamp": 1699870058537310700
    },
    "receipt_outcome": {
      "gas_burnt": 17774877310293,
      "tokens_burnt": 1.7774877310293e+21,
      "executor_account_id": "social.near",
      "status": true
    },
    "transaction_hash": "3Q61jcbiMPcsQdBBHiaiReT7JFaK2ohdsXeqHS23YNyb",
    "included_in_block_hash": "DLpatVj9wAsNik81KDBbk7MVToujDKC6NJGDSWB6RLCP",
    "block_timestamp": "1699870056808911515",
    "block": {
      "block_height": 105601741
    },
    "receipt_conversion_tokens_burnt": "255263245478400000000",
    "actions": [
      {
        "action": "FUNCTION_CALL",
        "method": "set",
        "deposit": 0,
        "fee": 1.7774877310293e+21,
        "args": "{\"data\": {\"devhub.near\": {\"widget\": {\"devhub.page.create\": {\"\": \"/* INCLUDE: \\\\\\\\\\\\\\\"core/lib/autocomplete\\\\\\\\\\\\\\\" */\\\\\\\\nconst autocompleteEnabled = true;\\\\\\\\n\\\\\\\\nconst AutoComplete = styled.div`\\\\\\\\n  z-index: 5;\\\\\\\\n\\\\\\\\n  > div > div {\\\\\\\\n    padding: calc(var(--padding) / 2);\\\\\\\\n  }\\\\\\\\n`;\\\\\\\\n\\\\\\\\nfunction textareaInputHandler(value) {\\\\\\\\n  const showAccountAutocomplete = /@[\\\\\\\\\\\\\\\\w][^\\\\\\\\\\\\\\\\s]*$/.test(value);\\\\\\\\n  State.update((lastKnownState) => ({\\\\\\\\n    ...lastKnownState,\\\\\\\\n    text: value,\\\\\\\\n    showAccountAutocomplete,\\\\\\\\n  }));\\\\\\\\n}\\\\\\\\n\\\\\\\\nfunction autoCompleteAccountId(id) {\\\\\\\\n  let description = state.description.replace(/[\\\\\\\\\\\\\\\\s]{0,1}@[^\\\\\\\\\\\\\\\\s]*$/, \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\");\\\\\\\\n  description = `${description} @${id}`.trim() + \\\\\\\\\\\\\\\" \\\\\\\\\\\\\\\";\\\\\\\\n  State.update((lastKnownState) => ({\\\\\\\\n    ...lastKnownState,\\\\\\\\n    description,\\\\\\\\n    showAccountAutocomplete: false,\\\\\\\\n  }));\\\\\\\\n}\\\\\\\\n/* END_INCLUDE: \\\\\\\\\\\\\\\"core/lib/autocomplete\\\\\\\\\\\\\\\" */\\\\\\\\n\\\\\\\\nconst { href } = VM.require(\\\\\\\\\\\\\\\"devhub.near/widget/core.lib.url\\\\\\\\\\\\\\\");\\\\\\\\n\\\\\\\\nconst { DRAFT_STATE_STORAGE_KEY, draftState, onDraftStateChange } = VM.require(\\\\\\\\n  \\\\\\\\\\\\\\\"devhub.near/widget/devhub.entity.post.draft\\\\\\\\\\\\\\\"\\\\\\\\n);\\\\\\\\n\\\\\\\\nif (!href) {\\\\\\\\n  return <p>Loading modules...</p>;\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst parentId = props.parentId ?? null;\\\\\\\\nconst postId = props.postId ?? null;\\\\\\\\nconst mode = props.mode ?? \\\\\\\\\\\\\\\"Create\\\\\\\\\\\\\\\";\\\\\\\\n\\\\\\\\nconst referralLabels = props.referral ? [`referral:${props.referral}`] : [];\\\\\\\\nconst labelStrings = (props.labels ? props.labels.split(\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\") : []).concat(\\\\\\\\n  referralLabels\\\\\\\\n);\\\\\\\\nconst labels = labelStrings.map((s) => {\\\\\\\\n  return { name: s };\\\\\\\\n});\\\\\\\\n\\\\\\\\nState.init({\\\\\\\\n  seekingFunding: false,\\\\\\\\n\\\\\\\\n  author_id: context.accountId,\\\\\\\\n  // Should be a list of objects with field \\\\\\\\\\\\\\\"name\\\\\\\\\\\\\\\".\\\\\\\\n  labels,\\\\\\\\n  // Should be a list of labels as strings.\\\\\\\\n  // Both of the label structures should be modified together.\\\\\\\\n  labelStrings,\\\\\\\\n  postType: \\\\\\\\\\\\\\\"Idea\\\\\\\\\\\\\\\",\\\\\\\\n  name: props.name ?? \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\",\\\\\\\\n  description: props.description ?? \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\",\\\\\\\\n  amount: props.amount ?? \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\",\\\\\\\\n  token: props.token ?? \\\\\\\\\\\\\\\"USDT\\\\\\\\\\\\\\\",\\\\\\\\n  supervisor: props.supervisor ?? \\\\\\\\\\\\\\\"neardevdao.near\\\\\\\\\\\\\\\",\\\\\\\\n  githubLink: props.githubLink ?? \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\",\\\\\\\\n  warning: \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\",\\\\\\\\n  waitForDraftStateRestore: true,\\\\\\\\n});\\\\\\\\n\\\\\\\\nif (state.waitForDraftStateRestore) {\\\\\\\\n  const draftstatestring = Storage.privateGet(DRAFT_STATE_STORAGE_KEY);\\\\\\\\n  if (draftstatestring != null) {\\\\\\\\n    if (props.transactionHashes) {\\\\\\\\n      State.update({ waitForDraftStateRestore: false });\\\\\\\\n      Storage.privateSet(DRAFT_STATE_STORAGE_KEY, undefined);\\\\\\\\n    } else {\\\\\\\\n      try {\\\\\\\\n        const draftstate = JSON.parse(draftstatestring);\\\\\\\\n        State.update(draftstate);\\\\\\\\n      } catch (e) {\\\\\\\\n        console.error(\\\\\\\\\\\\\\\"error restoring draft\\\\\\\\\\\\\\\", draftstatestring);\\\\\\\\n      }\\\\\\\\n    }\\\\\\\\n    State.update({ waitForDraftStateRestore: false });\\\\\\\\n  }\\\\\\\\n}\\\\\\\\n\\\\\\\\n// This must be outside onClick, because Near.view returns null at first, and when the view call finished, it returns true/false.\\\\\\\\n// If checking this inside onClick, it will give `null` and we cannot tell the result is true or false.\\\\\\\\nlet grantNotify = Near.view(\\\\\\\\\\\\\\\"social.near\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"is_write_permission_granted\\\\\\\\\\\\\\\", {\\\\\\\\n  predecessor_id: \\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\",\\\\\\\\n  key: context.accountId + \\\\\\\\\\\\\\\"/index/notify\\\\\\\\\\\\\\\",\\\\\\\\n});\\\\\\\\nif (grantNotify === null) {\\\\\\\\n  return;\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst onSubmit = () => {\\\\\\\\n  Storage.privateSet(DRAFT_STATE_STORAGE_KEY, JSON.stringify(state));\\\\\\\\n\\\\\\\\n  let labels = state.labelStrings;\\\\\\\\n\\\\\\\\n  let body = {\\\\\\\\n    name: state.name,\\\\\\\\n    description: generateDescription(\\\\\\\\n      state.description,\\\\\\\\n      state.amount,\\\\\\\\n      state.token,\\\\\\\\n      state.supervisor,\\\\\\\\n      state.seekingFunding\\\\\\\\n    ),\\\\\\\\n  };\\\\\\\\n\\\\\\\\n  if (state.postType === \\\\\\\\\\\\\\\"Solution\\\\\\\\\\\\\\\") {\\\\\\\\n    body = {\\\\\\\\n      ...body,\\\\\\\\n      post_type: \\\\\\\\\\\\\\\"Solution\\\\\\\\\\\\\\\",\\\\\\\\n      solution_version: \\\\\\\\\\\\\\\"V1\\\\\\\\\\\\\\\",\\\\\\\\n    };\\\\\\\\n  } else {\\\\\\\\n    // Idea\\\\\\\\n    body = {\\\\\\\\n      ...body,\\\\\\\\n      post_type: \\\\\\\\\\\\\\\"Idea\\\\\\\\\\\\\\\",\\\\\\\\n      idea_version: \\\\\\\\\\\\\\\"V1\\\\\\\\\\\\\\\",\\\\\\\\n    };\\\\\\\\n  }\\\\\\\\n\\\\\\\\n  if (!context.accountId) return;\\\\\\\\n\\\\\\\\n  let txn = [];\\\\\\\\n  if (mode == \\\\\\\\\\\\\\\"Create\\\\\\\\\\\\\\\") {\\\\\\\\n    txn.push({\\\\\\\\n      contractName: \\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\",\\\\\\\\n      methodName: \\\\\\\\\\\\\\\"add_post\\\\\\\\\\\\\\\",\\\\\\\\n      args: {\\\\\\\\n        parent_id: parentId,\\\\\\\\n        labels,\\\\\\\\n        body: body,\\\\\\\\n      },\\\\\\\\n      deposit: Big(10).pow(21).mul(3),\\\\\\\\n      gas: Big(10).pow(12).mul(100),\\\\\\\\n    });\\\\\\\\n  } else if (mode == \\\\\\\\\\\\\\\"Edit\\\\\\\\\\\\\\\") {\\\\\\\\n    txn.push({\\\\\\\\n      contractName: \\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\",\\\\\\\\n      methodName: \\\\\\\\\\\\\\\"edit_post\\\\\\\\\\\\\\\",\\\\\\\\n      args: {\\\\\\\\n        id: postId,\\\\\\\\n        labels,\\\\\\\\n        body: body,\\\\\\\\n      },\\\\\\\\n      deposit: Big(10).pow(21).mul(2),\\\\\\\\n      gas: Big(10).pow(12).mul(100),\\\\\\\\n    });\\\\\\\\n  }\\\\\\\\n  if (mode == \\\\\\\\\\\\\\\"Create\\\\\\\\\\\\\\\" || mode == \\\\\\\\\\\\\\\"Edit\\\\\\\\\\\\\\\") {\\\\\\\\n    if (grantNotify === false) {\\\\\\\\n      txn.unshift({\\\\\\\\n        contractName: \\\\\\\\\\\\\\\"social.near\\\\\\\\\\\\\\\",\\\\\\\\n        methodName: \\\\\\\\\\\\\\\"grant_write_permission\\\\\\\\\\\\\\\",\\\\\\\\n        args: {\\\\\\\\n          predecessor_id: \\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\",\\\\\\\\n          keys: [context.accountId + \\\\\\\\\\\\\\\"/index/notify\\\\\\\\\\\\\\\"],\\\\\\\\n        },\\\\\\\\n        deposit: Big(10).pow(23),\\\\\\\\n        gas: Big(10).pow(12).mul(30),\\\\\\\\n      });\\\\\\\\n    }\\\\\\\\n    Near.call(txn);\\\\\\\\n  }\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst onIdeaClick = () => {\\\\\\\\n  State.update({ postType: \\\\\\\\\\\\\\\"Idea\\\\\\\\\\\\\\\", seekingFunding: false });\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst onSolutionClick = () => {\\\\\\\\n  State.update({ postType: \\\\\\\\\\\\\\\"Solution\\\\\\\\\\\\\\\" });\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst normalizeLabel = (label) =>\\\\\\\\n  label\\\\\\\\n    .replaceAll(/[- \\\\\\\\\\\\\\\\.]/g, \\\\\\\\\\\\\\\"_\\\\\\\\\\\\\\\")\\\\\\\\n    .replaceAll(/[^\\\\\\\\\\\\\\\\w]+/g, \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\")\\\\\\\\n    .replaceAll(/_+/g, \\\\\\\\\\\\\\\"-\\\\\\\\\\\\\\\")\\\\\\\\n    .replace(/^-+/, \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\")\\\\\\\\n    .replace(/-+$/, \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\")\\\\\\\\n    .toLowerCase()\\\\\\\\n    .trim(\\\\\\\\\\\\\\\"-\\\\\\\\\\\\\\\");\\\\\\\\n\\\\\\\\nconst checkLabel = (label) => {\\\\\\\\n  Near.asyncView(\\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"is_allowed_to_use_labels\\\\\\\\\\\\\\\", {\\\\\\\\n    editor: context.accountId,\\\\\\\\n    labels: [label],\\\\\\\\n  }).then((allowed) => {\\\\\\\\n    if (allowed) {\\\\\\\\n      State.update({ warning: \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\" });\\\\\\\\n    } else {\\\\\\\\n      State.update({\\\\\\\\n        warning:\\\\\\\\n          \\\\\\\\\\\\'The label \\\\\\\\\\\\\\\"\\\\\\\\\\\\' +\\\\\\\\n          label +\\\\\\\\n          \\\\\\\\\\\\'\\\\\\\\\\\\\\\" is protected and can only be added by moderators\\\\\\\\\\\\',\\\\\\\\n      });\\\\\\\\n      return;\\\\\\\\n    }\\\\\\\\n  });\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst setLabels = (labels) => {\\\\\\\\n  labels = labels.map((o) => {\\\\\\\\n    o.name = normalizeLabel(o.name);\\\\\\\\n    return o;\\\\\\\\n  });\\\\\\\\n  if (labels.length < state.labels.length) {\\\\\\\\n    let oldLabels = new Set(state.labels.map((label) => label.name));\\\\\\\\n    for (let label of labels) {\\\\\\\\n      oldLabels.delete(label.name);\\\\\\\\n    }\\\\\\\\n    let removed = oldLabels.values().next().value;\\\\\\\\n    Near.asyncView(\\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"is_allowed_to_use_labels\\\\\\\\\\\\\\\", {\\\\\\\\n      editor: context.accountId,\\\\\\\\n      labels: [removed],\\\\\\\\n    }).then((allowed) => {\\\\\\\\n      if (allowed) {\\\\\\\\n        let labelStrings = labels.map(({ name }) => name);\\\\\\\\n        State.update({ labels, labelStrings });\\\\\\\\n      } else {\\\\\\\\n        State.update({\\\\\\\\n          warning:\\\\\\\\n            \\\\\\\\\\\\'The label \\\\\\\\\\\\\\\"\\\\\\\\\\\\' +\\\\\\\\n            removed +\\\\\\\\n            \\\\\\\\\\\\'\\\\\\\\\\\\\\\" is protected and can only be updated by moderators\\\\\\\\\\\\',\\\\\\\\n        });\\\\\\\\n        return;\\\\\\\\n      }\\\\\\\\n    });\\\\\\\\n  } else {\\\\\\\\n    let labelStrings = labels.map((o) => {\\\\\\\\n      return o.name;\\\\\\\\n    });\\\\\\\\n    State.update({ labels, labelStrings });\\\\\\\\n  }\\\\\\\\n};\\\\\\\\nconst existingLabelStrings =\\\\\\\\n  Near.view(\\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"get_all_allowed_labels\\\\\\\\\\\\\\\", {\\\\\\\\n    editor: context.accountId,\\\\\\\\n  }) ?? [];\\\\\\\\nconst existingLabelSet = new Set(existingLabelStrings);\\\\\\\\nconst existingLabels = existingLabelStrings.map((s) => {\\\\\\\\n  return { name: s };\\\\\\\\n});\\\\\\\\n\\\\\\\\nconst labelEditor = (\\\\\\\\n  <div className=\\\\\\\\\\\\\\\"col-lg-12 mb-2\\\\\\\\\\\\\\\">\\\\\\\\n    <p className=\\\\\\\\\\\\\\\"fs-6 fw-bold mb-1\\\\\\\\\\\\\\\">Labels</p>\\\\\\\\n    <Typeahead\\\\\\\\n      multiple\\\\\\\\n      labelKey=\\\\\\\\\\\\\\\"name\\\\\\\\\\\\\\\"\\\\\\\\n      onInputChange={checkLabel}\\\\\\\\n      onChange={setLabels}\\\\\\\\n      options={existingLabels}\\\\\\\\n      placeholder=\\\\\\\\\\\\\\\"near.social, widget, NEP, standard, protocol, tool\\\\\\\\\\\\\\\"\\\\\\\\n      selected={state.labels}\\\\\\\\n      positionFixed\\\\\\\\n      allowNew={(results, props) => {\\\\\\\\n        return (\\\\\\\\n          !existingLabelSet.has(props.text) &&\\\\\\\\n          props.selected.filter((selected) => selected.name === props.text)\\\\\\\\n            .length == 0 &&\\\\\\\\n          Near.view(\\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"is_allowed_to_use_labels\\\\\\\\\\\\\\\", {\\\\\\\\n            editor: context.accountId,\\\\\\\\n            labels: [props.text],\\\\\\\\n          })\\\\\\\\n        );\\\\\\\\n      }}\\\\\\\\n    />\\\\\\\\n  </div>\\\\\\\\n);\\\\\\\\n\\\\\\\\nconst nameDiv = (\\\\\\\\n  <div className=\\\\\\\\\\\\\\\"col-lg-6 mb-2\\\\\\\\\\\\\\\">\\\\\\\\n    <p className=\\\\\\\\\\\\\\\"fs-6 fw-bold mb-1\\\\\\\\\\\\\\\">Title</p>\\\\\\\\n    <input\\\\\\\\n      type=\\\\\\\\\\\\\\\"text\\\\\\\\\\\\\\\"\\\\\\\\n      value={state.name}\\\\\\\\n      onChange={(event) => State.update({ name: event.target.value })}\\\\\\\\n    />\\\\\\\\n  </div>\\\\\\\\n);\\\\\\\\n\\\\\\\\nconst descriptionDiv = (\\\\\\\\n  <div className=\\\\\\\\\\\\\\\"col-lg-12 mb-2\\\\\\\\\\\\\\\">\\\\\\\\n    <p className=\\\\\\\\\\\\\\\"fs-6 fw-bold mb-1\\\\\\\\\\\\\\\">Description</p>\\\\\\\\n    <Widget\\\\\\\\n      src=\\\\\\\\\\\\\\\"devhub.near/widget/devhub.components.molecule.MarkdownEditor\\\\\\\\\\\\\\\"\\\\\\\\n      props={{\\\\\\\\n        data: { handler: state.handler, content: state.description },\\\\\\\\n        onChange: (content) => {\\\\\\\\n          State.update({ description: content, handler: \\\\\\\\\\\\\\\"update\\\\\\\\\\\\\\\" });\\\\\\\\n          textareaInputHandler(content);\\\\\\\\n        },\\\\\\\\n      }}\\\\\\\\n    />\\\\\\\\n    {autocompleteEnabled && state.showAccountAutocomplete && (\\\\\\\\n      <AutoComplete>\\\\\\\\n        <Widget\\\\\\\\n          src=\\\\\\\\\\\\\\\"near/widget/AccountAutocomplete\\\\\\\\\\\\\\\"\\\\\\\\n          props={{\\\\\\\\n            term: state.text.split(\\\\\\\\\\\\\\\"@\\\\\\\\\\\\\\\").pop(),\\\\\\\\n            onSelect: autoCompleteAccountId,\\\\\\\\n            onClose: () => State.update({ showAccountAutocomplete: false }),\\\\\\\\n          }}\\\\\\\\n        />\\\\\\\\n      </AutoComplete>\\\\\\\\n    )}\\\\\\\\n  </div>\\\\\\\\n);\\\\\\\\n\\\\\\\\nconst isFundraisingDiv = (\\\\\\\\n  // This is jank with just btns and not radios. But the radios were glitchy af\\\\\\\\n  <>\\\\\\\\n    <div class=\\\\\\\\\\\\\\\"mb-2\\\\\\\\\\\\\\\">\\\\\\\\n      <p class=\\\\\\\\\\\\\\\"fs-6 fw-bold mb-1\\\\\\\\\\\\\\\">\\\\\\\\n        Are you seeking funding for your solution?\\\\\\\\n        <span class=\\\\\\\\\\\\\\\"text-muted fw-normal\\\\\\\\\\\\\\\">(Optional)</span>\\\\\\\\n      </p>\\\\\\\\n      <div class=\\\\\\\\\\\\\\\"form-check form-check-inline\\\\\\\\\\\\\\\">\\\\\\\\n        <label class=\\\\\\\\\\\\\\\"form-check-label\\\\\\\\\\\\\\\">\\\\\\\\n          <button\\\\\\\\n            className=\\\\\\\\\\\\\\\"btn btn-light p-0\\\\\\\\\\\\\\\"\\\\\\\\n            style={{\\\\\\\\n              backgroundColor: state.seekingFunding ? \\\\\\\\\\\\\\\"#0C7283\\\\\\\\\\\\\\\" : \\\\\\\\\\\\\\\"inherit\\\\\\\\\\\\\\\",\\\\\\\\n              color: \\\\\\\\\\\\\\\"#f3f3f3\\\\\\\\\\\\\\\",\\\\\\\\n              border: \\\\\\\\\\\\\\\"solid #D9D9D9\\\\\\\\\\\\\\\",\\\\\\\\n              borderRadius: \\\\\\\\\\\\\\\"100%\\\\\\\\\\\\\\\",\\\\\\\\n              height: \\\\\\\\\\\\\\\"20px\\\\\\\\\\\\\\\",\\\\\\\\n              width: \\\\\\\\\\\\\\\"20px\\\\\\\\\\\\\\\",\\\\\\\\n            }}\\\\\\\\n            onClick={() => State.update({ seekingFunding: true })}\\\\\\\\n          />\\\\\\\\n          Yes\\\\\\\\n        </label>\\\\\\\\n      </div>\\\\\\\\n      <div class=\\\\\\\\\\\\\\\"form-check form-check-inline\\\\\\\\\\\\\\\">\\\\\\\\n        <label class=\\\\\\\\\\\\\\\"form-check-label\\\\\\\\\\\\\\\">\\\\\\\\n          <button\\\\\\\\n            className=\\\\\\\\\\\\\\\"btn btn-light p-0\\\\\\\\\\\\\\\"\\\\\\\\n            style={{\\\\\\\\n              backgroundColor: !state.seekingFunding ? \\\\\\\\\\\\\\\"#0C7283\\\\\\\\\\\\\\\" : \\\\\\\\\\\\\\\"inherit\\\\\\\\\\\\\\\",\\\\\\\\n              color: \\\\\\\\\\\\\\\"#f3f3f3\\\\\\\\\\\\\\\",\\\\\\\\n              border: \\\\\\\\\\\\\\\"solid #D9D9D9\\\\\\\\\\\\\\\",\\\\\\\\n              borderRadius: \\\\\\\\\\\\\\\"100%\\\\\\\\\\\\\\\",\\\\\\\\n              height: \\\\\\\\\\\\\\\"20px\\\\\\\\\\\\\\\",\\\\\\\\n              width: \\\\\\\\\\\\\\\"20px\\\\\\\\\\\\\\\",\\\\\\\\n            }}\\\\\\\\n            onClick={() => State.update({ seekingFunding: false })}\\\\\\\\n          />\\\\\\\\n          No\\\\\\\\n        </label>\\\\\\\\n      </div>\\\\\\\\n    </div>\\\\\\\\n  </>\\\\\\\\n);\\\\\\\\n\\\\\\\\nconst fundraisingDiv = (\\\\\\\\n  <div class=\\\\\\\\\\\\\\\"d-flex flex-column mb-2\\\\\\\\\\\\\\\">\\\\\\\\n    <div className=\\\\\\\\\\\\\\\"col-lg-6  mb-2\\\\\\\\\\\\\\\">\\\\\\\\n      Currency\\\\\\\\n      <select\\\\\\\\n        onChange={(event) => State.update({ token: event.target.value })}\\\\\\\\n        class=\\\\\\\\\\\\\\\"form-select\\\\\\\\\\\\\\\"\\\\\\\\n        aria-label=\\\\\\\\\\\\\\\"Default select\\\\\\\\\\\\\\\"\\\\\\\\n      >\\\\\\\\n        <option selected value=\\\\\\\\\\\\\\\"USDT\\\\\\\\\\\\\\\">\\\\\\\\n          USDT\\\\\\\\n        </option>\\\\\\\\n        <option value=\\\\\\\\\\\\\\\"NEAR\\\\\\\\\\\\\\\">NEAR</option>\\\\\\\\n      </select>\\\\\\\\n    </div>\\\\\\\\n    <div className=\\\\\\\\\\\\\\\"col-lg-6 mb-2\\\\\\\\\\\\\\\">\\\\\\\\n      Requested amount <span class=\\\\\\\\\\\\\\\"text-muted fw-normal\\\\\\\\\\\\\\\">(Numbers Only)</span>\\\\\\\\n      <input\\\\\\\\n        type=\\\\\\\\\\\\\\\"number\\\\\\\\\\\\\\\"\\\\\\\\n        value={parseInt(state.amount) > 0 ? state.amount : \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\"}\\\\\\\\n        min={0}\\\\\\\\n        onChange={(event) =>\\\\\\\\n          State.update({\\\\\\\\n            amount: Number(\\\\\\\\n              event.target.value.toString().replace(/e/g, \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\")\\\\\\\\n            ).toString(),\\\\\\\\n          })\\\\\\\\n        }\\\\\\\\n      />\\\\\\\\n    </div>\\\\\\\\n    <div className=\\\\\\\\\\\\\\\"col-lg-6 mb-2\\\\\\\\\\\\\\\">\\\\\\\\n      <p class=\\\\\\\\\\\\\\\"mb-1\\\\\\\\\\\\\\\">\\\\\\\\n        Requested sponsor <span class=\\\\\\\\\\\\\\\"text-muted fw-normal\\\\\\\\\\\\\\\">(Optional)</span>\\\\\\\\n      </p>\\\\\\\\n      <p style={{ fontSize: \\\\\\\\\\\\\\\"13px\\\\\\\\\\\\\\\" }} class=\\\\\\\\\\\\\\\"m-0 text-muted fw-light\\\\\\\\\\\\\\\">\\\\\\\\n        If you are requesting funding from a specific sponsor, please enter\\\\\\\\n        their username.\\\\\\\\n      </p>\\\\\\\\n      <div class=\\\\\\\\\\\\\\\"input-group flex-nowrap\\\\\\\\\\\\\\\">\\\\\\\\n        <span class=\\\\\\\\\\\\\\\"input-group-text\\\\\\\\\\\\\\\" id=\\\\\\\\\\\\\\\"addon-wrapping\\\\\\\\\\\\\\\">\\\\\\\\n          @\\\\\\\\n        </span>\\\\\\\\n        <input\\\\\\\\n          type=\\\\\\\\\\\\\\\"text\\\\\\\\\\\\\\\"\\\\\\\\n          class=\\\\\\\\\\\\\\\"form-control\\\\\\\\\\\\\\\"\\\\\\\\n          placeholder=\\\\\\\\\\\\\\\"Enter username\\\\\\\\\\\\\\\"\\\\\\\\n          value={state.supervisor}\\\\\\\\n          onChange={(event) => State.update({ supervisor: event.target.value })}\\\\\\\\n        />\\\\\\\\n      </div>\\\\\\\\n    </div>\\\\\\\\n  </div>\\\\\\\\n);\\\\\\\\n\\\\\\\\nfunction generateDescription(text, amount, token, supervisor, seekingFunding) {\\\\\\\\n  const fundingText =\\\\\\\\n    amount > 0 && token ? `###### Requested amount: ${amount} ${token}\\\\\\\\\\\\\\\\n` : \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\";\\\\\\\\n  const supervisorText = supervisor\\\\\\\\n    ? `###### Requested sponsor: @${supervisor}\\\\\\\\\\\\\\\\n`\\\\\\\\n    : \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\";\\\\\\\\n  return seekingFunding ? `${fundingText}${supervisorText}${text}` : text;\\\\\\\\n}\\\\\\\\n\\\\\\\\nreturn (\\\\\\\\n  <div class=\\\\\\\\\\\\\\\"bg-light d-flex flex-column flex-grow-1 w-100\\\\\\\\\\\\\\\">\\\\\\\\n    <div class=\\\\\\\\\\\\\\\"mx-5 mb-5\\\\\\\\\\\\\\\">\\\\\\\\n      <div aria-label=\\\\\\\\\\\\\\\"breadcrumb\\\\\\\\\\\\\\\">\\\\\\\\n        <ol class=\\\\\\\\\\\\\\\"breadcrumb\\\\\\\\\\\\\\\">\\\\\\\\n          <li class=\\\\\\\\\\\\\\\"breadcrumb-item\\\\\\\\\\\\\\\">\\\\\\\\n            <Link\\\\\\\\n              style={{\\\\\\\\n                color: \\\\\\\\\\\\\\\"#3252A6\\\\\\\\\\\\\\\",\\\\\\\\n              }}\\\\\\\\n              className=\\\\\\\\\\\\\\\"fw-bold\\\\\\\\\\\\\\\"\\\\\\\\n              to={href({\\\\\\\\n                widgetSrc: \\\\\\\\\\\\\\\"devhub.near/widget/app\\\\\\\\\\\\\\\",\\\\\\\\n                params: { page: \\\\\\\\\\\\\\\"feed\\\\\\\\\\\\\\\" },\\\\\\\\n              })}\\\\\\\\n            >\\\\\\\\n              DevHub\\\\\\\\n            </Link>\\\\\\\\n          </li>\\\\\\\\n          <li class=\\\\\\\\\\\\\\\"breadcrumb-item active\\\\\\\\\\\\\\\" aria-current=\\\\\\\\\\\\\\\"page\\\\\\\\\\\\\\\">\\\\\\\\n            Create new\\\\\\\\n          </li>\\\\\\\\n        </ol>\\\\\\\\n      </div>\\\\\\\\n      {props.transactionHashes ? (\\\\\\\\n        <>\\\\\\\\n          Post created successfully. Back to{\\\\\\\\\\\\\\\" \\\\\\\\\\\\\\\"}\\\\\\\\n          <Link\\\\\\\\n            style={{\\\\\\\\n              color: \\\\\\\\\\\\\\\"#3252A6\\\\\\\\\\\\\\\",\\\\\\\\n            }}\\\\\\\\n            className=\\\\\\\\\\\\\\\"fw-bold\\\\\\\\\\\\\\\"\\\\\\\\n            to={href({\\\\\\\\n              widgetSrc: \\\\\\\\\\\\\\\"devhub.near/widget/app\\\\\\\\\\\\\\\",\\\\\\\\n              params: { page: \\\\\\\\\\\\\\\"feed\\\\\\\\\\\\\\\" },\\\\\\\\n            })}\\\\\\\\n          >\\\\\\\\n            feed\\\\\\\\n          </Link>\\\\\\\\n        </>\\\\\\\\n      ) : (\\\\\\\\n        <>\\\\\\\\n          <h4>Create a new post</h4>\\\\\\\\n          <p>{state.seekingFunding}</p>\\\\\\\\n          <div class=\\\\\\\\\\\\\\\"card border-light\\\\\\\\\\\\\\\">\\\\\\\\n            <div class=\\\\\\\\\\\\\\\"card-body\\\\\\\\\\\\\\\">\\\\\\\\n              <p class=\\\\\\\\\\\\\\\"card-title fw-bold fs-6\\\\\\\\\\\\\\\">What do you want to create?</p>\\\\\\\\n              <div class=\\\\\\\\\\\\\\\"d-flex flex-row gap-2\\\\\\\\\\\\\\\">\\\\\\\\n                <button\\\\\\\\n                  onClick={onIdeaClick}\\\\\\\\n                  type=\\\\\\\\\\\\\\\"button\\\\\\\\\\\\\\\"\\\\\\\\n                  class={`btn btn-outline-secondary`}\\\\\\\\n                  style={\\\\\\\\n                    state.postType === \\\\\\\\\\\\\\\"Idea\\\\\\\\\\\\\\\"\\\\\\\\n                      ? {\\\\\\\\n                          backgroundColor: \\\\\\\\\\\\\\\"#0C7283\\\\\\\\\\\\\\\",\\\\\\\\n                          color: \\\\\\\\\\\\\\\"#f3f3f3\\\\\\\\\\\\\\\",\\\\\\\\n                        }\\\\\\\\n                      : {}\\\\\\\\n                  }\\\\\\\\n                >\\\\\\\\n                  <i class=\\\\\\\\\\\\\\\"bi bi-lightbulb\\\\\\\\\\\\\\\"></i>\\\\\\\\n                  Idea\\\\\\\\n                </button>\\\\\\\\n                <button\\\\\\\\n                  onClick={onSolutionClick}\\\\\\\\n                  type=\\\\\\\\\\\\\\\"button\\\\\\\\\\\\\\\"\\\\\\\\n                  class={`btn btn-outline-secondary`}\\\\\\\\n                  style={\\\\\\\\n                    state.postType !== \\\\\\\\\\\\\\\"Idea\\\\\\\\\\\\\\\"\\\\\\\\n                      ? {\\\\\\\\n                          backgroundColor: \\\\\\\\\\\\\\\"#0C7283\\\\\\\\\\\\\\\",\\\\\\\\n                          color: \\\\\\\\\\\\\\\"#f3f3f3\\\\\\\\\\\\\\\",\\\\\\\\n                        }\\\\\\\\n                      : {}\\\\\\\\n                  }\\\\\\\\n                >\\\\\\\\n                  <i class=\\\\\\\\\\\\\\\"bi bi-rocket\\\\\\\\\\\\\\\"></i>\\\\\\\\n                  Solution\\\\\\\\n                </button>\\\\\\\\n              </div>\\\\\\\\n              <p class=\\\\\\\\\\\\\\\"text-muted w-75 my-1\\\\\\\\\\\\\\\">\\\\\\\\n                {state.postType === \\\\\\\\\\\\\\\"Idea\\\\\\\\\\\\\\\"\\\\\\\\n                  ? \\\\\\\\\\\\\\\"Get feedback from the community about a problem, opportunity, or need.\\\\\\\\\\\\\\\"\\\\\\\\n                  : \\\\\\\\\\\\\\\"Provide a specific proposal or implementation to an idea, optionally requesting funding. If your solution relates to an existing idea, please reply to the original post with a solution.\\\\\\\\\\\\\\\"}\\\\\\\\n              </p>\\\\\\\\n              {state.warning && (\\\\\\\\n                <div\\\\\\\\n                  class=\\\\\\\\\\\\\\\"alert alert-warning alert-dismissible fade show\\\\\\\\\\\\\\\"\\\\\\\\n                  role=\\\\\\\\\\\\\\\"alert\\\\\\\\\\\\\\\"\\\\\\\\n                >\\\\\\\\n                  {state.warning}\\\\\\\\n                  <button\\\\\\\\n                    type=\\\\\\\\\\\\\\\"button\\\\\\\\\\\\\\\"\\\\\\\\n                    class=\\\\\\\\\\\\\\\"btn-close\\\\\\\\\\\\\\\"\\\\\\\\n                    data-bs-dismiss=\\\\\\\\\\\\\\\"alert\\\\\\\\\\\\\\\"\\\\\\\\n                    aria-label=\\\\\\\\\\\\\\\"Close\\\\\\\\\\\\\\\"\\\\\\\\n                    onClick={() => State.update({ warning: \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\" })}\\\\\\\\n                  ></button>\\\\\\\\n                </div>\\\\\\\\n              )}\\\\\\\\n              <div className=\\\\\\\\\\\\\\\"row\\\\\\\\\\\\\\\">\\\\\\\\n                {nameDiv}\\\\\\\\n                {descriptionDiv}\\\\\\\\n                {labelEditor}\\\\\\\\n                {state.postType === \\\\\\\\\\\\\\\"Solution\\\\\\\\\\\\\\\" && isFundraisingDiv}\\\\\\\\n                {state.seekingFunding && fundraisingDiv}\\\\\\\\n              </div>\\\\\\\\n              <button\\\\\\\\n                style={{\\\\\\\\n                  width: \\\\\\\\\\\\\\\"7rem\\\\\\\\\\\\\\\",\\\\\\\\n                  backgroundColor: \\\\\\\\\\\\\\\"#0C7283\\\\\\\\\\\\\\\",\\\\\\\\n                  color: \\\\\\\\\\\\\\\"#f3f3f3\\\\\\\\\\\\\\\",\\\\\\\\n                }}\\\\\\\\n                disabled={\\\\\\\\n                  state.seekingFunding && (!state.amount || state.amount < 1)\\\\\\\\n                }\\\\\\\\n                className=\\\\\\\\\\\\\\\"btn btn-light mb-2 p-3\\\\\\\\\\\\\\\"\\\\\\\\n                onClick={onSubmit}\\\\\\\\n              >\\\\\\\\n                Submit\\\\\\\\n              </button>\\\\\\\\n            </div>\\\\\\\\n            <div class=\\\\\\\\\\\\\\\"bg-light d-flex flex-row p-1 border-bottom\\\\\\\\\\\\\\\"></div>\\\\\\\\n            <div class=\\\\\\\\\\\\\\\"card-body\\\\\\\\\\\\\\\">\\\\\\\\n              <p class=\\\\\\\\\\\\\\\"text-muted m-0\\\\\\\\\\\\\\\">Preview</p>\\\\\\\\n              <div>\\\\\\\\n                <Widget\\\\\\\\n                  src=\\\\\\\\\\\\\\\"devhub.near/widget/devhub.entity.post.Post\\\\\\\\\\\\\\\"\\\\\\\\n                  props={{\\\\\\\\n                    isPreview: true,\\\\\\\\n                    id: 0, // irrelevant\\\\\\\\n                    post: {\\\\\\\\n                      author_id: state.author_id,\\\\\\\\n                      likes: [],\\\\\\\\n                      snapshot: {\\\\\\\\n                        editor_id: state.editor_id,\\\\\\\\n                        labels: state.labelStrings,\\\\\\\\n                        post_type: state.postType,\\\\\\\\n                        name: state.name,\\\\\\\\n                        description: generateDescription(\\\\\\\\n                          state.description,\\\\\\\\n                          state.amount,\\\\\\\\n                          state.token,\\\\\\\\n                          state.supervisor,\\\\\\\\n                          state.seekingFunding\\\\\\\\n                        ),\\\\\\\\n                        github_link: state.githubLink,\\\\\\\\n                      },\\\\\\\\n                    },\\\\\\\\n                  }}\\\\\\\\n                />\\\\\\\\n              </div>\\\\\\\\n            </div>\\\\\\\\n          </div>\\\\\\\\n        </>\\\\\\\\n      )}\\\\\\\\n    </div>\\\\\\\\n  </div>\\\\\\\\n);\\\\\\\\n\"}, \"devhub.entity.post.List\": {\"\": \"// This component implementation was forked from [IndexFeed], but it does not fully implement lazy loading.\\\\\\\\n// While this component uses InfiniteScroll, it still loads the whole list of Post IDs in one view call.\\\\\\\\n// The contract will need to be extended with pagination support, yet, even in the current state the page loads much faster.\\\\\\\\n// [IndexFeed]: https://near.social/#/mob.near/widget/WidgetSource?src=mob.near/widget/IndexFeed\\\\\\\\n\\\\\\\\nconst { href } = VM.require(\\\\\\\\\\\\\\\"devhub.near/widget/core.lib.url\\\\\\\\\\\\\\\");\\\\\\\\n\\\\\\\\nconst { draftState, onDraftStateChange } = VM.require(\\\\\\\\n  \\\\\\\\\\\\\\\"devhub.near/widget/devhub.entity.post.draft\\\\\\\\\\\\\\\"\\\\\\\\n);\\\\\\\\n\\\\\\\\nif (!href) {\\\\\\\\n  return <p>Loading modules...</p>;\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst QUERYAPI_ENDPOINT = `https://near-queryapi.api.pagoda.co/v1/graphql/`;\\\\\\\\n\\\\\\\\nconst queryName =\\\\\\\\n  props.queryName ?? `bo_near_devhub_v17_posts_with_latest_snapshot`;\\\\\\\\n\\\\\\\\nconst query = `query DevhubPostsQuery($limit: Int = 100, $offset: Int = 0, $where: ${queryName}_bool_exp = {}) {\\\\\\\\n    ${queryName}(\\\\\\\\n      limit: $limit\\\\\\\\n      offset: $offset\\\\\\\\n      order_by: {block_height: desc}\\\\\\\\n      where: $where\\\\\\\\n    ) {\\\\\\\\n      post_id\\\\\\\\n    }\\\\\\\\n  }\\\\\\\\n`;\\\\\\\\n\\\\\\\\nfunction fetchGraphQL(operationsDoc, operationName, variables) {\\\\\\\\n  return asyncFetch(QUERYAPI_ENDPOINT, {\\\\\\\\n    method: \\\\\\\\\\\\\\\"POST\\\\\\\\\\\\\\\",\\\\\\\\n    headers: { \\\\\\\\\\\\\\\"x-hasura-role\\\\\\\\\\\\\\\": `bo_near` },\\\\\\\\n    body: JSON.stringify({\\\\\\\\n      query: operationsDoc,\\\\\\\\n      variables: variables,\\\\\\\\n      operationName: operationName,\\\\\\\\n    }),\\\\\\\\n  });\\\\\\\\n}\\\\\\\\n\\\\\\\\nfunction searchConditionChanged() {\\\\\\\\n  return (\\\\\\\\n    props.author != state.author ||\\\\\\\\n    props.term != state.term ||\\\\\\\\n    props.tag != state.tag ||\\\\\\\\n    props.recency != state.recency\\\\\\\\n  );\\\\\\\\n}\\\\\\\\n\\\\\\\\nfunction updateSearchCondition() {\\\\\\\\n  State.update({\\\\\\\\n    author: props.author,\\\\\\\\n    term: props.term,\\\\\\\\n    tag: props.tag,\\\\\\\\n    recency: props.recency,\\\\\\\\n    loading: true,\\\\\\\\n  });\\\\\\\\n}\\\\\\\\n\\\\\\\\nfunction getPostIds() {\\\\\\\\n  if (searchConditionChanged()) {\\\\\\\\n    updateSearchCondition();\\\\\\\\n    return;\\\\\\\\n  }\\\\\\\\n  let where = {};\\\\\\\\n  let authorId = props.author;\\\\\\\\n  let label = props.tag;\\\\\\\\n  if (authorId) {\\\\\\\\n    where = { author_id: { _eq: authorId }, ...where };\\\\\\\\n  }\\\\\\\\n  if (props.term) {\\\\\\\\n    where = { description: { _ilike: `%${props.term}%` }, ...where };\\\\\\\\n  }\\\\\\\\n  if (label) {\\\\\\\\n    if (typeof label === \\\\\\\\\\\\\\\"string\\\\\\\\\\\\\\\") {\\\\\\\\n      // Handle a single label\\\\\\\\n      where = { labels: { _contains: label }, ...where };\\\\\\\\n    } else if (Array.isArray(label)) {\\\\\\\\n      // Handle an array of labels\\\\\\\\n      where = {\\\\\\\\n        labels: {\\\\\\\\n          _containsAny: label,\\\\\\\\n        },\\\\\\\\n        ...where,\\\\\\\\n      };\\\\\\\\n    }\\\\\\\\n  }\\\\\\\\n  if (!props.recency) {\\\\\\\\n    // show only top level posts\\\\\\\\n    where = { parent_id: { _is_null: true }, ...where };\\\\\\\\n  }\\\\\\\\n\\\\\\\\n  // Don\\\\\\\\\\\\'t show blog\\\\\\\\n  where = {\\\\\\\\n    _not: {\\\\\\\\n      labels: { _contains: \\\\\\\\\\\\\\\"blog\\\\\\\\\\\\\\\" },\\\\\\\\n      parent_id: { _is_null: true },\\\\\\\\n      post_type: { _eq: \\\\\\\\\\\\\\\"Comment\\\\\\\\\\\\\\\" },\\\\\\\\n    },\\\\\\\\n    ...where,\\\\\\\\n  };\\\\\\\\n\\\\\\\\n  console.log(\\\\\\\\\\\\\\\"searching for\\\\\\\\\\\\\\\", where);\\\\\\\\n  fetchGraphQL(query, \\\\\\\\\\\\\\\"DevhubPostsQuery\\\\\\\\\\\\\\\", {\\\\\\\\n    limit: 100,\\\\\\\\n    offset: 0,\\\\\\\\n    where,\\\\\\\\n  }).then((result) => {\\\\\\\\n    if (result.status === 200) {\\\\\\\\n      console.log(\\\\\\\\\\\\\\\"search success\\\\\\\\\\\\\\\");\\\\\\\\n      if (result.body.data) {\\\\\\\\n        const data = result.body.data[queryName];\\\\\\\\n        State.update({\\\\\\\\n          postIds: data.map((p) => p.post_id),\\\\\\\\n          loading: false,\\\\\\\\n        });\\\\\\\\n        console.log(\\\\\\\\\\\\\\\"found:\\\\\\\\\\\\\\\");\\\\\\\\n        console.log(data);\\\\\\\\n      }\\\\\\\\n    } else {\\\\\\\\n      console.error(\\\\\\\\\\\\\\\"error:\\\\\\\\\\\\\\\", result.body);\\\\\\\\n      State.update({ loading: false });\\\\\\\\n    }\\\\\\\\n  });\\\\\\\\n}\\\\\\\\n\\\\\\\\nState.init({\\\\\\\\n  period: \\\\\\\\\\\\\\\"week\\\\\\\\\\\\\\\",\\\\\\\\n});\\\\\\\\n\\\\\\\\ngetPostIds();\\\\\\\\n\\\\\\\\nfunction defaultRenderItem(postId, additionalProps) {\\\\\\\\n  if (!additionalProps) {\\\\\\\\n    additionalProps = {};\\\\\\\\n  }\\\\\\\\n  // It is important to have a non-zero-height element as otherwise InfiniteScroll loads too many items on initial load\\\\\\\\n  return (\\\\\\\\n    <div className=\\\\\\\\\\\\\\\"py-2\\\\\\\\\\\\\\\" style={{ minHeight: \\\\\\\\\\\\\\\"150px\\\\\\\\\\\\\\\" }}>\\\\\\\\n      <Widget\\\\\\\\n        src={\\\\\\\\\\\\\\\"devhub.near/widget/devhub.entity.post.Post\\\\\\\\\\\\\\\"}\\\\\\\\n        props={{\\\\\\\\n          id: postId,\\\\\\\\n          expandable: true,\\\\\\\\n          defaultExpanded: false,\\\\\\\\n          isInList: true,\\\\\\\\n          draftState,\\\\\\\\n          isPreview: false,\\\\\\\\n          onDraftStateChange,\\\\\\\\n          ...additionalProps,\\\\\\\\n          referral: postId,\\\\\\\\n        }}\\\\\\\\n      />\\\\\\\\n    </div>\\\\\\\\n  );\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst renderItem = props.renderItem ?? defaultRenderItem;\\\\\\\\n\\\\\\\\nconst cachedRenderItem = (item, i) => {\\\\\\\\n  if (props.term) {\\\\\\\\n    return renderItem(item, {\\\\\\\\n      searchKeywords: [props.term],\\\\\\\\n    });\\\\\\\\n  }\\\\\\\\n\\\\\\\\n  const key = JSON.stringify(item);\\\\\\\\n\\\\\\\\n  if (!(key in state.cachedItems)) {\\\\\\\\n    state.cachedItems[key] = renderItem(item);\\\\\\\\n    State.update();\\\\\\\\n  }\\\\\\\\n  return state.cachedItems[key];\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst initialRenderLimit = props.initialRenderLimit ?? 3;\\\\\\\\nconst addDisplayCount = props.nextLimit ?? initialRenderLimit;\\\\\\\\n\\\\\\\\nconst ONE_DAY = 60 * 60 * 24 * 1000;\\\\\\\\nconst ONE_WEEK = 60 * 60 * 24 * 1000 * 7;\\\\\\\\nconst ONE_MONTH = 60 * 60 * 24 * 1000 * 30;\\\\\\\\n\\\\\\\\nfunction getHotnessScore(post) {\\\\\\\\n  //post.id - shows the age of the post, should grow exponentially, since newer posts are more important\\\\\\\\n  //post.likes.length - linear value\\\\\\\\n  const age = Math.pow(post.id, 5);\\\\\\\\n  const comments = post.comments;\\\\\\\\n  const commentAge = comments.reduce((sum, age) => sum + Math.pow(age, 5), 0);\\\\\\\\n  const totalAge = age + commentAge;\\\\\\\\n  //use log functions to make likes score and exponentially big age score close to each other\\\\\\\\n  return Math.log10(post.likes.length) + Math.log(Math.log10(totalAge));\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst getPeriodText = (period) => {\\\\\\\\n  let text = \\\\\\\\\\\\\\\"Last 24 hours\\\\\\\\\\\\\\\";\\\\\\\\n  if (period === \\\\\\\\\\\\\\\"week\\\\\\\\\\\\\\\") {\\\\\\\\n    text = \\\\\\\\\\\\\\\"Last week\\\\\\\\\\\\\\\";\\\\\\\\n  }\\\\\\\\n  if (period === \\\\\\\\\\\\\\\"month\\\\\\\\\\\\\\\") {\\\\\\\\n    text = \\\\\\\\\\\\\\\"Last month\\\\\\\\\\\\\\\";\\\\\\\\n  }\\\\\\\\n  return text;\\\\\\\\n};\\\\\\\\n\\\\\\\\nlet postIds = state.postIds ?? null;\\\\\\\\n\\\\\\\\nconst loader = (\\\\\\\\n  <div className=\\\\\\\\\\\\\\\"loader\\\\\\\\\\\\\\\" key={\\\\\\\\\\\\\\\"loader\\\\\\\\\\\\\\\"}>\\\\\\\\n    <span\\\\\\\\n      className=\\\\\\\\\\\\\\\"spinner-grow spinner-grow-sm me-1\\\\\\\\\\\\\\\"\\\\\\\\n      role=\\\\\\\\\\\\\\\"status\\\\\\\\\\\\\\\"\\\\\\\\n      aria-hidden=\\\\\\\\\\\\\\\"true\\\\\\\\\\\\\\\"\\\\\\\\n    />\\\\\\\\n    Loading ...\\\\\\\\n  </div>\\\\\\\\n);\\\\\\\\n\\\\\\\\nif (postIds === null) {\\\\\\\\n  return loader;\\\\\\\\n}\\\\\\\\nconst initialItems = postIds;\\\\\\\\n//const initialItems = postIds.map(postId => ({ id: postId, ...Near.view(nearDevGovGigsContractAccountId, \\\\\\\\\\\\\\\"get_post\\\\\\\\\\\\\\\", { post_id: postId }) }));\\\\\\\\n\\\\\\\\n// const computeFetchFrom = (items, limit) => {\\\\\\\\n//   if (!items || items.length < limit) {\\\\\\\\n//     return false;\\\\\\\\n//   }\\\\\\\\n//   const blockHeight = items[items.length - 1].blockHeight;\\\\\\\\n//   return index.options.order === \\\\\\\\\\\\\\\"desc\\\\\\\\\\\\\\\" ? blockHeight - 1 : blockHeight + 1;\\\\\\\\n// };\\\\\\\\n\\\\\\\\n// const mergeItems = (newItems) => {\\\\\\\\n//   const items = [\\\\\\\\n//     ...new Set([...newItems, ...state.items].map((i) => JSON.stringify(i))),\\\\\\\\n//   ].map((i) => JSON.parse(i));\\\\\\\\n//   items.sort((a, b) => a.blockHeight - b.blockHeight);\\\\\\\\n//   if (index.options.order === \\\\\\\\\\\\\\\"desc\\\\\\\\\\\\\\\") {\\\\\\\\n//     items.reverse();\\\\\\\\n//   }\\\\\\\\n//   return items;\\\\\\\\n// };\\\\\\\\n\\\\\\\\nconst jInitialItems = JSON.stringify(initialItems);\\\\\\\\nif (state.jInitialItems !== jInitialItems) {\\\\\\\\n  // const jIndex = JSON.stringify(index);\\\\\\\\n  // if (jIndex !== state.jIndex) {\\\\\\\\n  State.update({\\\\\\\\n    jIndex,\\\\\\\\n    jInitialItems,\\\\\\\\n    items: initialItems,\\\\\\\\n    fetchFrom: false,\\\\\\\\n    //nextFetchFrom: computeFetchFrom(initialItems, index.options.limit),\\\\\\\\n    nextFetchFrom: false,\\\\\\\\n    displayCount: initialRenderLimit,\\\\\\\\n    cachedItems: {},\\\\\\\\n  });\\\\\\\\n  // } else {\\\\\\\\n  //   State.update({\\\\\\\\n  //     jInitialItems,\\\\\\\\n  //     items: mergeItems(initialItems),\\\\\\\\n  //   });\\\\\\\\n  // }\\\\\\\\n}\\\\\\\\n\\\\\\\\nif (state.fetchFrom) {\\\\\\\\n  // TODO: fetchFrom\\\\\\\\n  // const limit = addDisplayCount;\\\\\\\\n  // const newItems = Social.index(\\\\\\\\n  //   index.action,\\\\\\\\n  //   index.key,\\\\\\\\n  //   Object.assign({}, index.options, {\\\\\\\\n  //     from: state.fetchFrom,\\\\\\\\n  //     subscribe: undefined,\\\\\\\\n  //     limit,\\\\\\\\n  //   })\\\\\\\\n  // );\\\\\\\\n  // if (newItems !== null) {\\\\\\\\n  //   State.update({\\\\\\\\n  //     items: mergeItems(newItems),\\\\\\\\n  //     fetchFrom: false,\\\\\\\\n  //     nextFetchFrom: computeFetchFrom(newItems, limit),\\\\\\\\n  //   });\\\\\\\\n  // }\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst makeMoreItems = () => {\\\\\\\\n  State.update({\\\\\\\\n    displayCount: state.displayCount + addDisplayCount,\\\\\\\\n  });\\\\\\\\n  if (\\\\\\\\n    state.items.length - state.displayCount < addDisplayCount * 2 &&\\\\\\\\n    !state.fetchFrom &&\\\\\\\\n    state.nextFetchFrom &&\\\\\\\\n    state.nextFetchFrom !== state.fetchFrom\\\\\\\\n  ) {\\\\\\\\n    State.update({\\\\\\\\n      fetchFrom: state.nextFetchFrom,\\\\\\\\n    });\\\\\\\\n  }\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst fetchMore =\\\\\\\\n  props.manual &&\\\\\\\\n  (state.fetchFrom && state.items.length < state.displayCount\\\\\\\\n    ? loader\\\\\\\\n    : state.displayCount < state.items.length && (\\\\\\\\n        <div key={\\\\\\\\\\\\\\\"loader more\\\\\\\\\\\\\\\"}>\\\\\\\\n          <a href=\\\\\\\\\\\\\\\"javascript:void\\\\\\\\\\\\\\\" onClick={(e) => makeMoreItems()}>\\\\\\\\n            {props.loadMoreText ?? \\\\\\\\\\\\\\\"Load more...\\\\\\\\\\\\\\\"}\\\\\\\\n          </a>\\\\\\\\n        </div>\\\\\\\\n      ));\\\\\\\\n\\\\\\\\nconst items = state.items ? state.items.slice(0, state.displayCount) : [];\\\\\\\\n\\\\\\\\nconst renderedItems = items.map(cachedRenderItem);\\\\\\\\n\\\\\\\\nconst Head =\\\\\\\\n  props.recency == \\\\\\\\\\\\\\\"hot\\\\\\\\\\\\\\\" ? (\\\\\\\\n    <div class=\\\\\\\\\\\\\\\"row\\\\\\\\\\\\\\\">\\\\\\\\n      <div class=\\\\\\\\\\\\\\\"fs-5 col-6 align-self-center\\\\\\\\\\\\\\\">\\\\\\\\n        <i class=\\\\\\\\\\\\\\\"bi-fire\\\\\\\\\\\\\\\"></i>\\\\\\\\n        <span>Hottest Posts</span>\\\\\\\\n      </div>\\\\\\\\n      <div class=\\\\\\\\\\\\\\\"col-6 dropdown d-flex justify-content-end\\\\\\\\\\\\\\\">\\\\\\\\n        <a\\\\\\\\n          class=\\\\\\\\\\\\\\\"btn btn-secondary dropdown-toggle\\\\\\\\\\\\\\\"\\\\\\\\n          href=\\\\\\\\\\\\\\\"#\\\\\\\\\\\\\\\"\\\\\\\\n          role=\\\\\\\\\\\\\\\"button\\\\\\\\\\\\\\\"\\\\\\\\n          id=\\\\\\\\\\\\\\\"dropdownMenuLink\\\\\\\\\\\\\\\"\\\\\\\\n          data-bs-toggle=\\\\\\\\\\\\\\\"dropdown\\\\\\\\\\\\\\\"\\\\\\\\n          aria-expanded=\\\\\\\\\\\\\\\"false\\\\\\\\\\\\\\\"\\\\\\\\n        >\\\\\\\\n          {getPeriodText(state.period)}\\\\\\\\n        </a>\\\\\\\\n\\\\\\\\n        <ul class=\\\\\\\\\\\\\\\"dropdown-menu\\\\\\\\\\\\\\\" aria-labelledby=\\\\\\\\\\\\\\\"dropdownMenuLink\\\\\\\\\\\\\\\">\\\\\\\\n          <li>\\\\\\\\n            <button\\\\\\\\n              class=\\\\\\\\\\\\\\\"dropdown-item\\\\\\\\\\\\\\\"\\\\\\\\n              onClick={() => {\\\\\\\\n                State.update({ period: \\\\\\\\\\\\\\\"day\\\\\\\\\\\\\\\" });\\\\\\\\n              }}\\\\\\\\n            >\\\\\\\\n              {getPeriodText(\\\\\\\\\\\\\\\"day\\\\\\\\\\\\\\\")}\\\\\\\\n            </button>\\\\\\\\n          </li>\\\\\\\\n          <li>\\\\\\\\n            <button\\\\\\\\n              class=\\\\\\\\\\\\\\\"dropdown-item\\\\\\\\\\\\\\\"\\\\\\\\n              onClick={() => {\\\\\\\\n                State.update({ period: \\\\\\\\\\\\\\\"week\\\\\\\\\\\\\\\" });\\\\\\\\n              }}\\\\\\\\n            >\\\\\\\\n              {getPeriodText(\\\\\\\\\\\\\\\"week\\\\\\\\\\\\\\\")}\\\\\\\\n            </button>\\\\\\\\n          </li>\\\\\\\\n          <li>\\\\\\\\n            <button\\\\\\\\n              class=\\\\\\\\\\\\\\\"dropdown-item\\\\\\\\\\\\\\\"\\\\\\\\n              onClick={() => {\\\\\\\\n                State.update({ period: \\\\\\\\\\\\\\\"month\\\\\\\\\\\\\\\" });\\\\\\\\n              }}\\\\\\\\n            >\\\\\\\\n              {getPeriodText(\\\\\\\\\\\\\\\"month\\\\\\\\\\\\\\\")}\\\\\\\\n            </button>\\\\\\\\n          </li>\\\\\\\\n        </ul>\\\\\\\\n      </div>\\\\\\\\n    </div>\\\\\\\\n  ) : (\\\\\\\\n    <></>\\\\\\\\n  );\\\\\\\\n\\\\\\\\nreturn (\\\\\\\\n  <>\\\\\\\\n    {Head}\\\\\\\\n    {state.loading ? loader : null}\\\\\\\\n    {is_edit_or_add_post_transaction ? (\\\\\\\\n      <p class=\\\\\\\\\\\\\\\"text-secondary mt-4\\\\\\\\\\\\\\\">\\\\\\\\n        Post {transaction_method_name == \\\\\\\\\\\\\\\"edit_post\\\\\\\\\\\\\\\" ? \\\\\\\\\\\\\\\"edited\\\\\\\\\\\\\\\" : \\\\\\\\\\\\\\\"added\\\\\\\\\\\\\\\"}{\\\\\\\\\\\\\\\" \\\\\\\\\\\\\\\"}\\\\\\\\n        successfully. Back to{\\\\\\\\\\\\\\\" \\\\\\\\\\\\\\\"}\\\\\\\\n        <Link\\\\\\\\n          style={{\\\\\\\\n            color: \\\\\\\\\\\\\\\"#3252A6\\\\\\\\\\\\\\\",\\\\\\\\n          }}\\\\\\\\n          className=\\\\\\\\\\\\\\\"fw-bold\\\\\\\\\\\\\\\"\\\\\\\\n          to={href({\\\\\\\\n            widgetSrc: \\\\\\\\\\\\\\\"devhub.near/widget/app\\\\\\\\\\\\\\\",\\\\\\\\n            params: { page: \\\\\\\\\\\\\\\"feed\\\\\\\\\\\\\\\" },\\\\\\\\n          })}\\\\\\\\n        >\\\\\\\\n          feed\\\\\\\\n        </Link>\\\\\\\\n      </p>\\\\\\\\n    ) : state.items.length > 0 ? (\\\\\\\\n      <InfiniteScroll\\\\\\\\n        pageStart={0}\\\\\\\\n        loadMore={makeMoreItems}\\\\\\\\n        hasMore={state.displayCount < state.items.length}\\\\\\\\n        loader={loader}\\\\\\\\n      >\\\\\\\\n        {renderedItems}\\\\\\\\n      </InfiniteScroll>\\\\\\\\n    ) : (\\\\\\\\n      <p class=\\\\\\\\\\\\\\\"text-secondary\\\\\\\\\\\\\\\">\\\\\\\\n        No posts{\\\\\\\\\\\\\\\" \\\\\\\\\\\\\\\"}\\\\\\\\n        {props.term || props.tag || props.author ? \\\\\\\\\\\\\\\"matches search\\\\\\\\\\\\\\\" : \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\"}\\\\\\\\n        {props.recency === \\\\\\\\\\\\\\\"hot\\\\\\\\\\\\\\\"\\\\\\\\n          ? \\\\\\\\\\\\\\\" in \\\\\\\\\\\\\\\" + getPeriodText(state.period).toLowerCase()\\\\\\\\n          : \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\"}\\\\\\\\n      </p>\\\\\\\\n    )}\\\\\\\\n  </>\\\\\\\\n);\\\\\\\\n\"}, \"devhub.entity.post.Post\": {\"\": \"// Ideally, this would be a page\\\\\\\\n\\\\\\\\nconst { href } = VM.require(\\\\\\\\\\\\\\\"devhub.near/widget/core.lib.url\\\\\\\\\\\\\\\");\\\\\\\\n\\\\\\\\nconst { draftState, onDraftStateChange } = VM.require(\\\\\\\\n  \\\\\\\\\\\\\\\"devhub.near/widget/devhub.entity.post.draft\\\\\\\\\\\\\\\"\\\\\\\\n);\\\\\\\\n\\\\\\\\nif (!href) {\\\\\\\\n  return <p>Loading modules...</p>;\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst ButtonWithHover = styled.button`\\\\\\\\n  background-color: #fff;\\\\\\\\n  &:hover {\\\\\\\\n    background-color: #e9ecef;\\\\\\\\n    color: #000;\\\\\\\\n  }\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst postId = props.post.id ?? (props.id ? parseInt(props.id) : 0);\\\\\\\\n\\\\\\\\nconst post =\\\\\\\\n  props.post ??\\\\\\\\n  Near.view(\\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"get_post\\\\\\\\\\\\\\\", { post_id: postId });\\\\\\\\n\\\\\\\\nif (!post) {\\\\\\\\n  return <div>Loading ...</div>;\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst referral = props.referral;\\\\\\\\nconst currentTimestamp = props.timestamp ?? post.snapshot.timestamp;\\\\\\\\nconst compareTimestamp = props.compareTimestamp ?? \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\";\\\\\\\\nconst swapTimestamps = currentTimestamp < compareTimestamp;\\\\\\\\n\\\\\\\\nconst snapshotHistory = post.snapshot_history;\\\\\\\\n\\\\\\\\nconst snapshot =\\\\\\\\n  currentTimestamp === post.snapshot.timestamp\\\\\\\\n    ? post.snapshot\\\\\\\\n    : (snapshotHistory &&\\\\\\\\n        snapshotHistory.find((s) => s.timestamp === currentTimestamp)) ??\\\\\\\\n      null;\\\\\\\\n\\\\\\\\nconst compareSnapshot =\\\\\\\\n  compareTimestamp === post.snapshot.timestamp\\\\\\\\n    ? post.snapshot\\\\\\\\n    : (snapshotHistory &&\\\\\\\\n        snapshotHistory.find((s) => s.timestamp === compareTimestamp)) ??\\\\\\\\n      null;\\\\\\\\n\\\\\\\\n// If this post is displayed under another post. Used to limit the size.\\\\\\\\nconst isUnderPost = props.isUnderPost ? true : false;\\\\\\\\n\\\\\\\\nconst parentId = Near.view(\\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"get_parent_id\\\\\\\\\\\\\\\", {\\\\\\\\n  post_id: postId,\\\\\\\\n});\\\\\\\\n\\\\\\\\nconst childPostIdsUnordered =\\\\\\\\n  Near.view(\\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"get_children_ids\\\\\\\\\\\\\\\", {\\\\\\\\n    post_id: postId,\\\\\\\\n  }) ?? [];\\\\\\\\n\\\\\\\\nconst childPostIds = props.isPreview ? [] : childPostIdsUnordered.reverse();\\\\\\\\nconst expandable = props.isPreview ? false : props.expandable ?? false;\\\\\\\\nconst defaultExpanded = expandable ? props.defaultExpanded : true;\\\\\\\\n\\\\\\\\nfunction readableDate(timestamp) {\\\\\\\\n  var a = new Date(timestamp);\\\\\\\\n  return a.toDateString() + \\\\\\\\\\\\\\\" \\\\\\\\\\\\\\\" + a.toLocaleTimeString();\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst timestamp = readableDate(\\\\\\\\n  snapshot.timestamp ? snapshot.timestamp / 1000000 : Date.now()\\\\\\\\n);\\\\\\\\n\\\\\\\\nconst postSearchKeywords = props.searchKeywords ? (\\\\\\\\n  <div style={{ \\\\\\\\\\\\\\\"font-family\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"monospace\\\\\\\\\\\\\\\" }} key=\\\\\\\\\\\\\\\"post-search-keywords\\\\\\\\\\\\\\\">\\\\\\\\n    <span>Found keywords: </span>\\\\\\\\n\\\\\\\\n    {props.searchKeywords.map((tag) => (\\\\\\\\n      <Widget\\\\\\\\n        src={\\\\\\\\\\\\\\\"devhub.near/widget/devhub.components.atom.Tag\\\\\\\\\\\\\\\"}\\\\\\\\n        props={{ linkTo: \\\\\\\\\\\\\\\"Feed\\\\\\\\\\\\\\\", tag }}\\\\\\\\n      />\\\\\\\\n    ))}\\\\\\\\n  </div>\\\\\\\\n) : (\\\\\\\\n  <div key=\\\\\\\\\\\\\\\"post-search-keywords\\\\\\\\\\\\\\\"></div>\\\\\\\\n);\\\\\\\\n\\\\\\\\nconst searchKeywords = props.searchKeywords ? (\\\\\\\\n  <div class=\\\\\\\\\\\\\\\"mb-4\\\\\\\\\\\\\\\" key=\\\\\\\\\\\\\\\"search-keywords\\\\\\\\\\\\\\\">\\\\\\\\n    <small class=\\\\\\\\\\\\\\\"text-muted\\\\\\\\\\\\\\\">{postSearchKeywords}</small>\\\\\\\\n  </div>\\\\\\\\n) : (\\\\\\\\n  <div key=\\\\\\\\\\\\\\\"search-keywords\\\\\\\\\\\\\\\"></div>\\\\\\\\n);\\\\\\\\n\\\\\\\\nconst allowedToEdit =\\\\\\\\n  !props.isPreview &&\\\\\\\\n  Near.view(\\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"is_allowed_to_edit\\\\\\\\\\\\\\\", {\\\\\\\\n    post_id: postId,\\\\\\\\n    editor: context.accountId,\\\\\\\\n  });\\\\\\\\n\\\\\\\\nconst btnEditorWidget = (postType, name) => {\\\\\\\\n  return (\\\\\\\\n    <li>\\\\\\\\n      <a\\\\\\\\n        class=\\\\\\\\\\\\\\\"dropdown-item\\\\\\\\\\\\\\\"\\\\\\\\n        role=\\\\\\\\\\\\\\\"button\\\\\\\\\\\\\\\"\\\\\\\\n        onClick={() =>\\\\\\\\n          State.update({ postType, editorType: \\\\\\\\\\\\\\\"EDIT\\\\\\\\\\\\\\\", showEditor: true })\\\\\\\\n        }\\\\\\\\n      >\\\\\\\\n        {name}\\\\\\\\n      </a>\\\\\\\\n    </li>\\\\\\\\n  );\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst editControl = allowedToEdit ? (\\\\\\\\n  <div class=\\\\\\\\\\\\\\\"btn-group\\\\\\\\\\\\\\\" role=\\\\\\\\\\\\\\\"group\\\\\\\\\\\\\\\">\\\\\\\\n    <a\\\\\\\\n      class=\\\\\\\\\\\\\\\"card-link px-2\\\\\\\\\\\\\\\"\\\\\\\\n      role=\\\\\\\\\\\\\\\"button\\\\\\\\\\\\\\\"\\\\\\\\n      title=\\\\\\\\\\\\\\\"Edit post\\\\\\\\\\\\\\\"\\\\\\\\n      data-bs-toggle=\\\\\\\\\\\\\\\"dropdown\\\\\\\\\\\\\\\"\\\\\\\\n      aria-expanded=\\\\\\\\\\\\\\\"false\\\\\\\\\\\\\\\"\\\\\\\\n      type=\\\\\\\\\\\\\\\"button\\\\\\\\\\\\\\\"\\\\\\\\n    >\\\\\\\\n      <div class=\\\\\\\\\\\\\\\"bi bi-pencil-square\\\\\\\\\\\\\\\"></div>\\\\\\\\n    </a>\\\\\\\\n\\\\\\\\n    <ul class=\\\\\\\\\\\\\\\"dropdown-menu\\\\\\\\\\\\\\\">\\\\\\\\n      {btnEditorWidget(\\\\\\\\\\\\\\\"Idea\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"Edit as an idea\\\\\\\\\\\\\\\")}\\\\\\\\n      {btnEditorWidget(\\\\\\\\\\\\\\\"Solution\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"Edit as a solution\\\\\\\\\\\\\\\")}\\\\\\\\n      {btnEditorWidget(\\\\\\\\\\\\\\\"Attestation\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"Edit as an attestation\\\\\\\\\\\\\\\")}\\\\\\\\n      {btnEditorWidget(\\\\\\\\\\\\\\\"Sponsorship\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"Edit as a sponsorship\\\\\\\\\\\\\\\")}\\\\\\\\n      {btnEditorWidget(\\\\\\\\\\\\\\\"Comment\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"Edit as a comment\\\\\\\\\\\\\\\")}\\\\\\\\n    </ul>\\\\\\\\n  </div>\\\\\\\\n) : (\\\\\\\\n  <div></div>\\\\\\\\n);\\\\\\\\n\\\\\\\\nconst shareButton = props.isPreview ? (\\\\\\\\n  <div></div>\\\\\\\\n) : (\\\\\\\\n  <Link\\\\\\\\n    class=\\\\\\\\\\\\\\\"card-link text-dark\\\\\\\\\\\\\\\"\\\\\\\\n    to={href({\\\\\\\\n      widgetSrc: \\\\\\\\\\\\\\\"devhub.near/widget/app\\\\\\\\\\\\\\\",\\\\\\\\n      params: { page: \\\\\\\\\\\\\\\"post\\\\\\\\\\\\\\\", id: postId },\\\\\\\\n    })}\\\\\\\\n    role=\\\\\\\\\\\\\\\"button\\\\\\\\\\\\\\\"\\\\\\\\n    target=\\\\\\\\\\\\\\\"_blank\\\\\\\\\\\\\\\"\\\\\\\\n    title=\\\\\\\\\\\\\\\"Open in new tab\\\\\\\\\\\\\\\"\\\\\\\\n  >\\\\\\\\n    <div class=\\\\\\\\\\\\\\\"bi bi-share\\\\\\\\\\\\\\\"></div>\\\\\\\\n  </Link>\\\\\\\\n);\\\\\\\\n\\\\\\\\nconst ProfileCardContainer = styled.div`\\\\\\\\n  @media screen and (max-width: 960px) {\\\\\\\\n    width: 100%;\\\\\\\\n  }\\\\\\\\n`;\\\\\\\\n\\\\\\\\n// card-header\\\\\\\\nconst header = (\\\\\\\\n  <div key=\\\\\\\\\\\\\\\"header\\\\\\\\\\\\\\\">\\\\\\\\n    <small class=\\\\\\\\\\\\\\\"text-muted\\\\\\\\\\\\\\\">\\\\\\\\n      <div class=\\\\\\\\\\\\\\\"row justify-content-between\\\\\\\\\\\\\\\">\\\\\\\\n        <div class=\\\\\\\\\\\\\\\"d-flex align-items-center flex-wrap\\\\\\\\\\\\\\\">\\\\\\\\n          <ProfileCardContainer>\\\\\\\\n            <Widget\\\\\\\\n              src={\\\\\\\\n                \\\\\\\\\\\\\\\"devhub.near/widget/devhub.components.molecule.ProfileCard\\\\\\\\\\\\\\\"\\\\\\\\n              }\\\\\\\\n              props={{\\\\\\\\n                accountId: post.author_id,\\\\\\\\n                nearDevGovGigsWidgetsAccountId: \\\\\\\\\\\\\\\"devhub.near\\\\\\\\\\\\\\\",\\\\\\\\n              }}\\\\\\\\n            />\\\\\\\\n          </ProfileCardContainer>\\\\\\\\n\\\\\\\\n          <div class=\\\\\\\\\\\\\\\"d-flex ms-auto\\\\\\\\\\\\\\\">\\\\\\\\n            {editControl}\\\\\\\\n            {timestamp}\\\\\\\\n\\\\\\\\n            <Widget\\\\\\\\n              src={\\\\\\\\\\\\\\\"devhub.near/widget/devhub.entity.post.History\\\\\\\\\\\\\\\"}\\\\\\\\n              props={{\\\\\\\\n                post,\\\\\\\\n                timestamp: currentTimestamp,\\\\\\\\n              }}\\\\\\\\n            />\\\\\\\\n            {shareButton}\\\\\\\\n          </div>\\\\\\\\n        </div>\\\\\\\\n      </div>\\\\\\\\n    </small>\\\\\\\\n  </div>\\\\\\\\n);\\\\\\\\n\\\\\\\\n// const emptyIcons = {\\\\\\\\n//   Idea: \\\\\\\\\\\\\\\"bi-lightbulb\\\\\\\\\\\\\\\",\\\\\\\\n//   Comment: \\\\\\\\\\\\\\\"bi-chat\\\\\\\\\\\\\\\",\\\\\\\\n//   Solution: \\\\\\\\\\\\\\\"bi-rocket\\\\\\\\\\\\\\\",\\\\\\\\n//   Attestation: \\\\\\\\\\\\\\\"bi-check-circle\\\\\\\\\\\\\\\",\\\\\\\\n//   Sponsorship: \\\\\\\\\\\\\\\"bi-cash-coin\\\\\\\\\\\\\\\",\\\\\\\\n//   Github: \\\\\\\\\\\\\\\"bi-github\\\\\\\\\\\\\\\",\\\\\\\\n//   Like: \\\\\\\\\\\\\\\"bi-heart\\\\\\\\\\\\\\\",\\\\\\\\n//   Reply: \\\\\\\\\\\\\\\"bi-reply\\\\\\\\\\\\\\\",\\\\\\\\n// };\\\\\\\\n\\\\\\\\nconst emptyIcons = {\\\\\\\\n  Idea: \\\\\\\\\\\\\\\"\\\\\\\\u{1f4a1}\\\\\\\\\\\\\\\",\\\\\\\\n  Comment: \\\\\\\\\\\\\\\"bi-chat\\\\\\\\\\\\\\\",\\\\\\\\n  Solution: \\\\\\\\\\\\\\\"\\\\\\\\u{1f680}\\\\\\\\\\\\\\\",\\\\\\\\n  Attestation: \\\\\\\\\\\\\\\"\\\\\\\\u{2705}\\\\\\\\\\\\\\\",\\\\\\\\n  Sponsorship: \\\\\\\\\\\\\\\"\\\\\\\\u{1fa99}\\\\\\\\\\\\\\\",\\\\\\\\n  Github: \\\\\\\\\\\\\\\"bi-github\\\\\\\\\\\\\\\",\\\\\\\\n  Like: \\\\\\\\\\\\\\\"bi-heart\\\\\\\\\\\\\\\",\\\\\\\\n  Reply: \\\\\\\\\\\\\\\"bi-reply\\\\\\\\\\\\\\\",\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst fillIcons = {\\\\\\\\n  Idea: \\\\\\\\\\\\\\\"\\\\\\\\u{1f4a1}\\\\\\\\\\\\\\\",\\\\\\\\n  Comment: \\\\\\\\\\\\\\\"bi-chat-fill\\\\\\\\\\\\\\\",\\\\\\\\n  Solution: \\\\\\\\\\\\\\\"\\\\\\\\u{1f680}\\\\\\\\\\\\\\\",\\\\\\\\n  Attestation: \\\\\\\\\\\\\\\"\\\\\\\\u{2705}\\\\\\\\\\\\\\\",\\\\\\\\n  Sponsorship: \\\\\\\\\\\\\\\"\\\\\\\\u{1fa99}\\\\\\\\\\\\\\\",\\\\\\\\n  Github: \\\\\\\\\\\\\\\"bi-github\\\\\\\\\\\\\\\",\\\\\\\\n  Like: \\\\\\\\\\\\\\\"bi-heart-fill\\\\\\\\\\\\\\\",\\\\\\\\n  Reply: \\\\\\\\\\\\\\\"bi-reply-fill\\\\\\\\\\\\\\\",\\\\\\\\n};\\\\\\\\n\\\\\\\\n// Trigger saving this widget.\\\\\\\\n\\\\\\\\nconst borders = {\\\\\\\\n  Idea: \\\\\\\\\\\\\\\"border-light\\\\\\\\\\\\\\\",\\\\\\\\n  Comment: \\\\\\\\\\\\\\\"border-light\\\\\\\\\\\\\\\",\\\\\\\\n  Solution: \\\\\\\\\\\\\\\"border-light\\\\\\\\\\\\\\\",\\\\\\\\n  Attestation: \\\\\\\\\\\\\\\"border-light\\\\\\\\\\\\\\\",\\\\\\\\n  Sponsorship: \\\\\\\\\\\\\\\"border-light\\\\\\\\\\\\\\\",\\\\\\\\n  Github: \\\\\\\\\\\\\\\"border-light\\\\\\\\\\\\\\\",\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst containsLike = props.isPreview\\\\\\\\n  ? false\\\\\\\\n  : post.likes.find((l) => l.author_id == context.accountId);\\\\\\\\nconst likeBtnClass = containsLike ? fillIcons.Like : emptyIcons.Like;\\\\\\\\n// This must be outside onLike, because Near.view returns null at first, and when the view call finished, it returns true/false.\\\\\\\\n// If checking this inside onLike, it will give `null` and we cannot tell the result is true or false.\\\\\\\\nlet grantNotify = Near.view(\\\\\\\\\\\\\\\"social.near\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"is_write_permission_granted\\\\\\\\\\\\\\\", {\\\\\\\\n  predecessor_id: \\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\",\\\\\\\\n  key: context.accountId + \\\\\\\\\\\\\\\"/index/notify\\\\\\\\\\\\\\\",\\\\\\\\n});\\\\\\\\n\\\\\\\\nif (grantNotify === null) {\\\\\\\\n  return;\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst onLike = () => {\\\\\\\\n  if (!context.accountId) {\\\\\\\\n    return;\\\\\\\\n  }\\\\\\\\n\\\\\\\\n  let likeTxn = [\\\\\\\\n    {\\\\\\\\n      contractName: \\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\",\\\\\\\\n      methodName: \\\\\\\\\\\\\\\"add_like\\\\\\\\\\\\\\\",\\\\\\\\n      args: {\\\\\\\\n        post_id: postId,\\\\\\\\n      },\\\\\\\\n      deposit: Big(10).pow(21).mul(2),\\\\\\\\n      gas: Big(10).pow(12).mul(100),\\\\\\\\n    },\\\\\\\\n  ];\\\\\\\\n\\\\\\\\n  if (grantNotify === false) {\\\\\\\\n    likeTxn.unshift({\\\\\\\\n      contractName: \\\\\\\\\\\\\\\"social.near\\\\\\\\\\\\\\\",\\\\\\\\n      methodName: \\\\\\\\\\\\\\\"grant_write_permission\\\\\\\\\\\\\\\",\\\\\\\\n      args: {\\\\\\\\n        predecessor_id: \\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\",\\\\\\\\n        keys: [context.accountId + \\\\\\\\\\\\\\\"/index/notify\\\\\\\\\\\\\\\"],\\\\\\\\n      },\\\\\\\\n      deposit: Big(10).pow(23),\\\\\\\\n      gas: Big(10).pow(12).mul(30),\\\\\\\\n    });\\\\\\\\n  }\\\\\\\\n\\\\\\\\n  Near.call(likeTxn);\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst btnCreatorWidget = (postType, icon, name, desc) => {\\\\\\\\n  return (\\\\\\\\n    <li class=\\\\\\\\\\\\\\\"py-1\\\\\\\\\\\\\\\">\\\\\\\\n      <a\\\\\\\\n        class=\\\\\\\\\\\\\\\"dropdown-item text-decoration-none d-flex align-items-center lh-sm\\\\\\\\\\\\\\\"\\\\\\\\n        style={{ color: \\\\\\\\\\\\\\\"rgb(55,109,137)\\\\\\\\\\\\\\\" }}\\\\\\\\n        role=\\\\\\\\\\\\\\\"button\\\\\\\\\\\\\\\"\\\\\\\\n        onClick={() =>\\\\\\\\n          State.update({ postType, editorType: \\\\\\\\\\\\\\\"CREATE\\\\\\\\\\\\\\\", showEditor: true })\\\\\\\\n        }\\\\\\\\n      >\\\\\\\\n        <i class={`bi ${icon}`} style={{ fontSize: \\\\\\\\\\\\\\\"1.5rem\\\\\\\\\\\\\\\" }}>\\\\\\\\n          {\\\\\\\\\\\\\\\" \\\\\\\\\\\\\\\"}\\\\\\\\n        </i>\\\\\\\\n\\\\\\\\n        <div class=\\\\\\\\\\\\\\\"ps-2 text-wrap\\\\\\\\\\\\\\\" style={{ width: \\\\\\\\\\\\\\\"18rem\\\\\\\\\\\\\\\" }}>\\\\\\\\n          <div>{name}</div>\\\\\\\\n          <small class=\\\\\\\\\\\\\\\"fw-light text-secondary\\\\\\\\\\\\\\\">{desc}</small>\\\\\\\\n        </div>\\\\\\\\n      </a>\\\\\\\\n    </li>\\\\\\\\n  );\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst FooterButtonsContianer = styled.div`\\\\\\\\n  width: 66.66666667%;\\\\\\\\n\\\\\\\\n  @media screen and (max-width: 960px) {\\\\\\\\n    width: 100%;\\\\\\\\n  }\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst buttonsFooter = props.isPreview ? null : (\\\\\\\\n  <div class=\\\\\\\\\\\\\\\"row\\\\\\\\\\\\\\\" key=\\\\\\\\\\\\\\\"buttons-footer\\\\\\\\\\\\\\\">\\\\\\\\n    <FooterButtonsContianer>\\\\\\\\n      <div class=\\\\\\\\\\\\\\\"btn-group\\\\\\\\\\\\\\\" role=\\\\\\\\\\\\\\\"group\\\\\\\\\\\\\\\" aria-label=\\\\\\\\\\\\\\\"Basic outlined example\\\\\\\\\\\\\\\">\\\\\\\\n        <ButtonWithHover\\\\\\\\n          type=\\\\\\\\\\\\\\\"button\\\\\\\\\\\\\\\"\\\\\\\\n          class=\\\\\\\\\\\\\\\"btn d-flex align-items-center\\\\\\\\\\\\\\\"\\\\\\\\n          style={{ border: \\\\\\\\\\\\\\\"0px\\\\\\\\\\\\\\\" }}\\\\\\\\n          onClick={onLike}\\\\\\\\n        >\\\\\\\\n          <i class={`bi ${likeBtnClass}`}> </i>\\\\\\\\n          {post.likes.length == 0 ? (\\\\\\\\n            \\\\\\\\\\\\\\\"Like\\\\\\\\\\\\\\\"\\\\\\\\n          ) : (\\\\\\\\n            <Widget\\\\\\\\n              // TODO: LEGACY.\\\\\\\\n              src=\\\\\\\\\\\\\\\"devgovgigs.near/widget/gigs-board.components.layout.LikeButton.Faces\\\\\\\\\\\\\\\"\\\\\\\\n              props={{\\\\\\\\n                likesByUsers: Object.fromEntries(\\\\\\\\n                  post.likes.map(({ author_id }) => [author_id, \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\"])\\\\\\\\n                ),\\\\\\\\n              }}\\\\\\\\n            />\\\\\\\\n          )}\\\\\\\\n        </ButtonWithHover>\\\\\\\\n\\\\\\\\n        <div class=\\\\\\\\\\\\\\\"btn-group\\\\\\\\\\\\\\\" role=\\\\\\\\\\\\\\\"group\\\\\\\\\\\\\\\">\\\\\\\\n          <ButtonWithHover\\\\\\\\n            type=\\\\\\\\\\\\\\\"button\\\\\\\\\\\\\\\"\\\\\\\\n            class=\\\\\\\\\\\\\\\"btn\\\\\\\\\\\\\\\"\\\\\\\\n            style={{ border: \\\\\\\\\\\\\\\"0px\\\\\\\\\\\\\\\" }}\\\\\\\\n            data-bs-toggle=\\\\\\\\\\\\\\\"dropdown\\\\\\\\\\\\\\\"\\\\\\\\n            aria-expanded=\\\\\\\\\\\\\\\"false\\\\\\\\\\\\\\\"\\\\\\\\n          >\\\\\\\\n            \\\\\\\\u{21aa} Reply\\\\\\\\n          </ButtonWithHover>\\\\\\\\n          <ul class=\\\\\\\\\\\\\\\"dropdown-menu\\\\\\\\\\\\\\\">\\\\\\\\n            {btnCreatorWidget(\\\\\\\\n              \\\\\\\\\\\\\\\"Idea\\\\\\\\\\\\\\\",\\\\\\\\n              emptyIcons.Idea,\\\\\\\\n              \\\\\\\\\\\\\\\"Idea\\\\\\\\\\\\\\\",\\\\\\\\n              \\\\\\\\\\\\\\\"Get feedback from the community about a problem, opportunity, or need.\\\\\\\\\\\\\\\"\\\\\\\\n            )}\\\\\\\\n            {btnCreatorWidget(\\\\\\\\n              \\\\\\\\\\\\\\\"Solution\\\\\\\\\\\\\\\",\\\\\\\\n              emptyIcons.Solution,\\\\\\\\n              \\\\\\\\\\\\\\\"Solution\\\\\\\\\\\\\\\",\\\\\\\\n              \\\\\\\\\\\\\\\"Provide a specific proposal or implementation to an idea, optionally requesting funding.\\\\\\\\\\\\\\\"\\\\\\\\n            )}\\\\\\\\n            {btnCreatorWidget(\\\\\\\\n              \\\\\\\\\\\\\\\"Attestation\\\\\\\\\\\\\\\",\\\\\\\\n              emptyIcons.Attestation,\\\\\\\\n              \\\\\\\\\\\\\\\"Attestation\\\\\\\\\\\\\\\",\\\\\\\\n              \\\\\\\\\\\\\\\"Formally review or validate a solution as a recognized expert.\\\\\\\\\\\\\\\"\\\\\\\\n            )}\\\\\\\\n            {btnCreatorWidget(\\\\\\\\n              \\\\\\\\\\\\\\\"Sponsorship\\\\\\\\\\\\\\\",\\\\\\\\n              emptyIcons.Sponsorship,\\\\\\\\n              \\\\\\\\\\\\\\\"Sponsorship\\\\\\\\\\\\\\\",\\\\\\\\n              \\\\\\\\\\\\\\\"Offer to fund projects, events, or proposals that match your needs.\\\\\\\\\\\\\\\"\\\\\\\\n            )}\\\\\\\\n            <li>\\\\\\\\n              <hr class=\\\\\\\\\\\\\\\"dropdown-divider\\\\\\\\\\\\\\\" />\\\\\\\\n            </li>\\\\\\\\n            {btnCreatorWidget(\\\\\\\\n              \\\\\\\\\\\\\\\"Comment\\\\\\\\\\\\\\\",\\\\\\\\n              emptyIcons.Comment,\\\\\\\\n              \\\\\\\\\\\\\\\"Comment\\\\\\\\\\\\\\\",\\\\\\\\n              \\\\\\\\\\\\\\\"Ask a question, provide information, or share a resource that is relevant to the thread.\\\\\\\\\\\\\\\"\\\\\\\\n            )}\\\\\\\\n          </ul>\\\\\\\\n        </div>\\\\\\\\n        <ButtonWithHover\\\\\\\\n          type=\\\\\\\\\\\\\\\"button\\\\\\\\\\\\\\\"\\\\\\\\n          class=\\\\\\\\\\\\\\\"btn\\\\\\\\\\\\\\\"\\\\\\\\n          style={{ border: \\\\\\\\\\\\\\\"0px\\\\\\\\\\\\\\\" }}\\\\\\\\n          data-bs-toggle=\\\\\\\\\\\\\\\"collapse\\\\\\\\\\\\\\\"\\\\\\\\n          href={`#collapseChildPosts${postId}`}\\\\\\\\n          aria-expanded={defaultExpanded}\\\\\\\\n          aria-controls={`collapseChildPosts${postId}`}\\\\\\\\n        >\\\\\\\\n          <i class=\\\\\\\\\\\\\\\"bi bi-chevron-down\\\\\\\\\\\\\\\"> </i>{\\\\\\\\\\\\\\\" \\\\\\\\\\\\\\\"}\\\\\\\\n          {`Expand Replies (${childPostIds.length})`}\\\\\\\\n        </ButtonWithHover>\\\\\\\\n\\\\\\\\n        {isUnderPost || !parentId ? (\\\\\\\\n          <div key=\\\\\\\\\\\\\\\"link-to-parent\\\\\\\\\\\\\\\"></div>\\\\\\\\n        ) : (\\\\\\\\n          <Link\\\\\\\\n            to={href({\\\\\\\\n              widgetSrc: \\\\\\\\\\\\\\\"devhub.near/widget/app\\\\\\\\\\\\\\\",\\\\\\\\n              params: { page: \\\\\\\\\\\\\\\"post\\\\\\\\\\\\\\\", id: parentId },\\\\\\\\n            })}\\\\\\\\n          >\\\\\\\\n            <ButtonWithHover\\\\\\\\n              type=\\\\\\\\\\\\\\\"button\\\\\\\\\\\\\\\"\\\\\\\\n              style={{ border: \\\\\\\\\\\\\\\"0px\\\\\\\\\\\\\\\" }}\\\\\\\\n              className=\\\\\\\\\\\\\\\"btn\\\\\\\\\\\\\\\"\\\\\\\\n              key=\\\\\\\\\\\\\\\"link-to-parent\\\\\\\\\\\\\\\"\\\\\\\\n            >\\\\\\\\n              <i class=\\\\\\\\\\\\\\\"bi bi-arrow-90deg-up\\\\\\\\\\\\\\\"></i>Go to parent\\\\\\\\n            </ButtonWithHover>\\\\\\\\n          </Link>\\\\\\\\n        )}\\\\\\\\n      </div>\\\\\\\\n    </FooterButtonsContianer>\\\\\\\\n  </div>\\\\\\\\n);\\\\\\\\n\\\\\\\\nconst CreatorWidget = (postType) => {\\\\\\\\n  return (\\\\\\\\n    <div\\\\\\\\n      class={`collapse ${\\\\\\\\n        draftState?.parent_post_id == postId && draftState?.postType == postType\\\\\\\\n          ? \\\\\\\\\\\\\\\"show\\\\\\\\\\\\\\\"\\\\\\\\n          : \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\"\\\\\\\\n      }`}\\\\\\\\n      id={`collapse${postType}Creator${postId}`}\\\\\\\\n      data-bs-parent={`#accordion${postId}`}\\\\\\\\n    >\\\\\\\\n      <Widget\\\\\\\\n        src={\\\\\\\\\\\\\\\"devhub.near/widget/devhub.entity.post.PostEditor\\\\\\\\\\\\\\\"}\\\\\\\\n        props={{\\\\\\\\n          postType,\\\\\\\\n          onDraftStateChange,\\\\\\\\n          draftState:\\\\\\\\n            draftState?.parent_post_id == postId ? draftState : undefined,\\\\\\\\n          parentId: postId,\\\\\\\\n          mode: \\\\\\\\\\\\\\\"Create\\\\\\\\\\\\\\\",\\\\\\\\n        }}\\\\\\\\n      />\\\\\\\\n    </div>\\\\\\\\n  );\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst tokenMapping = {\\\\\\\\n  NEAR: \\\\\\\\\\\\\\\"NEAR\\\\\\\\\\\\\\\",\\\\\\\\n  USDT: {\\\\\\\\n    NEP141: {\\\\\\\\n      address: \\\\\\\\\\\\\\\"usdt.tether-token.near\\\\\\\\\\\\\\\",\\\\\\\\n    },\\\\\\\\n  },\\\\\\\\n  USDC: {\\\\\\\\n    NEP141: {\\\\\\\\n      address:\\\\\\\\n        \\\\\\\\\\\\\\\"17208628f84f5d6ad33f0da3bbbeb27ffcb398eac501a31bd6ad2011e36133a1\\\\\\\\\\\\\\\",\\\\\\\\n    },\\\\\\\\n  },\\\\\\\\n  // Add more tokens here as needed\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst reverseTokenMapping = Object.keys(tokenMapping).reduce(\\\\\\\\n  (reverseMap, key) => {\\\\\\\\n    const value = tokenMapping[key];\\\\\\\\n    if (typeof value === \\\\\\\\\\\\\\\"object\\\\\\\\\\\\\\\") {\\\\\\\\n      reverseMap[JSON.stringify(value)] = key;\\\\\\\\n    }\\\\\\\\n    return reverseMap;\\\\\\\\n  },\\\\\\\\n  {}\\\\\\\\n);\\\\\\\\n\\\\\\\\nfunction tokenResolver(token) {\\\\\\\\n  if (typeof token === \\\\\\\\\\\\\\\"string\\\\\\\\\\\\\\\") {\\\\\\\\n    return token;\\\\\\\\n  } else if (typeof token === \\\\\\\\\\\\\\\"object\\\\\\\\\\\\\\\") {\\\\\\\\n    const tokenString = reverseTokenMapping[JSON.stringify(token)];\\\\\\\\n    return tokenString || null;\\\\\\\\n  } else {\\\\\\\\n    return null; // Invalid input\\\\\\\\n  }\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst EditorWidget = (postType) => {\\\\\\\\n  return (\\\\\\\\n    <div\\\\\\\\n      class={`collapse ${\\\\\\\\n        draftState?.edit_post_id == postId && draftState?.postType == postType\\\\\\\\n          ? \\\\\\\\\\\\\\\"show\\\\\\\\\\\\\\\"\\\\\\\\n          : \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\"\\\\\\\\n      }`}\\\\\\\\n      id={`collapse${postType}Editor${postId}`}\\\\\\\\n      data-bs-parent={`#accordion${postId}`}\\\\\\\\n    >\\\\\\\\n      <Widget\\\\\\\\n        src={\\\\\\\\\\\\\\\"devhub.near/widget/devhub.entity.post.PostEditor\\\\\\\\\\\\\\\"}\\\\\\\\n        props={{\\\\\\\\n          postType,\\\\\\\\n          postId,\\\\\\\\n          mode: \\\\\\\\\\\\\\\"Edit\\\\\\\\\\\\\\\",\\\\\\\\n          author_id: post.author_id,\\\\\\\\n          labels: post.snapshot.labels,\\\\\\\\n          name: post.snapshot.name,\\\\\\\\n          description: post.snapshot.description,\\\\\\\\n          amount: post.snapshot.amount,\\\\\\\\n          token: tokenResolver(post.snapshot.sponsorship_token),\\\\\\\\n          supervisor: post.snapshot.supervisor,\\\\\\\\n          githubLink: post.snapshot.github_link,\\\\\\\\n          onDraftStateChange,\\\\\\\\n          draftState:\\\\\\\\n            draftState?.edit_post_id == postId ? draftState : undefined,\\\\\\\\n        }}\\\\\\\\n      />\\\\\\\\n    </div>\\\\\\\\n  );\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst isDraft =\\\\\\\\n  (draftState?.parent_post_id === postId &&\\\\\\\\n    draftState?.postType === state.postType) ||\\\\\\\\n  (draftState?.edit_post_id === postId &&\\\\\\\\n    draftState?.postType === state.postType);\\\\\\\\n\\\\\\\\nfunction Editor() {\\\\\\\\n  return (\\\\\\\\n    <div class=\\\\\\\\\\\\\\\"row\\\\\\\\\\\\\\\" id={`accordion${postId}`} key=\\\\\\\\\\\\\\\"editors-footer\\\\\\\\\\\\\\\">\\\\\\\\n      <div\\\\\\\\n        key={`${state.postType}${state.editorType}${postId}`}\\\\\\\\n        className={\\\\\\\\\\\\\\\"w-100\\\\\\\\\\\\\\\"}\\\\\\\\n      >\\\\\\\\n        {state.editorType === \\\\\\\\\\\\\\\"CREATE\\\\\\\\\\\\\\\" ? (\\\\\\\\n          <>\\\\\\\\n            <Widget\\\\\\\\n              src={\\\\\\\\\\\\\\\"devhub.near/widget/devhub.entity.post.PostEditor\\\\\\\\\\\\\\\"}\\\\\\\\n              props={{\\\\\\\\n                postType: state.postType,\\\\\\\\n                onDraftStateChange,\\\\\\\\n                draftState:\\\\\\\\n                  draftState?.parent_post_id == postId ? draftState : undefined,\\\\\\\\n                parentId: postId,\\\\\\\\n                mode: \\\\\\\\\\\\\\\"Create\\\\\\\\\\\\\\\",\\\\\\\\n              }}\\\\\\\\n            />\\\\\\\\n          </>\\\\\\\\n        ) : (\\\\\\\\n          <>\\\\\\\\n            <Widget\\\\\\\\n              src={\\\\\\\\\\\\\\\"devhub.near/widget/devhub.entity.post.PostEditor\\\\\\\\\\\\\\\"}\\\\\\\\n              props={{\\\\\\\\n                postType: state.postType,\\\\\\\\n                postId,\\\\\\\\n                mode: \\\\\\\\\\\\\\\"Edit\\\\\\\\\\\\\\\",\\\\\\\\n                author_id: post.author_id,\\\\\\\\n                labels: post.snapshot.labels,\\\\\\\\n                name: post.snapshot.name,\\\\\\\\n                description: post.snapshot.description,\\\\\\\\n                amount: post.snapshot.amount,\\\\\\\\n                token: tokenResolver(post.snapshot.sponsorship_token),\\\\\\\\n                supervisor: post.snapshot.supervisor,\\\\\\\\n                githubLink: post.snapshot.github_link,\\\\\\\\n                onDraftStateChange,\\\\\\\\n                draftState:\\\\\\\\n                  draftState?.edit_post_id == postId ? draftState : undefined,\\\\\\\\n              }}\\\\\\\\n            />\\\\\\\\n          </>\\\\\\\\n        )}\\\\\\\\n      </div>\\\\\\\\n    </div>\\\\\\\\n  );\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst renamedPostType =\\\\\\\\n  snapshot.post_type == \\\\\\\\\\\\\\\"Submission\\\\\\\\\\\\\\\" ? \\\\\\\\\\\\\\\"Solution\\\\\\\\\\\\\\\" : snapshot.post_type;\\\\\\\\n\\\\\\\\nconst tags = post.snapshot.labels ? (\\\\\\\\n  <div\\\\\\\\n    class=\\\\\\\\\\\\\\\"card-title d-flex flex-wrap align-items-center\\\\\\\\\\\\\\\"\\\\\\\\n    style={{ margin: \\\\\\\\\\\\\\\"20px 0\\\\\\\\\\\\\\\" }}\\\\\\\\n    key=\\\\\\\\\\\\\\\"post-labels\\\\\\\\\\\\\\\"\\\\\\\\n  >\\\\\\\\n    {post.snapshot.labels.map((tag, idx) => (\\\\\\\\n      <div className=\\\\\\\\\\\\\\\"d-flex align-items-center my-3 me-3\\\\\\\\\\\\\\\">\\\\\\\\n        <Link\\\\\\\\n          to={href({\\\\\\\\n            widgetSrc: \\\\\\\\\\\\\\\"devhub.near/widget/app\\\\\\\\\\\\\\\",\\\\\\\\n            params: { page: \\\\\\\\\\\\\\\"feed\\\\\\\\\\\\\\\", tag: tag },\\\\\\\\n          })}\\\\\\\\n        >\\\\\\\\n          <div\\\\\\\\n            className=\\\\\\\\\\\\\\\"d-flex gap-3 align-items-center\\\\\\\\\\\\\\\"\\\\\\\\n            style={{ cursor: \\\\\\\\\\\\\\\"pointer\\\\\\\\\\\\\\\", textDecoration: \\\\\\\\\\\\\\\"none\\\\\\\\\\\\\\\" }}\\\\\\\\n          >\\\\\\\\n            <Widget\\\\\\\\n              src={\\\\\\\\\\\\\\\"devhub.near/widget/devhub.components.atom.Tag\\\\\\\\\\\\\\\"}\\\\\\\\n              props={{\\\\\\\\n                tag,\\\\\\\\n                black: true,\\\\\\\\n              }}\\\\\\\\n            />\\\\\\\\n          </div>\\\\\\\\n        </Link>\\\\\\\\n        {idx !== post.snapshot.labels.length - 1 && (\\\\\\\\n          <span className=\\\\\\\\\\\\\\\"ms-3\\\\\\\\\\\\\\\">\\\\\\\\u{2022}</span>\\\\\\\\n        )}\\\\\\\\n      </div>\\\\\\\\n    ))}\\\\\\\\n  </div>\\\\\\\\n) : (\\\\\\\\n  <div key=\\\\\\\\\\\\\\\"post-labels\\\\\\\\\\\\\\\"></div>\\\\\\\\n);\\\\\\\\n\\\\\\\\nconst Title = styled.h5`\\\\\\\\n  margin: 1rem 0;\\\\\\\\n\\\\\\\\n  color: #151515;\\\\\\\\n  font-size: 1.15rem;\\\\\\\\n  font-style: normal;\\\\\\\\n  font-weight: 700;\\\\\\\\n  line-height: 1.625rem; /* 55.556% */\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst postTitle =\\\\\\\\n  snapshot.post_type == \\\\\\\\\\\\\\\"Comment\\\\\\\\\\\\\\\" ? (\\\\\\\\n    <div key=\\\\\\\\\\\\\\\"post-title\\\\\\\\\\\\\\\"></div>\\\\\\\\n  ) : (\\\\\\\\n    <Title key=\\\\\\\\\\\\\\\"post-title\\\\\\\\\\\\\\\">\\\\\\\\n      {emptyIcons[snapshot.post_type]} {renamedPostType}: {snapshot.name}\\\\\\\\n    </Title>\\\\\\\\n  );\\\\\\\\n\\\\\\\\nconst postExtra =\\\\\\\\n  snapshot.post_type == \\\\\\\\\\\\\\\"Sponsorship\\\\\\\\\\\\\\\" ? (\\\\\\\\n    <div key=\\\\\\\\\\\\\\\"post-extra\\\\\\\\\\\\\\\">\\\\\\\\n      <h6 class=\\\\\\\\\\\\\\\"card-subtitle mb-2 text-muted\\\\\\\\\\\\\\\">\\\\\\\\n        Maximum amount: {snapshot.amount}{\\\\\\\\\\\\\\\" \\\\\\\\\\\\\\\"}\\\\\\\\n        {tokenResolver(snapshot.sponsorship_token)}\\\\\\\\n      </h6>\\\\\\\\n      <h6 class=\\\\\\\\\\\\\\\"card-subtitle mb-2 text-muted\\\\\\\\\\\\\\\">\\\\\\\\n        Supervisor:{\\\\\\\\\\\\\\\" \\\\\\\\\\\\\\\"}\\\\\\\\n        <Widget\\\\\\\\n          src={\\\\\\\\\\\\\\\"neardevgov.near/widget/ProfileLine\\\\\\\\\\\\\\\"}\\\\\\\\n          props={{ accountId: snapshot.supervisor }}\\\\\\\\n        />\\\\\\\\n      </h6>\\\\\\\\n    </div>\\\\\\\\n  ) : (\\\\\\\\n    <div></div>\\\\\\\\n  );\\\\\\\\n\\\\\\\\nconst childPostHasDraft = childPostIds.find(\\\\\\\\n  (childId) =>\\\\\\\\n    childId == draftState?.edit_post_id || childId == draftState?.parent_post_id\\\\\\\\n);\\\\\\\\nif (\\\\\\\\n  (childPostHasDraft || state.childrenOfChildPostsHasDraft) &&\\\\\\\\n  props.expandParent\\\\\\\\n) {\\\\\\\\n  props.expandParent();\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst postsList =\\\\\\\\n  props.isPreview || childPostIds.length == 0 ? (\\\\\\\\n    <div key=\\\\\\\\\\\\\\\"posts-list\\\\\\\\\\\\\\\"></div>\\\\\\\\n  ) : (\\\\\\\\n    <div class=\\\\\\\\\\\\\\\"row\\\\\\\\\\\\\\\" key=\\\\\\\\\\\\\\\"posts-list\\\\\\\\\\\\\\\">\\\\\\\\n      <div\\\\\\\\n        class={`collapse mt-3 ${\\\\\\\\n          defaultExpanded ||\\\\\\\\n          childPostHasDraft ||\\\\\\\\n          state.childrenOfChildPostsHasDraft\\\\\\\\n            ? \\\\\\\\\\\\\\\"show\\\\\\\\\\\\\\\"\\\\\\\\n            : \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\"\\\\\\\\n        }`}\\\\\\\\n        id={`collapseChildPosts${postId}`}\\\\\\\\n      >\\\\\\\\n        {childPostIds.map((childId) => (\\\\\\\\n          <Widget\\\\\\\\n            src=\\\\\\\\\\\\\\\"devhub.near/widget/devhub.entity.post.Post\\\\\\\\\\\\\\\"\\\\\\\\n            props={{\\\\\\\\n              id: childId,\\\\\\\\n              isUnderPost: true,\\\\\\\\n              onDraftStateChange,\\\\\\\\n              draftState,\\\\\\\\n              expandParent: () =>\\\\\\\\n                State.update({ childrenOfChildPostsHasDraft: true }),\\\\\\\\n              referral: `subpost${childId}of${postId}`,\\\\\\\\n            }}\\\\\\\\n          />\\\\\\\\n        ))}\\\\\\\\n      </div>\\\\\\\\n    </div>\\\\\\\\n  );\\\\\\\\n\\\\\\\\nconst LimitedMarkdown = styled.div`\\\\\\\\n  max-height: 20em;\\\\\\\\n`;\\\\\\\\n\\\\\\\\n// Determine if located in the post page.\\\\\\\\nconst isInList = props.isInList;\\\\\\\\nconst contentArray = snapshot.description.split(\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\");\\\\\\\\nconst needClamp = isInList && contentArray.length > 5;\\\\\\\\n\\\\\\\\ninitState({\\\\\\\\n  clamp: needClamp,\\\\\\\\n});\\\\\\\\n\\\\\\\\nconst clampedContent = needClamp\\\\\\\\n  ? contentArray.slice(0, 3).join(\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\")\\\\\\\\n  : snapshot.description;\\\\\\\\n\\\\\\\\n// Should make sure the posts under the currently top viewed post are limited in size.\\\\\\\\nconst descriptionArea = isUnderPost ? (\\\\\\\\n  <LimitedMarkdown className=\\\\\\\\\\\\\\\"overflow-auto\\\\\\\\\\\\\\\" key=\\\\\\\\\\\\\\\"description-area\\\\\\\\\\\\\\\">\\\\\\\\n    {/* {widget(\\\\\\\\\\\\\\\"components.molecule.markdown-viewer\\\\\\\\\\\\\\\", {\\\\\\\\n      text: snapshot.description,\\\\\\\\n    })} */}\\\\\\\\n    <Widget\\\\\\\\n      src={\\\\\\\\\\\\\\\"devhub.near/widget/devhub.components.molecule.MarkdownViewer\\\\\\\\\\\\\\\"}\\\\\\\\n      props={{\\\\\\\\n        text: snapshot.description,\\\\\\\\n      }}\\\\\\\\n    />\\\\\\\\n  </LimitedMarkdown>\\\\\\\\n) : (\\\\\\\\n  <div className=\\\\\\\\\\\\\\\"w-100 overflow-auto\\\\\\\\\\\\\\\">\\\\\\\\n    <div class={state.clamp ? \\\\\\\\\\\\\\\"clamp\\\\\\\\\\\\\\\" : \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\"}>\\\\\\\\n      {/* {widget(\\\\\\\\\\\\\\\"components.molecule.markdown-viewer\\\\\\\\\\\\\\\", {\\\\\\\\n        text: state.clamp ? clampedContent : snapshot.description,\\\\\\\\n      })} */}\\\\\\\\n      <Widget\\\\\\\\n        src={\\\\\\\\\\\\\\\"devhub.near/widget/devhub.components.molecule.MarkdownViewer\\\\\\\\\\\\\\\"}\\\\\\\\n        props={{\\\\\\\\n          text: state.clamp ? clampedContent : snapshot.description,\\\\\\\\n        }}\\\\\\\\n      />\\\\\\\\n    </div>\\\\\\\\n    {state.clamp ? (\\\\\\\\n      <div class=\\\\\\\\\\\\\\\"d-flex justify-content-start\\\\\\\\\\\\\\\">\\\\\\\\n        <a\\\\\\\\n          style={{ cursor: \\\\\\\\\\\\\\\"pointer\\\\\\\\\\\\\\\", color: \\\\\\\\\\\\\\\"#00ec97\\\\\\\\\\\\\\\" }}\\\\\\\\n          class=\\\\\\\\\\\\\\\"btn-link text-dark fw-bold text-decoration-none\\\\\\\\\\\\\\\"\\\\\\\\n          onClick={() => State.update({ clamp: false })}\\\\\\\\n        >\\\\\\\\n          See more\\\\\\\\n        </a>\\\\\\\\n      </div>\\\\\\\\n    ) : (\\\\\\\\n      <></>\\\\\\\\n    )}\\\\\\\\n  </div>\\\\\\\\n);\\\\\\\\n\\\\\\\\nconst timestampElement = (_snapshot) => {\\\\\\\\n  return (\\\\\\\\n    <Link\\\\\\\\n      class=\\\\\\\\\\\\\\\"text-muted\\\\\\\\\\\\\\\"\\\\\\\\n      href={href({\\\\\\\\n        widgetSrc: \\\\\\\\\\\\\\\"devhub.near/widget/app\\\\\\\\\\\\\\\",\\\\\\\\n        params: {\\\\\\\\n          page: \\\\\\\\\\\\\\\"post\\\\\\\\\\\\\\\",\\\\\\\\n          id: postId,\\\\\\\\n          timestamp: _snapshot.timestamp,\\\\\\\\n          compareTimestamp: null,\\\\\\\\n          referral,\\\\\\\\n        },\\\\\\\\n      })}\\\\\\\\n    >\\\\\\\\n      {readableDate(_snapshot.timestamp / 1000000).substring(4)}\\\\\\\\n\\\\\\\\n      <Widget\\\\\\\\n        src=\\\\\\\\\\\\\\\"mob.near/widget/ProfileImage\\\\\\\\\\\\\\\"\\\\\\\\n        props={{\\\\\\\\n          accountId: _snapshot.editor_id,\\\\\\\\n          style: {\\\\\\\\n            width: \\\\\\\\\\\\\\\"1.25em\\\\\\\\\\\\\\\",\\\\\\\\n            height: \\\\\\\\\\\\\\\"1.25em\\\\\\\\\\\\\\\",\\\\\\\\n          },\\\\\\\\n          imageStyle: {\\\\\\\\n            transform: \\\\\\\\\\\\\\\"translateY(-12.5%)\\\\\\\\\\\\\\\",\\\\\\\\n          },\\\\\\\\n        }}\\\\\\\\n      />\\\\\\\\n      {_snapshot.editor_id.substring(0, 8)}\\\\\\\\n    </Link>\\\\\\\\n  );\\\\\\\\n};\\\\\\\\n\\\\\\\\nfunction combineText(_snapshot) {\\\\\\\\n  return (\\\\\\\\n    \\\\\\\\\\\\\\\"## \\\\\\\\\\\\\\\" +\\\\\\\\n    _snapshot.post_type +\\\\\\\\n    \\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\" +\\\\\\\\n    _snapshot.name +\\\\\\\\n    \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\" +\\\\\\\\n    _snapshot.description\\\\\\\\n  );\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst CardContainer = styled.div`\\\\\\\\n  padding: 1.5rem 3rem !important;\\\\\\\\n  border-radius: 16px !important;\\\\\\\\n  border: 1px solid rgba(129, 129, 129, 0.3) !important;\\\\\\\\n  background: #fffefe !important;\\\\\\\\n\\\\\\\\n  @media screen and (max-width: 960px) {\\\\\\\\n    padding: 1rem !important;\\\\\\\\n  }\\\\\\\\n`;\\\\\\\\n\\\\\\\\nreturn (\\\\\\\\n  <CardContainer className={`card ${borders[snapshot.post_type]} attractable`}>\\\\\\\\n    {header}\\\\\\\\n    <div className=\\\\\\\\\\\\\\\"card-body\\\\\\\\\\\\\\\" style={{ padding: 0 }}>\\\\\\\\n      {searchKeywords}\\\\\\\\n      {compareSnapshot ? (\\\\\\\\n        <div\\\\\\\\n          class=\\\\\\\\\\\\\\\"border rounded\\\\\\\\\\\\\\\"\\\\\\\\n          style={{ marginTop: \\\\\\\\\\\\\\\"16px\\\\\\\\\\\\\\\", marginBottom: \\\\\\\\\\\\\\\"16px\\\\\\\\\\\\\\\" }}\\\\\\\\n        >\\\\\\\\n          <div class=\\\\\\\\\\\\\\\"d-flex justify-content-end\\\\\\\\\\\\\\\" style={{ fontSize: \\\\\\\\\\\\\\\"12px\\\\\\\\\\\\\\\" }}>\\\\\\\\n            <div class=\\\\\\\\\\\\\\\"d-flex w-50 justify-content-end mt-1 me-2\\\\\\\\\\\\\\\">\\\\\\\\n              {timestampElement(snapshot)}\\\\\\\\n              {snapshot !== compareSnapshot && (\\\\\\\\n                <>\\\\\\\\n                  <div class=\\\\\\\\\\\\\\\"mx-1 align-self-center\\\\\\\\\\\\\\\">\\\\\\\\n                    <i class=\\\\\\\\\\\\\\\"bi bi-file-earmark-diff\\\\\\\\\\\\\\\" />\\\\\\\\n                  </div>\\\\\\\\n                  {timestampElement(compareSnapshot)}\\\\\\\\n                </>\\\\\\\\n              )}\\\\\\\\n            </div>\\\\\\\\n          </div>\\\\\\\\n          <div className=\\\\\\\\\\\\\\\"w-100 overflow-auto\\\\\\\\\\\\\\\">\\\\\\\\n            <Widget\\\\\\\\n              src=\\\\\\\\\\\\\\\"markeljan.near/widget/MarkdownDiff\\\\\\\\\\\\\\\"\\\\\\\\n              props={{\\\\\\\\n                post: post,\\\\\\\\n                currentCode: combineText(\\\\\\\\n                  swapTimestamps ? compareSnapshot : snapshot\\\\\\\\n                ),\\\\\\\\n                prevCode: combineText(\\\\\\\\n                  swapTimestamps ? snapshot : compareSnapshot\\\\\\\\n                ),\\\\\\\\n                showLineNumber: true,\\\\\\\\n              }}\\\\\\\\n            />\\\\\\\\n          </div>\\\\\\\\n        </div>\\\\\\\\n      ) : (\\\\\\\\n        <>\\\\\\\\n          {postTitle}\\\\\\\\n          {postExtra}\\\\\\\\n          {descriptionArea}\\\\\\\\n        </>\\\\\\\\n      )}\\\\\\\\n      {tags}\\\\\\\\n      {buttonsFooter}\\\\\\\\n      {!props.isPreview && (isDraft || state.showEditor) && <Editor />}\\\\\\\\n      {postsList}\\\\\\\\n    </div>\\\\\\\\n  </CardContainer>\\\\\\\\n);\\\\\\\\n\"}, \"devhub.entity.post.draft\": {\"\": \"const DRAFT_STATE_STORAGE_KEY = \\\\\\\\\\\\\\\"POST_DRAFT_STATE\\\\\\\\\\\\\\\";\\\\\\\\nlet is_edit_or_add_post_transaction = false;\\\\\\\\nlet transaction_method_name;\\\\\\\\n\\\\\\\\nif (props.transactionHashes) {\\\\\\\\n  const transaction = fetch(\\\\\\\\\\\\\\\"https://rpc.mainnet.near.org\\\\\\\\\\\\\\\", {\\\\\\\\n    method: \\\\\\\\\\\\\\\"POST\\\\\\\\\\\\\\\",\\\\\\\\n    headers: {\\\\\\\\n      \\\\\\\\\\\\\\\"content-type\\\\\\\\\\\\\\\": \\\\\\\\\\\\\\\"application/json\\\\\\\\\\\\\\\",\\\\\\\\n    },\\\\\\\\n    body: JSON.stringify({\\\\\\\\n      jsonrpc: \\\\\\\\\\\\\\\"2.0\\\\\\\\\\\\\\\",\\\\\\\\n      id: \\\\\\\\\\\\\\\"dontcare\\\\\\\\\\\\\\\",\\\\\\\\n      method: \\\\\\\\\\\\\\\"tx\\\\\\\\\\\\\\\",\\\\\\\\n      params: [props.transactionHashes, context.accountId],\\\\\\\\n    }),\\\\\\\\n  });\\\\\\\\n  transaction_method_name =\\\\\\\\n    transaction?.body?.result?.transaction?.actions[0].FunctionCall.method_name;\\\\\\\\n\\\\\\\\n  is_edit_or_add_post_transaction =\\\\\\\\n    transaction_method_name == \\\\\\\\\\\\\\\"add_post\\\\\\\\\\\\\\\" ||\\\\\\\\n    transaction_method_name == \\\\\\\\\\\\\\\"edit_post\\\\\\\\\\\\\\\";\\\\\\\\n\\\\\\\\n  if (is_edit_or_add_post_transaction) {\\\\\\\\n    Storage.privateSet(DRAFT_STATE_STORAGE_KEY, undefined);\\\\\\\\n  }\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst onDraftStateChange = (draftState) =>\\\\\\\\n  Storage.privateSet(DRAFT_STATE_STORAGE_KEY, JSON.stringify(draftState));\\\\\\\\nlet draftState;\\\\\\\\ntry {\\\\\\\\n  draftState = JSON.parse(Storage.privateGet(DRAFT_STATE_STORAGE_KEY));\\\\\\\\n} catch (e) {}\\\\\\\\n\\\\\\\\nreturn { DRAFT_STATE_STORAGE_KEY, draftState, onDraftStateChange };\\\\\\\\n\"}}}}}"
      }
    ],
    "actions_agg": {
      "deposit": 0
    },
    "outcomes": {
      "status": true
    },
    "outcomes_agg": {
      "transaction_fee": 2.0327509765077e+21
    }
  },
  {
    "id": "1404025292",
    "receipt_id": "2NkzTGsAdyYyXLJQnL2Li5oGFNLq8PN8WcbLUAi2UwGa",
    "predecessor_account_id": "system",
    "receiver_account_id": "devhub.near",
    "receipt_kind": "ACTION",
    "receipt_block": {
      "block_hash": "3Gty9uschgZq9cdnoN7qsQdQdhBrHf3ADCnCnVALo5Cv",
      "block_height": 105601743,
      "block_timestamp": 1699870059150343000
    },
    "receipt_outcome": {
      "gas_burnt": 223182562500,
      "tokens_burnt": 0,
      "executor_account_id": "devhub.near",
      "status": true
    },
    "transaction_hash": "3Q61jcbiMPcsQdBBHiaiReT7JFaK2ohdsXeqHS23YNyb",
    "included_in_block_hash": "DLpatVj9wAsNik81KDBbk7MVToujDKC6NJGDSWB6RLCP",
    "block_timestamp": "1699870056808911515",
    "block": {
      "block_height": 105601741
    },
    "receipt_conversion_tokens_burnt": "255263245478400000000",
    "actions": [
      {
        "action": "TRANSFER",
        "method": null,
        "deposit": 1.8733006230266695e+23,
        "fee": 0,
        "args": null
      }
    ],
    "actions_agg": {
      "deposit": 0
    },
    "outcomes": {
      "status": true
    },
    "outcomes_agg": {
      "transaction_fee": 2.0327509765077e+21
    }
  },
  {
    "id": "1404036825",
    "receipt_id": "9ojCq1ekVoyGq6VJ2eeQ6HjSrBCucTP9eEZHViruoKPC",
    "predecessor_account_id": "devhub.near",
    "receiver_account_id": "social.near",
    "receipt_kind": "ACTION",
    "receipt_block": {
      "block_hash": "8zYM51HHt3j5hVGiW9HVHbbcmNGfMFWk5JCjnGVSdWo1",
      "block_height": 105601841,
      "block_timestamp": 1699870169548616200
    },
    "receipt_outcome": {
      "gas_burnt": 10143090903421,
      "tokens_burnt": 1.0143090903421e+21,
      "executor_account_id": "social.near",
      "status": true
    },
    "transaction_hash": "Chkn59ojvXwsL68P3DHJzN5CfHPQSJ67NJEae6ZcP2y5",
    "included_in_block_hash": "FJpYqmRn5YsCC3U4aE5Zn4mALWm4JRWyEEEY6FqSPk9o",
    "block_timestamp": "1699870168265894590",
    "block": {
      "block_height": 105601840
    },
    "receipt_conversion_tokens_burnt": "247045070061400000000",
    "actions": [
      {
        "action": "FUNCTION_CALL",
        "method": "set",
        "deposit": 0,
        "fee": 1.0143090903421e+21,
        "args": "{\"data\": {\"devhub.near\": {\"widget\": {\"devhub.entity.post.List\": {\"\": \"// This component implementation was forked from [IndexFeed], but it does not fully implement lazy loading.\\\\\\\\n// While this component uses InfiniteScroll, it still loads the whole list of Post IDs in one view call.\\\\\\\\n// The contract will need to be extended with pagination support, yet, even in the current state the page loads much faster.\\\\\\\\n// [IndexFeed]: https://near.social/#/mob.near/widget/WidgetSource?src=mob.near/widget/IndexFeed\\\\\\\\n\\\\\\\\nconst { href } = VM.require(\\\\\\\\\\\\\\\"devhub.near/widget/core.lib.url\\\\\\\\\\\\\\\");\\\\\\\\n\\\\\\\\nconst { draftState, onDraftStateChange } = VM.require(\\\\\\\\n  \\\\\\\\\\\\\\\"devhub.near/widget/devhub.entity.post.draft\\\\\\\\\\\\\\\"\\\\\\\\n);\\\\\\\\n\\\\\\\\nif (!href) {\\\\\\\\n  return <p>Loading modules...</p>;\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst QUERYAPI_ENDPOINT = `https://near-queryapi.api.pagoda.co/v1/graphql/`;\\\\\\\\n\\\\\\\\nconst queryName =\\\\\\\\n  props.queryName ?? `bo_near_devhub_v32_posts_with_latest_snapshot`;\\\\\\\\n\\\\\\\\nconst query = `query DevhubPostsQuery($limit: Int = 100, $offset: Int = 0, $where: ${queryName}_bool_exp = {}) {\\\\\\\\n    ${queryName}(\\\\\\\\n      limit: $limit\\\\\\\\n      offset: $offset\\\\\\\\n      order_by: {block_height: desc}\\\\\\\\n      where: $where\\\\\\\\n    ) {\\\\\\\\n      post_id\\\\\\\\n    }\\\\\\\\n  }\\\\\\\\n`;\\\\\\\\n\\\\\\\\nfunction fetchGraphQL(operationsDoc, operationName, variables) {\\\\\\\\n  return asyncFetch(QUERYAPI_ENDPOINT, {\\\\\\\\n    method: \\\\\\\\\\\\\\\"POST\\\\\\\\\\\\\\\",\\\\\\\\n    headers: { \\\\\\\\\\\\\\\"x-hasura-role\\\\\\\\\\\\\\\": `bo_near` },\\\\\\\\n    body: JSON.stringify({\\\\\\\\n      query: operationsDoc,\\\\\\\\n      variables: variables,\\\\\\\\n      operationName: operationName,\\\\\\\\n    }),\\\\\\\\n  });\\\\\\\\n}\\\\\\\\n\\\\\\\\nfunction searchConditionChanged() {\\\\\\\\n  return (\\\\\\\\n    props.author != state.author ||\\\\\\\\n    props.term != state.term ||\\\\\\\\n    props.tag != state.tag ||\\\\\\\\n    props.recency != state.recency\\\\\\\\n  );\\\\\\\\n}\\\\\\\\n\\\\\\\\nfunction updateSearchCondition() {\\\\\\\\n  State.update({\\\\\\\\n    author: props.author,\\\\\\\\n    term: props.term,\\\\\\\\n    tag: props.tag,\\\\\\\\n    recency: props.recency,\\\\\\\\n    loading: true,\\\\\\\\n  });\\\\\\\\n}\\\\\\\\n\\\\\\\\nfunction getPostIds() {\\\\\\\\n  if (searchConditionChanged()) {\\\\\\\\n    updateSearchCondition();\\\\\\\\n    return;\\\\\\\\n  }\\\\\\\\n  let where = {};\\\\\\\\n  let authorId = props.author;\\\\\\\\n  let label = props.tag;\\\\\\\\n  if (authorId) {\\\\\\\\n    where = { author_id: { _eq: authorId }, ...where };\\\\\\\\n  }\\\\\\\\n  if (props.term) {\\\\\\\\n    where = { description: { _ilike: `%${props.term}%` }, ...where };\\\\\\\\n  }\\\\\\\\n  if (label) {\\\\\\\\n    if (typeof label === \\\\\\\\\\\\\\\"string\\\\\\\\\\\\\\\") {\\\\\\\\n      // Handle a single label\\\\\\\\n      where = { labels: { _contains: label }, ...where };\\\\\\\\n    } else if (Array.isArray(label)) {\\\\\\\\n      // Handle an array of labels\\\\\\\\n      where = {\\\\\\\\n        labels: {\\\\\\\\n          _containsAny: label,\\\\\\\\n        },\\\\\\\\n        ...where,\\\\\\\\n      };\\\\\\\\n    }\\\\\\\\n  }\\\\\\\\n  if (!props.recency) {\\\\\\\\n    // show only top level posts\\\\\\\\n    where = { parent_id: { _is_null: true }, ...where };\\\\\\\\n  }\\\\\\\\n\\\\\\\\n  // Don\\\\\\\\\\\\'t show blog\\\\\\\\n  where = {\\\\\\\\n    _not: {\\\\\\\\n      labels: { _contains: \\\\\\\\\\\\\\\"blog\\\\\\\\\\\\\\\" },\\\\\\\\n      parent_id: { _is_null: true },\\\\\\\\n      post_type: { _eq: \\\\\\\\\\\\\\\"Comment\\\\\\\\\\\\\\\" },\\\\\\\\n    },\\\\\\\\n    ...where,\\\\\\\\n  };\\\\\\\\n\\\\\\\\n  console.log(\\\\\\\\\\\\\\\"searching for\\\\\\\\\\\\\\\", where);\\\\\\\\n  fetchGraphQL(query, \\\\\\\\\\\\\\\"DevhubPostsQuery\\\\\\\\\\\\\\\", {\\\\\\\\n    limit: 100,\\\\\\\\n    offset: 0,\\\\\\\\n    where,\\\\\\\\n  }).then((result) => {\\\\\\\\n    if (result.status === 200) {\\\\\\\\n      console.log(\\\\\\\\\\\\\\\"search success\\\\\\\\\\\\\\\");\\\\\\\\n      if (result.body.data) {\\\\\\\\n        const data = result.body.data[queryName];\\\\\\\\n        State.update({\\\\\\\\n          postIds: data.map((p) => p.post_id),\\\\\\\\n          loading: false,\\\\\\\\n        });\\\\\\\\n        console.log(\\\\\\\\\\\\\\\"found:\\\\\\\\\\\\\\\");\\\\\\\\n        console.log(data);\\\\\\\\n      }\\\\\\\\n    } else {\\\\\\\\n      console.error(\\\\\\\\\\\\\\\"error:\\\\\\\\\\\\\\\", result.body);\\\\\\\\n      State.update({ loading: false });\\\\\\\\n    }\\\\\\\\n  });\\\\\\\\n}\\\\\\\\n\\\\\\\\nState.init({\\\\\\\\n  period: \\\\\\\\\\\\\\\"week\\\\\\\\\\\\\\\",\\\\\\\\n});\\\\\\\\n\\\\\\\\ngetPostIds();\\\\\\\\n\\\\\\\\nfunction defaultRenderItem(postId, additionalProps) {\\\\\\\\n  if (!additionalProps) {\\\\\\\\n    additionalProps = {};\\\\\\\\n  }\\\\\\\\n  // It is important to have a non-zero-height element as otherwise InfiniteScroll loads too many items on initial load\\\\\\\\n  return (\\\\\\\\n    <div className=\\\\\\\\\\\\\\\"py-2\\\\\\\\\\\\\\\" style={{ minHeight: \\\\\\\\\\\\\\\"150px\\\\\\\\\\\\\\\" }}>\\\\\\\\n      <Widget\\\\\\\\n        src={\\\\\\\\\\\\\\\"devhub.near/widget/devhub.entity.post.Post\\\\\\\\\\\\\\\"}\\\\\\\\n        props={{\\\\\\\\n          id: postId,\\\\\\\\n          expandable: true,\\\\\\\\n          defaultExpanded: false,\\\\\\\\n          isInList: true,\\\\\\\\n          draftState,\\\\\\\\n          isPreview: false,\\\\\\\\n          onDraftStateChange,\\\\\\\\n          ...additionalProps,\\\\\\\\n          referral: postId,\\\\\\\\n        }}\\\\\\\\n      />\\\\\\\\n    </div>\\\\\\\\n  );\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst renderItem = props.renderItem ?? defaultRenderItem;\\\\\\\\n\\\\\\\\nconst cachedRenderItem = (item, i) => {\\\\\\\\n  if (props.term) {\\\\\\\\n    return renderItem(item, {\\\\\\\\n      searchKeywords: [props.term],\\\\\\\\n    });\\\\\\\\n  }\\\\\\\\n\\\\\\\\n  const key = JSON.stringify(item);\\\\\\\\n\\\\\\\\n  if (!(key in state.cachedItems)) {\\\\\\\\n    state.cachedItems[key] = renderItem(item);\\\\\\\\n    State.update();\\\\\\\\n  }\\\\\\\\n  return state.cachedItems[key];\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst initialRenderLimit = props.initialRenderLimit ?? 3;\\\\\\\\nconst addDisplayCount = props.nextLimit ?? initialRenderLimit;\\\\\\\\n\\\\\\\\nconst ONE_DAY = 60 * 60 * 24 * 1000;\\\\\\\\nconst ONE_WEEK = 60 * 60 * 24 * 1000 * 7;\\\\\\\\nconst ONE_MONTH = 60 * 60 * 24 * 1000 * 30;\\\\\\\\n\\\\\\\\nfunction getHotnessScore(post) {\\\\\\\\n  //post.id - shows the age of the post, should grow exponentially, since newer posts are more important\\\\\\\\n  //post.likes.length - linear value\\\\\\\\n  const age = Math.pow(post.id, 5);\\\\\\\\n  const comments = post.comments;\\\\\\\\n  const commentAge = comments.reduce((sum, age) => sum + Math.pow(age, 5), 0);\\\\\\\\n  const totalAge = age + commentAge;\\\\\\\\n  //use log functions to make likes score and exponentially big age score close to each other\\\\\\\\n  return Math.log10(post.likes.length) + Math.log(Math.log10(totalAge));\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst getPeriodText = (period) => {\\\\\\\\n  let text = \\\\\\\\\\\\\\\"Last 24 hours\\\\\\\\\\\\\\\";\\\\\\\\n  if (period === \\\\\\\\\\\\\\\"week\\\\\\\\\\\\\\\") {\\\\\\\\n    text = \\\\\\\\\\\\\\\"Last week\\\\\\\\\\\\\\\";\\\\\\\\n  }\\\\\\\\n  if (period === \\\\\\\\\\\\\\\"month\\\\\\\\\\\\\\\") {\\\\\\\\n    text = \\\\\\\\\\\\\\\"Last month\\\\\\\\\\\\\\\";\\\\\\\\n  }\\\\\\\\n  return text;\\\\\\\\n};\\\\\\\\n\\\\\\\\nlet postIds = state.postIds ?? null;\\\\\\\\n\\\\\\\\nconst loader = (\\\\\\\\n  <div className=\\\\\\\\\\\\\\\"loader\\\\\\\\\\\\\\\" key={\\\\\\\\\\\\\\\"loader\\\\\\\\\\\\\\\"}>\\\\\\\\n    <span\\\\\\\\n      className=\\\\\\\\\\\\\\\"spinner-grow spinner-grow-sm me-1\\\\\\\\\\\\\\\"\\\\\\\\n      role=\\\\\\\\\\\\\\\"status\\\\\\\\\\\\\\\"\\\\\\\\n      aria-hidden=\\\\\\\\\\\\\\\"true\\\\\\\\\\\\\\\"\\\\\\\\n    />\\\\\\\\n    Loading ...\\\\\\\\n  </div>\\\\\\\\n);\\\\\\\\n\\\\\\\\nif (postIds === null) {\\\\\\\\n  return loader;\\\\\\\\n}\\\\\\\\nconst initialItems = postIds;\\\\\\\\n//const initialItems = postIds.map(postId => ({ id: postId, ...Near.view(nearDevGovGigsContractAccountId, \\\\\\\\\\\\\\\"get_post\\\\\\\\\\\\\\\", { post_id: postId }) }));\\\\\\\\n\\\\\\\\n// const computeFetchFrom = (items, limit) => {\\\\\\\\n//   if (!items || items.length < limit) {\\\\\\\\n//     return false;\\\\\\\\n//   }\\\\\\\\n//   const blockHeight = items[items.length - 1].blockHeight;\\\\\\\\n//   return index.options.order === \\\\\\\\\\\\\\\"desc\\\\\\\\\\\\\\\" ? blockHeight - 1 : blockHeight + 1;\\\\\\\\n// };\\\\\\\\n\\\\\\\\n// const mergeItems = (newItems) => {\\\\\\\\n//   const items = [\\\\\\\\n//     ...new Set([...newItems, ...state.items].map((i) => JSON.stringify(i))),\\\\\\\\n//   ].map((i) => JSON.parse(i));\\\\\\\\n//   items.sort((a, b) => a.blockHeight - b.blockHeight);\\\\\\\\n//   if (index.options.order === \\\\\\\\\\\\\\\"desc\\\\\\\\\\\\\\\") {\\\\\\\\n//     items.reverse();\\\\\\\\n//   }\\\\\\\\n//   return items;\\\\\\\\n// };\\\\\\\\n\\\\\\\\nconst jInitialItems = JSON.stringify(initialItems);\\\\\\\\nif (state.jInitialItems !== jInitialItems) {\\\\\\\\n  // const jIndex = JSON.stringify(index);\\\\\\\\n  // if (jIndex !== state.jIndex) {\\\\\\\\n  State.update({\\\\\\\\n    jIndex,\\\\\\\\n    jInitialItems,\\\\\\\\n    items: initialItems,\\\\\\\\n    fetchFrom: false,\\\\\\\\n    //nextFetchFrom: computeFetchFrom(initialItems, index.options.limit),\\\\\\\\n    nextFetchFrom: false,\\\\\\\\n    displayCount: initialRenderLimit,\\\\\\\\n    cachedItems: {},\\\\\\\\n  });\\\\\\\\n  // } else {\\\\\\\\n  //   State.update({\\\\\\\\n  //     jInitialItems,\\\\\\\\n  //     items: mergeItems(initialItems),\\\\\\\\n  //   });\\\\\\\\n  // }\\\\\\\\n}\\\\\\\\n\\\\\\\\nif (state.fetchFrom) {\\\\\\\\n  // TODO: fetchFrom\\\\\\\\n  // const limit = addDisplayCount;\\\\\\\\n  // const newItems = Social.index(\\\\\\\\n  //   index.action,\\\\\\\\n  //   index.key,\\\\\\\\n  //   Object.assign({}, index.options, {\\\\\\\\n  //     from: state.fetchFrom,\\\\\\\\n  //     subscribe: undefined,\\\\\\\\n  //     limit,\\\\\\\\n  //   })\\\\\\\\n  // );\\\\\\\\n  // if (newItems !== null) {\\\\\\\\n  //   State.update({\\\\\\\\n  //     items: mergeItems(newItems),\\\\\\\\n  //     fetchFrom: false,\\\\\\\\n  //     nextFetchFrom: computeFetchFrom(newItems, limit),\\\\\\\\n  //   });\\\\\\\\n  // }\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst makeMoreItems = () => {\\\\\\\\n  State.update({\\\\\\\\n    displayCount: state.displayCount + addDisplayCount,\\\\\\\\n  });\\\\\\\\n  if (\\\\\\\\n    state.items.length - state.displayCount < addDisplayCount * 2 &&\\\\\\\\n    !state.fetchFrom &&\\\\\\\\n    state.nextFetchFrom &&\\\\\\\\n    state.nextFetchFrom !== state.fetchFrom\\\\\\\\n  ) {\\\\\\\\n    State.update({\\\\\\\\n      fetchFrom: state.nextFetchFrom,\\\\\\\\n    });\\\\\\\\n  }\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst fetchMore =\\\\\\\\n  props.manual &&\\\\\\\\n  (state.fetchFrom && state.items.length < state.displayCount\\\\\\\\n    ? loader\\\\\\\\n    : state.displayCount < state.items.length && (\\\\\\\\n        <div key={\\\\\\\\\\\\\\\"loader more\\\\\\\\\\\\\\\"}>\\\\\\\\n          <a href=\\\\\\\\\\\\\\\"javascript:void\\\\\\\\\\\\\\\" onClick={(e) => makeMoreItems()}>\\\\\\\\n            {props.loadMoreText ?? \\\\\\\\\\\\\\\"Load more...\\\\\\\\\\\\\\\"}\\\\\\\\n          </a>\\\\\\\\n        </div>\\\\\\\\n      ));\\\\\\\\n\\\\\\\\nconst items = state.items ? state.items.slice(0, state.displayCount) : [];\\\\\\\\n\\\\\\\\nconst renderedItems = items.map(cachedRenderItem);\\\\\\\\n\\\\\\\\nconst Head =\\\\\\\\n  props.recency == \\\\\\\\\\\\\\\"hot\\\\\\\\\\\\\\\" ? (\\\\\\\\n    <div class=\\\\\\\\\\\\\\\"row\\\\\\\\\\\\\\\">\\\\\\\\n      <div class=\\\\\\\\\\\\\\\"fs-5 col-6 align-self-center\\\\\\\\\\\\\\\">\\\\\\\\n        <i class=\\\\\\\\\\\\\\\"bi-fire\\\\\\\\\\\\\\\"></i>\\\\\\\\n        <span>Hottest Posts</span>\\\\\\\\n      </div>\\\\\\\\n      <div class=\\\\\\\\\\\\\\\"col-6 dropdown d-flex justify-content-end\\\\\\\\\\\\\\\">\\\\\\\\n        <a\\\\\\\\n          class=\\\\\\\\\\\\\\\"btn btn-secondary dropdown-toggle\\\\\\\\\\\\\\\"\\\\\\\\n          href=\\\\\\\\\\\\\\\"#\\\\\\\\\\\\\\\"\\\\\\\\n          role=\\\\\\\\\\\\\\\"button\\\\\\\\\\\\\\\"\\\\\\\\n          id=\\\\\\\\\\\\\\\"dropdownMenuLink\\\\\\\\\\\\\\\"\\\\\\\\n          data-bs-toggle=\\\\\\\\\\\\\\\"dropdown\\\\\\\\\\\\\\\"\\\\\\\\n          aria-expanded=\\\\\\\\\\\\\\\"false\\\\\\\\\\\\\\\"\\\\\\\\n        >\\\\\\\\n          {getPeriodText(state.period)}\\\\\\\\n        </a>\\\\\\\\n\\\\\\\\n        <ul class=\\\\\\\\\\\\\\\"dropdown-menu\\\\\\\\\\\\\\\" aria-labelledby=\\\\\\\\\\\\\\\"dropdownMenuLink\\\\\\\\\\\\\\\">\\\\\\\\n          <li>\\\\\\\\n            <button\\\\\\\\n              class=\\\\\\\\\\\\\\\"dropdown-item\\\\\\\\\\\\\\\"\\\\\\\\n              onClick={() => {\\\\\\\\n                State.update({ period: \\\\\\\\\\\\\\\"day\\\\\\\\\\\\\\\" });\\\\\\\\n              }}\\\\\\\\n            >\\\\\\\\n              {getPeriodText(\\\\\\\\\\\\\\\"day\\\\\\\\\\\\\\\")}\\\\\\\\n            </button>\\\\\\\\n          </li>\\\\\\\\n          <li>\\\\\\\\n            <button\\\\\\\\n              class=\\\\\\\\\\\\\\\"dropdown-item\\\\\\\\\\\\\\\"\\\\\\\\n              onClick={() => {\\\\\\\\n                State.update({ period: \\\\\\\\\\\\\\\"week\\\\\\\\\\\\\\\" });\\\\\\\\n              }}\\\\\\\\n            >\\\\\\\\n              {getPeriodText(\\\\\\\\\\\\\\\"week\\\\\\\\\\\\\\\")}\\\\\\\\n            </button>\\\\\\\\n          </li>\\\\\\\\n          <li>\\\\\\\\n            <button\\\\\\\\n              class=\\\\\\\\\\\\\\\"dropdown-item\\\\\\\\\\\\\\\"\\\\\\\\n              onClick={() => {\\\\\\\\n                State.update({ period: \\\\\\\\\\\\\\\"month\\\\\\\\\\\\\\\" });\\\\\\\\n              }}\\\\\\\\n            >\\\\\\\\n              {getPeriodText(\\\\\\\\\\\\\\\"month\\\\\\\\\\\\\\\")}\\\\\\\\n            </button>\\\\\\\\n          </li>\\\\\\\\n        </ul>\\\\\\\\n      </div>\\\\\\\\n    </div>\\\\\\\\n  ) : (\\\\\\\\n    <></>\\\\\\\\n  );\\\\\\\\n\\\\\\\\nreturn (\\\\\\\\n  <>\\\\\\\\n    {Head}\\\\\\\\n    {state.loading ? loader : null}\\\\\\\\n    {is_edit_or_add_post_transaction ? (\\\\\\\\n      <p class=\\\\\\\\\\\\\\\"text-secondary mt-4\\\\\\\\\\\\\\\">\\\\\\\\n        Post {transaction_method_name == \\\\\\\\\\\\\\\"edit_post\\\\\\\\\\\\\\\" ? \\\\\\\\\\\\\\\"edited\\\\\\\\\\\\\\\" : \\\\\\\\\\\\\\\"added\\\\\\\\\\\\\\\"}{\\\\\\\\\\\\\\\" \\\\\\\\\\\\\\\"}\\\\\\\\n        successfully. Back to{\\\\\\\\\\\\\\\" \\\\\\\\\\\\\\\"}\\\\\\\\n        <Link\\\\\\\\n          style={{\\\\\\\\n            color: \\\\\\\\\\\\\\\"#3252A6\\\\\\\\\\\\\\\",\\\\\\\\n          }}\\\\\\\\n          className=\\\\\\\\\\\\\\\"fw-bold\\\\\\\\\\\\\\\"\\\\\\\\n          to={href({\\\\\\\\n            widgetSrc: \\\\\\\\\\\\\\\"devhub.near/widget/app\\\\\\\\\\\\\\\",\\\\\\\\n            params: { page: \\\\\\\\\\\\\\\"feed\\\\\\\\\\\\\\\" },\\\\\\\\n          })}\\\\\\\\n        >\\\\\\\\n          feed\\\\\\\\n        </Link>\\\\\\\\n      </p>\\\\\\\\n    ) : state.items.length > 0 ? (\\\\\\\\n      <InfiniteScroll\\\\\\\\n        pageStart={0}\\\\\\\\n        loadMore={makeMoreItems}\\\\\\\\n        hasMore={state.displayCount < state.items.length}\\\\\\\\n        loader={loader}\\\\\\\\n      >\\\\\\\\n        {renderedItems}\\\\\\\\n      </InfiniteScroll>\\\\\\\\n    ) : (\\\\\\\\n      <p class=\\\\\\\\\\\\\\\"text-secondary\\\\\\\\\\\\\\\">\\\\\\\\n        No posts{\\\\\\\\\\\\\\\" \\\\\\\\\\\\\\\"}\\\\\\\\n        {props.term || props.tag || props.author ? \\\\\\\\\\\\\\\"matches search\\\\\\\\\\\\\\\" : \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\"}\\\\\\\\n        {props.recency === \\\\\\\\\\\\\\\"hot\\\\\\\\\\\\\\\"\\\\\\\\n          ? \\\\\\\\\\\\\\\" in \\\\\\\\\\\\\\\" + getPeriodText(state.period).toLowerCase()\\\\\\\\n          : \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\"}\\\\\\\\n      </p>\\\\\\\\n    )}\\\\\\\\n  </>\\\\\\\\n);\\\\\\\\n\"}, \"devhub.entity.addon.blog.Feed\": {\"\": \"const { Item, Layout } = props;\\\\\\\\n\\\\\\\\nLayout = Layout || (() => <></>);\\\\\\\\n\\\\\\\\nconst Container = styled.div``;\\\\\\\\n\\\\\\\\nconst Loader = styled.div`\\\\\\\\n  text-align: center;\\\\\\\\n  padding: 20px;\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst QUERYAPI_ENDPOINT = `https://near-queryapi.api.pagoda.co/v1/graphql/`;\\\\\\\\nconst DISPLAY_COUNT = 10;\\\\\\\\n\\\\\\\\nconst fetchGraphQL = (operationsDoc, operationName, variables) => {\\\\\\\\n  return asyncFetch(QUERYAPI_ENDPOINT, {\\\\\\\\n    method: \\\\\\\\\\\\\\\"POST\\\\\\\\\\\\\\\",\\\\\\\\n    headers: { \\\\\\\\\\\\\\\"x-hasura-role\\\\\\\\\\\\\\\": `bo_near` },\\\\\\\\n    body: JSON.stringify({\\\\\\\\n      query: operationsDoc,\\\\\\\\n      variables: variables,\\\\\\\\n      operationName: operationName,\\\\\\\\n    }),\\\\\\\\n  });\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst queryName =\\\\\\\\n  props.queryName ?? `bo_near_devhub_v32_posts_with_latest_snapshot`;\\\\\\\\n\\\\\\\\nconst query = `query DevhubPostsQuery($limit: Int = 100, $offset: Int = 0, $where: ${queryName}_bool_exp = {}) {\\\\\\\\n    ${queryName}(\\\\\\\\n      limit: $limit\\\\\\\\n      offset: $offset\\\\\\\\n      order_by: {block_height: desc}\\\\\\\\n      where: $where\\\\\\\\n    ) {\\\\\\\\n      post_id\\\\\\\\n    }\\\\\\\\n  }\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst [postIds, setPostIds] = useState([]);\\\\\\\\nconst [loading, setLoading] = useState(false);\\\\\\\\nconst [cachedItems, setCachedItems] = useState({});\\\\\\\\nconst [hasNext, setHasNext] = useState(true);\\\\\\\\n\\\\\\\\nconst buildWhereClause = () => {\\\\\\\\n  let where = {};\\\\\\\\n  if (props.author) {\\\\\\\\n    where = { author_id: { _eq: props.author }, ...where };\\\\\\\\n  }\\\\\\\\n  if (props.term) {\\\\\\\\n    where = { description: { _ilike: `%${props.term}%` }, ...where };\\\\\\\\n  }\\\\\\\\n  if (props.includeLabels && Array.isArray(props.includeLabels)) {\\\\\\\\n    const labelConditions = props.includeLabels.map((label) => ({\\\\\\\\n      labels: { _contains: label },\\\\\\\\n    }));\\\\\\\\n\\\\\\\\n    where = { _and: [...labelConditions, where] };\\\\\\\\n  }\\\\\\\\n  if (props.excludeLabels && Array.isArray(props.excludeLabels)) {\\\\\\\\n    const labelConditions = props.excludeLabels.map((label) => ({\\\\\\\\n      labels: { _nin: label },\\\\\\\\n    }));\\\\\\\\n\\\\\\\\n    where = { _and: [...labelConditions, where] };\\\\\\\\n  }\\\\\\\\n  if (!props.recency) {\\\\\\\\n    where = { parent_id: { _is_null: true }, ...where };\\\\\\\\n  }\\\\\\\\n  return where;\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst fetchPostIds = (offset) => {\\\\\\\\n  if (!offset) {\\\\\\\\n    offset = 0;\\\\\\\\n  }\\\\\\\\n  if (loading) return;\\\\\\\\n  setLoading(true);\\\\\\\\n  const variables = { limit: DISPLAY_COUNT, offset, where: buildWhereClause() };\\\\\\\\n  fetchGraphQL(query, \\\\\\\\\\\\\\\"DevhubPostsQuery\\\\\\\\\\\\\\\", variables).then((result) => {\\\\\\\\n    if (result.status === 200) {\\\\\\\\n      if (result.body.data) {\\\\\\\\n        const data = result.body.data[queryName];\\\\\\\\n        const newPostIds = data.map((p) => p.post_id);\\\\\\\\n        setPostIds(offset === 0 ? newPostIds : [...postIds, ...newPostIds]);\\\\\\\\n        setHasNext(data.length >= variables.limit);\\\\\\\\n      } else {\\\\\\\\n        console.error(\\\\\\\\\\\\\\\"GraphQL Error:\\\\\\\\\\\\\\\", result.errors);\\\\\\\\n      }\\\\\\\\n      setLoading(false);\\\\\\\\n    }\\\\\\\\n  });\\\\\\\\n};\\\\\\\\n\\\\\\\\nuseEffect(() => {\\\\\\\\n  fetchPostIds();\\\\\\\\n}, [props.author, props.term, props.tag, props.recency]);\\\\\\\\n\\\\\\\\nconst handleLoadMore = () => {\\\\\\\\n  if (!hasNext) return;\\\\\\\\n  fetchPostIds(postIds.length);\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst renderLoader = () => <Loader>Loading...</Loader>;\\\\\\\\n\\\\\\\\nconst renderItem = (postId) => (\\\\\\\\n  <div key={postId}>\\\\\\\\n    {(props.renderItem && props.renderItem(postId)) || <div>Post {postId}</div>}\\\\\\\\n  </div>\\\\\\\\n);\\\\\\\\n\\\\\\\\nconst cachedRenderItem = (postId) => {\\\\\\\\n  if (!(postId in cachedItems)) {\\\\\\\\n    cachedItems[postId] = renderItem(postId);\\\\\\\\n    setCachedItems({ ...cachedItems });\\\\\\\\n  }\\\\\\\\n  return cachedItems[postId];\\\\\\\\n};\\\\\\\\n\\\\\\\\nreturn (\\\\\\\\n  <Container>\\\\\\\\n    {loading && renderLoader()}\\\\\\\\n    {postIds.length > 0 ? (\\\\\\\\n      <InfiniteScroll\\\\\\\\n        pageStart={0}\\\\\\\\n        dataLength={postIds.length}\\\\\\\\n        loadMore={handleLoadMore}\\\\\\\\n        hasMore={hasNext}\\\\\\\\n        loader={renderLoader()}\\\\\\\\n      >\\\\\\\\n        <Layout>\\\\\\\\n          {/* Layout */}\\\\\\\\n          {postIds.map(cachedRenderItem)}\\\\\\\\n        </Layout>\\\\\\\\n      </InfiniteScroll>\\\\\\\\n    ) : (\\\\\\\\n      <p class=\\\\\\\\\\\\\\\"text-secondary\\\\\\\\\\\\\\\">No posts</p>\\\\\\\\n    )}\\\\\\\\n  </Container>\\\\\\\\n);\\\\\\\\n\"}, \"devhub.entity.addon.blog.editor.provider\": {\"\": \"const { getPost } =\\\\\\\\n  VM.require(\\\\\\\\\\\\\\\"devhub.near/widget/core.adapter.devhub-contract\\\\\\\\\\\\\\\") ||\\\\\\\\n  (() => {});\\\\\\\\n\\\\\\\\nconst { Layout, handle } = props;\\\\\\\\n\\\\\\\\nconst QUERYAPI_ENDPOINT = `https://near-queryapi.api.pagoda.co/v1/graphql/`;\\\\\\\\n\\\\\\\\nconst fetchGraphQL = (operationsDoc, operationName, variables) => {\\\\\\\\n  return fetch(QUERYAPI_ENDPOINT, {\\\\\\\\n    method: \\\\\\\\\\\\\\\"POST\\\\\\\\\\\\\\\",\\\\\\\\n    headers: { \\\\\\\\\\\\\\\"x-hasura-role\\\\\\\\\\\\\\\": `bo_near` },\\\\\\\\n    body: JSON.stringify({\\\\\\\\n      query: operationsDoc,\\\\\\\\n      variables: variables,\\\\\\\\n      operationName: operationName,\\\\\\\\n    }),\\\\\\\\n  });\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst queryName =\\\\\\\\n  props.queryName ?? `bo_near_devhub_v17_posts_with_latest_snapshot`;\\\\\\\\n\\\\\\\\nconst query = `query DevhubPostsQuery($limit: Int = 100, $offset: Int = 0, $where: ${queryName}_bool_exp = {}) {\\\\\\\\n    ${queryName}(\\\\\\\\n      limit: $limit\\\\\\\\n      offset: $offset\\\\\\\\n      order_by: {block_height: desc}\\\\\\\\n      where: $where\\\\\\\\n    ) {\\\\\\\\n      post_id\\\\\\\\n    }\\\\\\\\n  }\\\\\\\\n`;\\\\\\\\n\\\\\\\\nconst includeLabels = [\\\\\\\\\\\\\\\"blog\\\\\\\\\\\\\\\", handle];\\\\\\\\n\\\\\\\\nconst buildWhereClause = () => {\\\\\\\\n  let where = {};\\\\\\\\n  if (props.author) {\\\\\\\\n    where = { author_id: { _eq: props.author }, ...where };\\\\\\\\n  }\\\\\\\\n  if (props.term) {\\\\\\\\n    where = { description: { _ilike: `%${props.term}%` }, ...where };\\\\\\\\n  }\\\\\\\\n  if (includeLabels && Array.isArray(includeLabels)) {\\\\\\\\n    const labelConditions = includeLabels.map((label) => ({\\\\\\\\n      labels: { _contains: label },\\\\\\\\n    }));\\\\\\\\n\\\\\\\\n    where = { _and: [...labelConditions, where] };\\\\\\\\n  }\\\\\\\\n  if (props.excludeLabels && Array.isArray(props.excludeLabels)) {\\\\\\\\n    const labelConditions = props.excludeLabels.map((label) => ({\\\\\\\\n      labels: { _nin: label },\\\\\\\\n    }));\\\\\\\\n\\\\\\\\n    where = { _and: [...labelConditions, where] };\\\\\\\\n  }\\\\\\\\n  if (!props.recency) {\\\\\\\\n    where = { parent_id: { _is_null: true }, ...where };\\\\\\\\n  }\\\\\\\\n  return where;\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst variables = { limit: DISPLAY_COUNT, offset, where: buildWhereClause() };\\\\\\\\n\\\\\\\\nconst posts = fetch(QUERYAPI_ENDPOINT, {\\\\\\\\n  method: \\\\\\\\\\\\\\\"POST\\\\\\\\\\\\\\\",\\\\\\\\n  headers: { \\\\\\\\\\\\\\\"x-hasura-role\\\\\\\\\\\\\\\": `bo_near` },\\\\\\\\n  body: JSON.stringify({\\\\\\\\n    query: query,\\\\\\\\n    variables: variables,\\\\\\\\n    operationName: \\\\\\\\\\\\\\\"DevhubPostsQuery\\\\\\\\\\\\\\\",\\\\\\\\n  }),\\\\\\\\n});\\\\\\\\n\\\\\\\\nconst handleOnChange = (v) => {\\\\\\\\n  console.log(\\\\\\\\\\\\\\\"onChange\\\\\\\\\\\\\\\", v);\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst handleGetData = (v) => {\\\\\\\\n  const postId = parseInt(v);\\\\\\\\n  const post = getPost({ post_id: postId });\\\\\\\\n  const description = JSON.parse(post.snapshot.description || \\\\\\\\\\\\\\\"null\\\\\\\\\\\\\\\") || {};\\\\\\\\n\\\\\\\\n  return {\\\\\\\\n    id: postId,\\\\\\\\n    ...description,\\\\\\\\n  };\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst handleOnSubmit = (v, isEdit) => {\\\\\\\\n  console.log(isEdit);\\\\\\\\n  if (isEdit) {\\\\\\\\n    Near.call({\\\\\\\\n      contractName: \\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\",\\\\\\\\n      methodName: \\\\\\\\\\\\\\\"edit_post\\\\\\\\\\\\\\\",\\\\\\\\n      args: {\\\\\\\\n        id: v.id,\\\\\\\\n        labels: [\\\\\\\\\\\\\\\"blog\\\\\\\\\\\\\\\", handle],\\\\\\\\n        body: {\\\\\\\\n          post_type: \\\\\\\\\\\\\\\"Comment\\\\\\\\\\\\\\\",\\\\\\\\n          description: JSON.stringify(v),\\\\\\\\n          comment_version: \\\\\\\\\\\\\\\"V2\\\\\\\\\\\\\\\",\\\\\\\\n        },\\\\\\\\n      },\\\\\\\\n      deposit: Big(10).pow(21).mul(2),\\\\\\\\n      gas: Big(10).pow(12).mul(100),\\\\\\\\n    });\\\\\\\\n  } else {\\\\\\\\n    Near.call({\\\\\\\\n      contractName: \\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\",\\\\\\\\n      methodName: \\\\\\\\\\\\\\\"add_post\\\\\\\\\\\\\\\",\\\\\\\\n      args: {\\\\\\\\n        labels: [\\\\\\\\\\\\\\\"blog\\\\\\\\\\\\\\\", handle],\\\\\\\\n        body: {\\\\\\\\n          post_type: \\\\\\\\\\\\\\\"Comment\\\\\\\\\\\\\\\",\\\\\\\\n          description: JSON.stringify(v),\\\\\\\\n          comment_version: \\\\\\\\\\\\\\\"V2\\\\\\\\\\\\\\\",\\\\\\\\n        },\\\\\\\\n      },\\\\\\\\n      deposit: Big(10).pow(21).mul(2),\\\\\\\\n      gas: Big(10).pow(12).mul(100),\\\\\\\\n    });\\\\\\\\n  }\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst handleOnCancel = (v) => {\\\\\\\\n  console.log(\\\\\\\\\\\\\\\"onCancel\\\\\\\\\\\\\\\", v);\\\\\\\\n};\\\\\\\\n\\\\\\\\nreturn (\\\\\\\\n  <Layout\\\\\\\\n    data={posts.body.data.bo_near_devhub_v32_posts_with_latest_snapshot || []}\\\\\\\\n    getData={handleGetData}\\\\\\\\n    onChange={handleOnChange}\\\\\\\\n    onSubmit={handleOnSubmit}\\\\\\\\n    onCancel={handleOnCancel}\\\\\\\\n  />\\\\\\\\n);\\\\\\\\n\"}}}}}"
      }
    ],
    "actions_agg": {
      "deposit": 0
    },
    "outcomes": {
      "status": true
    },
    "outcomes_agg": {
      "transaction_fee": 1.2613541604035e+21
    }
  },
  {
    "id": "1404036856",
    "receipt_id": "9MqPQ2MRU8soubKdftoTusmQS7fjRocZko8Pkc3fHfXo",
    "predecessor_account_id": "system",
    "receiver_account_id": "devhub.near",
    "receipt_kind": "ACTION",
    "receipt_block": {
      "block_hash": "GnJqVSvuUYZMHV3HHcsCDMn2uT37yqDox1wu6WMACqTp",
      "block_height": 105601842,
      "block_timestamp": 1699870170790968000
    },
    "receipt_outcome": {
      "gas_burnt": 223182562500,
      "tokens_burnt": 0,
      "executor_account_id": "devhub.near",
      "status": true
    },
    "transaction_hash": "Chkn59ojvXwsL68P3DHJzN5CfHPQSJ67NJEae6ZcP2y5",
    "included_in_block_hash": "FJpYqmRn5YsCC3U4aE5Zn4mALWm4JRWyEEEY6FqSPk9o",
    "block_timestamp": "1699870168265894590",
    "block": {
      "block_height": 105601840
    },
    "receipt_conversion_tokens_burnt": "247045070061400000000",
    "actions": [
      {
        "action": "TRANSFER",
        "method": null,
        "deposit": 1.880418740454281e+23,
        "fee": 0,
        "args": null
      }
    ],
    "actions_agg": {
      "deposit": 0
    },
    "outcomes": {
      "status": true
    },
    "outcomes_agg": {
      "transaction_fee": 1.2613541604035e+21
    }
  },
  {
    "id": "1404894913",
    "receipt_id": "FvftPFmaGhhq2aAbsU3oBfF3242oCLvGe49QuFv6q9aP",
    "predecessor_account_id": "devhub.near",
    "receiver_account_id": "social.near",
    "receipt_kind": "ACTION",
    "receipt_block": {
      "block_hash": "D7gixjWQ65CJ8kZqG4exePKobYK2JMqcAZb6N4BvaPRw",
      "block_height": 105612348,
      "block_timestamp": 1699881595803951600
    },
    "receipt_outcome": {
      "gas_burnt": 12044156466460,
      "tokens_burnt": 1.204415646646e+21,
      "executor_account_id": "social.near",
      "status": true
    },
    "transaction_hash": "E4BiRpGawxKx8RNMJFcr1cmMzvP5mZqtBDZ3ZvFCBqVh",
    "included_in_block_hash": "7KkECuPhVCQ5XNvzTiaXtU3kKB5oEHbffq93uJdpQMdB",
    "block_timestamp": "1699881594559983389",
    "block": {
      "block_height": 105612347
    },
    "receipt_conversion_tokens_burnt": "250914801035200000000",
    "actions": [
      {
        "action": "FUNCTION_CALL",
        "method": "set",
        "deposit": 0,
        "fee": 1.204415646646e+21,
        "args": "{\"data\": {\"devhub.near\": {\"widget\": {\"devhub.page.create\": {\"\": \"/* INCLUDE: \\\\\\\\\\\\\\\"core/lib/autocomplete\\\\\\\\\\\\\\\" */\\\\\\\\nconst autocompleteEnabled = true;\\\\\\\\n\\\\\\\\nconst AutoComplete = styled.div`\\\\\\\\n  z-index: 5;\\\\\\\\n\\\\\\\\n  > div > div {\\\\\\\\n    padding: calc(var(--padding) / 2);\\\\\\\\n  }\\\\\\\\n`;\\\\\\\\n\\\\\\\\nfunction textareaInputHandler(value) {\\\\\\\\n  const showAccountAutocomplete = /@[\\\\\\\\\\\\\\\\w][^\\\\\\\\\\\\\\\\s]*$/.test(value);\\\\\\\\n  State.update((lastKnownState) => ({\\\\\\\\n    ...lastKnownState,\\\\\\\\n    text: value,\\\\\\\\n    showAccountAutocomplete,\\\\\\\\n  }));\\\\\\\\n}\\\\\\\\n\\\\\\\\nfunction autoCompleteAccountId(id) {\\\\\\\\n  let description = state.description.replace(/[\\\\\\\\\\\\\\\\s]{0,1}@[^\\\\\\\\\\\\\\\\s]*$/, \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\");\\\\\\\\n  description = `${description} @${id}`.trim() + \\\\\\\\\\\\\\\" \\\\\\\\\\\\\\\";\\\\\\\\n  State.update((lastKnownState) => ({\\\\\\\\n    ...lastKnownState,\\\\\\\\n    description,\\\\\\\\n    showAccountAutocomplete: false,\\\\\\\\n  }));\\\\\\\\n}\\\\\\\\n/* END_INCLUDE: \\\\\\\\\\\\\\\"core/lib/autocomplete\\\\\\\\\\\\\\\" */\\\\\\\\n\\\\\\\\nconst { href } = VM.require(\\\\\\\\\\\\\\\"devhub.near/widget/core.lib.url\\\\\\\\\\\\\\\");\\\\\\\\n\\\\\\\\nconst { DRAFT_STATE_STORAGE_KEY, draftState, onDraftStateChange } = VM.require(\\\\\\\\n  \\\\\\\\\\\\\\\"devhub.near/widget/devhub.entity.post.draft\\\\\\\\\\\\\\\"\\\\\\\\n);\\\\\\\\n\\\\\\\\nif (!href) {\\\\\\\\n  return <p>Loading modules...</p>;\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst parentId = props.parentId ?? null;\\\\\\\\nconst postId = props.postId ?? null;\\\\\\\\nconst mode = props.mode ?? \\\\\\\\\\\\\\\"Create\\\\\\\\\\\\\\\";\\\\\\\\n\\\\\\\\nconst referralLabels = props.referral ? [`referral:${props.referral}`] : [];\\\\\\\\nconst labelStrings = (props.labels ? props.labels.split(\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\") : []).concat(\\\\\\\\n  referralLabels\\\\\\\\n);\\\\\\\\nconst labels = labelStrings.map((s) => {\\\\\\\\n  return { name: s };\\\\\\\\n});\\\\\\\\n\\\\\\\\nState.init({\\\\\\\\n  seekingFunding: false,\\\\\\\\n\\\\\\\\n  author_id: context.accountId,\\\\\\\\n  // Should be a list of objects with field \\\\\\\\\\\\\\\"name\\\\\\\\\\\\\\\".\\\\\\\\n  labels,\\\\\\\\n  // Should be a list of labels as strings.\\\\\\\\n  // Both of the label structures should be modified together.\\\\\\\\n  labelStrings,\\\\\\\\n  postType: \\\\\\\\\\\\\\\"Idea\\\\\\\\\\\\\\\",\\\\\\\\n  name: props.name ?? \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\",\\\\\\\\n  description: props.description ?? \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\",\\\\\\\\n  amount: props.amount ?? \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\",\\\\\\\\n  token: props.token ?? \\\\\\\\\\\\\\\"USDT\\\\\\\\\\\\\\\",\\\\\\\\n  supervisor: props.supervisor ?? \\\\\\\\\\\\\\\"neardevdao.near\\\\\\\\\\\\\\\",\\\\\\\\n  githubLink: props.githubLink ?? \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\",\\\\\\\\n  warning: \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\",\\\\\\\\n  waitForDraftStateRestore: true,\\\\\\\\n});\\\\\\\\n\\\\\\\\nif (state.waitForDraftStateRestore) {\\\\\\\\n  const draftstatestring = Storage.privateGet(DRAFT_STATE_STORAGE_KEY);\\\\\\\\n  if (draftstatestring != null) {\\\\\\\\n    if (props.transactionHashes) {\\\\\\\\n      State.update({ waitForDraftStateRestore: false });\\\\\\\\n      Storage.privateSet(DRAFT_STATE_STORAGE_KEY, undefined);\\\\\\\\n    } else {\\\\\\\\n      try {\\\\\\\\n        const draftstate = JSON.parse(draftstatestring);\\\\\\\\n        State.update(draftstate);\\\\\\\\n      } catch (e) {\\\\\\\\n        console.error(\\\\\\\\\\\\\\\"error restoring draft\\\\\\\\\\\\\\\", draftstatestring);\\\\\\\\n      }\\\\\\\\n    }\\\\\\\\n    State.update({ waitForDraftStateRestore: false });\\\\\\\\n  }\\\\\\\\n}\\\\\\\\n\\\\\\\\n// This must be outside onClick, because Near.view returns null at first, and when the view call finished, it returns true/false.\\\\\\\\n// If checking this inside onClick, it will give `null` and we cannot tell the result is true or false.\\\\\\\\nlet grantNotify = Near.view(\\\\\\\\\\\\\\\"social.near\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"is_write_permission_granted\\\\\\\\\\\\\\\", {\\\\\\\\n  predecessor_id: \\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\",\\\\\\\\n  key: context.accountId + \\\\\\\\\\\\\\\"/index/notify\\\\\\\\\\\\\\\",\\\\\\\\n});\\\\\\\\nif (grantNotify === null) {\\\\\\\\n  return;\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst onSubmit = () => {\\\\\\\\n  Storage.privateSet(DRAFT_STATE_STORAGE_KEY, JSON.stringify(state));\\\\\\\\n\\\\\\\\n  let labels = state.labelStrings;\\\\\\\\n\\\\\\\\n  let body = {\\\\\\\\n    name: state.name,\\\\\\\\n    description: generateDescription(\\\\\\\\n      state.description,\\\\\\\\n      state.amount,\\\\\\\\n      state.token,\\\\\\\\n      state.supervisor,\\\\\\\\n      state.seekingFunding\\\\\\\\n    ),\\\\\\\\n  };\\\\\\\\n\\\\\\\\n  if (state.postType === \\\\\\\\\\\\\\\"Solution\\\\\\\\\\\\\\\") {\\\\\\\\n    body = {\\\\\\\\n      ...body,\\\\\\\\n      post_type: \\\\\\\\\\\\\\\"Solution\\\\\\\\\\\\\\\",\\\\\\\\n      solution_version: \\\\\\\\\\\\\\\"V1\\\\\\\\\\\\\\\",\\\\\\\\n    };\\\\\\\\n  } else {\\\\\\\\n    // Idea\\\\\\\\n    body = {\\\\\\\\n      ...body,\\\\\\\\n      post_type: \\\\\\\\\\\\\\\"Idea\\\\\\\\\\\\\\\",\\\\\\\\n      idea_version: \\\\\\\\\\\\\\\"V1\\\\\\\\\\\\\\\",\\\\\\\\n    };\\\\\\\\n  }\\\\\\\\n\\\\\\\\n  if (!context.accountId) return;\\\\\\\\n\\\\\\\\n  let txn = [];\\\\\\\\n  if (mode == \\\\\\\\\\\\\\\"Create\\\\\\\\\\\\\\\") {\\\\\\\\n    txn.push({\\\\\\\\n      contractName: \\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\",\\\\\\\\n      methodName: \\\\\\\\\\\\\\\"add_post\\\\\\\\\\\\\\\",\\\\\\\\n      args: {\\\\\\\\n        parent_id: parentId,\\\\\\\\n        labels,\\\\\\\\n        body: body,\\\\\\\\n      },\\\\\\\\n      deposit: Big(10).pow(21).mul(3),\\\\\\\\n      gas: Big(10).pow(12).mul(100),\\\\\\\\n    });\\\\\\\\n  } else if (mode == \\\\\\\\\\\\\\\"Edit\\\\\\\\\\\\\\\") {\\\\\\\\n    txn.push({\\\\\\\\n      contractName: \\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\",\\\\\\\\n      methodName: \\\\\\\\\\\\\\\"edit_post\\\\\\\\\\\\\\\",\\\\\\\\n      args: {\\\\\\\\n        id: postId,\\\\\\\\n        labels,\\\\\\\\n        body: body,\\\\\\\\n      },\\\\\\\\n      deposit: Big(10).pow(21).mul(2),\\\\\\\\n      gas: Big(10).pow(12).mul(100),\\\\\\\\n    });\\\\\\\\n  }\\\\\\\\n  if (mode == \\\\\\\\\\\\\\\"Create\\\\\\\\\\\\\\\" || mode == \\\\\\\\\\\\\\\"Edit\\\\\\\\\\\\\\\") {\\\\\\\\n    if (grantNotify === false) {\\\\\\\\n      txn.unshift({\\\\\\\\n        contractName: \\\\\\\\\\\\\\\"social.near\\\\\\\\\\\\\\\",\\\\\\\\n        methodName: \\\\\\\\\\\\\\\"grant_write_permission\\\\\\\\\\\\\\\",\\\\\\\\n        args: {\\\\\\\\n          predecessor_id: \\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\",\\\\\\\\n          keys: [context.accountId + \\\\\\\\\\\\\\\"/index/notify\\\\\\\\\\\\\\\"],\\\\\\\\n        },\\\\\\\\n        deposit: Big(10).pow(23),\\\\\\\\n        gas: Big(10).pow(12).mul(30),\\\\\\\\n      });\\\\\\\\n    }\\\\\\\\n    Near.call(txn);\\\\\\\\n  }\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst onIdeaClick = () => {\\\\\\\\n  State.update({ postType: \\\\\\\\\\\\\\\"Idea\\\\\\\\\\\\\\\", seekingFunding: false });\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst onSolutionClick = () => {\\\\\\\\n  State.update({ postType: \\\\\\\\\\\\\\\"Solution\\\\\\\\\\\\\\\" });\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst normalizeLabel = (label) =>\\\\\\\\n  label\\\\\\\\n    .replaceAll(/[- \\\\\\\\\\\\\\\\.]/g, \\\\\\\\\\\\\\\"_\\\\\\\\\\\\\\\")\\\\\\\\n    .replaceAll(/[^\\\\\\\\\\\\\\\\w]+/g, \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\")\\\\\\\\n    .replaceAll(/_+/g, \\\\\\\\\\\\\\\"-\\\\\\\\\\\\\\\")\\\\\\\\n    .replace(/^-+/, \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\")\\\\\\\\n    .replace(/-+$/, \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\")\\\\\\\\n    .toLowerCase()\\\\\\\\n    .trim(\\\\\\\\\\\\\\\"-\\\\\\\\\\\\\\\");\\\\\\\\n\\\\\\\\nconst checkLabel = (label) => {\\\\\\\\n  Near.asyncView(\\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"is_allowed_to_use_labels\\\\\\\\\\\\\\\", {\\\\\\\\n    editor: context.accountId,\\\\\\\\n    labels: [label],\\\\\\\\n  }).then((allowed) => {\\\\\\\\n    if (allowed) {\\\\\\\\n      State.update({ warning: \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\" });\\\\\\\\n    } else {\\\\\\\\n      State.update({\\\\\\\\n        warning:\\\\\\\\n          \\\\\\\\\\\\'The label \\\\\\\\\\\\\\\"\\\\\\\\\\\\' +\\\\\\\\n          label +\\\\\\\\n          \\\\\\\\\\\\'\\\\\\\\\\\\\\\" is protected and can only be added by moderators\\\\\\\\\\\\',\\\\\\\\n      });\\\\\\\\n      return;\\\\\\\\n    }\\\\\\\\n  });\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst setLabels = (labels) => {\\\\\\\\n  labels = labels.map((o) => {\\\\\\\\n    o.name = normalizeLabel(o.name);\\\\\\\\n    return o;\\\\\\\\n  });\\\\\\\\n  if (labels.length < state.labels.length) {\\\\\\\\n    let oldLabels = new Set(state.labels.map((label) => label.name));\\\\\\\\n    for (let label of labels) {\\\\\\\\n      oldLabels.delete(label.name);\\\\\\\\n    }\\\\\\\\n    let removed = oldLabels.values().next().value;\\\\\\\\n    Near.asyncView(\\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"is_allowed_to_use_labels\\\\\\\\\\\\\\\", {\\\\\\\\n      editor: context.accountId,\\\\\\\\n      labels: [removed],\\\\\\\\n    }).then((allowed) => {\\\\\\\\n      if (allowed) {\\\\\\\\n        let labelStrings = labels.map(({ name }) => name);\\\\\\\\n        State.update({ labels, labelStrings });\\\\\\\\n      } else {\\\\\\\\n        State.update({\\\\\\\\n          warning:\\\\\\\\n            \\\\\\\\\\\\'The label \\\\\\\\\\\\\\\"\\\\\\\\\\\\' +\\\\\\\\n            removed +\\\\\\\\n            \\\\\\\\\\\\'\\\\\\\\\\\\\\\" is protected and can only be updated by moderators\\\\\\\\\\\\',\\\\\\\\n        });\\\\\\\\n        return;\\\\\\\\n      }\\\\\\\\n    });\\\\\\\\n  } else {\\\\\\\\n    let labelStrings = labels.map((o) => {\\\\\\\\n      return o.name;\\\\\\\\n    });\\\\\\\\n    State.update({ labels, labelStrings });\\\\\\\\n  }\\\\\\\\n};\\\\\\\\nconst existingLabelStrings =\\\\\\\\n  Near.view(\\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"get_all_allowed_labels\\\\\\\\\\\\\\\", {\\\\\\\\n    editor: context.accountId,\\\\\\\\n  }) ?? [];\\\\\\\\nconst existingLabelSet = new Set(existingLabelStrings);\\\\\\\\nconst existingLabels = existingLabelStrings\\\\\\\\n  .filter((it) => it !== \\\\\\\\\\\\\\\"blog\\\\\\\\\\\\\\\") // remove blog label so users cannot publish blogs from feed\\\\\\\\n  .map((s) => {\\\\\\\\n    return { name: s };\\\\\\\\n  });\\\\\\\\n\\\\\\\\nconst labelEditor = (\\\\\\\\n  <div className=\\\\\\\\\\\\\\\"col-lg-12 mb-2\\\\\\\\\\\\\\\">\\\\\\\\n    <p className=\\\\\\\\\\\\\\\"fs-6 fw-bold mb-1\\\\\\\\\\\\\\\">Labels</p>\\\\\\\\n    <Typeahead\\\\\\\\n      multiple\\\\\\\\n      labelKey=\\\\\\\\\\\\\\\"name\\\\\\\\\\\\\\\"\\\\\\\\n      onInputChange={checkLabel}\\\\\\\\n      onChange={setLabels}\\\\\\\\n      options={existingLabels}\\\\\\\\n      placeholder=\\\\\\\\\\\\\\\"near.social, widget, NEP, standard, protocol, tool\\\\\\\\\\\\\\\"\\\\\\\\n      selected={state.labels}\\\\\\\\n      positionFixed\\\\\\\\n      allowNew={(results, props) => {\\\\\\\\n        return (\\\\\\\\n          !existingLabelSet.has(props.text) &&\\\\\\\\n          props.text.toLowerCase() !== \\\\\\\\\\\\\\\"blog\\\\\\\\\\\\\\\" && // dont allow adding \\\\\\\\\\\\\\\"Blog\\\\\\\\\\\\\\\"\\\\\\\\n          props.selected.filter((selected) => selected.name === props.text)\\\\\\\\n            .length == 0 &&\\\\\\\\n          Near.view(\\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"is_allowed_to_use_labels\\\\\\\\\\\\\\\", {\\\\\\\\n            editor: context.accountId,\\\\\\\\n            labels: [props.text],\\\\\\\\n          })\\\\\\\\n        );\\\\\\\\n      }}\\\\\\\\n    />\\\\\\\\n  </div>\\\\\\\\n);\\\\\\\\n\\\\\\\\nconst nameDiv = (\\\\\\\\n  <div className=\\\\\\\\\\\\\\\"col-lg-6 mb-2\\\\\\\\\\\\\\\">\\\\\\\\n    <p className=\\\\\\\\\\\\\\\"fs-6 fw-bold mb-1\\\\\\\\\\\\\\\">Title</p>\\\\\\\\n    <input\\\\\\\\n      type=\\\\\\\\\\\\\\\"text\\\\\\\\\\\\\\\"\\\\\\\\n      value={state.name}\\\\\\\\n      onChange={(event) => State.update({ name: event.target.value })}\\\\\\\\n    />\\\\\\\\n  </div>\\\\\\\\n);\\\\\\\\n\\\\\\\\nconst descriptionDiv = (\\\\\\\\n  <div className=\\\\\\\\\\\\\\\"col-lg-12 mb-2\\\\\\\\\\\\\\\">\\\\\\\\n    <p className=\\\\\\\\\\\\\\\"fs-6 fw-bold mb-1\\\\\\\\\\\\\\\">Description</p>\\\\\\\\n    <Widget\\\\\\\\n      src=\\\\\\\\\\\\\\\"devhub.near/widget/devhub.components.molecule.MarkdownEditor\\\\\\\\\\\\\\\"\\\\\\\\n      props={{\\\\\\\\n        data: { handler: state.handler, content: state.description },\\\\\\\\n        onChange: (content) => {\\\\\\\\n          State.update({ description: content, handler: \\\\\\\\\\\\\\\"update\\\\\\\\\\\\\\\" });\\\\\\\\n          textareaInputHandler(content);\\\\\\\\n        },\\\\\\\\n      }}\\\\\\\\n    />\\\\\\\\n    {autocompleteEnabled && state.showAccountAutocomplete && (\\\\\\\\n      <AutoComplete>\\\\\\\\n        <Widget\\\\\\\\n          src=\\\\\\\\\\\\\\\"near/widget/AccountAutocomplete\\\\\\\\\\\\\\\"\\\\\\\\n          props={{\\\\\\\\n            term: state.text.split(\\\\\\\\\\\\\\\"@\\\\\\\\\\\\\\\").pop(),\\\\\\\\n            onSelect: autoCompleteAccountId,\\\\\\\\n            onClose: () => State.update({ showAccountAutocomplete: false }),\\\\\\\\n          }}\\\\\\\\n        />\\\\\\\\n      </AutoComplete>\\\\\\\\n    )}\\\\\\\\n  </div>\\\\\\\\n);\\\\\\\\n\\\\\\\\nconst isFundraisingDiv = (\\\\\\\\n  // This is jank with just btns and not radios. But the radios were glitchy af\\\\\\\\n  <>\\\\\\\\n    <div class=\\\\\\\\\\\\\\\"mb-2\\\\\\\\\\\\\\\">\\\\\\\\n      <p class=\\\\\\\\\\\\\\\"fs-6 fw-bold mb-1\\\\\\\\\\\\\\\">\\\\\\\\n        Are you seeking funding for your solution?\\\\\\\\n        <span class=\\\\\\\\\\\\\\\"text-muted fw-normal\\\\\\\\\\\\\\\">(Optional)</span>\\\\\\\\n      </p>\\\\\\\\n      <div class=\\\\\\\\\\\\\\\"form-check form-check-inline\\\\\\\\\\\\\\\">\\\\\\\\n        <label class=\\\\\\\\\\\\\\\"form-check-label\\\\\\\\\\\\\\\">\\\\\\\\n          <button\\\\\\\\n            className=\\\\\\\\\\\\\\\"btn btn-light p-0\\\\\\\\\\\\\\\"\\\\\\\\n            style={{\\\\\\\\n              backgroundColor: state.seekingFunding ? \\\\\\\\\\\\\\\"#0C7283\\\\\\\\\\\\\\\" : \\\\\\\\\\\\\\\"inherit\\\\\\\\\\\\\\\",\\\\\\\\n              color: \\\\\\\\\\\\\\\"#f3f3f3\\\\\\\\\\\\\\\",\\\\\\\\n              border: \\\\\\\\\\\\\\\"solid #D9D9D9\\\\\\\\\\\\\\\",\\\\\\\\n              borderRadius: \\\\\\\\\\\\\\\"100%\\\\\\\\\\\\\\\",\\\\\\\\n              height: \\\\\\\\\\\\\\\"20px\\\\\\\\\\\\\\\",\\\\\\\\n              width: \\\\\\\\\\\\\\\"20px\\\\\\\\\\\\\\\",\\\\\\\\n            }}\\\\\\\\n            onClick={() => State.update({ seekingFunding: true })}\\\\\\\\n          />\\\\\\\\n          Yes\\\\\\\\n        </label>\\\\\\\\n      </div>\\\\\\\\n      <div class=\\\\\\\\\\\\\\\"form-check form-check-inline\\\\\\\\\\\\\\\">\\\\\\\\n        <label class=\\\\\\\\\\\\\\\"form-check-label\\\\\\\\\\\\\\\">\\\\\\\\n          <button\\\\\\\\n            className=\\\\\\\\\\\\\\\"btn btn-light p-0\\\\\\\\\\\\\\\"\\\\\\\\n            style={{\\\\\\\\n              backgroundColor: !state.seekingFunding ? \\\\\\\\\\\\\\\"#0C7283\\\\\\\\\\\\\\\" : \\\\\\\\\\\\\\\"inherit\\\\\\\\\\\\\\\",\\\\\\\\n              color: \\\\\\\\\\\\\\\"#f3f3f3\\\\\\\\\\\\\\\",\\\\\\\\n              border: \\\\\\\\\\\\\\\"solid #D9D9D9\\\\\\\\\\\\\\\",\\\\\\\\n              borderRadius: \\\\\\\\\\\\\\\"100%\\\\\\\\\\\\\\\",\\\\\\\\n              height: \\\\\\\\\\\\\\\"20px\\\\\\\\\\\\\\\",\\\\\\\\n              width: \\\\\\\\\\\\\\\"20px\\\\\\\\\\\\\\\",\\\\\\\\n            }}\\\\\\\\n            onClick={() => State.update({ seekingFunding: false })}\\\\\\\\n          />\\\\\\\\n          No\\\\\\\\n        </label>\\\\\\\\n      </div>\\\\\\\\n    </div>\\\\\\\\n  </>\\\\\\\\n);\\\\\\\\n\\\\\\\\nconst fundraisingDiv = (\\\\\\\\n  <div class=\\\\\\\\\\\\\\\"d-flex flex-column mb-2\\\\\\\\\\\\\\\">\\\\\\\\n    <div className=\\\\\\\\\\\\\\\"col-lg-6  mb-2\\\\\\\\\\\\\\\">\\\\\\\\n      Currency\\\\\\\\n      <select\\\\\\\\n        onChange={(event) => State.update({ token: event.target.value })}\\\\\\\\n        class=\\\\\\\\\\\\\\\"form-select\\\\\\\\\\\\\\\"\\\\\\\\n        aria-label=\\\\\\\\\\\\\\\"Default select\\\\\\\\\\\\\\\"\\\\\\\\n      >\\\\\\\\n        <option selected value=\\\\\\\\\\\\\\\"USDT\\\\\\\\\\\\\\\">\\\\\\\\n          USDT\\\\\\\\n        </option>\\\\\\\\n        <option value=\\\\\\\\\\\\\\\"NEAR\\\\\\\\\\\\\\\">NEAR</option>\\\\\\\\n      </select>\\\\\\\\n    </div>\\\\\\\\n    <div className=\\\\\\\\\\\\\\\"col-lg-6 mb-2\\\\\\\\\\\\\\\">\\\\\\\\n      Requested amount <span class=\\\\\\\\\\\\\\\"text-muted fw-normal\\\\\\\\\\\\\\\">(Numbers Only)</span>\\\\\\\\n      <input\\\\\\\\n        type=\\\\\\\\\\\\\\\"number\\\\\\\\\\\\\\\"\\\\\\\\n        value={parseInt(state.amount) > 0 ? state.amount : \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\"}\\\\\\\\n        min={0}\\\\\\\\n        onChange={(event) =>\\\\\\\\n          State.update({\\\\\\\\n            amount: Number(\\\\\\\\n              event.target.value.toString().replace(/e/g, \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\")\\\\\\\\n            ).toString(),\\\\\\\\n          })\\\\\\\\n        }\\\\\\\\n      />\\\\\\\\n    </div>\\\\\\\\n    <div className=\\\\\\\\\\\\\\\"col-lg-6 mb-2\\\\\\\\\\\\\\\">\\\\\\\\n      <p class=\\\\\\\\\\\\\\\"mb-1\\\\\\\\\\\\\\\">\\\\\\\\n        Requested sponsor <span class=\\\\\\\\\\\\\\\"text-muted fw-normal\\\\\\\\\\\\\\\">(Optional)</span>\\\\\\\\n      </p>\\\\\\\\n      <p style={{ fontSize: \\\\\\\\\\\\\\\"13px\\\\\\\\\\\\\\\" }} class=\\\\\\\\\\\\\\\"m-0 text-muted fw-light\\\\\\\\\\\\\\\">\\\\\\\\n        If you are requesting funding from a specific sponsor, please enter\\\\\\\\n        their username.\\\\\\\\n      </p>\\\\\\\\n      <div class=\\\\\\\\\\\\\\\"input-group flex-nowrap\\\\\\\\\\\\\\\">\\\\\\\\n        <span class=\\\\\\\\\\\\\\\"input-group-text\\\\\\\\\\\\\\\" id=\\\\\\\\\\\\\\\"addon-wrapping\\\\\\\\\\\\\\\">\\\\\\\\n          @\\\\\\\\n        </span>\\\\\\\\n        <input\\\\\\\\n          type=\\\\\\\\\\\\\\\"text\\\\\\\\\\\\\\\"\\\\\\\\n          class=\\\\\\\\\\\\\\\"form-control\\\\\\\\\\\\\\\"\\\\\\\\n          placeholder=\\\\\\\\\\\\\\\"Enter username\\\\\\\\\\\\\\\"\\\\\\\\n          value={state.supervisor}\\\\\\\\n          onChange={(event) => State.update({ supervisor: event.target.value })}\\\\\\\\n        />\\\\\\\\n      </div>\\\\\\\\n    </div>\\\\\\\\n  </div>\\\\\\\\n);\\\\\\\\n\\\\\\\\nfunction generateDescription(text, amount, token, supervisor, seekingFunding) {\\\\\\\\n  const fundingText =\\\\\\\\n    amount > 0 && token ? `###### Requested amount: ${amount} ${token}\\\\\\\\\\\\\\\\n` : \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\";\\\\\\\\n  const supervisorText = supervisor\\\\\\\\n    ? `###### Requested sponsor: @${supervisor}\\\\\\\\\\\\\\\\n`\\\\\\\\n    : \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\";\\\\\\\\n  return seekingFunding ? `${fundingText}${supervisorText}${text}` : text;\\\\\\\\n}\\\\\\\\n\\\\\\\\nreturn (\\\\\\\\n  <div class=\\\\\\\\\\\\\\\"bg-light d-flex flex-column flex-grow-1 w-100\\\\\\\\\\\\\\\">\\\\\\\\n    <div class=\\\\\\\\\\\\\\\"mx-5 mb-5\\\\\\\\\\\\\\\">\\\\\\\\n      <div aria-label=\\\\\\\\\\\\\\\"breadcrumb\\\\\\\\\\\\\\\">\\\\\\\\n        <ol class=\\\\\\\\\\\\\\\"breadcrumb\\\\\\\\\\\\\\\">\\\\\\\\n          <li class=\\\\\\\\\\\\\\\"breadcrumb-item\\\\\\\\\\\\\\\">\\\\\\\\n            <Link\\\\\\\\n              style={{\\\\\\\\n                color: \\\\\\\\\\\\\\\"#3252A6\\\\\\\\\\\\\\\",\\\\\\\\n              }}\\\\\\\\n              className=\\\\\\\\\\\\\\\"fw-bold\\\\\\\\\\\\\\\"\\\\\\\\n              to={href({\\\\\\\\n                widgetSrc: \\\\\\\\\\\\\\\"devhub.near/widget/app\\\\\\\\\\\\\\\",\\\\\\\\n                params: { page: \\\\\\\\\\\\\\\"feed\\\\\\\\\\\\\\\" },\\\\\\\\n              })}\\\\\\\\n            >\\\\\\\\n              DevHub\\\\\\\\n            </Link>\\\\\\\\n          </li>\\\\\\\\n          <li class=\\\\\\\\\\\\\\\"breadcrumb-item active\\\\\\\\\\\\\\\" aria-current=\\\\\\\\\\\\\\\"page\\\\\\\\\\\\\\\">\\\\\\\\n            Create new\\\\\\\\n          </li>\\\\\\\\n        </ol>\\\\\\\\n      </div>\\\\\\\\n      {props.transactionHashes ? (\\\\\\\\n        <>\\\\\\\\n          Post created successfully. Back to{\\\\\\\\\\\\\\\" \\\\\\\\\\\\\\\"}\\\\\\\\n          <Link\\\\\\\\n            style={{\\\\\\\\n              color: \\\\\\\\\\\\\\\"#3252A6\\\\\\\\\\\\\\\",\\\\\\\\n            }}\\\\\\\\n            className=\\\\\\\\\\\\\\\"fw-bold\\\\\\\\\\\\\\\"\\\\\\\\n            to={href({\\\\\\\\n              widgetSrc: \\\\\\\\\\\\\\\"devhub.near/widget/app\\\\\\\\\\\\\\\",\\\\\\\\n              params: { page: \\\\\\\\\\\\\\\"feed\\\\\\\\\\\\\\\" },\\\\\\\\n            })}\\\\\\\\n          >\\\\\\\\n            feed\\\\\\\\n          </Link>\\\\\\\\n        </>\\\\\\\\n      ) : (\\\\\\\\n        <>\\\\\\\\n          <h4>Create a new post</h4>\\\\\\\\n          <p>{state.seekingFunding}</p>\\\\\\\\n          <div class=\\\\\\\\\\\\\\\"card border-light\\\\\\\\\\\\\\\">\\\\\\\\n            <div class=\\\\\\\\\\\\\\\"card-body\\\\\\\\\\\\\\\">\\\\\\\\n              <p class=\\\\\\\\\\\\\\\"card-title fw-bold fs-6\\\\\\\\\\\\\\\">What do you want to create?</p>\\\\\\\\n              <div class=\\\\\\\\\\\\\\\"d-flex flex-row gap-2\\\\\\\\\\\\\\\">\\\\\\\\n                <button\\\\\\\\n                  onClick={onIdeaClick}\\\\\\\\n                  type=\\\\\\\\\\\\\\\"button\\\\\\\\\\\\\\\"\\\\\\\\n                  class={`btn btn-outline-secondary`}\\\\\\\\n                  style={\\\\\\\\n                    state.postType === \\\\\\\\\\\\\\\"Idea\\\\\\\\\\\\\\\"\\\\\\\\n                      ? {\\\\\\\\n                          backgroundColor: \\\\\\\\\\\\\\\"#0C7283\\\\\\\\\\\\\\\",\\\\\\\\n                          color: \\\\\\\\\\\\\\\"#f3f3f3\\\\\\\\\\\\\\\",\\\\\\\\n                        }\\\\\\\\n                      : {}\\\\\\\\n                  }\\\\\\\\n                >\\\\\\\\n                  <i class=\\\\\\\\\\\\\\\"bi bi-lightbulb\\\\\\\\\\\\\\\"></i>\\\\\\\\n                  Idea\\\\\\\\n                </button>\\\\\\\\n                <button\\\\\\\\n                  onClick={onSolutionClick}\\\\\\\\n                  type=\\\\\\\\\\\\\\\"button\\\\\\\\\\\\\\\"\\\\\\\\n                  class={`btn btn-outline-secondary`}\\\\\\\\n                  style={\\\\\\\\n                    state.postType !== \\\\\\\\\\\\\\\"Idea\\\\\\\\\\\\\\\"\\\\\\\\n                      ? {\\\\\\\\n                          backgroundColor: \\\\\\\\\\\\\\\"#0C7283\\\\\\\\\\\\\\\",\\\\\\\\n                          color: \\\\\\\\\\\\\\\"#f3f3f3\\\\\\\\\\\\\\\",\\\\\\\\n                        }\\\\\\\\n                      : {}\\\\\\\\n                  }\\\\\\\\n                >\\\\\\\\n                  <i class=\\\\\\\\\\\\\\\"bi bi-rocket\\\\\\\\\\\\\\\"></i>\\\\\\\\n                  Solution\\\\\\\\n                </button>\\\\\\\\n              </div>\\\\\\\\n              <p class=\\\\\\\\\\\\\\\"text-muted w-75 my-1\\\\\\\\\\\\\\\">\\\\\\\\n                {state.postType === \\\\\\\\\\\\\\\"Idea\\\\\\\\\\\\\\\"\\\\\\\\n                  ? \\\\\\\\\\\\\\\"Get feedback from the community about a problem, opportunity, or need.\\\\\\\\\\\\\\\"\\\\\\\\n                  : \\\\\\\\\\\\\\\"Provide a specific proposal or implementation to an idea, optionally requesting funding. If your solution relates to an existing idea, please reply to the original post with a solution.\\\\\\\\\\\\\\\"}\\\\\\\\n              </p>\\\\\\\\n              {state.warning && (\\\\\\\\n                <div\\\\\\\\n                  class=\\\\\\\\\\\\\\\"alert alert-warning alert-dismissible fade show\\\\\\\\\\\\\\\"\\\\\\\\n                  role=\\\\\\\\\\\\\\\"alert\\\\\\\\\\\\\\\"\\\\\\\\n                >\\\\\\\\n                  {state.warning}\\\\\\\\n                  <button\\\\\\\\n                    type=\\\\\\\\\\\\\\\"button\\\\\\\\\\\\\\\"\\\\\\\\n                    class=\\\\\\\\\\\\\\\"btn-close\\\\\\\\\\\\\\\"\\\\\\\\n                    data-bs-dismiss=\\\\\\\\\\\\\\\"alert\\\\\\\\\\\\\\\"\\\\\\\\n                    aria-label=\\\\\\\\\\\\\\\"Close\\\\\\\\\\\\\\\"\\\\\\\\n                    onClick={() => State.update({ warning: \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\" })}\\\\\\\\n                  ></button>\\\\\\\\n                </div>\\\\\\\\n              )}\\\\\\\\n              <div className=\\\\\\\\\\\\\\\"row\\\\\\\\\\\\\\\">\\\\\\\\n                {nameDiv}\\\\\\\\n                {descriptionDiv}\\\\\\\\n                {labelEditor}\\\\\\\\n                {state.postType === \\\\\\\\\\\\\\\"Solution\\\\\\\\\\\\\\\" && isFundraisingDiv}\\\\\\\\n                {state.seekingFunding && fundraisingDiv}\\\\\\\\n              </div>\\\\\\\\n              <button\\\\\\\\n                style={{\\\\\\\\n                  width: \\\\\\\\\\\\\\\"7rem\\\\\\\\\\\\\\\",\\\\\\\\n                  backgroundColor: \\\\\\\\\\\\\\\"#0C7283\\\\\\\\\\\\\\\",\\\\\\\\n                  color: \\\\\\\\\\\\\\\"#f3f3f3\\\\\\\\\\\\\\\",\\\\\\\\n                }}\\\\\\\\n                disabled={\\\\\\\\n                  state.seekingFunding && (!state.amount || state.amount < 1)\\\\\\\\n                }\\\\\\\\n                className=\\\\\\\\\\\\\\\"btn btn-light mb-2 p-3\\\\\\\\\\\\\\\"\\\\\\\\n                onClick={onSubmit}\\\\\\\\n              >\\\\\\\\n                Submit\\\\\\\\n              </button>\\\\\\\\n            </div>\\\\\\\\n            <div class=\\\\\\\\\\\\\\\"bg-light d-flex flex-row p-1 border-bottom\\\\\\\\\\\\\\\"></div>\\\\\\\\n            <div class=\\\\\\\\\\\\\\\"card-body\\\\\\\\\\\\\\\">\\\\\\\\n              <p class=\\\\\\\\\\\\\\\"text-muted m-0\\\\\\\\\\\\\\\">Preview</p>\\\\\\\\n              <div>\\\\\\\\n                <Widget\\\\\\\\n                  src=\\\\\\\\\\\\\\\"devhub.near/widget/devhub.entity.post.Post\\\\\\\\\\\\\\\"\\\\\\\\n                  props={{\\\\\\\\n                    isPreview: true,\\\\\\\\n                    id: 0, // irrelevant\\\\\\\\n                    post: {\\\\\\\\n                      author_id: state.author_id,\\\\\\\\n                      likes: [],\\\\\\\\n                      snapshot: {\\\\\\\\n                        editor_id: state.editor_id,\\\\\\\\n                        labels: state.labelStrings,\\\\\\\\n                        post_type: state.postType,\\\\\\\\n                        name: state.name,\\\\\\\\n                        description: generateDescription(\\\\\\\\n                          state.description,\\\\\\\\n                          state.amount,\\\\\\\\n                          state.token,\\\\\\\\n                          state.supervisor,\\\\\\\\n                          state.seekingFunding\\\\\\\\n                        ),\\\\\\\\n                        github_link: state.githubLink,\\\\\\\\n                      },\\\\\\\\n                    },\\\\\\\\n                  }}\\\\\\\\n                />\\\\\\\\n              </div>\\\\\\\\n            </div>\\\\\\\\n          </div>\\\\\\\\n        </>\\\\\\\\n      )}\\\\\\\\n    </div>\\\\\\\\n  </div>\\\\\\\\n);\\\\\\\\n\"}, \"devhub.entity.post.PostEditor\": {\"\": \"/* INCLUDE: \\\\\\\\\\\\\\\"core/lib/autocomplete\\\\\\\\\\\\\\\" */\\\\\\\\nconst autocompleteEnabled = true;\\\\\\\\n\\\\\\\\nconst AutoComplete = styled.div`\\\\\\\\n  z-index: 5;\\\\\\\\n\\\\\\\\n  > div > div {\\\\\\\\n    padding: calc(var(--padding) / 2);\\\\\\\\n  }\\\\\\\\n`;\\\\\\\\n\\\\\\\\nfunction textareaInputHandler(value) {\\\\\\\\n  const showAccountAutocomplete = /@[\\\\\\\\\\\\\\\\w][^\\\\\\\\\\\\\\\\s]*$/.test(value);\\\\\\\\n  State.update((lastKnownState) => ({\\\\\\\\n    ...lastKnownState,\\\\\\\\n    text: value,\\\\\\\\n    showAccountAutocomplete,\\\\\\\\n  }));\\\\\\\\n}\\\\\\\\n\\\\\\\\nfunction autoCompleteAccountId(id) {\\\\\\\\n  let description = state.description.replace(/[\\\\\\\\\\\\\\\\s]{0,1}@[^\\\\\\\\\\\\\\\\s]*$/, \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\");\\\\\\\\n  description = `${description} @${id}`.trim() + \\\\\\\\\\\\\\\" \\\\\\\\\\\\\\\";\\\\\\\\n  State.update((lastKnownState) => ({\\\\\\\\n    ...lastKnownState,\\\\\\\\n    description,\\\\\\\\n    showAccountAutocomplete: false,\\\\\\\\n  }));\\\\\\\\n}\\\\\\\\n/* END_INCLUDE: \\\\\\\\\\\\\\\"core/lib/autocomplete\\\\\\\\\\\\\\\" */\\\\\\\\n\\\\\\\\nconst postType = props.postType ?? \\\\\\\\\\\\\\\"Sponsorship\\\\\\\\\\\\\\\";\\\\\\\\nconst parentId = props.parentId ?? null;\\\\\\\\nconst postId = props.postId ?? null;\\\\\\\\nconst mode = props.mode ?? \\\\\\\\\\\\\\\"Create\\\\\\\\\\\\\\\";\\\\\\\\n\\\\\\\\nconst referralLabels = props.referral ? [`referral:${props.referral}`] : [];\\\\\\\\nconst labelStrings = (props.labels ?? []).concat(referralLabels);\\\\\\\\n\\\\\\\\nconst labels = labelStrings.map((s) => {\\\\\\\\n  return { name: s };\\\\\\\\n});\\\\\\\\n\\\\\\\\ninitState({\\\\\\\\n  seekingFunding: false,\\\\\\\\n  author_id: context.accountId,\\\\\\\\n  // Should be a list of objects with field \\\\\\\\\\\\\\\"name\\\\\\\\\\\\\\\".\\\\\\\\n  labels,\\\\\\\\n  // Should be a list of labels as strings.\\\\\\\\n  // Both of the label structures should be modified together.\\\\\\\\n  labelStrings,\\\\\\\\n  postType,\\\\\\\\n  name: props.name ?? \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\",\\\\\\\\n  description: props.description ?? \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\",\\\\\\\\n  amount: props.amount ?? \\\\\\\\\\\\\\\"0\\\\\\\\\\\\\\\",\\\\\\\\n  token: props.token ?? \\\\\\\\\\\\\\\"USDT\\\\\\\\\\\\\\\",\\\\\\\\n  supervisor: props.supervisor ?? \\\\\\\\\\\\\\\"neardevdao.near\\\\\\\\\\\\\\\",\\\\\\\\n  githubLink: props.githubLink ?? \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\",\\\\\\\\n  warning: \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\",\\\\\\\\n  draftStateApplied: false,\\\\\\\\n});\\\\\\\\n\\\\\\\\nif (!state.draftStateApplied && props.draftState) {\\\\\\\\n  State.update({ ...props.draftState, draftStateApplied: true });\\\\\\\\n}\\\\\\\\n\\\\\\\\nlet fields = {\\\\\\\\n  Comment: [\\\\\\\\\\\\\\\"description\\\\\\\\\\\\\\\"],\\\\\\\\n  Idea: [\\\\\\\\\\\\\\\"name\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"description\\\\\\\\\\\\\\\"],\\\\\\\\n  Solution: [\\\\\\\\\\\\\\\"name\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"description\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"fund_raising\\\\\\\\\\\\\\\"],\\\\\\\\n  Attestation: [\\\\\\\\\\\\\\\"name\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"description\\\\\\\\\\\\\\\"],\\\\\\\\n  Sponsorship: [\\\\\\\\n    \\\\\\\\\\\\\\\"name\\\\\\\\\\\\\\\",\\\\\\\\n    \\\\\\\\\\\\\\\"description\\\\\\\\\\\\\\\",\\\\\\\\n    \\\\\\\\\\\\\\\"amount\\\\\\\\\\\\\\\",\\\\\\\\n    \\\\\\\\\\\\\\\"sponsorship_token\\\\\\\\\\\\\\\",\\\\\\\\n    \\\\\\\\\\\\\\\"supervisor\\\\\\\\\\\\\\\",\\\\\\\\n  ],\\\\\\\\n  Github: [\\\\\\\\\\\\\\\"githubLink\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"name\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"description\\\\\\\\\\\\\\\"],\\\\\\\\n}[postType];\\\\\\\\n\\\\\\\\n// This must be outside onClick, because Near.view returns null at first, and when the view call finished, it returns true/false.\\\\\\\\n// If checking this inside onClick, it will give `null` and we cannot tell the result is true or false.\\\\\\\\nlet grantNotify = Near.view(\\\\\\\\\\\\\\\"social.near\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"is_write_permission_granted\\\\\\\\\\\\\\\", {\\\\\\\\n  predecessor_id: \\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\",\\\\\\\\n  key: context.accountId + \\\\\\\\\\\\\\\"/index/notify\\\\\\\\\\\\\\\",\\\\\\\\n});\\\\\\\\nif (grantNotify === null) {\\\\\\\\n  return;\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst tokenMapping = {\\\\\\\\n  NEAR: \\\\\\\\\\\\\\\"NEAR\\\\\\\\\\\\\\\",\\\\\\\\n  USDT: {\\\\\\\\n    NEP141: {\\\\\\\\n      address: \\\\\\\\\\\\\\\"usdt.tether-token.near\\\\\\\\\\\\\\\",\\\\\\\\n    },\\\\\\\\n  },\\\\\\\\n  USDC: {\\\\\\\\n    NEP141: {\\\\\\\\n      address:\\\\\\\\n        \\\\\\\\\\\\\\\"17208628f84f5d6ad33f0da3bbbeb27ffcb398eac501a31bd6ad2011e36133a1\\\\\\\\\\\\\\\",\\\\\\\\n    },\\\\\\\\n  },\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst onSubmit = () => {\\\\\\\\n  let labels = state.labelStrings;\\\\\\\\n  var body = {\\\\\\\\n    Comment: { description: state.description, comment_version: \\\\\\\\\\\\\\\"V2\\\\\\\\\\\\\\\" },\\\\\\\\n    Idea: {\\\\\\\\n      name: state.name,\\\\\\\\n      description: state.description,\\\\\\\\n      idea_version: \\\\\\\\\\\\\\\"V1\\\\\\\\\\\\\\\",\\\\\\\\n    },\\\\\\\\n    Solution: {\\\\\\\\n      name: state.name,\\\\\\\\n      description: generateDescription(\\\\\\\\n        state.description,\\\\\\\\n        state.amount,\\\\\\\\n        state.token,\\\\\\\\n        state.supervisor,\\\\\\\\n        state.seekingFunding\\\\\\\\n      ),\\\\\\\\n      solution_version: \\\\\\\\\\\\\\\"V1\\\\\\\\\\\\\\\",\\\\\\\\n    },\\\\\\\\n    Attestation: {\\\\\\\\n      name: state.name,\\\\\\\\n      description: state.description,\\\\\\\\n      attestation_version: \\\\\\\\\\\\\\\"V1\\\\\\\\\\\\\\\",\\\\\\\\n    },\\\\\\\\n    Sponsorship: {\\\\\\\\n      name: state.name,\\\\\\\\n      description: state.description,\\\\\\\\n      amount: state.amount,\\\\\\\\n      sponsorship_token: tokenMapping[state.token],\\\\\\\\n      supervisor: state.supervisor,\\\\\\\\n      sponsorship_version: \\\\\\\\\\\\\\\"V1\\\\\\\\\\\\\\\",\\\\\\\\n    },\\\\\\\\n    Github: {\\\\\\\\n      name: state.name,\\\\\\\\n      description: state.description,\\\\\\\\n      github_version: \\\\\\\\\\\\\\\"V0\\\\\\\\\\\\\\\",\\\\\\\\n      github_link: state.githubLink,\\\\\\\\n    },\\\\\\\\n  }[postType];\\\\\\\\n  body[\\\\\\\\\\\\\\\"post_type\\\\\\\\\\\\\\\"] = postType;\\\\\\\\n  if (!context.accountId) {\\\\\\\\n    return;\\\\\\\\n  }\\\\\\\\n  let txn = [];\\\\\\\\n  if (mode == \\\\\\\\\\\\\\\"Create\\\\\\\\\\\\\\\") {\\\\\\\\n    props.onDraftStateChange(\\\\\\\\n      Object.assign({}, state, { parent_post_id: parentId })\\\\\\\\n    );\\\\\\\\n    txn.push({\\\\\\\\n      contractName: \\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\",\\\\\\\\n      methodName: \\\\\\\\\\\\\\\"add_post\\\\\\\\\\\\\\\",\\\\\\\\n      args: {\\\\\\\\n        parent_id: parentId,\\\\\\\\n        labels,\\\\\\\\n        body,\\\\\\\\n      },\\\\\\\\n      deposit: Big(10).pow(21).mul(2),\\\\\\\\n      gas: Big(10).pow(12).mul(100),\\\\\\\\n    });\\\\\\\\n  } else if (mode == \\\\\\\\\\\\\\\"Edit\\\\\\\\\\\\\\\") {\\\\\\\\n    props.onDraftStateChange(\\\\\\\\n      Object.assign({}, state, { edit_post_id: postId })\\\\\\\\n    );\\\\\\\\n    txn.push({\\\\\\\\n      contractName: \\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\",\\\\\\\\n      methodName: \\\\\\\\\\\\\\\"edit_post\\\\\\\\\\\\\\\",\\\\\\\\n      args: {\\\\\\\\n        id: postId,\\\\\\\\n        labels,\\\\\\\\n        body,\\\\\\\\n      },\\\\\\\\n      deposit: Big(10).pow(21).mul(2),\\\\\\\\n      gas: Big(10).pow(12).mul(100),\\\\\\\\n    });\\\\\\\\n  }\\\\\\\\n  if (mode == \\\\\\\\\\\\\\\"Create\\\\\\\\\\\\\\\" || mode == \\\\\\\\\\\\\\\"Edit\\\\\\\\\\\\\\\") {\\\\\\\\n    if (grantNotify === false) {\\\\\\\\n      txn.unshift({\\\\\\\\n        contractName: \\\\\\\\\\\\\\\"social.near\\\\\\\\\\\\\\\",\\\\\\\\n        methodName: \\\\\\\\\\\\\\\"grant_write_permission\\\\\\\\\\\\\\\",\\\\\\\\n        args: {\\\\\\\\n          predecessor_id: \\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\",\\\\\\\\n          keys: [context.accountId + \\\\\\\\\\\\\\\"/index/notify\\\\\\\\\\\\\\\"],\\\\\\\\n        },\\\\\\\\n        deposit: Big(10).pow(23),\\\\\\\\n        gas: Big(10).pow(12).mul(30),\\\\\\\\n      });\\\\\\\\n    }\\\\\\\\n    Near.call(txn);\\\\\\\\n  }\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst normalizeLabel = (label) =>\\\\\\\\n  label\\\\\\\\n    .replaceAll(/[- \\\\\\\\\\\\\\\\.]/g, \\\\\\\\\\\\\\\"_\\\\\\\\\\\\\\\")\\\\\\\\n    .replaceAll(/[^\\\\\\\\\\\\\\\\w]+/g, \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\")\\\\\\\\n    .replaceAll(/_+/g, \\\\\\\\\\\\\\\"-\\\\\\\\\\\\\\\")\\\\\\\\n    .replace(/^-+/, \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\")\\\\\\\\n    .replace(/-+$/, \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\")\\\\\\\\n    .toLowerCase()\\\\\\\\n    .trim(\\\\\\\\\\\\\\\"-\\\\\\\\\\\\\\\");\\\\\\\\n\\\\\\\\nconst checkLabel = (label) => {\\\\\\\\n  Near.asyncView(\\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"is_allowed_to_use_labels\\\\\\\\\\\\\\\", {\\\\\\\\n    editor: context.accountId,\\\\\\\\n    labels: [label],\\\\\\\\n  }).then((allowed) => {\\\\\\\\n    if (allowed) {\\\\\\\\n      State.update({ warning: \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\" });\\\\\\\\n    } else {\\\\\\\\n      State.update({\\\\\\\\n        warning:\\\\\\\\n          \\\\\\\\\\\\'The label \\\\\\\\\\\\\\\"\\\\\\\\\\\\' +\\\\\\\\n          label +\\\\\\\\n          \\\\\\\\\\\\'\\\\\\\\\\\\\\\" is protected and can only be added by moderators\\\\\\\\\\\\',\\\\\\\\n      });\\\\\\\\n      return;\\\\\\\\n    }\\\\\\\\n  });\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst setLabels = (labels) => {\\\\\\\\n  labels = labels.map((o) => {\\\\\\\\n    o.name = normalizeLabel(o.name);\\\\\\\\n    return o;\\\\\\\\n  });\\\\\\\\n  if (labels.length < state.labels.length) {\\\\\\\\n    let oldLabels = new Set(state.labels.map((label) => label.name));\\\\\\\\n    for (let label of labels) {\\\\\\\\n      oldLabels.delete(label.name);\\\\\\\\n    }\\\\\\\\n    let removed = oldLabels.values().next().value;\\\\\\\\n    Near.asyncView(\\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"is_allowed_to_use_labels\\\\\\\\\\\\\\\", {\\\\\\\\n      editor: context.accountId,\\\\\\\\n      labels: [removed],\\\\\\\\n    }).then((allowed) => {\\\\\\\\n      if (allowed) {\\\\\\\\n        let labelStrings = labels.map(({ name }) => name);\\\\\\\\n        State.update({ labels, labelStrings });\\\\\\\\n      } else {\\\\\\\\n        State.update({\\\\\\\\n          warning:\\\\\\\\n            \\\\\\\\\\\\'The label \\\\\\\\\\\\\\\"\\\\\\\\\\\\' +\\\\\\\\n            removed +\\\\\\\\n            \\\\\\\\\\\\'\\\\\\\\\\\\\\\" is protected and can only be updated by moderators\\\\\\\\\\\\',\\\\\\\\n        });\\\\\\\\n        return;\\\\\\\\n      }\\\\\\\\n    });\\\\\\\\n  } else {\\\\\\\\n    let labelStrings = labels.map((o) => {\\\\\\\\n      return o.name;\\\\\\\\n    });\\\\\\\\n    State.update({ labels, labelStrings });\\\\\\\\n  }\\\\\\\\n};\\\\\\\\nconst existingLabelStrings =\\\\\\\\n  Near.view(\\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"get_all_allowed_labels\\\\\\\\\\\\\\\", {\\\\\\\\n    editor: context.accountId,\\\\\\\\n  }) ?? [];\\\\\\\\nconst existingLabelSet = new Set(existingLabelStrings);\\\\\\\\nconst existingLabels = existingLabelStrings\\\\\\\\n  .filter((it) => it !== \\\\\\\\\\\\\\\"blog\\\\\\\\\\\\\\\") // remove blog label so users cannot publish blogs from feed\\\\\\\\n  .map((s) => {\\\\\\\\n    return { name: s };\\\\\\\\n  });\\\\\\\\n\\\\\\\\nconst labelEditor = (\\\\\\\\n  <div className=\\\\\\\\\\\\\\\"col-lg-12  mb-2\\\\\\\\\\\\\\\">\\\\\\\\n    Labels:\\\\\\\\n    <Typeahead\\\\\\\\n      multiple\\\\\\\\n      labelKey=\\\\\\\\\\\\\\\"name\\\\\\\\\\\\\\\"\\\\\\\\n      onInputChange={checkLabel}\\\\\\\\n      onChange={setLabels}\\\\\\\\n      options={existingLabels}\\\\\\\\n      placeholder=\\\\\\\\\\\\\\\"near.social, widget, NEP, standard, protocol, tool\\\\\\\\\\\\\\\"\\\\\\\\n      selected={state.labels}\\\\\\\\n      positionFixed\\\\\\\\n      allowNew={(results, props) => {\\\\\\\\n        return (\\\\\\\\n          !existingLabelSet.has(props.text) &&\\\\\\\\n          props.text.toLowerCase() !== \\\\\\\\\\\\\\\"blog\\\\\\\\\\\\\\\" && // dont allow adding \\\\\\\\\\\\\\\"Blog\\\\\\\\\\\\\\\"\\\\\\\\n          props.selected.filter((selected) => selected.name === props.text)\\\\\\\\n            .length == 0 &&\\\\\\\\n          Near.view(\\\\\\\\\\\\\\\"devgovgigs.near\\\\\\\\\\\\\\\", \\\\\\\\\\\\\\\"is_allowed_to_use_labels\\\\\\\\\\\\\\\", {\\\\\\\\n            editor: context.accountId,\\\\\\\\n            labels: [props.text],\\\\\\\\n          })\\\\\\\\n        );\\\\\\\\n      }}\\\\\\\\n    />\\\\\\\\n  </div>\\\\\\\\n);\\\\\\\\n\\\\\\\\nconst githubLinkDiv = (\\\\\\\\n  <div className=\\\\\\\\\\\\\\\"col-lg-12  mb-2\\\\\\\\\\\\\\\">\\\\\\\\n    Github Issue URL:\\\\\\\\n    <input\\\\\\\\n      type=\\\\\\\\\\\\\\\"text\\\\\\\\\\\\\\\"\\\\\\\\n      value={state.githubLink}\\\\\\\\n      onChange={(event) => State.update({ githubLink: event.target.value })}\\\\\\\\n    />\\\\\\\\n  </div>\\\\\\\\n);\\\\\\\\n\\\\\\\\nconst nameDiv = (\\\\\\\\n  <div className=\\\\\\\\\\\\\\\"col-lg-6  mb-2\\\\\\\\\\\\\\\">\\\\\\\\n    Title:\\\\\\\\n    <input\\\\\\\\n      type=\\\\\\\\\\\\\\\"text\\\\\\\\\\\\\\\"\\\\\\\\n      value={state.name}\\\\\\\\n      onChange={(event) => State.update({ name: event.target.value })}\\\\\\\\n    />\\\\\\\\n  </div>\\\\\\\\n);\\\\\\\\n\\\\\\\\nconst amountDiv = (\\\\\\\\n  <div className=\\\\\\\\\\\\\\\"col-lg-6  mb-2\\\\\\\\\\\\\\\">\\\\\\\\n    Amount:\\\\\\\\n    <input\\\\\\\\n      type=\\\\\\\\\\\\\\\"text\\\\\\\\\\\\\\\"\\\\\\\\n      value={state.amount}\\\\\\\\n      onChange={(event) => State.update({ amount: event.target.value })}\\\\\\\\n    />\\\\\\\\n  </div>\\\\\\\\n);\\\\\\\\n\\\\\\\\nconst tokenDiv = (\\\\\\\\n  <div className=\\\\\\\\\\\\\\\"col-lg-6 mb-2\\\\\\\\\\\\\\\">\\\\\\\\n    Currency\\\\\\\\n    <select\\\\\\\\n      onChange={(event) => State.update({ token: event.target.value })}\\\\\\\\n      class=\\\\\\\\\\\\\\\"form-select\\\\\\\\\\\\\\\"\\\\\\\\n      aria-label=\\\\\\\\\\\\\\\"Select currency\\\\\\\\\\\\\\\"\\\\\\\\n      value={state.token}\\\\\\\\n    >\\\\\\\\n      <option value=\\\\\\\\\\\\\\\"USDT\\\\\\\\\\\\\\\">USDT</option>\\\\\\\\n      <option value=\\\\\\\\\\\\\\\"NEAR\\\\\\\\\\\\\\\">NEAR</option>\\\\\\\\n      <option value=\\\\\\\\\\\\\\\"USDC\\\\\\\\\\\\\\\">USDC</option>\\\\\\\\n    </select>\\\\\\\\n  </div>\\\\\\\\n);\\\\\\\\n\\\\\\\\nconst supervisorDiv = (\\\\\\\\n  <div className=\\\\\\\\\\\\\\\"col-lg-6 mb-2\\\\\\\\\\\\\\\">\\\\\\\\n    Supervisor:\\\\\\\\n    <input\\\\\\\\n      type=\\\\\\\\\\\\\\\"text\\\\\\\\\\\\\\\"\\\\\\\\n      value={state.supervisor}\\\\\\\\n      onChange={(event) => State.update({ supervisor: event.target.value })}\\\\\\\\n    />\\\\\\\\n  </div>\\\\\\\\n);\\\\\\\\n\\\\\\\\nconst callDescriptionDiv = () => {\\\\\\\\n  return (\\\\\\\\n    <div className=\\\\\\\\\\\\\\\"col-lg-12  mb-2\\\\\\\\\\\\\\\">\\\\\\\\n      Description:\\\\\\\\n      <br />\\\\\\\\n      <Widget\\\\\\\\n        src={\\\\\\\\\\\\\\\"devhub.near/widget/devhub.components.molecule.MarkdownEditor\\\\\\\\\\\\\\\"}\\\\\\\\n        props={{\\\\\\\\n          data: { handler: state.handler, content: state.description },\\\\\\\\n          onChange: (content) => {\\\\\\\\n            State.update({ description: content, handler: \\\\\\\\\\\\\\\"update\\\\\\\\\\\\\\\" });\\\\\\\\n            textareaInputHandler(content);\\\\\\\\n          },\\\\\\\\n        }}\\\\\\\\n      />\\\\\\\\n      {autocompleteEnabled && state.showAccountAutocomplete && (\\\\\\\\n        <AutoComplete>\\\\\\\\n          <Widget\\\\\\\\n            src=\\\\\\\\\\\\\\\"near/widget/AccountAutocomplete\\\\\\\\\\\\\\\"\\\\\\\\n            props={{\\\\\\\\n              term: state.text.split(\\\\\\\\\\\\\\\"@\\\\\\\\\\\\\\\").pop(),\\\\\\\\n              onSelect: autoCompleteAccountId,\\\\\\\\n              onClose: () => State.update({ showAccountAutocomplete: false }),\\\\\\\\n            }}\\\\\\\\n          />\\\\\\\\n        </AutoComplete>\\\\\\\\n      )}\\\\\\\\n    </div>\\\\\\\\n  );\\\\\\\\n};\\\\\\\\n\\\\\\\\nconst disclaimer = (\\\\\\\\n  <p>\\\\\\\\n    <i>\\\\\\\\n      * Note, all projects that were granted sponsorships are required to pass\\\\\\\\n      KYC to receive the funding.\\\\\\\\n    </i>\\\\\\\\n  </p>\\\\\\\\n);\\\\\\\\n\\\\\\\\nconst isFundraisingDiv = (\\\\\\\\n  // This is jank with just btns and not radios. But the radios were glitchy af\\\\\\\\n  <>\\\\\\\\n    <div class=\\\\\\\\\\\\\\\"mb-2\\\\\\\\\\\\\\\">\\\\\\\\n      <p class=\\\\\\\\\\\\\\\"fs-6 fw-bold mb-1\\\\\\\\\\\\\\\">\\\\\\\\n        Are you seeking funding for your solution?\\\\\\\\n        <span class=\\\\\\\\\\\\\\\"text-muted fw-normal\\\\\\\\\\\\\\\">(Optional)</span>\\\\\\\\n      </p>\\\\\\\\n      <div class=\\\\\\\\\\\\\\\"form-check form-check-inline\\\\\\\\\\\\\\\">\\\\\\\\n        <label class=\\\\\\\\\\\\\\\"form-check-label\\\\\\\\\\\\\\\">\\\\\\\\n          <button\\\\\\\\n            className=\\\\\\\\\\\\\\\"btn btn-light p-0\\\\\\\\\\\\\\\"\\\\\\\\n            style={{\\\\\\\\n              backgroundColor: state.seekingFunding ? \\\\\\\\\\\\\\\"#0C7283\\\\\\\\\\\\\\\" : \\\\\\\\\\\\\\\"inherit\\\\\\\\\\\\\\\",\\\\\\\\n              color: \\\\\\\\\\\\\\\"#f3f3f3\\\\\\\\\\\\\\\",\\\\\\\\n              border: \\\\\\\\\\\\\\\"solid #D9D9D9\\\\\\\\\\\\\\\",\\\\\\\\n              borderRadius: \\\\\\\\\\\\\\\"100%\\\\\\\\\\\\\\\",\\\\\\\\n              height: \\\\\\\\\\\\\\\"20px\\\\\\\\\\\\\\\",\\\\\\\\n              width: \\\\\\\\\\\\\\\"20px\\\\\\\\\\\\\\\",\\\\\\\\n            }}\\\\\\\\n            onClick={() => State.update({ seekingFunding: true })}\\\\\\\\n          />\\\\\\\\n          Yes\\\\\\\\n        </label>\\\\\\\\n      </div>\\\\\\\\n      <div class=\\\\\\\\\\\\\\\"form-check form-check-inline\\\\\\\\\\\\\\\">\\\\\\\\n        <label class=\\\\\\\\\\\\\\\"form-check-label\\\\\\\\\\\\\\\">\\\\\\\\n          <button\\\\\\\\n            className=\\\\\\\\\\\\\\\"btn btn-light p-0\\\\\\\\\\\\\\\"\\\\\\\\n            style={{\\\\\\\\n              backgroundColor: !state.seekingFunding ? \\\\\\\\\\\\\\\"#0C7283\\\\\\\\\\\\\\\" : \\\\\\\\\\\\\\\"inherit\\\\\\\\\\\\\\\",\\\\\\\\n              color: \\\\\\\\\\\\\\\"#f3f3f3\\\\\\\\\\\\\\\",\\\\\\\\n              border: \\\\\\\\\\\\\\\"solid #D9D9D9\\\\\\\\\\\\\\\",\\\\\\\\n              borderRadius: \\\\\\\\\\\\\\\"100%\\\\\\\\\\\\\\\",\\\\\\\\n              height: \\\\\\\\\\\\\\\"20px\\\\\\\\\\\\\\\",\\\\\\\\n              width: \\\\\\\\\\\\\\\"20px\\\\\\\\\\\\\\\",\\\\\\\\n            }}\\\\\\\\n            onClick={() => State.update({ seekingFunding: false })}\\\\\\\\n          />\\\\\\\\n          No\\\\\\\\n        </label>\\\\\\\\n      </div>\\\\\\\\n    </div>\\\\\\\\n  </>\\\\\\\\n);\\\\\\\\n\\\\\\\\nconst fundraisingDiv = (\\\\\\\\n  <div class=\\\\\\\\\\\\\\\"d-flex flex-column mb-2\\\\\\\\\\\\\\\">\\\\\\\\n    <div className=\\\\\\\\\\\\\\\"col-lg-6 mb-2\\\\\\\\\\\\\\\">\\\\\\\\n      Currency\\\\\\\\n      <select\\\\\\\\n        onChange={(event) => State.update({ token: event.target.value })}\\\\\\\\n        class=\\\\\\\\\\\\\\\"form-select\\\\\\\\\\\\\\\"\\\\\\\\n        aria-label=\\\\\\\\\\\\\\\"Default select example\\\\\\\\\\\\\\\"\\\\\\\\n        value={state.token}\\\\\\\\n      >\\\\\\\\n        <option value=\\\\\\\\\\\\\\\"USDT\\\\\\\\\\\\\\\">USDT</option>\\\\\\\\n        <option value=\\\\\\\\\\\\\\\"NEAR\\\\\\\\\\\\\\\">NEAR</option>\\\\\\\\n        <option value=\\\\\\\\\\\\\\\"USDC\\\\\\\\\\\\\\\">USDC</option>\\\\\\\\n      </select>\\\\\\\\n    </div>\\\\\\\\n    <div className=\\\\\\\\\\\\\\\"col-lg-6 mb-2\\\\\\\\\\\\\\\">\\\\\\\\n      Requested amount\\\\\\\\n      <span class=\\\\\\\\\\\\\\\"text-muted fw-normal\\\\\\\\\\\\\\\">(Numbers Only)</span>\\\\\\\\n      <input\\\\\\\\n        type=\\\\\\\\\\\\\\\"number\\\\\\\\\\\\\\\"\\\\\\\\n        value={parseInt(state.amount) > 0 ? state.amount : \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\"}\\\\\\\\n        min={0}\\\\\\\\n        onChange={(event) => {\\\\\\\\n          State.update({\\\\\\\\n            amount: Number(\\\\\\\\n              event.target.value.toString().replace(/e/g, \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\")\\\\\\\\n            ).toString(),\\\\\\\\n          });\\\\\\\\n        }}\\\\\\\\n      />\\\\\\\\n    </div>\\\\\\\\n    <div className=\\\\\\\\\\\\\\\"col-lg-6 mb-2\\\\\\\\\\\\\\\">\\\\\\\\n      <p class=\\\\\\\\\\\\\\\"mb-1\\\\\\\\\\\\\\\">\\\\\\\\n        Requested sponsor\\\\\\\\n        <span class=\\\\\\\\\\\\\\\"text-muted fw-normal\\\\\\\\\\\\\\\">(Optional)</span>\\\\\\\\n      </p>\\\\\\\\n      <p style={{ fontSize: \\\\\\\\\\\\\\\"13px\\\\\\\\\\\\\\\" }} class=\\\\\\\\\\\\\\\"m-0 text-muted fw-light\\\\\\\\\\\\\\\">\\\\\\\\n        If you are requesting funding from a specific sponsor, please enter\\\\\\\\n        their username.\\\\\\\\n      </p>\\\\\\\\n      <div class=\\\\\\\\\\\\\\\"input-group flex-nowrap\\\\\\\\\\\\\\\">\\\\\\\\n        <span class=\\\\\\\\\\\\\\\"input-group-text\\\\\\\\\\\\\\\" id=\\\\\\\\\\\\\\\"addon-wrapping\\\\\\\\\\\\\\\">\\\\\\\\n          @\\\\\\\\n        </span>\\\\\\\\n        <input\\\\\\\\n          type=\\\\\\\\\\\\\\\"text\\\\\\\\\\\\\\\"\\\\\\\\n          class=\\\\\\\\\\\\\\\"form-control\\\\\\\\\\\\\\\"\\\\\\\\n          placeholder=\\\\\\\\\\\\\\\"Enter username\\\\\\\\\\\\\\\"\\\\\\\\n          value={state.supervisor}\\\\\\\\n          onChange={(event) => State.update({ supervisor: event.target.value })}\\\\\\\\n        />\\\\\\\\n      </div>\\\\\\\\n    </div>\\\\\\\\n  </div>\\\\\\\\n);\\\\\\\\n\\\\\\\\nfunction generateDescription(text, amount, token, supervisor, seekingFunding) {\\\\\\\\n  const fundingText =\\\\\\\\n    amount > 0 && token ? `###### Requested amount: ${amount} ${token}\\\\\\\\\\\\\\\\n` : \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\";\\\\\\\\n  const supervisorText = supervisor\\\\\\\\n    ? `###### Requested sponsor: @${supervisor}\\\\\\\\\\\\\\\\n`\\\\\\\\n    : \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\";\\\\\\\\n  return seekingFunding ? `${fundingText}${supervisorText}${text}` : text;\\\\\\\\n}\\\\\\\\n\\\\\\\\nconst renamedPostType = postType == \\\\\\\\\\\\\\\"Submission\\\\\\\\\\\\\\\" ? \\\\\\\\\\\\\\\"Solution\\\\\\\\\\\\\\\" : postType;\\\\\\\\n// Below there is a weird code with fields.includes(\\\\\\\\\\\\\\\"githubLink\\\\\\\\\\\\\\\") ternary operator.\\\\\\\\n// This is to hack around rendering bug of near.social.\\\\\\\\nreturn (\\\\\\\\n  <div className=\\\\\\\\\\\\\\\"card\\\\\\\\\\\\\\\">\\\\\\\\n    <div className=\\\\\\\\\\\\\\\"card-header\\\\\\\\\\\\\\\">\\\\\\\\n      {mode} {renamedPostType}\\\\\\\\n    </div>\\\\\\\\n\\\\\\\\n    <div class=\\\\\\\\\\\\\\\"card-body\\\\\\\\\\\\\\\">\\\\\\\\n      {state.warning && (\\\\\\\\n        <div\\\\\\\\n          class=\\\\\\\\\\\\\\\"alert alert-warning alert-dismissible fade show\\\\\\\\\\\\\\\"\\\\\\\\n          role=\\\\\\\\\\\\\\\"alert\\\\\\\\\\\\\\\"\\\\\\\\n        >\\\\\\\\n          {state.warning}\\\\\\\\n          <button\\\\\\\\n            type=\\\\\\\\\\\\\\\"button\\\\\\\\\\\\\\\"\\\\\\\\n            class=\\\\\\\\\\\\\\\"btn-close\\\\\\\\\\\\\\\"\\\\\\\\n            data-bs-dismiss=\\\\\\\\\\\\\\\"alert\\\\\\\\\\\\\\\"\\\\\\\\n            aria-label=\\\\\\\\\\\\\\\"Close\\\\\\\\\\\\\\\"\\\\\\\\n            onClick={() => State.update({ warning: \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\" })}\\\\\\\\n          ></button>\\\\\\\\n        </div>\\\\\\\\n      )}\\\\\\\\n      {/* This statement around the githubLinkDiv creates a weird render bug\\\\\\\\n      where the title renders extra on state change. */}\\\\\\\\n      {fields.includes(\\\\\\\\\\\\\\\"githubLink\\\\\\\\\\\\\\\") ? (\\\\\\\\n        <div className=\\\\\\\\\\\\\\\"row\\\\\\\\\\\\\\\">\\\\\\\\n          {fields.includes(\\\\\\\\\\\\\\\"githubLink\\\\\\\\\\\\\\\") && githubLinkDiv}\\\\\\\\n          {labelEditor}\\\\\\\\n          {fields.includes(\\\\\\\\\\\\\\\"name\\\\\\\\\\\\\\\") && nameDiv}\\\\\\\\n          {fields.includes(\\\\\\\\\\\\\\\"description\\\\\\\\\\\\\\\") && callDescriptionDiv()}\\\\\\\\n        </div>\\\\\\\\n      ) : (\\\\\\\\n        <div className=\\\\\\\\\\\\\\\"row\\\\\\\\\\\\\\\">\\\\\\\\n          {labelEditor}\\\\\\\\n          {fields.includes(\\\\\\\\\\\\\\\"name\\\\\\\\\\\\\\\") && nameDiv}\\\\\\\\n          {fields.includes(\\\\\\\\\\\\\\\"amount\\\\\\\\\\\\\\\") && amountDiv}\\\\\\\\n          {fields.includes(\\\\\\\\\\\\\\\"sponsorship_token\\\\\\\\\\\\\\\") && tokenDiv}\\\\\\\\n          {fields.includes(\\\\\\\\\\\\\\\"supervisor\\\\\\\\\\\\\\\") && supervisorDiv}\\\\\\\\n          {fields.includes(\\\\\\\\\\\\\\\"description\\\\\\\\\\\\\\\") && callDescriptionDiv()}\\\\\\\\n          {fields.includes(\\\\\\\\\\\\\\\"fund_raising\\\\\\\\\\\\\\\") && isFundraisingDiv}\\\\\\\\n          {state.seekingFunding &&\\\\\\\\n            fields.includes(\\\\\\\\\\\\\\\"fund_raising\\\\\\\\\\\\\\\") &&\\\\\\\\n            fundraisingDiv}\\\\\\\\n        </div>\\\\\\\\n      )}\\\\\\\\n      <button\\\\\\\\n        style={{\\\\\\\\n          width: \\\\\\\\\\\\\\\"7rem\\\\\\\\\\\\\\\",\\\\\\\\n          backgroundColor: \\\\\\\\\\\\\\\"#0C7283\\\\\\\\\\\\\\\",\\\\\\\\n          color: \\\\\\\\\\\\\\\"#f3f3f3\\\\\\\\\\\\\\\",\\\\\\\\n        }}\\\\\\\\n        disabled={state.seekingFunding && (!state.amount || state.amount < 1)}\\\\\\\\n        className=\\\\\\\\\\\\\\\"btn btn-light mb-2 p-3\\\\\\\\\\\\\\\"\\\\\\\\n        onClick={onSubmit}\\\\\\\\n      >\\\\\\\\n        Submit\\\\\\\\n      </button>\\\\\\\\n      {disclaimer}\\\\\\\\n    </div>\\\\\\\\n    <div class=\\\\\\\\\\\\\\\"card-footer\\\\\\\\\\\\\\\">\\\\\\\\n      Preview:\\\\\\\\n      <Widget\\\\\\\\n        src=\\\\\\\\\\\\\\\"devhub.near/widget/devhub.entity.post.Post\\\\\\\\\\\\\\\"\\\\\\\\n        props={{\\\\\\\\n          isPreview: true,\\\\\\\\n          id: 0, // irrelevant\\\\\\\\n          post: {\\\\\\\\n            author_id: state.author_id,\\\\\\\\n            likes: [],\\\\\\\\n            snapshot: {\\\\\\\\n              editor_id: state.editor_id,\\\\\\\\n              labels: state.labelStrings,\\\\\\\\n              post_type: postType,\\\\\\\\n              name: state.name,\\\\\\\\n              description:\\\\\\\\n                postType == \\\\\\\\\\\\\\\"Solution\\\\\\\\\\\\\\\"\\\\\\\\n                  ? generateDescription(\\\\\\\\n                      state.description,\\\\\\\\n                      state.amount,\\\\\\\\n                      state.token,\\\\\\\\n                      state.supervisor,\\\\\\\\n                      state.seekingFunding\\\\\\\\n                    )\\\\\\\\n                  : state.description,\\\\\\\\n              amount: state.amount,\\\\\\\\n              sponsorship_token: state.token,\\\\\\\\n              supervisor: state.supervisor,\\\\\\\\n              github_link: state.githubLink,\\\\\\\\n            },\\\\\\\\n          },\\\\\\\\n        }}\\\\\\\\n      />\\\\\\\\n    </div>\\\\\\\\n  </div>\\\\\\\\n);\\\\\\\\n\"}}}}}"
      }
    ],
    "actions_agg": {
      "deposit": 0
    },
    "outcomes": {
      "status": true
    },
    "outcomes_agg": {
      "transaction_fee": 1.4553304476812e+21
    }
  }
]